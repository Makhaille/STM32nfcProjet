
STM32nfcProjet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001953c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a18  08019678  08019678  00029678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b090  0801b090  00030174  2**0
                  CONTENTS
  4 .ARM          00000008  0801b090  0801b090  0002b090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b098  0801b098  00030174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b098  0801b098  0002b098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b09c  0801b09c  0002b09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0801b0a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c04  20000174  0801b214  00030174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003d78  0801b214  00033d78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039ca1  00000000  00000000  0003019d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006e4a  00000000  00000000  00069e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c48  00000000  00000000  00070c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001990  00000000  00000000  000728d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021be8  00000000  00000000  00074260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00024689  00000000  00000000  00095e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a6dd4  00000000  00000000  000ba4d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001612a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007490  00000000  00000000  00161320  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000174 	.word	0x20000174
 8000158:	00000000 	.word	0x00000000
 800015c:	08019660 	.word	0x08019660

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000178 	.word	0x20000178
 8000178:	08019660 	.word	0x08019660

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b974 	b.w	800048c <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	468c      	mov	ip, r1
 80001c2:	4604      	mov	r4, r0
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d14b      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4615      	mov	r5, r2
 80001ce:	d967      	bls.n	80002a0 <__udivmoddi4+0xe4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0720 	rsb	r7, r2, #32
 80001da:	fa01 f302 	lsl.w	r3, r1, r2
 80001de:	fa20 f707 	lsr.w	r7, r0, r7
 80001e2:	4095      	lsls	r5, r2
 80001e4:	ea47 0c03 	orr.w	ip, r7, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001ee:	fbbc f7fe 	udiv	r7, ip, lr
 80001f2:	fa1f f885 	uxth.w	r8, r5
 80001f6:	fb0e c317 	mls	r3, lr, r7, ip
 80001fa:	fb07 f908 	mul.w	r9, r7, r8
 80001fe:	0c21      	lsrs	r1, r4, #16
 8000200:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000204:	4599      	cmp	r9, r3
 8000206:	d909      	bls.n	800021c <__udivmoddi4+0x60>
 8000208:	18eb      	adds	r3, r5, r3
 800020a:	f107 31ff 	add.w	r1, r7, #4294967295
 800020e:	f080 811c 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000212:	4599      	cmp	r9, r3
 8000214:	f240 8119 	bls.w	800044a <__udivmoddi4+0x28e>
 8000218:	3f02      	subs	r7, #2
 800021a:	442b      	add	r3, r5
 800021c:	eba3 0309 	sub.w	r3, r3, r9
 8000220:	fbb3 f0fe 	udiv	r0, r3, lr
 8000224:	fb0e 3310 	mls	r3, lr, r0, r3
 8000228:	fb00 f108 	mul.w	r1, r0, r8
 800022c:	b2a4      	uxth	r4, r4
 800022e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000232:	42a1      	cmp	r1, r4
 8000234:	d909      	bls.n	800024a <__udivmoddi4+0x8e>
 8000236:	192c      	adds	r4, r5, r4
 8000238:	f100 33ff 	add.w	r3, r0, #4294967295
 800023c:	f080 8107 	bcs.w	800044e <__udivmoddi4+0x292>
 8000240:	42a1      	cmp	r1, r4
 8000242:	f240 8104 	bls.w	800044e <__udivmoddi4+0x292>
 8000246:	3802      	subs	r0, #2
 8000248:	442c      	add	r4, r5
 800024a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024e:	2700      	movs	r7, #0
 8000250:	1a64      	subs	r4, r4, r1
 8000252:	b11e      	cbz	r6, 800025c <__udivmoddi4+0xa0>
 8000254:	2300      	movs	r3, #0
 8000256:	40d4      	lsrs	r4, r2
 8000258:	e9c6 4300 	strd	r4, r3, [r6]
 800025c:	4639      	mov	r1, r7
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0xbe>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80ec 	beq.w	8000444 <__udivmoddi4+0x288>
 800026c:	2700      	movs	r7, #0
 800026e:	e9c6 0100 	strd	r0, r1, [r6]
 8000272:	4638      	mov	r0, r7
 8000274:	4639      	mov	r1, r7
 8000276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027a:	fab3 f783 	clz	r7, r3
 800027e:	2f00      	cmp	r7, #0
 8000280:	d148      	bne.n	8000314 <__udivmoddi4+0x158>
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xd0>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80fb 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb61 0303 	sbc.w	r3, r1, r3
 8000292:	2001      	movs	r0, #1
 8000294:	469c      	mov	ip, r3
 8000296:	2e00      	cmp	r6, #0
 8000298:	d0e0      	beq.n	800025c <__udivmoddi4+0xa0>
 800029a:	e9c6 4c00 	strd	r4, ip, [r6]
 800029e:	e7dd      	b.n	800025c <__udivmoddi4+0xa0>
 80002a0:	b902      	cbnz	r2, 80002a4 <__udivmoddi4+0xe8>
 80002a2:	deff      	udf	#255	; 0xff
 80002a4:	fab2 f282 	clz	r2, r2
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	f040 808f 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ae:	2701      	movs	r7, #1
 80002b0:	1b49      	subs	r1, r1, r5
 80002b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002b6:	fa1f f985 	uxth.w	r9, r5
 80002ba:	fbb1 fef8 	udiv	lr, r1, r8
 80002be:	fb08 111e 	mls	r1, r8, lr, r1
 80002c2:	fb09 f00e 	mul.w	r0, r9, lr
 80002c6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ca:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002ce:	4298      	cmp	r0, r3
 80002d0:	d907      	bls.n	80002e2 <__udivmoddi4+0x126>
 80002d2:	18eb      	adds	r3, r5, r3
 80002d4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002d8:	d202      	bcs.n	80002e0 <__udivmoddi4+0x124>
 80002da:	4298      	cmp	r0, r3
 80002dc:	f200 80cd 	bhi.w	800047a <__udivmoddi4+0x2be>
 80002e0:	468e      	mov	lr, r1
 80002e2:	1a1b      	subs	r3, r3, r0
 80002e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ec:	fb09 f900 	mul.w	r9, r9, r0
 80002f0:	b2a4      	uxth	r4, r4
 80002f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	d907      	bls.n	800030a <__udivmoddi4+0x14e>
 80002fa:	192c      	adds	r4, r5, r4
 80002fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x14c>
 8000302:	45a1      	cmp	r9, r4
 8000304:	f200 80b6 	bhi.w	8000474 <__udivmoddi4+0x2b8>
 8000308:	4618      	mov	r0, r3
 800030a:	eba4 0409 	sub.w	r4, r4, r9
 800030e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000312:	e79e      	b.n	8000252 <__udivmoddi4+0x96>
 8000314:	f1c7 0520 	rsb	r5, r7, #32
 8000318:	40bb      	lsls	r3, r7
 800031a:	fa22 fc05 	lsr.w	ip, r2, r5
 800031e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000322:	fa21 f405 	lsr.w	r4, r1, r5
 8000326:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800032a:	fbb4 f9fe 	udiv	r9, r4, lr
 800032e:	fa1f f88c 	uxth.w	r8, ip
 8000332:	fb0e 4419 	mls	r4, lr, r9, r4
 8000336:	fa20 f305 	lsr.w	r3, r0, r5
 800033a:	40b9      	lsls	r1, r7
 800033c:	fb09 fa08 	mul.w	sl, r9, r8
 8000340:	4319      	orrs	r1, r3
 8000342:	0c0b      	lsrs	r3, r1, #16
 8000344:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000348:	45a2      	cmp	sl, r4
 800034a:	fa02 f207 	lsl.w	r2, r2, r7
 800034e:	fa00 f307 	lsl.w	r3, r0, r7
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f109 30ff 	add.w	r0, r9, #4294967295
 800035c:	f080 8088 	bcs.w	8000470 <__udivmoddi4+0x2b4>
 8000360:	45a2      	cmp	sl, r4
 8000362:	f240 8085 	bls.w	8000470 <__udivmoddi4+0x2b4>
 8000366:	f1a9 0902 	sub.w	r9, r9, #2
 800036a:	4464      	add	r4, ip
 800036c:	eba4 040a 	sub.w	r4, r4, sl
 8000370:	fbb4 f0fe 	udiv	r0, r4, lr
 8000374:	fb0e 4410 	mls	r4, lr, r0, r4
 8000378:	fb00 fa08 	mul.w	sl, r0, r8
 800037c:	b289      	uxth	r1, r1
 800037e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000382:	45a2      	cmp	sl, r4
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x1dc>
 8000386:	eb1c 0404 	adds.w	r4, ip, r4
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	d26b      	bcs.n	8000468 <__udivmoddi4+0x2ac>
 8000390:	45a2      	cmp	sl, r4
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0x2ac>
 8000394:	3802      	subs	r0, #2
 8000396:	4464      	add	r4, ip
 8000398:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039c:	fba0 8902 	umull	r8, r9, r0, r2
 80003a0:	eba4 040a 	sub.w	r4, r4, sl
 80003a4:	454c      	cmp	r4, r9
 80003a6:	4641      	mov	r1, r8
 80003a8:	46ce      	mov	lr, r9
 80003aa:	d354      	bcc.n	8000456 <__udivmoddi4+0x29a>
 80003ac:	d051      	beq.n	8000452 <__udivmoddi4+0x296>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d069      	beq.n	8000486 <__udivmoddi4+0x2ca>
 80003b2:	1a5a      	subs	r2, r3, r1
 80003b4:	eb64 040e 	sbc.w	r4, r4, lr
 80003b8:	fa04 f505 	lsl.w	r5, r4, r5
 80003bc:	fa22 f307 	lsr.w	r3, r2, r7
 80003c0:	40fc      	lsrs	r4, r7
 80003c2:	431d      	orrs	r5, r3
 80003c4:	e9c6 5400 	strd	r5, r4, [r6]
 80003c8:	2700      	movs	r7, #0
 80003ca:	e747      	b.n	800025c <__udivmoddi4+0xa0>
 80003cc:	4095      	lsls	r5, r2
 80003ce:	f1c2 0320 	rsb	r3, r2, #32
 80003d2:	fa21 f003 	lsr.w	r0, r1, r3
 80003d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003da:	fbb0 f7f8 	udiv	r7, r0, r8
 80003de:	fa1f f985 	uxth.w	r9, r5
 80003e2:	fb08 0017 	mls	r0, r8, r7, r0
 80003e6:	fa24 f303 	lsr.w	r3, r4, r3
 80003ea:	4091      	lsls	r1, r2
 80003ec:	fb07 fc09 	mul.w	ip, r7, r9
 80003f0:	430b      	orrs	r3, r1
 80003f2:	0c19      	lsrs	r1, r3, #16
 80003f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003f8:	458c      	cmp	ip, r1
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d907      	bls.n	8000410 <__udivmoddi4+0x254>
 8000400:	1869      	adds	r1, r5, r1
 8000402:	f107 30ff 	add.w	r0, r7, #4294967295
 8000406:	d231      	bcs.n	800046c <__udivmoddi4+0x2b0>
 8000408:	458c      	cmp	ip, r1
 800040a:	d92f      	bls.n	800046c <__udivmoddi4+0x2b0>
 800040c:	3f02      	subs	r7, #2
 800040e:	4429      	add	r1, r5
 8000410:	eba1 010c 	sub.w	r1, r1, ip
 8000414:	fbb1 f0f8 	udiv	r0, r1, r8
 8000418:	fb08 1c10 	mls	ip, r8, r0, r1
 800041c:	fb00 fe09 	mul.w	lr, r0, r9
 8000420:	b299      	uxth	r1, r3
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	458e      	cmp	lr, r1
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x27e>
 800042a:	1869      	adds	r1, r5, r1
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000430:	d218      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 8000432:	458e      	cmp	lr, r1
 8000434:	d916      	bls.n	8000464 <__udivmoddi4+0x2a8>
 8000436:	3802      	subs	r0, #2
 8000438:	4429      	add	r1, r5
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000442:	e73a      	b.n	80002ba <__udivmoddi4+0xfe>
 8000444:	4637      	mov	r7, r6
 8000446:	4630      	mov	r0, r6
 8000448:	e708      	b.n	800025c <__udivmoddi4+0xa0>
 800044a:	460f      	mov	r7, r1
 800044c:	e6e6      	b.n	800021c <__udivmoddi4+0x60>
 800044e:	4618      	mov	r0, r3
 8000450:	e6fb      	b.n	800024a <__udivmoddi4+0x8e>
 8000452:	4543      	cmp	r3, r8
 8000454:	d2ab      	bcs.n	80003ae <__udivmoddi4+0x1f2>
 8000456:	ebb8 0102 	subs.w	r1, r8, r2
 800045a:	eb69 020c 	sbc.w	r2, r9, ip
 800045e:	3801      	subs	r0, #1
 8000460:	4696      	mov	lr, r2
 8000462:	e7a4      	b.n	80003ae <__udivmoddi4+0x1f2>
 8000464:	4618      	mov	r0, r3
 8000466:	e7e8      	b.n	800043a <__udivmoddi4+0x27e>
 8000468:	4608      	mov	r0, r1
 800046a:	e795      	b.n	8000398 <__udivmoddi4+0x1dc>
 800046c:	4607      	mov	r7, r0
 800046e:	e7cf      	b.n	8000410 <__udivmoddi4+0x254>
 8000470:	4681      	mov	r9, r0
 8000472:	e77b      	b.n	800036c <__udivmoddi4+0x1b0>
 8000474:	3802      	subs	r0, #2
 8000476:	442c      	add	r4, r5
 8000478:	e747      	b.n	800030a <__udivmoddi4+0x14e>
 800047a:	f1ae 0e02 	sub.w	lr, lr, #2
 800047e:	442b      	add	r3, r5
 8000480:	e72f      	b.n	80002e2 <__udivmoddi4+0x126>
 8000482:	4638      	mov	r0, r7
 8000484:	e707      	b.n	8000296 <__udivmoddi4+0xda>
 8000486:	4637      	mov	r7, r6
 8000488:	e6e8      	b.n	800025c <__udivmoddi4+0xa0>
 800048a:	bf00      	nop

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <logUsartInit>:
  * @brief  This function initalize the UART handle.
	* @param	husart : already initalized handle to USART HW
  * @retval none :
  */
void logUsartInit(UART_HandleTypeDef *husart)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
    pLogUsart = husart;
 8000498:	4a03      	ldr	r2, [pc, #12]	; (80004a8 <logUsartInit+0x18>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6013      	str	r3, [r2, #0]
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	20000194 	.word	0x20000194

080004ac <logUsartTx>:
	* @param	dataLen : length of data to be transmitted
  * @retval ERR_INVALID_HANDLE : in case the SPI HW is not initalized yet
  * @retval others : HAL status
  */
uint8_t logUsartTx(uint8_t *data, uint16_t dataLen)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	460b      	mov	r3, r1
 80004b6:	807b      	strh	r3, [r7, #2]
  if(pLogUsart == 0)
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <logUsartTx+0x34>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d101      	bne.n	80004c4 <logUsartTx+0x18>
    return ERR_INVALID_HANDLE;
 80004c0:	2326      	movs	r3, #38	; 0x26
 80004c2:	e008      	b.n	80004d6 <logUsartTx+0x2a>

  return HAL_UART_Transmit(pLogUsart, data, dataLen, USART_TIMEOUT);
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <logUsartTx+0x34>)
 80004c6:	6818      	ldr	r0, [r3, #0]
 80004c8:	887a      	ldrh	r2, [r7, #2]
 80004ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ce:	6879      	ldr	r1, [r7, #4]
 80004d0:	f005 fb75 	bl	8005bbe <HAL_UART_Transmit>
 80004d4:	4603      	mov	r3, r0
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000194 	.word	0x20000194

080004e4 <logUsart>:

int logUsart(const char* format, ...)
{
 80004e4:	b40f      	push	{r0, r1, r2, r3}
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b0c2      	sub	sp, #264	; 0x108
 80004ea:	af00      	add	r7, sp, #0
  #if (USE_LOGGER == LOGGER_ON)
  {  
    #define LOG_BUFFER_SIZE 256
    char buf[LOG_BUFFER_SIZE];
    va_list argptr;
    va_start(argptr, format);
 80004ec:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80004f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    int cnt = vsnprintf(buf, LOG_BUFFER_SIZE, format, argptr);
 80004f4:	4638      	mov	r0, r7
 80004f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80004fa:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80004fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000502:	f018 fcd1 	bl	8018ea8 <vsniprintf>
 8000506:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    va_end(argptr);  
      
    /* */
    logUsartTx((uint8_t*)buf, strlen(buf));
 800050a:	463b      	mov	r3, r7
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff fe35 	bl	800017c <strlen>
 8000512:	4603      	mov	r3, r0
 8000514:	b29a      	uxth	r2, r3
 8000516:	463b      	mov	r3, r7
 8000518:	4611      	mov	r1, r2
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff ffc6 	bl	80004ac <logUsartTx>
    return cnt;
 8000520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  #else
  {
    return 0;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 8000524:	4618      	mov	r0, r3
 8000526:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800052a:	46bd      	mov	sp, r7
 800052c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000530:	b004      	add	sp, #16
 8000532:	4770      	bx	lr

08000534 <hex2Str>:

/* */

char* hex2Str(unsigned char * data, size_t dataLen)
{
 8000534:	b480      	push	{r7}
 8000536:	b089      	sub	sp, #36	; 0x24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  #if (USE_LOGGER == LOGGER_ON)
  {
    unsigned char * pin = data;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	61fb      	str	r3, [r7, #28]
    const char * hex = "0123456789ABCDEF";
 8000542:	4b36      	ldr	r3, [pc, #216]	; (800061c <hex2Str+0xe8>)
 8000544:	613b      	str	r3, [r7, #16]
    char * pout = hexStr[hexStrIdx];
 8000546:	4b36      	ldr	r3, [pc, #216]	; (8000620 <hex2Str+0xec>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	01db      	lsls	r3, r3, #7
 800054c:	4a35      	ldr	r2, [pc, #212]	; (8000624 <hex2Str+0xf0>)
 800054e:	4413      	add	r3, r2
 8000550:	61bb      	str	r3, [r7, #24]
    uint8_t i = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	75fb      	strb	r3, [r7, #23]
    uint8_t idx = hexStrIdx;
 8000556:	4b32      	ldr	r3, [pc, #200]	; (8000620 <hex2Str+0xec>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	73fb      	strb	r3, [r7, #15]
    size_t len;  
      
    if(dataLen == 0)
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d103      	bne.n	800056a <hex2Str+0x36>
    {
      pout[0] = 0;     
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	e042      	b.n	80005f0 <hex2Str+0xbc>
    } 
    else     
    {
      /* Trim data that doesn't fit in buffer */
      len = MIN( dataLen , (MAX_HEX_STR_LENGTH / 2) );
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b40      	cmp	r3, #64	; 0x40
 800056e:	bf28      	it	cs
 8000570:	2340      	movcs	r3, #64	; 0x40
 8000572:	60bb      	str	r3, [r7, #8]
        
      for(; i < (len - 1); ++i)
 8000574:	e01c      	b.n	80005b0 <hex2Str+0x7c>
      {
          *pout++ = hex[(*pin>>4)&0xF];
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	091b      	lsrs	r3, r3, #4
 800057c:	b2db      	uxtb	r3, r3
 800057e:	f003 030f 	and.w	r3, r3, #15
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	441a      	add	r2, r3
 8000586:	69bb      	ldr	r3, [r7, #24]
 8000588:	1c59      	adds	r1, r3, #1
 800058a:	61b9      	str	r1, [r7, #24]
 800058c:	7812      	ldrb	r2, [r2, #0]
 800058e:	701a      	strb	r2, [r3, #0]
          *pout++ = hex[(*pin++)&0xF];
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	1c5a      	adds	r2, r3, #1
 8000594:	61fa      	str	r2, [r7, #28]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	f003 030f 	and.w	r3, r3, #15
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	441a      	add	r2, r3
 80005a0:	69bb      	ldr	r3, [r7, #24]
 80005a2:	1c59      	adds	r1, r3, #1
 80005a4:	61b9      	str	r1, [r7, #24]
 80005a6:	7812      	ldrb	r2, [r2, #0]
 80005a8:	701a      	strb	r2, [r3, #0]
      for(; i < (len - 1); ++i)
 80005aa:	7dfb      	ldrb	r3, [r7, #23]
 80005ac:	3301      	adds	r3, #1
 80005ae:	75fb      	strb	r3, [r7, #23]
 80005b0:	7dfa      	ldrb	r2, [r7, #23]
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	3b01      	subs	r3, #1
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d3dd      	bcc.n	8000576 <hex2Str+0x42>
      }
      *pout++ = hex[(*pin>>4)&0xF];
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	091b      	lsrs	r3, r3, #4
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	f003 030f 	and.w	r3, r3, #15
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	441a      	add	r2, r3
 80005ca:	69bb      	ldr	r3, [r7, #24]
 80005cc:	1c59      	adds	r1, r3, #1
 80005ce:	61b9      	str	r1, [r7, #24]
 80005d0:	7812      	ldrb	r2, [r2, #0]
 80005d2:	701a      	strb	r2, [r3, #0]
      *pout++ = hex[(*pin)&0xF];
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	f003 030f 	and.w	r3, r3, #15
 80005dc:	693a      	ldr	r2, [r7, #16]
 80005de:	441a      	add	r2, r3
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	1c59      	adds	r1, r3, #1
 80005e4:	61b9      	str	r1, [r7, #24]
 80005e6:	7812      	ldrb	r2, [r2, #0]
 80005e8:	701a      	strb	r2, [r3, #0]
      *pout = 0;
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
    }    
    
    hexStrIdx++;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <hex2Str+0xec>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <hex2Str+0xec>)
 80005fa:	701a      	strb	r2, [r3, #0]
    hexStrIdx %= MAX_HEX_STR;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <hex2Str+0xec>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	f003 0303 	and.w	r3, r3, #3
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <hex2Str+0xec>)
 8000608:	701a      	strb	r2, [r3, #0]
    
    return hexStr[idx];
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	01db      	lsls	r3, r3, #7
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <hex2Str+0xf0>)
 8000610:	4413      	add	r3, r2
  #else
  {
    return NULL;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 8000612:	4618      	mov	r0, r3
 8000614:	3724      	adds	r7, #36	; 0x24
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	08019678 	.word	0x08019678
 8000620:	20000190 	.word	0x20000190
 8000624:	20003a90 	.word	0x20003a90

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f003 fe2d 	bl	800428c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f891 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f967 	bl	8000908 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063a:	f000 f93b 	bl	80008b4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800063e:	f000 f8d9 	bl	80007f4 <MX_SPI1_Init>
  MX_UART4_Init();
 8000642:	f000 f90d 	bl	8000860 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize driver*/
  spiInit(&hspi1);
 8000646:	483d      	ldr	r0, [pc, #244]	; (800073c <main+0x114>)
 8000648:	f002 fb46 	bl	8002cd8 <spiInit>

  /* Initialize log module */
  logUsartInit(&huart2);
 800064c:	483c      	ldr	r0, [pc, #240]	; (8000740 <main+0x118>)
 800064e:	f7ff ff1f 	bl	8000490 <logUsartInit>

  platformLog("Welcome to the NFC enabler application\r\n");
 8000652:	483c      	ldr	r0, [pc, #240]	; (8000744 <main+0x11c>)
 8000654:	f7ff ff46 	bl	80004e4 <logUsart>

  if( !demoIni() )
 8000658:	f000 fa86 	bl	8000b68 <demoIni>
 800065c:	4603      	mov	r3, r0
 800065e:	f083 0301 	eor.w	r3, r3, #1
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d01f      	beq.n	80006a8 <main+0x80>
    {
      /*
      * in case the rfal initalization failed signal it by flashing all LED
      * and stoping all operations
      */
      platformLog("Initialization failed..\r\n");
 8000668:	4837      	ldr	r0, [pc, #220]	; (8000748 <main+0x120>)
 800066a:	f7ff ff3b 	bl	80004e4 <logUsart>
      while(1)
      {
        platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	4836      	ldr	r0, [pc, #216]	; (800074c <main+0x124>)
 8000674:	f004 f965 	bl	8004942 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8000678:	2101      	movs	r1, #1
 800067a:	4835      	ldr	r0, [pc, #212]	; (8000750 <main+0x128>)
 800067c:	f004 f961 	bl	8004942 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8000680:	2110      	movs	r1, #16
 8000682:	4832      	ldr	r0, [pc, #200]	; (800074c <main+0x124>)
 8000684:	f004 f95d 	bl	8004942 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8000688:	2102      	movs	r1, #2
 800068a:	4830      	ldr	r0, [pc, #192]	; (800074c <main+0x124>)
 800068c:	f004 f959 	bl	8004942 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8000690:	2110      	movs	r1, #16
 8000692:	482f      	ldr	r0, [pc, #188]	; (8000750 <main+0x128>)
 8000694:	f004 f955 	bl	8004942 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8000698:	2120      	movs	r1, #32
 800069a:	482d      	ldr	r0, [pc, #180]	; (8000750 <main+0x128>)
 800069c:	f004 f951 	bl	8004942 <HAL_GPIO_TogglePin>
        platformDelay(100);
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f003 fe61 	bl	8004368 <HAL_Delay>
        platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80006a6:	e7e2      	b.n	800066e <main+0x46>
      }
    }
    else
    {
      platformLog("Initialization succeeded..\r\n");
 80006a8:	482a      	ldr	r0, [pc, #168]	; (8000754 <main+0x12c>)
 80006aa:	f7ff ff1b 	bl	80004e4 <logUsart>
      for (int i = 0; i < 6; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	e01e      	b.n	80006f2 <main+0xca>
      {
        platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80006b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b8:	4824      	ldr	r0, [pc, #144]	; (800074c <main+0x124>)
 80006ba:	f004 f942 	bl	8004942 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80006be:	2101      	movs	r1, #1
 80006c0:	4823      	ldr	r0, [pc, #140]	; (8000750 <main+0x128>)
 80006c2:	f004 f93e 	bl	8004942 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80006c6:	2110      	movs	r1, #16
 80006c8:	4820      	ldr	r0, [pc, #128]	; (800074c <main+0x124>)
 80006ca:	f004 f93a 	bl	8004942 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 80006ce:	2102      	movs	r1, #2
 80006d0:	481e      	ldr	r0, [pc, #120]	; (800074c <main+0x124>)
 80006d2:	f004 f936 	bl	8004942 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 80006d6:	2110      	movs	r1, #16
 80006d8:	481d      	ldr	r0, [pc, #116]	; (8000750 <main+0x128>)
 80006da:	f004 f932 	bl	8004942 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 80006de:	2120      	movs	r1, #32
 80006e0:	481b      	ldr	r0, [pc, #108]	; (8000750 <main+0x128>)
 80006e2:	f004 f92e 	bl	8004942 <HAL_GPIO_TogglePin>
        platformDelay(200);
 80006e6:	20c8      	movs	r0, #200	; 0xc8
 80006e8:	f003 fe3e 	bl	8004368 <HAL_Delay>
      for (int i = 0; i < 6; i++)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3301      	adds	r3, #1
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b05      	cmp	r3, #5
 80006f6:	dddd      	ble.n	80006b4 <main+0x8c>
      }

      platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2101      	movs	r1, #1
 80006fc:	4814      	ldr	r0, [pc, #80]	; (8000750 <main+0x128>)
 80006fe:	f004 f908 	bl	8004912 <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8000702:	2200      	movs	r2, #0
 8000704:	2110      	movs	r1, #16
 8000706:	4811      	ldr	r0, [pc, #68]	; (800074c <main+0x124>)
 8000708:	f004 f903 	bl	8004912 <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 800070c:	2200      	movs	r2, #0
 800070e:	2102      	movs	r1, #2
 8000710:	480e      	ldr	r0, [pc, #56]	; (800074c <main+0x124>)
 8000712:	f004 f8fe 	bl	8004912 <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8000716:	2200      	movs	r2, #0
 8000718:	2110      	movs	r1, #16
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <main+0x128>)
 800071c:	f004 f8f9 	bl	8004912 <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8000720:	2200      	movs	r2, #0
 8000722:	2120      	movs	r1, #32
 8000724:	480a      	ldr	r0, [pc, #40]	; (8000750 <main+0x128>)
 8000726:	f004 f8f4 	bl	8004912 <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <main+0x124>)
 8000732:	f004 f8ee 	bl	8004912 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 /* Run Demo Application */
	 demoCycle();
 8000736:	f000 fa71 	bl	8000c1c <demoCycle>
 800073a:	e7fc      	b.n	8000736 <main+0x10e>
 800073c:	20003cd4 	.word	0x20003cd4
 8000740:	20003d2c 	.word	0x20003d2c
 8000744:	0801968c 	.word	0x0801968c
 8000748:	080196b8 	.word	0x080196b8
 800074c:	40020000 	.word	0x40020000
 8000750:	40020400 	.word	0x40020400
 8000754:	080196d4 	.word	0x080196d4

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b092      	sub	sp, #72	; 0x48
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2234      	movs	r2, #52	; 0x34
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f018 fb69 	bl	8018e3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	463b      	mov	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <SystemClock_Config+0x98>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000782:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <SystemClock_Config+0x98>)
 8000784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000788:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078a:	2302      	movs	r3, #2
 800078c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000792:	2310      	movs	r3, #16
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079a:	2300      	movs	r3, #0
 800079c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800079e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80007a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80007a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 f902 	bl	80049b8 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007ba:	f000 f971 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2303      	movs	r3, #3
 80007c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	2101      	movs	r1, #1
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 fc1e 	bl	8005018 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007e2:	f000 f95d 	bl	8000aa0 <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3748      	adds	r7, #72	; 0x48
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_SPI1_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <MX_SPI1_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_SPI1_Init+0x64>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI1_Init+0x64>)
 800081a:	2201      	movs	r2, #1
 800081c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_SPI1_Init+0x64>)
 8000820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000824:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI1_Init+0x64>)
 8000828:	2218      	movs	r2, #24
 800082a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI1_Init+0x64>)
 8000840:	220a      	movs	r2, #10
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_SPI1_Init+0x64>)
 8000846:	f004 fe77 	bl	8005538 <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000850:	f000 f926 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20003cd4 	.word	0x20003cd4
 800085c:	40013000 	.word	0x40013000

08000860 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_UART4_Init+0x4c>)
 8000866:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_UART4_Init+0x50>)
 8000868:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_UART4_Init+0x4c>)
 800086c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000870:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_UART4_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_UART4_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_UART4_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_UART4_Init+0x4c>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_UART4_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_UART4_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_UART4_Init+0x4c>)
 8000898:	f005 f944 	bl	8005b24 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80008a2:	f000 f8fd 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20003c90 	.word	0x20003c90
 80008b0:	40004c00 	.word	0x40004c00

080008b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_USART2_UART_Init+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ec:	f005 f91a 	bl	8005b24 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008f6:	f000 f8d3 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20003d2c 	.word	0x20003d2c
 8000904:	40004400 	.word	0x40004400

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <MX_GPIO_Init+0x114>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a3e      	ldr	r2, [pc, #248]	; (8000a1c <MX_GPIO_Init+0x114>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <MX_GPIO_Init+0x114>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <MX_GPIO_Init+0x114>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a38      	ldr	r2, [pc, #224]	; (8000a1c <MX_GPIO_Init+0x114>)
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <MX_GPIO_Init+0x114>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f003 0320 	and.w	r3, r3, #32
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <MX_GPIO_Init+0x114>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4a32      	ldr	r2, [pc, #200]	; (8000a1c <MX_GPIO_Init+0x114>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	61d3      	str	r3, [r2, #28]
 800095a:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <MX_GPIO_Init+0x114>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <MX_GPIO_Init+0x114>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a2c      	ldr	r2, [pc, #176]	; (8000a1c <MX_GPIO_Init+0x114>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <MX_GPIO_Init+0x114>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_F_Pin|LED_B_Pin|LED_FIELD_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 7189 	mov.w	r1, #274	; 0x112
 8000984:	4826      	ldr	r0, [pc, #152]	; (8000a20 <MX_GPIO_Init+0x118>)
 8000986:	f003 ffc4 	bl	8004912 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_V_Pin|LED_AP2P_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2171      	movs	r1, #113	; 0x71
 800098e:	4825      	ldr	r0, [pc, #148]	; (8000a24 <MX_GPIO_Init+0x11c>)
 8000990:	f003 ffbf 	bl	8004912 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	481f      	ldr	r0, [pc, #124]	; (8000a28 <MX_GPIO_Init+0x120>)
 80009ac:	f003 fe0c 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_3911_Pin */
  GPIO_InitStruct.Pin = IRQ_3911_Pin;
 80009b0:	2301      	movs	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_3911_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4816      	ldr	r0, [pc, #88]	; (8000a20 <MX_GPIO_Init+0x118>)
 80009c6:	f003 fdff 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_F_Pin LED_B_Pin LED_FIELD_Pin */
  GPIO_InitStruct.Pin = LED_F_Pin|LED_B_Pin|LED_FIELD_Pin;
 80009ca:	f44f 7389 	mov.w	r3, #274	; 0x112
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	480f      	ldr	r0, [pc, #60]	; (8000a20 <MX_GPIO_Init+0x118>)
 80009e4:	f003 fdf0 	bl	80045c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_V_Pin LED_AP2P_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_V_Pin|LED_AP2P_Pin|SPI1_CS_Pin;
 80009e8:	2371      	movs	r3, #113	; 0x71
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4809      	ldr	r0, [pc, #36]	; (8000a24 <MX_GPIO_Init+0x11c>)
 8000a00:	f003 fde2 	bl	80045c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2006      	movs	r0, #6
 8000a0a:	f003 fda6 	bl	800455a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a0e:	2006      	movs	r0, #6
 8000a10:	f003 fdbf 	bl	8004592 <HAL_NVIC_EnableIRQ>

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	; 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400
 8000a28:	40020800 	.word	0x40020800

08000a2c <ringbell>:
int __io_putchar(int ch) {
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
    return ch;
}

void ringbell(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
	uint8_t Track2 = 0x11;
 8000a32:	2311      	movs	r3, #17
 8000a34:	73fb      	strb	r3, [r7, #15]
	uint8_t volume = 0x1E;
 8000a36:	231e      	movs	r3, #30
 8000a38:	73bb      	strb	r3, [r7, #14]
	uint8_t play2[6] = {0xAA,0x07,0x02,0x00,Track2,Track2+0xB3};
 8000a3a:	23aa      	movs	r3, #170	; 0xaa
 8000a3c:	723b      	strb	r3, [r7, #8]
 8000a3e:	2307      	movs	r3, #7
 8000a40:	727b      	strb	r3, [r7, #9]
 8000a42:	2302      	movs	r3, #2
 8000a44:	72bb      	strb	r3, [r7, #10]
 8000a46:	2300      	movs	r3, #0
 8000a48:	72fb      	strb	r3, [r7, #11]
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	733b      	strb	r3, [r7, #12]
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	3b4d      	subs	r3, #77	; 0x4d
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	737b      	strb	r3, [r7, #13]
	uint8_t soundlvl[5] = {0xAA,0x13,0x01,volume,volume+0xBE};
 8000a56:	23aa      	movs	r3, #170	; 0xaa
 8000a58:	703b      	strb	r3, [r7, #0]
 8000a5a:	2313      	movs	r3, #19
 8000a5c:	707b      	strb	r3, [r7, #1]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	70bb      	strb	r3, [r7, #2]
 8000a62:	7bbb      	ldrb	r3, [r7, #14]
 8000a64:	70fb      	strb	r3, [r7, #3]
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	3b42      	subs	r3, #66	; 0x42
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	713b      	strb	r3, [r7, #4]
	HAL_UART_Transmit(&huart4, play2, 6, 500);
 8000a6e:	f107 0108 	add.w	r1, r7, #8
 8000a72:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a76:	2206      	movs	r2, #6
 8000a78:	4808      	ldr	r0, [pc, #32]	; (8000a9c <ringbell+0x70>)
 8000a7a:	f005 f8a0 	bl	8005bbe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, soundlvl, 5, 500);
 8000a7e:	4639      	mov	r1, r7
 8000a80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a84:	2205      	movs	r2, #5
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <ringbell+0x70>)
 8000a88:	f005 f899 	bl	8005bbe <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000a8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a90:	f003 fc6a 	bl	8004368 <HAL_Delay>
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20003c90 	.word	0x20003c90

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <Error_Handler+0x6>

08000aa8 <checkUserButton>:
 *  This function check whethe the user button has been pressed
 *****************************************************************************
 */

static void checkUserButton(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
    /* Check if USER button is pressed */
    if( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN))
 8000aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab0:	481f      	ldr	r0, [pc, #124]	; (8000b30 <checkUserButton+0x88>)
 8000ab2:	f003 ff17 	bl	80048e4 <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d036      	beq.n	8000b2a <checkUserButton+0x82>
    {
        ndefDemoFeature++;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <checkUserButton+0x8c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <checkUserButton+0x8c>)
 8000ac6:	701a      	strb	r2, [r3, #0]
        ndefDemoFeature %= NDEF_DEMO_MAX_FEATURES;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <checkUserButton+0x8c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	f003 0303 	and.w	r3, r3, #3
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <checkUserButton+0x8c>)
 8000ad4:	701a      	strb	r2, [r3, #0]

        ledsOff();
 8000ad6:	f001 fb1d 	bl	8002114 <ledsOff>
        ndefDemoPrevFeature = ndefDemoFeature;
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <checkUserButton+0x8c>)
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <checkUserButton+0x90>)
 8000ae0:	701a      	strb	r2, [r3, #0]
        platformLog("%s\r\n", ndefDemoFeatureDescription[ndefDemoFeature]);
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <checkUserButton+0x8c>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <checkUserButton+0x94>)
 8000aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4813      	ldr	r0, [pc, #76]	; (8000b40 <checkUserButton+0x98>)
 8000af2:	f7ff fcf7 	bl	80004e4 <logUsart>
        /* Debounce button */
        while( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN) );
 8000af6:	bf00      	nop
 8000af8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <checkUserButton+0x88>)
 8000afe:	f003 fef1 	bl	80048e4 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d1f7      	bne.n	8000af8 <checkUserButton+0x50>
        if( ndefDemoFeature != NDEF_DEMO_READ )
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <checkUserButton+0x8c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d00c      	beq.n	8000b2a <checkUserButton+0x82>
        {
            timer = platformTimerCreate(NDEF_WRITE_FORMAT_TIMEOUT);
 8000b10:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b14:	f003 fb96 	bl	8004244 <timerCalculateTimer>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <checkUserButton+0x9c>)
 8000b1c:	601a      	str	r2, [r3, #0]
            timerLed = platformTimerCreate(NDEF_LED_BLINK_DURATION);
 8000b1e:	20fa      	movs	r0, #250	; 0xfa
 8000b20:	f003 fb90 	bl	8004244 <timerCalculateTimer>
 8000b24:	4602      	mov	r2, r0
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <checkUserButton+0xa0>)
 8000b28:	601a      	str	r2, [r3, #0]
        }
    }
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40020800 	.word	0x40020800
 8000b34:	20000cfc 	.word	0x20000cfc
 8000b38:	20000097 	.word	0x20000097
 8000b3c:	20000054 	.word	0x20000054
 8000b40:	08019744 	.word	0x08019744
 8000b44:	20002d00 	.word	0x20002d00
 8000b48:	20002d04 	.word	0x20002d04

08000b4c <ndefShowDemoUsage>:
 *
 *  This function displays usage information
 *****************************************************************************
 */
static void ndefShowDemoUsage()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
#if NDEF_FEATURE_ALL
    //uint32_t i;
    
    //platformLog("Use the User button to cycle among the different modes:\r\n");

    platformLog("%s\r\n", ndefDemoFeatureDescription[0]);
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <ndefShowDemoUsage+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	4803      	ldr	r0, [pc, #12]	; (8000b64 <ndefShowDemoUsage+0x18>)
 8000b58:	f7ff fcc4 	bl	80004e4 <logUsart>
//    {
//        platformLog("%s\r\n", ndefDemoFeatureDescription[i]);
//    }
    //platformLog("In Write or Format mode (menu 2, 3 or 4), the demo returns to Read mode (menu 1) if no tag detected after %d seconds\r\n\n", NDEF_WRITE_FORMAT_TIMEOUT/1000);
#endif /* NDEF_FEATURE_ALL */
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000054 	.word	0x20000054
 8000b64:	08019744 	.word	0x08019744

08000b68 <demoIni>:
 * \return true  : Initialization ok
 * \return false : Initialization failed
 *****************************************************************************
 */
bool demoIni( void )
{
 8000b68:	b5b0      	push	{r4, r5, r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
//    if( (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0)
//    {
//        verbose = true;
//    }
//#endif
    ndefShowDemoUsage();
 8000b6e:	f7ff ffed 	bl	8000b4c <ndefShowDemoUsage>
    
    err = rfalNfcInitialize();
 8000b72:	f00e fb09 	bl	800f188 <rfalNfcInitialize>
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
    if( err == ERR_NONE )
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d140      	bne.n	8000c02 <demoIni+0x9a>
    {
        discParam.compMode      = RFAL_COMPLIANCE_MODE_NFC;
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <demoIni+0xa4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
        discParam.devLimit      = 1U;
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <demoIni+0xa4>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	719a      	strb	r2, [r3, #6]
        discParam.nfcfBR        = RFAL_BR_212;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <demoIni+0xa4>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	71da      	strb	r2, [r3, #7]
        discParam.ap2pBR        = RFAL_BR_424;
 8000b92:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <demoIni+0xa4>)
 8000b94:	2202      	movs	r2, #2
 8000b96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <demoIni+0xa4>)
 8000b9c:	4a1c      	ldr	r2, [pc, #112]	; (8000c10 <demoIni+0xa8>)
 8000b9e:	3308      	adds	r3, #8
 8000ba0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ba2:	c303      	stmia	r3!, {r0, r1}
 8000ba4:	801a      	strh	r2, [r3, #0]
        ST_MEMCPY( &discParam.GB, GB, sizeof(GB) );
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <demoIni+0xa4>)
 8000ba8:	4a1a      	ldr	r2, [pc, #104]	; (8000c14 <demoIni+0xac>)
 8000baa:	f103 0512 	add.w	r5, r3, #18
 8000bae:	4614      	mov	r4, r2
 8000bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb2:	6028      	str	r0, [r5, #0]
 8000bb4:	6069      	str	r1, [r5, #4]
 8000bb6:	60aa      	str	r2, [r5, #8]
 8000bb8:	60eb      	str	r3, [r5, #12]
 8000bba:	6820      	ldr	r0, [r4, #0]
 8000bbc:	6128      	str	r0, [r5, #16]
        discParam.GBLen         = sizeof(GB);
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <demoIni+0xa4>)
 8000bc0:	2214      	movs	r2, #20
 8000bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        discParam.notifyCb             = NULL;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <demoIni+0xa4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	669a      	str	r2, [r3, #104]	; 0x68
        discParam.totalDuration        = 1000U;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <demoIni+0xa4>)
 8000bce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bd2:	809a      	strh	r2, [r3, #4]
        discParam.wakeupEnabled        = false;
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <demoIni+0xa4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        discParam.wakeupConfigDefault  = true;
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <demoIni+0xa4>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        discParam.techs2Find           = ( RFAL_NFC_POLL_TECH_A | RFAL_NFC_POLL_TECH_B | RFAL_NFC_POLL_TECH_F | RFAL_NFC_POLL_TECH_V | RFAL_NFC_POLL_TECH_ST25TB );
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <demoIni+0xa4>)
 8000be6:	222f      	movs	r2, #47	; 0x2f
 8000be8:	805a      	strh	r2, [r3, #2]
#if defined(ST25R3911) || defined(ST25R3916)
        discParam.techs2Find   |= RFAL_NFC_POLL_TECH_AP2P;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <demoIni+0xa4>)
 8000bec:	885b      	ldrh	r3, [r3, #2]
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <demoIni+0xa4>)
 8000bf6:	805a      	strh	r2, [r3, #2]
      
      discParam.techs2Find |= ( RFAL_NFC_LISTEN_TECH_A | RFAL_NFC_LISTEN_TECH_F );
      
#endif /* ST25R3916 */

        state = DEMO_ST_START_DISCOVERY;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <demoIni+0xb0>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
        return true;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e000      	b.n	8000c04 <demoIni+0x9c>
    }
    return false;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c0c:	200002a0 	.word	0x200002a0
 8000c10:	20000000 	.word	0x20000000
 8000c14:	2000000c 	.word	0x2000000c
 8000c18:	20000324 	.word	0x20000324

08000c1c <demoCycle>:
 *  This function executes the demo state machine. 
 *  It must be called periodically
 *****************************************************************************
 */
void demoCycle( void )
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b09a      	sub	sp, #104	; 0x68
 8000c20:	af02      	add	r7, sp, #8
    rfalNfcaSelRes        selRes;
    
    rfalNfcbSensbRes      sensbRes;
    uint8_t               sensbResLen;
    
    uint8_t               devCnt = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    rfalFeliCaPollRes     cardList[1];
    uint8_t               collisions = 0U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	77fb      	strb	r3, [r7, #31]
    rfalNfcfSensfRes*     sensfRes;

    rfalNfcvInventoryRes  invRes;
    uint16_t              rcvdLen;
    
    rfalNfcWorker();                                    /* Run RFAL worker periodically */
 8000c2c:	f00e fba6 	bl	800f37c <rfalNfcWorker>
    
    if( (ndefDemoFeature != NDEF_DEMO_READ) && (platformTimerIsExpired(timer)) )
 8000c30:	4bad      	ldr	r3, [pc, #692]	; (8000ee8 <demoCycle+0x2cc>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d00d      	beq.n	8000c54 <demoCycle+0x38>
 8000c38:	4bac      	ldr	r3, [pc, #688]	; (8000eec <demoCycle+0x2d0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 fb0f 	bl	8004260 <timerIsExpired>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d005      	beq.n	8000c54 <demoCycle+0x38>
    {
        platformLog("Timer expired, back to Read mode...\r\n");
 8000c48:	48a9      	ldr	r0, [pc, #676]	; (8000ef0 <demoCycle+0x2d4>)
 8000c4a:	f7ff fc4b 	bl	80004e4 <logUsart>
        ndefDemoFeature = NDEF_DEMO_READ;
 8000c4e:	4ba6      	ldr	r3, [pc, #664]	; (8000ee8 <demoCycle+0x2cc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
    }
    
    if( ndefDemoFeature != ndefDemoPrevFeature )
 8000c54:	4ba4      	ldr	r3, [pc, #656]	; (8000ee8 <demoCycle+0x2cc>)
 8000c56:	781a      	ldrb	r2, [r3, #0]
 8000c58:	4ba6      	ldr	r3, [pc, #664]	; (8000ef4 <demoCycle+0x2d8>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d00d      	beq.n	8000c7c <demoCycle+0x60>
    {
        ndefDemoPrevFeature = ndefDemoFeature;
 8000c60:	4ba1      	ldr	r3, [pc, #644]	; (8000ee8 <demoCycle+0x2cc>)
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	4ba3      	ldr	r3, [pc, #652]	; (8000ef4 <demoCycle+0x2d8>)
 8000c66:	701a      	strb	r2, [r3, #0]
        platformLog("%s\r\n", ndefDemoFeatureDescription[ndefDemoFeature]);
 8000c68:	4b9f      	ldr	r3, [pc, #636]	; (8000ee8 <demoCycle+0x2cc>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4ba2      	ldr	r3, [pc, #648]	; (8000ef8 <demoCycle+0x2dc>)
 8000c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c74:	4619      	mov	r1, r3
 8000c76:	48a1      	ldr	r0, [pc, #644]	; (8000efc <demoCycle+0x2e0>)
 8000c78:	f7ff fc34 	bl	80004e4 <logUsart>
    }
    
    if( ndefDemoFeature != NDEF_DEMO_READ )
 8000c7c:	4b9a      	ldr	r3, [pc, #616]	; (8000ee8 <demoCycle+0x2cc>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d025      	beq.n	8000cd0 <demoCycle+0xb4>
    {
        if( platformTimerIsExpired(timerLed) )
 8000c84:	4b9e      	ldr	r3, [pc, #632]	; (8000f00 <demoCycle+0x2e4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f003 fae9 	bl	8004260 <timerIsExpired>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d014      	beq.n	8000cbe <demoCycle+0xa2>
        {
            timerLed = platformTimerCreate(NDEF_LED_BLINK_DURATION);
 8000c94:	20fa      	movs	r0, #250	; 0xfa
 8000c96:	f003 fad5 	bl	8004244 <timerCalculateTimer>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	4b98      	ldr	r3, [pc, #608]	; (8000f00 <demoCycle+0x2e4>)
 8000c9e:	601a      	str	r2, [r3, #0]
            ledOn = !ledOn;
 8000ca0:	4b98      	ldr	r3, [pc, #608]	; (8000f04 <demoCycle+0x2e8>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bf14      	ite	ne
 8000ca8:	2301      	movne	r3, #1
 8000caa:	2300      	moveq	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	f083 0301 	eor.w	r3, r3, #1
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b92      	ldr	r3, [pc, #584]	; (8000f04 <demoCycle+0x2e8>)
 8000cbc:	701a      	strb	r2, [r3, #0]
        }
        if( ledOn )
 8000cbe:	4b91      	ldr	r3, [pc, #580]	; (8000f04 <demoCycle+0x2e8>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <demoCycle+0xb0>
        {
            ledsOn();
 8000cc6:	f001 f9fd 	bl	80020c4 <ledsOn>
 8000cca:	e001      	b.n	8000cd0 <demoCycle+0xb4>
        }
        else
        {
            ledsOff();
 8000ccc:	f001 fa22 	bl	8002114 <ledsOff>
        }
    }
    
    checkUserButton();
 8000cd0:	f7ff feea 	bl	8000aa8 <checkUserButton>
    
    switch( state )
 8000cd4:	4b8c      	ldr	r3, [pc, #560]	; (8000f08 <demoCycle+0x2ec>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d002      	beq.n	8000ce2 <demoCycle+0xc6>
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d00c      	beq.n	8000cfa <demoCycle+0xde>
            break;

        /*******************************************************************************/
        case DEMO_ST_NOTINIT:
        default:
            break;
 8000ce0:	e23b      	b.n	800115a <demoCycle+0x53e>
            ledsOff();
 8000ce2:	f001 fa17 	bl	8002114 <ledsOff>
            rfalNfcDeactivate( false );
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f00e faf6 	bl	800f2d8 <rfalNfcDeactivate>
            rfalNfcDiscover( &discParam );
 8000cec:	4887      	ldr	r0, [pc, #540]	; (8000f0c <demoCycle+0x2f0>)
 8000cee:	f00e fa67 	bl	800f1c0 <rfalNfcDiscover>
            state = DEMO_ST_DISCOVERY;
 8000cf2:	4b85      	ldr	r3, [pc, #532]	; (8000f08 <demoCycle+0x2ec>)
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	701a      	strb	r2, [r3, #0]
            break;
 8000cf8:	e22f      	b.n	800115a <demoCycle+0x53e>
            if( rfalNfcIsDevActivated( rfalNfcGetState() ) )
 8000cfa:	f00e fb0f 	bl	800f31c <rfalNfcGetState>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b1d      	cmp	r3, #29
 8000d02:	f240 8229 	bls.w	8001158 <demoCycle+0x53c>
 8000d06:	f00e fb09 	bl	800f31c <rfalNfcGetState>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b21      	cmp	r3, #33	; 0x21
 8000d0e:	f200 8223 	bhi.w	8001158 <demoCycle+0x53c>
                rfalNfcGetActiveDevice( &nfcDevice );
 8000d12:	487f      	ldr	r0, [pc, #508]	; (8000f10 <demoCycle+0x2f4>)
 8000d14:	f00e fb0c 	bl	800f330 <rfalNfcGetActiveDevice>
                ledsOff();
 8000d18:	f001 f9fc 	bl	8002114 <ledsOff>
                platformDelay(50);
 8000d1c:	2032      	movs	r0, #50	; 0x32
 8000d1e:	f003 fb23 	bl	8004368 <HAL_Delay>
                ndefDemoPrevFeature = 0xFF; /* Force the display of the prompt */
 8000d22:	4b74      	ldr	r3, [pc, #464]	; (8000ef4 <demoCycle+0x2d8>)
 8000d24:	22ff      	movs	r2, #255	; 0xff
 8000d26:	701a      	strb	r2, [r3, #0]
                switch( nfcDevice->type )
 8000d28:	4b79      	ldr	r3, [pc, #484]	; (8000f10 <demoCycle+0x2f4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b05      	cmp	r3, #5
 8000d30:	f200 8205 	bhi.w	800113e <demoCycle+0x522>
 8000d34:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <demoCycle+0x120>)
 8000d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3a:	bf00      	nop
 8000d3c:	08000d55 	.word	0x08000d55
 8000d40:	08000e8b 	.word	0x08000e8b
 8000d44:	08000f7d 	.word	0x08000f7d
 8000d48:	0800104b 	.word	0x0800104b
 8000d4c:	080010e7 	.word	0x080010e7
 8000d50:	08001111 	.word	0x08001111
                        platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2101      	movs	r1, #1
 8000d58:	486e      	ldr	r0, [pc, #440]	; (8000f14 <demoCycle+0x2f8>)
 8000d5a:	f003 fdda 	bl	8004912 <HAL_GPIO_WritePin>
                        switch( nfcDevice->dev.nfca.type )
 8000d5e:	4b6c      	ldr	r3, [pc, #432]	; (8000f10 <demoCycle+0x2f4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	785b      	ldrb	r3, [r3, #1]
 8000d64:	2b20      	cmp	r3, #32
 8000d66:	d01b      	beq.n	8000da0 <demoCycle+0x184>
 8000d68:	2b20      	cmp	r3, #32
 8000d6a:	dc02      	bgt.n	8000d72 <demoCycle+0x156>
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d005      	beq.n	8000d7c <demoCycle+0x160>
 8000d70:	e03f      	b.n	8000df2 <demoCycle+0x1d6>
 8000d72:	2b40      	cmp	r3, #64	; 0x40
 8000d74:	d02b      	beq.n	8000dce <demoCycle+0x1b2>
 8000d76:	2b60      	cmp	r3, #96	; 0x60
 8000d78:	d029      	beq.n	8000dce <demoCycle+0x1b2>
 8000d7a:	e03a      	b.n	8000df2 <demoCycle+0x1d6>
                                platformLog("ISO14443A/Topaz (NFC-A T1T) TAG found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000d7c:	4b64      	ldr	r3, [pc, #400]	; (8000f10 <demoCycle+0x2f4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	699a      	ldr	r2, [r3, #24]
 8000d82:	4b63      	ldr	r3, [pc, #396]	; (8000f10 <demoCycle+0x2f4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	7f1b      	ldrb	r3, [r3, #28]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	f7ff fbd2 	bl	8000534 <hex2Str>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4619      	mov	r1, r3
 8000d94:	4860      	ldr	r0, [pc, #384]	; (8000f18 <demoCycle+0x2fc>)
 8000d96:	f7ff fba5 	bl	80004e4 <logUsart>
                                rfalNfcaPollerSleep();
 8000d9a:	f012 fd63 	bl	8013864 <rfalNfcaPollerSleep>
                                break;
 8000d9e:	e03f      	b.n	8000e20 <demoCycle+0x204>
                                platformLog("NFCA Passive ISO-DEP device found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000da0:	4b5b      	ldr	r3, [pc, #364]	; (8000f10 <demoCycle+0x2f4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	699a      	ldr	r2, [r3, #24]
 8000da6:	4b5a      	ldr	r3, [pc, #360]	; (8000f10 <demoCycle+0x2f4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	7f1b      	ldrb	r3, [r3, #28]
 8000dac:	4619      	mov	r1, r3
 8000dae:	4610      	mov	r0, r2
 8000db0:	f7ff fbc0 	bl	8000534 <hex2Str>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4619      	mov	r1, r3
 8000db8:	4858      	ldr	r0, [pc, #352]	; (8000f1c <demoCycle+0x300>)
 8000dba:	f7ff fb93 	bl	80004e4 <logUsart>
                                demoNdef(nfcDevice);
 8000dbe:	4b54      	ldr	r3, [pc, #336]	; (8000f10 <demoCycle+0x2f4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 faf4 	bl	80013b0 <demoNdef>
                                rfalIsoDepDeselect(); 
 8000dc8:	f00d faa6 	bl	800e318 <rfalIsoDepDeselect>
                                break;
 8000dcc:	e028      	b.n	8000e20 <demoCycle+0x204>
                                platformLog("NFCA Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000dce:	4b50      	ldr	r3, [pc, #320]	; (8000f10 <demoCycle+0x2f4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	699a      	ldr	r2, [r3, #24]
 8000dd4:	4b4e      	ldr	r3, [pc, #312]	; (8000f10 <demoCycle+0x2f4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	7f1b      	ldrb	r3, [r3, #28]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4610      	mov	r0, r2
 8000dde:	f7ff fba9 	bl	8000534 <hex2Str>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4619      	mov	r1, r3
 8000de6:	484e      	ldr	r0, [pc, #312]	; (8000f20 <demoCycle+0x304>)
 8000de8:	f7ff fb7c 	bl	80004e4 <logUsart>
                                demoP2P();
 8000dec:	f000 f9ce 	bl	800118c <demoP2P>
                                break;
 8000df0:	e016      	b.n	8000e20 <demoCycle+0x204>
                                platformLog("ISO14443A/NFC-A card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000df2:	4b47      	ldr	r3, [pc, #284]	; (8000f10 <demoCycle+0x2f4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	699a      	ldr	r2, [r3, #24]
 8000df8:	4b45      	ldr	r3, [pc, #276]	; (8000f10 <demoCycle+0x2f4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	7f1b      	ldrb	r3, [r3, #28]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4610      	mov	r0, r2
 8000e02:	f7ff fb97 	bl	8000534 <hex2Str>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4846      	ldr	r0, [pc, #280]	; (8000f24 <demoCycle+0x308>)
 8000e0c:	f7ff fb6a 	bl	80004e4 <logUsart>
                                demoNdef(nfcDevice);
 8000e10:	4b3f      	ldr	r3, [pc, #252]	; (8000f10 <demoCycle+0x2f4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 facb 	bl	80013b0 <demoNdef>
                                rfalNfcaPollerSleep();
 8000e1a:	f012 fd23 	bl	8013864 <rfalNfcaPollerSleep>
                                break;
 8000e1e:	bf00      	nop
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8000e20:	4841      	ldr	r0, [pc, #260]	; (8000f28 <demoCycle+0x30c>)
 8000e22:	f7ff fb5f 	bl	80004e4 <logUsart>
                        rfalNfcaPollerInitialize();
 8000e26:	f012 f951 	bl	80130cc <rfalNfcaPollerInitialize>
                        while( rfalNfcaPollerCheckPresence(RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes) == ERR_NONE )
 8000e2a:	e024      	b.n	8000e76 <demoCycle+0x25a>
                            if( ((nfcDevice->dev.nfca.type == RFAL_NFCA_T1T) && (!rfalNfcaIsSensResT1T(&sensRes ))) ||
 8000e2c:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <demoCycle+0x2f4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	785b      	ldrb	r3, [r3, #1]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d106      	bne.n	8000e44 <demoCycle+0x228>
 8000e36:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	2b0c      	cmp	r3, #12
 8000e40:	f040 817f 	bne.w	8001142 <demoCycle+0x526>
                                ((nfcDevice->dev.nfca.type != RFAL_NFCA_T1T) && (rfalNfcaPollerSelect(nfcDevice->dev.nfca.nfcId1, nfcDevice->dev.nfca.nfcId1Len, &selRes) != ERR_NONE)) )
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <demoCycle+0x2f4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	785b      	ldrb	r3, [r3, #1]
                            if( ((nfcDevice->dev.nfca.type == RFAL_NFCA_T1T) && (!rfalNfcaIsSensResT1T(&sensRes ))) ||
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d00e      	beq.n	8000e6c <demoCycle+0x250>
                                ((nfcDevice->dev.nfca.type != RFAL_NFCA_T1T) && (rfalNfcaPollerSelect(nfcDevice->dev.nfca.nfcId1, nfcDevice->dev.nfca.nfcId1Len, &selRes) != ERR_NONE)) )
 8000e4e:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <demoCycle+0x2f4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	1d98      	adds	r0, r3, #6
 8000e54:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <demoCycle+0x2f4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	795b      	ldrb	r3, [r3, #5]
 8000e5a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f012 fc8e 	bl	8013780 <rfalNfcaPollerSelect>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f040 816b 	bne.w	8001142 <demoCycle+0x526>
                            rfalNfcaPollerSleep();
 8000e6c:	f012 fcfa 	bl	8013864 <rfalNfcaPollerSleep>
                            platformDelay(130);
 8000e70:	2082      	movs	r0, #130	; 0x82
 8000e72:	f003 fa79 	bl	8004368 <HAL_Delay>
                        while( rfalNfcaPollerCheckPresence(RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes) == ERR_NONE )
 8000e76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	2052      	movs	r0, #82	; 0x52
 8000e7e:	f012 f949 	bl	8013114 <rfalNfcaPollerCheckPresence>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0d1      	beq.n	8000e2c <demoCycle+0x210>
                        break;
 8000e88:	e15b      	b.n	8001142 <demoCycle+0x526>
                        platformLog("ISO14443B/NFC-B card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <demoCycle+0x2f4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	699a      	ldr	r2, [r3, #24]
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <demoCycle+0x2f4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	7f1b      	ldrb	r3, [r3, #28]
 8000e96:	4619      	mov	r1, r3
 8000e98:	4610      	mov	r0, r2
 8000e9a:	f7ff fb4b 	bl	8000534 <hex2Str>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4822      	ldr	r0, [pc, #136]	; (8000f2c <demoCycle+0x310>)
 8000ea4:	f7ff fb1e 	bl	80004e4 <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4820      	ldr	r0, [pc, #128]	; (8000f30 <demoCycle+0x314>)
 8000eae:	f003 fd30 	bl	8004912 <HAL_GPIO_WritePin>
                        if( rfalNfcbIsIsoDepSupported( &nfcDevice->dev.nfcb ) )
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <demoCycle+0x2f4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	7b1b      	ldrb	r3, [r3, #12]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d007      	beq.n	8000ed0 <demoCycle+0x2b4>
                            demoNdef(nfcDevice);
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <demoCycle+0x2f4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fa73 	bl	80013b0 <demoNdef>
                            rfalIsoDepDeselect();
 8000eca:	f00d fa25 	bl	800e318 <rfalIsoDepDeselect>
 8000ece:	e005      	b.n	8000edc <demoCycle+0x2c0>
                            rfalNfcbPollerSleep(nfcDevice->dev.nfcb.sensbRes.nfcid0);
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <demoCycle+0x2f4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3303      	adds	r3, #3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f012 fdaa 	bl	8013a30 <rfalNfcbPollerSleep>
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8000edc:	4812      	ldr	r0, [pc, #72]	; (8000f28 <demoCycle+0x30c>)
 8000ede:	f7ff fb01 	bl	80004e4 <logUsart>
                        rfalNfcbPollerInitialize();
 8000ee2:	f012 fd13 	bl	801390c <rfalNfcbPollerInitialize>
                        while( rfalNfcbPollerCheckPresence(RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen) == ERR_NONE )
 8000ee6:	e03b      	b.n	8000f60 <demoCycle+0x344>
 8000ee8:	20000cfc 	.word	0x20000cfc
 8000eec:	20002d00 	.word	0x20002d00
 8000ef0:	0801974c 	.word	0x0801974c
 8000ef4:	20000097 	.word	0x20000097
 8000ef8:	20000054 	.word	0x20000054
 8000efc:	08019744 	.word	0x08019744
 8000f00:	20002d04 	.word	0x20002d04
 8000f04:	20002d08 	.word	0x20002d08
 8000f08:	20000324 	.word	0x20000324
 8000f0c:	200002a0 	.word	0x200002a0
 8000f10:	20002d0c 	.word	0x20002d0c
 8000f14:	40020400 	.word	0x40020400
 8000f18:	08019774 	.word	0x08019774
 8000f1c:	080197a8 	.word	0x080197a8
 8000f20:	080197d8 	.word	0x080197d8
 8000f24:	08019804 	.word	0x08019804
 8000f28:	0801982c 	.word	0x0801982c
 8000f2c:	08019868 	.word	0x08019868
 8000f30:	40020000 	.word	0x40020000
                            if( ST_BYTECMP(sensbRes.nfcid0, nfcDevice->dev.nfcb.sensbRes.nfcid0, RFAL_NFCB_NFCID0_LEN) != 0 )
 8000f34:	4b8b      	ldr	r3, [pc, #556]	; (8001164 <demoCycle+0x548>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	1cd9      	adds	r1, r3, #3
 8000f3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f3e:	3301      	adds	r3, #1
 8000f40:	2204      	movs	r2, #4
 8000f42:	4618      	mov	r0, r3
 8000f44:	f017 ff48 	bl	8018dd8 <memcmp>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d114      	bne.n	8000f78 <demoCycle+0x35c>
                            rfalNfcbPollerSleep(nfcDevice->dev.nfcb.sensbRes.nfcid0);
 8000f4e:	4b85      	ldr	r3, [pc, #532]	; (8001164 <demoCycle+0x548>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3303      	adds	r3, #3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f012 fd6b 	bl	8013a30 <rfalNfcbPollerSleep>
                            platformDelay(130);
 8000f5a:	2082      	movs	r0, #130	; 0x82
 8000f5c:	f003 fa04 	bl	8004368 <HAL_Delay>
                        while( rfalNfcbPollerCheckPresence(RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen) == ERR_NONE )
 8000f60:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000f64:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2008      	movs	r0, #8
 8000f6c:	f012 fcfa 	bl	8013964 <rfalNfcbPollerCheckPresence>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0de      	beq.n	8000f34 <demoCycle+0x318>
                        break;
 8000f76:	e0e5      	b.n	8001144 <demoCycle+0x528>
                                break;
 8000f78:	bf00      	nop
                        break;
 8000f7a:	e0e3      	b.n	8001144 <demoCycle+0x528>
                        if( rfalNfcfIsNfcDepSupported( &nfcDevice->dev.nfcf ) )
 8000f7c:	4b79      	ldr	r3, [pc, #484]	; (8001164 <demoCycle+0x548>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	78db      	ldrb	r3, [r3, #3]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d116      	bne.n	8000fb4 <demoCycle+0x398>
 8000f86:	4b77      	ldr	r3, [pc, #476]	; (8001164 <demoCycle+0x548>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	791b      	ldrb	r3, [r3, #4]
 8000f8c:	2bfe      	cmp	r3, #254	; 0xfe
 8000f8e:	d111      	bne.n	8000fb4 <demoCycle+0x398>
                            platformLog("NFCF Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000f90:	4b74      	ldr	r3, [pc, #464]	; (8001164 <demoCycle+0x548>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	699a      	ldr	r2, [r3, #24]
 8000f96:	4b73      	ldr	r3, [pc, #460]	; (8001164 <demoCycle+0x548>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	7f1b      	ldrb	r3, [r3, #28]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f7ff fac8 	bl	8000534 <hex2Str>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	486f      	ldr	r0, [pc, #444]	; (8001168 <demoCycle+0x54c>)
 8000faa:	f7ff fa9b 	bl	80004e4 <logUsart>
                            demoP2P();
 8000fae:	f000 f8ed 	bl	800118c <demoP2P>
 8000fb2:	e013      	b.n	8000fdc <demoCycle+0x3c0>
                            platformLog("Felica/NFC-F card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 8000fb4:	4b6b      	ldr	r3, [pc, #428]	; (8001164 <demoCycle+0x548>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	699a      	ldr	r2, [r3, #24]
 8000fba:	4b6a      	ldr	r3, [pc, #424]	; (8001164 <demoCycle+0x548>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	7f1b      	ldrb	r3, [r3, #28]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	f7ff fab6 	bl	8000534 <hex2Str>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4867      	ldr	r0, [pc, #412]	; (800116c <demoCycle+0x550>)
 8000fce:	f7ff fa89 	bl	80004e4 <logUsart>
                            demoNdef(nfcDevice);
 8000fd2:	4b64      	ldr	r3, [pc, #400]	; (8001164 <demoCycle+0x548>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f9ea 	bl	80013b0 <demoNdef>
                        platformLedOn(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4863      	ldr	r0, [pc, #396]	; (8001170 <demoCycle+0x554>)
 8000fe2:	f003 fc96 	bl	8004912 <HAL_GPIO_WritePin>
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8000fe6:	4863      	ldr	r0, [pc, #396]	; (8001174 <demoCycle+0x558>)
 8000fe8:	f7ff fa7c 	bl	80004e4 <logUsart>
                        devCnt = 1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        rfalNfcfPollerInitialize( RFAL_BR_212 );
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f013 f85e 	bl	80140b4 <rfalNfcfPollerInitialize>
                        while (rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, cardList, &devCnt, &collisions ) == ERR_NONE)
 8000ff8:	e012      	b.n	8001020 <demoCycle+0x404>
                            sensfRes = (rfalNfcfSensfRes*)&((uint8_t *)cardList)[1];
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	3301      	adds	r3, #1
 8001000:	653b      	str	r3, [r7, #80]	; 0x50
                            if( ST_BYTECMP(sensfRes->NFCID2, nfcDevice->dev.nfcf.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN) != 0 )
 8001002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001004:	1c58      	adds	r0, r3, #1
 8001006:	4b57      	ldr	r3, [pc, #348]	; (8001164 <demoCycle+0x548>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3303      	adds	r3, #3
 800100c:	2208      	movs	r2, #8
 800100e:	4619      	mov	r1, r3
 8001010:	f017 fee2 	bl	8018dd8 <memcmp>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d115      	bne.n	8001046 <demoCycle+0x42a>
                            platformDelay(130);
 800101a:	2082      	movs	r0, #130	; 0x82
 800101c:	f003 f9a4 	bl	8004368 <HAL_Delay>
                        while (rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, cardList, &devCnt, &collisions ) == ERR_NONE)
 8001020:	f107 0220 	add.w	r2, r7, #32
 8001024:	f107 031f 	add.w	r3, r7, #31
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	4613      	mov	r3, r2
 8001032:	2200      	movs	r2, #0
 8001034:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001038:	2000      	movs	r0, #0
 800103a:	f013 f86b 	bl	8014114 <rfalNfcfPollerPoll>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0da      	beq.n	8000ffa <demoCycle+0x3de>
                        break;
 8001044:	e07e      	b.n	8001144 <demoCycle+0x528>
                                break;
 8001046:	bf00      	nop
                        break;
 8001048:	e07c      	b.n	8001144 <demoCycle+0x528>
                            ST_MEMCPY( devUID, nfcDevice->nfcid, nfcDevice->nfcidLen );   /* Copy the UID into local var */
 800104a:	4b46      	ldr	r3, [pc, #280]	; (8001164 <demoCycle+0x548>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6999      	ldr	r1, [r3, #24]
 8001050:	4b44      	ldr	r3, [pc, #272]	; (8001164 <demoCycle+0x548>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	7f1b      	ldrb	r3, [r3, #28]
 8001056:	461a      	mov	r2, r3
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4618      	mov	r0, r3
 800105c:	f017 fecb 	bl	8018df6 <memcpy>
                            REVERSE_BYTES( devUID, RFAL_NFCV_UID_LEN );                 /* Reverse the UID for display purposes */
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	3307      	adds	r3, #7
 8001068:	65bb      	str	r3, [r7, #88]	; 0x58
 800106a:	e00f      	b.n	800108c <demoCycle+0x470>
 800106c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	65fa      	str	r2, [r7, #92]	; 0x5c
 800107a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800107c:	7812      	ldrb	r2, [r2, #0]
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001082:	1e5a      	subs	r2, r3, #1
 8001084:	65ba      	str	r2, [r7, #88]	; 0x58
 8001086:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800108e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001090:	429a      	cmp	r2, r3
 8001092:	d3eb      	bcc.n	800106c <demoCycle+0x450>
                            platformLog(" test ISO15693/NFC-V card found. UID: %s\r\n", hex2Str(devUID, RFAL_NFCV_UID_LEN));
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2108      	movs	r1, #8
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fa4b 	bl	8000534 <hex2Str>
 800109e:	4603      	mov	r3, r0
 80010a0:	4619      	mov	r1, r3
 80010a2:	4835      	ldr	r0, [pc, #212]	; (8001178 <demoCycle+0x55c>)
 80010a4:	f7ff fa1e 	bl	80004e4 <logUsart>
                            demoNdef(nfcDevice);
 80010a8:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <demoCycle+0x548>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f97f 	bl	80013b0 <demoNdef>
                            platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 80010b2:	4830      	ldr	r0, [pc, #192]	; (8001174 <demoCycle+0x558>)
 80010b4:	f7ff fa16 	bl	80004e4 <logUsart>
                            rfalNfcvPollerInitialize();
 80010b8:	f013 fb7e 	bl	80147b8 <rfalNfcvPollerInitialize>
                            while (rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, RFAL_NFCV_UID_LEN * 8U, nfcDevice->dev.nfcv.InvRes.UID, &invRes, &rcvdLen) == ERR_NONE)
 80010bc:	e002      	b.n	80010c4 <demoCycle+0x4a8>
                                platformDelay(130);
 80010be:	2082      	movs	r0, #130	; 0x82
 80010c0:	f003 f952 	bl	8004368 <HAL_Delay>
                            while (rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, RFAL_NFCV_UID_LEN * 8U, nfcDevice->dev.nfcv.InvRes.UID, &invRes, &rcvdLen) == ERR_NONE)
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <demoCycle+0x548>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	1cda      	adds	r2, r3, #3
 80010ca:	f107 0110 	add.w	r1, r7, #16
 80010ce:	f107 030e 	add.w	r3, r7, #14
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	460b      	mov	r3, r1
 80010d6:	2140      	movs	r1, #64	; 0x40
 80010d8:	2020      	movs	r0, #32
 80010da:	f013 fbb2 	bl	8014842 <rfalNfcvPollerInventory>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0ec      	beq.n	80010be <demoCycle+0x4a2>
                        break;
 80010e4:	e02e      	b.n	8001144 <demoCycle+0x528>
                        platformLog("ST25TB card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <demoCycle+0x548>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	699a      	ldr	r2, [r3, #24]
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <demoCycle+0x548>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	7f1b      	ldrb	r3, [r3, #28]
 80010f2:	4619      	mov	r1, r3
 80010f4:	4610      	mov	r0, r2
 80010f6:	f7ff fa1d 	bl	8000534 <hex2Str>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4619      	mov	r1, r3
 80010fe:	481f      	ldr	r0, [pc, #124]	; (800117c <demoCycle+0x560>)
 8001100:	f7ff f9f0 	bl	80004e4 <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8001104:	2201      	movs	r2, #1
 8001106:	2110      	movs	r1, #16
 8001108:	4819      	ldr	r0, [pc, #100]	; (8001170 <demoCycle+0x554>)
 800110a:	f003 fc02 	bl	8004912 <HAL_GPIO_WritePin>
                        break;
 800110e:	e019      	b.n	8001144 <demoCycle+0x528>
                        platformLog("NFC Active P2P device found. NFCID3: %s\r\n", hex2Str(nfcDevice->nfcid, nfcDevice->nfcidLen));
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <demoCycle+0x548>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	699a      	ldr	r2, [r3, #24]
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <demoCycle+0x548>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	7f1b      	ldrb	r3, [r3, #28]
 800111c:	4619      	mov	r1, r3
 800111e:	4610      	mov	r0, r2
 8001120:	f7ff fa08 	bl	8000534 <hex2Str>
 8001124:	4603      	mov	r3, r0
 8001126:	4619      	mov	r1, r3
 8001128:	4815      	ldr	r0, [pc, #84]	; (8001180 <demoCycle+0x564>)
 800112a:	f7ff f9db 	bl	80004e4 <logUsart>
                        platformLedOn(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 800112e:	2201      	movs	r2, #1
 8001130:	2120      	movs	r1, #32
 8001132:	4814      	ldr	r0, [pc, #80]	; (8001184 <demoCycle+0x568>)
 8001134:	f003 fbed 	bl	8004912 <HAL_GPIO_WritePin>
                        demoP2P();
 8001138:	f000 f828 	bl	800118c <demoP2P>
                        break;
 800113c:	e002      	b.n	8001144 <demoCycle+0x528>
                        break;
 800113e:	bf00      	nop
 8001140:	e000      	b.n	8001144 <demoCycle+0x528>
                        break;
 8001142:	bf00      	nop
                rfalNfcDeactivate( false );
 8001144:	2000      	movs	r0, #0
 8001146:	f00e f8c7 	bl	800f2d8 <rfalNfcDeactivate>
                platformDelay( 500 );
 800114a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800114e:	f003 f90b 	bl	8004368 <HAL_Delay>
                state = DEMO_ST_START_DISCOVERY;
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <demoCycle+0x56c>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
            break;
 8001158:	bf00      	nop
    }
}
 800115a:	bf00      	nop
 800115c:	3760      	adds	r7, #96	; 0x60
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20002d0c 	.word	0x20002d0c
 8001168:	08019890 	.word	0x08019890
 800116c:	080198bc 	.word	0x080198bc
 8001170:	40020000 	.word	0x40020000
 8001174:	0801982c 	.word	0x0801982c
 8001178:	080198e0 	.word	0x080198e0
 800117c:	0801990c 	.word	0x0801990c
 8001180:	0801992c 	.word	0x0801992c
 8001184:	40020400 	.word	0x40020400
 8001188:	20000324 	.word	0x20000324

0800118c <demoP2P>:
 * 
 * 
 *****************************************************************************
 */
void demoP2P( void )
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b0d5      	sub	sp, #340	; 0x154
 8001190:	af02      	add	r7, sp, #8
    ndefBuffer  bufPayload;
    ndefMessage message;
    ndefRecord  record;
    ndefType    uri;

    platformLog(" Initalize device .. ");
 8001192:	4866      	ldr	r0, [pc, #408]	; (800132c <demoP2P+0x1a0>)
 8001194:	f7ff f9a6 	bl	80004e4 <logUsart>
    err = demoTransceiveBlocking( ndefInit, sizeof(ndefInit), &rxData, &rxLen, RFAL_FWT_NONE);
 8001198:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800119c:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	460b      	mov	r3, r1
 80011a8:	211a      	movs	r1, #26
 80011aa:	4861      	ldr	r0, [pc, #388]	; (8001330 <demoP2P+0x1a4>)
 80011ac:	f000 f8dc 	bl	8001368 <demoTransceiveBlocking>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if( err != ERR_NONE )
 80011b6:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <demoP2P+0x3a>
    {
        platformLog("failed.");
 80011be:	485d      	ldr	r0, [pc, #372]	; (8001334 <demoP2P+0x1a8>)
 80011c0:	f7ff f990 	bl	80004e4 <logUsart>
        return;
 80011c4:	e0ae      	b.n	8001324 <demoP2P+0x198>
    }
    platformLog("succeeded.\r\n");
 80011c6:	485c      	ldr	r0, [pc, #368]	; (8001338 <demoP2P+0x1ac>)
 80011c8:	f7ff f98c 	bl	80004e4 <logUsart>
    
    err  = ndefRtdUri(&uri, NDEF_URI_PREFIX_HTTP_WWW, &bufURL);
 80011cc:	463b      	mov	r3, r7
 80011ce:	4a5b      	ldr	r2, [pc, #364]	; (800133c <demoP2P+0x1b0>)
 80011d0:	2101      	movs	r1, #1
 80011d2:	4618      	mov	r0, r3
 80011d4:	f007 fa3a 	bl	800864c <ndefRtdUri>
 80011d8:	4603      	mov	r3, r0
 80011da:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    err |= ndefRtdUriToRecord(&uri, &record);
 80011de:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80011e2:	463b      	mov	r3, r7
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f007 fb1e 	bl	8008828 <ndefRtdUriToRecord>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80011f4:	4313      	orrs	r3, r2
 80011f6:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    err |= ndefMessageInit(&message);
 80011fa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 febc 	bl	8005f7c <ndefMessageInit>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800120c:	4313      	orrs	r3, r2
 800120e:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    err |= ndefMessageAppend(&message, &record);  /* To get MB and ME bits set */
 8001212:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001216:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f004 fefb 	bl	8006018 <ndefMessageAppend>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800122a:	4313      	orrs	r3, r2
 800122c:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    /* Build the SNEP buffer made of the prefix, the length byte and the record */
    ST_MEMCPY(ndefUriBuffer, ndefSnepPrefix, sizeof(ndefSnepPrefix));
 8001230:	4b43      	ldr	r3, [pc, #268]	; (8001340 <demoP2P+0x1b4>)
 8001232:	4a44      	ldr	r2, [pc, #272]	; (8001344 <demoP2P+0x1b8>)
 8001234:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001238:	e883 0003 	stmia.w	r3, {r0, r1}

    /* Skip 1 byte for length byte */
    bufPayload.buffer = ndefUriBuffer + sizeof(ndefSnepPrefix) + 1;
 800123c:	4b42      	ldr	r3, [pc, #264]	; (8001348 <demoP2P+0x1bc>)
 800123e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    bufPayload.length = sizeof(ndefUriBuffer) - sizeof(ndefSnepPrefix);
 8001242:	23f7      	movs	r3, #247	; 0xf7
 8001244:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    err |= ndefMessageEncode(&message, &bufPayload);
 8001248:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800124c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f004 ff8e 	bl	8006174 <ndefMessageEncode>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8001260:	4313      	orrs	r3, r2
 8001262:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    ndefUriBuffer[sizeof(ndefSnepPrefix)] = bufPayload.length;
 8001266:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b34      	ldr	r3, [pc, #208]	; (8001340 <demoP2P+0x1b4>)
 800126e:	721a      	strb	r2, [r3, #8]

    bufPayload.buffer = ndefUriBuffer;
 8001270:	4b33      	ldr	r3, [pc, #204]	; (8001340 <demoP2P+0x1b4>)
 8001272:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    bufPayload.length = sizeof(ndefSnepPrefix) + 1 + bufPayload.length;
 8001276:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800127a:	3309      	adds	r3, #9
 800127c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    if( err != ERR_NONE )
 8001280:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <demoP2P+0x10a>
    {
        platformLog("NDEF message creation failed\r\n", err);
 8001288:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800128c:	4619      	mov	r1, r3
 800128e:	482f      	ldr	r0, [pc, #188]	; (800134c <demoP2P+0x1c0>)
 8001290:	f7ff f928 	bl	80004e4 <logUsart>
        return;
 8001294:	e046      	b.n	8001324 <demoP2P+0x198>
    }

    ndefBufferDump("URL converted to SNEP:\r\n", (ndefConstBuffer*)&bufPayload, true);
 8001296:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800129a:	2201      	movs	r2, #1
 800129c:	4619      	mov	r1, r3
 800129e:	482c      	ldr	r0, [pc, #176]	; (8001350 <demoP2P+0x1c4>)
 80012a0:	f001 fc46 	bl	8002b30 <ndefBufferDump>

    platformLog(" Push NDEF Uri: www.ST.com .. ");
 80012a4:	482b      	ldr	r0, [pc, #172]	; (8001354 <demoP2P+0x1c8>)
 80012a6:	f7ff f91d 	bl	80004e4 <logUsart>
    err = demoTransceiveBlocking(bufPayload.buffer, bufPayload.length, &rxData, &rxLen, RFAL_FWT_NONE);
 80012aa:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80012ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012b2:	b299      	uxth	r1, r3
 80012b4:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 80012b8:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	4623      	mov	r3, r4
 80012c4:	f000 f850 	bl	8001368 <demoTransceiveBlocking>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if( err != ERR_NONE )
 80012ce:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <demoP2P+0x152>
    {
        platformLog("failed.");
 80012d6:	4817      	ldr	r0, [pc, #92]	; (8001334 <demoP2P+0x1a8>)
 80012d8:	f7ff f904 	bl	80004e4 <logUsart>
        return;
 80012dc:	e022      	b.n	8001324 <demoP2P+0x198>
    }
    platformLog("succeeded.\r\n");
 80012de:	4816      	ldr	r0, [pc, #88]	; (8001338 <demoP2P+0x1ac>)
 80012e0:	f7ff f900 	bl	80004e4 <logUsart>


    platformLog(" Device present, maintaining connection ");
 80012e4:	481c      	ldr	r0, [pc, #112]	; (8001358 <demoP2P+0x1cc>)
 80012e6:	f7ff f8fd 	bl	80004e4 <logUsart>
    while(err == ERR_NONE) 
 80012ea:	e014      	b.n	8001316 <demoP2P+0x18a>
    {
        err = demoTransceiveBlocking( ndefLLCPSYMM, sizeof(ndefLLCPSYMM), &rxData, &rxLen, RFAL_FWT_NONE);
 80012ec:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80012f0:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	460b      	mov	r3, r1
 80012fc:	2102      	movs	r1, #2
 80012fe:	4817      	ldr	r0, [pc, #92]	; (800135c <demoP2P+0x1d0>)
 8001300:	f000 f832 	bl	8001368 <demoTransceiveBlocking>
 8001304:	4603      	mov	r3, r0
 8001306:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
        platformLog(".");
 800130a:	4815      	ldr	r0, [pc, #84]	; (8001360 <demoP2P+0x1d4>)
 800130c:	f7ff f8ea 	bl	80004e4 <logUsart>
        platformDelay(50);
 8001310:	2032      	movs	r0, #50	; 0x32
 8001312:	f003 f829 	bl	8004368 <HAL_Delay>
    while(err == ERR_NONE) 
 8001316:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0e6      	beq.n	80012ec <demoP2P+0x160>
    }
    platformLog("\r\n Device removed.\r\n");
 800131e:	4811      	ldr	r0, [pc, #68]	; (8001364 <demoP2P+0x1d8>)
 8001320:	f7ff f8e0 	bl	80004e4 <logUsart>
}
 8001324:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8001328:	46bd      	mov	sp, r7
 800132a:	bd90      	pop	{r4, r7, pc}
 800132c:	08019958 	.word	0x08019958
 8001330:	20000020 	.word	0x20000020
 8001334:	08019970 	.word	0x08019970
 8001338:	08019978 	.word	0x08019978
 800133c:	2000003c 	.word	0x2000003c
 8001340:	200001a0 	.word	0x200001a0
 8001344:	0801a950 	.word	0x0801a950
 8001348:	200001a9 	.word	0x200001a9
 800134c:	08019988 	.word	0x08019988
 8001350:	080199a8 	.word	0x080199a8
 8001354:	080199c4 	.word	0x080199c4
 8001358:	080199e4 	.word	0x080199e4
 800135c:	2000019c 	.word	0x2000019c
 8001360:	08019a10 	.word	0x08019a10
 8001364:	08019a14 	.word	0x08019a14

08001368 <demoTransceiveBlocking>:
 *  \return ERR_NONE      : No error, activation successful
 * 
 *****************************************************************************
 */
ReturnCode demoTransceiveBlocking( uint8_t *txBuf, uint16_t txBufSize, uint8_t **rxData, uint16_t **rcvLen, uint32_t fwt )
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af02      	add	r7, sp, #8
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	460b      	mov	r3, r1
 8001376:	817b      	strh	r3, [r7, #10]
    ReturnCode err;
    
    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 8001378:	8979      	ldrh	r1, [r7, #10]
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f00e f9de 	bl	800f744 <rfalNfcDataExchangeStart>
 8001388:	4603      	mov	r3, r0
 800138a:	82fb      	strh	r3, [r7, #22]
    if( err == ERR_NONE )
 800138c:	8afb      	ldrh	r3, [r7, #22]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d108      	bne.n	80013a4 <demoTransceiveBlocking+0x3c>
    {
        do{
            rfalNfcWorker();
 8001392:	f00d fff3 	bl	800f37c <rfalNfcWorker>
            err = rfalNfcDataExchangeGetStatus();
 8001396:	f00e faed 	bl	800f974 <rfalNfcDataExchangeGetStatus>
 800139a:	4603      	mov	r3, r0
 800139c:	82fb      	strh	r3, [r7, #22]
        }
        while( err == ERR_BUSY );
 800139e:	8afb      	ldrh	r3, [r7, #22]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d0f6      	beq.n	8001392 <demoTransceiveBlocking+0x2a>
    }
    return err;
 80013a4:	8afb      	ldrh	r3, [r7, #22]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <demoNdef>:

static void demoNdef(rfalNfcDevice *pNfcDevice)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	6018      	str	r0, [r3, #0]


    /*
     * Perform NDEF Context Initialization
     */
    err = ndefPollerContextInitialization(&ndefCtx, pNfcDevice);
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	6819      	ldr	r1, [r3, #0]
 80013c0:	48af      	ldr	r0, [pc, #700]	; (8001680 <demoNdef+0x2d0>)
 80013c2:	f007 fb01 	bl	80089c8 <ndefPollerContextInitialization>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
    if( err != ERR_NONE )
 80013cc:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <demoNdef+0x32>
    {
        platformLog("NDEF NOT DETECTED (ndefPollerContextInitialization returns %d)\r\n", err);
 80013d4:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80013d8:	4619      	mov	r1, r3
 80013da:	48aa      	ldr	r0, [pc, #680]	; (8001684 <demoNdef+0x2d4>)
 80013dc:	f7ff f882 	bl	80004e4 <logUsart>
        return;
 80013e0:	e269      	b.n	80018b6 <demoNdef+0x506>
    }
    
    if( verbose & (pNfcDevice->type == RFAL_NFC_LISTEN_TYPE_NFCV) )
 80013e2:	4ba9      	ldr	r3, [pc, #676]	; (8001688 <demoNdef+0x2d8>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	bf0c      	ite	eq
 80013f2:	2301      	moveq	r3, #1
 80013f4:	2300      	movne	r3, #0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <demoNdef+0x54>
    {
        ndefDumpSysInfo(&ndefCtx);
 80013fe:	48a0      	ldr	r0, [pc, #640]	; (8001680 <demoNdef+0x2d0>)
 8001400:	f000 fc18 	bl	8001c34 <ndefDumpSysInfo>
    }

    /*
     * Perform NDEF Detect procedure
     */
    err = ndefPollerNdefDetect(&ndefCtx, &info);
 8001404:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001408:	4619      	mov	r1, r3
 800140a:	489d      	ldr	r0, [pc, #628]	; (8001680 <demoNdef+0x2d0>)
 800140c:	f007 fb0a 	bl	8008a24 <ndefPollerNdefDetect>
 8001410:	4603      	mov	r3, r0
 8001412:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
    if( err != ERR_NONE )
 8001416:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00a      	beq.n	8001434 <demoNdef+0x84>
    {
        platformLog("NDEF NOT DETECTED (ndefPollerNdefDetect returns %d)\r\n", err);
 800141e:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001422:	4619      	mov	r1, r3
 8001424:	4899      	ldr	r0, [pc, #612]	; (800168c <demoNdef+0x2dc>)
 8001426:	f7ff f85d 	bl	80004e4 <logUsart>
        if( ndefDemoFeature != NDEF_DEMO_FORMAT_TAG)
 800142a:	4b99      	ldr	r3, [pc, #612]	; (8001690 <demoNdef+0x2e0>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d01b      	beq.n	800146a <demoNdef+0xba>
        {
            return;
 8001432:	e240      	b.n	80018b6 <demoNdef+0x506>
        }
    }
    else
    {
        platformLog("%s NDEF is detected.\r\n", ndefStates[info.state]);
 8001434:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 8001438:	461a      	mov	r2, r3
 800143a:	4b96      	ldr	r3, [pc, #600]	; (8001694 <demoNdef+0x2e4>)
 800143c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001440:	4619      	mov	r1, r3
 8001442:	4895      	ldr	r0, [pc, #596]	; (8001698 <demoNdef+0x2e8>)
 8001444:	f7ff f84e 	bl	80004e4 <logUsart>
        ndefCCDump(&ndefCtx);
 8001448:	488d      	ldr	r0, [pc, #564]	; (8001680 <demoNdef+0x2d0>)
 800144a:	f000 fba1 	bl	8001b90 <ndefCCDump>

        if( verbose )
 800144e:	4b8e      	ldr	r3, [pc, #568]	; (8001688 <demoNdef+0x2d8>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <demoNdef+0xba>
        {
            platformLog("NDEF Len: %d, Offset=%d\r\n", ndefCtx.messageLen, ndefCtx.messageOffset);
 8001456:	4b8a      	ldr	r3, [pc, #552]	; (8001680 <demoNdef+0x2d0>)
 8001458:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800145c:	4b88      	ldr	r3, [pc, #544]	; (8001680 <demoNdef+0x2d0>)
 800145e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001462:	461a      	mov	r2, r3
 8001464:	488d      	ldr	r0, [pc, #564]	; (800169c <demoNdef+0x2ec>)
 8001466:	f7ff f83d 	bl	80004e4 <logUsart>
        }
    }

    switch( ndefDemoFeature )
 800146a:	4b89      	ldr	r3, [pc, #548]	; (8001690 <demoNdef+0x2e0>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b03      	cmp	r3, #3
 8001470:	f200 8219 	bhi.w	80018a6 <demoNdef+0x4f6>
 8001474:	a201      	add	r2, pc, #4	; (adr r2, 800147c <demoNdef+0xcc>)
 8001476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147a:	bf00      	nop
 800147c:	0800148d 	.word	0x0800148d
 8001480:	08001551 	.word	0x08001551
 8001484:	080016cd 	.word	0x080016cd
 8001488:	0800184f 	.word	0x0800184f
    {
        /*
         * Demonstrate how to read the NDEF message from the Tag
         */
        case NDEF_DEMO_READ:
            if( info.state == NDEF_STATE_INITIALIZED )
 800148c:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 8001490:	2b01      	cmp	r3, #1
 8001492:	f000 820f 	beq.w	80018b4 <demoNdef+0x504>
            {
                /* Nothing to read... */
                return;
            }
            err = ndefPollerReadRawMessage(&ndefCtx, rawMessageBuf, sizeof(rawMessageBuf), &rawMessageLen);
 8001496:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 800149a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149e:	4980      	ldr	r1, [pc, #512]	; (80016a0 <demoNdef+0x2f0>)
 80014a0:	4877      	ldr	r0, [pc, #476]	; (8001680 <demoNdef+0x2d0>)
 80014a2:	f007 fadc 	bl	8008a5e <ndefPollerReadRawMessage>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 80014ac:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d006      	beq.n	80014c2 <demoNdef+0x112>
            {
                platformLog("NDEF message cannot be read (ndefPollerReadRawMessage returns %d)\r\n", err);
 80014b4:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80014b8:	4619      	mov	r1, r3
 80014ba:	487a      	ldr	r0, [pc, #488]	; (80016a4 <demoNdef+0x2f4>)
 80014bc:	f7ff f812 	bl	80004e4 <logUsart>
                return;
 80014c0:	e1f9      	b.n	80018b6 <demoNdef+0x506>
            }
            if( verbose )
 80014c2:	4b71      	ldr	r3, [pc, #452]	; (8001688 <demoNdef+0x2d8>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00e      	beq.n	80014e8 <demoNdef+0x138>
            {
                bufRawMessage.buffer = rawMessageBuf;
 80014ca:	4b75      	ldr	r3, [pc, #468]	; (80016a0 <demoNdef+0x2f0>)
 80014cc:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
                bufRawMessage.length = rawMessageLen;
 80014d0:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 80014d4:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
                ndefBufferDump(" NDEF Content", (ndefConstBuffer*)&bufRawMessage, verbose);
 80014d8:	4b6b      	ldr	r3, [pc, #428]	; (8001688 <demoNdef+0x2d8>)
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80014e0:	4619      	mov	r1, r3
 80014e2:	4871      	ldr	r0, [pc, #452]	; (80016a8 <demoNdef+0x2f8>)
 80014e4:	f001 fb24 	bl	8002b30 <ndefBufferDump>
            }
            bufConstRawMessage.buffer = rawMessageBuf;
 80014e8:	4b6d      	ldr	r3, [pc, #436]	; (80016a0 <demoNdef+0x2f0>)
 80014ea:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
            bufConstRawMessage.length = rawMessageLen;
 80014ee:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 80014f2:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
            err = ndefMessageDecode(&bufConstRawMessage, &message);
 80014f6:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 80014fa:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f004 fdde 	bl	80060c2 <ndefMessageDecode>
 8001506:	4603      	mov	r3, r0
 8001508:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 800150c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <demoNdef+0x172>
            {
                platformLog("NDEF message cannot be decoded (ndefMessageDecode  returns %d)\r\n", err);
 8001514:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001518:	4619      	mov	r1, r3
 800151a:	4864      	ldr	r0, [pc, #400]	; (80016ac <demoNdef+0x2fc>)
 800151c:	f7fe ffe2 	bl	80004e4 <logUsart>
                return;
 8001520:	e1c9      	b.n	80018b6 <demoNdef+0x506>
            }
            err = ndefMessageDump(&message, verbose);
 8001522:	4b59      	ldr	r3, [pc, #356]	; (8001688 <demoNdef+0x2d8>)
 8001524:	781a      	ldrb	r2, [r3, #0]
 8001526:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f000 ff27 	bl	8002380 <ndefMessageDump>
 8001532:	4603      	mov	r3, r0
 8001534:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001538:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 81b6 	beq.w	80018ae <demoNdef+0x4fe>
            {
                platformLog("NDEF message cannot be displayed (ndefMessageDump returns %d)\r\n", err);
 8001542:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001546:	4619      	mov	r1, r3
 8001548:	4859      	ldr	r0, [pc, #356]	; (80016b0 <demoNdef+0x300>)
 800154a:	f7fe ffcb 	bl	80004e4 <logUsart>
                return;
 800154e:	e1b2      	b.n	80018b6 <demoNdef+0x506>
#if NDEF_FEATURE_ALL 
        /*
         * Demonstrate how to encode a text record and write the message to the tag
         */
        case NDEF_DEMO_WRITE_MSG1:
            ndefDemoFeature = NDEF_DEMO_READ; /* returns to READ mode after write */
 8001550:	4b4f      	ldr	r3, [pc, #316]	; (8001690 <demoNdef+0x2e0>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
            err  = ndefMessageInit(&message); /* Initialize message structure */
 8001556:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fd0e 	bl	8005f7c <ndefMessageInit>
 8001560:	4603      	mov	r3, r0
 8001562:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            bufTextLangCode.buffer = ndefTextLangCode;
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	4a52      	ldr	r2, [pc, #328]	; (80016b4 <demoNdef+0x304>)
 800156c:	601a      	str	r2, [r3, #0]
            bufTextLangCode.length = strlen((char *)ndefTextLangCode);
 800156e:	4851      	ldr	r0, [pc, #324]	; (80016b4 <demoNdef+0x304>)
 8001570:	f7fe fe04 	bl	800017c <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b2da      	uxtb	r2, r3
 8001578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157c:	711a      	strb	r2, [r3, #4]

            bufTextLangText.buffer = ndefTEXT;
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4a4d      	ldr	r2, [pc, #308]	; (80016b8 <demoNdef+0x308>)
 8001584:	601a      	str	r2, [r3, #0]
            bufTextLangText.length = strlen((char *)ndefTEXT);
 8001586:	484c      	ldr	r0, [pc, #304]	; (80016b8 <demoNdef+0x308>)
 8001588:	f7fe fdf8 	bl	800017c <strlen>
 800158c:	4602      	mov	r2, r0
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	605a      	str	r2, [r3, #4]

            err |= ndefRtdText(&text, TEXT_ENCODING_UTF8, &bufTextLangCode, &bufTextLangText); /* Initialize Text type structure */
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800159c:	f507 7011 	add.w	r0, r7, #580	; 0x244
 80015a0:	2100      	movs	r1, #0
 80015a2:	f006 fe55 	bl	8008250 <ndefRtdText>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80015ae:	4313      	orrs	r3, r2
 80015b0:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdTextToRecord(&text, &record1); /* Encode Text Record */
 80015b4:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 80015b8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f006 ff6a 	bl	8008498 <ndefRtdTextToRecord>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80015cc:	4313      	orrs	r3, r2
 80015ce:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefMessageAppend(&message, &record1); /* Append Text record to message */
 80015d2:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 80015d6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f004 fd1b 	bl	8006018 <ndefMessageAppend>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80015ea:	4313      	orrs	r3, r2
 80015ec:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 80015f0:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <demoNdef+0x256>
            {
                platformLog("Message creation failed\r\n", err);
 80015f8:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80015fc:	4619      	mov	r1, r3
 80015fe:	482f      	ldr	r0, [pc, #188]	; (80016bc <demoNdef+0x30c>)
 8001600:	f7fe ff70 	bl	80004e4 <logUsart>
                return;
 8001604:	e157      	b.n	80018b6 <demoNdef+0x506>
            }
            err = ndefPollerWriteMessage(&ndefCtx, &message); /* Write message */
 8001606:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800160a:	4619      	mov	r1, r3
 800160c:	481c      	ldr	r0, [pc, #112]	; (8001680 <demoNdef+0x2d0>)
 800160e:	f007 fafd 	bl	8008c0c <ndefPollerWriteMessage>
 8001612:	4603      	mov	r3, r0
 8001614:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001618:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <demoNdef+0x27e>
            {
                platformLog("Message cannot be written (ndefPollerWriteMessage return %d)\r\n", err);
 8001620:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001624:	4619      	mov	r1, r3
 8001626:	4826      	ldr	r0, [pc, #152]	; (80016c0 <demoNdef+0x310>)
 8001628:	f7fe ff5c 	bl	80004e4 <logUsart>
                return;
 800162c:	e143      	b.n	80018b6 <demoNdef+0x506>
            }
            platformLog("Wrote 1 record to the Tag\r\n");
 800162e:	4825      	ldr	r0, [pc, #148]	; (80016c4 <demoNdef+0x314>)
 8001630:	f7fe ff58 	bl	80004e4 <logUsart>
            if( verbose )
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <demoNdef+0x2d8>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01d      	beq.n	8001678 <demoNdef+0x2c8>
            {
                /* Dump raw message */
                bufRawMessage.buffer = rawMessageBuf;
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <demoNdef+0x2f0>)
 800163e:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
                bufRawMessage.length = sizeof(rawMessageBuf);
 8001642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001646:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
                err = ndefMessageEncode(&message, &bufRawMessage);
 800164a:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800164e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f004 fd8d 	bl	8006174 <ndefMessageEncode>
 800165a:	4603      	mov	r3, r0
 800165c:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
                if( err == ERR_NONE )
 8001660:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001664:	2b00      	cmp	r3, #0
 8001666:	d107      	bne.n	8001678 <demoNdef+0x2c8>
                {
                    ndefBufferDump("Raw message", (ndefConstBuffer*)&bufRawMessage, verbose);
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <demoNdef+0x2d8>)
 800166a:	781a      	ldrb	r2, [r3, #0]
 800166c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8001670:	4619      	mov	r1, r3
 8001672:	4815      	ldr	r0, [pc, #84]	; (80016c8 <demoNdef+0x318>)
 8001674:	f001 fa5c 	bl	8002b30 <ndefBufferDump>
                }
            }
            LedNotificationWriteDone();
 8001678:	f000 fd0a 	bl	8002090 <LedNotificationWriteDone>
            break;
 800167c:	e118      	b.n	80018b0 <demoNdef+0x500>
 800167e:	bf00      	nop
 8001680:	20000328 	.word	0x20000328
 8001684:	08019a2c 	.word	0x08019a2c
 8001688:	20000cfd 	.word	0x20000cfd
 800168c:	08019a70 	.word	0x08019a70
 8001690:	20000cfc 	.word	0x20000cfc
 8001694:	20000044 	.word	0x20000044
 8001698:	08019aa8 	.word	0x08019aa8
 800169c:	08019ac0 	.word	0x08019ac0
 80016a0:	20000d00 	.word	0x20000d00
 80016a4:	08019adc 	.word	0x08019adc
 80016a8:	08019b20 	.word	0x08019b20
 80016ac:	08019b30 	.word	0x08019b30
 80016b0:	08019b74 	.word	0x08019b74
 80016b4:	20000084 	.word	0x20000084
 80016b8:	2000006c 	.word	0x2000006c
 80016bc:	08019bb4 	.word	0x08019bb4
 80016c0:	08019bd0 	.word	0x08019bd0
 80016c4:	08019c10 	.word	0x08019c10
 80016c8:	08019c2c 	.word	0x08019c2c

        /*
         * Demonstrate how to encode a URI record and a AAR record, how to encode the message to a raw buffer and then how to write the raw buffer
         */
        case NDEF_DEMO_WRITE_MSG2:
            ndefDemoFeature = NDEF_DEMO_READ;  /* returns to READ mode after write */
 80016cc:	4b7c      	ldr	r3, [pc, #496]	; (80018c0 <demoNdef+0x510>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
            err  = ndefMessageInit(&message);  /* Initialize message structure */
 80016d2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 fc50 	bl	8005f7c <ndefMessageInit>
 80016dc:	4603      	mov	r3, r0
 80016de:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            bufUri.buffer = ndefURI;
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4a77      	ldr	r2, [pc, #476]	; (80018c4 <demoNdef+0x514>)
 80016e8:	601a      	str	r2, [r3, #0]
            bufUri.length = strlen((char *)ndefURI);
 80016ea:	4876      	ldr	r0, [pc, #472]	; (80018c4 <demoNdef+0x514>)
 80016ec:	f7fe fd46 	bl	800017c <strlen>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	605a      	str	r2, [r3, #4]
            err |= ndefRtdUri(&uri, NDEF_URI_PREFIX_HTTP_WWW, &bufUri); /* Initialize URI type structure */
 80016f8:	f107 0214 	add.w	r2, r7, #20
 80016fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001700:	2101      	movs	r1, #1
 8001702:	4618      	mov	r0, r3
 8001704:	f006 ffa2 	bl	800864c <ndefRtdUri>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001710:	4313      	orrs	r3, r2
 8001712:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdUriToRecord(&uri, &record1); /* Encode URI Record */
 8001716:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 800171a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f007 f881 	bl	8008828 <ndefRtdUriToRecord>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800172e:	4313      	orrs	r3, r2
 8001730:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            bufAndroidPackName.buffer = ndefAndroidPackName;
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	4a63      	ldr	r2, [pc, #396]	; (80018c8 <demoNdef+0x518>)
 800173a:	601a      	str	r2, [r3, #0]
            bufAndroidPackName.length = sizeof(ndefAndroidPackName) - 1U;
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	220e      	movs	r2, #14
 8001742:	605a      	str	r2, [r3, #4]
            err |= ndefRtdAar(&aar, &bufAndroidPackName); /* Initialize AAR type structure */
 8001744:	f107 020c 	add.w	r2, r7, #12
 8001748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f007 f88e 	bl	8008870 <ndefRtdAar>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800175c:	4313      	orrs	r3, r2
 800175e:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdAarToRecord(&aar, &record2); /* Encode AAR record */
 8001762:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8001766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f007 f901 	bl	8008974 <ndefRtdAarToRecord>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800177a:	4313      	orrs	r3, r2
 800177c:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            err |= ndefMessageAppend(&message, &record1); /* Append URI to message */
 8001780:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8001784:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f004 fc44 	bl	8006018 <ndefMessageAppend>
 8001790:	4603      	mov	r3, r0
 8001792:	461a      	mov	r2, r3
 8001794:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001798:	4313      	orrs	r3, r2
 800179a:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefMessageAppend(&message, &record2); /* Append AAR to message (record #2 is an example of preformatted record) */
 800179e:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80017a2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f004 fc35 	bl	8006018 <ndefMessageAppend>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80017b6:	4313      	orrs	r3, r2
 80017b8:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            bufRawMessage.buffer = rawMessageBuf;
 80017bc:	4b43      	ldr	r3, [pc, #268]	; (80018cc <demoNdef+0x51c>)
 80017be:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
            bufRawMessage.length = sizeof(rawMessageBuf);
 80017c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c6:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
            err |= ndefMessageEncode(&message, &bufRawMessage); /* Encode the message to the raw buffer */
 80017ca:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80017ce:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f004 fccd 	bl	8006174 <ndefMessageEncode>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80017e2:	4313      	orrs	r3, r2
 80017e4:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 80017e8:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <demoNdef+0x44e>
            {
                platformLog("Raw message creation failed\r\n", err);
 80017f0:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80017f4:	4619      	mov	r1, r3
 80017f6:	4836      	ldr	r0, [pc, #216]	; (80018d0 <demoNdef+0x520>)
 80017f8:	f7fe fe74 	bl	80004e4 <logUsart>
                return;
 80017fc:	e05b      	b.n	80018b6 <demoNdef+0x506>
            }
            err = ndefPollerWriteRawMessage(&ndefCtx, bufRawMessage.buffer, bufRawMessage.length);
 80017fe:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8001802:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 8001806:	4619      	mov	r1, r3
 8001808:	4832      	ldr	r0, [pc, #200]	; (80018d4 <demoNdef+0x524>)
 800180a:	f007 f949 	bl	8008aa0 <ndefPollerWriteRawMessage>
 800180e:	4603      	mov	r3, r0
 8001810:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001814:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <demoNdef+0x47a>
            {
                platformLog("Message cannot be written (ndefPollerWriteRawMessage return %d)\r\n", err);
 800181c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001820:	4619      	mov	r1, r3
 8001822:	482d      	ldr	r0, [pc, #180]	; (80018d8 <demoNdef+0x528>)
 8001824:	f7fe fe5e 	bl	80004e4 <logUsart>
                return;
 8001828:	e045      	b.n	80018b6 <demoNdef+0x506>
            }
            platformLog("Wrote 2 records to the Tag\r\n");
 800182a:	482c      	ldr	r0, [pc, #176]	; (80018dc <demoNdef+0x52c>)
 800182c:	f7fe fe5a 	bl	80004e4 <logUsart>
            if( verbose )
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <demoNdef+0x530>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <demoNdef+0x498>
            {
                /* Dump raw message */
                ndefBufferDump("Raw message", (ndefConstBuffer*)&bufRawMessage, verbose);
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <demoNdef+0x530>)
 800183a:	781a      	ldrb	r2, [r3, #0]
 800183c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8001840:	4619      	mov	r1, r3
 8001842:	4828      	ldr	r0, [pc, #160]	; (80018e4 <demoNdef+0x534>)
 8001844:	f001 f974 	bl	8002b30 <ndefBufferDump>
            }
            LedNotificationWriteDone();
 8001848:	f000 fc22 	bl	8002090 <LedNotificationWriteDone>
            break;
 800184c:	e030      	b.n	80018b0 <demoNdef+0x500>

        /*
         * Demonstrate how to format a Tag
         */
        case NDEF_DEMO_FORMAT_TAG:
            ndefDemoFeature = NDEF_DEMO_READ;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <demoNdef+0x510>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
            if( !ndefIsSTTag(&ndefCtx) )
 8001854:	481f      	ldr	r0, [pc, #124]	; (80018d4 <demoNdef+0x524>)
 8001856:	f000 fbe3 	bl	8002020 <ndefIsSTTag>
 800185a:	4603      	mov	r3, r0
 800185c:	f083 0301 	eor.w	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <demoNdef+0x4be>
            {
                platformLog("Manufacturer ID not found or not an ST tag. Format aborted \r\n");
 8001866:	4820      	ldr	r0, [pc, #128]	; (80018e8 <demoNdef+0x538>)
 8001868:	f7fe fe3c 	bl	80004e4 <logUsart>
                return;
 800186c:	e023      	b.n	80018b6 <demoNdef+0x506>
            }
            platformLog("Formatting Tag...\r\n");
 800186e:	481f      	ldr	r0, [pc, #124]	; (80018ec <demoNdef+0x53c>)
 8001870:	f7fe fe38 	bl	80004e4 <logUsart>
            /* Format Tag */
            err = ndefPollerTagFormat(&ndefCtx, NULL, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	4816      	ldr	r0, [pc, #88]	; (80018d4 <demoNdef+0x524>)
 800187a:	f007 f930 	bl	8008ade <ndefPollerTagFormat>
 800187e:	4603      	mov	r3, r0
 8001880:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001884:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <demoNdef+0x4ea>
            {
                platformLog("Tag cannot be formatted (ndefPollerTagFormat returns %d)\r\n", err);
 800188c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001890:	4619      	mov	r1, r3
 8001892:	4817      	ldr	r0, [pc, #92]	; (80018f0 <demoNdef+0x540>)
 8001894:	f7fe fe26 	bl	80004e4 <logUsart>
                return;
 8001898:	e00d      	b.n	80018b6 <demoNdef+0x506>
            }
            platformLog("Tag formatted\r\n");
 800189a:	4816      	ldr	r0, [pc, #88]	; (80018f4 <demoNdef+0x544>)
 800189c:	f7fe fe22 	bl	80004e4 <logUsart>
            LedNotificationWriteDone();
 80018a0:	f000 fbf6 	bl	8002090 <LedNotificationWriteDone>
            break;
 80018a4:	e004      	b.n	80018b0 <demoNdef+0x500>
#endif /* NDEF_FEATURE_ALL */

        default:
            ndefDemoFeature = NDEF_DEMO_READ;
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <demoNdef+0x510>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
            break;     
 80018ac:	e000      	b.n	80018b0 <demoNdef+0x500>
            break;
 80018ae:	bf00      	nop
    }
    return;
 80018b0:	bf00      	nop
 80018b2:	e000      	b.n	80018b6 <demoNdef+0x506>
                return;
 80018b4:	bf00      	nop
}
 80018b6:	f507 7770 	add.w	r7, r7, #960	; 0x3c0
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000cfc 	.word	0x20000cfc
 80018c4:	20000064 	.word	0x20000064
 80018c8:	20000088 	.word	0x20000088
 80018cc:	20000d00 	.word	0x20000d00
 80018d0:	08019c38 	.word	0x08019c38
 80018d4:	20000328 	.word	0x20000328
 80018d8:	08019c58 	.word	0x08019c58
 80018dc:	08019c9c 	.word	0x08019c9c
 80018e0:	20000cfd 	.word	0x20000cfd
 80018e4:	08019c2c 	.word	0x08019c2c
 80018e8:	08019cbc 	.word	0x08019cbc
 80018ec:	08019cfc 	.word	0x08019cfc
 80018f0:	08019d10 	.word	0x08019d10
 80018f4:	08019d4c 	.word	0x08019d4c

080018f8 <ndefT2TCCDump>:

static void ndefT2TCCDump(ndefContext *ctx)
{
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af04      	add	r7, sp, #16
 80018fe:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;

    platformLog(" * Magic: %2.2Xh Version: %d.%d Size: %d (%d bytes) \r\n * readAccess: %2.2xh writeAccess: %2.2xh \r\n", ctx->cc.t2t.magicNumber, ctx->cc.t2t.majorVersion, ctx->cc.t2t.minorVersion, ctx->cc.t2t.size, ctx->cc.t2t.size * 8U, ctx->cc.t2t.readAccess, ctx->cc.t2t.writeAccess);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001906:	461c      	mov	r4, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800190e:	461d      	mov	r5, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001916:	461e      	mov	r6, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800191e:	4619      	mov	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800192e:	4610      	mov	r0, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 8001936:	9203      	str	r2, [sp, #12]
 8001938:	9002      	str	r0, [sp, #8]
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	9100      	str	r1, [sp, #0]
 800193e:	4633      	mov	r3, r6
 8001940:	462a      	mov	r2, r5
 8001942:	4621      	mov	r1, r4
 8001944:	4809      	ldr	r0, [pc, #36]	; (800196c <ndefT2TCCDump+0x74>)
 8001946:	f7fe fdcd 	bl	80004e4 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	339c      	adds	r3, #156	; 0x9c
 800194e:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = 4;
 8001950:	2304      	movs	r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <ndefT2TCCDump+0x78>)
 8001956:	781a      	ldrb	r2, [r3, #0]
 8001958:	f107 0308 	add.w	r3, r7, #8
 800195c:	4619      	mov	r1, r3
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <ndefT2TCCDump+0x7c>)
 8001960:	f001 f8e6 	bl	8002b30 <ndefBufferDump>
  
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800196c:	08019d5c 	.word	0x08019d5c
 8001970:	20000cfd 	.word	0x20000cfd
 8001974:	08019dc0 	.word	0x08019dc0

08001978 <ndefT3TAIBDump>:

static void ndefT3TAIBDump(ndefContext *ctx)
{
 8001978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197a:	b08b      	sub	sp, #44	; 0x2c
 800197c:	af06      	add	r7, sp, #24
 800197e:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;

    platformLog(" * Version: %d.%d Size: %d (%d bytes) NbR: %d NbW: %d\r\n * WriteFlag: %2.2xh RWFlag: %2.2xh \r\n", ctx->cc.t3t.majorVersion, ctx->cc.t3t.minorVersion, ctx->cc.t3t.nMaxB, ctx->cc.t3t.nMaxB * 16U, ctx->cc.t3t.nbR, ctx->cc.t3t.nbW, ctx->cc.t3t.writeFlag, ctx->cc.t3t.rwFlag);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001986:	461d      	mov	r5, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800198e:	461e      	mov	r6, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001996:	469c      	mov	ip, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 80019a6:	4611      	mov	r1, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 80019ae:	4610      	mov	r0, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 80019b6:	4614      	mov	r4, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 80019be:	9204      	str	r2, [sp, #16]
 80019c0:	9403      	str	r4, [sp, #12]
 80019c2:	9002      	str	r0, [sp, #8]
 80019c4:	9101      	str	r1, [sp, #4]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	4663      	mov	r3, ip
 80019ca:	4632      	mov	r2, r6
 80019cc:	4629      	mov	r1, r5
 80019ce:	480a      	ldr	r0, [pc, #40]	; (80019f8 <ndefT3TAIBDump+0x80>)
 80019d0:	f7fe fd88 	bl	80004e4 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	339c      	adds	r3, #156	; 0x9c
 80019d8:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = 16;
 80019da:	2310      	movs	r3, #16
 80019dc:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <ndefT3TAIBDump+0x84>)
 80019e0:	781a      	ldrb	r2, [r3, #0]
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4619      	mov	r1, r3
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <ndefT3TAIBDump+0x88>)
 80019ea:	f001 f8a1 	bl	8002b30 <ndefBufferDump>
}
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f6:	bf00      	nop
 80019f8:	08019dd0 	.word	0x08019dd0
 80019fc:	20000cfd 	.word	0x20000cfd
 8001a00:	08019dc0 	.word	0x08019dc0

08001a04 <ndefT4TCCDump>:

static void ndefT4TCCDump(ndefContext *ctx)
{
 8001a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a06:	b08b      	sub	sp, #44	; 0x2c
 8001a08:	af06      	add	r7, sp, #24
 8001a0a:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;
    
    platformLog(" * CCLEN: %d T4T_VNo: %xh MLe: %d MLc: %d FileId: %2.2x%2.2xh FileSize: %d\r\n * readAccess: %2.2xh writeAccess: %2.2xh\r\n", ctx->cc.t4t.ccLen, ctx->cc.t4t.vNo, ctx->cc.t4t.mLe, ctx->cc.t4t.mLc, ctx->cc.t4t.fileId[0], ctx->cc.t4t.fileId[1],ctx->cc.t4t.fileSize, ctx->cc.t4t.readAccess, ctx->cc.t4t.writeAccess);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001a12:	461e      	mov	r6, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001a1a:	469c      	mov	ip, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001a22:	469e      	mov	lr, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001a32:	4618      	mov	r0, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8001a3a:	461c      	mov	r4, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8001a48:	4615      	mov	r5, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	f892 208d 	ldrb.w	r2, [r2, #141]	; 0x8d
 8001a50:	9205      	str	r2, [sp, #20]
 8001a52:	9504      	str	r5, [sp, #16]
 8001a54:	9303      	str	r3, [sp, #12]
 8001a56:	9402      	str	r4, [sp, #8]
 8001a58:	9001      	str	r0, [sp, #4]
 8001a5a:	9100      	str	r1, [sp, #0]
 8001a5c:	4673      	mov	r3, lr
 8001a5e:	4662      	mov	r2, ip
 8001a60:	4631      	mov	r1, r6
 8001a62:	480b      	ldr	r0, [pc, #44]	; (8001a90 <ndefT4TCCDump+0x8c>)
 8001a64:	f7fe fd3e 	bl	80004e4 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	339c      	adds	r3, #156	; 0x9c
 8001a6c:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = ctx->cc.t4t.ccLen;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001a74:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC File Raw Data", &bufCcBuf, verbose);
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <ndefT4TCCDump+0x90>)
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <ndefT4TCCDump+0x94>)
 8001a82:	f001 f855 	bl	8002b30 <ndefBufferDump>
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	08019e30 	.word	0x08019e30
 8001a94:	20000cfd 	.word	0x20000cfd
 8001a98:	08019ea8 	.word	0x08019ea8

08001a9c <ndefT5TCCDump>:

static void ndefT5TCCDump(ndefContext *ctx)
{
 8001a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9e:	b08b      	sub	sp, #44	; 0x2c
 8001aa0:	af06      	add	r7, sp, #24
 8001aa2:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;
    
    platformLog(" * Block Length: %d\r\n", ctx->subCtx.t5t.blockLen);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4831      	ldr	r0, [pc, #196]	; (8001b74 <ndefT5TCCDump+0xd8>)
 8001aae:	f7fe fd19 	bl	80004e4 <logUsart>
    platformLog(" * %d bytes CC\r\n * Magic: %2.2Xh Version: %d.%d MLEN: %d (%d bytes) \r\n * readAccess: %2.2xh writeAccess: %2.2xh \r\n", ctx->cc.t5t.ccLen, ctx->cc.t5t.magicNumber, ctx->cc.t5t.majorVersion, ctx->cc.t5t.minorVersion, ctx->cc.t5t.memoryLen, ctx->cc.t5t.memoryLen * 8U, ctx->cc.t5t.readAccess, ctx->cc.t5t.writeAccess);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001ab8:	461d      	mov	r5, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001ac0:	461e      	mov	r6, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001ac8:	469c      	mov	ip, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001ad8:	4618      	mov	r0, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8001ae8:	4614      	mov	r4, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 8001af0:	9204      	str	r2, [sp, #16]
 8001af2:	9403      	str	r4, [sp, #12]
 8001af4:	9302      	str	r3, [sp, #8]
 8001af6:	9001      	str	r0, [sp, #4]
 8001af8:	9100      	str	r1, [sp, #0]
 8001afa:	4663      	mov	r3, ip
 8001afc:	4632      	mov	r2, r6
 8001afe:	4629      	mov	r1, r5
 8001b00:	481d      	ldr	r0, [pc, #116]	; (8001b78 <ndefT5TCCDump+0xdc>)
 8001b02:	f7fe fcef 	bl	80004e4 <logUsart>
    platformLog(" * [%c] Special Frame\r\n",       ctx->cc.t5t.specialFrame ?      'X' : ' ');
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <ndefT5TCCDump+0x78>
 8001b10:	2358      	movs	r3, #88	; 0x58
 8001b12:	e000      	b.n	8001b16 <ndefT5TCCDump+0x7a>
 8001b14:	2320      	movs	r3, #32
 8001b16:	4619      	mov	r1, r3
 8001b18:	4818      	ldr	r0, [pc, #96]	; (8001b7c <ndefT5TCCDump+0xe0>)
 8001b1a:	f7fe fce3 	bl	80004e4 <logUsart>
    platformLog(" * [%c] Multiple block Read\r\n", ctx->cc.t5t.multipleBlockRead ? 'X' : ' ');
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <ndefT5TCCDump+0x90>
 8001b28:	2358      	movs	r3, #88	; 0x58
 8001b2a:	e000      	b.n	8001b2e <ndefT5TCCDump+0x92>
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4813      	ldr	r0, [pc, #76]	; (8001b80 <ndefT5TCCDump+0xe4>)
 8001b32:	f7fe fcd7 	bl	80004e4 <logUsart>
    platformLog(" * [%c] Lock Block\r\n",          ctx->cc.t5t.lockBlock ?         'X' : ' ');
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <ndefT5TCCDump+0xa8>
 8001b40:	2358      	movs	r3, #88	; 0x58
 8001b42:	e000      	b.n	8001b46 <ndefT5TCCDump+0xaa>
 8001b44:	2320      	movs	r3, #32
 8001b46:	4619      	mov	r1, r3
 8001b48:	480e      	ldr	r0, [pc, #56]	; (8001b84 <ndefT5TCCDump+0xe8>)
 8001b4a:	f7fe fccb 	bl	80004e4 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	339c      	adds	r3, #156	; 0x9c
 8001b52:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = ctx->cc.t5t.ccLen;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001b5a:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <ndefT5TCCDump+0xec>)
 8001b5e:	781a      	ldrb	r2, [r3, #0]
 8001b60:	f107 0308 	add.w	r3, r7, #8
 8001b64:	4619      	mov	r1, r3
 8001b66:	4809      	ldr	r0, [pc, #36]	; (8001b8c <ndefT5TCCDump+0xf0>)
 8001b68:	f000 ffe2 	bl	8002b30 <ndefBufferDump>
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b74:	08019ebc 	.word	0x08019ebc
 8001b78:	08019ed4 	.word	0x08019ed4
 8001b7c:	08019f48 	.word	0x08019f48
 8001b80:	08019f60 	.word	0x08019f60
 8001b84:	08019f80 	.word	0x08019f80
 8001b88:	20000cfd 	.word	0x20000cfd
 8001b8c:	08019dc0 	.word	0x08019dc0

08001b90 <ndefCCDump>:

static void ndefCCDump(ndefContext *ctx)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
    if( (ctx == NULL) || !verbose)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d03c      	beq.n	8001c18 <ndefCCDump+0x88>
 8001b9e:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <ndefCCDump+0x94>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	f083 0301 	eor.w	r3, r3, #1
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d135      	bne.n	8001c18 <ndefCCDump+0x88>
    {
        return;
    }
    platformLog("%s", (ctx->device.type ==  RFAL_NFC_LISTEN_TYPE_NFCF) ? "NDEF Attribute Information Block\r\n" : "NDEF Capability Container\r\n");
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d101      	bne.n	8001bb8 <ndefCCDump+0x28>
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <ndefCCDump+0x98>)
 8001bb6:	e000      	b.n	8001bba <ndefCCDump+0x2a>
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <ndefCCDump+0x9c>)
 8001bba:	4619      	mov	r1, r3
 8001bbc:	481c      	ldr	r0, [pc, #112]	; (8001c30 <ndefCCDump+0xa0>)
 8001bbe:	f7fe fc91 	bl	80004e4 <logUsart>
    switch( ctx->device.type )
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d828      	bhi.n	8001c1c <ndefCCDump+0x8c>
 8001bca:	a201      	add	r2, pc, #4	; (adr r2, 8001bd0 <ndefCCDump+0x40>)
 8001bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd0:	08001be1 	.word	0x08001be1
 8001bd4:	08001c01 	.word	0x08001c01
 8001bd8:	08001c09 	.word	0x08001c09
 8001bdc:	08001c11 	.word	0x08001c11
    {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            switch( ctx->device.dev.nfca.type )
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	785b      	ldrb	r3, [r3, #1]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <ndefCCDump+0x5e>
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d004      	beq.n	8001bf6 <ndefCCDump+0x66>
                    break;
                case RFAL_NFCA_T4T:
                    ndefT4TCCDump(ctx);
                    break;
                default:
                    break;
 8001bec:	e007      	b.n	8001bfe <ndefCCDump+0x6e>
                    ndefT2TCCDump(ctx);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fe82 	bl	80018f8 <ndefT2TCCDump>
                    break;
 8001bf4:	e003      	b.n	8001bfe <ndefCCDump+0x6e>
                    ndefT4TCCDump(ctx);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ff04 	bl	8001a04 <ndefT4TCCDump>
                    break;
 8001bfc:	bf00      	nop
            }
            break;
 8001bfe:	e00e      	b.n	8001c1e <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            ndefT4TCCDump(ctx);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff feff 	bl	8001a04 <ndefT4TCCDump>
            break;
 8001c06:	e00a      	b.n	8001c1e <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            ndefT3TAIBDump(ctx);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff feb5 	bl	8001978 <ndefT3TAIBDump>
            break;
 8001c0e:	e006      	b.n	8001c1e <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            ndefT5TCCDump(ctx);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff43 	bl	8001a9c <ndefT5TCCDump>
            break;
 8001c16:	e002      	b.n	8001c1e <ndefCCDump+0x8e>
        return;
 8001c18:	bf00      	nop
 8001c1a:	e000      	b.n	8001c1e <ndefCCDump+0x8e>
        default:
            break;
 8001c1c:	bf00      	nop
    }
}
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000cfd 	.word	0x20000cfd
 8001c28:	08019f98 	.word	0x08019f98
 8001c2c:	08019fbc 	.word	0x08019fbc
 8001c30:	08019fd8 	.word	0x08019fd8

08001c34 <ndefDumpSysInfo>:

static void ndefDumpSysInfo(ndefContext *ctx)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
    ndefSystemInformation *sysInfo;

    if( (ctx == NULL) || !verbose)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 81db 	beq.w	8001ffa <ndefDumpSysInfo+0x3c6>
 8001c44:	4bb3      	ldr	r3, [pc, #716]	; (8001f14 <ndefDumpSysInfo+0x2e0>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	f083 0301 	eor.w	r3, r3, #1
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 81d3 	bne.w	8001ffa <ndefDumpSysInfo+0x3c6>
    {
        return;
    }
    
    if( !ctx->subCtx.t5t.sysInfoSupported )
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 8001c5a:	f083 0301 	eor.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f040 81cc 	bne.w	8001ffe <ndefDumpSysInfo+0x3ca>
    {
        return;
    }
    
    sysInfo = &ctx->subCtx.t5t.sysInfo;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	33be      	adds	r3, #190	; 0xbe
 8001c6a:	60fb      	str	r3, [r7, #12]
    platformLog("System Information\r\n");
 8001c6c:	48aa      	ldr	r0, [pc, #680]	; (8001f18 <ndefDumpSysInfo+0x2e4>)
 8001c6e:	f7fe fc39 	bl	80004e4 <logUsart>
    platformLog(" * %d byte(s) memory addressing\r\n", ndefT5TSysInfoMOIValue(sysInfo->infoFlags) + 1);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	7b9b      	ldrb	r3, [r3, #14]
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	3301      	adds	r3, #1
 8001c80:	4619      	mov	r1, r3
 8001c82:	48a6      	ldr	r0, [pc, #664]	; (8001f1c <ndefDumpSysInfo+0x2e8>)
 8001c84:	f7fe fc2e 	bl	80004e4 <logUsart>
    if( ndefT5TSysInfoDFSIDPresent(sysInfo->infoFlags) )
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	7b9b      	ldrb	r3, [r3, #14]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <ndefDumpSysInfo+0x6c>
    {
        platformLog(" * DFSID=%2.2Xh\r\n", sysInfo->DFSID);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	7bdb      	ldrb	r3, [r3, #15]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	48a1      	ldr	r0, [pc, #644]	; (8001f20 <ndefDumpSysInfo+0x2ec>)
 8001c9c:	f7fe fc22 	bl	80004e4 <logUsart>
    }
    if( ndefT5TSysInfoAFIPresent(sysInfo->infoFlags) )
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	7b9b      	ldrb	r3, [r3, #14]
 8001ca4:	085b      	lsrs	r3, r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <ndefDumpSysInfo+0x88>
    {
        platformLog(" * AFI=%2.2Xh\r\n", sysInfo->AFI);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	7c1b      	ldrb	r3, [r3, #16]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	489b      	ldr	r0, [pc, #620]	; (8001f24 <ndefDumpSysInfo+0x2f0>)
 8001cb8:	f7fe fc14 	bl	80004e4 <logUsart>
    }
    if( ndefT5TSysInfoMemSizePresent(sysInfo->infoFlags) )
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	7b9b      	ldrb	r3, [r3, #14]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <ndefDumpSysInfo+0xaa>
    {
        platformLog(" * %d blocks, %d bytes per block\r\n", sysInfo->numberOfBlock, sysInfo->blockSize);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	7c5b      	ldrb	r3, [r3, #17]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4893      	ldr	r0, [pc, #588]	; (8001f28 <ndefDumpSysInfo+0x2f4>)
 8001cda:	f7fe fc03 	bl	80004e4 <logUsart>
    }
    if( ndefT5TSysInfoICRefPresent(sysInfo->infoFlags) )
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	7b9b      	ldrb	r3, [r3, #14]
 8001ce2:	08db      	lsrs	r3, r3, #3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <ndefDumpSysInfo+0xc6>
    {
        platformLog(" * ICRef=%2.2xh\r\n", sysInfo->ICRef);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	7c9b      	ldrb	r3, [r3, #18]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	488d      	ldr	r0, [pc, #564]	; (8001f2c <ndefDumpSysInfo+0x2f8>)
 8001cf6:	f7fe fbf5 	bl	80004e4 <logUsart>
    }
    if( ndefT5TSysInfoCmdListPresent(sysInfo->infoFlags) )
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	7b9b      	ldrb	r3, [r3, #14]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 817b 	beq.w	8002002 <ndefDumpSysInfo+0x3ce>
    {
        platformLog(" * [%c] ReadSingleBlock                \r\n", ndefT5TSysInfoReadSingleBlockSupported(sysInfo->supportedCmd)                 ? 'X' : ' ');               
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	7a9b      	ldrb	r3, [r3, #10]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <ndefDumpSysInfo+0xe8>
 8001d18:	2358      	movs	r3, #88	; 0x58
 8001d1a:	e000      	b.n	8001d1e <ndefDumpSysInfo+0xea>
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4883      	ldr	r0, [pc, #524]	; (8001f30 <ndefDumpSysInfo+0x2fc>)
 8001d22:	f7fe fbdf 	bl	80004e4 <logUsart>
        platformLog(" * [%c] WriteSingleBlock               \r\n", ndefT5TSysInfoWriteSingleBlockSupported(sysInfo->supportedCmd)                ? 'X' : ' ');
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	7a9b      	ldrb	r3, [r3, #10]
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <ndefDumpSysInfo+0x106>
 8001d36:	2358      	movs	r3, #88	; 0x58
 8001d38:	e000      	b.n	8001d3c <ndefDumpSysInfo+0x108>
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	487d      	ldr	r0, [pc, #500]	; (8001f34 <ndefDumpSysInfo+0x300>)
 8001d40:	f7fe fbd0 	bl	80004e4 <logUsart>
        platformLog(" * [%c] LockSingleBlock                \r\n", ndefT5TSysInfoLockSingleBlockSupported(sysInfo->supportedCmd)                 ? 'X' : ' ');
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	7a9b      	ldrb	r3, [r3, #10]
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <ndefDumpSysInfo+0x124>
 8001d54:	2358      	movs	r3, #88	; 0x58
 8001d56:	e000      	b.n	8001d5a <ndefDumpSysInfo+0x126>
 8001d58:	2320      	movs	r3, #32
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4876      	ldr	r0, [pc, #472]	; (8001f38 <ndefDumpSysInfo+0x304>)
 8001d5e:	f7fe fbc1 	bl	80004e4 <logUsart>
        platformLog(" * [%c] ReadMultipleBlocks             \r\n", ndefT5TSysInfoReadMultipleBlocksSupported(sysInfo->supportedCmd)              ? 'X' : ' ');
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	7a9b      	ldrb	r3, [r3, #10]
 8001d66:	08db      	lsrs	r3, r3, #3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <ndefDumpSysInfo+0x142>
 8001d72:	2358      	movs	r3, #88	; 0x58
 8001d74:	e000      	b.n	8001d78 <ndefDumpSysInfo+0x144>
 8001d76:	2320      	movs	r3, #32
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4870      	ldr	r0, [pc, #448]	; (8001f3c <ndefDumpSysInfo+0x308>)
 8001d7c:	f7fe fbb2 	bl	80004e4 <logUsart>
        platformLog(" * [%c] WriteMultipleBlocks            \r\n", ndefT5TSysInfoWriteMultipleBlocksSupported(sysInfo->supportedCmd)             ? 'X' : ' ');
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	7a9b      	ldrb	r3, [r3, #10]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <ndefDumpSysInfo+0x160>
 8001d90:	2358      	movs	r3, #88	; 0x58
 8001d92:	e000      	b.n	8001d96 <ndefDumpSysInfo+0x162>
 8001d94:	2320      	movs	r3, #32
 8001d96:	4619      	mov	r1, r3
 8001d98:	4869      	ldr	r0, [pc, #420]	; (8001f40 <ndefDumpSysInfo+0x30c>)
 8001d9a:	f7fe fba3 	bl	80004e4 <logUsart>
        platformLog(" * [%c] Select                         \r\n", ndefT5TSysInfoSelectSupported(sysInfo->supportedCmd)                          ? 'X' : ' ');
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	7a9b      	ldrb	r3, [r3, #10]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <ndefDumpSysInfo+0x17e>
 8001dae:	2358      	movs	r3, #88	; 0x58
 8001db0:	e000      	b.n	8001db4 <ndefDumpSysInfo+0x180>
 8001db2:	2320      	movs	r3, #32
 8001db4:	4619      	mov	r1, r3
 8001db6:	4863      	ldr	r0, [pc, #396]	; (8001f44 <ndefDumpSysInfo+0x310>)
 8001db8:	f7fe fb94 	bl	80004e4 <logUsart>
        platformLog(" * [%c] ResetToReady                   \r\n", ndefT5TSysInfoResetToReadySupported(sysInfo->supportedCmd)                    ? 'X' : ' ');
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	7a9b      	ldrb	r3, [r3, #10]
 8001dc0:	099b      	lsrs	r3, r3, #6
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <ndefDumpSysInfo+0x19c>
 8001dcc:	2358      	movs	r3, #88	; 0x58
 8001dce:	e000      	b.n	8001dd2 <ndefDumpSysInfo+0x19e>
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	485c      	ldr	r0, [pc, #368]	; (8001f48 <ndefDumpSysInfo+0x314>)
 8001dd6:	f7fe fb85 	bl	80004e4 <logUsart>
        platformLog(" * [%c] GetMultipleBlockSecStatus      \r\n", ndefT5TSysInfoGetMultipleBlockSecStatusSupported(sysInfo->supportedCmd)       ? 'X' : ' ');
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	7a9b      	ldrb	r3, [r3, #10]
 8001dde:	09db      	lsrs	r3, r3, #7
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <ndefDumpSysInfo+0x1ba>
 8001dea:	2358      	movs	r3, #88	; 0x58
 8001dec:	e000      	b.n	8001df0 <ndefDumpSysInfo+0x1bc>
 8001dee:	2320      	movs	r3, #32
 8001df0:	4619      	mov	r1, r3
 8001df2:	4856      	ldr	r0, [pc, #344]	; (8001f4c <ndefDumpSysInfo+0x318>)
 8001df4:	f7fe fb76 	bl	80004e4 <logUsart>
        platformLog(" * [%c] WriteAFI                       \r\n", ndefT5TSysInfoWriteAFISupported(sysInfo->supportedCmd)                        ? 'X' : ' ');
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	7adb      	ldrb	r3, [r3, #11]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <ndefDumpSysInfo+0x1d4>
 8001e04:	2358      	movs	r3, #88	; 0x58
 8001e06:	e000      	b.n	8001e0a <ndefDumpSysInfo+0x1d6>
 8001e08:	2320      	movs	r3, #32
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4850      	ldr	r0, [pc, #320]	; (8001f50 <ndefDumpSysInfo+0x31c>)
 8001e0e:	f7fe fb69 	bl	80004e4 <logUsart>
        platformLog(" * [%c] LockAFI                        \r\n", ndefT5TSysInfoLockAFISupported(sysInfo->supportedCmd)                         ? 'X' : ' ');
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	7adb      	ldrb	r3, [r3, #11]
 8001e16:	085b      	lsrs	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <ndefDumpSysInfo+0x1f2>
 8001e22:	2358      	movs	r3, #88	; 0x58
 8001e24:	e000      	b.n	8001e28 <ndefDumpSysInfo+0x1f4>
 8001e26:	2320      	movs	r3, #32
 8001e28:	4619      	mov	r1, r3
 8001e2a:	484a      	ldr	r0, [pc, #296]	; (8001f54 <ndefDumpSysInfo+0x320>)
 8001e2c:	f7fe fb5a 	bl	80004e4 <logUsart>
        platformLog(" * [%c] WriteDSFID                     \r\n", ndefT5TSysInfoWriteDSFIDSupported(sysInfo->supportedCmd)                      ? 'X' : ' ');
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	7adb      	ldrb	r3, [r3, #11]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <ndefDumpSysInfo+0x210>
 8001e40:	2358      	movs	r3, #88	; 0x58
 8001e42:	e000      	b.n	8001e46 <ndefDumpSysInfo+0x212>
 8001e44:	2320      	movs	r3, #32
 8001e46:	4619      	mov	r1, r3
 8001e48:	4843      	ldr	r0, [pc, #268]	; (8001f58 <ndefDumpSysInfo+0x324>)
 8001e4a:	f7fe fb4b 	bl	80004e4 <logUsart>
        platformLog(" * [%c] LockDSFID                      \r\n", ndefT5TSysInfoLockDSFIDSupported(sysInfo->supportedCmd)                       ? 'X' : ' ');
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	7adb      	ldrb	r3, [r3, #11]
 8001e52:	08db      	lsrs	r3, r3, #3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <ndefDumpSysInfo+0x22e>
 8001e5e:	2358      	movs	r3, #88	; 0x58
 8001e60:	e000      	b.n	8001e64 <ndefDumpSysInfo+0x230>
 8001e62:	2320      	movs	r3, #32
 8001e64:	4619      	mov	r1, r3
 8001e66:	483d      	ldr	r0, [pc, #244]	; (8001f5c <ndefDumpSysInfo+0x328>)
 8001e68:	f7fe fb3c 	bl	80004e4 <logUsart>
        platformLog(" * [%c] GetSystemInformation           \r\n", ndefT5TSysInfoGetSystemInformationSupported(sysInfo->supportedCmd)            ? 'X' : ' ');
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	7adb      	ldrb	r3, [r3, #11]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <ndefDumpSysInfo+0x24c>
 8001e7c:	2358      	movs	r3, #88	; 0x58
 8001e7e:	e000      	b.n	8001e82 <ndefDumpSysInfo+0x24e>
 8001e80:	2320      	movs	r3, #32
 8001e82:	4619      	mov	r1, r3
 8001e84:	4836      	ldr	r0, [pc, #216]	; (8001f60 <ndefDumpSysInfo+0x32c>)
 8001e86:	f7fe fb2d 	bl	80004e4 <logUsart>
        platformLog(" * [%c] CustomCmds                     \r\n", ndefT5TSysInfoCustomCmdsSupported(sysInfo->supportedCmd)                      ? 'X' : ' ');
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	7adb      	ldrb	r3, [r3, #11]
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <ndefDumpSysInfo+0x26a>
 8001e9a:	2358      	movs	r3, #88	; 0x58
 8001e9c:	e000      	b.n	8001ea0 <ndefDumpSysInfo+0x26c>
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4830      	ldr	r0, [pc, #192]	; (8001f64 <ndefDumpSysInfo+0x330>)
 8001ea4:	f7fe fb1e 	bl	80004e4 <logUsart>
        platformLog(" * [%c] FastReadMultipleBlocks         \r\n", ndefT5TSysInfoFastReadMultipleBlocksSupported(sysInfo->supportedCmd)          ? 'X' : ' ');
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	7adb      	ldrb	r3, [r3, #11]
 8001eac:	099b      	lsrs	r3, r3, #6
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <ndefDumpSysInfo+0x288>
 8001eb8:	2358      	movs	r3, #88	; 0x58
 8001eba:	e000      	b.n	8001ebe <ndefDumpSysInfo+0x28a>
 8001ebc:	2320      	movs	r3, #32
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4829      	ldr	r0, [pc, #164]	; (8001f68 <ndefDumpSysInfo+0x334>)
 8001ec2:	f7fe fb0f 	bl	80004e4 <logUsart>
        platformLog(" * [%c] ExtReadSingleBlock             \r\n", ndefT5TSysInfoExtReadSingleBlockSupported(sysInfo->supportedCmd)              ? 'X' : ' '); 
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	7b1b      	ldrb	r3, [r3, #12]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <ndefDumpSysInfo+0x2a2>
 8001ed2:	2358      	movs	r3, #88	; 0x58
 8001ed4:	e000      	b.n	8001ed8 <ndefDumpSysInfo+0x2a4>
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4824      	ldr	r0, [pc, #144]	; (8001f6c <ndefDumpSysInfo+0x338>)
 8001edc:	f7fe fb02 	bl	80004e4 <logUsart>
        platformLog(" * [%c] ExtWriteSingleBlock            \r\n", ndefT5TSysInfoExtWriteSingleBlockSupported(sysInfo->supportedCmd)             ? 'X' : ' ');
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	7b1b      	ldrb	r3, [r3, #12]
 8001ee4:	085b      	lsrs	r3, r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <ndefDumpSysInfo+0x2c0>
 8001ef0:	2358      	movs	r3, #88	; 0x58
 8001ef2:	e000      	b.n	8001ef6 <ndefDumpSysInfo+0x2c2>
 8001ef4:	2320      	movs	r3, #32
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	481d      	ldr	r0, [pc, #116]	; (8001f70 <ndefDumpSysInfo+0x33c>)
 8001efa:	f7fe faf3 	bl	80004e4 <logUsart>
        platformLog(" * [%c] ExtLockSingleBlock             \r\n", ndefT5TSysInfoExtLockSingleBlockSupported(sysInfo->supportedCmd)              ? 'X' : ' ');
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	7b1b      	ldrb	r3, [r3, #12]
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d032      	beq.n	8001f74 <ndefDumpSysInfo+0x340>
 8001f0e:	2358      	movs	r3, #88	; 0x58
 8001f10:	e031      	b.n	8001f76 <ndefDumpSysInfo+0x342>
 8001f12:	bf00      	nop
 8001f14:	20000cfd 	.word	0x20000cfd
 8001f18:	08019fdc 	.word	0x08019fdc
 8001f1c:	08019ff4 	.word	0x08019ff4
 8001f20:	0801a018 	.word	0x0801a018
 8001f24:	0801a02c 	.word	0x0801a02c
 8001f28:	0801a03c 	.word	0x0801a03c
 8001f2c:	0801a060 	.word	0x0801a060
 8001f30:	0801a074 	.word	0x0801a074
 8001f34:	0801a0a0 	.word	0x0801a0a0
 8001f38:	0801a0cc 	.word	0x0801a0cc
 8001f3c:	0801a0f8 	.word	0x0801a0f8
 8001f40:	0801a124 	.word	0x0801a124
 8001f44:	0801a150 	.word	0x0801a150
 8001f48:	0801a17c 	.word	0x0801a17c
 8001f4c:	0801a1a8 	.word	0x0801a1a8
 8001f50:	0801a1d4 	.word	0x0801a1d4
 8001f54:	0801a200 	.word	0x0801a200
 8001f58:	0801a22c 	.word	0x0801a22c
 8001f5c:	0801a258 	.word	0x0801a258
 8001f60:	0801a284 	.word	0x0801a284
 8001f64:	0801a2b0 	.word	0x0801a2b0
 8001f68:	0801a2dc 	.word	0x0801a2dc
 8001f6c:	0801a308 	.word	0x0801a308
 8001f70:	0801a334 	.word	0x0801a334
 8001f74:	2320      	movs	r3, #32
 8001f76:	4619      	mov	r1, r3
 8001f78:	4824      	ldr	r0, [pc, #144]	; (800200c <ndefDumpSysInfo+0x3d8>)
 8001f7a:	f7fe fab3 	bl	80004e4 <logUsart>
        platformLog(" * [%c] ExtReadMultipleBlocks          \r\n", ndefT5TSysInfoExtReadMultipleBlocksSupported(sysInfo->supportedCmd)           ? 'X' : ' ');
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	7b1b      	ldrb	r3, [r3, #12]
 8001f82:	08db      	lsrs	r3, r3, #3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <ndefDumpSysInfo+0x35e>
 8001f8e:	2358      	movs	r3, #88	; 0x58
 8001f90:	e000      	b.n	8001f94 <ndefDumpSysInfo+0x360>
 8001f92:	2320      	movs	r3, #32
 8001f94:	4619      	mov	r1, r3
 8001f96:	481e      	ldr	r0, [pc, #120]	; (8002010 <ndefDumpSysInfo+0x3dc>)
 8001f98:	f7fe faa4 	bl	80004e4 <logUsart>
        platformLog(" * [%c] ExtWriteMultipleBlocks         \r\n", ndefT5TSysInfoExtWriteMultipleBlocksSupported(sysInfo->supportedCmd)          ? 'X' : ' ');
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	7b1b      	ldrb	r3, [r3, #12]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <ndefDumpSysInfo+0x37c>
 8001fac:	2358      	movs	r3, #88	; 0x58
 8001fae:	e000      	b.n	8001fb2 <ndefDumpSysInfo+0x37e>
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4817      	ldr	r0, [pc, #92]	; (8002014 <ndefDumpSysInfo+0x3e0>)
 8001fb6:	f7fe fa95 	bl	80004e4 <logUsart>
        platformLog(" * [%c] ExtGetMultipleBlockSecStatus   \r\n", ndefT5TSysInfoExtGetMultipleBlockSecStatusSupported(sysInfo->supportedCmd)    ? 'X' : ' ');
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	7b1b      	ldrb	r3, [r3, #12]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <ndefDumpSysInfo+0x39a>
 8001fca:	2358      	movs	r3, #88	; 0x58
 8001fcc:	e000      	b.n	8001fd0 <ndefDumpSysInfo+0x39c>
 8001fce:	2320      	movs	r3, #32
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4811      	ldr	r0, [pc, #68]	; (8002018 <ndefDumpSysInfo+0x3e4>)
 8001fd4:	f7fe fa86 	bl	80004e4 <logUsart>
        platformLog(" * [%c] FastExtendedReadMultipleBlocks \r\n", ndefT5TSysInfoFastExtendedReadMultipleBlocksSupported(sysInfo->supportedCmd)  ? 'X' : ' ');
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	7b1b      	ldrb	r3, [r3, #12]
 8001fdc:	099b      	lsrs	r3, r3, #6
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <ndefDumpSysInfo+0x3b8>
 8001fe8:	2358      	movs	r3, #88	; 0x58
 8001fea:	e000      	b.n	8001fee <ndefDumpSysInfo+0x3ba>
 8001fec:	2320      	movs	r3, #32
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480a      	ldr	r0, [pc, #40]	; (800201c <ndefDumpSysInfo+0x3e8>)
 8001ff2:	f7fe fa77 	bl	80004e4 <logUsart>
    }
    return;
 8001ff6:	bf00      	nop
 8001ff8:	e003      	b.n	8002002 <ndefDumpSysInfo+0x3ce>
        return;
 8001ffa:	bf00      	nop
 8001ffc:	e002      	b.n	8002004 <ndefDumpSysInfo+0x3d0>
        return;
 8001ffe:	bf00      	nop
 8002000:	e000      	b.n	8002004 <ndefDumpSysInfo+0x3d0>
    return;
 8002002:	bf00      	nop
}
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	0801a360 	.word	0x0801a360
 8002010:	0801a38c 	.word	0x0801a38c
 8002014:	0801a3b8 	.word	0x0801a3b8
 8002018:	0801a3e4 	.word	0x0801a3e4
 800201c:	0801a410 	.word	0x0801a410

08002020 <ndefIsSTTag>:

#if NDEF_FEATURE_ALL
static bool ndefIsSTTag(ndefContext *ctx)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    bool ret = false;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]
  if( (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0)
  {
    ret = true;
  }
#endif
    if( ctx == NULL )
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <ndefIsSTTag+0x16>
    {   
        return ret;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	e026      	b.n	8002084 <ndefIsSTTag+0x64>
    }
    switch (ctx->device.type)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d81c      	bhi.n	8002078 <ndefIsSTTag+0x58>
 800203e:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <ndefIsSTTag+0x24>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	08002055 	.word	0x08002055
 8002048:	08002079 	.word	0x08002079
 800204c:	08002079 	.word	0x08002079
 8002050:	0800206b 	.word	0x0800206b
    {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            if( (ctx->device.dev.nfca.nfcId1Len != 4) && (ctx->device.dev.nfca.nfcId1[0] == 0x02 ) )
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	795b      	ldrb	r3, [r3, #5]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d00f      	beq.n	800207c <ndefIsSTTag+0x5c>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	799b      	ldrb	r3, [r3, #6]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d10b      	bne.n	800207c <ndefIsSTTag+0x5c>
            {  
                ret = true;
 8002064:	2301      	movs	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8002068:	e008      	b.n	800207c <ndefIsSTTag+0x5c>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            break;
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            break;
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            if( ctx->device.dev.nfcv.InvRes.UID[6] == 0x02 )
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7a5b      	ldrb	r3, [r3, #9]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d106      	bne.n	8002080 <ndefIsSTTag+0x60>
            {  
                ret = true;
 8002072:	2301      	movs	r3, #1
 8002074:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8002076:	e003      	b.n	8002080 <ndefIsSTTag+0x60>
        default:
            break;
 8002078:	bf00      	nop
 800207a:	e002      	b.n	8002082 <ndefIsSTTag+0x62>
            break;
 800207c:	bf00      	nop
 800207e:	e000      	b.n	8002082 <ndefIsSTTag+0x62>
            break;
 8002080:	bf00      	nop
    }
    return (ret);
 8002082:	7bfb      	ldrb	r3, [r7, #15]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop

08002090 <LedNotificationWriteDone>:
#endif /* NDEF_FEATURE_ALL */

#if NDEF_FEATURE_ALL
static void LedNotificationWriteDone(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < 3; i++)
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	e00c      	b.n	80020b6 <LedNotificationWriteDone+0x26>
    {
        ledsOn();
 800209c:	f000 f812 	bl	80020c4 <ledsOn>
        platformDelay(100);
 80020a0:	2064      	movs	r0, #100	; 0x64
 80020a2:	f002 f961 	bl	8004368 <HAL_Delay>

        ledsOff();
 80020a6:	f000 f835 	bl	8002114 <ledsOff>
        platformDelay(100);
 80020aa:	2064      	movs	r0, #100	; 0x64
 80020ac:	f002 f95c 	bl	8004368 <HAL_Delay>
    for (i = 0; i < 3; i++)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3301      	adds	r3, #1
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d9ef      	bls.n	800209c <LedNotificationWriteDone+0xc>
    }
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <ledsOn>:

static void ledsOn(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
    platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80020c8:	2201      	movs	r2, #1
 80020ca:	2101      	movs	r1, #1
 80020cc:	480f      	ldr	r0, [pc, #60]	; (800210c <ledsOn+0x48>)
 80020ce:	f002 fc20 	bl	8004912 <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80020d2:	2201      	movs	r2, #1
 80020d4:	2110      	movs	r1, #16
 80020d6:	480e      	ldr	r0, [pc, #56]	; (8002110 <ledsOn+0x4c>)
 80020d8:	f002 fc1b 	bl	8004912 <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 80020dc:	2201      	movs	r2, #1
 80020de:	2102      	movs	r1, #2
 80020e0:	480b      	ldr	r0, [pc, #44]	; (8002110 <ledsOn+0x4c>)
 80020e2:	f002 fc16 	bl	8004912 <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 80020e6:	2201      	movs	r2, #1
 80020e8:	2110      	movs	r1, #16
 80020ea:	4808      	ldr	r0, [pc, #32]	; (800210c <ledsOn+0x48>)
 80020ec:	f002 fc11 	bl	8004912 <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 80020f0:	2201      	movs	r2, #1
 80020f2:	2120      	movs	r1, #32
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <ledsOn+0x48>)
 80020f6:	f002 fc0c 	bl	8004912 <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80020fa:	2201      	movs	r2, #1
 80020fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <ledsOn+0x4c>)
 8002102:	f002 fc06 	bl	8004912 <HAL_GPIO_WritePin>
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40020400 	.word	0x40020400
 8002110:	40020000 	.word	0x40020000

08002114 <ledsOff>:

static void ledsOff(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
    platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8002118:	2200      	movs	r2, #0
 800211a:	2101      	movs	r1, #1
 800211c:	480f      	ldr	r0, [pc, #60]	; (800215c <ledsOff+0x48>)
 800211e:	f002 fbf8 	bl	8004912 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8002122:	2200      	movs	r2, #0
 8002124:	2110      	movs	r1, #16
 8002126:	480e      	ldr	r0, [pc, #56]	; (8002160 <ledsOff+0x4c>)
 8002128:	f002 fbf3 	bl	8004912 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 800212c:	2200      	movs	r2, #0
 800212e:	2102      	movs	r1, #2
 8002130:	480b      	ldr	r0, [pc, #44]	; (8002160 <ledsOff+0x4c>)
 8002132:	f002 fbee 	bl	8004912 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8002136:	2200      	movs	r2, #0
 8002138:	2110      	movs	r1, #16
 800213a:	4808      	ldr	r0, [pc, #32]	; (800215c <ledsOff+0x48>)
 800213c:	f002 fbe9 	bl	8004912 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8002140:	2200      	movs	r2, #0
 8002142:	2120      	movs	r1, #32
 8002144:	4805      	ldr	r0, [pc, #20]	; (800215c <ledsOff+0x48>)
 8002146:	f002 fbe4 	bl	8004912 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 800214a:	2200      	movs	r2, #0
 800214c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002150:	4803      	ldr	r0, [pc, #12]	; (8002160 <ledsOff+0x4c>)
 8002152:	f002 fbde 	bl	8004912 <HAL_GPIO_WritePin>
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40020400 	.word	0x40020400
 8002160:	40020000 	.word	0x40020000

08002164 <isPrintableASCII>:
 */


/*****************************************************************************/
static bool isPrintableASCII(const uint8_t* str, uint32_t strLen)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
    uint32_t i;
    
    if ((str == NULL) || (strLen == 0))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <isPrintableASCII+0x16>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <isPrintableASCII+0x1a>
    {
        return false;
 800217a:	2300      	movs	r3, #0
 800217c:	e018      	b.n	80021b0 <isPrintableASCII+0x4c>
    }

    for (i = 0; i < strLen; i++)
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e010      	b.n	80021a6 <isPrintableASCII+0x42>
    {
        if ((str[i] < 0x20) || (str[i] > 0x7E))
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4413      	add	r3, r2
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b1f      	cmp	r3, #31
 800218e:	d905      	bls.n	800219c <isPrintableASCII+0x38>
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4413      	add	r3, r2
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b7e      	cmp	r3, #126	; 0x7e
 800219a:	d901      	bls.n	80021a0 <isPrintableASCII+0x3c>
        {
            return false;
 800219c:	2300      	movs	r3, #0
 800219e:	e007      	b.n	80021b0 <isPrintableASCII+0x4c>
    for (i = 0; i < strLen; i++)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3301      	adds	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d3ea      	bcc.n	8002184 <isPrintableASCII+0x20>
        }
    }

    return true;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
	...

080021bc <ndefRecordDump>:


/*****************************************************************************/
ReturnCode ndefRecordDump(const ndefRecord* record, bool verbose)
{
 80021bc:	b5b0      	push	{r4, r5, r7, lr}
 80021be:	b098      	sub	sp, #96	; 0x60
 80021c0:	af04      	add	r7, sp, #16
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
    static uint32_t index;
    const uint8_t *ndefTNFNames[] =
 80021c8:	4b5e      	ldr	r3, [pc, #376]	; (8002344 <ndefRecordDump+0x188>)
 80021ca:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80021ce:	461d      	mov	r5, r3
 80021d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80021d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        (uint8_t *)"NFC Forum external type [NFC RTD]",
        (uint8_t *)"Unknown",
        (uint8_t *)"Unchanged",
        (uint8_t *)"Reserved"
    };
    uint8_t* headerSR = (uint8_t*)"";
 80021dc:	4b5a      	ldr	r3, [pc, #360]	; (8002348 <ndefRecordDump+0x18c>)
 80021de:	64fb      	str	r3, [r7, #76]	; 0x4c
    ReturnCode err;

    if (record == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d104      	bne.n	80021f0 <ndefRecordDump+0x34>
    {
        platformLog("No record\r\n");
 80021e6:	4859      	ldr	r0, [pc, #356]	; (800234c <ndefRecordDump+0x190>)
 80021e8:	f7fe f97c 	bl	80004e4 <logUsart>
        return ERR_NONE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	e0a5      	b.n	800233c <ndefRecordDump+0x180>
    }

    if (ndefHeaderIsSetMB(record))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	09db      	lsrs	r3, r3, #7
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d103      	bne.n	8002204 <ndefRecordDump+0x48>
    {
        index = 1U;
 80021fc:	4b54      	ldr	r3, [pc, #336]	; (8002350 <ndefRecordDump+0x194>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e004      	b.n	800220e <ndefRecordDump+0x52>
    }
    else
    {
        index++;
 8002204:	4b52      	ldr	r3, [pc, #328]	; (8002350 <ndefRecordDump+0x194>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	4a51      	ldr	r2, [pc, #324]	; (8002350 <ndefRecordDump+0x194>)
 800220c:	6013      	str	r3, [r2, #0]
    }

    if (verbose == true)
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d009      	beq.n	8002228 <ndefRecordDump+0x6c>
    {
        headerSR = (uint8_t*)(ndefHeaderIsSetSR(record) ? " - Short Record" : " - Standard Record");
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <ndefRecordDump+0x68>
 8002220:	4b4c      	ldr	r3, [pc, #304]	; (8002354 <ndefRecordDump+0x198>)
 8002222:	e000      	b.n	8002226 <ndefRecordDump+0x6a>
 8002224:	4b4c      	ldr	r3, [pc, #304]	; (8002358 <ndefRecordDump+0x19c>)
 8002226:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    platformLog("Record #%d%s\r\n", index, headerSR);
 8002228:	4b49      	ldr	r3, [pc, #292]	; (8002350 <ndefRecordDump+0x194>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800222e:	4619      	mov	r1, r3
 8002230:	484a      	ldr	r0, [pc, #296]	; (800235c <ndefRecordDump+0x1a0>)
 8002232:	f7fe f957 	bl	80004e4 <logUsart>

    /* Well-known type dump */
    err = ndefRecordDumpType(record);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fbb2 	bl	80029a0 <ndefRecordDumpType>
 800223c:	4603      	mov	r3, r0
 800223e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (verbose == true)
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d028      	beq.n	800229a <ndefRecordDump+0xde>
    {
        /* Raw dump */
        //platformLog(" MB:%d ME:%d CF:%d SR:%d IL:%d TNF:%d\r\n", ndefHeaderMB(record), ndefHeaderME(record), ndefHeaderCF(record), ndefHeaderSR(record), ndefHeaderIL(record), ndefHeaderTNF(record));
        platformLog(" MB ME CF SR IL TNF\r\n");
 8002248:	4845      	ldr	r0, [pc, #276]	; (8002360 <ndefRecordDump+0x1a4>)
 800224a:	f7fe f94b 	bl	80004e4 <logUsart>
        platformLog("  %d  %d  %d  %d  %d   %d\r\n", ndefHeaderMB(record), ndefHeaderME(record), ndefHeaderCF(record), ndefHeaderSR(record), ndefHeaderIL(record), ndefHeaderTNF(record));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	09db      	lsrs	r3, r3, #7
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461d      	mov	r5, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	099b      	lsrs	r3, r3, #6
 800225e:	f003 0001 	and.w	r0, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	f003 0401 	and.w	r4, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	08d2      	lsrs	r2, r2, #3
 800227c:	f002 0201 	and.w	r2, r2, #1
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	7809      	ldrb	r1, [r1, #0]
 8002284:	f001 0107 	and.w	r1, r1, #7
 8002288:	9102      	str	r1, [sp, #8]
 800228a:	9201      	str	r2, [sp, #4]
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	4623      	mov	r3, r4
 8002290:	4602      	mov	r2, r0
 8002292:	4629      	mov	r1, r5
 8002294:	4833      	ldr	r0, [pc, #204]	; (8002364 <ndefRecordDump+0x1a8>)
 8002296:	f7fe f925 	bl	80004e4 <logUsart>
    }
    if ( (err != ERR_NONE) || (verbose == true) )
 800229a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <ndefRecordDump+0xec>
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d048      	beq.n	800233a <ndefRecordDump+0x17e>
    {
        platformLog(" Type Name Format: %s\r\n", ndefTNFNames[ndefHeaderTNF(record)]);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80022b6:	4413      	add	r3, r2
 80022b8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80022bc:	4619      	mov	r1, r3
 80022be:	482a      	ldr	r0, [pc, #168]	; (8002368 <ndefRecordDump+0x1ac>)
 80022c0:	f7fe f910 	bl	80004e4 <logUsart>

        uint8_t tnf;
        ndefConstBuffer8 bufRecordType;
        ndefRecordGetType(record, &tnf, &bufRecordType);
 80022c4:	f107 021c 	add.w	r2, r7, #28
 80022c8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80022cc:	4619      	mov	r1, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f004 f866 	bl	80063a0 <ndefRecordGetType>
        if ( (tnf == NDEF_TNF_EMPTY) && (bufRecordType.length == 0U) )
 80022d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <ndefRecordDump+0x130>
 80022dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d103      	bne.n	80022ec <ndefRecordDump+0x130>
        {
            platformLog(" Empty NDEF record\r\n");
 80022e4:	4821      	ldr	r0, [pc, #132]	; (800236c <ndefRecordDump+0x1b0>)
 80022e6:	f7fe f8fd 	bl	80004e4 <logUsart>
 80022ea:	e006      	b.n	80022fa <ndefRecordDump+0x13e>
        }
        else
        {
            ndefBuffer8Print(" Type: \"", &bufRecordType, "\"\r\n");
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <ndefRecordDump+0x1b4>)
 80022f2:	4619      	mov	r1, r3
 80022f4:	481f      	ldr	r0, [pc, #124]	; (8002374 <ndefRecordDump+0x1b8>)
 80022f6:	f000 fcd1 	bl	8002c9c <ndefBuffer8Print>
        }

        if (ndefHeaderIsSetIL(record))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00c      	beq.n	8002320 <ndefRecordDump+0x164>
        {
            /* ID Length bit set */
            ndefConstBuffer8 bufRecordId;
            ndefRecordGetId(record, &bufRecordId);
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	4619      	mov	r1, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f004 f8d2 	bl	80064b6 <ndefRecordGetId>
            ndefBuffer8Print(" ID: \"", &bufRecordId, "\"\r\n");
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	4a16      	ldr	r2, [pc, #88]	; (8002370 <ndefRecordDump+0x1b4>)
 8002318:	4619      	mov	r1, r3
 800231a:	4817      	ldr	r0, [pc, #92]	; (8002378 <ndefRecordDump+0x1bc>)
 800231c:	f000 fcbe 	bl	8002c9c <ndefBuffer8Print>
        }

        ndefConstBuffer bufRecordPayload;
        ndefRecordGetPayload(record, &bufRecordPayload);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4619      	mov	r1, r3
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f004 f917 	bl	800655a <ndefRecordGetPayload>
        ndefBufferDump(" Payload:", &bufRecordPayload, verbose);
 800232c:	78fa      	ldrb	r2, [r7, #3]
 800232e:	f107 0314 	add.w	r3, r7, #20
 8002332:	4619      	mov	r1, r3
 8002334:	4811      	ldr	r0, [pc, #68]	; (800237c <ndefRecordDump+0x1c0>)
 8002336:	f000 fbfb 	bl	8002b30 <ndefBufferDump>
    }

    return ERR_NONE;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3750      	adds	r7, #80	; 0x50
 8002340:	46bd      	mov	sp, r7
 8002342:	bdb0      	pop	{r4, r5, r7, pc}
 8002344:	0801a5c0 	.word	0x0801a5c0
 8002348:	0801a43c 	.word	0x0801a43c
 800234c:	0801a440 	.word	0x0801a440
 8002350:	20002d10 	.word	0x20002d10
 8002354:	0801a44c 	.word	0x0801a44c
 8002358:	0801a45c 	.word	0x0801a45c
 800235c:	0801a470 	.word	0x0801a470
 8002360:	0801a480 	.word	0x0801a480
 8002364:	0801a498 	.word	0x0801a498
 8002368:	0801a4b4 	.word	0x0801a4b4
 800236c:	0801a4cc 	.word	0x0801a4cc
 8002370:	0801a4e4 	.word	0x0801a4e4
 8002374:	0801a4e8 	.word	0x0801a4e8
 8002378:	0801a4f4 	.word	0x0801a4f4
 800237c:	0801a4fc 	.word	0x0801a4fc

08002380 <ndefMessageDump>:


/*****************************************************************************/
ReturnCode ndefMessageDump(const ndefMessage* message, bool verbose)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	70fb      	strb	r3, [r7, #3]
    ReturnCode  err;
    ndefRecord* record;

    if (message == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d104      	bne.n	800239c <ndefMessageDump+0x1c>
    {
        platformLog("Empty NDEF message\r\n");
 8002392:	4816      	ldr	r0, [pc, #88]	; (80023ec <ndefMessageDump+0x6c>)
 8002394:	f7fe f8a6 	bl	80004e4 <logUsart>
        return ERR_NONE;
 8002398:	2300      	movs	r3, #0
 800239a:	e023      	b.n	80023e4 <ndefMessageDump+0x64>
    }
    else
    {
        platformLog("Decoding NDEF message\r\n");
 800239c:	4814      	ldr	r0, [pc, #80]	; (80023f0 <ndefMessageDump+0x70>)
 800239e:	f7fe f8a1 	bl	80004e4 <logUsart>
    }

    record = ndefMessageGetFirstRecord(message);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <ndefMessageDump+0x2e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	e000      	b.n	80023b0 <ndefMessageDump+0x30>
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]

    while (record != NULL)
 80023b2:	e013      	b.n	80023dc <ndefMessageDump+0x5c>
    {
        err = ndefRecordDump(record, verbose);
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	4619      	mov	r1, r3
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f7ff feff 	bl	80021bc <ndefRecordDump>
 80023be:	4603      	mov	r3, r0
 80023c0:	817b      	strh	r3, [r7, #10]
        if (err != ERR_NONE)
 80023c2:	897b      	ldrh	r3, [r7, #10]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <ndefMessageDump+0x4c>
        {
            return err;
 80023c8:	897b      	ldrh	r3, [r7, #10]
 80023ca:	e00b      	b.n	80023e4 <ndefMessageDump+0x64>
        }
        record = ndefMessageGetNextRecord(record);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <ndefMessageDump+0x58>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	e000      	b.n	80023da <ndefMessageDump+0x5a>
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
    while (record != NULL)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1e8      	bne.n	80023b4 <ndefMessageDump+0x34>
    }

    return ERR_NONE;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	0801a5e0 	.word	0x0801a5e0
 80023f0:	0801a5f8 	.word	0x0801a5f8

080023f4 <ndefEmptyTypeDump>:


/*****************************************************************************/
ReturnCode ndefEmptyTypeDump(const ndefType* empty)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
    if (empty == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <ndefEmptyTypeDump+0x12>
    {
        return ERR_PARAM;
 8002402:	2307      	movs	r3, #7
 8002404:	e009      	b.n	800241a <ndefEmptyTypeDump+0x26>
    }

    if (empty->id != NDEF_TYPE_EMPTY)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <ndefEmptyTypeDump+0x1e>
    {
        return ERR_PARAM;
 800240e:	2307      	movs	r3, #7
 8002410:	e003      	b.n	800241a <ndefEmptyTypeDump+0x26>
    }

    platformLog(" Empty record\r\n");
 8002412:	4804      	ldr	r0, [pc, #16]	; (8002424 <ndefEmptyTypeDump+0x30>)
 8002414:	f7fe f866 	bl	80004e4 <logUsart>

    return ERR_NONE;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	0801a610 	.word	0x0801a610

08002428 <ndefRtdDeviceInfoDump>:


/*****************************************************************************/
ReturnCode ndefRtdDeviceInfoDump(const ndefType* devInfo)
{
 8002428:	b5b0      	push	{r4, r5, r7, lr}
 800242a:	b094      	sub	sp, #80	; 0x50
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
    ndefTypeRtdDeviceInfo devInfoData;
    uint32_t type;
    uint32_t i;

    const uint8_t* ndefDeviceInfoName[] =
 8002430:	4b44      	ldr	r3, [pc, #272]	; (8002544 <ndefRtdDeviceInfoDump+0x11c>)
 8002432:	f107 040c 	add.w	r4, r7, #12
 8002436:	461d      	mov	r5, r3
 8002438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800243a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800243c:	682b      	ldr	r3, [r5, #0]
 800243e:	6023      	str	r3, [r4, #0]
        (uint8_t*)"Device",
        (uint8_t*)"UUID",
        (uint8_t*)"Firmware version",
    };

    if (devInfo == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <ndefRtdDeviceInfoDump+0x22>
    {
        return ERR_PARAM;
 8002446:	2307      	movs	r3, #7
 8002448:	e077      	b.n	800253a <ndefRtdDeviceInfoDump+0x112>
    }

    if (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d001      	beq.n	8002456 <ndefRtdDeviceInfoDump+0x2e>
    {
        return ERR_PARAM;
 8002452:	2307      	movs	r3, #7
 8002454:	e071      	b.n	800253a <ndefRtdDeviceInfoDump+0x112>
    }

    ndefGetRtdDeviceInfo(devInfo, &devInfoData);
 8002456:	f107 0320 	add.w	r3, r7, #32
 800245a:	4619      	mov	r1, r3
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f005 fd2b 	bl	8007eb8 <ndefGetRtdDeviceInfo>

    platformLog(" Device Information:\r\n");
 8002462:	4839      	ldr	r0, [pc, #228]	; (8002548 <ndefRtdDeviceInfoDump+0x120>)
 8002464:	f7fe f83e 	bl	80004e4 <logUsart>

    for (type = 0; type < NDEF_DEVICE_INFO_TYPE_COUNT; type++)
 8002468:	2300      	movs	r3, #0
 800246a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800246c:	e061      	b.n	8002532 <ndefRtdDeviceInfoDump+0x10a>
    {
        if (devInfoData.devInfo[type].buffer != NULL)
 800246e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002476:	4413      	add	r3, r2
 8002478:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d055      	beq.n	800252c <ndefRtdDeviceInfoDump+0x104>
        {
            platformLog(" - %s: ", ndefDeviceInfoName[devInfoData.devInfo[type].type]);
 8002480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002488:	4413      	add	r3, r2
 800248a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002494:	4413      	add	r3, r2
 8002496:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800249a:	4619      	mov	r1, r3
 800249c:	482b      	ldr	r0, [pc, #172]	; (800254c <ndefRtdDeviceInfoDump+0x124>)
 800249e:	f7fe f821 	bl	80004e4 <logUsart>

            if (type != NDEF_DEVICE_INFO_UUID)
 80024a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d01f      	beq.n	80024e8 <ndefRtdDeviceInfoDump+0xc0>
            {
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80024ac:	e010      	b.n	80024d0 <ndefRtdDeviceInfoDump+0xa8>
                {
                    platformLog("%c", devInfoData.devInfo[type].buffer[i]); /* character */
 80024ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80024b6:	4413      	add	r3, r2
 80024b8:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 80024bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024be:	4413      	add	r3, r2
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	4619      	mov	r1, r3
 80024c4:	4822      	ldr	r0, [pc, #136]	; (8002550 <ndefRtdDeviceInfoDump+0x128>)
 80024c6:	f7fe f80d 	bl	80004e4 <logUsart>
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 80024ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024cc:	3301      	adds	r3, #1
 80024ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80024d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80024d8:	4413      	add	r3, r2
 80024da:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 80024de:	461a      	mov	r2, r3
 80024e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d3e3      	bcc.n	80024ae <ndefRtdDeviceInfoDump+0x86>
 80024e6:	e01e      	b.n	8002526 <ndefRtdDeviceInfoDump+0xfe>
                }
            }
            else
            {
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80024ec:	e010      	b.n	8002510 <ndefRtdDeviceInfoDump+0xe8>
                {
                    platformLog("%.2X", devInfoData.devInfo[type].buffer[i]); /* hex number */
 80024ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80024f6:	4413      	add	r3, r2
 80024f8:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 80024fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fe:	4413      	add	r3, r2
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	4813      	ldr	r0, [pc, #76]	; (8002554 <ndefRtdDeviceInfoDump+0x12c>)
 8002506:	f7fd ffed 	bl	80004e4 <logUsart>
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 800250a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800250c:	3301      	adds	r3, #1
 800250e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002518:	4413      	add	r3, r2
 800251a:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 800251e:	461a      	mov	r2, r3
 8002520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002522:	4293      	cmp	r3, r2
 8002524:	d3e3      	bcc.n	80024ee <ndefRtdDeviceInfoDump+0xc6>
                }
            }
            platformLog("\r\n");
 8002526:	480c      	ldr	r0, [pc, #48]	; (8002558 <ndefRtdDeviceInfoDump+0x130>)
 8002528:	f7fd ffdc 	bl	80004e4 <logUsart>
    for (type = 0; type < NDEF_DEVICE_INFO_TYPE_COUNT; type++)
 800252c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252e:	3301      	adds	r3, #1
 8002530:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002534:	2b04      	cmp	r3, #4
 8002536:	d99a      	bls.n	800246e <ndefRtdDeviceInfoDump+0x46>
        }
    }

    return ERR_NONE;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3750      	adds	r7, #80	; 0x50
 800253e:	46bd      	mov	sp, r7
 8002540:	bdb0      	pop	{r4, r5, r7, pc}
 8002542:	bf00      	nop
 8002544:	0801a68c 	.word	0x0801a68c
 8002548:	0801a620 	.word	0x0801a620
 800254c:	0801a638 	.word	0x0801a638
 8002550:	0801a640 	.word	0x0801a640
 8002554:	0801a644 	.word	0x0801a644
 8002558:	0801a64c 	.word	0x0801a64c

0800255c <ndefRtdTextDump>:


/*****************************************************************************/
ReturnCode ndefRtdTextDump(const ndefType* text)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
    uint8_t utfEncoding;
    ndefConstBuffer8 bufLanguageCode;
    ndefConstBuffer  bufSentence;

    if (text == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <ndefRtdTextDump+0x12>
    {
        return ERR_PARAM;
 800256a:	2307      	movs	r3, #7
 800256c:	e027      	b.n	80025be <ndefRtdTextDump+0x62>
    }

    if (text->id != NDEF_TYPE_RTD_TEXT)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d001      	beq.n	800257a <ndefRtdTextDump+0x1e>
    {
        return ERR_PARAM;
 8002576:	2307      	movs	r3, #7
 8002578:	e021      	b.n	80025be <ndefRtdTextDump+0x62>
    }

    ndefGetRtdText(text, &utfEncoding, &bufLanguageCode, &bufSentence);
 800257a:	f107 030c 	add.w	r3, r7, #12
 800257e:	f107 0214 	add.w	r2, r7, #20
 8002582:	f107 011f 	add.w	r1, r7, #31
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f005 fec6 	bl	8008318 <ndefGetRtdText>

    ndefBufferPrint(" Text: \"", &bufSentence, "");
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <ndefRtdTextDump+0x6c>)
 8002592:	4619      	mov	r1, r3
 8002594:	480d      	ldr	r0, [pc, #52]	; (80025cc <ndefRtdTextDump+0x70>)
 8002596:	f000 fb2f 	bl	8002bf8 <ndefBufferPrint>

    platformLog("\" (%s,", utfEncoding == TEXT_ENCODING_UTF8 ? "UTF8" : "UTF16");
 800259a:	7ffb      	ldrb	r3, [r7, #31]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <ndefRtdTextDump+0x48>
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <ndefRtdTextDump+0x74>)
 80025a2:	e000      	b.n	80025a6 <ndefRtdTextDump+0x4a>
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <ndefRtdTextDump+0x78>)
 80025a6:	4619      	mov	r1, r3
 80025a8:	480b      	ldr	r0, [pc, #44]	; (80025d8 <ndefRtdTextDump+0x7c>)
 80025aa:	f7fd ff9b 	bl	80004e4 <logUsart>

    ndefBuffer8Print(" language code \"", &bufLanguageCode, "\")\r\n");
 80025ae:	f107 0314 	add.w	r3, r7, #20
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <ndefRtdTextDump+0x80>)
 80025b4:	4619      	mov	r1, r3
 80025b6:	480a      	ldr	r0, [pc, #40]	; (80025e0 <ndefRtdTextDump+0x84>)
 80025b8:	f000 fb70 	bl	8002c9c <ndefBuffer8Print>

    return ERR_NONE;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	0801a43c 	.word	0x0801a43c
 80025cc:	0801a6a0 	.word	0x0801a6a0
 80025d0:	0801a6ac 	.word	0x0801a6ac
 80025d4:	0801a6b4 	.word	0x0801a6b4
 80025d8:	0801a6bc 	.word	0x0801a6bc
 80025dc:	0801a6c4 	.word	0x0801a6c4
 80025e0:	0801a6cc 	.word	0x0801a6cc

080025e4 <ndefRtdUriDump>:


/*****************************************************************************/
ReturnCode ndefRtdUriDump(const ndefType* uri)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufProtocol;
    ndefConstBuffer bufUriString;

    if (uri == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <ndefRtdUriDump+0x12>
    {
        return ERR_PARAM;
 80025f2:	2307      	movs	r3, #7
 80025f4:	e01c      	b.n	8002630 <ndefRtdUriDump+0x4c>
    }

    if (uri->id != NDEF_TYPE_RTD_URI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d001      	beq.n	8002602 <ndefRtdUriDump+0x1e>
    {
        return ERR_PARAM;
 80025fe:	2307      	movs	r3, #7
 8002600:	e016      	b.n	8002630 <ndefRtdUriDump+0x4c>
    }

    ndefGetRtdUri(uri, &bufProtocol, &bufUriString);
 8002602:	f107 0208 	add.w	r2, r7, #8
 8002606:	f107 0310 	add.w	r3, r7, #16
 800260a:	4619      	mov	r1, r3
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f006 f869 	bl	80086e4 <ndefGetRtdUri>

    ndefBufferPrint("URI: (", &bufProtocol, ")");
 8002612:	f107 0310 	add.w	r3, r7, #16
 8002616:	4a08      	ldr	r2, [pc, #32]	; (8002638 <ndefRtdUriDump+0x54>)
 8002618:	4619      	mov	r1, r3
 800261a:	4808      	ldr	r0, [pc, #32]	; (800263c <ndefRtdUriDump+0x58>)
 800261c:	f000 faec 	bl	8002bf8 <ndefBufferPrint>
    ndefBufferPrint("", &bufUriString, "\r\n");
 8002620:	f107 0308 	add.w	r3, r7, #8
 8002624:	4a06      	ldr	r2, [pc, #24]	; (8002640 <ndefRtdUriDump+0x5c>)
 8002626:	4619      	mov	r1, r3
 8002628:	4806      	ldr	r0, [pc, #24]	; (8002644 <ndefRtdUriDump+0x60>)
 800262a:	f000 fae5 	bl	8002bf8 <ndefBufferPrint>

    return ERR_NONE;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	0801a6e0 	.word	0x0801a6e0
 800263c:	0801a6e4 	.word	0x0801a6e4
 8002640:	0801a64c 	.word	0x0801a64c
 8002644:	0801a43c 	.word	0x0801a43c

08002648 <ndefRtdAarDump>:


/*****************************************************************************/
ReturnCode ndefRtdAarDump(const ndefType* aar)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufAarString;

    if (aar == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <ndefRtdAarDump+0x12>
    {
        return ERR_PARAM;
 8002656:	2307      	movs	r3, #7
 8002658:	e013      	b.n	8002682 <ndefRtdAarDump+0x3a>
    }

    if (aar->id != NDEF_TYPE_RTD_AAR)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b04      	cmp	r3, #4
 8002660:	d001      	beq.n	8002666 <ndefRtdAarDump+0x1e>
    {
        return ERR_PARAM;
 8002662:	2307      	movs	r3, #7
 8002664:	e00d      	b.n	8002682 <ndefRtdAarDump+0x3a>
    }

    ndefGetRtdAar(aar, &bufAarString);
 8002666:	f107 0308 	add.w	r3, r7, #8
 800266a:	4619      	mov	r1, r3
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f006 f937 	bl	80088e0 <ndefGetRtdAar>

    ndefBufferPrint(" AAR Package: ", &bufAarString, "\r\n");
 8002672:	f107 0308 	add.w	r3, r7, #8
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <ndefRtdAarDump+0x44>)
 8002678:	4619      	mov	r1, r3
 800267a:	4805      	ldr	r0, [pc, #20]	; (8002690 <ndefRtdAarDump+0x48>)
 800267c:	f000 fabc 	bl	8002bf8 <ndefBufferPrint>

    return ERR_NONE;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	0801a64c 	.word	0x0801a64c
 8002690:	0801a6ec 	.word	0x0801a6ec

08002694 <ndefMediaVCardTranslate>:
}


/*****************************************************************************/
static ReturnCode ndefMediaVCardTranslate(const ndefConstBuffer* bufText, ndefConstBuffer* bufTranslation)
{
 8002694:	b5b0      	push	{r4, r5, r7, lr}
 8002696:	b096      	sub	sp, #88	; 0x58
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
    typedef struct {
        uint8_t* vCardString;
        uint8_t* english;
    } ndefTranslate;

    const ndefTranslate translate[] =
 800269e:	4a2d      	ldr	r2, [pc, #180]	; (8002754 <ndefMediaVCardTranslate+0xc0>)
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	4611      	mov	r1, r2
 80026a6:	2248      	movs	r2, #72	; 0x48
 80026a8:	4618      	mov	r0, r3
 80026aa:	f016 fba4 	bl	8018df6 <memcpy>
        { (uint8_t*)"PHOTO"        , (uint8_t*)"Photo"          },
    };

    uint32_t i;

    if ( (bufText == NULL) || (bufTranslation == NULL) )
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <ndefMediaVCardTranslate+0x26>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <ndefMediaVCardTranslate+0x2a>
    {
        return ERR_PROTO;
 80026ba:	230b      	movs	r3, #11
 80026bc:	e045      	b.n	800274a <ndefMediaVCardTranslate+0xb6>
    }

    for (i = 0; i < SIZEOF_ARRAY(translate); i++)
 80026be:	2300      	movs	r3, #0
 80026c0:	657b      	str	r3, [r7, #84]	; 0x54
 80026c2:	e036      	b.n	8002732 <ndefMediaVCardTranslate+0x9e>
    {
        if (ST_BYTECMP(bufText->buffer, translate[i].vCardString, strlen((char*)translate[i].vCardString)) == 0)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681c      	ldr	r4, [r3, #0]
 80026c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80026d0:	4413      	add	r3, r2
 80026d2:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 80026d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80026de:	4413      	add	r3, r2
 80026e0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd fd49 	bl	800017c <strlen>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461a      	mov	r2, r3
 80026ee:	4629      	mov	r1, r5
 80026f0:	4620      	mov	r0, r4
 80026f2:	f016 fb71 	bl	8018dd8 <memcmp>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d117      	bne.n	800272c <ndefMediaVCardTranslate+0x98>
        {
            bufTranslation->buffer = translate[i].english;
 80026fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002704:	4413      	add	r3, r2
 8002706:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	601a      	str	r2, [r3, #0]
            bufTranslation->length = strlen((char*)translate[i].english);
 800270e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002716:	4413      	add	r3, r2
 8002718:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd fd2d 	bl	800017c <strlen>
 8002722:	4602      	mov	r2, r0
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	605a      	str	r2, [r3, #4]

            return ERR_NONE;
 8002728:	2300      	movs	r3, #0
 800272a:	e00e      	b.n	800274a <ndefMediaVCardTranslate+0xb6>
    for (i = 0; i < SIZEOF_ARRAY(translate); i++)
 800272c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272e:	3301      	adds	r3, #1
 8002730:	657b      	str	r3, [r7, #84]	; 0x54
 8002732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002734:	2b08      	cmp	r3, #8
 8002736:	d9c5      	bls.n	80026c4 <ndefMediaVCardTranslate+0x30>
        }
    }

    bufTranslation->buffer = bufText->buffer;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	601a      	str	r2, [r3, #0]
    bufTranslation->length = bufText->length;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3758      	adds	r7, #88	; 0x58
 800274e:	46bd      	mov	sp, r7
 8002750:	bdb0      	pop	{r4, r5, r7, pc}
 8002752:	bf00      	nop
 8002754:	0801a78c 	.word	0x0801a78c

08002758 <ndefMediaVCardDump>:


/*****************************************************************************/
ReturnCode ndefMediaVCardDump(const ndefType* vCard)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b0a6      	sub	sp, #152	; 0x98
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufTypeN     = { (uint8_t*)"N",     strlen((char*)"N")     };
 8002760:	4a5e      	ldr	r2, [pc, #376]	; (80028dc <ndefMediaVCardDump+0x184>)
 8002762:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002766:	e892 0003 	ldmia.w	r2, {r0, r1}
 800276a:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeFN    = { (uint8_t*)"FN",    strlen((char*)"FN")    };
 800276e:	4a5c      	ldr	r2, [pc, #368]	; (80028e0 <ndefMediaVCardDump+0x188>)
 8002770:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002774:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002778:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeADR   = { (uint8_t*)"ADR",   strlen((char*)"ADR")   };
 800277c:	4a59      	ldr	r2, [pc, #356]	; (80028e4 <ndefMediaVCardDump+0x18c>)
 800277e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002782:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002786:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeTEL   = { (uint8_t*)"TEL",   strlen((char*)"TEL")   };
 800278a:	4a57      	ldr	r2, [pc, #348]	; (80028e8 <ndefMediaVCardDump+0x190>)
 800278c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002790:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002794:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeEMAIL = { (uint8_t*)"EMAIL", strlen((char*)"EMAIL") };
 8002798:	4a54      	ldr	r2, [pc, #336]	; (80028ec <ndefMediaVCardDump+0x194>)
 800279a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800279e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a2:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeTITLE = { (uint8_t*)"TITLE", strlen((char*)"TITLE") };
 80027a6:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <ndefMediaVCardDump+0x198>)
 80027a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027b0:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeORG   = { (uint8_t*)"ORG",   strlen((char*)"ORG")   };
 80027b4:	4a4f      	ldr	r2, [pc, #316]	; (80028f4 <ndefMediaVCardDump+0x19c>)
 80027b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027be:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeURL   = { (uint8_t*)"URL",   strlen((char*)"URL")   };
 80027c2:	4a4d      	ldr	r2, [pc, #308]	; (80028f8 <ndefMediaVCardDump+0x1a0>)
 80027c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027cc:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypePHOTO = { (uint8_t*)"PHOTO", strlen((char*)"PHOTO") };
 80027d0:	4a4a      	ldr	r2, [pc, #296]	; (80028fc <ndefMediaVCardDump+0x1a4>)
 80027d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027da:	e883 0003 	stmia.w	r3, {r0, r1}

    const ndefConstBuffer* bufVCardField[] = {
 80027de:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
 80027e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027f4:	633b      	str	r3, [r7, #48]	; 0x30
 80027f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027fa:	637b      	str	r3, [r7, #52]	; 0x34
 80027fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002800:	63bb      	str	r3, [r7, #56]	; 0x38
 8002802:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002808:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800280c:	643b      	str	r3, [r7, #64]	; 0x40
 800280e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002812:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t i;
    const ndefConstBuffer* bufType;
    ndefConstBuffer        bufSubType;
    ndefConstBuffer        bufValue;

    if (vCard == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <ndefMediaVCardDump+0xc6>
    {
        return ERR_PARAM;
 800281a:	2307      	movs	r3, #7
 800281c:	e05a      	b.n	80028d4 <ndefMediaVCardDump+0x17c>
    }

    if (vCard->id != NDEF_TYPE_MEDIA_VCARD)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b06      	cmp	r3, #6
 8002824:	d001      	beq.n	800282a <ndefMediaVCardDump+0xd2>
    {
        return ERR_PARAM;
 8002826:	2307      	movs	r3, #7
 8002828:	e054      	b.n	80028d4 <ndefMediaVCardDump+0x17c>
    }

    platformLog(" vCard decoded: \r\n");
 800282a:	4835      	ldr	r0, [pc, #212]	; (8002900 <ndefMediaVCardDump+0x1a8>)
 800282c:	f7fd fe5a 	bl	80004e4 <logUsart>

    for (i = 0; i < SIZEOF_ARRAY(bufVCardField); i++)
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002836:	e048      	b.n	80028ca <ndefMediaVCardDump+0x172>
    {
        /* Requesting vCard field */
        bufType = bufVCardField[i];
 8002838:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002842:	4413      	add	r3, r2
 8002844:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002848:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /* Get information from vCard */
        ndefGetVCard(vCard, bufType, &bufSubType, &bufValue);
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	f107 021c 	add.w	r2, r7, #28
 8002854:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f004 ff1b 	bl	8007694 <ndefGetVCard>

        if (bufValue.buffer != NULL)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d02d      	beq.n	80028c0 <ndefMediaVCardDump+0x168>
        {
            ndefConstBuffer bufTypeTranslate;
            ndefMediaVCardTranslate(bufType, &bufTypeTranslate);
 8002864:	f107 030c 	add.w	r3, r7, #12
 8002868:	4619      	mov	r1, r3
 800286a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800286e:	f7ff ff11 	bl	8002694 <ndefMediaVCardTranslate>

            /* Type */
            ndefBufferPrint(" ", &bufTypeTranslate, "");
 8002872:	f107 030c 	add.w	r3, r7, #12
 8002876:	4a23      	ldr	r2, [pc, #140]	; (8002904 <ndefMediaVCardDump+0x1ac>)
 8002878:	4619      	mov	r1, r3
 800287a:	4823      	ldr	r0, [pc, #140]	; (8002908 <ndefMediaVCardDump+0x1b0>)
 800287c:	f000 f9bc 	bl	8002bf8 <ndefBufferPrint>

            /* Subtype, if any */
            if (bufSubType.buffer != NULL)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d006      	beq.n	8002894 <ndefMediaVCardDump+0x13c>
            {
                ndefBufferPrint(" (", &bufSubType, ")");
 8002886:	f107 031c 	add.w	r3, r7, #28
 800288a:	4a20      	ldr	r2, [pc, #128]	; (800290c <ndefMediaVCardDump+0x1b4>)
 800288c:	4619      	mov	r1, r3
 800288e:	4820      	ldr	r0, [pc, #128]	; (8002910 <ndefMediaVCardDump+0x1b8>)
 8002890:	f000 f9b2 	bl	8002bf8 <ndefBufferPrint>
            }

            /* Value */
            if (ST_BYTECMP(bufType->buffer, bufTypePHOTO.buffer, bufTypePHOTO.length) != 0)
 8002894:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800289c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800289e:	4618      	mov	r0, r3
 80028a0:	f016 fa9a 	bl	8018dd8 <memcmp>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <ndefMediaVCardDump+0x162>
            {
                ndefBufferPrint(": ", &bufValue, "\r\n");
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	4a19      	ldr	r2, [pc, #100]	; (8002914 <ndefMediaVCardDump+0x1bc>)
 80028b0:	4619      	mov	r1, r3
 80028b2:	4819      	ldr	r0, [pc, #100]	; (8002918 <ndefMediaVCardDump+0x1c0>)
 80028b4:	f000 f9a0 	bl	8002bf8 <ndefBufferPrint>
 80028b8:	e002      	b.n	80028c0 <ndefMediaVCardDump+0x168>
            }
            else
            {
                platformLog("Photo: <Not displayed>\r\n");
 80028ba:	4818      	ldr	r0, [pc, #96]	; (800291c <ndefMediaVCardDump+0x1c4>)
 80028bc:	f7fd fe12 	bl	80004e4 <logUsart>
    for (i = 0; i < SIZEOF_ARRAY(bufVCardField); i++)
 80028c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028c4:	3301      	adds	r3, #1
 80028c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80028ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d9b2      	bls.n	8002838 <ndefMediaVCardDump+0xe0>
            }
        }
    }

    return ERR_NONE;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3798      	adds	r7, #152	; 0x98
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	0801a810 	.word	0x0801a810
 80028e0:	0801a818 	.word	0x0801a818
 80028e4:	0801a820 	.word	0x0801a820
 80028e8:	0801a828 	.word	0x0801a828
 80028ec:	0801a830 	.word	0x0801a830
 80028f0:	0801a838 	.word	0x0801a838
 80028f4:	0801a840 	.word	0x0801a840
 80028f8:	0801a848 	.word	0x0801a848
 80028fc:	0801a850 	.word	0x0801a850
 8002900:	0801a7d4 	.word	0x0801a7d4
 8002904:	0801a43c 	.word	0x0801a43c
 8002908:	0801a7e8 	.word	0x0801a7e8
 800290c:	0801a6e0 	.word	0x0801a6e0
 8002910:	0801a7ec 	.word	0x0801a7ec
 8002914:	0801a64c 	.word	0x0801a64c
 8002918:	0801a7f0 	.word	0x0801a7f0
 800291c:	0801a7f4 	.word	0x0801a7f4

08002920 <ndefMediaWifiDump>:


/*****************************************************************************/
ReturnCode ndefMediaWifiDump(const ndefType* wifi)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
    ndefTypeWifi wifiConfig;

    if (wifi == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <ndefMediaWifiDump+0x12>
    {
        return ERR_PARAM;
 800292e:	2307      	movs	r3, #7
 8002930:	e028      	b.n	8002984 <ndefMediaWifiDump+0x64>
    }

    if (wifi->id != NDEF_TYPE_MEDIA_WIFI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b07      	cmp	r3, #7
 8002938:	d001      	beq.n	800293e <ndefMediaWifiDump+0x1e>
    {
        return ERR_PARAM;
 800293a:	2307      	movs	r3, #7
 800293c:	e022      	b.n	8002984 <ndefMediaWifiDump+0x64>
    }

    ndefGetWifi(wifi, &wifiConfig);
 800293e:	f107 030c 	add.w	r3, r7, #12
 8002942:	4619      	mov	r1, r3
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f004 f9fd 	bl	8006d44 <ndefGetWifi>

    platformLog(" Wifi config: \r\n");
 800294a:	4810      	ldr	r0, [pc, #64]	; (800298c <ndefMediaWifiDump+0x6c>)
 800294c:	f7fd fdca 	bl	80004e4 <logUsart>
    ndefBufferDump(" Network SSID:",       &wifiConfig.bufNetworkSSID, false);
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	2200      	movs	r2, #0
 8002956:	4619      	mov	r1, r3
 8002958:	480d      	ldr	r0, [pc, #52]	; (8002990 <ndefMediaWifiDump+0x70>)
 800295a:	f000 f8e9 	bl	8002b30 <ndefBufferDump>
    ndefBufferDump(" Network Key:",        &wifiConfig.bufNetworkKey, false);
 800295e:	f107 030c 	add.w	r3, r7, #12
 8002962:	3308      	adds	r3, #8
 8002964:	2200      	movs	r2, #0
 8002966:	4619      	mov	r1, r3
 8002968:	480a      	ldr	r0, [pc, #40]	; (8002994 <ndefMediaWifiDump+0x74>)
 800296a:	f000 f8e1 	bl	8002b30 <ndefBufferDump>
    platformLog(" Authentication: %d\r\n",  wifiConfig.authentication);
 800296e:	7f3b      	ldrb	r3, [r7, #28]
 8002970:	4619      	mov	r1, r3
 8002972:	4809      	ldr	r0, [pc, #36]	; (8002998 <ndefMediaWifiDump+0x78>)
 8002974:	f7fd fdb6 	bl	80004e4 <logUsart>
    platformLog(" Encryption: %d\r\n",      wifiConfig.encryption);
 8002978:	7f7b      	ldrb	r3, [r7, #29]
 800297a:	4619      	mov	r1, r3
 800297c:	4807      	ldr	r0, [pc, #28]	; (800299c <ndefMediaWifiDump+0x7c>)
 800297e:	f7fd fdb1 	bl	80004e4 <logUsart>

    return ERR_NONE;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	0801a858 	.word	0x0801a858
 8002990:	0801a86c 	.word	0x0801a86c
 8002994:	0801a87c 	.word	0x0801a87c
 8002998:	0801a88c 	.word	0x0801a88c
 800299c:	0801a8a4 	.word	0x0801a8a4

080029a0 <ndefRecordDumpType>:


/*****************************************************************************/
ReturnCode ndefRecordDumpType(const ndefRecord* record)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b0c8      	sub	sp, #288	; 0x120
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	1d3b      	adds	r3, r7, #4
 80029a8:	6018      	str	r0, [r3, #0]
    ReturnCode err;
    ndefType   type;
    uint32_t i;

    err = ndefRecordToType(record, &type);
 80029aa:	f107 020c 	add.w	r2, r7, #12
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	4611      	mov	r1, r2
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	f004 fb94 	bl	80070e0 <ndefRecordToType>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
    if (err != ERR_NONE)
 80029be:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <ndefRecordDumpType+0x2c>
    {
        return err;
 80029c6:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80029ca:	e02b      	b.n	8002a24 <ndefRecordDumpType+0x84>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeDumpTable); i++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80029d2:	e022      	b.n	8002a1a <ndefRecordDumpType+0x7a>
    {
        if (type.id == typeDumpTable[i].typeId)
 80029d4:	f107 030c 	add.w	r3, r7, #12
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	4915      	ldr	r1, [pc, #84]	; (8002a30 <ndefRecordDumpType+0x90>)
 80029dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029e0:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d113      	bne.n	8002a10 <ndefRecordDumpType+0x70>
        {
            /* Call the appropriate function to the matching record type */
            if (typeDumpTable[i].dump != NULL)
 80029e8:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <ndefRecordDumpType+0x90>)
 80029ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <ndefRecordDumpType+0x70>
            {
                return typeDumpTable[i].dump(&type);
 80029f8:	4a0d      	ldr	r2, [pc, #52]	; (8002a30 <ndefRecordDumpType+0x90>)
 80029fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f107 020c 	add.w	r2, r7, #12
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4798      	blx	r3
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	e009      	b.n	8002a24 <ndefRecordDumpType+0x84>
    for (i = 0; i < SIZEOF_ARRAY(typeDumpTable); i++)
 8002a10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a14:	3301      	adds	r3, #1
 8002a16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002a1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d9d8      	bls.n	80029d4 <ndefRecordDumpType+0x34>
            }
        }
    }

    return ERR_NOT_IMPLEMENTED;
 8002a22:	230f      	movs	r3, #15
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	0801a960 	.word	0x0801a960

08002a34 <ndefBufferDumpLine>:


/*****************************************************************************/
static ReturnCode ndefBufferDumpLine(const uint8_t* buffer, const uint32_t offset, uint32_t lineLength, uint32_t remaining)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
    uint32_t j;

    if (buffer == NULL)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <ndefBufferDumpLine+0x18>
    {
        return ERR_PARAM;
 8002a48:	2307      	movs	r3, #7
 8002a4a:	e05e      	b.n	8002b0a <ndefBufferDumpLine+0xd6>
    }

    platformLog(" [%.4X] ", offset);
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	4831      	ldr	r0, [pc, #196]	; (8002b14 <ndefBufferDumpLine+0xe0>)
 8002a50:	f7fd fd48 	bl	80004e4 <logUsart>

    /* Dump hex data */
    for (j = 0; j < remaining; j++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	e00c      	b.n	8002a74 <ndefBufferDumpLine+0x40>
    {
        platformLog("%.2X ", buffer[offset + j]);
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	4413      	add	r3, r2
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	4619      	mov	r1, r3
 8002a68:	482b      	ldr	r0, [pc, #172]	; (8002b18 <ndefBufferDumpLine+0xe4>)
 8002a6a:	f7fd fd3b 	bl	80004e4 <logUsart>
    for (j = 0; j < remaining; j++)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3301      	adds	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d3ee      	bcc.n	8002a5a <ndefBufferDumpLine+0x26>
    }
    /* Fill hex section if needed */
    for (j = 0; j < lineLength - remaining; j++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	e005      	b.n	8002a8e <ndefBufferDumpLine+0x5a>
    {
        platformLog("   ");
 8002a82:	4826      	ldr	r0, [pc, #152]	; (8002b1c <ndefBufferDumpLine+0xe8>)
 8002a84:	f7fd fd2e 	bl	80004e4 <logUsart>
    for (j = 0; j < lineLength - remaining; j++)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d3f3      	bcc.n	8002a82 <ndefBufferDumpLine+0x4e>
    }

    /* Dump characters */
    platformLog("|");
 8002a9a:	4821      	ldr	r0, [pc, #132]	; (8002b20 <ndefBufferDumpLine+0xec>)
 8002a9c:	f7fd fd22 	bl	80004e4 <logUsart>
    for (j = 0; j < remaining; j++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	e01a      	b.n	8002adc <ndefBufferDumpLine+0xa8>
    {
        /* Dump only ASCII characters, otherwise replace with a '.' */
        platformLog("%2c", isPrintableASCII(&buffer[offset + j], 1) ? buffer[offset + j] : '.');
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	4413      	add	r3, r2
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fb56 	bl	8002164 <isPrintableASCII>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <ndefBufferDumpLine+0x98>
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	e000      	b.n	8002ace <ndefBufferDumpLine+0x9a>
 8002acc:	232e      	movs	r3, #46	; 0x2e
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4814      	ldr	r0, [pc, #80]	; (8002b24 <ndefBufferDumpLine+0xf0>)
 8002ad2:	f7fd fd07 	bl	80004e4 <logUsart>
    for (j = 0; j < remaining; j++)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d3e0      	bcc.n	8002aa6 <ndefBufferDumpLine+0x72>
    }
    /* Fill ASCII section if needed */
    for (j = 0; j < lineLength - remaining; j++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	e005      	b.n	8002af6 <ndefBufferDumpLine+0xc2>
    {
        platformLog("  ");
 8002aea:	480f      	ldr	r0, [pc, #60]	; (8002b28 <ndefBufferDumpLine+0xf4>)
 8002aec:	f7fd fcfa 	bl	80004e4 <logUsart>
    for (j = 0; j < lineLength - remaining; j++)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	3301      	adds	r3, #1
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d3f3      	bcc.n	8002aea <ndefBufferDumpLine+0xb6>
    }
    platformLog(" |\r\n");
 8002b02:	480a      	ldr	r0, [pc, #40]	; (8002b2c <ndefBufferDumpLine+0xf8>)
 8002b04:	f7fd fcee 	bl	80004e4 <logUsart>

    return ERR_NONE;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	0801a8b8 	.word	0x0801a8b8
 8002b18:	0801a8c4 	.word	0x0801a8c4
 8002b1c:	0801a8cc 	.word	0x0801a8cc
 8002b20:	0801a8d0 	.word	0x0801a8d0
 8002b24:	0801a8d4 	.word	0x0801a8d4
 8002b28:	0801a8d8 	.word	0x0801a8d8
 8002b2c:	0801a8dc 	.word	0x0801a8dc

08002b30 <ndefBufferDump>:


/*****************************************************************************/
ReturnCode ndefBufferDump(const char* string, const ndefConstBuffer* bufPayload, bool verbose)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	71fb      	strb	r3, [r7, #7]
    uint32_t bufferLengthMax = 32;
 8002b3e:	2320      	movs	r3, #32
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t lineLength = 8;
 8002b42:	2308      	movs	r3, #8
 8002b44:	617b      	str	r3, [r7, #20]
    uint32_t displayed;
    uint32_t remaining;
    uint32_t offset;

    if ( (string == NULL) || (bufPayload == NULL) )
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <ndefBufferDump+0x22>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <ndefBufferDump+0x26>
    {
        return ERR_PARAM;
 8002b52:	2307      	movs	r3, #7
 8002b54:	e045      	b.n	8002be2 <ndefBufferDump+0xb2>
    }

    displayed = bufPayload->length;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	623b      	str	r3, [r7, #32]
    remaining = bufPayload->length;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	61fb      	str	r3, [r7, #28]

    platformLog("%s (length %d)\r\n", string, bufPayload->length);
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	461a      	mov	r2, r3
 8002b68:	68f9      	ldr	r1, [r7, #12]
 8002b6a:	4820      	ldr	r0, [pc, #128]	; (8002bec <ndefBufferDump+0xbc>)
 8002b6c:	f7fd fcba 	bl	80004e4 <logUsart>
    if (bufPayload->buffer == NULL)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d104      	bne.n	8002b82 <ndefBufferDump+0x52>
    {
        platformLog(" <No chunk payload buffer>\r\n");
 8002b78:	481d      	ldr	r0, [pc, #116]	; (8002bf0 <ndefBufferDump+0xc0>)
 8002b7a:	f7fd fcb3 	bl	80004e4 <logUsart>
        return ERR_NONE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e02f      	b.n	8002be2 <ndefBufferDump+0xb2>
    }

    if (verbose == true)
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <ndefBufferDump+0x5e>
    {
        bufferLengthMax = 256;
 8002b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (bufPayload->length > bufferLengthMax)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d201      	bcs.n	8002b9c <ndefBufferDump+0x6c>
    {
        /* Truncate output */
        displayed = bufferLengthMax;
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	623b      	str	r3, [r7, #32]
    }

    for (offset = 0; offset < displayed; offset += lineLength)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	e012      	b.n	8002bc8 <ndefBufferDump+0x98>
    {
        ndefBufferDumpLine(bufPayload->buffer, offset, lineLength, remaining > lineLength ? lineLength : remaining);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	4293      	cmp	r3, r2
 8002bac:	bf28      	it	cs
 8002bae:	4613      	movcs	r3, r2
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	69b9      	ldr	r1, [r7, #24]
 8002bb4:	f7ff ff3e 	bl	8002a34 <ndefBufferDumpLine>
        remaining -= lineLength;
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	61fb      	str	r3, [r7, #28]
    for (offset = 0; offset < displayed; offset += lineLength)
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d3e8      	bcc.n	8002ba2 <ndefBufferDump+0x72>
    }

    if (displayed < bufPayload->length)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	6a3a      	ldr	r2, [r7, #32]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d202      	bcs.n	8002be0 <ndefBufferDump+0xb0>
    {
        platformLog(" ... (truncated)\r\n");
 8002bda:	4806      	ldr	r0, [pc, #24]	; (8002bf4 <ndefBufferDump+0xc4>)
 8002bdc:	f7fd fc82 	bl	80004e4 <logUsart>
    }

    return ERR_NONE;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3728      	adds	r7, #40	; 0x28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	0801a8e4 	.word	0x0801a8e4
 8002bf0:	0801a8f8 	.word	0x0801a8f8
 8002bf4:	0801a918 	.word	0x0801a918

08002bf8 <ndefBufferPrint>:


/*****************************************************************************/
ReturnCode ndefBufferPrint(const char* prefix, const ndefConstBuffer* bufString, const char* suffix)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint8_t test = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	74fb      	strb	r3, [r7, #19]

    if ( (prefix == NULL) || (bufString == NULL) || (bufString->buffer == NULL) || (suffix  == NULL))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <ndefBufferPrint+0x2a>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d006      	beq.n	8002c22 <ndefBufferPrint+0x2a>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <ndefBufferPrint+0x2a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <ndefBufferPrint+0x2e>
    {
        return ERR_PARAM;
 8002c22:	2307      	movs	r3, #7
 8002c24:	e02e      	b.n	8002c84 <ndefBufferPrint+0x8c>
    }

    platformLog("%s", prefix);
 8002c26:	68f9      	ldr	r1, [r7, #12]
 8002c28:	4818      	ldr	r0, [pc, #96]	; (8002c8c <ndefBufferPrint+0x94>)
 8002c2a:	f7fd fc5b 	bl	80004e4 <logUsart>
    for (i = 0; i < bufString->length; i++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	e00e      	b.n	8002c52 <ndefBufferPrint+0x5a>
    {
        platformLog("%c", bufString->buffer[i]);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4813      	ldr	r0, [pc, #76]	; (8002c90 <ndefBufferPrint+0x98>)
 8002c42:	f7fd fc4f 	bl	80004e4 <logUsart>
        test++;
 8002c46:	7cfb      	ldrb	r3, [r7, #19]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	74fb      	strb	r3, [r7, #19]
    for (i = 0; i < bufString->length; i++)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d3eb      	bcc.n	8002c34 <ndefBufferPrint+0x3c>
    }
    platformLog("%s", suffix);
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	480b      	ldr	r0, [pc, #44]	; (8002c8c <ndefBufferPrint+0x94>)
 8002c60:	f7fd fc40 	bl	80004e4 <logUsart>

    switch(test)
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d107      	bne.n	8002c7a <ndefBufferPrint+0x82>
            {

                case 4:
                	platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	2110      	movs	r1, #16
 8002c6e:	4809      	ldr	r0, [pc, #36]	; (8002c94 <ndefBufferPrint+0x9c>)
 8002c70:	f001 fe4f 	bl	8004912 <HAL_GPIO_WritePin>
                	ringbell();
 8002c74:	f7fd feda 	bl	8000a2c <ringbell>
                    break;
 8002c78:	e003      	b.n	8002c82 <ndefBufferPrint+0x8a>
//                case NDEF_DEMO_FORMAT_TAG:
//
//                    break;

                default:
                	platformLog("Selection exit\r\n");
 8002c7a:	4807      	ldr	r0, [pc, #28]	; (8002c98 <ndefBufferPrint+0xa0>)
 8002c7c:	f7fd fc32 	bl	80004e4 <logUsart>
                    break;
 8002c80:	bf00      	nop
            }

    //platformLog("%d\n\r", test);

    return ERR_NONE;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	0801a92c 	.word	0x0801a92c
 8002c90:	0801a640 	.word	0x0801a640
 8002c94:	40020400 	.word	0x40020400
 8002c98:	0801a930 	.word	0x0801a930

08002c9c <ndefBuffer8Print>:


/*****************************************************************************/
ReturnCode ndefBuffer8Print(const char* prefix, const ndefConstBuffer8* bufString, const char* suffix)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
    ndefConstBuffer buf;

    if (bufString == NULL)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <ndefBuffer8Print+0x16>
    {
        return ERR_PARAM;
 8002cae:	2307      	movs	r3, #7
 8002cb0:	e00d      	b.n	8002cce <ndefBuffer8Print+0x32>
    }

    buf.buffer = bufString->buffer;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	613b      	str	r3, [r7, #16]
    buf.length = bufString->length;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	791b      	ldrb	r3, [r3, #4]
 8002cbc:	617b      	str	r3, [r7, #20]

    return ndefBufferPrint(prefix, &buf, suffix);
 8002cbe:	f107 0310 	add.w	r3, r7, #16
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f7ff ff96 	bl	8002bf8 <ndefBufferPrint>
 8002ccc:	4603      	mov	r3, r0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <spiInit>:

SPI_HandleTypeDef *pSpi = 0;


void spiInit(SPI_HandleTypeDef *hspi)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
    pSpi = hspi;
 8002ce0:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <spiInit+0x28>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6013      	str	r3, [r2, #0]

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cf4:	601a      	str	r2, [r3, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	20002ddc 	.word	0x20002ddc

08002d04 <spiTxRx>:
{
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
}

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{  
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	80fb      	strh	r3, [r7, #6]
  if(pSpi == 0)
 8002d12:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <spiTxRx+0x70>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <spiTxRx+0x1a>
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e025      	b.n	8002d6a <spiTxRx+0x66>
  
  if(length > SPI_BUF_LEN)
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	2b61      	cmp	r3, #97	; 0x61
 8002d22:	d901      	bls.n	8002d28 <spiTxRx+0x24>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e020      	b.n	8002d6a <spiTxRx+0x66>
  }
  
  /* Initialize Tx data*/
  if(txData != NULL)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d006      	beq.n	8002d3c <spiTxRx+0x38>
  {
    memcpy(txBuf, txData, length );
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	461a      	mov	r2, r3
 8002d32:	68f9      	ldr	r1, [r7, #12]
 8002d34:	4810      	ldr	r0, [pc, #64]	; (8002d78 <spiTxRx+0x74>)
 8002d36:	f016 f85e 	bl	8018df6 <memcpy>
 8002d3a:	e005      	b.n	8002d48 <spiTxRx+0x44>
  }
  else
  {
    memset(txBuf, 0x00, length );
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2100      	movs	r1, #0
 8002d42:	480d      	ldr	r0, [pc, #52]	; (8002d78 <spiTxRx+0x74>)
 8002d44:	f016 f87b 	bl	8018e3e <memset>
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <spiTxRx+0x70>)
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <spiTxRx+0x52>
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	e000      	b.n	8002d58 <spiTxRx+0x54>
 8002d56:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <spiTxRx+0x78>)
 8002d58:	88f9      	ldrh	r1, [r7, #6]
 8002d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	460b      	mov	r3, r1
 8002d62:	4905      	ldr	r1, [pc, #20]	; (8002d78 <spiTxRx+0x74>)
 8002d64:	f002 fc71 	bl	800564a <HAL_SPI_TransmitReceive>
 8002d68:	4603      	mov	r3, r0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20002ddc 	.word	0x20002ddc
 8002d78:	20002d14 	.word	0x20002d14
 8002d7c:	20002d78 	.word	0x20002d78

08002d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_MspInit+0x5c>)
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <HAL_MspInit+0x5c>)
 8002d8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d90:	6253      	str	r3, [r2, #36]	; 0x24
 8002d92:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_MspInit+0x5c>)
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9e:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <HAL_MspInit+0x5c>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <HAL_MspInit+0x5c>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6213      	str	r3, [r2, #32]
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <HAL_MspInit+0x5c>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002db6:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_MspInit+0x5c>)
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <HAL_MspInit+0x5c>)
 8002dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	6253      	str	r3, [r2, #36]	; 0x24
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_MspInit+0x5c>)
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dca:	607b      	str	r3, [r7, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002dce:	2007      	movs	r0, #7
 8002dd0:	f001 fbb8 	bl	8004544 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40023800 	.word	0x40023800

08002de0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	; 0x28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <HAL_SPI_MspInit+0x7c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d127      	bne.n	8002e52 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <HAL_SPI_MspInit+0x80>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <HAL_SPI_MspInit+0x80>)
 8002e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e0c:	6213      	str	r3, [r2, #32]
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <HAL_SPI_MspInit+0x80>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_SPI_MspInit+0x80>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <HAL_SPI_MspInit+0x80>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	61d3      	str	r3, [r2, #28]
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <HAL_SPI_MspInit+0x80>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e32:	23e0      	movs	r3, #224	; 0xe0
 8002e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e36:	2302      	movs	r3, #2
 8002e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e42:	2305      	movs	r3, #5
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e46:	f107 0314 	add.w	r3, r7, #20
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4805      	ldr	r0, [pc, #20]	; (8002e64 <HAL_SPI_MspInit+0x84>)
 8002e4e:	f001 fbbb 	bl	80045c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e52:	bf00      	nop
 8002e54:	3728      	adds	r7, #40	; 0x28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40013000 	.word	0x40013000
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40020000 	.word	0x40020000

08002e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08c      	sub	sp, #48	; 0x30
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 031c 	add.w	r3, r7, #28
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a2e      	ldr	r2, [pc, #184]	; (8002f40 <HAL_UART_MspInit+0xd8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d129      	bne.n	8002ede <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e8a:	4b2e      	ldr	r3, [pc, #184]	; (8002f44 <HAL_UART_MspInit+0xdc>)
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	4a2d      	ldr	r2, [pc, #180]	; (8002f44 <HAL_UART_MspInit+0xdc>)
 8002e90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e94:	6253      	str	r3, [r2, #36]	; 0x24
 8002e96:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_UART_MspInit+0xdc>)
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea2:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <HAL_UART_MspInit+0xdc>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <HAL_UART_MspInit+0xdc>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	61d3      	str	r3, [r2, #28]
 8002eae:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <HAL_UART_MspInit+0xdc>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002eba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002ecc:	2308      	movs	r3, #8
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed0:	f107 031c 	add.w	r3, r7, #28
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	481c      	ldr	r0, [pc, #112]	; (8002f48 <HAL_UART_MspInit+0xe0>)
 8002ed8:	f001 fb76 	bl	80045c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002edc:	e02c      	b.n	8002f38 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1a      	ldr	r2, [pc, #104]	; (8002f4c <HAL_UART_MspInit+0xe4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d127      	bne.n	8002f38 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ee8:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <HAL_UART_MspInit+0xdc>)
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	4a15      	ldr	r2, [pc, #84]	; (8002f44 <HAL_UART_MspInit+0xdc>)
 8002eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef2:	6253      	str	r3, [r2, #36]	; 0x24
 8002ef4:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <HAL_UART_MspInit+0xdc>)
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f00:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <HAL_UART_MspInit+0xdc>)
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <HAL_UART_MspInit+0xdc>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	61d3      	str	r3, [r2, #28]
 8002f0c:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <HAL_UART_MspInit+0xdc>)
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f18:	230c      	movs	r3, #12
 8002f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f24:	2303      	movs	r3, #3
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f28:	2307      	movs	r3, #7
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2c:	f107 031c 	add.w	r3, r7, #28
 8002f30:	4619      	mov	r1, r3
 8002f32:	4807      	ldr	r0, [pc, #28]	; (8002f50 <HAL_UART_MspInit+0xe8>)
 8002f34:	f001 fb48 	bl	80045c8 <HAL_GPIO_Init>
}
 8002f38:	bf00      	nop
 8002f3a:	3730      	adds	r7, #48	; 0x30
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40004c00 	.word	0x40004c00
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020800 	.word	0x40020800
 8002f4c:	40004400 	.word	0x40004400
 8002f50:	40020000 	.word	0x40020000

08002f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f58:	e7fe      	b.n	8002f58 <NMI_Handler+0x4>

08002f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f5e:	e7fe      	b.n	8002f5e <HardFault_Handler+0x4>

08002f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f64:	e7fe      	b.n	8002f64 <MemManage_Handler+0x4>

08002f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f66:	b480      	push	{r7}
 8002f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f6a:	e7fe      	b.n	8002f6a <BusFault_Handler+0x4>

08002f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <UsageFault_Handler+0x4>

08002f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr

08002f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f9a:	f001 f9c9 	bl	8004330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f001 fce4 	bl	8004974 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  st25r3911Isr();
 8002fac:	f000 ffc4 	bl	8003f38 <st25r3911Isr>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <_sbrk+0x5c>)
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <_sbrk+0x60>)
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fc8:	4b13      	ldr	r3, [pc, #76]	; (8003018 <_sbrk+0x64>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d102      	bne.n	8002fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fd0:	4b11      	ldr	r3, [pc, #68]	; (8003018 <_sbrk+0x64>)
 8002fd2:	4a12      	ldr	r2, [pc, #72]	; (800301c <_sbrk+0x68>)
 8002fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <_sbrk+0x64>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d207      	bcs.n	8002ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fe4:	f015 fece 	bl	8018d84 <__errno>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	230c      	movs	r3, #12
 8002fec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff2:	e009      	b.n	8003008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <_sbrk+0x64>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ffa:	4b07      	ldr	r3, [pc, #28]	; (8003018 <_sbrk+0x64>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	4a05      	ldr	r2, [pc, #20]	; (8003018 <_sbrk+0x64>)
 8003004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003006:	68fb      	ldr	r3, [r7, #12]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20014000 	.word	0x20014000
 8003014:	00000400 	.word	0x00000400
 8003018:	20002de0 	.word	0x20002de0
 800301c:	20003d78 	.word	0x20003d78

08003020 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800302c:	480c      	ldr	r0, [pc, #48]	; (8003060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800302e:	490d      	ldr	r1, [pc, #52]	; (8003064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003030:	4a0d      	ldr	r2, [pc, #52]	; (8003068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003034:	e002      	b.n	800303c <LoopCopyDataInit>

08003036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800303a:	3304      	adds	r3, #4

0800303c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800303c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800303e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003040:	d3f9      	bcc.n	8003036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003044:	4c0a      	ldr	r4, [pc, #40]	; (8003070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003048:	e001      	b.n	800304e <LoopFillZerobss>

0800304a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800304a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800304c:	3204      	adds	r2, #4

0800304e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800304e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003050:	d3fb      	bcc.n	800304a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003052:	f7ff ffe5 	bl	8003020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003056:	f015 fe9b 	bl	8018d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800305a:	f7fd fae5 	bl	8000628 <main>
  bx lr
 800305e:	4770      	bx	lr
  ldr r0, =_sdata
 8003060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003064:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8003068:	0801b0a0 	.word	0x0801b0a0
  ldr r2, =_sbss
 800306c:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8003070:	20003d78 	.word	0x20003d78

08003074 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003074:	e7fe      	b.n	8003074 <ADC1_IRQHandler>

08003076 <st25r3911TxRxOn>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3911TxRxOn( void )
{
 8003076:	b580      	push	{r7, lr}
 8003078:	af00      	add	r7, sp, #0
    st25r3911SetRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 800307a:	2148      	movs	r1, #72	; 0x48
 800307c:	2002      	movs	r0, #2
 800307e:	f000 fd62 	bl	8003b46 <st25r3911SetRegisterBits>
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}

08003086 <st25r3911TxRxOff>:

void st25r3911TxRxOff( void )
{
 8003086:	b580      	push	{r7, lr}
 8003088:	af00      	add	r7, sp, #0
    st25r3911ClrRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 800308a:	2148      	movs	r1, #72	; 0x48
 800308c:	2002      	movs	r0, #2
 800308e:	f000 fd37 	bl	8003b00 <st25r3911ClrRegisterBits>
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}

08003096 <st25r3911OscOn>:


void st25r3911OscOn( void )
{
 8003096:	b580      	push	{r7, lr}
 8003098:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */        
    /* Use ST25R3911_REG_OP_CONTROL_en instead of ST25R3911_REG_AUX_DISPLAY_osc_ok to be on the safe side */    
    if( !st25r3911CheckReg( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_en, ST25R3911_REG_OP_CONTROL_en ) )
 800309a:	2280      	movs	r2, #128	; 0x80
 800309c:	2180      	movs	r1, #128	; 0x80
 800309e:	2002      	movs	r0, #2
 80030a0:	f000 f9ba 	bl	8003418 <st25r3911CheckReg>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f083 0301 	eor.w	r3, r3, #1
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d011      	beq.n	80030d4 <st25r3911OscOn+0x3e>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3911GetInterrupt( ST25R3911_IRQ_MASK_OSC );
 80030b0:	2080      	movs	r0, #128	; 0x80
 80030b2:	f001 f845 	bl	8004140 <st25r3911GetInterrupt>
      
        /* enable oscillator frequency stable interrupt */
        st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_OSC);
 80030b6:	2080      	movs	r0, #128	; 0x80
 80030b8:	f001 f87a 	bl	80041b0 <st25r3911EnableInterrupts>

        /* enable oscillator and regulator output */
        st25r3911ModifyRegister(ST25R3911_REG_OP_CONTROL, 0x00, ST25R3911_REG_OP_CONTROL_en);
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	2100      	movs	r1, #0
 80030c0:	2002      	movs	r0, #2
 80030c2:	f000 fd74 	bl	8003bae <st25r3911ModifyRegister>

        /* wait for the oscillator interrupt */
        st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_OSC, ST25R3911_OSC_STABLE_TIMEOUT);
 80030c6:	210a      	movs	r1, #10
 80030c8:	2080      	movs	r0, #128	; 0x80
 80030ca:	f000 ffe9 	bl	80040a0 <st25r3911WaitForInterruptsTimed>
        st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_OSC);
 80030ce:	2080      	movs	r0, #128	; 0x80
 80030d0:	f001 f87a 	bl	80041c8 <st25r3911DisableInterrupts>
    }
    
}
 80030d4:	bf00      	nop
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <st25r3911Initialize>:


void st25r3911Initialize(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;

    /* first, reset the st25r3911 */
    st25r3911ExecuteCommand(ST25R3911_CMD_SET_DEFAULT);
 80030de:	20c1      	movs	r0, #193	; 0xc1
 80030e0:	f000 fe48 	bl	8003d74 <st25r3911ExecuteCommand>

    /* Set Operation Control Register to default value */
    st25r3911WriteRegister(ST25R3911_REG_OP_CONTROL, 0x00);
 80030e4:	2100      	movs	r1, #0
 80030e6:	2002      	movs	r0, #2
 80030e8:	f000 fcc0 	bl	8003a6c <st25r3911WriteRegister>

    /* enable pull downs on miso line */
    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2, 0,
 80030ec:	2218      	movs	r2, #24
 80030ee:	2100      	movs	r1, #0
 80030f0:	2001      	movs	r0, #1
 80030f2:	f000 fd5c 	bl	8003bae <st25r3911ModifyRegister>
            ST25R3911_REG_IO_CONF2_miso_pd1 |
            ST25R3911_REG_IO_CONF2_miso_pd2);

    /* after reset all interrupts are enabled. so disable them at first */
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_ALL);
 80030f6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80030fa:	f001 f865 	bl	80041c8 <st25r3911DisableInterrupts>
    /* and clear them, just to be sure... */
    st25r3911ClearInterrupts();
 80030fe:	f001 f86f 	bl	80041e0 <st25r3911ClearInterrupts>

    st25r3911OscOn();
 8003102:	f7ff ffc8 	bl	8003096 <st25r3911OscOn>

    /* Measure vdd and set sup3V bit accordingly */
    vdd_mV = st25r3911MeasureVoltage(ST25R3911_REG_REGULATOR_CONTROL_mpsv_vdd);
 8003106:	2000      	movs	r0, #0
 8003108:	f000 f928 	bl	800335c <st25r3911MeasureVoltage>
 800310c:	4603      	mov	r3, r0
 800310e:	80fb      	strh	r3, [r7, #6]

    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2,
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8003116:	d201      	bcs.n	800311c <st25r3911Initialize+0x44>
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	e000      	b.n	800311e <st25r3911Initialize+0x46>
 800311c:	2300      	movs	r3, #0
 800311e:	461a      	mov	r2, r3
 8003120:	2180      	movs	r1, #128	; 0x80
 8003122:	2001      	movs	r0, #1
 8003124:	f000 fd43 	bl	8003bae <st25r3911ModifyRegister>
                         ST25R3911_REG_IO_CONF2_sup3V,
                         (uint8_t)((vdd_mV < 3600U)?ST25R3911_REG_IO_CONF2_sup3V:0U));

    /* Make sure Transmitter and Receiver are disabled */
    st25r3911TxRxOff();
 8003128:	f7ff ffad 	bl	8003086 <st25r3911TxRxOff>
    
    return;
 800312c:	bf00      	nop
}
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <st25r3911AdjustRegulators>:

    return;
}

ReturnCode st25r3911AdjustRegulators(uint16_t* result_mV)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
    uint8_t result;
    uint8_t io_conf2;
    ReturnCode err = ERR_NONE;
 800313c:	2300      	movs	r3, #0
 800313e:	81fb      	strh	r3, [r7, #14]

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3911SetRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 8003140:	2180      	movs	r1, #128	; 0x80
 8003142:	202a      	movs	r0, #42	; 0x2a
 8003144:	f000 fcff 	bl	8003b46 <st25r3911SetRegisterBits>
    st25r3911ClrRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 8003148:	2180      	movs	r1, #128	; 0x80
 800314a:	202a      	movs	r0, #42	; 0x2a
 800314c:	f000 fcd8 	bl	8003b00 <st25r3911ClrRegisterBits>

    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_ADJUST_REGULATORS,
 8003150:	f107 030d 	add.w	r3, r7, #13
 8003154:	2205      	movs	r2, #5
 8003156:	212b      	movs	r1, #43	; 0x2b
 8003158:	20d6      	movs	r0, #214	; 0xd6
 800315a:	f000 fad5 	bl	8003708 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_REGULATOR_RESULT,
                                    5,
                                    &result);
  
    st25r3911ReadRegister(ST25R3911_REG_IO_CONF2, &io_conf2);
 800315e:	f107 030c 	add.w	r3, r7, #12
 8003162:	4619      	mov	r1, r3
 8003164:	2001      	movs	r0, #1
 8003166:	f000 fb59 	bl	800381c <st25r3911ReadRegister>

    result >>= ST25R3911_REG_REGULATOR_RESULT_shift_reg;
 800316a:	7b7b      	ldrb	r3, [r7, #13]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	b2db      	uxtb	r3, r3
 8003170:	737b      	strb	r3, [r7, #13]
    result -= 5U;
 8003172:	7b7b      	ldrb	r3, [r7, #13]
 8003174:	3b05      	subs	r3, #5
 8003176:	b2db      	uxtb	r3, r3
 8003178:	737b      	strb	r3, [r7, #13]
    if (result_mV != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d02b      	beq.n	80031d8 <st25r3911AdjustRegulators+0xa4>
    {
        if((io_conf2 & ST25R3911_REG_IO_CONF2_sup3V) != 0U)
 8003180:	7b3b      	ldrb	r3, [r7, #12]
 8003182:	b25b      	sxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	da16      	bge.n	80031b6 <st25r3911AdjustRegulators+0x82>
        {
            *result_mV = 2400;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800318e:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 100U;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	881a      	ldrh	r2, [r3, #0]
 8003194:	7b7b      	ldrb	r3, [r7, #13]
 8003196:	b29b      	uxth	r3, r3
 8003198:	4619      	mov	r1, r3
 800319a:	0089      	lsls	r1, r1, #2
 800319c:	440b      	add	r3, r1
 800319e:	4619      	mov	r1, r3
 80031a0:	0088      	lsls	r0, r1, #2
 80031a2:	4619      	mov	r1, r3
 80031a4:	4603      	mov	r3, r0
 80031a6:	440b      	add	r3, r1
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	801a      	strh	r2, [r3, #0]
 80031b4:	e010      	b.n	80031d8 <st25r3911AdjustRegulators+0xa4>
        }
        else
        {
            *result_mV = 3900;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f640 723c 	movw	r2, #3900	; 0xf3c
 80031bc:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 120U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	881a      	ldrh	r2, [r3, #0]
 80031c2:	7b7b      	ldrb	r3, [r7, #13]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	4619      	mov	r1, r3
 80031c8:	0109      	lsls	r1, r1, #4
 80031ca:	1acb      	subs	r3, r1, r3
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	801a      	strh	r2, [r3, #0]
        }
    }
    return err;
 80031d8:	89fb      	ldrh	r3, [r7, #14]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <st25r3911MeasureAmplitude>:

void st25r3911MeasureAmplitude(uint8_t* result)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_AMPLITUDE,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	220a      	movs	r2, #10
 80031ee:	2120      	movs	r1, #32
 80031f0:	20d3      	movs	r0, #211	; 0xd3
 80031f2:	f000 fa89 	bl	8003708 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <st25r3911MeasurePhase>:

void st25r3911MeasurePhase(uint8_t* result)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_PHASE,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	220a      	movs	r2, #10
 800320a:	2120      	movs	r1, #32
 800320c:	20d9      	movs	r0, #217	; 0xd9
 800320e:	f000 fa7b 	bl	8003708 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <st25r3911MeasureCapacitance>:

void st25r3911MeasureCapacitance(uint8_t* result)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_CAPACITANCE, 
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	220a      	movs	r2, #10
 8003226:	2120      	movs	r1, #32
 8003228:	20de      	movs	r0, #222	; 0xde
 800322a:	f000 fa6d 	bl	8003708 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <st25r3911CalibrateAntenna>:

void st25r3911CalibrateAntenna(uint8_t* result)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_CALIBRATE_ANTENNA,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	220a      	movs	r2, #10
 8003242:	2123      	movs	r1, #35	; 0x23
 8003244:	20d8      	movs	r0, #216	; 0xd8
 8003246:	f000 fa5f 	bl	8003708 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_ANT_CAL_RESULT,
                                    10,
                                    result);
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <st25r3911CalibrateCapacitiveSensor>:
                                    result);
}


ReturnCode st25r3911CalibrateCapacitiveSensor(uint8_t* result)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    res;
    
    /* Clear Manual calibration values to enable automatic calibration mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_mask_cs_mcal );
 800325a:	21f8      	movs	r1, #248	; 0xf8
 800325c:	202e      	movs	r0, #46	; 0x2e
 800325e:	f000 fc4f 	bl	8003b00 <st25r3911ClrRegisterBits>
    
    /* Execute automatic calibration */
    ret = st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_CALIBRATE_C_SENSOR, ST25R3911_REG_CAP_SENSOR_RESULT, ST25R3911_TOUT_CALIBRATE_CAP_SENSOR, &res );
 8003262:	f107 030d 	add.w	r3, r7, #13
 8003266:	2204      	movs	r2, #4
 8003268:	212f      	movs	r1, #47	; 0x2f
 800326a:	20dd      	movs	r0, #221	; 0xdd
 800326c:	f000 fa4c 	bl	8003708 <st25r3911ExecuteCommandAndGetResult>
 8003270:	4603      	mov	r3, r0
 8003272:	81fb      	strh	r3, [r7, #14]
    
    /* Check wether the calibration was successull */
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 8003274:	7b7b      	ldrb	r3, [r7, #13]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 800327e:	7b7b      	ldrb	r3, [r7, #13]
 8003280:	f003 0302 	and.w	r3, r3, #2
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 8003288:	89fb      	ldrh	r3, [r7, #14]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <st25r3911CalibrateCapacitiveSensor+0x40>
    {
        return ERR_IO;
 800328e:	2303      	movs	r3, #3
 8003290:	e008      	b.n	80032a4 <st25r3911CalibrateCapacitiveSensor+0x52>
    }
    
    if( result != NULL )
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d004      	beq.n	80032a2 <st25r3911CalibrateCapacitiveSensor+0x50>
    {
        (*result) = (uint8_t)(res >> ST25R3911_REG_CAP_SENSOR_CONTROL_shift_cs_mcal);
 8003298:	7b7b      	ldrb	r3, [r7, #13]
 800329a:	08db      	lsrs	r3, r3, #3
 800329c:	b2da      	uxtb	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <st25r3911SetBitrate>:


ReturnCode st25r3911SetBitrate(uint8_t txRate, uint8_t rxRate)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	460a      	mov	r2, r1
 80032b6:	71fb      	strb	r3, [r7, #7]
 80032b8:	4613      	mov	r3, r2
 80032ba:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3911ReadRegister(ST25R3911_REG_BIT_RATE, &reg);
 80032bc:	f107 030f 	add.w	r3, r7, #15
 80032c0:	4619      	mov	r1, r3
 80032c2:	2004      	movs	r0, #4
 80032c4:	f000 faaa 	bl	800381c <st25r3911ReadRegister>
    if (rxRate != ST25R3911_BR_DO_NOT_SET)
 80032c8:	79bb      	ldrb	r3, [r7, #6]
 80032ca:	2bff      	cmp	r3, #255	; 0xff
 80032cc:	d00e      	beq.n	80032ec <st25r3911SetBitrate+0x40>
    {
        if(rxRate > ST25R3911_BR_3390)
 80032ce:	79bb      	ldrb	r3, [r7, #6]
 80032d0:	2b05      	cmp	r3, #5
 80032d2:	d901      	bls.n	80032d8 <st25r3911SetBitrate+0x2c>
        {
            return ERR_PARAM;
 80032d4:	2307      	movs	r3, #7
 80032d6:	e025      	b.n	8003324 <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_rxrate);     /* MISRA 10.3 */
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	f023 030f 	bic.w	r3, r3, #15
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	73fb      	strb	r3, [r7, #15]
            reg |= rxRate << ST25R3911_REG_BIT_RATE_shift_rxrate;
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	79bb      	ldrb	r3, [r7, #6]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (txRate != ST25R3911_BR_DO_NOT_SET)
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	2bff      	cmp	r3, #255	; 0xff
 80032f0:	d012      	beq.n	8003318 <st25r3911SetBitrate+0x6c>
    {
        if(txRate > ST25R3911_BR_6780)
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	2b06      	cmp	r3, #6
 80032f6:	d901      	bls.n	80032fc <st25r3911SetBitrate+0x50>
        {
            return ERR_PARAM;
 80032f8:	2307      	movs	r3, #7
 80032fa:	e013      	b.n	8003324 <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_txrate);     /* MISRA 10.3 */
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	b2db      	uxtb	r3, r3
 8003304:	73fb      	strb	r3, [r7, #15]
            reg |= txRate<<ST25R3911_REG_BIT_RATE_shift_txrate;
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	b25a      	sxtb	r2, r3
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	b25b      	sxtb	r3, r3
 8003310:	4313      	orrs	r3, r2
 8003312:	b25b      	sxtb	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	73fb      	strb	r3, [r7, #15]
        }
    }
    st25r3911WriteRegister(ST25R3911_REG_BIT_RATE, reg);
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	4619      	mov	r1, r3
 800331c:	2004      	movs	r0, #4
 800331e:	f000 fba5 	bl	8003a6c <st25r3911WriteRegister>
    
    return ERR_NONE;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <st25r3911MeasurePowerSupply>:

uint8_t st25r3911MeasurePowerSupply( uint8_t mpsv )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3911ChangeRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_mask_mpsv, mpsv );
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	461a      	mov	r2, r3
 800333a:	2106      	movs	r1, #6
 800333c:	202a      	movs	r0, #42	; 0x2a
 800333e:	f000 fc20 	bl	8003b82 <st25r3911ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_MEASURE_VDD, ST25R3911_REG_AD_RESULT, 10, &result);
 8003342:	f107 030f 	add.w	r3, r7, #15
 8003346:	220a      	movs	r2, #10
 8003348:	2120      	movs	r1, #32
 800334a:	20df      	movs	r0, #223	; 0xdf
 800334c:	f000 f9dc 	bl	8003708 <st25r3911ExecuteCommandAndGetResult>

    return result;
 8003350:	7bfb      	ldrb	r3, [r7, #15]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <st25r3911MeasureVoltage>:

uint16_t st25r3911MeasureVoltage(uint8_t mpsv)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
    uint16_t mV;

    result = st25r3911MeasurePowerSupply( mpsv );
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ffdf 	bl	800332c <st25r3911MeasurePowerSupply>
 800336e:	4603      	mov	r3, r0
 8003370:	73fb      	strb	r3, [r7, #15]

    mV = ((uint16_t)result) * 23U;
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	b29b      	uxth	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	0052      	lsls	r2, r2, #1
 800337a:	441a      	add	r2, r3
 800337c:	00d2      	lsls	r2, r2, #3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	81bb      	strh	r3, [r7, #12]
    mV += ((((uint16_t)result) * 438U) + 500U) / 1000U;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8003388:	fb02 f303 	mul.w	r3, r2, r3
 800338c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003390:	4a06      	ldr	r2, [pc, #24]	; (80033ac <st25r3911MeasureVoltage+0x50>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	099b      	lsrs	r3, r3, #6
 8003398:	b29a      	uxth	r2, r3
 800339a:	89bb      	ldrh	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	81bb      	strh	r3, [r7, #12]

    return mV;
 80033a0:	89bb      	ldrh	r3, [r7, #12]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	10624dd3 	.word	0x10624dd3

080033b0 <st25r3911StartGPTimer_8fcs>:
{
    return st25r3911NoResponseTime_64fcs;
}

void st25r3911StartGPTimer_8fcs(uint16_t gpt_8fcs, uint8_t trigger_source)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	460a      	mov	r2, r1
 80033ba:	80fb      	strh	r3, [r7, #6]
 80033bc:	4613      	mov	r3, r2
 80033be:	717b      	strb	r3, [r7, #5]
    st25r3911SetGPTime_8fcs(gpt_8fcs);
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f811 	bl	80033ea <st25r3911SetGPTime_8fcs>

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, 
 80033c8:	797b      	ldrb	r3, [r7, #5]
 80033ca:	461a      	mov	r2, r3
 80033cc:	21e0      	movs	r1, #224	; 0xe0
 80033ce:	2011      	movs	r0, #17
 80033d0:	f000 fbed 	bl	8003bae <st25r3911ModifyRegister>
            ST25R3911_REG_GPT_CONTROL_gptc_mask, 
            trigger_source);
    if (trigger_source == 0U)
 80033d4:	797b      	ldrb	r3, [r7, #5]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d103      	bne.n	80033e2 <st25r3911StartGPTimer_8fcs+0x32>
    {
        st25r3911ExecuteCommand(ST25R3911_CMD_START_GP_TIMER);
 80033da:	20e0      	movs	r0, #224	; 0xe0
 80033dc:	f000 fcca 	bl	8003d74 <st25r3911ExecuteCommand>
    }

    return;
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
}
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <st25r3911SetGPTime_8fcs>:

void st25r3911SetGPTime_8fcs(uint16_t gpt_8fcs)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	4603      	mov	r3, r0
 80033f2:	80fb      	strh	r3, [r7, #6]
    st25r3911WriteRegister(ST25R3911_REG_GPT1, (uint8_t)(gpt_8fcs >> 8));
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	0a1b      	lsrs	r3, r3, #8
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	4619      	mov	r1, r3
 80033fe:	2012      	movs	r0, #18
 8003400:	f000 fb34 	bl	8003a6c <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_GPT2, (uint8_t)(gpt_8fcs & 0xffU));
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	4619      	mov	r1, r3
 800340a:	2013      	movs	r0, #19
 800340c:	f000 fb2e 	bl	8003a6c <st25r3911WriteRegister>

    return;
 8003410:	bf00      	nop
}
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <st25r3911CheckReg>:

bool st25r3911CheckReg( uint8_t reg, uint8_t mask, uint8_t value )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
 8003422:	460b      	mov	r3, r1
 8003424:	71bb      	strb	r3, [r7, #6]
 8003426:	4613      	mov	r3, r2
 8003428:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;
    
    regVal = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( reg, &regVal );
 800342e:	f107 020f 	add.w	r2, r7, #15
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f9f0 	bl	800381c <st25r3911ReadRegister>
    
    return ((regVal & mask) == value );
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	79bb      	ldrb	r3, [r7, #6]
 8003440:	4013      	ands	r3, r2
 8003442:	b2db      	uxtb	r3, r3
 8003444:	797a      	ldrb	r2, [r7, #5]
 8003446:	429a      	cmp	r2, r3
 8003448:	bf0c      	ite	eq
 800344a:	2301      	moveq	r3, #1
 800344c:	2300      	movne	r3, #0
 800344e:	b2db      	uxtb	r3, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <st25r3911CheckChipID>:


bool st25r3911CheckChipID( uint8_t *rev )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
    uint8_t ID;
    
    ID = 0;    
 8003460:	2300      	movs	r3, #0
 8003462:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( ST25R3911_REG_IC_IDENTITY, &ID );
 8003464:	f107 030f 	add.w	r3, r7, #15
 8003468:	4619      	mov	r1, r3
 800346a:	203f      	movs	r0, #63	; 0x3f
 800346c:	f000 f9d6 	bl	800381c <st25r3911ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3911's IC type code */
    if( (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_type) != ST25R3911_REG_IC_IDENTITY_ic_type )
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8003476:	2b08      	cmp	r3, #8
 8003478:	d001      	beq.n	800347e <st25r3911CheckChipID+0x26>
    {
        return false;
 800347a:	2300      	movs	r3, #0
 800347c:	e009      	b.n	8003492 <st25r3911CheckChipID+0x3a>
    }
        
    if(rev != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <st25r3911CheckChipID+0x38>
    {
        *rev = (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_rev);
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	b2da      	uxtb	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	701a      	strb	r2, [r3, #0]
    }
    
    return true;
 8003490:	2301      	movs	r3, #1
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <st25r3911SetNoResponseTime_64fcs>:

ReturnCode st25r3911SetNoResponseTime_64fcs(uint32_t nrt_64fcs)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
    ReturnCode err = ERR_NONE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	81fb      	strh	r3, [r7, #14]
    uint8_t nrt_step = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	737b      	strb	r3, [r7, #13]
    uint32_t noResponseTime_64fcs = nrt_64fcs;      /* MISRA 17.8: Use intermediate variable */
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	60bb      	str	r3, [r7, #8]

    st25r3911NoResponseTime_64fcs = noResponseTime_64fcs;
 80034b0:	4a18      	ldr	r2, [pc, #96]	; (8003514 <st25r3911SetNoResponseTime_64fcs+0x78>)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	6013      	str	r3, [r2, #0]
    if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034bc:	d312      	bcc.n	80034e4 <st25r3911SetNoResponseTime_64fcs+0x48>
    {
        nrt_step = ST25R3911_REG_GPT_CONTROL_nrt_step;
 80034be:	2301      	movs	r3, #1
 80034c0:	737b      	strb	r3, [r7, #13]
        noResponseTime_64fcs = (noResponseTime_64fcs + 63U) / 64U;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	333f      	adds	r3, #63	; 0x3f
 80034c6:	099b      	lsrs	r3, r3, #6
 80034c8:	60bb      	str	r3, [r7, #8]
        if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d0:	d304      	bcc.n	80034dc <st25r3911SetNoResponseTime_64fcs+0x40>
        {
            noResponseTime_64fcs = 0xFFFFU;
 80034d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034d6:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;
 80034d8:	2307      	movs	r3, #7
 80034da:	81fb      	strh	r3, [r7, #14]
        }
        st25r3911NoResponseTime_64fcs = 64U * noResponseTime_64fcs;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	019b      	lsls	r3, r3, #6
 80034e0:	4a0c      	ldr	r2, [pc, #48]	; (8003514 <st25r3911SetNoResponseTime_64fcs+0x78>)
 80034e2:	6013      	str	r3, [r2, #0]
    }

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_step, nrt_step);
 80034e4:	7b7b      	ldrb	r3, [r7, #13]
 80034e6:	461a      	mov	r2, r3
 80034e8:	2101      	movs	r1, #1
 80034ea:	2011      	movs	r0, #17
 80034ec:	f000 fb5f 	bl	8003bae <st25r3911ModifyRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER1, (uint8_t)(noResponseTime_64fcs >> 8));
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	4619      	mov	r1, r3
 80034f8:	200f      	movs	r0, #15
 80034fa:	f000 fab7 	bl	8003a6c <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER2, (uint8_t)(noResponseTime_64fcs & 0xffU));
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	4619      	mov	r1, r3
 8003504:	2010      	movs	r0, #16
 8003506:	f000 fab1 	bl	8003a6c <st25r3911WriteRegister>

    return err;
 800350a:	89fb      	ldrh	r3, [r7, #14]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20002de4 	.word	0x20002de4

08003518 <st25r3911PerformCollisionAvoidance>:
    
    return err;
}

ReturnCode st25r3911PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	4604      	mov	r4, r0
 8003520:	4608      	mov	r0, r1
 8003522:	4611      	mov	r1, r2
 8003524:	461a      	mov	r2, r3
 8003526:	4623      	mov	r3, r4
 8003528:	71fb      	strb	r3, [r7, #7]
 800352a:	4603      	mov	r3, r0
 800352c:	71bb      	strb	r3, [r7, #6]
 800352e:	460b      	mov	r3, r1
 8003530:	717b      	strb	r3, [r7, #5]
 8003532:	4613      	mov	r3, r2
 8003534:	713b      	strb	r3, [r7, #4]
    uint8_t  treMask;
    uint32_t irqs;
    
    if( (FieldONCmd != ST25R3911_CMD_INITIAL_RF_COLLISION)    && 
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	2bc8      	cmp	r3, #200	; 0xc8
 800353a:	d007      	beq.n	800354c <st25r3911PerformCollisionAvoidance+0x34>
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	2bca      	cmp	r3, #202	; 0xca
 8003540:	d004      	beq.n	800354c <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_0) && 
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	2bc9      	cmp	r3, #201	; 0xc9
 8003546:	d001      	beq.n	800354c <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_N)   )
    {
        return ERR_PARAM;
 8003548:	2307      	movs	r3, #7
 800354a:	e056      	b.n	80035fa <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) )
 800354c:	79bb      	ldrb	r3, [r7, #6]
 800354e:	2bff      	cmp	r3, #255	; 0xff
 8003550:	d102      	bne.n	8003558 <st25r3911PerformCollisionAvoidance+0x40>
 8003552:	797b      	ldrb	r3, [r7, #5]
 8003554:	2bff      	cmp	r3, #255	; 0xff
 8003556:	d01e      	beq.n	8003596 <st25r3911PerformCollisionAvoidance+0x7e>
    {
        treMask = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	73fb      	strb	r3, [r7, #15]
        
        if(pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 800355c:	79bb      	ldrb	r3, [r7, #6]
 800355e:	2bff      	cmp	r3, #255	; 0xff
 8003560:	d003      	beq.n	800356a <st25r3911PerformCollisionAvoidance+0x52>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_trg;
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003568:	73fb      	strb	r3, [r7, #15]
        }
        
        if(caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 800356a:	797b      	ldrb	r3, [r7, #5]
 800356c:	2bff      	cmp	r3, #255	; 0xff
 800356e:	d003      	beq.n	8003578 <st25r3911PerformCollisionAvoidance+0x60>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_rfe;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	f043 030f 	orr.w	r3, r3, #15
 8003576:	73fb      	strb	r3, [r7, #15]
        }
            
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3911ChangeRegisterBits( ST25R3911_REG_FIELD_THRESHOLD, treMask, (pdThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_trg) | (caThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_rfe ) );
 8003578:	79bb      	ldrb	r3, [r7, #6]
 800357a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800357e:	b2da      	uxtb	r2, r3
 8003580:	797b      	ldrb	r3, [r7, #5]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	b2db      	uxtb	r3, r3
 8003588:	4313      	orrs	r3, r2
 800358a:	b2da      	uxtb	r2, r3
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	4619      	mov	r1, r3
 8003590:	2029      	movs	r0, #41	; 0x29
 8003592:	f000 faf6 	bl	8003b82 <st25r3911ChangeRegisterBits>
    }
    
    /* Set n x TRFW */
    st25r3911ModifyRegister(ST25R3911_REG_AUX, ST25R3911_REG_AUX_mask_nfc_n, (nTRFW & ST25R3911_REG_AUX_mask_nfc_n) );
 8003596:	793b      	ldrb	r3, [r7, #4]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	2103      	movs	r1, #3
 80035a2:	2009      	movs	r0, #9
 80035a4:	f000 fb03 	bl	8003bae <st25r3911ModifyRegister>
    
    /* Enable and clear CA specific interrupts and execute command */
    st25r3911EnableInterrupts( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 80035a8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80035ac:	f000 fe00 	bl	80041b0 <st25r3911EnableInterrupts>
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 80035b0:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80035b4:	f000 fdc4 	bl	8004140 <st25r3911GetInterrupt>
    
    st25r3911ExecuteCommand(FieldONCmd);
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fbda 	bl	8003d74 <st25r3911ExecuteCommand>
    
    irqs = st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT, ST25R3911_CA_TIMEOUT );
 80035c0:	210a      	movs	r1, #10
 80035c2:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80035c6:	f000 fd6b 	bl	80040a0 <st25r3911WaitForInterruptsTimed>
 80035ca:	60b8      	str	r0, [r7, #8]
    
    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_EON) );
 80035cc:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80035d0:	f000 fdb6 	bl	8004140 <st25r3911GetInterrupt>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT);
 80035d4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80035d8:	f000 fdf6 	bl	80041c8 <st25r3911DisableInterrupts>
    
    
    if((ST25R3911_IRQ_MASK_CAC & irqs) != 0U)                             /* Collision occurred */
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <st25r3911PerformCollisionAvoidance+0xd2>
    {
        return ERR_RF_COLLISION;
 80035e6:	231d      	movs	r3, #29
 80035e8:	e007      	b.n	80035fa <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    if((ST25R3911_IRQ_MASK_CAT & irqs) != 0U)                             /* No Collision detected, Field On */
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <st25r3911PerformCollisionAvoidance+0xe0>
    {
        return ERR_NONE;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e000      	b.n	80035fa <st25r3911PerformCollisionAvoidance+0xe2>
    }

    /* No interrupt detected */
    return ERR_INTERNAL;
 80035f8:	230c      	movs	r3, #12
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd90      	pop	{r4, r7, pc}

08003602 <st25r3911SetNumTxBits>:
    return ERR_NONE;
}


void st25r3911SetNumTxBits( uint32_t nBits )
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xffU)); 
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	4619      	mov	r1, r3
 8003610:	201e      	movs	r0, #30
 8003612:	f000 fa2b 	bl	8003a6c <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xffU));    
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	0a1b      	lsrs	r3, r3, #8
 800361a:	b2db      	uxtb	r3, r3
 800361c:	4619      	mov	r1, r3
 800361e:	201d      	movs	r0, #29
 8003620:	f000 fa24 	bl	8003a6c <st25r3911WriteRegister>
}
 8003624:	bf00      	nop
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <st25r3911StreamConfigure>:
    }
    return true;
}

ReturnCode st25r3911StreamConfigure(const struct st25r3911StreamConfig *config)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
    uint8_t smd = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	73fb      	strb	r3, [r7, #15]
    uint8_t mode;

    if (config->useBPSK != 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d016      	beq.n	800366e <st25r3911StreamConfigure+0x42>
    {
        mode = ST25R3911_REG_MODE_om_bpsk_stream;
 8003640:	2378      	movs	r3, #120	; 0x78
 8003642:	73bb      	strb	r3, [r7, #14]
        if ((config->din<2U) || (config->din>4U)) /* not in fc/4 .. fc/16 */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	785b      	ldrb	r3, [r3, #1]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d903      	bls.n	8003654 <st25r3911StreamConfigure+0x28>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	785b      	ldrb	r3, [r3, #1]
 8003650:	2b04      	cmp	r3, #4
 8003652:	d901      	bls.n	8003658 <st25r3911StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 8003654:	2307      	movs	r3, #7
 8003656:	e053      	b.n	8003700 <st25r3911StreamConfigure+0xd4>
        }
        smd |= (4U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	785b      	ldrb	r3, [r3, #1]
 800365c:	f1c3 0304 	rsb	r3, r3, #4
 8003660:	b2db      	uxtb	r3, r3
 8003662:	015b      	lsls	r3, r3, #5
 8003664:	b2da      	uxtb	r2, r3
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	4313      	orrs	r3, r2
 800366a:	73fb      	strb	r3, [r7, #15]
 800366c:	e01b      	b.n	80036a6 <st25r3911StreamConfigure+0x7a>

    }
    else
    {
        mode = ST25R3911_REG_MODE_om_subcarrier_stream;
 800366e:	2370      	movs	r3, #112	; 0x70
 8003670:	73bb      	strb	r3, [r7, #14]
        if ((config->din<3U) || (config->din>6U)) /* not in fc/8 .. fc/64 */
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	785b      	ldrb	r3, [r3, #1]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d903      	bls.n	8003682 <st25r3911StreamConfigure+0x56>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	785b      	ldrb	r3, [r3, #1]
 800367e:	2b06      	cmp	r3, #6
 8003680:	d901      	bls.n	8003686 <st25r3911StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 8003682:	2307      	movs	r3, #7
 8003684:	e03c      	b.n	8003700 <st25r3911StreamConfigure+0xd4>
        }
        smd |= (6U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	785b      	ldrb	r3, [r3, #1]
 800368a:	f1c3 0306 	rsb	r3, r3, #6
 800368e:	b2db      	uxtb	r3, r3
 8003690:	015b      	lsls	r3, r3, #5
 8003692:	b2da      	uxtb	r2, r3
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	4313      	orrs	r3, r2
 8003698:	73fb      	strb	r3, [r7, #15]
        if (config->report_period_length == 0U) 
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	78db      	ldrb	r3, [r3, #3]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <st25r3911StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 80036a2:	2307      	movs	r3, #7
 80036a4:	e02c      	b.n	8003700 <st25r3911StreamConfigure+0xd4>
        }
    }

    if ((config->dout<1U) || (config->dout>7U)) /* not in fc/2 .. fc/128 */
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	789b      	ldrb	r3, [r3, #2]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <st25r3911StreamConfigure+0x8a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	789b      	ldrb	r3, [r3, #2]
 80036b2:	2b07      	cmp	r3, #7
 80036b4:	d901      	bls.n	80036ba <st25r3911StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 80036b6:	2307      	movs	r3, #7
 80036b8:	e022      	b.n	8003700 <st25r3911StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3911_REG_STREAM_MODE_shift_stx;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	789b      	ldrb	r3, [r3, #2]
 80036be:	f1c3 0307 	rsb	r3, r3, #7
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	73fb      	strb	r3, [r7, #15]

    if (config->report_period_length > 3U) 
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	78db      	ldrb	r3, [r3, #3]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d901      	bls.n	80036d6 <st25r3911StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 80036d2:	2307      	movs	r3, #7
 80036d4:	e014      	b.n	8003700 <st25r3911StreamConfigure+0xd4>
    }
    smd |= config->report_period_length << ST25R3911_REG_STREAM_MODE_shift_scp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	78db      	ldrb	r3, [r3, #3]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	b25a      	sxtb	r2, r3
 80036de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	b25b      	sxtb	r3, r3
 80036e6:	73fb      	strb	r3, [r7, #15]

    st25r3911WriteRegister(ST25R3911_REG_STREAM_MODE, smd);
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	4619      	mov	r1, r3
 80036ec:	2008      	movs	r0, #8
 80036ee:	f000 f9bd 	bl	8003a6c <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, ST25R3911_REG_MODE_mask_om, mode);
 80036f2:	7bbb      	ldrb	r3, [r7, #14]
 80036f4:	461a      	mov	r2, r3
 80036f6:	2178      	movs	r1, #120	; 0x78
 80036f8:	2003      	movs	r0, #3
 80036fa:	f000 fa42 	bl	8003b82 <st25r3911ChangeRegisterBits>

    return ERR_NONE;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <st25r3911ExecuteCommandAndGetResult>:
 *  \param[out] result: 8 bit long result
 *
 *****************************************************************************
 */
static ReturnCode st25r3911ExecuteCommandAndGetResult(uint8_t cmd, uint8_t resreg, uint8_t sleeptime, uint8_t* result)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	4603      	mov	r3, r0
 8003712:	71fb      	strb	r3, [r7, #7]
 8003714:	460b      	mov	r3, r1
 8003716:	71bb      	strb	r3, [r7, #6]
 8003718:	4613      	mov	r3, r2
 800371a:	717b      	strb	r3, [r7, #5]

    st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_DCT);
 800371c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003720:	f000 fd46 	bl	80041b0 <st25r3911EnableInterrupts>
    st25r3911GetInterrupt(ST25R3911_IRQ_MASK_DCT);
 8003724:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003728:	f000 fd0a 	bl	8004140 <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(cmd);
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fb20 	bl	8003d74 <st25r3911ExecuteCommand>
    st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_DCT, sleeptime);
 8003734:	797b      	ldrb	r3, [r7, #5]
 8003736:	b29b      	uxth	r3, r3
 8003738:	4619      	mov	r1, r3
 800373a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800373e:	f000 fcaf 	bl	80040a0 <st25r3911WaitForInterruptsTimed>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8003742:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003746:	f000 fd3f 	bl	80041c8 <st25r3911DisableInterrupts>
    
    /* read out the result if the pointer is not NULL */
    if (result != NULL)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d004      	beq.n	800375a <st25r3911ExecuteCommandAndGetResult+0x52>
    {
        st25r3911ReadRegister(resreg, result);
 8003750:	79bb      	ldrb	r3, [r7, #6]
 8003752:	6839      	ldr	r1, [r7, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f861 	bl	800381c <st25r3911ReadRegister>
    }

    return ERR_NONE;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	2b00      	cmp	r3, #0
 8003774:	db0b      	blt.n	800378e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	f003 021f 	and.w	r2, r3, #31
 800377c:	4906      	ldr	r1, [pc, #24]	; (8003798 <__NVIC_EnableIRQ+0x34>)
 800377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	2001      	movs	r0, #1
 8003786:	fa00 f202 	lsl.w	r2, r0, r2
 800378a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr
 8003798:	e000e100 	.word	0xe000e100

0800379c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	db10      	blt.n	80037d0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	f003 021f 	and.w	r2, r3, #31
 80037b4:	4909      	ldr	r1, [pc, #36]	; (80037dc <__NVIC_DisableIRQ+0x40>)
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	2001      	movs	r0, #1
 80037be:	fa00 f202 	lsl.w	r2, r0, r2
 80037c2:	3320      	adds	r3, #32
 80037c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80037cc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	e000e100 	.word	0xe000e100

080037e0 <st25r3911CheckFieldSetLED>:
* LOCAL FUNCTION PROTOTYPES
******************************************************************************
*/

static inline void st25r3911CheckFieldSetLED(uint8_t value)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	71fb      	strb	r3, [r7, #7]
    if ((ST25R3911_REG_OP_CONTROL_tx_en & value) != 0U)
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d006      	beq.n	8003804 <st25r3911CheckFieldSetLED+0x24>
    {
#ifdef PLATFORM_LED_FIELD_PIN
        platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 80037f6:	2201      	movs	r2, #1
 80037f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037fc:	4806      	ldr	r0, [pc, #24]	; (8003818 <st25r3911CheckFieldSetLED+0x38>)
 80037fe:	f001 f888 	bl	8004912 <HAL_GPIO_WritePin>
    else
    {
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
#endif /* PLATFORM_LED_FIELD_PIN */
    }
}
 8003802:	e005      	b.n	8003810 <st25r3911CheckFieldSetLED+0x30>
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8003804:	2200      	movs	r2, #0
 8003806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800380a:	4803      	ldr	r0, [pc, #12]	; (8003818 <st25r3911CheckFieldSetLED+0x38>)
 800380c:	f001 f881 	bl	8004912 <HAL_GPIO_WritePin>
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40020000 	.word	0x40020000

0800381c <st25r3911ReadRegister>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911ReadRegister(uint8_t reg, uint8_t* value)
{ 
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	6039      	str	r1, [r7, #0]
 8003826:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    platformProtectST25R391xComm();
 8003828:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <st25r3911ReadRegister+0x8c>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	b2da      	uxtb	r2, r3
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <st25r3911ReadRegister+0x8c>)
 8003832:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	2006      	movs	r0, #6
 800383a:	f7ff ffaf 	bl	800379c <__NVIC_DisableIRQ>
 800383e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003842:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8003846:	2200      	movs	r2, #0
 8003848:	2140      	movs	r1, #64	; 0x40
 800384a:	4818      	ldr	r0, [pc, #96]	; (80038ac <st25r3911ReadRegister+0x90>)
 800384c:	f001 f861 	bl	8004912 <HAL_GPIO_WritePin>
  
    buf[0] = (reg | ST25R3911_READ_MODE);
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003856:	b2db      	uxtb	r3, r3
 8003858:	733b      	strb	r3, [r7, #12]
    buf[1] = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	737b      	strb	r3, [r7, #13]
  
    platformSpiTxRx(buf, buf, 2);
 800385e:	f107 010c 	add.w	r1, r7, #12
 8003862:	f107 030c 	add.w	r3, r7, #12
 8003866:	2202      	movs	r2, #2
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fa4b 	bl	8002d04 <spiTxRx>
  
    if(value != NULL)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <st25r3911ReadRegister+0x5e>
    {
      *value = buf[1];
 8003874:	7b7a      	ldrb	r2, [r7, #13]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 800387a:	2201      	movs	r2, #1
 800387c:	2140      	movs	r1, #64	; 0x40
 800387e:	480b      	ldr	r0, [pc, #44]	; (80038ac <st25r3911ReadRegister+0x90>)
 8003880:	f001 f847 	bl	8004912 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <st25r3911ReadRegister+0x8c>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	3b01      	subs	r3, #1
 800388a:	b2da      	uxtb	r2, r3
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <st25r3911ReadRegister+0x8c>)
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <st25r3911ReadRegister+0x8c>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d103      	bne.n	80038a0 <st25r3911ReadRegister+0x84>
 8003898:	2006      	movs	r0, #6
 800389a:	f7ff ff63 	bl	8003764 <__NVIC_EnableIRQ>

    return;
 800389e:	bf00      	nop
 80038a0:	bf00      	nop
}
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000198 	.word	0x20000198
 80038ac:	40020400 	.word	0x40020400

080038b0 <st25r3911ReadMultipleRegisters>:


void st25r3911ReadMultipleRegisters(uint8_t reg, uint8_t* values, uint8_t length)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	6039      	str	r1, [r7, #0]
 80038ba:	71fb      	strb	r3, [r7, #7]
 80038bc:	4613      	mov	r3, r2
 80038be:	71bb      	strb	r3, [r7, #6]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = (reg | ST25R3911_READ_MODE);
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
  
    if (length > 0U)
 80038ca:	79bb      	ldrb	r3, [r7, #6]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d034      	beq.n	800393a <st25r3911ReadMultipleRegisters+0x8a>
    {
        platformProtectST25R391xComm();
 80038d0:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <st25r3911ReadMultipleRegisters+0x94>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	3301      	adds	r3, #1
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <st25r3911ReadMultipleRegisters+0x94>)
 80038da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	2006      	movs	r0, #6
 80038e2:	f7ff ff5b 	bl	800379c <__NVIC_DisableIRQ>
 80038e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80038ea:	f3bf 8f6f 	isb	sy
        platformSpiSelect();
 80038ee:	2200      	movs	r2, #0
 80038f0:	2140      	movs	r1, #64	; 0x40
 80038f2:	4815      	ldr	r0, [pc, #84]	; (8003948 <st25r3911ReadMultipleRegisters+0x98>)
 80038f4:	f001 f80d 	bl	8004912 <HAL_GPIO_WritePin>
        ST_MEMCPY( values, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) );  /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /* ST25R391X_COM_SINGLETXRX */
  
        /* Since the result comes one byte later, let's first transmit the adddress with discarding the result */
        platformSpiTxRx(&cmd, NULL, ST25R3911_CMD_LEN);
 80038f8:	f107 030f 	add.w	r3, r7, #15
 80038fc:	2201      	movs	r2, #1
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff f9ff 	bl	8002d04 <spiTxRx>
        platformSpiTxRx(NULL, values, length);  
 8003906:	79bb      	ldrb	r3, [r7, #6]
 8003908:	b29b      	uxth	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	6839      	ldr	r1, [r7, #0]
 800390e:	2000      	movs	r0, #0
 8003910:	f7ff f9f8 	bl	8002d04 <spiTxRx>
  
#endif  /* ST25R391X_COM_SINGLETXRX */

        platformSpiDeselect();
 8003914:	2201      	movs	r2, #1
 8003916:	2140      	movs	r1, #64	; 0x40
 8003918:	480b      	ldr	r0, [pc, #44]	; (8003948 <st25r3911ReadMultipleRegisters+0x98>)
 800391a:	f000 fffa 	bl	8004912 <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <st25r3911ReadMultipleRegisters+0x94>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	3b01      	subs	r3, #1
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4b07      	ldr	r3, [pc, #28]	; (8003944 <st25r3911ReadMultipleRegisters+0x94>)
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <st25r3911ReadMultipleRegisters+0x94>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d103      	bne.n	800393a <st25r3911ReadMultipleRegisters+0x8a>
 8003932:	2006      	movs	r0, #6
 8003934:	f7ff ff16 	bl	8003764 <__NVIC_EnableIRQ>
    }
    
    return;
 8003938:	bf00      	nop
 800393a:	bf00      	nop
}
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000198 	.word	0x20000198
 8003948:	40020400 	.word	0x40020400

0800394c <st25r3911ReadTestRegister>:

void st25r3911ReadTestRegister(uint8_t reg, uint8_t* value)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	6039      	str	r1, [r7, #0]
 8003956:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */

    platformProtectST25R391xComm();
 8003958:	4b20      	ldr	r3, [pc, #128]	; (80039dc <st25r3911ReadTestRegister+0x90>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	3301      	adds	r3, #1
 800395e:	b2da      	uxtb	r2, r3
 8003960:	4b1e      	ldr	r3, [pc, #120]	; (80039dc <st25r3911ReadTestRegister+0x90>)
 8003962:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	2006      	movs	r0, #6
 800396a:	f7ff ff17 	bl	800379c <__NVIC_DisableIRQ>
 800396e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003972:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8003976:	2200      	movs	r2, #0
 8003978:	2140      	movs	r1, #64	; 0x40
 800397a:	4819      	ldr	r0, [pc, #100]	; (80039e0 <st25r3911ReadTestRegister+0x94>)
 800397c:	f000 ffc9 	bl	8004912 <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8003980:	23fc      	movs	r3, #252	; 0xfc
 8003982:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_READ_MODE);
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800398a:	b2db      	uxtb	r3, r3
 800398c:	737b      	strb	r3, [r7, #13]
    buf[2] = 0x00;
 800398e:	2300      	movs	r3, #0
 8003990:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, buf, 3);
 8003992:	f107 010c 	add.w	r1, r7, #12
 8003996:	f107 030c 	add.w	r3, r7, #12
 800399a:	2203      	movs	r2, #3
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff f9b1 	bl	8002d04 <spiTxRx>
    
    if(value != NULL)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <st25r3911ReadTestRegister+0x62>
    {
      *value = buf[2];
 80039a8:	7bba      	ldrb	r2, [r7, #14]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 80039ae:	2201      	movs	r2, #1
 80039b0:	2140      	movs	r1, #64	; 0x40
 80039b2:	480b      	ldr	r0, [pc, #44]	; (80039e0 <st25r3911ReadTestRegister+0x94>)
 80039b4:	f000 ffad 	bl	8004912 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <st25r3911ReadTestRegister+0x90>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	3b01      	subs	r3, #1
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <st25r3911ReadTestRegister+0x90>)
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <st25r3911ReadTestRegister+0x90>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <st25r3911ReadTestRegister+0x88>
 80039cc:	2006      	movs	r0, #6
 80039ce:	f7ff fec9 	bl	8003764 <__NVIC_EnableIRQ>

    return;
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
}
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000198 	.word	0x20000198
 80039e0:	40020400 	.word	0x40020400

080039e4 <st25r3911WriteTestRegister>:

void st25r3911WriteTestRegister(uint8_t reg, uint8_t value)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	460a      	mov	r2, r1
 80039ee:	71fb      	strb	r3, [r7, #7]
 80039f0:	4613      	mov	r3, r2
 80039f2:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */
    
    platformProtectST25R391xComm();
 80039f4:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <st25r3911WriteTestRegister+0x80>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	3301      	adds	r3, #1
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <st25r3911WriteTestRegister+0x80>)
 80039fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	2006      	movs	r0, #6
 8003a06:	f7ff fec9 	bl	800379c <__NVIC_DisableIRQ>
 8003a0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a0e:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8003a12:	2200      	movs	r2, #0
 8003a14:	2140      	movs	r1, #64	; 0x40
 8003a16:	4814      	ldr	r0, [pc, #80]	; (8003a68 <st25r3911WriteTestRegister+0x84>)
 8003a18:	f000 ff7b 	bl	8004912 <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8003a1c:	23fc      	movs	r3, #252	; 0xfc
 8003a1e:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_WRITE_MODE);
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	737b      	strb	r3, [r7, #13]
    buf[2] = value;
 8003a24:	79bb      	ldrb	r3, [r7, #6]
 8003a26:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, NULL, 3);
 8003a28:	f107 030c 	add.w	r3, r7, #12
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff f967 	bl	8002d04 <spiTxRx>
  
    platformSpiDeselect();
 8003a36:	2201      	movs	r2, #1
 8003a38:	2140      	movs	r1, #64	; 0x40
 8003a3a:	480b      	ldr	r0, [pc, #44]	; (8003a68 <st25r3911WriteTestRegister+0x84>)
 8003a3c:	f000 ff69 	bl	8004912 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003a40:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <st25r3911WriteTestRegister+0x80>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <st25r3911WriteTestRegister+0x80>)
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <st25r3911WriteTestRegister+0x80>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d103      	bne.n	8003a5c <st25r3911WriteTestRegister+0x78>
 8003a54:	2006      	movs	r0, #6
 8003a56:	f7ff fe85 	bl	8003764 <__NVIC_EnableIRQ>

    return;
 8003a5a:	bf00      	nop
 8003a5c:	bf00      	nop
}
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20000198 	.word	0x20000198
 8003a68:	40020400 	.word	0x40020400

08003a6c <st25r3911WriteRegister>:

void st25r3911WriteRegister(uint8_t reg, uint8_t value)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	460a      	mov	r2, r1
 8003a76:	71fb      	strb	r3, [r7, #7]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    if (ST25R3911_REG_OP_CONTROL == reg)
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d103      	bne.n	8003a8a <st25r3911WriteRegister+0x1e>
    {
        st25r3911CheckFieldSetLED(value);
 8003a82:	79bb      	ldrb	r3, [r7, #6]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff feab 	bl	80037e0 <st25r3911CheckFieldSetLED>
    }    
    
    platformProtectST25R391xComm();
 8003a8a:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <st25r3911WriteRegister+0x8c>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <st25r3911WriteRegister+0x8c>)
 8003a94:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	2006      	movs	r0, #6
 8003a9c:	f7ff fe7e 	bl	800379c <__NVIC_DisableIRQ>
 8003aa0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003aa4:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2140      	movs	r1, #64	; 0x40
 8003aac:	4813      	ldr	r0, [pc, #76]	; (8003afc <st25r3911WriteRegister+0x90>)
 8003aae:	f000 ff30 	bl	8004912 <HAL_GPIO_WritePin>

    buf[0] = reg | ST25R3911_WRITE_MODE;
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	733b      	strb	r3, [r7, #12]
    buf[1] = value;
 8003ab6:	79bb      	ldrb	r3, [r7, #6]
 8003ab8:	737b      	strb	r3, [r7, #13]
    
    platformSpiTxRx(buf, NULL, 2);
 8003aba:	f107 030c 	add.w	r3, r7, #12
 8003abe:	2202      	movs	r2, #2
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff f91e 	bl	8002d04 <spiTxRx>
    
    platformSpiDeselect();
 8003ac8:	2201      	movs	r2, #1
 8003aca:	2140      	movs	r1, #64	; 0x40
 8003acc:	480b      	ldr	r0, [pc, #44]	; (8003afc <st25r3911WriteRegister+0x90>)
 8003ace:	f000 ff20 	bl	8004912 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <st25r3911WriteRegister+0x8c>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <st25r3911WriteRegister+0x8c>)
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <st25r3911WriteRegister+0x8c>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <st25r3911WriteRegister+0x82>
 8003ae6:	2006      	movs	r0, #6
 8003ae8:	f7ff fe3c 	bl	8003764 <__NVIC_EnableIRQ>

    return;
 8003aec:	bf00      	nop
 8003aee:	bf00      	nop
}
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000198 	.word	0x20000198
 8003afc:	40020400 	.word	0x40020400

08003b00 <st25r3911ClrRegisterBits>:

void st25r3911ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	460a      	mov	r2, r1
 8003b0a:	71fb      	strb	r3, [r7, #7]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8003b10:	f107 020f 	add.w	r2, r7, #15
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff fe7f 	bl	800381c <st25r3911ReadRegister>
    tmp &= ~clr_mask;
 8003b1e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003b22:	43db      	mvns	r3, r3
 8003b24:	b25a      	sxtb	r2, r3
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	b25b      	sxtb	r3, r3
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	b25b      	sxtb	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	4611      	mov	r1, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff97 	bl	8003a6c <st25r3911WriteRegister>
    
    return;
 8003b3e:	bf00      	nop
}
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <st25r3911SetRegisterBits>:


void st25r3911SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	460a      	mov	r2, r1
 8003b50:	71fb      	strb	r3, [r7, #7]
 8003b52:	4613      	mov	r3, r2
 8003b54:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8003b56:	f107 020f 	add.w	r2, r7, #15
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fe5c 	bl	800381c <st25r3911ReadRegister>
    tmp |= set_mask;
 8003b64:	7bfa      	ldrb	r2, [r7, #15]
 8003b66:	79bb      	ldrb	r3, [r7, #6]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ff79 	bl	8003a6c <st25r3911WriteRegister>
    
    return;
 8003b7a:	bf00      	nop
}
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <st25r3911ChangeRegisterBits>:

void st25r3911ChangeRegisterBits(uint8_t reg, uint8_t valueMask, uint8_t value)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	4603      	mov	r3, r0
 8003b8a:	71fb      	strb	r3, [r7, #7]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	71bb      	strb	r3, [r7, #6]
 8003b90:	4613      	mov	r3, r2
 8003b92:	717b      	strb	r3, [r7, #5]
    st25r3911ModifyRegister(reg, valueMask, (valueMask & value) );
 8003b94:	79ba      	ldrb	r2, [r7, #6]
 8003b96:	797b      	ldrb	r3, [r7, #5]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	79b9      	ldrb	r1, [r7, #6]
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 f804 	bl	8003bae <st25r3911ModifyRegister>
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <st25r3911ModifyRegister>:

void st25r3911ModifyRegister(uint8_t reg, uint8_t clr_mask, uint8_t set_mask)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	71fb      	strb	r3, [r7, #7]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	71bb      	strb	r3, [r7, #6]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	717b      	strb	r3, [r7, #5]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8003bc0:	f107 020f 	add.w	r2, r7, #15
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff fe27 	bl	800381c <st25r3911ReadRegister>

    /* mask out the bits we don't want to change */
    tmp &= ~clr_mask;
 8003bce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	b25a      	sxtb	r2, r3
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	b25b      	sxtb	r3, r3
 8003bda:	4013      	ands	r3, r2
 8003bdc:	b25b      	sxtb	r3, r3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	73fb      	strb	r3, [r7, #15]
    /* set the new value */
    tmp |= set_mask;
 8003be2:	7bfa      	ldrb	r2, [r7, #15]
 8003be4:	797b      	ldrb	r3, [r7, #5]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff ff3a 	bl	8003a6c <st25r3911WriteRegister>

    return;
 8003bf8:	bf00      	nop
}
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <st25r3911ChangeTestRegisterBits>:

void st25r3911ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	71bb      	strb	r3, [r7, #6]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	717b      	strb	r3, [r7, #5]
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    st25r3911ReadTestRegister(reg, &rdVal);
 8003c12:	f107 020e 	add.w	r2, r7, #14
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fe96 	bl	800394c <st25r3911ReadTestRegister>
    
    /* Compute new value */
    wrVal  = (rdVal & ~valueMask);
 8003c20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003c24:	43db      	mvns	r3, r3
 8003c26:	b25a      	sxtb	r2, r3
 8003c28:	7bbb      	ldrb	r3, [r7, #14]
 8003c2a:	b25b      	sxtb	r3, r3
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	b25b      	sxtb	r3, r3
 8003c30:	73fb      	strb	r3, [r7, #15]
    wrVal |= (value & valueMask);
 8003c32:	797a      	ldrb	r2, [r7, #5]
 8003c34:	79bb      	ldrb	r3, [r7, #6]
 8003c36:	4013      	ands	r3, r2
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	73fb      	strb	r3, [r7, #15]
    
    /* Write new reg value */
    st25r3911WriteTestRegister(reg, wrVal );
 8003c40:	7bfa      	ldrb	r2, [r7, #15]
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	4611      	mov	r1, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fecc 	bl	80039e4 <st25r3911WriteTestRegister>
    
    return;
 8003c4c:	bf00      	nop
}
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <st25r3911WriteFifo>:
    return;
}


void st25r3911WriteFifo(const uint8_t* values, uint8_t length)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_LOAD;
 8003c60:	2380      	movs	r3, #128	; 0x80
 8003c62:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */

    if (length > 0U)
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d034      	beq.n	8003cd4 <st25r3911WriteFifo+0x80>
    {  
        platformProtectST25R391xComm();
 8003c6a:	4b1c      	ldr	r3, [pc, #112]	; (8003cdc <st25r3911WriteFifo+0x88>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <st25r3911WriteFifo+0x88>)
 8003c74:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	2006      	movs	r0, #6
 8003c7c:	f7ff fd8e 	bl	800379c <__NVIC_DisableIRQ>
 8003c80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003c84:	f3bf 8f6f 	isb	sy
        platformSpiSelect();
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2140      	movs	r1, #64	; 0x40
 8003c8c:	4814      	ldr	r0, [pc, #80]	; (8003ce0 <st25r3911WriteFifo+0x8c>)
 8003c8e:	f000 fe40 	bl	8004912 <HAL_GPIO_WritePin>

        platformSpiTxRx( comBuf, NULL, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 8003c92:	f107 030f 	add.w	r3, r7, #15
 8003c96:	2201      	movs	r2, #1
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff f832 	bl	8002d04 <spiTxRx>
        platformSpiTxRx( values, NULL, length );
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff f82b 	bl	8002d04 <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiDeselect();
 8003cae:	2201      	movs	r2, #1
 8003cb0:	2140      	movs	r1, #64	; 0x40
 8003cb2:	480b      	ldr	r0, [pc, #44]	; (8003ce0 <st25r3911WriteFifo+0x8c>)
 8003cb4:	f000 fe2d 	bl	8004912 <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8003cb8:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <st25r3911WriteFifo+0x88>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <st25r3911WriteFifo+0x88>)
 8003cc2:	701a      	strb	r2, [r3, #0]
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <st25r3911WriteFifo+0x88>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <st25r3911WriteFifo+0x80>
 8003ccc:	2006      	movs	r0, #6
 8003cce:	f7ff fd49 	bl	8003764 <__NVIC_EnableIRQ>
    }

    return;
 8003cd2:	bf00      	nop
 8003cd4:	bf00      	nop
}
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000198 	.word	0x20000198
 8003ce0:	40020400 	.word	0x40020400

08003ce4 <st25r3911ReadFifo>:

void st25r3911ReadFifo(uint8_t* buf, uint8_t length)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_READ;
 8003cf0:	23bf      	movs	r3, #191	; 0xbf
 8003cf2:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
    
    if(length > 0U)
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d034      	beq.n	8003d64 <st25r3911ReadFifo+0x80>
    {
        platformProtectST25R391xComm();
 8003cfa:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <st25r3911ReadFifo+0x88>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <st25r3911ReadFifo+0x88>)
 8003d04:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	2006      	movs	r0, #6
 8003d0c:	f7ff fd46 	bl	800379c <__NVIC_DisableIRQ>
 8003d10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003d14:	f3bf 8f6f 	isb	sy
        platformSpiSelect();
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2140      	movs	r1, #64	; 0x40
 8003d1c:	4814      	ldr	r0, [pc, #80]	; (8003d70 <st25r3911ReadFifo+0x8c>)
 8003d1e:	f000 fdf8 	bl	8004912 <HAL_GPIO_WritePin>
        platformSpiTxRx( comBuf, comBuf, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );          /* Transceive as a single SPI call                        */
        ST_MEMCPY( buf, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) ); /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 8003d22:	f107 030f 	add.w	r3, r7, #15
 8003d26:	2201      	movs	r2, #1
 8003d28:	2100      	movs	r1, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fe ffea 	bl	8002d04 <spiTxRx>
        platformSpiTxRx( NULL, buf, length );
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f7fe ffe3 	bl	8002d04 <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
      
        platformSpiDeselect();
 8003d3e:	2201      	movs	r2, #1
 8003d40:	2140      	movs	r1, #64	; 0x40
 8003d42:	480b      	ldr	r0, [pc, #44]	; (8003d70 <st25r3911ReadFifo+0x8c>)
 8003d44:	f000 fde5 	bl	8004912 <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8003d48:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <st25r3911ReadFifo+0x88>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <st25r3911ReadFifo+0x88>)
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <st25r3911ReadFifo+0x88>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d103      	bne.n	8003d64 <st25r3911ReadFifo+0x80>
 8003d5c:	2006      	movs	r0, #6
 8003d5e:	f7ff fd01 	bl	8003764 <__NVIC_EnableIRQ>
    }

    return;
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
}
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000198 	.word	0x20000198
 8003d70:	40020400 	.word	0x40020400

08003d74 <st25r3911ExecuteCommand>:

void st25r3911ExecuteCommand( uint8_t cmd )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	71fb      	strb	r3, [r7, #7]
    uint8_t tmpCmd;                                    /* MISRA 17.8 */
    
#ifdef PLATFORM_LED_FIELD_PIN
    if ( (cmd >= ST25R3911_CMD_TRANSMIT_WITH_CRC) && (cmd <= ST25R3911_CMD_RESPONSE_RF_COLLISION_0))
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	2bc3      	cmp	r3, #195	; 0xc3
 8003d82:	d908      	bls.n	8003d96 <st25r3911ExecuteCommand+0x22>
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	2bca      	cmp	r3, #202	; 0xca
 8003d88:	d805      	bhi.n	8003d96 <st25r3911ExecuteCommand+0x22>
    {
        platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d90:	481c      	ldr	r0, [pc, #112]	; (8003e04 <st25r3911ExecuteCommand+0x90>)
 8003d92:	f000 fdbe 	bl	8004912 <HAL_GPIO_WritePin>
    }
#endif /* PLATFORM_LED_FIELD_PIN */
    
    tmpCmd = (cmd | ST25R3911_CMD_MODE);
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	73fb      	strb	r3, [r7, #15]

    platformProtectST25R391xComm();
 8003da0:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <st25r3911ExecuteCommand+0x94>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	4b17      	ldr	r3, [pc, #92]	; (8003e08 <st25r3911ExecuteCommand+0x94>)
 8003daa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	2006      	movs	r0, #6
 8003db2:	f7ff fcf3 	bl	800379c <__NVIC_DisableIRQ>
 8003db6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003dba:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2140      	movs	r1, #64	; 0x40
 8003dc2:	4812      	ldr	r0, [pc, #72]	; (8003e0c <st25r3911ExecuteCommand+0x98>)
 8003dc4:	f000 fda5 	bl	8004912 <HAL_GPIO_WritePin>

    platformSpiTxRx( &tmpCmd, NULL, ST25R3911_CMD_LEN );
 8003dc8:	f107 030f 	add.w	r3, r7, #15
 8003dcc:	2201      	movs	r2, #1
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fe ff97 	bl	8002d04 <spiTxRx>

    platformSpiDeselect();
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	2140      	movs	r1, #64	; 0x40
 8003dda:	480c      	ldr	r0, [pc, #48]	; (8003e0c <st25r3911ExecuteCommand+0x98>)
 8003ddc:	f000 fd99 	bl	8004912 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003de0:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <st25r3911ExecuteCommand+0x94>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <st25r3911ExecuteCommand+0x94>)
 8003dea:	701a      	strb	r2, [r3, #0]
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <st25r3911ExecuteCommand+0x94>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d103      	bne.n	8003dfc <st25r3911ExecuteCommand+0x88>
 8003df4:	2006      	movs	r0, #6
 8003df6:	f7ff fcb5 	bl	8003764 <__NVIC_EnableIRQ>

    return;
 8003dfa:	bf00      	nop
 8003dfc:	bf00      	nop
}
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40020000 	.word	0x40020000
 8003e08:	20000198 	.word	0x20000198
 8003e0c:	40020400 	.word	0x40020400

08003e10 <st25r3911ExecuteCommands>:


void st25r3911ExecuteCommands(const uint8_t *cmds, uint8_t length)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	70fb      	strb	r3, [r7, #3]
    platformProtectST25R391xComm();
 8003e1c:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <st25r3911ExecuteCommands+0x70>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	3301      	adds	r3, #1
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <st25r3911ExecuteCommands+0x70>)
 8003e26:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	2006      	movs	r0, #6
 8003e2e:	f7ff fcb5 	bl	800379c <__NVIC_DisableIRQ>
 8003e32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e36:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2140      	movs	r1, #64	; 0x40
 8003e3e:	4811      	ldr	r0, [pc, #68]	; (8003e84 <st25r3911ExecuteCommands+0x74>)
 8003e40:	f000 fd67 	bl	8004912 <HAL_GPIO_WritePin>
    
    platformSpiTxRx( cmds, NULL, length );
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fe ff59 	bl	8002d04 <spiTxRx>
    
    platformSpiDeselect();
 8003e52:	2201      	movs	r2, #1
 8003e54:	2140      	movs	r1, #64	; 0x40
 8003e56:	480b      	ldr	r0, [pc, #44]	; (8003e84 <st25r3911ExecuteCommands+0x74>)
 8003e58:	f000 fd5b 	bl	8004912 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003e5c:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <st25r3911ExecuteCommands+0x70>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <st25r3911ExecuteCommands+0x70>)
 8003e66:	701a      	strb	r2, [r3, #0]
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <st25r3911ExecuteCommands+0x70>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d103      	bne.n	8003e78 <st25r3911ExecuteCommands+0x68>
 8003e70:	2006      	movs	r0, #6
 8003e72:	f7ff fc77 	bl	8003764 <__NVIC_EnableIRQ>

    return;
 8003e76:	bf00      	nop
 8003e78:	bf00      	nop
}
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20000198 	.word	0x20000198
 8003e84:	40020400 	.word	0x40020400

08003e88 <__NVIC_EnableIRQ>:
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	db0b      	blt.n	8003eb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	f003 021f 	and.w	r2, r3, #31
 8003ea0:	4906      	ldr	r1, [pc, #24]	; (8003ebc <__NVIC_EnableIRQ+0x34>)
 8003ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8003eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	e000e100 	.word	0xe000e100

08003ec0 <__NVIC_DisableIRQ>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	db10      	blt.n	8003ef4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	f003 021f 	and.w	r2, r3, #31
 8003ed8:	4909      	ldr	r1, [pc, #36]	; (8003f00 <__NVIC_DisableIRQ+0x40>)
 8003eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ee6:	3320      	adds	r3, #32
 8003ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003eec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ef0:	f3bf 8f6f 	isb	sy
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	e000e100 	.word	0xe000e100

08003f04 <st25r3911InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911InitInterrupts( void )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
    platformIrqST25R3911PinInitialize();
    platformIrqST25R3911SetCallback( st25r3911Isr );
    
    st25r3911interrupt.callback     = NULL;
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <st25r3911InitInterrupts+0x2c>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	605a      	str	r2, [r3, #4]
    st25r3911interrupt.prevCallback = NULL;
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <st25r3911InitInterrupts+0x2c>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
    st25r3911interrupt.status       = ST25R3911_IRQ_MASK_NONE;
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <st25r3911InitInterrupts+0x2c>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	609a      	str	r2, [r3, #8]
    st25r3911interrupt.mask         = ST25R3911_IRQ_MASK_NONE;
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <st25r3911InitInterrupts+0x2c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	60da      	str	r2, [r3, #12]
#ifdef PLATFORM_LED_RX_PIN
    platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
#endif /* PLATFORM_LED_RX_PIN */

#ifdef PLATFORM_LED_FIELD_PIN
    platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8003f20:	2200      	movs	r2, #0
 8003f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f26:	4803      	ldr	r0, [pc, #12]	; (8003f34 <st25r3911InitInterrupts+0x30>)
 8003f28:	f000 fcf3 	bl	8004912 <HAL_GPIO_WritePin>
#endif /* PLATFORM_LED_FIELD_PIN */
}
 8003f2c:	bf00      	nop
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20002de8 	.word	0x20002de8
 8003f34:	40020000 	.word	0x40020000

08003f38 <st25r3911Isr>:

void st25r3911Isr( void )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
    st25r3911CheckForReceivedInterrupts();
 8003f3c:	f000 f80c 	bl	8003f58 <st25r3911CheckForReceivedInterrupts>
    
    if (NULL != st25r3911interrupt.callback)
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <st25r3911Isr+0x1c>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <st25r3911Isr+0x16>
    {
        st25r3911interrupt.callback();
 8003f48:	4b02      	ldr	r3, [pc, #8]	; (8003f54 <st25r3911Isr+0x1c>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4798      	blx	r3
    }
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20002de8 	.word	0x20002de8

08003f58 <st25r3911CheckForReceivedInterrupts>:

void st25r3911CheckForReceivedInterrupts( void )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3911_INT_REGS_LEN];
    uint32_t irqStatus; 

    irqStatus = ST25R3911_IRQ_MASK_NONE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3911_IRQ_MASK_ALL & 0xFFU), ST25R3911_INT_REGS_LEN );  /* MISRA 10.3 */
 8003f62:	463b      	mov	r3, r7
 8003f64:	2203      	movs	r2, #3
 8003f66:	21ff      	movs	r1, #255	; 0xff
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f014 ff68 	bl	8018e3e <memset>
        
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 8003f6e:	e01f      	b.n	8003fb0 <st25r3911CheckForReceivedInterrupts+0x58>
    {
        st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, sizeof(iregs));
 8003f70:	463b      	mov	r3, r7
 8003f72:	2203      	movs	r2, #3
 8003f74:	4619      	mov	r1, r3
 8003f76:	2017      	movs	r0, #23
 8003f78:	f7ff fc9a 	bl	80038b0 <st25r3911ReadMultipleRegisters>
       
#ifdef PLATFORM_LED_FIELD_PIN         
        if ((iregs[0] & ST25R3911_IRQ_MASK_TXE) != 0U)
 8003f7c:	783b      	ldrb	r3, [r7, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <st25r3911CheckForReceivedInterrupts+0x3a>
        {
            platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8003f86:	2201      	movs	r2, #1
 8003f88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f8c:	481f      	ldr	r0, [pc, #124]	; (800400c <st25r3911CheckForReceivedInterrupts+0xb4>)
 8003f8e:	f000 fcc0 	bl	8004912 <HAL_GPIO_WritePin>
        {
            platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
        }
#endif /* PLATFORM_LED_RX_PIN */
       
        irqStatus |= (uint32_t)iregs[0];
 8003f92:	783b      	ldrb	r3, [r7, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[1]<<8;
 8003f9c:	787b      	ldrb	r3, [r7, #1]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[2]<<16;
 8003fa6:	78bb      	ldrb	r3, [r7, #2]
 8003fa8:	041b      	lsls	r3, r3, #16
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	607b      	str	r3, [r7, #4]
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4816      	ldr	r0, [pc, #88]	; (800400c <st25r3911CheckForReceivedInterrupts+0xb4>)
 8003fb4:	f000 fc96 	bl	80048e4 <HAL_GPIO_ReadPin>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d0d8      	beq.n	8003f70 <st25r3911CheckForReceivedInterrupts+0x18>
    }
    
    /* Forward all interrupts, even masked ones to application. */
    platformProtectST25R391xIrqStatus();
 8003fbe:	4b14      	ldr	r3, [pc, #80]	; (8004010 <st25r3911CheckForReceivedInterrupts+0xb8>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	4b12      	ldr	r3, [pc, #72]	; (8004010 <st25r3911CheckForReceivedInterrupts+0xb8>)
 8003fc8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	2006      	movs	r0, #6
 8003fd0:	f7ff ff76 	bl	8003ec0 <__NVIC_DisableIRQ>
 8003fd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003fd8:	f3bf 8f6f 	isb	sy
    st25r3911interrupt.status |= irqStatus;
 8003fdc:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	4a0b      	ldr	r2, [pc, #44]	; (8004014 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8003fe6:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 8003fe8:	4b09      	ldr	r3, [pc, #36]	; (8004010 <st25r3911CheckForReceivedInterrupts+0xb8>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	4b07      	ldr	r3, [pc, #28]	; (8004010 <st25r3911CheckForReceivedInterrupts+0xb8>)
 8003ff2:	701a      	strb	r2, [r3, #0]
 8003ff4:	4b06      	ldr	r3, [pc, #24]	; (8004010 <st25r3911CheckForReceivedInterrupts+0xb8>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d102      	bne.n	8004002 <st25r3911CheckForReceivedInterrupts+0xaa>
 8003ffc:	2006      	movs	r0, #6
 8003ffe:	f7ff ff43 	bl	8003e88 <__NVIC_EnableIRQ>
}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40020000 	.word	0x40020000
 8004010:	20000198 	.word	0x20000198
 8004014:	20002de8 	.word	0x20002de8

08004018 <st25r3911ModifyInterrupts>:


void st25r3911ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
    uint8_t i;
    uint32_t old_mask;
    uint32_t new_mask;

    old_mask = st25r3911interrupt.mask;
 8004022:	4b1e      	ldr	r3, [pc, #120]	; (800409c <st25r3911ModifyInterrupts+0x84>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	613b      	str	r3, [r7, #16]
    new_mask = (~old_mask & set_mask) | (old_mask & clr_mask);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	43da      	mvns	r2, r3
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	401a      	ands	r2, r3
 8004030:	6939      	ldr	r1, [r7, #16]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	400b      	ands	r3, r1
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
    st25r3911interrupt.mask &= ~clr_mask;
 800403a:	4b18      	ldr	r3, [pc, #96]	; (800409c <st25r3911ModifyInterrupts+0x84>)
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	43db      	mvns	r3, r3
 8004042:	4013      	ands	r3, r2
 8004044:	4a15      	ldr	r2, [pc, #84]	; (800409c <st25r3911ModifyInterrupts+0x84>)
 8004046:	60d3      	str	r3, [r2, #12]
    st25r3911interrupt.mask |= set_mask;
 8004048:	4b14      	ldr	r3, [pc, #80]	; (800409c <st25r3911ModifyInterrupts+0x84>)
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	4313      	orrs	r3, r2
 8004050:	4a12      	ldr	r2, [pc, #72]	; (800409c <st25r3911ModifyInterrupts+0x84>)
 8004052:	60d3      	str	r3, [r2, #12]
    for (i=0; i<3U ; i++)
 8004054:	2300      	movs	r3, #0
 8004056:	75fb      	strb	r3, [r7, #23]
 8004058:	e019      	b.n	800408e <st25r3911ModifyInterrupts+0x76>
    { 
        if (((new_mask >> (i*8U)) & 0xffU) == 0U) {
 800405a:	7dfb      	ldrb	r3, [r7, #23]
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00d      	beq.n	8004086 <st25r3911ModifyInterrupts+0x6e>
            continue;
        }
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 800406a:	7dfb      	ldrb	r3, [r7, #23]
 800406c:	3314      	adds	r3, #20
 800406e:	b2d8      	uxtb	r0, r3
 8004070:	4b0a      	ldr	r3, [pc, #40]	; (800409c <st25r3911ModifyInterrupts+0x84>)
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	7dfb      	ldrb	r3, [r7, #23]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
 800407c:	b2db      	uxtb	r3, r3
 800407e:	4619      	mov	r1, r3
 8004080:	f7ff fcf4 	bl	8003a6c <st25r3911WriteRegister>
 8004084:	e000      	b.n	8004088 <st25r3911ModifyInterrupts+0x70>
            continue;
 8004086:	bf00      	nop
    for (i=0; i<3U ; i++)
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	3301      	adds	r3, #1
 800408c:	75fb      	strb	r3, [r7, #23]
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d9e2      	bls.n	800405a <st25r3911ModifyInterrupts+0x42>
    }
    return;
 8004094:	bf00      	nop
}
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20002de8 	.word	0x20002de8

080040a0 <st25r3911WaitForInterruptsTimed>:


uint32_t st25r3911WaitForInterruptsTimed(uint32_t mask, uint16_t tmo)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	807b      	strh	r3, [r7, #2]
    uint32_t tmr;
    uint32_t status;
   
    tmr = platformTimerCreate(tmo);
 80040ac:	887b      	ldrh	r3, [r7, #2]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f8c8 	bl	8004244 <timerCalculateTimer>
 80040b4:	60f8      	str	r0, [r7, #12]
    do 
    {
        status = (st25r3911interrupt.status & mask);
 80040b6:	4b20      	ldr	r3, [pc, #128]	; (8004138 <st25r3911WaitForInterruptsTimed+0x98>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	4013      	ands	r3, r2
 80040be:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmr ) || (tmo == 0U)) && (status == 0U) );
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f8cd 	bl	8004260 <timerIsExpired>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f083 0301 	eor.w	r3, r3, #1
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <st25r3911WaitForInterruptsTimed+0x38>
 80040d2:	887b      	ldrh	r3, [r7, #2]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d102      	bne.n	80040de <st25r3911WaitForInterruptsTimed+0x3e>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0eb      	beq.n	80040b6 <st25r3911WaitForInterruptsTimed+0x16>

    status = st25r3911interrupt.status & mask;
 80040de:	4b16      	ldr	r3, [pc, #88]	; (8004138 <st25r3911WaitForInterruptsTimed+0x98>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4013      	ands	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]
    
    platformProtectST25R391xIrqStatus();
 80040e8:	4b14      	ldr	r3, [pc, #80]	; (800413c <st25r3911WaitForInterruptsTimed+0x9c>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	4b12      	ldr	r3, [pc, #72]	; (800413c <st25r3911WaitForInterruptsTimed+0x9c>)
 80040f2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	2006      	movs	r0, #6
 80040fa:	f7ff fee1 	bl	8003ec0 <__NVIC_DisableIRQ>
 80040fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004102:	f3bf 8f6f 	isb	sy
    st25r3911interrupt.status &= ~status;
 8004106:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <st25r3911WaitForInterruptsTimed+0x98>)
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	43db      	mvns	r3, r3
 800410e:	4013      	ands	r3, r2
 8004110:	4a09      	ldr	r2, [pc, #36]	; (8004138 <st25r3911WaitForInterruptsTimed+0x98>)
 8004112:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <st25r3911WaitForInterruptsTimed+0x9c>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	3b01      	subs	r3, #1
 800411a:	b2da      	uxtb	r2, r3
 800411c:	4b07      	ldr	r3, [pc, #28]	; (800413c <st25r3911WaitForInterruptsTimed+0x9c>)
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <st25r3911WaitForInterruptsTimed+0x9c>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d102      	bne.n	800412e <st25r3911WaitForInterruptsTimed+0x8e>
 8004128:	2006      	movs	r0, #6
 800412a:	f7ff fead 	bl	8003e88 <__NVIC_EnableIRQ>
    
    return status;
 800412e:	68bb      	ldr	r3, [r7, #8]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20002de8 	.word	0x20002de8
 800413c:	20000198 	.word	0x20000198

08004140 <st25r3911GetInterrupt>:

uint32_t st25r3911GetInterrupt(uint32_t mask)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3911interrupt.status & mask);
 8004148:	4b17      	ldr	r3, [pc, #92]	; (80041a8 <st25r3911GetInterrupt+0x68>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	4013      	ands	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
    if (irqs != ST25R3911_IRQ_MASK_NONE)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d022      	beq.n	800419e <st25r3911GetInterrupt+0x5e>
    {
        platformProtectST25R391xIrqStatus();
 8004158:	4b14      	ldr	r3, [pc, #80]	; (80041ac <st25r3911GetInterrupt+0x6c>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	3301      	adds	r3, #1
 800415e:	b2da      	uxtb	r2, r3
 8004160:	4b12      	ldr	r3, [pc, #72]	; (80041ac <st25r3911GetInterrupt+0x6c>)
 8004162:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	2006      	movs	r0, #6
 800416a:	f7ff fea9 	bl	8003ec0 <__NVIC_DisableIRQ>
 800416e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004172:	f3bf 8f6f 	isb	sy
        st25r3911interrupt.status &= ~irqs;
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <st25r3911GetInterrupt+0x68>)
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	43db      	mvns	r3, r3
 800417e:	4013      	ands	r3, r2
 8004180:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <st25r3911GetInterrupt+0x68>)
 8004182:	6093      	str	r3, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <st25r3911GetInterrupt+0x6c>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	3b01      	subs	r3, #1
 800418a:	b2da      	uxtb	r2, r3
 800418c:	4b07      	ldr	r3, [pc, #28]	; (80041ac <st25r3911GetInterrupt+0x6c>)
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <st25r3911GetInterrupt+0x6c>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d102      	bne.n	800419e <st25r3911GetInterrupt+0x5e>
 8004198:	2006      	movs	r0, #6
 800419a:	f7ff fe75 	bl	8003e88 <__NVIC_EnableIRQ>
    }
    return irqs;
 800419e:	68fb      	ldr	r3, [r7, #12]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20002de8 	.word	0x20002de8
 80041ac:	20000198 	.word	0x20000198

080041b0 <st25r3911EnableInterrupts>:

void st25r3911EnableInterrupts(uint32_t mask)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(mask,0);
 80041b8:	2100      	movs	r1, #0
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff ff2c 	bl	8004018 <st25r3911ModifyInterrupts>
}
 80041c0:	bf00      	nop
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <st25r3911DisableInterrupts>:

void st25r3911DisableInterrupts(uint32_t mask)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(0,mask);
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7ff ff20 	bl	8004018 <st25r3911ModifyInterrupts>
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <st25r3911ClearInterrupts>:

void st25r3911ClearInterrupts( void )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
    uint8_t iregs[3];

    st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, 3);
 80041e6:	1d3b      	adds	r3, r7, #4
 80041e8:	2203      	movs	r2, #3
 80041ea:	4619      	mov	r1, r3
 80041ec:	2017      	movs	r0, #23
 80041ee:	f7ff fb5f 	bl	80038b0 <st25r3911ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <st25r3911ClearInterrupts+0x5c>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	3301      	adds	r3, #1
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <st25r3911ClearInterrupts+0x5c>)
 80041fc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	2006      	movs	r0, #6
 8004204:	f7ff fe5c 	bl	8003ec0 <__NVIC_DisableIRQ>
 8004208:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800420c:	f3bf 8f6f 	isb	sy
    st25r3911interrupt.status = 0;
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <st25r3911ClearInterrupts+0x60>)
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <st25r3911ClearInterrupts+0x5c>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	3b01      	subs	r3, #1
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4b07      	ldr	r3, [pc, #28]	; (800423c <st25r3911ClearInterrupts+0x5c>)
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	4b06      	ldr	r3, [pc, #24]	; (800423c <st25r3911ClearInterrupts+0x5c>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <st25r3911ClearInterrupts+0x52>
 800422a:	2006      	movs	r0, #6
 800422c:	f7ff fe2c 	bl	8003e88 <__NVIC_EnableIRQ>
    return;
 8004230:	bf00      	nop
 8004232:	bf00      	nop
}
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000198 	.word	0x20000198
 8004240:	20002de8 	.word	0x20002de8

08004244 <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{  
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 800424e:	f000 f881 	bl	8004354 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	4413      	add	r3, r2
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 8004268:	f000 f874 	bl	8004354 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	1a9b      	subs	r3, r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */
  
  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	da01      	bge.n	8004282 <timerIsExpired+0x22>
  {
    return true;
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <timerIsExpired+0x24>
  }
  
  return false;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004296:	2003      	movs	r0, #3
 8004298:	f000 f954 	bl	8004544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800429c:	2000      	movs	r0, #0
 800429e:	f000 f80d 	bl	80042bc <HAL_InitTick>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	71fb      	strb	r3, [r7, #7]
 80042ac:	e001      	b.n	80042b2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80042ae:	f7fe fd67 	bl	8002d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042b2:	79fb      	ldrb	r3, [r7, #7]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80042c8:	4b16      	ldr	r3, [pc, #88]	; (8004324 <HAL_InitTick+0x68>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d022      	beq.n	8004316 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80042d0:	4b15      	ldr	r3, [pc, #84]	; (8004328 <HAL_InitTick+0x6c>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b13      	ldr	r3, [pc, #76]	; (8004324 <HAL_InitTick+0x68>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 f962 	bl	80045ae <HAL_SYSTICK_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10f      	bne.n	8004310 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b0f      	cmp	r3, #15
 80042f4:	d809      	bhi.n	800430a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042f6:	2200      	movs	r2, #0
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	f04f 30ff 	mov.w	r0, #4294967295
 80042fe:	f000 f92c 	bl	800455a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004302:	4a0a      	ldr	r2, [pc, #40]	; (800432c <HAL_InitTick+0x70>)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	e007      	b.n	800431a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	73fb      	strb	r3, [r7, #15]
 800430e:	e004      	b.n	800431a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
 8004314:	e001      	b.n	800431a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800431a:	7bfb      	ldrb	r3, [r7, #15]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	200000a0 	.word	0x200000a0
 8004328:	20000098 	.word	0x20000098
 800432c:	2000009c 	.word	0x2000009c

08004330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_IncTick+0x1c>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_IncTick+0x20>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4413      	add	r3, r2
 800433e:	4a03      	ldr	r2, [pc, #12]	; (800434c <HAL_IncTick+0x1c>)
 8004340:	6013      	str	r3, [r2, #0]
}
 8004342:	bf00      	nop
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20003d70 	.word	0x20003d70
 8004350:	200000a0 	.word	0x200000a0

08004354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return uwTick;
 8004358:	4b02      	ldr	r3, [pc, #8]	; (8004364 <HAL_GetTick+0x10>)
 800435a:	681b      	ldr	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr
 8004364:	20003d70 	.word	0x20003d70

08004368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004370:	f7ff fff0 	bl	8004354 <HAL_GetTick>
 8004374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d004      	beq.n	800438c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <HAL_Delay+0x40>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4413      	add	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800438c:	bf00      	nop
 800438e:	f7ff ffe1 	bl	8004354 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	429a      	cmp	r2, r3
 800439c:	d8f7      	bhi.n	800438e <HAL_Delay+0x26>
  {
  }
}
 800439e:	bf00      	nop
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	200000a0 	.word	0x200000a0

080043ac <__NVIC_SetPriorityGrouping>:
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <__NVIC_SetPriorityGrouping+0x44>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043c8:	4013      	ands	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043de:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <__NVIC_SetPriorityGrouping+0x44>)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	60d3      	str	r3, [r2, #12]
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <__NVIC_GetPriorityGrouping>:
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <__NVIC_GetPriorityGrouping+0x18>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	0a1b      	lsrs	r3, r3, #8
 80043fe:	f003 0307 	and.w	r3, r3, #7
}
 8004402:	4618      	mov	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <__NVIC_EnableIRQ>:
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800441a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441e:	2b00      	cmp	r3, #0
 8004420:	db0b      	blt.n	800443a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	f003 021f 	and.w	r2, r3, #31
 8004428:	4906      	ldr	r1, [pc, #24]	; (8004444 <__NVIC_EnableIRQ+0x34>)
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	2001      	movs	r0, #1
 8004432:	fa00 f202 	lsl.w	r2, r0, r2
 8004436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	e000e100 	.word	0xe000e100

08004448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	6039      	str	r1, [r7, #0]
 8004452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004458:	2b00      	cmp	r3, #0
 800445a:	db0a      	blt.n	8004472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	b2da      	uxtb	r2, r3
 8004460:	490c      	ldr	r1, [pc, #48]	; (8004494 <__NVIC_SetPriority+0x4c>)
 8004462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004466:	0112      	lsls	r2, r2, #4
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	440b      	add	r3, r1
 800446c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004470:	e00a      	b.n	8004488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	b2da      	uxtb	r2, r3
 8004476:	4908      	ldr	r1, [pc, #32]	; (8004498 <__NVIC_SetPriority+0x50>)
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	3b04      	subs	r3, #4
 8004480:	0112      	lsls	r2, r2, #4
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	440b      	add	r3, r1
 8004486:	761a      	strb	r2, [r3, #24]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	e000e100 	.word	0xe000e100
 8004498:	e000ed00 	.word	0xe000ed00

0800449c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	; 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f1c3 0307 	rsb	r3, r3, #7
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	bf28      	it	cs
 80044ba:	2304      	movcs	r3, #4
 80044bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3304      	adds	r3, #4
 80044c2:	2b06      	cmp	r3, #6
 80044c4:	d902      	bls.n	80044cc <NVIC_EncodePriority+0x30>
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	3b03      	subs	r3, #3
 80044ca:	e000      	b.n	80044ce <NVIC_EncodePriority+0x32>
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d0:	f04f 32ff 	mov.w	r2, #4294967295
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43da      	mvns	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	401a      	ands	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e4:	f04f 31ff 	mov.w	r1, #4294967295
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	fa01 f303 	lsl.w	r3, r1, r3
 80044ee:	43d9      	mvns	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f4:	4313      	orrs	r3, r2
         );
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3724      	adds	r7, #36	; 0x24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3b01      	subs	r3, #1
 800450c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004510:	d301      	bcc.n	8004516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004512:	2301      	movs	r3, #1
 8004514:	e00f      	b.n	8004536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004516:	4a0a      	ldr	r2, [pc, #40]	; (8004540 <SysTick_Config+0x40>)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3b01      	subs	r3, #1
 800451c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800451e:	210f      	movs	r1, #15
 8004520:	f04f 30ff 	mov.w	r0, #4294967295
 8004524:	f7ff ff90 	bl	8004448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004528:	4b05      	ldr	r3, [pc, #20]	; (8004540 <SysTick_Config+0x40>)
 800452a:	2200      	movs	r2, #0
 800452c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800452e:	4b04      	ldr	r3, [pc, #16]	; (8004540 <SysTick_Config+0x40>)
 8004530:	2207      	movs	r2, #7
 8004532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	e000e010 	.word	0xe000e010

08004544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff ff2d 	bl	80043ac <__NVIC_SetPriorityGrouping>
}
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b086      	sub	sp, #24
 800455e:	af00      	add	r7, sp, #0
 8004560:	4603      	mov	r3, r0
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800456c:	f7ff ff42 	bl	80043f4 <__NVIC_GetPriorityGrouping>
 8004570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	6978      	ldr	r0, [r7, #20]
 8004578:	f7ff ff90 	bl	800449c <NVIC_EncodePriority>
 800457c:	4602      	mov	r2, r0
 800457e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff ff5f 	bl	8004448 <__NVIC_SetPriority>
}
 800458a:	bf00      	nop
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	4603      	mov	r3, r0
 800459a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800459c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff ff35 	bl	8004410 <__NVIC_EnableIRQ>
}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff ffa2 	bl	8004500 <SysTick_Config>
 80045bc:	4603      	mov	r3, r0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80045de:	e160      	b.n	80048a2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	2101      	movs	r1, #1
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ec:	4013      	ands	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 8152 	beq.w	800489c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	2b01      	cmp	r3, #1
 8004602:	d005      	beq.n	8004610 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800460c:	2b02      	cmp	r3, #2
 800460e:	d130      	bne.n	8004672 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	2203      	movs	r2, #3
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4013      	ands	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8004646:	2201      	movs	r2, #1
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	43db      	mvns	r3, r3
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4013      	ands	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	091b      	lsrs	r3, r3, #4
 800465c:	f003 0201 	and.w	r2, r3, #1
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	2b03      	cmp	r3, #3
 800467c:	d017      	beq.n	80046ae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	2203      	movs	r2, #3
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43db      	mvns	r3, r3
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4013      	ands	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d123      	bne.n	8004702 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	08da      	lsrs	r2, r3, #3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3208      	adds	r2, #8
 80046c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	220f      	movs	r2, #15
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43db      	mvns	r3, r3
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4013      	ands	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	08da      	lsrs	r2, r3, #3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3208      	adds	r2, #8
 80046fc:	6939      	ldr	r1, [r7, #16]
 80046fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	2203      	movs	r2, #3
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4013      	ands	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 0203 	and.w	r2, r3, #3
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 80ac 	beq.w	800489c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004744:	4b5d      	ldr	r3, [pc, #372]	; (80048bc <HAL_GPIO_Init+0x2f4>)
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	4a5c      	ldr	r2, [pc, #368]	; (80048bc <HAL_GPIO_Init+0x2f4>)
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	6213      	str	r3, [r2, #32]
 8004750:	4b5a      	ldr	r3, [pc, #360]	; (80048bc <HAL_GPIO_Init+0x2f4>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800475c:	4a58      	ldr	r2, [pc, #352]	; (80048c0 <HAL_GPIO_Init+0x2f8>)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	089b      	lsrs	r3, r3, #2
 8004762:	3302      	adds	r3, #2
 8004764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004768:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f003 0303 	and.w	r3, r3, #3
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	220f      	movs	r2, #15
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4013      	ands	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a50      	ldr	r2, [pc, #320]	; (80048c4 <HAL_GPIO_Init+0x2fc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d025      	beq.n	80047d4 <HAL_GPIO_Init+0x20c>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a4f      	ldr	r2, [pc, #316]	; (80048c8 <HAL_GPIO_Init+0x300>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d01f      	beq.n	80047d0 <HAL_GPIO_Init+0x208>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a4e      	ldr	r2, [pc, #312]	; (80048cc <HAL_GPIO_Init+0x304>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d019      	beq.n	80047cc <HAL_GPIO_Init+0x204>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a4d      	ldr	r2, [pc, #308]	; (80048d0 <HAL_GPIO_Init+0x308>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <HAL_GPIO_Init+0x200>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a4c      	ldr	r2, [pc, #304]	; (80048d4 <HAL_GPIO_Init+0x30c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00d      	beq.n	80047c4 <HAL_GPIO_Init+0x1fc>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a4b      	ldr	r2, [pc, #300]	; (80048d8 <HAL_GPIO_Init+0x310>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d007      	beq.n	80047c0 <HAL_GPIO_Init+0x1f8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a4a      	ldr	r2, [pc, #296]	; (80048dc <HAL_GPIO_Init+0x314>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d101      	bne.n	80047bc <HAL_GPIO_Init+0x1f4>
 80047b8:	2306      	movs	r3, #6
 80047ba:	e00c      	b.n	80047d6 <HAL_GPIO_Init+0x20e>
 80047bc:	2307      	movs	r3, #7
 80047be:	e00a      	b.n	80047d6 <HAL_GPIO_Init+0x20e>
 80047c0:	2305      	movs	r3, #5
 80047c2:	e008      	b.n	80047d6 <HAL_GPIO_Init+0x20e>
 80047c4:	2304      	movs	r3, #4
 80047c6:	e006      	b.n	80047d6 <HAL_GPIO_Init+0x20e>
 80047c8:	2303      	movs	r3, #3
 80047ca:	e004      	b.n	80047d6 <HAL_GPIO_Init+0x20e>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e002      	b.n	80047d6 <HAL_GPIO_Init+0x20e>
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <HAL_GPIO_Init+0x20e>
 80047d4:	2300      	movs	r3, #0
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	f002 0203 	and.w	r2, r2, #3
 80047dc:	0092      	lsls	r2, r2, #2
 80047de:	4093      	lsls	r3, r2
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80047e6:	4936      	ldr	r1, [pc, #216]	; (80048c0 <HAL_GPIO_Init+0x2f8>)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	089b      	lsrs	r3, r3, #2
 80047ec:	3302      	adds	r3, #2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047f4:	4b3a      	ldr	r3, [pc, #232]	; (80048e0 <HAL_GPIO_Init+0x318>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	43db      	mvns	r3, r3
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4013      	ands	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004818:	4a31      	ldr	r2, [pc, #196]	; (80048e0 <HAL_GPIO_Init+0x318>)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800481e:	4b30      	ldr	r3, [pc, #192]	; (80048e0 <HAL_GPIO_Init+0x318>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	43db      	mvns	r3, r3
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4013      	ands	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004842:	4a27      	ldr	r2, [pc, #156]	; (80048e0 <HAL_GPIO_Init+0x318>)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004848:	4b25      	ldr	r3, [pc, #148]	; (80048e0 <HAL_GPIO_Init+0x318>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	43db      	mvns	r3, r3
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4013      	ands	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800486c:	4a1c      	ldr	r2, [pc, #112]	; (80048e0 <HAL_GPIO_Init+0x318>)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004872:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <HAL_GPIO_Init+0x318>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	43db      	mvns	r3, r3
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4013      	ands	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004896:	4a12      	ldr	r2, [pc, #72]	; (80048e0 <HAL_GPIO_Init+0x318>)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	3301      	adds	r3, #1
 80048a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f47f ae97 	bne.w	80045e0 <HAL_GPIO_Init+0x18>
  }
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr
 80048bc:	40023800 	.word	0x40023800
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40020000 	.word	0x40020000
 80048c8:	40020400 	.word	0x40020400
 80048cc:	40020800 	.word	0x40020800
 80048d0:	40020c00 	.word	0x40020c00
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40021400 	.word	0x40021400
 80048dc:	40021800 	.word	0x40021800
 80048e0:	40010400 	.word	0x40010400

080048e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	887b      	ldrh	r3, [r7, #2]
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
 8004900:	e001      	b.n	8004906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr

08004912 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	807b      	strh	r3, [r7, #2]
 800491e:	4613      	mov	r3, r2
 8004920:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004922:	787b      	ldrb	r3, [r7, #1]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004928:	887a      	ldrh	r2, [r7, #2]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800492e:	e003      	b.n	8004938 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8004930:	887b      	ldrh	r3, [r7, #2]
 8004932:	041a      	lsls	r2, r3, #16
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	619a      	str	r2, [r3, #24]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr

08004942 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004942:	b480      	push	{r7}
 8004944:	b085      	sub	sp, #20
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	460b      	mov	r3, r1
 800494c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004954:	887a      	ldrh	r2, [r7, #2]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4013      	ands	r3, r2
 800495a:	041a      	lsls	r2, r3, #16
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	43d9      	mvns	r1, r3
 8004960:	887b      	ldrh	r3, [r7, #2]
 8004962:	400b      	ands	r3, r1
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	619a      	str	r2, [r3, #24]
}
 800496a:	bf00      	nop
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800497e:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004980:	695a      	ldr	r2, [r3, #20]
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	4013      	ands	r3, r2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d006      	beq.n	8004998 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800498a:	4a05      	ldr	r2, [pc, #20]	; (80049a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004990:	88fb      	ldrh	r3, [r7, #6]
 8004992:	4618      	mov	r0, r3
 8004994:	f000 f806 	bl	80049a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004998:	bf00      	nop
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40010400 	.word	0x40010400

080049a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e31d      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ca:	4b94      	ldr	r3, [pc, #592]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049d4:	4b91      	ldr	r3, [pc, #580]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049dc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d07b      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d006      	beq.n	80049fe <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b0c      	cmp	r3, #12
 80049f4:	d10f      	bne.n	8004a16 <HAL_RCC_OscConfig+0x5e>
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049fc:	d10b      	bne.n	8004a16 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049fe:	4b87      	ldr	r3, [pc, #540]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d06a      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x128>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d166      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e2f7      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d106      	bne.n	8004a2c <HAL_RCC_OscConfig+0x74>
 8004a1e:	4b7f      	ldr	r3, [pc, #508]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a7e      	ldr	r2, [pc, #504]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	e02d      	b.n	8004a88 <HAL_RCC_OscConfig+0xd0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10c      	bne.n	8004a4e <HAL_RCC_OscConfig+0x96>
 8004a34:	4b79      	ldr	r3, [pc, #484]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a78      	ldr	r2, [pc, #480]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	4b76      	ldr	r3, [pc, #472]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a75      	ldr	r2, [pc, #468]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	e01c      	b.n	8004a88 <HAL_RCC_OscConfig+0xd0>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b05      	cmp	r3, #5
 8004a54:	d10c      	bne.n	8004a70 <HAL_RCC_OscConfig+0xb8>
 8004a56:	4b71      	ldr	r3, [pc, #452]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a70      	ldr	r2, [pc, #448]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	4b6e      	ldr	r3, [pc, #440]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a6d      	ldr	r2, [pc, #436]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e00b      	b.n	8004a88 <HAL_RCC_OscConfig+0xd0>
 8004a70:	4b6a      	ldr	r3, [pc, #424]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a69      	ldr	r2, [pc, #420]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	4b67      	ldr	r3, [pc, #412]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a66      	ldr	r2, [pc, #408]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d013      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a90:	f7ff fc60 	bl	8004354 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a98:	f7ff fc5c 	bl	8004354 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b64      	cmp	r3, #100	; 0x64
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e2ad      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004aaa:	4b5c      	ldr	r3, [pc, #368]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCC_OscConfig+0xe0>
 8004ab6:	e014      	b.n	8004ae2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab8:	f7ff fc4c 	bl	8004354 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac0:	f7ff fc48 	bl	8004354 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b64      	cmp	r3, #100	; 0x64
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e299      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ad2:	4b52      	ldr	r3, [pc, #328]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f0      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x108>
 8004ade:	e000      	b.n	8004ae2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d05a      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b0c      	cmp	r3, #12
 8004af8:	d119      	bne.n	8004b2e <HAL_RCC_OscConfig+0x176>
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d116      	bne.n	8004b2e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b00:	4b46      	ldr	r3, [pc, #280]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_OscConfig+0x160>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d001      	beq.n	8004b18 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e276      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b18:	4b40      	ldr	r3, [pc, #256]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	493d      	ldr	r1, [pc, #244]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2c:	e03a      	b.n	8004ba4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d020      	beq.n	8004b78 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b36:	4b3a      	ldr	r3, [pc, #232]	; (8004c20 <HAL_RCC_OscConfig+0x268>)
 8004b38:	2201      	movs	r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3c:	f7ff fc0a 	bl	8004354 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b44:	f7ff fc06 	bl	8004354 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e257      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b56:	4b31      	ldr	r3, [pc, #196]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0f0      	beq.n	8004b44 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b62:	4b2e      	ldr	r3, [pc, #184]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	492a      	ldr	r1, [pc, #168]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	604b      	str	r3, [r1, #4]
 8004b76:	e015      	b.n	8004ba4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b78:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <HAL_RCC_OscConfig+0x268>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7e:	f7ff fbe9 	bl	8004354 <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b86:	f7ff fbe5 	bl	8004354 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e236      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b98:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f0      	bne.n	8004b86 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 80b8 	beq.w	8004d22 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d170      	bne.n	8004c9a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bb8:	4b18      	ldr	r3, [pc, #96]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x218>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e21a      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1a      	ldr	r2, [r3, #32]
 8004bd4:	4b11      	ldr	r3, [pc, #68]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d921      	bls.n	8004c24 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fc47 	bl	8005478 <RCC_SetFlashLatencyFromMSIRange>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e208      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bf4:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	4906      	ldr	r1, [pc, #24]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	061b      	lsls	r3, r3, #24
 8004c14:	4901      	ldr	r1, [pc, #4]	; (8004c1c <HAL_RCC_OscConfig+0x264>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	604b      	str	r3, [r1, #4]
 8004c1a:	e020      	b.n	8004c5e <HAL_RCC_OscConfig+0x2a6>
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c24:	4ba4      	ldr	r3, [pc, #656]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	49a1      	ldr	r1, [pc, #644]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c36:	4ba0      	ldr	r3, [pc, #640]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	061b      	lsls	r3, r3, #24
 8004c44:	499c      	ldr	r1, [pc, #624]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fc12 	bl	8005478 <RCC_SetFlashLatencyFromMSIRange>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e1d3      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	0b5b      	lsrs	r3, r3, #13
 8004c64:	3301      	adds	r3, #1
 8004c66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004c6e:	4a92      	ldr	r2, [pc, #584]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004c70:	6892      	ldr	r2, [r2, #8]
 8004c72:	0912      	lsrs	r2, r2, #4
 8004c74:	f002 020f 	and.w	r2, r2, #15
 8004c78:	4990      	ldr	r1, [pc, #576]	; (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c7a:	5c8a      	ldrb	r2, [r1, r2]
 8004c7c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c7e:	4a90      	ldr	r2, [pc, #576]	; (8004ec0 <HAL_RCC_OscConfig+0x508>)
 8004c80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c82:	4b90      	ldr	r3, [pc, #576]	; (8004ec4 <HAL_RCC_OscConfig+0x50c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fb18 	bl	80042bc <HAL_InitTick>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d045      	beq.n	8004d22 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	e1b5      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d029      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ca2:	4b89      	ldr	r3, [pc, #548]	; (8004ec8 <HAL_RCC_OscConfig+0x510>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca8:	f7ff fb54 	bl	8004354 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cb0:	f7ff fb50 	bl	8004354 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e1a1      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004cc2:	4b7d      	ldr	r3, [pc, #500]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cce:	4b7a      	ldr	r3, [pc, #488]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	4977      	ldr	r1, [pc, #476]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ce0:	4b75      	ldr	r3, [pc, #468]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	061b      	lsls	r3, r3, #24
 8004cee:	4972      	ldr	r1, [pc, #456]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]
 8004cf4:	e015      	b.n	8004d22 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cf6:	4b74      	ldr	r3, [pc, #464]	; (8004ec8 <HAL_RCC_OscConfig+0x510>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7ff fb2a 	bl	8004354 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d04:	f7ff fb26 	bl	8004354 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e177      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d16:	4b68      	ldr	r3, [pc, #416]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d030      	beq.n	8004d90 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d016      	beq.n	8004d64 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d36:	4b65      	ldr	r3, [pc, #404]	; (8004ecc <HAL_RCC_OscConfig+0x514>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3c:	f7ff fb0a 	bl	8004354 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d44:	f7ff fb06 	bl	8004354 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e157      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d56:	4b58      	ldr	r3, [pc, #352]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x38c>
 8004d62:	e015      	b.n	8004d90 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d64:	4b59      	ldr	r3, [pc, #356]	; (8004ecc <HAL_RCC_OscConfig+0x514>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6a:	f7ff faf3 	bl	8004354 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d72:	f7ff faef 	bl	8004354 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e140      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d84:	4b4c      	ldr	r3, [pc, #304]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f0      	bne.n	8004d72 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80b5 	beq.w	8004f08 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da2:	4b45      	ldr	r3, [pc, #276]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10d      	bne.n	8004dca <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dae:	4b42      	ldr	r3, [pc, #264]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	4a41      	ldr	r2, [pc, #260]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db8:	6253      	str	r3, [r2, #36]	; 0x24
 8004dba:	4b3f      	ldr	r3, [pc, #252]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc2:	60bb      	str	r3, [r7, #8]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dca:	4b41      	ldr	r3, [pc, #260]	; (8004ed0 <HAL_RCC_OscConfig+0x518>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d118      	bne.n	8004e08 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dd6:	4b3e      	ldr	r3, [pc, #248]	; (8004ed0 <HAL_RCC_OscConfig+0x518>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a3d      	ldr	r2, [pc, #244]	; (8004ed0 <HAL_RCC_OscConfig+0x518>)
 8004ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de2:	f7ff fab7 	bl	8004354 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dea:	f7ff fab3 	bl	8004354 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b64      	cmp	r3, #100	; 0x64
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e104      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfc:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <HAL_RCC_OscConfig+0x518>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f0      	beq.n	8004dea <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d106      	bne.n	8004e1e <HAL_RCC_OscConfig+0x466>
 8004e10:	4b29      	ldr	r3, [pc, #164]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e14:	4a28      	ldr	r2, [pc, #160]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e1a:	6353      	str	r3, [r2, #52]	; 0x34
 8004e1c:	e02d      	b.n	8004e7a <HAL_RCC_OscConfig+0x4c2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10c      	bne.n	8004e40 <HAL_RCC_OscConfig+0x488>
 8004e26:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2a:	4a23      	ldr	r2, [pc, #140]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e30:	6353      	str	r3, [r2, #52]	; 0x34
 8004e32:	4b21      	ldr	r3, [pc, #132]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e36:	4a20      	ldr	r2, [pc, #128]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004e38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e3c:	6353      	str	r3, [r2, #52]	; 0x34
 8004e3e:	e01c      	b.n	8004e7a <HAL_RCC_OscConfig+0x4c2>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b05      	cmp	r3, #5
 8004e46:	d10c      	bne.n	8004e62 <HAL_RCC_OscConfig+0x4aa>
 8004e48:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4c:	4a1a      	ldr	r2, [pc, #104]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e52:	6353      	str	r3, [r2, #52]	; 0x34
 8004e54:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e58:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5e:	6353      	str	r3, [r2, #52]	; 0x34
 8004e60:	e00b      	b.n	8004e7a <HAL_RCC_OscConfig+0x4c2>
 8004e62:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e66:	4a14      	ldr	r2, [pc, #80]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e6c:	6353      	str	r3, [r2, #52]	; 0x34
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e72:	4a11      	ldr	r2, [pc, #68]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e78:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d015      	beq.n	8004eae <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e82:	f7ff fa67 	bl	8004354 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e88:	e00a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e8a:	f7ff fa63 	bl	8004354 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e0b2      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <HAL_RCC_OscConfig+0x500>)
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ee      	beq.n	8004e8a <HAL_RCC_OscConfig+0x4d2>
 8004eac:	e023      	b.n	8004ef6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eae:	f7ff fa51 	bl	8004354 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004eb4:	e019      	b.n	8004eea <HAL_RCC_OscConfig+0x532>
 8004eb6:	bf00      	nop
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	0801a9a4 	.word	0x0801a9a4
 8004ec0:	20000098 	.word	0x20000098
 8004ec4:	2000009c 	.word	0x2000009c
 8004ec8:	42470020 	.word	0x42470020
 8004ecc:	42470680 	.word	0x42470680
 8004ed0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed4:	f7ff fa3e 	bl	8004354 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e08d      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004eea:	4b49      	ldr	r3, [pc, #292]	; (8005010 <HAL_RCC_OscConfig+0x658>)
 8004eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1ee      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ef6:	7ffb      	ldrb	r3, [r7, #31]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d105      	bne.n	8004f08 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004efc:	4b44      	ldr	r3, [pc, #272]	; (8005010 <HAL_RCC_OscConfig+0x658>)
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	4a43      	ldr	r2, [pc, #268]	; (8005010 <HAL_RCC_OscConfig+0x658>)
 8004f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f06:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d079      	beq.n	8005004 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b0c      	cmp	r3, #12
 8004f14:	d056      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d13b      	bne.n	8004f96 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1e:	4b3d      	ldr	r3, [pc, #244]	; (8005014 <HAL_RCC_OscConfig+0x65c>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f24:	f7ff fa16 	bl	8004354 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7ff fa12 	bl	8004354 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e063      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f3e:	4b34      	ldr	r3, [pc, #208]	; (8005010 <HAL_RCC_OscConfig+0x658>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f4a:	4b31      	ldr	r3, [pc, #196]	; (8005010 <HAL_RCC_OscConfig+0x658>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	4319      	orrs	r1, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	430b      	orrs	r3, r1
 8004f62:	492b      	ldr	r1, [pc, #172]	; (8005010 <HAL_RCC_OscConfig+0x658>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f68:	4b2a      	ldr	r3, [pc, #168]	; (8005014 <HAL_RCC_OscConfig+0x65c>)
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6e:	f7ff f9f1 	bl	8004354 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f76:	f7ff f9ed 	bl	8004354 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e03e      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f88:	4b21      	ldr	r3, [pc, #132]	; (8005010 <HAL_RCC_OscConfig+0x658>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x5be>
 8004f94:	e036      	b.n	8005004 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f96:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <HAL_RCC_OscConfig+0x65c>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9c:	f7ff f9da 	bl	8004354 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa4:	f7ff f9d6 	bl	8004354 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e027      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fb6:	4b16      	ldr	r3, [pc, #88]	; (8005010 <HAL_RCC_OscConfig+0x658>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x5ec>
 8004fc2:	e01f      	b.n	8005004 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e01a      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fd0:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <HAL_RCC_OscConfig+0x658>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d10d      	bne.n	8005000 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d106      	bne.n	8005000 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d001      	beq.n	8005004 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3720      	adds	r7, #32
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40023800 	.word	0x40023800
 8005014:	42470060 	.word	0x42470060

08005018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e11a      	b.n	8005262 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800502c:	4b8f      	ldr	r3, [pc, #572]	; (800526c <HAL_RCC_ClockConfig+0x254>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d919      	bls.n	800506e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d105      	bne.n	800504c <HAL_RCC_ClockConfig+0x34>
 8005040:	4b8a      	ldr	r3, [pc, #552]	; (800526c <HAL_RCC_ClockConfig+0x254>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a89      	ldr	r2, [pc, #548]	; (800526c <HAL_RCC_ClockConfig+0x254>)
 8005046:	f043 0304 	orr.w	r3, r3, #4
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	4b87      	ldr	r3, [pc, #540]	; (800526c <HAL_RCC_ClockConfig+0x254>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f023 0201 	bic.w	r2, r3, #1
 8005054:	4985      	ldr	r1, [pc, #532]	; (800526c <HAL_RCC_ClockConfig+0x254>)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	4313      	orrs	r3, r2
 800505a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800505c:	4b83      	ldr	r3, [pc, #524]	; (800526c <HAL_RCC_ClockConfig+0x254>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d001      	beq.n	800506e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e0f9      	b.n	8005262 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d008      	beq.n	800508c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800507a:	4b7d      	ldr	r3, [pc, #500]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	497a      	ldr	r1, [pc, #488]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 8005088:	4313      	orrs	r3, r2
 800508a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 808e 	beq.w	80051b6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d107      	bne.n	80050b2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050a2:	4b73      	ldr	r3, [pc, #460]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d121      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e0d7      	b.n	8005262 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050ba:	4b6d      	ldr	r3, [pc, #436]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d115      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e0cb      	b.n	8005262 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d107      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050d2:	4b67      	ldr	r3, [pc, #412]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e0bf      	b.n	8005262 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80050e2:	4b63      	ldr	r3, [pc, #396]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e0b7      	b.n	8005262 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050f2:	4b5f      	ldr	r3, [pc, #380]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f023 0203 	bic.w	r2, r3, #3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	495c      	ldr	r1, [pc, #368]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 8005100:	4313      	orrs	r3, r2
 8005102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005104:	f7ff f926 	bl	8004354 <HAL_GetTick>
 8005108:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d112      	bne.n	8005138 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005112:	e00a      	b.n	800512a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005114:	f7ff f91e 	bl	8004354 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005122:	4293      	cmp	r3, r2
 8005124:	d901      	bls.n	800512a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e09b      	b.n	8005262 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800512a:	4b51      	ldr	r3, [pc, #324]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	2b08      	cmp	r3, #8
 8005134:	d1ee      	bne.n	8005114 <HAL_RCC_ClockConfig+0xfc>
 8005136:	e03e      	b.n	80051b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b03      	cmp	r3, #3
 800513e:	d112      	bne.n	8005166 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005140:	e00a      	b.n	8005158 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005142:	f7ff f907 	bl	8004354 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005150:	4293      	cmp	r3, r2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e084      	b.n	8005262 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005158:	4b45      	ldr	r3, [pc, #276]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 030c 	and.w	r3, r3, #12
 8005160:	2b0c      	cmp	r3, #12
 8005162:	d1ee      	bne.n	8005142 <HAL_RCC_ClockConfig+0x12a>
 8005164:	e027      	b.n	80051b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d11d      	bne.n	80051aa <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800516e:	e00a      	b.n	8005186 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005170:	f7ff f8f0 	bl	8004354 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	f241 3288 	movw	r2, #5000	; 0x1388
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e06d      	b.n	8005262 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005186:	4b3a      	ldr	r3, [pc, #232]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 030c 	and.w	r3, r3, #12
 800518e:	2b04      	cmp	r3, #4
 8005190:	d1ee      	bne.n	8005170 <HAL_RCC_ClockConfig+0x158>
 8005192:	e010      	b.n	80051b6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005194:	f7ff f8de 	bl	8004354 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e05b      	b.n	8005262 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80051aa:	4b31      	ldr	r3, [pc, #196]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 030c 	and.w	r3, r3, #12
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1ee      	bne.n	8005194 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051b6:	4b2d      	ldr	r3, [pc, #180]	; (800526c <HAL_RCC_ClockConfig+0x254>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d219      	bcs.n	80051f8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d105      	bne.n	80051d6 <HAL_RCC_ClockConfig+0x1be>
 80051ca:	4b28      	ldr	r3, [pc, #160]	; (800526c <HAL_RCC_ClockConfig+0x254>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a27      	ldr	r2, [pc, #156]	; (800526c <HAL_RCC_ClockConfig+0x254>)
 80051d0:	f043 0304 	orr.w	r3, r3, #4
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	4b25      	ldr	r3, [pc, #148]	; (800526c <HAL_RCC_ClockConfig+0x254>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 0201 	bic.w	r2, r3, #1
 80051de:	4923      	ldr	r1, [pc, #140]	; (800526c <HAL_RCC_ClockConfig+0x254>)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e6:	4b21      	ldr	r3, [pc, #132]	; (800526c <HAL_RCC_ClockConfig+0x254>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d001      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e034      	b.n	8005262 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d008      	beq.n	8005216 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005204:	4b1a      	ldr	r3, [pc, #104]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	4917      	ldr	r1, [pc, #92]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 8005212:	4313      	orrs	r3, r2
 8005214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005222:	4b13      	ldr	r3, [pc, #76]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	490f      	ldr	r1, [pc, #60]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 8005232:	4313      	orrs	r3, r2
 8005234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005236:	f000 f823 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 800523a:	4601      	mov	r1, r0
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <HAL_RCC_ClockConfig+0x258>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	091b      	lsrs	r3, r3, #4
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	4a0b      	ldr	r2, [pc, #44]	; (8005274 <HAL_RCC_ClockConfig+0x25c>)
 8005248:	5cd3      	ldrb	r3, [r2, r3]
 800524a:	fa21 f303 	lsr.w	r3, r1, r3
 800524e:	4a0a      	ldr	r2, [pc, #40]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 8005250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005252:	4b0a      	ldr	r3, [pc, #40]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff f830 	bl	80042bc <HAL_InitTick>
 800525c:	4603      	mov	r3, r0
 800525e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005260:	7afb      	ldrb	r3, [r7, #11]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40023c00 	.word	0x40023c00
 8005270:	40023800 	.word	0x40023800
 8005274:	0801a9a4 	.word	0x0801a9a4
 8005278:	20000098 	.word	0x20000098
 800527c:	2000009c 	.word	0x2000009c

08005280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005286:	4b5f      	ldr	r3, [pc, #380]	; (8005404 <HAL_RCC_GetSysClockFreq+0x184>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 030c 	and.w	r3, r3, #12
 8005292:	2b08      	cmp	r3, #8
 8005294:	d007      	beq.n	80052a6 <HAL_RCC_GetSysClockFreq+0x26>
 8005296:	2b0c      	cmp	r3, #12
 8005298:	d008      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0x2c>
 800529a:	2b04      	cmp	r3, #4
 800529c:	f040 809f 	bne.w	80053de <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052a0:	4b59      	ldr	r3, [pc, #356]	; (8005408 <HAL_RCC_GetSysClockFreq+0x188>)
 80052a2:	613b      	str	r3, [r7, #16]
      break;
 80052a4:	e0a9      	b.n	80053fa <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052a6:	4b59      	ldr	r3, [pc, #356]	; (800540c <HAL_RCC_GetSysClockFreq+0x18c>)
 80052a8:	613b      	str	r3, [r7, #16]
      break;
 80052aa:	e0a6      	b.n	80053fa <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	0c9b      	lsrs	r3, r3, #18
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	4a56      	ldr	r2, [pc, #344]	; (8005410 <HAL_RCC_GetSysClockFreq+0x190>)
 80052b6:	5cd3      	ldrb	r3, [r2, r3]
 80052b8:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	0d9b      	lsrs	r3, r3, #22
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	3301      	adds	r3, #1
 80052c4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052c6:	4b4f      	ldr	r3, [pc, #316]	; (8005404 <HAL_RCC_GetSysClockFreq+0x184>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d041      	beq.n	8005356 <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	461d      	mov	r5, r3
 80052d6:	f04f 0600 	mov.w	r6, #0
 80052da:	4629      	mov	r1, r5
 80052dc:	4632      	mov	r2, r6
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	f04f 0400 	mov.w	r4, #0
 80052e6:	0154      	lsls	r4, r2, #5
 80052e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052ec:	014b      	lsls	r3, r1, #5
 80052ee:	4619      	mov	r1, r3
 80052f0:	4622      	mov	r2, r4
 80052f2:	1b49      	subs	r1, r1, r5
 80052f4:	eb62 0206 	sbc.w	r2, r2, r6
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	f04f 0400 	mov.w	r4, #0
 8005300:	0194      	lsls	r4, r2, #6
 8005302:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005306:	018b      	lsls	r3, r1, #6
 8005308:	1a5b      	subs	r3, r3, r1
 800530a:	eb64 0402 	sbc.w	r4, r4, r2
 800530e:	f04f 0100 	mov.w	r1, #0
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	00e2      	lsls	r2, r4, #3
 8005318:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800531c:	00d9      	lsls	r1, r3, #3
 800531e:	460b      	mov	r3, r1
 8005320:	4614      	mov	r4, r2
 8005322:	195b      	adds	r3, r3, r5
 8005324:	eb44 0406 	adc.w	r4, r4, r6
 8005328:	f04f 0100 	mov.w	r1, #0
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	0262      	lsls	r2, r4, #9
 8005332:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005336:	0259      	lsls	r1, r3, #9
 8005338:	460b      	mov	r3, r1
 800533a:	4614      	mov	r4, r2
 800533c:	4618      	mov	r0, r3
 800533e:	4621      	mov	r1, r4
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f04f 0400 	mov.w	r4, #0
 8005346:	461a      	mov	r2, r3
 8005348:	4623      	mov	r3, r4
 800534a:	f7fa ff1f 	bl	800018c <__aeabi_uldivmod>
 800534e:	4603      	mov	r3, r0
 8005350:	460c      	mov	r4, r1
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	e040      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	461d      	mov	r5, r3
 800535a:	f04f 0600 	mov.w	r6, #0
 800535e:	4629      	mov	r1, r5
 8005360:	4632      	mov	r2, r6
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	f04f 0400 	mov.w	r4, #0
 800536a:	0154      	lsls	r4, r2, #5
 800536c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005370:	014b      	lsls	r3, r1, #5
 8005372:	4619      	mov	r1, r3
 8005374:	4622      	mov	r2, r4
 8005376:	1b49      	subs	r1, r1, r5
 8005378:	eb62 0206 	sbc.w	r2, r2, r6
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	f04f 0400 	mov.w	r4, #0
 8005384:	0194      	lsls	r4, r2, #6
 8005386:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800538a:	018b      	lsls	r3, r1, #6
 800538c:	1a5b      	subs	r3, r3, r1
 800538e:	eb64 0402 	sbc.w	r4, r4, r2
 8005392:	f04f 0100 	mov.w	r1, #0
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	00e2      	lsls	r2, r4, #3
 800539c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053a0:	00d9      	lsls	r1, r3, #3
 80053a2:	460b      	mov	r3, r1
 80053a4:	4614      	mov	r4, r2
 80053a6:	195b      	adds	r3, r3, r5
 80053a8:	eb44 0406 	adc.w	r4, r4, r6
 80053ac:	f04f 0100 	mov.w	r1, #0
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	02a2      	lsls	r2, r4, #10
 80053b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80053ba:	0299      	lsls	r1, r3, #10
 80053bc:	460b      	mov	r3, r1
 80053be:	4614      	mov	r4, r2
 80053c0:	4618      	mov	r0, r3
 80053c2:	4621      	mov	r1, r4
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f04f 0400 	mov.w	r4, #0
 80053ca:	461a      	mov	r2, r3
 80053cc:	4623      	mov	r3, r4
 80053ce:	f7fa fedd 	bl	800018c <__aeabi_uldivmod>
 80053d2:	4603      	mov	r3, r0
 80053d4:	460c      	mov	r4, r1
 80053d6:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	613b      	str	r3, [r7, #16]
      break;
 80053dc:	e00d      	b.n	80053fa <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80053de:	4b09      	ldr	r3, [pc, #36]	; (8005404 <HAL_RCC_GetSysClockFreq+0x184>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	0b5b      	lsrs	r3, r3, #13
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	3301      	adds	r3, #1
 80053ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	613b      	str	r3, [r7, #16]
      break;
 80053f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053fa:	693b      	ldr	r3, [r7, #16]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005404:	40023800 	.word	0x40023800
 8005408:	00f42400 	.word	0x00f42400
 800540c:	007a1200 	.word	0x007a1200
 8005410:	0801a998 	.word	0x0801a998

08005414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005418:	4b02      	ldr	r3, [pc, #8]	; (8005424 <HAL_RCC_GetHCLKFreq+0x10>)
 800541a:	681b      	ldr	r3, [r3, #0]
}
 800541c:	4618      	mov	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr
 8005424:	20000098 	.word	0x20000098

08005428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800542c:	f7ff fff2 	bl	8005414 <HAL_RCC_GetHCLKFreq>
 8005430:	4601      	mov	r1, r0
 8005432:	4b05      	ldr	r3, [pc, #20]	; (8005448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	4a03      	ldr	r2, [pc, #12]	; (800544c <HAL_RCC_GetPCLK1Freq+0x24>)
 800543e:	5cd3      	ldrb	r3, [r2, r3]
 8005440:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005444:	4618      	mov	r0, r3
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40023800 	.word	0x40023800
 800544c:	0801a9b4 	.word	0x0801a9b4

08005450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005454:	f7ff ffde 	bl	8005414 <HAL_RCC_GetHCLKFreq>
 8005458:	4601      	mov	r1, r0
 800545a:	4b05      	ldr	r3, [pc, #20]	; (8005470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	0adb      	lsrs	r3, r3, #11
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	4a03      	ldr	r2, [pc, #12]	; (8005474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005466:	5cd3      	ldrb	r3, [r2, r3]
 8005468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800546c:	4618      	mov	r0, r3
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40023800 	.word	0x40023800
 8005474:	0801a9b4 	.word	0x0801a9b4

08005478 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005480:	2300      	movs	r3, #0
 8005482:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005484:	4b29      	ldr	r3, [pc, #164]	; (800552c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d12c      	bne.n	80054ea <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005490:	4b26      	ldr	r3, [pc, #152]	; (800552c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800549c:	4b24      	ldr	r3, [pc, #144]	; (8005530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	e016      	b.n	80054d6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054a8:	4b20      	ldr	r3, [pc, #128]	; (800552c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	4a1f      	ldr	r2, [pc, #124]	; (800552c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80054ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b2:	6253      	str	r3, [r2, #36]	; 0x24
 80054b4:	4b1d      	ldr	r3, [pc, #116]	; (800552c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80054c0:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80054c8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ca:	4b18      	ldr	r3, [pc, #96]	; (800552c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	4a17      	ldr	r2, [pc, #92]	; (800552c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80054d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80054dc:	d105      	bne.n	80054ea <RCC_SetFlashLatencyFromMSIRange+0x72>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054e4:	d101      	bne.n	80054ea <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80054e6:	2301      	movs	r3, #1
 80054e8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d105      	bne.n	80054fc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80054f0:	4b10      	ldr	r3, [pc, #64]	; (8005534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a0f      	ldr	r2, [pc, #60]	; (8005534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054f6:	f043 0304 	orr.w	r3, r3, #4
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f023 0201 	bic.w	r2, r3, #1
 8005504:	490b      	ldr	r1, [pc, #44]	; (8005534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800550c:	4b09      	ldr	r3, [pc, #36]	; (8005534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	429a      	cmp	r2, r3
 8005518:	d001      	beq.n	800551e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40023800 	.word	0x40023800
 8005530:	40007000 	.word	0x40007000
 8005534:	40023c00 	.word	0x40023c00

08005538 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e07b      	b.n	8005642 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	2b00      	cmp	r3, #0
 8005550:	d108      	bne.n	8005564 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800555a:	d009      	beq.n	8005570 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	61da      	str	r2, [r3, #28]
 8005562:	e005      	b.n	8005570 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fd fc28 	bl	8002de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f4:	ea42 0103 	orr.w	r1, r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	f003 0104 	and.w	r1, r3, #4
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	f003 0210 	and.w	r2, r3, #16
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005630:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b08c      	sub	sp, #48	; 0x30
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	607a      	str	r2, [r7, #4]
 8005656:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005658:	2301      	movs	r3, #1
 800565a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <HAL_SPI_TransmitReceive+0x26>
 800566c:	2302      	movs	r3, #2
 800566e:	e18a      	b.n	8005986 <HAL_SPI_TransmitReceive+0x33c>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005678:	f7fe fe6c 	bl	8004354 <HAL_GetTick>
 800567c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800568e:	887b      	ldrh	r3, [r7, #2]
 8005690:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005692:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005696:	2b01      	cmp	r3, #1
 8005698:	d00f      	beq.n	80056ba <HAL_SPI_TransmitReceive+0x70>
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a0:	d107      	bne.n	80056b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d103      	bne.n	80056b2 <HAL_SPI_TransmitReceive+0x68>
 80056aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d003      	beq.n	80056ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80056b2:	2302      	movs	r3, #2
 80056b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056b8:	e15b      	b.n	8005972 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d005      	beq.n	80056cc <HAL_SPI_TransmitReceive+0x82>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <HAL_SPI_TransmitReceive+0x82>
 80056c6:	887b      	ldrh	r3, [r7, #2]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d103      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056d2:	e14e      	b.n	8005972 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d003      	beq.n	80056e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2205      	movs	r2, #5
 80056e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	887a      	ldrh	r2, [r7, #2]
 80056f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	887a      	ldrh	r2, [r7, #2]
 80056fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	887a      	ldrh	r2, [r7, #2]
 800570a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	887a      	ldrh	r2, [r7, #2]
 8005710:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d007      	beq.n	800573c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800573a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005744:	d178      	bne.n	8005838 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <HAL_SPI_TransmitReceive+0x10a>
 800574e:	8b7b      	ldrh	r3, [r7, #26]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d166      	bne.n	8005822 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	881a      	ldrh	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005764:	1c9a      	adds	r2, r3, #2
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005778:	e053      	b.n	8005822 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b02      	cmp	r3, #2
 8005786:	d11b      	bne.n	80057c0 <HAL_SPI_TransmitReceive+0x176>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d016      	beq.n	80057c0 <HAL_SPI_TransmitReceive+0x176>
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	2b01      	cmp	r3, #1
 8005796:	d113      	bne.n	80057c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579c:	881a      	ldrh	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a8:	1c9a      	adds	r2, r3, #2
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d119      	bne.n	8005802 <HAL_SPI_TransmitReceive+0x1b8>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d014      	beq.n	8005802 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	b292      	uxth	r2, r2
 80057e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	1c9a      	adds	r2, r3, #2
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057fe:	2301      	movs	r3, #1
 8005800:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005802:	f7fe fda7 	bl	8004354 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800580e:	429a      	cmp	r2, r3
 8005810:	d807      	bhi.n	8005822 <HAL_SPI_TransmitReceive+0x1d8>
 8005812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005818:	d003      	beq.n	8005822 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005820:	e0a7      	b.n	8005972 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005826:	b29b      	uxth	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1a6      	bne.n	800577a <HAL_SPI_TransmitReceive+0x130>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1a1      	bne.n	800577a <HAL_SPI_TransmitReceive+0x130>
 8005836:	e07c      	b.n	8005932 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_SPI_TransmitReceive+0x1fc>
 8005840:	8b7b      	ldrh	r3, [r7, #26]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d16b      	bne.n	800591e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	330c      	adds	r3, #12
 8005850:	7812      	ldrb	r2, [r2, #0]
 8005852:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800586c:	e057      	b.n	800591e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b02      	cmp	r3, #2
 800587a:	d11c      	bne.n	80058b6 <HAL_SPI_TransmitReceive+0x26c>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d017      	beq.n	80058b6 <HAL_SPI_TransmitReceive+0x26c>
 8005886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005888:	2b01      	cmp	r3, #1
 800588a:	d114      	bne.n	80058b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	7812      	ldrb	r2, [r2, #0]
 8005898:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d119      	bne.n	80058f8 <HAL_SPI_TransmitReceive+0x2ae>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d014      	beq.n	80058f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058f4:	2301      	movs	r3, #1
 80058f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058f8:	f7fe fd2c 	bl	8004354 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005904:	429a      	cmp	r2, r3
 8005906:	d803      	bhi.n	8005910 <HAL_SPI_TransmitReceive+0x2c6>
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590e:	d102      	bne.n	8005916 <HAL_SPI_TransmitReceive+0x2cc>
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	2b00      	cmp	r3, #0
 8005914:	d103      	bne.n	800591e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800591c:	e029      	b.n	8005972 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1a2      	bne.n	800586e <HAL_SPI_TransmitReceive+0x224>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592c:	b29b      	uxth	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d19d      	bne.n	800586e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005934:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f8b2 	bl	8005aa0 <SPI_EndRxTxTransaction>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d006      	beq.n	8005950 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800594e:	e010      	b.n	8005972 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10b      	bne.n	8005970 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	e000      	b.n	8005972 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005970:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005982:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005986:	4618      	mov	r0, r3
 8005988:	3730      	adds	r7, #48	; 0x30
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	603b      	str	r3, [r7, #0]
 800599c:	4613      	mov	r3, r2
 800599e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059a0:	f7fe fcd8 	bl	8004354 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	4413      	add	r3, r2
 80059ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059b0:	f7fe fcd0 	bl	8004354 <HAL_GetTick>
 80059b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059b6:	4b39      	ldr	r3, [pc, #228]	; (8005a9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	015b      	lsls	r3, r3, #5
 80059bc:	0d1b      	lsrs	r3, r3, #20
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	fb02 f303 	mul.w	r3, r2, r3
 80059c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059c6:	e054      	b.n	8005a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ce:	d050      	beq.n	8005a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059d0:	f7fe fcc0 	bl	8004354 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d902      	bls.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d13d      	bne.n	8005a62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059fe:	d111      	bne.n	8005a24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a08:	d004      	beq.n	8005a14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a12:	d107      	bne.n	8005a24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a2c:	d10f      	bne.n	8005a4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e017      	b.n	8005a92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	bf0c      	ite	eq
 8005a82:	2301      	moveq	r3, #1
 8005a84:	2300      	movne	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d19b      	bne.n	80059c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3720      	adds	r7, #32
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20000098 	.word	0x20000098

08005aa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005aac:	4b1b      	ldr	r3, [pc, #108]	; (8005b1c <SPI_EndRxTxTransaction+0x7c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1b      	ldr	r2, [pc, #108]	; (8005b20 <SPI_EndRxTxTransaction+0x80>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	0d5b      	lsrs	r3, r3, #21
 8005ab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005abc:	fb02 f303 	mul.w	r3, r2, r3
 8005ac0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aca:	d112      	bne.n	8005af2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2180      	movs	r1, #128	; 0x80
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f7ff ff5a 	bl	8005990 <SPI_WaitFlagStateUntilTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d016      	beq.n	8005b10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae6:	f043 0220 	orr.w	r2, r3, #32
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e00f      	b.n	8005b12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00a      	beq.n	8005b0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b08:	2b80      	cmp	r3, #128	; 0x80
 8005b0a:	d0f2      	beq.n	8005af2 <SPI_EndRxTxTransaction+0x52>
 8005b0c:	e000      	b.n	8005b10 <SPI_EndRxTxTransaction+0x70>
        break;
 8005b0e:	bf00      	nop
  }

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000098 	.word	0x20000098
 8005b20:	165e9f81 	.word	0x165e9f81

08005b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e03f      	b.n	8005bb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7fd f98c 	bl	8002e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2224      	movs	r2, #36	; 0x24
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f905 	bl	8005d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695a      	ldr	r2, [r3, #20]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b08a      	sub	sp, #40	; 0x28
 8005bc2:	af02      	add	r7, sp, #8
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	603b      	str	r3, [r7, #0]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d17c      	bne.n	8005cd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_UART_Transmit+0x2c>
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e075      	b.n	8005cda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_UART_Transmit+0x3e>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e06e      	b.n	8005cda <HAL_UART_Transmit+0x11c>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2221      	movs	r2, #33	; 0x21
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c12:	f7fe fb9f 	bl	8004354 <HAL_GetTick>
 8005c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	88fa      	ldrh	r2, [r7, #6]
 8005c1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	88fa      	ldrh	r2, [r7, #6]
 8005c22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2c:	d108      	bne.n	8005c40 <HAL_UART_Transmit+0x82>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d104      	bne.n	8005c40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	e003      	b.n	8005c48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c50:	e02a      	b.n	8005ca8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2180      	movs	r1, #128	; 0x80
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 f840 	bl	8005ce2 <UART_WaitOnFlagUntilTimeout>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e036      	b.n	8005cda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10b      	bne.n	8005c8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	3302      	adds	r3, #2
 8005c86:	61bb      	str	r3, [r7, #24]
 8005c88:	e007      	b.n	8005c9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	781a      	ldrb	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	3301      	adds	r3, #1
 8005c98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1cf      	bne.n	8005c52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2140      	movs	r1, #64	; 0x40
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 f810 	bl	8005ce2 <UART_WaitOnFlagUntilTimeout>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e006      	b.n	8005cda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e000      	b.n	8005cda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005cd8:	2302      	movs	r3, #2
  }
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	603b      	str	r3, [r7, #0]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cf2:	e02c      	b.n	8005d4e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfa:	d028      	beq.n	8005d4e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d02:	f7fe fb27 	bl	8004354 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d21d      	bcs.n	8005d4e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d20:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0201 	bic.w	r2, r2, #1
 8005d30:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e00f      	b.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4013      	ands	r3, r2
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	bf0c      	ite	eq
 8005d5e:	2301      	moveq	r3, #1
 8005d60:	2300      	movne	r3, #0
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	461a      	mov	r2, r3
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d0c3      	beq.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005db8:	f023 030c 	bic.w	r3, r3, #12
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699a      	ldr	r2, [r3, #24]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a55      	ldr	r2, [pc, #340]	; (8005f38 <UART_SetConfig+0x1c0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d103      	bne.n	8005dee <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005de6:	f7ff fb33 	bl	8005450 <HAL_RCC_GetPCLK2Freq>
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	e002      	b.n	8005df4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005dee:	f7ff fb1b 	bl	8005428 <HAL_RCC_GetPCLK1Freq>
 8005df2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dfc:	d14c      	bne.n	8005e98 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4613      	mov	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	009a      	lsls	r2, r3, #2
 8005e08:	441a      	add	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	4a49      	ldr	r2, [pc, #292]	; (8005f3c <UART_SetConfig+0x1c4>)
 8005e16:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	0119      	lsls	r1, r3, #4
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	009a      	lsls	r2, r3, #2
 8005e28:	441a      	add	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e34:	4b41      	ldr	r3, [pc, #260]	; (8005f3c <UART_SetConfig+0x1c4>)
 8005e36:	fba3 0302 	umull	r0, r3, r3, r2
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	2064      	movs	r0, #100	; 0x64
 8005e3e:	fb00 f303 	mul.w	r3, r0, r3
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	3332      	adds	r3, #50	; 0x32
 8005e48:	4a3c      	ldr	r2, [pc, #240]	; (8005f3c <UART_SetConfig+0x1c4>)
 8005e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e56:	4419      	add	r1, r3
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009a      	lsls	r2, r3, #2
 8005e62:	441a      	add	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e6e:	4b33      	ldr	r3, [pc, #204]	; (8005f3c <UART_SetConfig+0x1c4>)
 8005e70:	fba3 0302 	umull	r0, r3, r3, r2
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	2064      	movs	r0, #100	; 0x64
 8005e78:	fb00 f303 	mul.w	r3, r0, r3
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	3332      	adds	r3, #50	; 0x32
 8005e82:	4a2e      	ldr	r2, [pc, #184]	; (8005f3c <UART_SetConfig+0x1c4>)
 8005e84:	fba2 2303 	umull	r2, r3, r2, r3
 8005e88:	095b      	lsrs	r3, r3, #5
 8005e8a:	f003 0207 	and.w	r2, r3, #7
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	440a      	add	r2, r1
 8005e94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e96:	e04a      	b.n	8005f2e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009a      	lsls	r2, r3, #2
 8005ea2:	441a      	add	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eae:	4a23      	ldr	r2, [pc, #140]	; (8005f3c <UART_SetConfig+0x1c4>)
 8005eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	0119      	lsls	r1, r3, #4
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009a      	lsls	r2, r3, #2
 8005ec2:	441a      	add	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ece:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <UART_SetConfig+0x1c4>)
 8005ed0:	fba3 0302 	umull	r0, r3, r3, r2
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	2064      	movs	r0, #100	; 0x64
 8005ed8:	fb00 f303 	mul.w	r3, r0, r3
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	3332      	adds	r3, #50	; 0x32
 8005ee2:	4a16      	ldr	r2, [pc, #88]	; (8005f3c <UART_SetConfig+0x1c4>)
 8005ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee8:	095b      	lsrs	r3, r3, #5
 8005eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eee:	4419      	add	r1, r3
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009a      	lsls	r2, r3, #2
 8005efa:	441a      	add	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f06:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <UART_SetConfig+0x1c4>)
 8005f08:	fba3 0302 	umull	r0, r3, r3, r2
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	2064      	movs	r0, #100	; 0x64
 8005f10:	fb00 f303 	mul.w	r3, r0, r3
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	3332      	adds	r3, #50	; 0x32
 8005f1a:	4a08      	ldr	r2, [pc, #32]	; (8005f3c <UART_SetConfig+0x1c4>)
 8005f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	f003 020f 	and.w	r2, r3, #15
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	609a      	str	r2, [r3, #8]
}
 8005f2e:	bf00      	nop
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40013800 	.word	0x40013800
 8005f3c:	51eb851f 	.word	0x51eb851f

08005f40 <ndefAllocRecord>:
 */


/*****************************************************************************/
static ndefRecord* ndefAllocRecord(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
    static ndefRecord ndefRecordPool[NDEF_MAX_RECORD];

    if (ndefRecordPoolIndex >= NDEF_MAX_RECORD)
 8005f44:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <ndefAllocRecord+0x34>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b09      	cmp	r3, #9
 8005f4a:	d901      	bls.n	8005f50 <ndefAllocRecord+0x10>
    {
        return NULL;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e00c      	b.n	8005f6a <ndefAllocRecord+0x2a>
    }

    return &ndefRecordPool[ndefRecordPoolIndex++];
 8005f50:	4b08      	ldr	r3, [pc, #32]	; (8005f74 <ndefAllocRecord+0x34>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	b2d1      	uxtb	r1, r2
 8005f58:	4a06      	ldr	r2, [pc, #24]	; (8005f74 <ndefAllocRecord+0x34>)
 8005f5a:	7011      	strb	r1, [r2, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4613      	mov	r3, r2
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	1a9b      	subs	r3, r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4a04      	ldr	r2, [pc, #16]	; (8005f78 <ndefAllocRecord+0x38>)
 8005f68:	4413      	add	r3, r2
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bc80      	pop	{r7}
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	20002df8 	.word	0x20002df8
 8005f78:	20002dfc 	.word	0x20002dfc

08005f7c <ndefMessageInit>:
 */
/*****************************************************************************/


ReturnCode ndefMessageInit(ndefMessage* message)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
    if (message == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <ndefMessageInit+0x12>
    {
        return ERR_PARAM;
 8005f8a:	2307      	movs	r3, #7
 8005f8c:	e00c      	b.n	8005fa8 <ndefMessageInit+0x2c>
    }

    message->record           = NULL;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]
    message->info.length      = 0;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	605a      	str	r2, [r3, #4]
    message->info.recordCount = 0;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	609a      	str	r2, [r3, #8]

    ndefRecordPoolIndex = 0;
 8005fa0:	4b04      	ldr	r3, [pc, #16]	; (8005fb4 <ndefMessageInit+0x38>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	20002df8 	.word	0x20002df8

08005fb8 <ndefMessageGetInfo>:


/*****************************************************************************/
ReturnCode ndefMessageGetInfo(const ndefMessage* message, ndefMessageInfo* info)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
    ndefRecord* record;
    uint32_t    length      = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	613b      	str	r3, [r7, #16]
    uint32_t    recordCount = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]

    if ( (message == NULL) || (info == NULL) )
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <ndefMessageGetInfo+0x1e>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <ndefMessageGetInfo+0x22>
    {
        return ERR_PARAM;
 8005fd6:	2307      	movs	r3, #7
 8005fd8:	e01a      	b.n	8006010 <ndefMessageGetInfo+0x58>
    }

    record = message->record;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	617b      	str	r3, [r7, #20]

    while (record != NULL)
 8005fe0:	e00c      	b.n	8005ffc <ndefMessageGetInfo+0x44>
    {
        length += ndefRecordGetLength(record);
 8005fe2:	6978      	ldr	r0, [r7, #20]
 8005fe4:	f000 f994 	bl	8006310 <ndefRecordGetLength>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4413      	add	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
        recordCount++;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	60fb      	str	r3, [r7, #12]

        record = record->next;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	617b      	str	r3, [r7, #20]
    while (record != NULL)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1ef      	bne.n	8005fe2 <ndefMessageGetInfo+0x2a>
    }

    info->length      = length;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	601a      	str	r2, [r3, #0]
    info->recordCount = recordCount;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3718      	adds	r7, #24
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <ndefMessageAppend>:
}


/*****************************************************************************/
ReturnCode ndefMessageAppend(ndefMessage* message, ndefRecord* record)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
    if ( (message == NULL) || (record == NULL) )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <ndefMessageAppend+0x16>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <ndefMessageAppend+0x1a>
    {
        return ERR_PARAM;
 800602e:	2307      	movs	r3, #7
 8006030:	e043      	b.n	80060ba <ndefMessageAppend+0xa2>
    }

    /* Clear the Message Begin bit */
    ndefHeaderClearMB(record);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800603a:	b2da      	uxtb	r2, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	701a      	strb	r2, [r3, #0]

    /* Record is appended so it is the last in the list, set the Message End bit */
    ndefHeaderSetME(record);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006048:	b2da      	uxtb	r2, r3
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	701a      	strb	r2, [r3, #0]

    record->next = NULL;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2200      	movs	r2, #0
 8006052:	619a      	str	r2, [r3, #24]

    if (message->record == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <ndefMessageAppend+0x5a>
    {
        /* Set the Message Begin bit for the first record only */
        ndefHeaderSetMB(record);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006064:	b2da      	uxtb	r2, r3
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	701a      	strb	r2, [r3, #0]

        message->record = record;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	e014      	b.n	800609c <ndefMessageAppend+0x84>
    }
    else
    {
        ndefRecord* current = message->record;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60fb      	str	r3, [r7, #12]

        /* Go through the list of records */
        while (current->next != NULL)
 8006078:	e002      	b.n	8006080 <ndefMessageAppend+0x68>
        {
            current = current->next;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	60fb      	str	r3, [r7, #12]
        while (current->next != NULL)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1f8      	bne.n	800607a <ndefMessageAppend+0x62>
        }

        /* Clear the Message End bit to the record before the one being appended */
        ndefHeaderClearME(current);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006090:	b2da      	uxtb	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	701a      	strb	r2, [r3, #0]

        /* Append to the last record */
        current->next = record;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	619a      	str	r2, [r3, #24]
    }

    message->info.length      += ndefRecordGetLength(record);
 800609c:	6838      	ldr	r0, [r7, #0]
 800609e:	f000 f937 	bl	8006310 <ndefRecordGetLength>
 80060a2:	4602      	mov	r2, r0
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	441a      	add	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	605a      	str	r2, [r3, #4]
    message->info.recordCount += 1U;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <ndefMessageDecode>:


/*****************************************************************************/
ReturnCode ndefMessageDecode(const ndefConstBuffer* bufPayload, ndefMessage* message)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b088      	sub	sp, #32
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    uint32_t offset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (message == NULL) )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d006      	beq.n	80060e0 <ndefMessageDecode+0x1e>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <ndefMessageDecode+0x1e>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <ndefMessageDecode+0x22>
    {
        return ERR_PARAM;
 80060e0:	2307      	movs	r3, #7
 80060e2:	e043      	b.n	800616c <ndefMessageDecode+0xaa>
    }

    err = ndefMessageInit(message);
 80060e4:	6838      	ldr	r0, [r7, #0]
 80060e6:	f7ff ff49 	bl	8005f7c <ndefMessageInit>
 80060ea:	4603      	mov	r3, r0
 80060ec:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 80060ee:	8b7b      	ldrh	r3, [r7, #26]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <ndefMessageDecode+0x36>
    {
        return err;
 80060f4:	8b7b      	ldrh	r3, [r7, #26]
 80060f6:	e039      	b.n	800616c <ndefMessageDecode+0xaa>
    }

    offset = 0;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61fb      	str	r3, [r7, #28]
    while (offset < bufPayload->length)
 80060fc:	e030      	b.n	8006160 <ndefMessageDecode+0x9e>
    {
        ndefConstBuffer bufRecord;
        ndefRecord* record = ndefAllocRecord();
 80060fe:	f7ff ff1f 	bl	8005f40 <ndefAllocRecord>
 8006102:	6178      	str	r0, [r7, #20]
        if (record == NULL)
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <ndefMessageDecode+0x4c>
        {
            return ERR_NOMEM;
 800610a:	2301      	movs	r3, #1
 800610c:	e02e      	b.n	800616c <ndefMessageDecode+0xaa>
        }
        bufRecord.buffer = &bufPayload->buffer[offset];
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
        bufRecord.length =  bufPayload->length - offset;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	613b      	str	r3, [r7, #16]
        err = ndefRecordDecode(&bufRecord, record);
 8006122:	f107 030c 	add.w	r3, r7, #12
 8006126:	6979      	ldr	r1, [r7, #20]
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fa32 	bl	8006592 <ndefRecordDecode>
 800612e:	4603      	mov	r3, r0
 8006130:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 8006132:	8b7b      	ldrh	r3, [r7, #26]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <ndefMessageDecode+0x7a>
        {
            return err;
 8006138:	8b7b      	ldrh	r3, [r7, #26]
 800613a:	e017      	b.n	800616c <ndefMessageDecode+0xaa>
        }
        offset += ndefRecordGetLength(record);
 800613c:	6978      	ldr	r0, [r7, #20]
 800613e:	f000 f8e7 	bl	8006310 <ndefRecordGetLength>
 8006142:	4602      	mov	r2, r0
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	4413      	add	r3, r2
 8006148:	61fb      	str	r3, [r7, #28]

        err = ndefMessageAppend(message, record);
 800614a:	6979      	ldr	r1, [r7, #20]
 800614c:	6838      	ldr	r0, [r7, #0]
 800614e:	f7ff ff63 	bl	8006018 <ndefMessageAppend>
 8006152:	4603      	mov	r3, r0
 8006154:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 8006156:	8b7b      	ldrh	r3, [r7, #26]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <ndefMessageDecode+0x9e>
        {
            return err;
 800615c:	8b7b      	ldrh	r3, [r7, #26]
 800615e:	e005      	b.n	800616c <ndefMessageDecode+0xaa>
    while (offset < bufPayload->length)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	429a      	cmp	r2, r3
 8006168:	d3c9      	bcc.n	80060fe <ndefMessageDecode+0x3c>
        }
    }

    return ERR_NONE;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3720      	adds	r7, #32
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <ndefMessageEncode>:


/*****************************************************************************/
ReturnCode ndefMessageEncode(const ndefMessage* message, ndefBuffer* bufPayload)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	; 0x28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
    ndefMessageInfo info;
    ndefRecord*     record;
    uint32_t        offset;
    uint32_t        remainingLength;

    if ( (message == NULL) || (bufPayload == NULL) || (bufPayload->buffer == NULL) )
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d006      	beq.n	8006192 <ndefMessageEncode+0x1e>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <ndefMessageEncode+0x1e>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <ndefMessageEncode+0x22>
    {
        return ERR_PARAM;
 8006192:	2307      	movs	r3, #7
 8006194:	e050      	b.n	8006238 <ndefMessageEncode+0xc4>
    }

    err = ndefMessageGetInfo(message, &info);
 8006196:	f107 0310 	add.w	r3, r7, #16
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff ff0b 	bl	8005fb8 <ndefMessageGetInfo>
 80061a2:	4603      	mov	r3, r0
 80061a4:	837b      	strh	r3, [r7, #26]
    if ( (err != ERR_NONE) || (bufPayload->length < info.length) )
 80061a6:	8b7b      	ldrh	r3, [r7, #26]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d104      	bne.n	80061b6 <ndefMessageEncode+0x42>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d204      	bcs.n	80061c0 <ndefMessageEncode+0x4c>
    {
        bufPayload->length = info.length;
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 80061bc:	2301      	movs	r3, #1
 80061be:	e03b      	b.n	8006238 <ndefMessageEncode+0xc4>
    }

    /* Get the first record */
    record          = ndefMessageGetFirstRecord(message);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <ndefMessageEncode+0x58>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	e000      	b.n	80061ce <ndefMessageEncode+0x5a>
 80061cc:	2300      	movs	r3, #0
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
    offset          = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	623b      	str	r3, [r7, #32]
    remainingLength = bufPayload->length;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	61fb      	str	r3, [r7, #28]

    while (record != NULL)
 80061da:	e026      	b.n	800622a <ndefMessageEncode+0xb6>
    {
        ndefBuffer bufRecord;
        bufRecord.buffer = &bufPayload->buffer[offset];
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	4413      	add	r3, r2
 80061e4:	60bb      	str	r3, [r7, #8]
        bufRecord.length = remainingLength;
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	60fb      	str	r3, [r7, #12]
        err = ndefRecordEncode(record, &bufRecord);
 80061ea:	f107 0308 	add.w	r3, r7, #8
 80061ee:	4619      	mov	r1, r3
 80061f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061f2:	f000 fb91 	bl	8006918 <ndefRecordEncode>
 80061f6:	4603      	mov	r3, r0
 80061f8:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 80061fa:	8b7b      	ldrh	r3, [r7, #26]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d004      	beq.n	800620a <ndefMessageEncode+0x96>
        {
            bufPayload->length = info.length;
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	605a      	str	r2, [r3, #4]
            return err;
 8006206:	8b7b      	ldrh	r3, [r7, #26]
 8006208:	e016      	b.n	8006238 <ndefMessageEncode+0xc4>
        }
        offset          += bufRecord.length;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a3a      	ldr	r2, [r7, #32]
 800620e:	4413      	add	r3, r2
 8006210:	623b      	str	r3, [r7, #32]
        remainingLength -= bufRecord.length;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	69fa      	ldr	r2, [r7, #28]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	61fb      	str	r3, [r7, #28]

        record = ndefMessageGetNextRecord(record);
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <ndefMessageEncode+0xb2>
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	e000      	b.n	8006228 <ndefMessageEncode+0xb4>
 8006226:	2300      	movs	r3, #0
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
    while (record != NULL)
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1d5      	bne.n	80061dc <ndefMessageEncode+0x68>
    }

    bufPayload->length = offset;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	6a3a      	ldr	r2, [r7, #32]
 8006234:	605a      	str	r2, [r3, #4]
    return ERR_NONE;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3728      	adds	r7, #40	; 0x28
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <ndefRecordReset>:
 */


/*****************************************************************************/
ReturnCode ndefRecordReset(ndefRecord* record)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
    ndefConstBuffer8 bufEmpty        = { NULL, 0 };
 8006248:	2300      	movs	r3, #0
 800624a:	613b      	str	r3, [r7, #16]
 800624c:	2300      	movs	r3, #0
 800624e:	753b      	strb	r3, [r7, #20]
    ndefConstBuffer  bufEmptyPayload = { NULL, 0 };
 8006250:	2300      	movs	r3, #0
 8006252:	60bb      	str	r3, [r7, #8]
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]

    if (record == NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <ndefRecordReset+0x22>
    {
        return ERR_PARAM;
 800625e:	2307      	movs	r3, #7
 8006260:	e01c      	b.n	800629c <ndefRecordReset+0x5c>
    }

    record->header = ndefHeader(0U, 0U, 0U, 0U, 0U, NDEF_TNF_EMPTY);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	701a      	strb	r2, [r3, #0]

    (void)ndefRecordSetType(record, NDEF_TNF_EMPTY, &bufEmpty);
 8006268:	f107 0310 	add.w	r3, r7, #16
 800626c:	461a      	mov	r2, r3
 800626e:	2100      	movs	r1, #0
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f866 	bl	8006342 <ndefRecordSetType>

    (void)ndefRecordSetId(record, &bufEmpty);
 8006276:	f107 0310 	add.w	r3, r7, #16
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f8e4 	bl	800644a <ndefRecordSetId>

    /* Set the SR bit */
    (void)ndefRecordSetPayload(record, &bufEmptyPayload);
 8006282:	f107 0308 	add.w	r3, r7, #8
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f92f 	bl	80064ec <ndefRecordSetPayload>

    record->ndeftype = NULL;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	615a      	str	r2, [r3, #20]

    record->next = NULL;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	619a      	str	r2, [r3, #24]

    return ERR_NONE;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <ndefRecordGetHeaderLength>:
}


/*****************************************************************************/
uint32_t ndefRecordGetHeaderLength(const ndefRecord* record)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
    uint32_t length;

    if (record == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <ndefRecordGetHeaderLength+0x12>
    {
        return 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	e027      	b.n	8006306 <ndefRecordGetHeaderLength+0x62>
    }

    length  = sizeof(uint8_t);      /* header (MB:1 + ME:1 + CF:1 + SR:1 + IL:1 + TNF:3 => 8 bits) */
 80062b6:	2301      	movs	r3, #1
 80062b8:	60fb      	str	r3, [r7, #12]
    length += sizeof(uint8_t);      /* Type length */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3301      	adds	r3, #1
 80062be:	60fb      	str	r3, [r7, #12]
    if (ndefHeaderIsSetSR(record))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <ndefRecordGetHeaderLength+0x30>
    {
        length += sizeof(uint8_t);  /* Short record */
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3301      	adds	r3, #1
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	e002      	b.n	80062da <ndefRecordGetHeaderLength+0x36>
    }
    else
    {
        length += sizeof(uint32_t); /* Standard record */
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3304      	adds	r3, #4
 80062d8:	60fb      	str	r3, [r7, #12]
    }
    if (ndefHeaderIsSetIL(record))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	f003 0308 	and.w	r3, r3, #8
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <ndefRecordGetHeaderLength+0x48>
    {
        length += sizeof(uint8_t);  /* Id length */
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3301      	adds	r3, #1
 80062ea:	60fb      	str	r3, [r7, #12]
    }
    length += record->typeLength;   /* Type */
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	461a      	mov	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
    length += record->idLength;     /* Id */
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	789b      	ldrb	r3, [r3, #2]
 80062fc:	461a      	mov	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4413      	add	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

    return length;
 8006304:	68fb      	ldr	r3, [r7, #12]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr

08006310 <ndefRecordGetLength>:


/*****************************************************************************/
uint32_t ndefRecordGetLength(const ndefRecord* record)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
    uint32_t length;

    if (record == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <ndefRecordGetLength+0x12>
    {
        return 0;
 800631e:	2300      	movs	r3, #0
 8006320:	e00b      	b.n	800633a <ndefRecordGetLength+0x2a>
    }

    length  = ndefRecordGetHeaderLength(record);  /* Header */
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff ffbe 	bl	80062a4 <ndefRecordGetHeaderLength>
 8006328:	60f8      	str	r0, [r7, #12]
    length += ndefRecordGetPayloadLength(record); /* Payload */
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fb75 	bl	8006a1a <ndefRecordGetPayloadLength>
 8006330:	4602      	mov	r2, r0
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]

    return length;
 8006338:	68fb      	ldr	r3, [r7, #12]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <ndefRecordSetType>:


/*****************************************************************************/
ReturnCode ndefRecordSetType(ndefRecord* record, uint8_t tnf, const ndefConstBuffer8* bufType)
{
 8006342:	b480      	push	{r7}
 8006344:	b085      	sub	sp, #20
 8006346:	af00      	add	r7, sp, #0
 8006348:	60f8      	str	r0, [r7, #12]
 800634a:	460b      	mov	r3, r1
 800634c:	607a      	str	r2, [r7, #4]
 800634e:	72fb      	strb	r3, [r7, #11]
    if ( (record  == NULL) ||
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <ndefRecordSetType+0x2a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d007      	beq.n	800636c <ndefRecordSetType+0x2a>
         (bufType == NULL) ||
         ( (bufType->buffer == NULL) && (bufType->length != 0U) ) )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
         (bufType == NULL) ||
 8006360:	2b00      	cmp	r3, #0
 8006362:	d105      	bne.n	8006370 <ndefRecordSetType+0x2e>
         ( (bufType->buffer == NULL) && (bufType->length != 0U) ) )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	791b      	ldrb	r3, [r3, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <ndefRecordSetType+0x2e>
    {
        return ERR_PARAM;
 800636c:	2307      	movs	r3, #7
 800636e:	e012      	b.n	8006396 <ndefRecordSetType+0x54>
    }

    ndefHeaderSetTNF(record, tnf);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	781a      	ldrb	r2, [r3, #0]
 8006374:	7afb      	ldrb	r3, [r7, #11]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	b2db      	uxtb	r3, r3
 800637c:	4313      	orrs	r3, r2
 800637e:	b2da      	uxtb	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	701a      	strb	r2, [r3, #0]

    record->typeLength = bufType->length;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	791a      	ldrb	r2, [r3, #4]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	705a      	strb	r2, [r3, #1]
    record->type       = bufType->buffer;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	bc80      	pop	{r7}
 800639e:	4770      	bx	lr

080063a0 <ndefRecordGetType>:


/*****************************************************************************/
ReturnCode ndefRecordGetType(const ndefRecord* record, uint8_t* tnf, ndefConstBuffer8* bufType)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
    if ( (record == NULL) || (tnf == NULL) || (bufType == NULL) )
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d005      	beq.n	80063be <ndefRecordGetType+0x1e>
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <ndefRecordGetType+0x1e>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <ndefRecordGetType+0x22>
    {
        return ERR_PARAM;
 80063be:	2307      	movs	r3, #7
 80063c0:	e00f      	b.n	80063e2 <ndefRecordGetType+0x42>
    }

    *tnf            = ndefHeaderTNF(record);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	701a      	strb	r2, [r3, #0]
    bufType->buffer = record->type;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	601a      	str	r2, [r3, #0]
    bufType->length = record->typeLength;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	785a      	ldrb	r2, [r3, #1]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	711a      	strb	r2, [r3, #4]

    return ERR_NONE;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bc80      	pop	{r7}
 80063ea:	4770      	bx	lr

080063ec <ndefRecordTypeMatch>:


/*****************************************************************************/
bool ndefRecordTypeMatch(const ndefRecord* record, uint8_t tnf, const ndefConstBuffer8* bufType)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	460b      	mov	r3, r1
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	72fb      	strb	r3, [r7, #11]
    if ( (record == NULL) || (bufType == NULL) )
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <ndefRecordTypeMatch+0x1a>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <ndefRecordTypeMatch+0x1e>
    {
        return false;
 8006406:	2300      	movs	r3, #0
 8006408:	e01b      	b.n	8006442 <ndefRecordTypeMatch+0x56>
    }

    if ( (ndefHeaderTNF(record) == tnf)             &&
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	f003 0207 	and.w	r2, r3, #7
 8006412:	7afb      	ldrb	r3, [r7, #11]
 8006414:	429a      	cmp	r2, r3
 8006416:	d113      	bne.n	8006440 <ndefRecordTypeMatch+0x54>
         (record->typeLength    == bufType->length) &&
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	785a      	ldrb	r2, [r3, #1]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	791b      	ldrb	r3, [r3, #4]
    if ( (ndefHeaderTNF(record) == tnf)             &&
 8006420:	429a      	cmp	r2, r3
 8006422:	d10d      	bne.n	8006440 <ndefRecordTypeMatch+0x54>
         (ST_BYTECMP(record->type, bufType->buffer, bufType->length) == 0) )
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6858      	ldr	r0, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6819      	ldr	r1, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	791b      	ldrb	r3, [r3, #4]
 8006430:	461a      	mov	r2, r3
 8006432:	f012 fcd1 	bl	8018dd8 <memcmp>
 8006436:	4603      	mov	r3, r0
         (record->typeLength    == bufType->length) &&
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <ndefRecordTypeMatch+0x54>
    {
        return true;
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <ndefRecordTypeMatch+0x56>
    }

     return false;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <ndefRecordSetId>:


/*****************************************************************************/
ReturnCode ndefRecordSetId(ndefRecord* record, const ndefConstBuffer8* bufId)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) ||
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <ndefRecordSetId+0x26>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d007      	beq.n	8006470 <ndefRecordSetId+0x26>
         (bufId  == NULL) ||
         ( (bufId->buffer == NULL) && (bufId->length != 0U) ) )
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
         (bufId  == NULL) ||
 8006464:	2b00      	cmp	r3, #0
 8006466:	d105      	bne.n	8006474 <ndefRecordSetId+0x2a>
         ( (bufId->buffer == NULL) && (bufId->length != 0U) ) )
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	791b      	ldrb	r3, [r3, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <ndefRecordSetId+0x2a>
    {
        return ERR_PARAM;
 8006470:	2307      	movs	r3, #7
 8006472:	e01b      	b.n	80064ac <ndefRecordSetId+0x62>
    }

    if (bufId->buffer != NULL)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d007      	beq.n	800648c <ndefRecordSetId+0x42>
    {
        ndefHeaderSetIL(record);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	f043 0308 	orr.w	r3, r3, #8
 8006484:	b2da      	uxtb	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	e006      	b.n	800649a <ndefRecordSetId+0x50>
    }
    else
    {
        ndefHeaderClearIL(record);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	f023 0308 	bic.w	r3, r3, #8
 8006494:	b2da      	uxtb	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	701a      	strb	r2, [r3, #0]
    }

    record->id       = bufId->buffer;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	609a      	str	r2, [r3, #8]
    record->idLength = bufId->length;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	791a      	ldrb	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	709a      	strb	r2, [r3, #2]

    return ERR_NONE;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc80      	pop	{r7}
 80064b4:	4770      	bx	lr

080064b6 <ndefRecordGetId>:


/*****************************************************************************/
ReturnCode ndefRecordGetId(const ndefRecord* record, ndefConstBuffer8* bufId)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (bufId == NULL) )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <ndefRecordGetId+0x16>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <ndefRecordGetId+0x1a>
    {
        return ERR_PARAM;
 80064cc:	2307      	movs	r3, #7
 80064ce:	e008      	b.n	80064e2 <ndefRecordGetId+0x2c>
    }

    bufId->buffer = record->id;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	601a      	str	r2, [r3, #0]
    bufId->length = record->idLength;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	789a      	ldrb	r2, [r3, #2]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	711a      	strb	r2, [r3, #4]

    return ERR_NONE;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr

080064ec <ndefRecordSetPayload>:


/*****************************************************************************/
ReturnCode ndefRecordSetPayload(ndefRecord* record, const ndefConstBuffer* bufPayload)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
    if ( (record     == NULL) ||
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <ndefRecordSetPayload+0x26>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d007      	beq.n	8006512 <ndefRecordSetPayload+0x26>
         (bufPayload == NULL) ||
         ( (bufPayload->buffer == NULL) && (bufPayload->length != 0U) ) )
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
         (bufPayload == NULL) ||
 8006506:	2b00      	cmp	r3, #0
 8006508:	d105      	bne.n	8006516 <ndefRecordSetPayload+0x2a>
         ( (bufPayload->buffer == NULL) && (bufPayload->length != 0U) ) )
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <ndefRecordSetPayload+0x2a>
    {
        return ERR_PARAM;
 8006512:	2307      	movs	r3, #7
 8006514:	e01c      	b.n	8006550 <ndefRecordSetPayload+0x64>
    }

    ndefHeaderSetValueSR(record, (bufPayload->length <= NDEF_SHORT_RECORD_LENGTH_MAX) ? 1 : 0);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	f023 0310 	bic.w	r3, r3, #16
 800651e:	b2da      	uxtb	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	6852      	ldr	r2, [r2, #4]
 800652c:	2aff      	cmp	r2, #255	; 0xff
 800652e:	d801      	bhi.n	8006534 <ndefRecordSetPayload+0x48>
 8006530:	2210      	movs	r2, #16
 8006532:	e000      	b.n	8006536 <ndefRecordSetPayload+0x4a>
 8006534:	2200      	movs	r2, #0
 8006536:	4313      	orrs	r3, r2
 8006538:	b2da      	uxtb	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	701a      	strb	r2, [r3, #0]

    record->bufPayload.buffer = bufPayload->buffer;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	60da      	str	r2, [r3, #12]
    record->bufPayload.length = bufPayload->length;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr

0800655a <ndefRecordGetPayload>:


/*****************************************************************************/
ReturnCode ndefRecordGetPayload(const ndefRecord* record, ndefConstBuffer* bufPayload)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b082      	sub	sp, #8
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (bufPayload == NULL) )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <ndefRecordGetPayload+0x16>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <ndefRecordGetPayload+0x1a>
    {
        return ERR_PARAM;
 8006570:	2307      	movs	r3, #7
 8006572:	e00a      	b.n	800658a <ndefRecordGetPayload+0x30>
    }

    bufPayload->buffer = record->bufPayload.buffer;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	601a      	str	r2, [r3, #0]
    bufPayload->length = ndefRecordGetPayloadLength(record);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fa4c 	bl	8006a1a <ndefRecordGetPayloadLength>
 8006582:	4602      	mov	r2, r0
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <ndefRecordDecode>:


/*****************************************************************************/
ReturnCode ndefRecordDecode(const ndefConstBuffer* bufPayload, ndefRecord* record)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
    uint32_t offset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (record == NULL) )
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d006      	beq.n	80065b0 <ndefRecordDecode+0x1e>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <ndefRecordDecode+0x1e>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <ndefRecordDecode+0x22>
    {
        return ERR_PARAM;
 80065b0:	2307      	movs	r3, #7
 80065b2:	e0e7      	b.n	8006784 <ndefRecordDecode+0x1f2>
    }

    if (ndefRecordReset(record) != ERR_NONE)
 80065b4:	6838      	ldr	r0, [r7, #0]
 80065b6:	f7ff fe43 	bl	8006240 <ndefRecordReset>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <ndefRecordDecode+0x32>
    {
        return ERR_INTERNAL;
 80065c0:	230c      	movs	r3, #12
 80065c2:	e0df      	b.n	8006784 <ndefRecordDecode+0x1f2>
    }

    /* Get "header" byte */
    offset = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
    if ((offset + sizeof(uint8_t)) > bufPayload->length)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d901      	bls.n	80065d8 <ndefRecordDecode+0x46>
    {
        return ERR_PROTO;
 80065d4:	230b      	movs	r3, #11
 80065d6:	e0d5      	b.n	8006784 <ndefRecordDecode+0x1f2>
    }
    record->header = bufPayload->buffer[offset];
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	781a      	ldrb	r2, [r3, #0]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	701a      	strb	r2, [r3, #0]
    offset++;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3301      	adds	r3, #1
 80065ea:	60fb      	str	r3, [r7, #12]

    /* Get Type length */
    if ((offset + sizeof(uint8_t)) > bufPayload->length)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d901      	bls.n	80065fc <ndefRecordDecode+0x6a>
    {
        return ERR_PROTO;
 80065f8:	230b      	movs	r3, #11
 80065fa:	e0c3      	b.n	8006784 <ndefRecordDecode+0x1f2>
    }
    record->typeLength = bufPayload->buffer[offset];
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	781a      	ldrb	r2, [r3, #0]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	705a      	strb	r2, [r3, #1]
    offset++;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3301      	adds	r3, #1
 800660e:	60fb      	str	r3, [r7, #12]

    /* Decode Payload length */
    if (ndefHeaderIsSetSR(record))
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	f003 0310 	and.w	r3, r3, #16
 8006618:	2b00      	cmp	r3, #0
 800661a:	d013      	beq.n	8006644 <ndefRecordDecode+0xb2>
    {
        /* Short record */
        if ((offset + sizeof(uint8_t)) > bufPayload->length)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	429a      	cmp	r2, r3
 8006626:	d901      	bls.n	800662c <ndefRecordDecode+0x9a>
        {
            return ERR_PROTO;
 8006628:	230b      	movs	r3, #11
 800662a:	e0ab      	b.n	8006784 <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.length = bufPayload->buffer[offset]; /* length stored on a single byte for Short Record */
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	611a      	str	r2, [r3, #16]
        offset++;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3301      	adds	r3, #1
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	e029      	b.n	8006698 <ndefRecordDecode+0x106>
    }
    else
    {
        /* Standard record */
        if ((offset + sizeof(uint32_t)) > bufPayload->length)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	1d1a      	adds	r2, r3, #4
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	429a      	cmp	r2, r3
 800664e:	d901      	bls.n	8006654 <ndefRecordDecode+0xc2>
        {
            return ERR_PROTO;
 8006650:	230b      	movs	r3, #11
 8006652:	e097      	b.n	8006784 <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.length = GETU32(&bufPayload->buffer[offset]);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4413      	add	r3, r2
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	061a      	lsls	r2, r3, #24
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6819      	ldr	r1, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3301      	adds	r3, #1
 8006668:	440b      	add	r3, r1
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	041b      	lsls	r3, r3, #16
 800666e:	431a      	orrs	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6819      	ldr	r1, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3302      	adds	r3, #2
 8006678:	440b      	add	r3, r1
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	4313      	orrs	r3, r2
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6811      	ldr	r1, [r2, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	3203      	adds	r2, #3
 8006688:	440a      	add	r2, r1
 800668a:	7812      	ldrb	r2, [r2, #0]
 800668c:	431a      	orrs	r2, r3
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	611a      	str	r2, [r3, #16]
        offset += sizeof(uint32_t);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3304      	adds	r3, #4
 8006696:	60fb      	str	r3, [r7, #12]
    }

    /* Get Id length */
    if (ndefHeaderIsSetIL(record))
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d012      	beq.n	80066ca <ndefRecordDecode+0x138>
    {
        if ((offset + sizeof(uint8_t)) > bufPayload->length)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d901      	bls.n	80066b4 <ndefRecordDecode+0x122>
        {
            return ERR_PROTO;
 80066b0:	230b      	movs	r3, #11
 80066b2:	e067      	b.n	8006784 <ndefRecordDecode+0x1f2>
        }
        record->idLength = bufPayload->buffer[offset];
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	781a      	ldrb	r2, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	709a      	strb	r2, [r3, #2]
        offset++;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3301      	adds	r3, #1
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	e002      	b.n	80066d0 <ndefRecordDecode+0x13e>
    }
    else
    {
        record->idLength = 0;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2200      	movs	r2, #0
 80066ce:	709a      	strb	r2, [r3, #2]
    }

    /* Get Type */
    if (record->typeLength > 0U)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	785b      	ldrb	r3, [r3, #1]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d017      	beq.n	8006708 <ndefRecordDecode+0x176>
    {
        if ((offset + record->typeLength) > bufPayload->length)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	785b      	ldrb	r3, [r3, #1]
 80066dc:	461a      	mov	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	441a      	add	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d901      	bls.n	80066ee <ndefRecordDecode+0x15c>
        {
            return ERR_PROTO;
 80066ea:	230b      	movs	r3, #11
 80066ec:	e04a      	b.n	8006784 <ndefRecordDecode+0x1f2>
        }
        record->type = &bufPayload->buffer[offset];
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	441a      	add	r2, r3
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	605a      	str	r2, [r3, #4]
        offset += record->typeLength;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	785b      	ldrb	r3, [r3, #1]
 80066fe:	461a      	mov	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	e002      	b.n	800670e <ndefRecordDecode+0x17c>
    }
    else
    {
        record->type = NULL;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	605a      	str	r2, [r3, #4]
    }

    /* Get Id */
    if (record->idLength > 0U)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	789b      	ldrb	r3, [r3, #2]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d017      	beq.n	8006746 <ndefRecordDecode+0x1b4>
    {
        if ((offset + record->idLength) > bufPayload->length)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	789b      	ldrb	r3, [r3, #2]
 800671a:	461a      	mov	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	441a      	add	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	429a      	cmp	r2, r3
 8006726:	d901      	bls.n	800672c <ndefRecordDecode+0x19a>
        {
            return ERR_PROTO;
 8006728:	230b      	movs	r3, #11
 800672a:	e02b      	b.n	8006784 <ndefRecordDecode+0x1f2>
        }
        record->id = &bufPayload->buffer[offset];
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	441a      	add	r2, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	609a      	str	r2, [r3, #8]
        offset += record->idLength;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	789b      	ldrb	r3, [r3, #2]
 800673c:	461a      	mov	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	e002      	b.n	800674c <ndefRecordDecode+0x1ba>
    }
    else
    {
        record->id = NULL;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2200      	movs	r2, #0
 800674a:	609a      	str	r2, [r3, #8]
    }

    /* Get Payload */
    if (record->bufPayload.length > 0U)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d010      	beq.n	8006776 <ndefRecordDecode+0x1e4>
    {
        if ((offset + record->bufPayload.length) > bufPayload->length)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	691a      	ldr	r2, [r3, #16]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	441a      	add	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	429a      	cmp	r2, r3
 8006762:	d901      	bls.n	8006768 <ndefRecordDecode+0x1d6>
        {
            return ERR_PROTO;
 8006764:	230b      	movs	r3, #11
 8006766:	e00d      	b.n	8006784 <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.buffer = &bufPayload->buffer[offset];
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	441a      	add	r2, r3
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	60da      	str	r2, [r3, #12]
 8006774:	e002      	b.n	800677c <ndefRecordDecode+0x1ea>
    }
    else
    {
        record->bufPayload.buffer = NULL;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2200      	movs	r2, #0
 800677a:	60da      	str	r2, [r3, #12]
    }

    // Doesn't recognize WKT ...

    record->next = NULL;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2200      	movs	r2, #0
 8006780:	619a      	str	r2, [r3, #24]

    return ERR_NONE;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <ndefRecordEncodeHeader>:


/*****************************************************************************/
ReturnCode ndefRecordEncodeHeader(const ndefRecord* record, ndefBuffer* bufHeader)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint32_t payloadLength;

    if ( (record == NULL) || (bufHeader == NULL) || (bufHeader->buffer == NULL) )
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d006      	beq.n	80067aa <ndefRecordEncodeHeader+0x1e>
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <ndefRecordEncodeHeader+0x1e>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <ndefRecordEncodeHeader+0x22>
    {
        return ERR_PARAM;
 80067aa:	2307      	movs	r3, #7
 80067ac:	e06f      	b.n	800688e <ndefRecordEncodeHeader+0x102>
    }

    if (bufHeader->length < NDEF_RECORD_HEADER_LEN)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2b06      	cmp	r3, #6
 80067b4:	d804      	bhi.n	80067c0 <ndefRecordEncodeHeader+0x34>
    {
        bufHeader->length = NDEF_RECORD_HEADER_LEN;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2207      	movs	r2, #7
 80067ba:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 80067bc:	2301      	movs	r3, #1
 80067be:	e066      	b.n	800688e <ndefRecordEncodeHeader+0x102>
    }

    /* Start encoding the record */
    offset = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]
    bufHeader->buffer[offset] = record->header;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4413      	add	r3, r2
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	7812      	ldrb	r2, [r2, #0]
 80067d0:	701a      	strb	r2, [r3, #0]
    offset++;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3301      	adds	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]

    /* Set Type length */
    bufHeader->buffer[offset] = record->typeLength;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	7852      	ldrb	r2, [r2, #1]
 80067e4:	701a      	strb	r2, [r3, #0]
    offset++;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]

    /* Encode Payload length */
    payloadLength = ndefRecordGetPayloadLength(record);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f914 	bl	8006a1a <ndefRecordGetPayloadLength>
 80067f2:	60b8      	str	r0, [r7, #8]

    if (payloadLength <= NDEF_SHORT_RECORD_LENGTH_MAX)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2bff      	cmp	r3, #255	; 0xff
 80067f8:	d80a      	bhi.n	8006810 <ndefRecordEncodeHeader+0x84>
    {
        /* Short record */
        bufHeader->buffer[offset] = (uint8_t)payloadLength;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4413      	add	r3, r2
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]
        offset++;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3301      	adds	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e02a      	b.n	8006866 <ndefRecordEncodeHeader+0xda>
    }
    else
    {
        /* Standard record */
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 24);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	0e19      	lsrs	r1, r3, #24
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	b2ca      	uxtb	r2, r1
 800681e:	701a      	strb	r2, [r3, #0]
        offset++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3301      	adds	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 16);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	0c19      	lsrs	r1, r3, #16
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	b2ca      	uxtb	r2, r1
 8006834:	701a      	strb	r2, [r3, #0]
        offset++;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	3301      	adds	r3, #1
 800683a:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 8);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	0a19      	lsrs	r1, r3, #8
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	b2ca      	uxtb	r2, r1
 800684a:	701a      	strb	r2, [r3, #0]
        offset++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3301      	adds	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4413      	add	r3, r2
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]
        offset++;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3301      	adds	r3, #1
 8006864:	60fb      	str	r3, [r7, #12]
    }

    /* Encode Id length */
    if (ndefHeaderIsSetIL(record))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b00      	cmp	r3, #0
 8006870:	d009      	beq.n	8006886 <ndefRecordEncodeHeader+0xfa>
    {
        bufHeader->buffer[offset] = record->idLength;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4413      	add	r3, r2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	7892      	ldrb	r2, [r2, #2]
 800687e:	701a      	strb	r2, [r3, #0]
        offset++;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3301      	adds	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]
    }

    bufHeader->length = offset;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <ndefRecordPayloadEncode>:


/*****************************************************************************/
static ReturnCode ndefRecordPayloadEncode(const ndefRecord* record, ndefBuffer* bufPayload)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b088      	sub	sp, #32
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
    uint32_t payloadLength;
    uint32_t offset;
    bool     begin;
    ndefConstBuffer bufPayloadItem;

    if ( (record == NULL) || (bufPayload == NULL) )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <ndefRecordPayloadEncode+0x16>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <ndefRecordPayloadEncode+0x1a>
    {
        return ERR_PROTO;
 80068ac:	230b      	movs	r3, #11
 80068ae:	e02f      	b.n	8006910 <ndefRecordPayloadEncode+0x7a>
    }

    payloadLength = ndefRecordGetPayloadLength(record);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f8b2 	bl	8006a1a <ndefRecordGetPayloadLength>
 80068b6:	6178      	str	r0, [r7, #20]
    if (payloadLength > bufPayload->length)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d901      	bls.n	80068c6 <ndefRecordPayloadEncode+0x30>
    {
        return ERR_NOMEM;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e024      	b.n	8006910 <ndefRecordPayloadEncode+0x7a>
    }

    begin  = true;
 80068c6:	2301      	movs	r3, #1
 80068c8:	76fb      	strb	r3, [r7, #27]
    offset = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	61fb      	str	r3, [r7, #28]
    while (ndefRecordGetPayloadItem(record, &bufPayloadItem, begin) != NULL)
 80068ce:	e011      	b.n	80068f4 <ndefRecordPayloadEncode+0x5e>
    {
        begin = false;
 80068d0:	2300      	movs	r3, #0
 80068d2:	76fb      	strb	r3, [r7, #27]
        if (bufPayloadItem.length > 0U)
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <ndefRecordPayloadEncode+0x56>
        {
            ST_MEMCPY(&bufPayload->buffer[offset], bufPayloadItem.buffer, bufPayloadItem.length);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	4413      	add	r3, r2
 80068e2:	68f9      	ldr	r1, [r7, #12]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f012 fa85 	bl	8018df6 <memcpy>
        }
        offset += bufPayloadItem.length;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	4413      	add	r3, r2
 80068f2:	61fb      	str	r3, [r7, #28]
    while (ndefRecordGetPayloadItem(record, &bufPayloadItem, begin) != NULL)
 80068f4:	7efa      	ldrb	r2, [r7, #27]
 80068f6:	f107 030c 	add.w	r3, r7, #12
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f8af 	bl	8006a60 <ndefRecordGetPayloadItem>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e3      	bne.n	80068d0 <ndefRecordPayloadEncode+0x3a>
    }

    bufPayload->length = offset;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	69fa      	ldr	r2, [r7, #28]
 800690c:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3720      	adds	r7, #32
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <ndefRecordEncode>:


/*****************************************************************************/
ReturnCode ndefRecordEncode(const ndefRecord* record, ndefBuffer* bufRecord)
{
 8006918:	b590      	push	{r4, r7, lr}
 800691a:	b089      	sub	sp, #36	; 0x24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    ndefBuffer bufHeader;
    ndefBuffer bufPayload;
    uint32_t   offset;

    if ( (record == NULL) || (bufRecord == NULL) || (bufRecord->buffer == NULL) )
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d006      	beq.n	8006936 <ndefRecordEncode+0x1e>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <ndefRecordEncode+0x1e>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <ndefRecordEncode+0x22>
    {
        return ERR_PARAM;
 8006936:	2307      	movs	r3, #7
 8006938:	e06b      	b.n	8006a12 <ndefRecordEncode+0xfa>
    }

    if (bufRecord->length < ndefRecordGetLength(record))
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685c      	ldr	r4, [r3, #4]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff fce6 	bl	8006310 <ndefRecordGetLength>
 8006944:	4603      	mov	r3, r0
 8006946:	429c      	cmp	r4, r3
 8006948:	d207      	bcs.n	800695a <ndefRecordEncode+0x42>
    {
        bufRecord->length = ndefRecordGetLength(record);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff fce0 	bl	8006310 <ndefRecordGetLength>
 8006950:	4602      	mov	r2, r0
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 8006956:	2301      	movs	r3, #1
 8006958:	e05b      	b.n	8006a12 <ndefRecordEncode+0xfa>
    }

    /* Encode header at the begining of buffer provided */
    bufHeader.buffer = bufRecord->buffer;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	613b      	str	r3, [r7, #16]
    bufHeader.length = bufRecord->length;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	617b      	str	r3, [r7, #20]
    err = ndefRecordEncodeHeader(record, &bufHeader);
 8006966:	f107 0310 	add.w	r3, r7, #16
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ff0d 	bl	800678c <ndefRecordEncodeHeader>
 8006972:	4603      	mov	r3, r0
 8006974:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 8006976:	8b7b      	ldrh	r3, [r7, #26]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <ndefRecordEncode+0x68>
    {
        return err;
 800697c:	8b7b      	ldrh	r3, [r7, #26]
 800697e:	e048      	b.n	8006a12 <ndefRecordEncode+0xfa>
    }

    offset = bufHeader.length;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	61fb      	str	r3, [r7, #28]

    /* Set Type */
    if (record->typeLength > 0U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	785b      	ldrb	r3, [r3, #1]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d010      	beq.n	80069ae <ndefRecordEncode+0x96>
    {
        (void)ST_MEMCPY(&bufRecord->buffer[offset], record->type, record->typeLength);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	18d0      	adds	r0, r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6859      	ldr	r1, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	785b      	ldrb	r3, [r3, #1]
 800699c:	461a      	mov	r2, r3
 800699e:	f012 fa2a 	bl	8018df6 <memcpy>
        offset += record->typeLength;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	461a      	mov	r2, r3
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	4413      	add	r3, r2
 80069ac:	61fb      	str	r3, [r7, #28]
    }

    /* Set Id */
    if (record->idLength > 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	789b      	ldrb	r3, [r3, #2]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d010      	beq.n	80069d8 <ndefRecordEncode+0xc0>
    {
        (void)ST_MEMCPY(&bufRecord->buffer[offset], record->id, record->idLength);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	18d0      	adds	r0, r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6899      	ldr	r1, [r3, #8]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	789b      	ldrb	r3, [r3, #2]
 80069c6:	461a      	mov	r2, r3
 80069c8:	f012 fa15 	bl	8018df6 <memcpy>
        offset += record->idLength;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	789b      	ldrb	r3, [r3, #2]
 80069d0:	461a      	mov	r2, r3
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	4413      	add	r3, r2
 80069d6:	61fb      	str	r3, [r7, #28]
    }

    /* Set Payload */
    bufPayload.buffer = &bufRecord->buffer[offset];
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	4413      	add	r3, r2
 80069e0:	60bb      	str	r3, [r7, #8]
    bufPayload.length =  bufRecord->length - offset;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	60fb      	str	r3, [r7, #12]
    err = ndefRecordPayloadEncode(record, &bufPayload);
 80069ec:	f107 0308 	add.w	r3, r7, #8
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7ff ff4f 	bl	8006896 <ndefRecordPayloadEncode>
 80069f8:	4603      	mov	r3, r0
 80069fa:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 80069fc:	8b7b      	ldrh	r3, [r7, #26]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <ndefRecordEncode+0xee>
    {
        return err;
 8006a02:	8b7b      	ldrh	r3, [r7, #26]
 8006a04:	e005      	b.n	8006a12 <ndefRecordEncode+0xfa>
    }

    bufRecord->length = offset + bufPayload.length;
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	441a      	add	r2, r3
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3724      	adds	r7, #36	; 0x24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd90      	pop	{r4, r7, pc}

08006a1a <ndefRecordGetPayloadLength>:


/*****************************************************************************/
uint32_t ndefRecordGetPayloadLength(const ndefRecord* record)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
    uint32_t payloadLength;

    if (record == NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <ndefRecordGetPayloadLength+0x12>
    {
        return 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	e015      	b.n	8006a58 <ndefRecordGetPayloadLength+0x3e>
    }

    if ( (record->ndeftype != NULL) && (record->ndeftype->getPayloadLength != NULL) )
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00d      	beq.n	8006a50 <ndefRecordGetPayloadLength+0x36>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d008      	beq.n	8006a50 <ndefRecordGetPayloadLength+0x36>
    {
        payloadLength = record->ndeftype->getPayloadLength(record->ndeftype);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	6952      	ldr	r2, [r2, #20]
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4798      	blx	r3
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	e002      	b.n	8006a56 <ndefRecordGetPayloadLength+0x3c>
    }
    else
    {
        payloadLength = record->bufPayload.length;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	60fb      	str	r3, [r7, #12]
    }

    return payloadLength;
 8006a56:	68fb      	ldr	r3, [r7, #12]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <ndefRecordGetPayloadItem>:


/*****************************************************************************/
const uint8_t* ndefRecordGetPayloadItem(const ndefRecord* record, ndefConstBuffer* bufPayloadItem, bool begin)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	71fb      	strb	r3, [r7, #7]
    if ( (record == NULL) || (bufPayloadItem == NULL) )
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <ndefRecordGetPayloadItem+0x1a>
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <ndefRecordGetPayloadItem+0x1e>
    {
        return NULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e020      	b.n	8006ac0 <ndefRecordGetPayloadItem+0x60>
    }

    bufPayloadItem->buffer = NULL;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]
    bufPayloadItem->length = 0;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2200      	movs	r2, #0
 8006a88:	605a      	str	r2, [r3, #4]

    if ( (record->ndeftype != NULL) && (record->ndeftype->getPayloadItem != NULL) )
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00d      	beq.n	8006aae <ndefRecordGetPayloadItem+0x4e>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d008      	beq.n	8006aae <ndefRecordGetPayloadItem+0x4e>
    {
        record->ndeftype->getPayloadItem(record->ndeftype, bufPayloadItem, begin);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	6950      	ldr	r0, [r2, #20]
 8006aa6:	79fa      	ldrb	r2, [r7, #7]
 8006aa8:	68b9      	ldr	r1, [r7, #8]
 8006aaa:	4798      	blx	r3
 8006aac:	e006      	b.n	8006abc <ndefRecordGetPayloadItem+0x5c>
    }
    else
    {
        if (begin == true)
 8006aae:	79fb      	ldrb	r3, [r7, #7]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <ndefRecordGetPayloadItem+0x5c>
        {
            (void)ndefRecordGetPayload(record, bufPayloadItem);
 8006ab4:	68b9      	ldr	r1, [r7, #8]
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f7ff fd4f 	bl	800655a <ndefRecordGetPayload>
        }
    }

    return bufPayloadItem->buffer;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	681b      	ldr	r3, [r3, #0]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <ndefWifiPayloadGetLength>:
  */


/*****************************************************************************/
static uint32_t ndefWifiPayloadGetLength(const ndefType* wifi)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
    const ndefTypeWifi* wifiData;
    uint32_t payloadLength;

    if ( (wifi == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <ndefWifiPayloadGetLength+0x16>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b07      	cmp	r3, #7
 8006adc:	d001      	beq.n	8006ae2 <ndefWifiPayloadGetLength+0x1a>
    {
        return 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e00a      	b.n	8006af8 <ndefWifiPayloadGetLength+0x30>
    }

    wifiData = &wifi->data.wifi;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	330c      	adds	r3, #12
 8006ae6:	60fb      	str	r3, [r7, #12]

    payloadLength = sizeof(wifiConfigToken1)
                  + WIFI_SSID_TYPE_LENGTH    + wifiData->bufNetworkSSID.length
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	685a      	ldr	r2, [r3, #4]
                  + sizeof(wifiConfigToken3)
                  + WIFI_SSID_KEY_TYPE_LENGTH + wifiData->bufNetworkKey.length
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	4413      	add	r3, r2
    payloadLength = sizeof(wifiConfigToken1)
 8006af2:	3340      	adds	r3, #64	; 0x40
 8006af4:	60bb      	str	r3, [r7, #8]
                  + sizeof(wifiConfigToken5);

    return payloadLength;
 8006af6:	68bb      	ldr	r3, [r7, #8]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr
	...

08006b04 <ndefWifiToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefWifiToPayloadItem(const ndefType* wifi, ndefConstBuffer* bufItem, bool begin)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b08b      	sub	sp, #44	; 0x2c
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeWifi* wifiData;
    uint16_t credentialLength;

    uint8_t defaultKey[4] = {0, 0, 0, 0};
 8006b12:	2300      	movs	r3, #0
 8006b14:	61bb      	str	r3, [r7, #24]
    ndefConstBuffer8 bufDefaultNetworkKey = { defaultKey, sizeof(defaultKey) };
 8006b16:	f107 0318 	add.w	r3, r7, #24
 8006b1a:	613b      	str	r3, [r7, #16]
 8006b1c:	2304      	movs	r3, #4
 8006b1e:	753b      	strb	r3, [r7, #20]

    const uint8_t CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX   =  7U;
 8006b20:	2307      	movs	r3, #7
 8006b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const uint8_t CONFIG_TOKEN_3_AUTHENTICATION_TYPE_INDEX =  5U;
 8006b26:	2305      	movs	r3, #5
 8006b28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    const uint8_t CONFIG_TOKEN_3_ENCRYPTION_TYPE_INDEX     = 11U;
 8006b2c:	230b      	movs	r3, #11
 8006b2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    static uint8_t zero[] = { 0 };
    static ndefConstBuffer8 bufZero = { zero, sizeof(zero) };

    if ( (wifi    == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d006      	beq.n	8006b46 <ndefWifiToPayloadItem+0x42>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b07      	cmp	r3, #7
 8006b3e:	d102      	bne.n	8006b46 <ndefWifiToPayloadItem+0x42>
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <ndefWifiToPayloadItem+0x46>
         (bufItem == NULL) )
    {
        return NULL;
 8006b46:	2300      	movs	r3, #0
 8006b48:	e0b3      	b.n	8006cb2 <ndefWifiToPayloadItem+0x1ae>
    }

    wifiData = &wifi->data.wifi;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	330c      	adds	r3, #12
 8006b4e:	623b      	str	r3, [r7, #32]

    if (begin == true)
 8006b50:	79fb      	ldrb	r3, [r7, #7]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <ndefWifiToPayloadItem+0x58>
    {
        item = 0;
 8006b56:	4b59      	ldr	r3, [pc, #356]	; (8006cbc <ndefWifiToPayloadItem+0x1b8>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2200      	movs	r2, #0
 8006b66:	605a      	str	r2, [r3, #4]

    switch (item)
 8006b68:	4b54      	ldr	r3, [pc, #336]	; (8006cbc <ndefWifiToPayloadItem+0x1b8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	f200 8092 	bhi.w	8006c96 <ndefWifiToPayloadItem+0x192>
 8006b72:	a201      	add	r2, pc, #4	; (adr r2, 8006b78 <ndefWifiToPayloadItem+0x74>)
 8006b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b78:	08006b9d 	.word	0x08006b9d
 8006b7c:	08006bdd 	.word	0x08006bdd
 8006b80:	08006bf1 	.word	0x08006bf1
 8006b84:	08006c01 	.word	0x08006c01
 8006b88:	08006c13 	.word	0x08006c13
 8006b8c:	08006c39 	.word	0x08006c39
 8006b90:	08006c4d 	.word	0x08006c4d
 8006b94:	08006c5f 	.word	0x08006c5f
 8006b98:	08006c89 	.word	0x08006c89

        /* Update Token1 with credential length */
        credentialLength = (uint16_t)(5U +                   /* Network index      */
                           2U +                              /* SSID type          */
                           2U +                              /* SSID key length    */
                           wifiData->bufNetworkSSID.length + /* SSID key           */
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	685b      	ldr	r3, [r3, #4]
                           sizeof(wifiConfigToken3) +        /* Token3 length      */
                           2U +                              /* Network key length */
 8006ba0:	b29a      	uxth	r2, r3
                           wifiData->bufNetworkKey.length +  /* Network key        */
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	68db      	ldr	r3, [r3, #12]
                           2U +                              /* Network key length */
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	4413      	add	r3, r2
 8006baa:	b29b      	uxth	r3, r3
        credentialLength = (uint16_t)(5U +                   /* Network index      */
 8006bac:	3337      	adds	r3, #55	; 0x37
 8006bae:	83fb      	strh	r3, [r7, #30]
                           sizeof(wifiConfigToken5));        /* Token5 length      */

        wifiConfigToken1[CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX]      = (uint8_t)(credentialLength >>    8U);
 8006bb0:	8bfb      	ldrh	r3, [r7, #30]
 8006bb2:	0a1b      	lsrs	r3, r3, #8
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bba:	b2d1      	uxtb	r1, r2
 8006bbc:	4a40      	ldr	r2, [pc, #256]	; (8006cc0 <ndefWifiToPayloadItem+0x1bc>)
 8006bbe:	54d1      	strb	r1, [r2, r3]
        wifiConfigToken1[CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX + 1U] = (uint8_t)(credentialLength  & 0xFFU);
 8006bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	8bfa      	ldrh	r2, [r7, #30]
 8006bc8:	b2d1      	uxtb	r1, r2
 8006bca:	4a3d      	ldr	r2, [pc, #244]	; (8006cc0 <ndefWifiToPayloadItem+0x1bc>)
 8006bcc:	54d1      	strb	r1, [r2, r3]

        bufItem->buffer = wifiConfigToken1;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	4a3b      	ldr	r2, [pc, #236]	; (8006cc0 <ndefWifiToPayloadItem+0x1bc>)
 8006bd2:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken1);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2210      	movs	r2, #16
 8006bd8:	605a      	str	r2, [r3, #4]
        break;
 8006bda:	e063      	b.n	8006ca4 <ndefWifiToPayloadItem+0x1a0>

    case 1:
        /* SSID Length (1st byte) */
        bufItem->buffer = bufZero.buffer;
 8006bdc:	4b39      	ldr	r3, [pc, #228]	; (8006cc4 <ndefWifiToPayloadItem+0x1c0>)
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	601a      	str	r2, [r3, #0]
        bufItem->length = bufZero.length;
 8006be4:	4b37      	ldr	r3, [pc, #220]	; (8006cc4 <ndefWifiToPayloadItem+0x1c0>)
 8006be6:	791b      	ldrb	r3, [r3, #4]
 8006be8:	461a      	mov	r2, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	605a      	str	r2, [r3, #4]
        break;
 8006bee:	e059      	b.n	8006ca4 <ndefWifiToPayloadItem+0x1a0>

    case 2:
        /* SSID Length (2nd byte) */
        bufItem->buffer = (const uint8_t*)&wifiData->bufNetworkSSID.length;
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	1d1a      	adds	r2, r3, #4
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	601a      	str	r2, [r3, #0]
        bufItem->length = 1U;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	605a      	str	r2, [r3, #4]
        break;
 8006bfe:	e051      	b.n	8006ca4 <ndefWifiToPayloadItem+0x1a0>

    case 3:
        /* SSID Value */
        bufItem->buffer = wifiData->bufNetworkSSID.buffer;
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	601a      	str	r2, [r3, #0]
        bufItem->length = wifiData->bufNetworkSSID.length;
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	605a      	str	r2, [r3, #4]
        break;
 8006c10:	e048      	b.n	8006ca4 <ndefWifiToPayloadItem+0x1a0>

    case 4:
        /* Config Token3 */

        /* Update Token3 with Autentication and Encryption Types */
        wifiConfigToken3[CONFIG_TOKEN_3_AUTHENTICATION_TYPE_INDEX] = wifiData->authentication;
 8006c12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c16:	6a3a      	ldr	r2, [r7, #32]
 8006c18:	7c11      	ldrb	r1, [r2, #16]
 8006c1a:	4a2b      	ldr	r2, [pc, #172]	; (8006cc8 <ndefWifiToPayloadItem+0x1c4>)
 8006c1c:	54d1      	strb	r1, [r2, r3]
        wifiConfigToken3[CONFIG_TOKEN_3_ENCRYPTION_TYPE_INDEX]     = wifiData->encryption;
 8006c1e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006c22:	6a3a      	ldr	r2, [r7, #32]
 8006c24:	7c51      	ldrb	r1, [r2, #17]
 8006c26:	4a28      	ldr	r2, [pc, #160]	; (8006cc8 <ndefWifiToPayloadItem+0x1c4>)
 8006c28:	54d1      	strb	r1, [r2, r3]

        bufItem->buffer = wifiConfigToken3;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	4a26      	ldr	r2, [pc, #152]	; (8006cc8 <ndefWifiToPayloadItem+0x1c4>)
 8006c2e:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken3);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	220e      	movs	r2, #14
 8006c34:	605a      	str	r2, [r3, #4]
        break;
 8006c36:	e035      	b.n	8006ca4 <ndefWifiToPayloadItem+0x1a0>

    case 5:
        /* SSID Key Length (1st byte) */
        bufItem->buffer = bufZero.buffer;
 8006c38:	4b22      	ldr	r3, [pc, #136]	; (8006cc4 <ndefWifiToPayloadItem+0x1c0>)
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	601a      	str	r2, [r3, #0]
        bufItem->length = bufZero.length;
 8006c40:	4b20      	ldr	r3, [pc, #128]	; (8006cc4 <ndefWifiToPayloadItem+0x1c0>)
 8006c42:	791b      	ldrb	r3, [r3, #4]
 8006c44:	461a      	mov	r2, r3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	605a      	str	r2, [r3, #4]
        break;
 8006c4a:	e02b      	b.n	8006ca4 <ndefWifiToPayloadItem+0x1a0>

    case 6:
        /* SSID Key Length (2 bytes) */
        bufItem->buffer = (const uint8_t*)&wifiData->bufNetworkKey.length;
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	f103 020c 	add.w	r2, r3, #12
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	601a      	str	r2, [r3, #0]
        bufItem->length = 1U;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	605a      	str	r2, [r3, #4]
        break;
 8006c5c:	e022      	b.n	8006ca4 <ndefWifiToPayloadItem+0x1a0>

    case 7:
        /* SSID Key Value */
        if(wifiData->bufNetworkKey.length == 0U)
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d107      	bne.n	8006c76 <ndefWifiToPayloadItem+0x172>
        {
            /* Empty network key is not supported by Phones */
            bufItem->buffer = bufDefaultNetworkKey.buffer;
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDefaultNetworkKey.length;
 8006c6c:	7d3b      	ldrb	r3, [r7, #20]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	605a      	str	r2, [r3, #4]
        else
        {
            bufItem->buffer = wifiData->bufNetworkKey.buffer;
            bufItem->length = wifiData->bufNetworkKey.length;
        }
        break;
 8006c74:	e016      	b.n	8006ca4 <ndefWifiToPayloadItem+0x1a0>
            bufItem->buffer = wifiData->bufNetworkKey.buffer;
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	601a      	str	r2, [r3, #0]
            bufItem->length = wifiData->bufNetworkKey.length;
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	605a      	str	r2, [r3, #4]
        break;
 8006c86:	e00d      	b.n	8006ca4 <ndefWifiToPayloadItem+0x1a0>

    case 8:
        /* Config Token5 */
        bufItem->buffer = wifiConfigToken5;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4a10      	ldr	r2, [pc, #64]	; (8006ccc <ndefWifiToPayloadItem+0x1c8>)
 8006c8c:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken5);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	221e      	movs	r2, #30
 8006c92:	605a      	str	r2, [r3, #4]
        break;
 8006c94:	e006      	b.n	8006ca4 <ndefWifiToPayloadItem+0x1a0>

    default:
        bufItem->buffer = NULL;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	605a      	str	r2, [r3, #4]
        break;
 8006ca2:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 8006ca4:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <ndefWifiToPayloadItem+0x1b8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	4a04      	ldr	r2, [pc, #16]	; (8006cbc <ndefWifiToPayloadItem+0x1b8>)
 8006cac:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	681b      	ldr	r3, [r3, #0]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	372c      	adds	r7, #44	; 0x2c
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bc80      	pop	{r7}
 8006cba:	4770      	bx	lr
 8006cbc:	20002f14 	.word	0x20002f14
 8006cc0:	200000a4 	.word	0x200000a4
 8006cc4:	200000e4 	.word	0x200000e4
 8006cc8:	200000b4 	.word	0x200000b4
 8006ccc:	200000c4 	.word	0x200000c4

08006cd0 <ndefWifi>:


/*****************************************************************************/
ReturnCode ndefWifi(ndefType* wifi, const ndefTypeWifi* wifiConfig)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
    ndefTypeWifi* wifiData;

    if ( (wifi == NULL) || (wifiConfig == NULL) )
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <ndefWifi+0x16>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <ndefWifi+0x1a>
    {
        return ERR_PARAM;
 8006ce6:	2307      	movs	r3, #7
 8006ce8:	e022      	b.n	8006d30 <ndefWifi+0x60>
    }

    wifi->id               = NDEF_TYPE_MEDIA_WIFI;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2207      	movs	r2, #7
 8006cee:	701a      	strb	r2, [r3, #0]
    wifi->getPayloadLength = ndefWifiPayloadGetLength;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a12      	ldr	r2, [pc, #72]	; (8006d3c <ndefWifi+0x6c>)
 8006cf4:	605a      	str	r2, [r3, #4]
    wifi->getPayloadItem   = ndefWifiToPayloadItem;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a11      	ldr	r2, [pc, #68]	; (8006d40 <ndefWifi+0x70>)
 8006cfa:	609a      	str	r2, [r3, #8]
    wifiData               = &wifi->data.wifi;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	330c      	adds	r3, #12
 8006d00:	60fb      	str	r3, [r7, #12]

    wifiData->bufNetworkSSID = wifiConfig->bufNetworkSSID;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d0a:	e883 0003 	stmia.w	r3, {r0, r1}
    wifiData->bufNetworkKey  = wifiConfig->bufNetworkKey;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	3308      	adds	r3, #8
 8006d14:	3208      	adds	r2, #8
 8006d16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d1a:	e883 0003 	stmia.w	r3, {r0, r1}
    wifiData->authentication = wifiConfig->authentication;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	7c1a      	ldrb	r2, [r3, #16]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	741a      	strb	r2, [r3, #16]
    wifiData->encryption     = wifiConfig->encryption;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	7c5a      	ldrb	r2, [r3, #17]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	745a      	strb	r2, [r3, #17]

    return ERR_NONE;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	08006ac9 	.word	0x08006ac9
 8006d40:	08006b05 	.word	0x08006b05

08006d44 <ndefGetWifi>:


/*****************************************************************************/
ReturnCode ndefGetWifi(const ndefType* wifi, ndefTypeWifi* wifiConfig)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
    const ndefTypeWifi* wifiData;

    if ( (wifi       == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d006      	beq.n	8006d62 <ndefGetWifi+0x1e>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b07      	cmp	r3, #7
 8006d5a:	d102      	bne.n	8006d62 <ndefGetWifi+0x1e>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <ndefGetWifi+0x22>
         (wifiConfig == NULL) )
    {
        return ERR_PARAM;
 8006d62:	2307      	movs	r3, #7
 8006d64:	e01b      	b.n	8006d9e <ndefGetWifi+0x5a>
    }

    wifiData = &wifi->data.wifi;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	330c      	adds	r3, #12
 8006d6a:	60fb      	str	r3, [r7, #12]

    wifiConfig->bufNetworkSSID.buffer = wifiData->bufNetworkSSID.buffer;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	601a      	str	r2, [r3, #0]
    wifiConfig->bufNetworkSSID.length = wifiData->bufNetworkSSID.length;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	605a      	str	r2, [r3, #4]
    wifiConfig->bufNetworkKey.buffer  = wifiData->bufNetworkKey.buffer;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	609a      	str	r2, [r3, #8]
    wifiConfig->bufNetworkKey.length  = wifiData->bufNetworkKey.length;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	68da      	ldr	r2, [r3, #12]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	60da      	str	r2, [r3, #12]
    wifiConfig->authentication = wifiData->authentication;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	7c1a      	ldrb	r2, [r3, #16]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	741a      	strb	r2, [r3, #16]
    wifiConfig->encryption     = wifiData->encryption;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	7c5a      	ldrb	r2, [r3, #17]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	745a      	strb	r2, [r3, #17]

    return ERR_NONE;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bc80      	pop	{r7}
 8006da6:	4770      	bx	lr

08006da8 <ndefPayloadToWifi>:


/*****************************************************************************/
static ReturnCode ndefPayloadToWifi(const ndefConstBuffer* bufPayload, ndefType* wifi)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08a      	sub	sp, #40	; 0x28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
    ndefTypeWifi wifiConfig;
    uint32_t offset;

    if ( (bufPayload == NULL) || (wifi == NULL) )
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <ndefPayloadToWifi+0x16>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <ndefPayloadToWifi+0x1a>
    {
        return ERR_PARAM;
 8006dbe:	2307      	movs	r3, #7
 8006dc0:	e0a0      	b.n	8006f04 <ndefPayloadToWifi+0x15c>
    }

    wifiConfig.bufNetworkSSID.buffer = NULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60bb      	str	r3, [r7, #8]
    wifiConfig.bufNetworkSSID.length = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
    wifiConfig.bufNetworkKey.buffer  = NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	613b      	str	r3, [r7, #16]
    wifiConfig.bufNetworkKey.length  = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	617b      	str	r3, [r7, #20]
    wifiConfig.authentication        = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	763b      	strb	r3, [r7, #24]
    wifiConfig.encryption            = 0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	767b      	strb	r3, [r7, #25]

    offset = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
    while (offset < bufPayload->length)
 8006dde:	e084      	b.n	8006eea <ndefPayloadToWifi+0x142>
    {
        uint8_t attribute = bufPayload->buffer[offset];
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	4413      	add	r3, r2
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (attribute == NDEF_WIFI_ATTRIBUTE_ID_SSID_LSB)
 8006dee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006df2:	2b10      	cmp	r3, #16
 8006df4:	d176      	bne.n	8006ee4 <ndefPayloadToWifi+0x13c>
        {
            uint8_t data1   = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_LENGTH_MSB_OFFSET];
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	3302      	adds	r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            uint8_t data2   = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_LENGTH_LSB_OFFSET];
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	3303      	adds	r3, #3
 8006e0e:	4413      	add	r3, r2
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            uint32_t length = ((uint32_t)data1 << 8U) | data2;
 8006e16:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006e1a:	021a      	lsls	r2, r3, #8
 8006e1c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006e20:	4313      	orrs	r3, r2
 8006e22:	61fb      	str	r3, [r7, #28]

            switch (bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_ID_OFFSET])
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	4413      	add	r3, r2
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b0f      	cmp	r3, #15
 8006e32:	d040      	beq.n	8006eb6 <ndefPayloadToWifi+0x10e>
 8006e34:	2b0f      	cmp	r3, #15
 8006e36:	dc02      	bgt.n	8006e3e <ndefPayloadToWifi+0x96>
 8006e38:	2b03      	cmp	r3, #3
 8006e3a:	d02a      	beq.n	8006e92 <ndefPayloadToWifi+0xea>
 8006e3c:	e04d      	b.n	8006eda <ndefPayloadToWifi+0x132>
 8006e3e:	2b27      	cmp	r3, #39	; 0x27
 8006e40:	d014      	beq.n	8006e6c <ndefPayloadToWifi+0xc4>
 8006e42:	2b45      	cmp	r3, #69	; 0x45
 8006e44:	d149      	bne.n	8006eda <ndefPayloadToWifi+0x132>
            {
            case NDEF_WIFI_ATTRIBUTE_ID_SSID_MSB:
                /* Network SSID */
                if (length > NDEF_WIFI_NETWORK_SSID_LENGTH)
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	2b20      	cmp	r3, #32
 8006e4a:	d901      	bls.n	8006e50 <ndefPayloadToWifi+0xa8>
                {
                    return ERR_PROTO;
 8006e4c:	230b      	movs	r3, #11
 8006e4e:	e059      	b.n	8006f04 <ndefPayloadToWifi+0x15c>
                }
                wifiConfig.bufNetworkSSID.buffer = &bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_DATA_OFFSET];
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	3304      	adds	r3, #4
 8006e58:	4413      	add	r3, r2
 8006e5a:	60bb      	str	r3, [r7, #8]
                wifiConfig.bufNetworkSSID.length = length;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	60fb      	str	r3, [r7, #12]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 8006e60:	69fa      	ldr	r2, [r7, #28]
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	4413      	add	r3, r2
 8006e66:	3304      	adds	r3, #4
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006e6a:	e03e      	b.n	8006eea <ndefPayloadToWifi+0x142>
            case NDEF_WIFI_ATTRIBUTE_ID_NETWORK_MSB:
                /* Network key */
                if (length > NDEF_WIFI_NETWORK_KEY_LENGTH)
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	2b20      	cmp	r3, #32
 8006e70:	d901      	bls.n	8006e76 <ndefPayloadToWifi+0xce>
                {
                    return ERR_PROTO;
 8006e72:	230b      	movs	r3, #11
 8006e74:	e046      	b.n	8006f04 <ndefPayloadToWifi+0x15c>
                }
                wifiConfig.bufNetworkKey.buffer = &bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_DATA_OFFSET];
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	4413      	add	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]
                wifiConfig.bufNetworkKey.length = length;
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	617b      	str	r3, [r7, #20]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 8006e86:	69fa      	ldr	r2, [r7, #28]
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	4413      	add	r3, r2
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006e90:	e02b      	b.n	8006eea <ndefPayloadToWifi+0x142>
            case NDEF_WIFI_ATTRIBUTE_AUTHENTICATION:
                /* Authentication */
                if (length != NDEF_WIFI_AUTHENTICATION_TYPE_LENGTH)
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d001      	beq.n	8006e9c <ndefPayloadToWifi+0xf4>
                {
                    return ERR_PROTO;
 8006e98:	230b      	movs	r3, #11
 8006e9a:	e033      	b.n	8006f04 <ndefPayloadToWifi+0x15c>
                }
                wifiConfig.authentication = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_AUTHENTICATION_LSB_OFFSET];
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	3305      	adds	r3, #5
 8006ea4:	4413      	add	r3, r2
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	763b      	strb	r3, [r7, #24]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	4413      	add	r3, r2
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006eb4:	e019      	b.n	8006eea <ndefPayloadToWifi+0x142>
            case NDEF_WIFI_ATTRIBUTE_ENCRYPTION:
                /* Encryption */
                if (length != NDEF_WIFI_ENCRYPTION_TYPE_LENGTH)
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d001      	beq.n	8006ec0 <ndefPayloadToWifi+0x118>
                {
                    return ERR_PROTO;
 8006ebc:	230b      	movs	r3, #11
 8006ebe:	e021      	b.n	8006f04 <ndefPayloadToWifi+0x15c>
                }
                wifiConfig.encryption = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_ENCRYPTION_LSB_OFFSET];
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	3305      	adds	r3, #5
 8006ec8:	4413      	add	r3, r2
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	767b      	strb	r3, [r7, #25]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006ed8:	e007      	b.n	8006eea <ndefPayloadToWifi+0x142>
            default:
                offset++;
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	3301      	adds	r3, #1
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006ee0:	bf00      	nop
 8006ee2:	e002      	b.n	8006eea <ndefPayloadToWifi+0x142>
            }
        }
        else
        {
            offset++;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
    while (offset < bufPayload->length)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	f4ff af75 	bcc.w	8006de0 <ndefPayloadToWifi+0x38>
        }
    }

    return ndefWifi(wifi, &wifiConfig);
 8006ef6:	f107 0308 	add.w	r3, r7, #8
 8006efa:	4619      	mov	r1, r3
 8006efc:	6838      	ldr	r0, [r7, #0]
 8006efe:	f7ff fee7 	bl	8006cd0 <ndefWifi>
 8006f02:	4603      	mov	r3, r0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3728      	adds	r7, #40	; 0x28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <ndefRecordToWifi>:


/*****************************************************************************/
ReturnCode ndefRecordToWifi(const ndefRecord* record, ndefType* wifi)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (wifi == NULL) )
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <ndefRecordToWifi+0x16>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <ndefRecordToWifi+0x1a>
    {
        return ERR_PARAM;
 8006f22:	2307      	movs	r3, #7
 8006f24:	e022      	b.n	8006f6c <ndefRecordToWifi+0x60>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeWifi)) /* "application/vnd.wfa.wsc" */
 8006f26:	4a13      	ldr	r2, [pc, #76]	; (8006f74 <ndefRecordToWifi+0x68>)
 8006f28:	2102      	movs	r1, #2
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff fa5e 	bl	80063ec <ndefRecordTypeMatch>
 8006f30:	4603      	mov	r3, r0
 8006f32:	f083 0301 	eor.w	r3, r3, #1
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <ndefRecordToWifi+0x34>
    {
        return ERR_PROTO;
 8006f3c:	230b      	movs	r3, #11
 8006f3e:	e015      	b.n	8006f6c <ndefRecordToWifi+0x60>
    }

    ndeftype = ndefRecordGetNdefType(record);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f95b 	bl	80071fc <ndefRecordGetNdefType>
 8006f46:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d007      	beq.n	8006f5e <ndefRecordToWifi+0x52>
    {
        (void)ST_MEMCPY(wifi, ndeftype, sizeof(ndefType));
 8006f4e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8006f52:	68f9      	ldr	r1, [r7, #12]
 8006f54:	6838      	ldr	r0, [r7, #0]
 8006f56:	f011 ff4e 	bl	8018df6 <memcpy>
        return ERR_NONE;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e006      	b.n	8006f6c <ndefRecordToWifi+0x60>
    }

    return ndefPayloadToWifi(&record->bufPayload, wifi);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	330c      	adds	r3, #12
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff ff1f 	bl	8006da8 <ndefPayloadToWifi>
 8006f6a:	4603      	mov	r3, r0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	0801a9d4 	.word	0x0801a9d4

08006f78 <ndefWifiToRecord>:


/*****************************************************************************/
ReturnCode ndefWifiToRecord(const ndefType* wifi, ndefRecord* record)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
    if ( (wifi   == NULL) ||  (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d006      	beq.n	8006f96 <ndefWifiToRecord+0x1e>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b07      	cmp	r3, #7
 8006f8e:	d102      	bne.n	8006f96 <ndefWifiToRecord+0x1e>
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <ndefWifiToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 8006f96:	2307      	movs	r3, #7
 8006f98:	e00c      	b.n	8006fb4 <ndefWifiToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 8006f9a:	6838      	ldr	r0, [r7, #0]
 8006f9c:	f7ff f950 	bl	8006240 <ndefRecordReset>

    (void)ndefRecordSetType(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeWifi);
 8006fa0:	4a06      	ldr	r2, [pc, #24]	; (8006fbc <ndefWifiToRecord+0x44>)
 8006fa2:	2102      	movs	r1, #2
 8006fa4:	6838      	ldr	r0, [r7, #0]
 8006fa6:	f7ff f9cc 	bl	8006342 <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, wifi);
 8006faa:	6879      	ldr	r1, [r7, #4]
 8006fac:	6838      	ldr	r0, [r7, #0]
 8006fae:	f000 f8ed 	bl	800718c <ndefRecordSetNdefType>

    return ERR_NONE;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	0801a9d4 	.word	0x0801a9d4

08006fc0 <ndefTypeStringToTypeId>:
 */


/*****************************************************************************/
static ReturnCode ndefTypeStringToTypeId(uint8_t tnf, const ndefConstBuffer8* bufTypeString, ndefTypeId* typeId)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	73fb      	strb	r3, [r7, #15]
        { NDEF_TYPE_MEDIA_WIFI,      NDEF_TNF_MEDIA_TYPE,          &bufMediaTypeWifi          },
    };

    uint32_t i;

    if ( (bufTypeString == NULL) || (typeId == NULL) )
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <ndefTypeStringToTypeId+0x1a>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <ndefTypeStringToTypeId+0x1e>
    {
        return ERR_PROTO;
 8006fda:	230b      	movs	r3, #11
 8006fdc:	e03f      	b.n	800705e <ndefTypeStringToTypeId+0x9e>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeTable); i++)
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]
 8006fe2:	e038      	b.n	8007056 <ndefTypeStringToTypeId+0x96>
    {
        /* Check TNF and length are the same, then compare the content */
        if (typeTable[i].tnf == tnf)
 8006fe4:	4a20      	ldr	r2, [pc, #128]	; (8007068 <ndefTypeStringToTypeId+0xa8>)
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	00db      	lsls	r3, r3, #3
 8006fea:	4413      	add	r3, r2
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	7bfa      	ldrb	r2, [r7, #15]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d12d      	bne.n	8007050 <ndefTypeStringToTypeId+0x90>
        {
            if (bufTypeString->length == typeTable[i].bufTypeString->length)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	791a      	ldrb	r2, [r3, #4]
 8006ff8:	491b      	ldr	r1, [pc, #108]	; (8007068 <ndefTypeStringToTypeId+0xa8>)
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	440b      	add	r3, r1
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	791b      	ldrb	r3, [r3, #4]
 8007004:	429a      	cmp	r2, r3
 8007006:	d123      	bne.n	8007050 <ndefTypeStringToTypeId+0x90>
            {
                if (bufTypeString->length == 0U)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	791b      	ldrb	r3, [r3, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d107      	bne.n	8007020 <ndefTypeStringToTypeId+0x60>
                {
                    /* Empty type */
                    *typeId = typeTable[i].typeId;
 8007010:	4a15      	ldr	r2, [pc, #84]	; (8007068 <ndefTypeStringToTypeId+0xa8>)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	701a      	strb	r2, [r3, #0]
                    return ERR_NONE;
 800701c:	2300      	movs	r3, #0
 800701e:	e01e      	b.n	800705e <ndefTypeStringToTypeId+0x9e>
                }
                else
                {
                    if (ST_BYTECMP(typeTable[i].bufTypeString->buffer, bufTypeString->buffer, bufTypeString->length) == 0)
 8007020:	4a11      	ldr	r2, [pc, #68]	; (8007068 <ndefTypeStringToTypeId+0xa8>)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	4413      	add	r3, r2
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	6819      	ldr	r1, [r3, #0]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	791b      	ldrb	r3, [r3, #4]
 8007034:	461a      	mov	r2, r3
 8007036:	f011 fecf 	bl	8018dd8 <memcmp>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d107      	bne.n	8007050 <ndefTypeStringToTypeId+0x90>
                    {
                        *typeId = typeTable[i].typeId;
 8007040:	4a09      	ldr	r2, [pc, #36]	; (8007068 <ndefTypeStringToTypeId+0xa8>)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	701a      	strb	r2, [r3, #0]
                        return ERR_NONE;
 800704c:	2300      	movs	r3, #0
 800704e:	e006      	b.n	800705e <ndefTypeStringToTypeId+0x9e>
    for (i = 0; i < SIZEOF_ARRAY(typeTable); i++)
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	3301      	adds	r3, #1
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b06      	cmp	r3, #6
 800705a:	d9c3      	bls.n	8006fe4 <ndefTypeStringToTypeId+0x24>
                }
            }
        }
    }

    return ERR_NOTFOUND;
 800705c:	2316      	movs	r3, #22
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	0801aa30 	.word	0x0801aa30

0800706c <ndefRecordTypeStringToTypeId>:


/*****************************************************************************/
ReturnCode ndefRecordTypeStringToTypeId(const ndefRecord* record, ndefTypeId* typeId)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
    ReturnCode err;

    uint8_t          tnf;
    ndefConstBuffer8 bufRecordType;

    if ( (record == NULL) || (typeId == NULL) )
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <ndefRecordTypeStringToTypeId+0x16>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <ndefRecordTypeStringToTypeId+0x1a>
    {
        return ERR_PARAM;
 8007082:	2307      	movs	r3, #7
 8007084:	e028      	b.n	80070d8 <ndefRecordTypeStringToTypeId+0x6c>
    }

    err = ndefRecordGetType(record, &tnf, &bufRecordType);
 8007086:	f107 020c 	add.w	r2, r7, #12
 800708a:	f107 0315 	add.w	r3, r7, #21
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff f985 	bl	80063a0 <ndefRecordGetType>
 8007096:	4603      	mov	r3, r0
 8007098:	82fb      	strh	r3, [r7, #22]
    if (err != ERR_NONE)
 800709a:	8afb      	ldrh	r3, [r7, #22]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <ndefRecordTypeStringToTypeId+0x38>
    {
        return err;
 80070a0:	8afb      	ldrh	r3, [r7, #22]
 80070a2:	e019      	b.n	80070d8 <ndefRecordTypeStringToTypeId+0x6c>
    }
    if (tnf >= NDEF_TNF_RESERVED)
 80070a4:	7d7b      	ldrb	r3, [r7, #21]
 80070a6:	2b06      	cmp	r3, #6
 80070a8:	d901      	bls.n	80070ae <ndefRecordTypeStringToTypeId+0x42>
    {
        return ERR_INTERNAL;
 80070aa:	230c      	movs	r3, #12
 80070ac:	e014      	b.n	80070d8 <ndefRecordTypeStringToTypeId+0x6c>
    }

    switch (tnf)
 80070ae:	7d7b      	ldrb	r3, [r7, #21]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	db0d      	blt.n	80070d0 <ndefRecordTypeStringToTypeId+0x64>
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	dd01      	ble.n	80070bc <ndefRecordTypeStringToTypeId+0x50>
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d109      	bne.n	80070d0 <ndefRecordTypeStringToTypeId+0x64>
    {
    case NDEF_TNF_EMPTY:               /* Fall through */
    case NDEF_TNF_RTD_WELL_KNOWN_TYPE: /* Fall through */
    case NDEF_TNF_RTD_EXTERNAL_TYPE:   /* Fall through */
    case NDEF_TNF_MEDIA_TYPE:          /* Fall through */
        err = ndefTypeStringToTypeId(tnf, &bufRecordType, typeId);
 80070bc:	7d7b      	ldrb	r3, [r7, #21]
 80070be:	f107 010c 	add.w	r1, r7, #12
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7ff ff7b 	bl	8006fc0 <ndefTypeStringToTypeId>
 80070ca:	4603      	mov	r3, r0
 80070cc:	82fb      	strh	r3, [r7, #22]
        break;
 80070ce:	e002      	b.n	80070d6 <ndefRecordTypeStringToTypeId+0x6a>
    default:
        err = ERR_NOT_IMPLEMENTED;
 80070d0:	230f      	movs	r3, #15
 80070d2:	82fb      	strh	r3, [r7, #22]
        break;
 80070d4:	bf00      	nop
    }

    return err;
 80070d6:	8afb      	ldrh	r3, [r7, #22]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <ndefRecordToType>:


/*****************************************************************************/
ReturnCode ndefRecordToType(const ndefRecord* record, ndefType* type)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;
    ReturnCode err;
    ndefTypeId typeId;
    uint32_t   i;

    ndeftype = ndefRecordGetNdefType(record);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f886 	bl	80071fc <ndefRecordGetNdefType>
 80070f0:	6138      	str	r0, [r7, #16]
    if (ndeftype != NULL)
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d007      	beq.n	8007108 <ndefRecordToType+0x28>
    {
        /* Return the well-known type contained in the record */
        (void)ST_MEMCPY(type, ndeftype, sizeof(ndefType));
 80070f8:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80070fc:	6939      	ldr	r1, [r7, #16]
 80070fe:	6838      	ldr	r0, [r7, #0]
 8007100:	f011 fe79 	bl	8018df6 <memcpy>
        return ERR_NONE;
 8007104:	2300      	movs	r3, #0
 8007106:	e03a      	b.n	800717e <ndefRecordToType+0x9e>
    }

    err = ndefRecordTypeStringToTypeId(record, &typeId);
 8007108:	f107 030d 	add.w	r3, r7, #13
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff ffac 	bl	800706c <ndefRecordTypeStringToTypeId>
 8007114:	4603      	mov	r3, r0
 8007116:	81fb      	strh	r3, [r7, #14]
    if (err != ERR_NONE)
 8007118:	89fb      	ldrh	r3, [r7, #14]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <ndefRecordToType+0x42>
    {
        return err;
 800711e:	89fb      	ldrh	r3, [r7, #14]
 8007120:	e02d      	b.n	800717e <ndefRecordToType+0x9e>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeConverterTable); i++)
 8007122:	2300      	movs	r3, #0
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	e026      	b.n	8007176 <ndefRecordToType+0x96>
    {
        if (typeId == typeConverterTable[i].typeId)
 8007128:	4917      	ldr	r1, [pc, #92]	; (8007188 <ndefRecordToType+0xa8>)
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4613      	mov	r3, r2
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	4413      	add	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	440b      	add	r3, r1
 8007136:	781a      	ldrb	r2, [r3, #0]
 8007138:	7b7b      	ldrb	r3, [r7, #13]
 800713a:	429a      	cmp	r2, r3
 800713c:	d118      	bne.n	8007170 <ndefRecordToType+0x90>
        {
            /* Call the appropriate function to the matching type */
            if (typeConverterTable[i].recordToType != NULL)
 800713e:	4912      	ldr	r1, [pc, #72]	; (8007188 <ndefRecordToType+0xa8>)
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4613      	mov	r3, r2
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	4413      	add	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	440b      	add	r3, r1
 800714c:	3304      	adds	r3, #4
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00d      	beq.n	8007170 <ndefRecordToType+0x90>
            {
                return typeConverterTable[i].recordToType(record, type);
 8007154:	490c      	ldr	r1, [pc, #48]	; (8007188 <ndefRecordToType+0xa8>)
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	4613      	mov	r3, r2
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	440b      	add	r3, r1
 8007162:	3304      	adds	r3, #4
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	4798      	blx	r3
 800716c:	4603      	mov	r3, r0
 800716e:	e006      	b.n	800717e <ndefRecordToType+0x9e>
    for (i = 0; i < SIZEOF_ARRAY(typeConverterTable); i++)
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	3301      	adds	r3, #1
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b06      	cmp	r3, #6
 800717a:	d9d5      	bls.n	8007128 <ndefRecordToType+0x48>
            }
        }
    }

    return ERR_NOT_IMPLEMENTED;
 800717c:	230f      	movs	r3, #15
}
 800717e:	4618      	mov	r0, r3
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	0801a9dc 	.word	0x0801a9dc

0800718c <ndefRecordSetNdefType>:
}


/*****************************************************************************/
ReturnCode ndefRecordSetNdefType(ndefRecord* record, const ndefType* type)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
    uint32_t payloadLength;

    if ( (record == NULL) ||
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00e      	beq.n	80071ba <ndefRecordSetNdefType+0x2e>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00b      	beq.n	80071ba <ndefRecordSetNdefType+0x2e>
         (type                   == NULL)               ||
         (type->id                > NDEF_TYPE_ID_COUNT) ||
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
         (type                   == NULL)               ||
 80071a6:	2b08      	cmp	r3, #8
 80071a8:	d807      	bhi.n	80071ba <ndefRecordSetNdefType+0x2e>
         (type->getPayloadLength == NULL)               ||
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
         (type->id                > NDEF_TYPE_ID_COUNT) ||
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <ndefRecordSetNdefType+0x2e>
         (type->getPayloadItem   == NULL) )
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
         (type->getPayloadLength == NULL)               ||
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <ndefRecordSetNdefType+0x32>
    {
        return ERR_PARAM;
 80071ba:	2307      	movs	r3, #7
 80071bc:	e01a      	b.n	80071f4 <ndefRecordSetNdefType+0x68>
    }

    record->ndeftype = type;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	615a      	str	r2, [r3, #20]

    /* Set Short Record bit accordingly */
    payloadLength = ndefRecordGetPayloadLength(record);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff fc28 	bl	8006a1a <ndefRecordGetPayloadLength>
 80071ca:	60f8      	str	r0, [r7, #12]
    ndefHeaderSetValueSR(record, (payloadLength <= NDEF_SHORT_RECORD_LENGTH_MAX) ? 1 : 0);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	f023 0310 	bic.w	r3, r3, #16
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	701a      	strb	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	2aff      	cmp	r2, #255	; 0xff
 80071e2:	d801      	bhi.n	80071e8 <ndefRecordSetNdefType+0x5c>
 80071e4:	2210      	movs	r2, #16
 80071e6:	e000      	b.n	80071ea <ndefRecordSetNdefType+0x5e>
 80071e8:	2200      	movs	r2, #0
 80071ea:	4313      	orrs	r3, r2
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	701a      	strb	r2, [r3, #0]

    return ERR_NONE;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <ndefRecordGetNdefType>:


/*****************************************************************************/
const ndefType* ndefRecordGetNdefType(const ndefRecord* record)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
    if (record == NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <ndefRecordGetNdefType+0x12>
    {
        return NULL;
 800720a:	2300      	movs	r3, #0
 800720c:	e016      	b.n	800723c <ndefRecordGetNdefType+0x40>
    }

    if (record->ndeftype != NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d011      	beq.n	800723a <ndefRecordGetNdefType+0x3e>
    {
        /* Check whether it is a valid NDEF type */
        if ( (record->ndeftype->id                < NDEF_TYPE_ID_COUNT) &&
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b07      	cmp	r3, #7
 800721e:	d80c      	bhi.n	800723a <ndefRecordGetNdefType+0x3e>
             (record->ndeftype->getPayloadItem   != NULL) &&
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	689b      	ldr	r3, [r3, #8]
        if ( (record->ndeftype->id                < NDEF_TYPE_ID_COUNT) &&
 8007226:	2b00      	cmp	r3, #0
 8007228:	d007      	beq.n	800723a <ndefRecordGetNdefType+0x3e>
             (record->ndeftype->getPayloadLength != NULL) )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	685b      	ldr	r3, [r3, #4]
             (record->ndeftype->getPayloadItem   != NULL) &&
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <ndefRecordGetNdefType+0x3e>
        {
            return record->ndeftype;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	e000      	b.n	800723c <ndefRecordGetNdefType+0x40>
        }
    }

    return NULL;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	bc80      	pop	{r7}
 8007244:	4770      	bx	lr

08007246 <ndefVCardPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefVCardPayloadGetLength(const ndefType* vCard)
{
 8007246:	b480      	push	{r7}
 8007248:	b087      	sub	sp, #28
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
    const ndefTypeVCard* vCardData;
    uint32_t payloadLength = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	617b      	str	r3, [r7, #20]
    uint32_t i;

    if ( (vCard == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) )
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <ndefVCardPayloadGetLength+0x1a>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	2b06      	cmp	r3, #6
 800725e:	d001      	beq.n	8007264 <ndefVCardPayloadGetLength+0x1e>
    {
        return 0;
 8007260:	2300      	movs	r3, #0
 8007262:	e06e      	b.n	8007342 <ndefVCardPayloadGetLength+0xfc>
    }

    vCardData = &vCard->data.vCard;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	330c      	adds	r3, #12
 8007268:	60fb      	str	r3, [r7, #12]

    payloadLength += bufTypeBegin.length;
 800726a:	2205      	movs	r2, #5
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	4413      	add	r3, r2
 8007270:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 8007272:	2201      	movs	r2, #1
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	4413      	add	r3, r2
 8007278:	617b      	str	r3, [r7, #20]
    payloadLength += bufValueVCard.length;
 800727a:	2205      	movs	r2, #5
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	4413      	add	r3, r2
 8007280:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterNewLine.length;
 8007282:	2202      	movs	r2, #2
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	4413      	add	r3, r2
 8007288:	617b      	str	r3, [r7, #20]

    payloadLength += bufTypeVersion.length;
 800728a:	2207      	movs	r2, #7
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	4413      	add	r3, r2
 8007290:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 8007292:	2201      	movs	r2, #1
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	4413      	add	r3, r2
 8007298:	617b      	str	r3, [r7, #20]
    payloadLength += bufValue_2_1.length;
 800729a:	2203      	movs	r2, #3
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	4413      	add	r3, r2
 80072a0:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterNewLine.length;
 80072a2:	2202      	movs	r2, #2
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	4413      	add	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]

    i = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
    while (vCardData->entry[i].bufTypeBuffer != NULL)
 80072ae:	e034      	b.n	800731a <ndefVCardPayloadGetLength+0xd4>
    {
        payloadLength += vCardData->entry[i].bufTypeLength;
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	4413      	add	r3, r2
 80072b8:	330c      	adds	r3, #12
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	461a      	mov	r2, r3
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	4413      	add	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]

        if (vCardData->entry[i].bufSubTypeBuffer != NULL)
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	4413      	add	r3, r2
 80072cc:	3304      	adds	r3, #4
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00d      	beq.n	80072f0 <ndefVCardPayloadGetLength+0xaa>
        {
            payloadLength += bufDelimiterSemicolon.length;
 80072d4:	2201      	movs	r2, #1
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	4413      	add	r3, r2
 80072da:	617b      	str	r3, [r7, #20]
            payloadLength += vCardData->entry[i].bufSubTypeLength;
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	011b      	lsls	r3, r3, #4
 80072e2:	4413      	add	r3, r2
 80072e4:	330d      	adds	r3, #13
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	4413      	add	r3, r2
 80072ee:	617b      	str	r3, [r7, #20]
        }

        payloadLength += bufDelimiterColon.length;
 80072f0:	2201      	movs	r2, #1
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	4413      	add	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]

        payloadLength += vCardData->entry[i].bufValueLength;
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	011b      	lsls	r3, r3, #4
 80072fe:	4413      	add	r3, r2
 8007300:	330e      	adds	r3, #14
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	461a      	mov	r2, r3
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	4413      	add	r3, r2
 800730a:	617b      	str	r3, [r7, #20]
        payloadLength += bufDelimiterNewLine.length;
 800730c:	2202      	movs	r2, #2
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	4413      	add	r3, r2
 8007312:	617b      	str	r3, [r7, #20]

        i++;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	3301      	adds	r3, #1
 8007318:	613b      	str	r3, [r7, #16]
    while (vCardData->entry[i].bufTypeBuffer != NULL)
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	011b      	lsls	r3, r3, #4
 8007320:	4413      	add	r3, r2
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1c3      	bne.n	80072b0 <ndefVCardPayloadGetLength+0x6a>
    }

    payloadLength += bufTypeEnd.length;
 8007328:	2203      	movs	r2, #3
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	4413      	add	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 8007330:	2201      	movs	r2, #1
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	4413      	add	r3, r2
 8007336:	617b      	str	r3, [r7, #20]
    payloadLength += bufValueVCard.length;
 8007338:	2205      	movs	r2, #5
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	4413      	add	r3, r2
 800733e:	617b      	str	r3, [r7, #20]
    /* No New line after "END:VCARD" */

    return payloadLength;
 8007340:	697b      	ldr	r3, [r7, #20]
}
 8007342:	4618      	mov	r0, r3
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	bc80      	pop	{r7}
 800734a:	4770      	bx	lr

0800734c <ndefVCardToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefVCardToPayloadItem(const ndefType* vCard, ndefConstBuffer* bufItem, bool begin)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	4613      	mov	r3, r2
 8007358:	71fb      	strb	r3, [r7, #7]
    static uint32_t item     = 0;
    static uint32_t userItem = 0;
    static uint32_t index    = 0;
    const ndefTypeVCard* vCardData;

    if ( (vCard   == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d006      	beq.n	800736e <ndefVCardToPayloadItem+0x22>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b06      	cmp	r3, #6
 8007366:	d102      	bne.n	800736e <ndefVCardToPayloadItem+0x22>
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <ndefVCardToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 800736e:	2300      	movs	r3, #0
 8007370:	e17f      	b.n	8007672 <ndefVCardToPayloadItem+0x326>
    }

    vCardData = &vCard->data.vCard;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	330c      	adds	r3, #12
 8007376:	617b      	str	r3, [r7, #20]

    if (begin == true)
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d008      	beq.n	8007390 <ndefVCardToPayloadItem+0x44>
    {
        item     = 0;
 800737e:	4b8c      	ldr	r3, [pc, #560]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]
        userItem = 0;
 8007384:	4b8b      	ldr	r3, [pc, #556]	; (80075b4 <ndefVCardToPayloadItem+0x268>)
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]
        index    = 0;
 800738a:	4b8b      	ldr	r3, [pc, #556]	; (80075b8 <ndefVCardToPayloadItem+0x26c>)
 800738c:	2200      	movs	r2, #0
 800738e:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2200      	movs	r2, #0
 800739a:	605a      	str	r2, [r3, #4]

    /* Check for for empty vCard */
    if (vCardData->entry[0].bufTypeBuffer == NULL)
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <ndefVCardToPayloadItem+0x5c>
    {
        return NULL;
 80073a4:	2300      	movs	r3, #0
 80073a6:	e164      	b.n	8007672 <ndefVCardToPayloadItem+0x326>
    }

    switch (item)
 80073a8:	4b81      	ldr	r3, [pc, #516]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b0a      	cmp	r3, #10
 80073ae:	f200 8157 	bhi.w	8007660 <ndefVCardToPayloadItem+0x314>
 80073b2:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <ndefVCardToPayloadItem+0x6c>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	080073e5 	.word	0x080073e5
 80073bc:	080073fd 	.word	0x080073fd
 80073c0:	08007415 	.word	0x08007415
 80073c4:	0800742d 	.word	0x0800742d
 80073c8:	08007445 	.word	0x08007445
 80073cc:	0800745d 	.word	0x0800745d
 80073d0:	08007475 	.word	0x08007475
 80073d4:	0800748d 	.word	0x0800748d
 80073d8:	080074b1 	.word	0x080074b1
 80073dc:	08007631 	.word	0x08007631
 80073e0:	08007649 	.word	0x08007649
    {
    /* BEGIN:VCARD\r\n */
    case 0:
        bufItem->buffer = bufTypeBegin.buffer;
 80073e4:	4a75      	ldr	r2, [pc, #468]	; (80075bc <ndefVCardToPayloadItem+0x270>)
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	601a      	str	r2, [r3, #0]
        bufItem->length = bufTypeBegin.length;
 80073ea:	2205      	movs	r2, #5
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 80073f0:	4b6f      	ldr	r3, [pc, #444]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3301      	adds	r3, #1
 80073f6:	4a6e      	ldr	r2, [pc, #440]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 80073f8:	6013      	str	r3, [r2, #0]
        break;
 80073fa:	e138      	b.n	800766e <ndefVCardToPayloadItem+0x322>
    case 1:
        bufItem->buffer = bufDelimiterColon.buffer;
 80073fc:	4a70      	ldr	r2, [pc, #448]	; (80075c0 <ndefVCardToPayloadItem+0x274>)
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 8007402:	2201      	movs	r2, #1
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8007408:	4b69      	ldr	r3, [pc, #420]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3301      	adds	r3, #1
 800740e:	4a68      	ldr	r2, [pc, #416]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 8007410:	6013      	str	r3, [r2, #0]
        break;
 8007412:	e12c      	b.n	800766e <ndefVCardToPayloadItem+0x322>
    case 2:
        bufItem->buffer = bufValueVCard.buffer;
 8007414:	4a6b      	ldr	r2, [pc, #428]	; (80075c4 <ndefVCardToPayloadItem+0x278>)
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValueVCard.length;
 800741a:	2205      	movs	r2, #5
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8007420:	4b63      	ldr	r3, [pc, #396]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3301      	adds	r3, #1
 8007426:	4a62      	ldr	r2, [pc, #392]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 8007428:	6013      	str	r3, [r2, #0]
        break;
 800742a:	e120      	b.n	800766e <ndefVCardToPayloadItem+0x322>
    case 3:
        bufItem->buffer = bufDelimiterNewLine.buffer;
 800742c:	4a66      	ldr	r2, [pc, #408]	; (80075c8 <ndefVCardToPayloadItem+0x27c>)
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterNewLine.length;
 8007432:	2202      	movs	r2, #2
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8007438:	4b5d      	ldr	r3, [pc, #372]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3301      	adds	r3, #1
 800743e:	4a5c      	ldr	r2, [pc, #368]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 8007440:	6013      	str	r3, [r2, #0]
        break;
 8007442:	e114      	b.n	800766e <ndefVCardToPayloadItem+0x322>

    /* VERSION:2.1\r\n */
    case 4:
        bufItem->buffer = bufTypeVersion.buffer;
 8007444:	4a61      	ldr	r2, [pc, #388]	; (80075cc <ndefVCardToPayloadItem+0x280>)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	601a      	str	r2, [r3, #0]
        bufItem->length = bufTypeVersion.length;
 800744a:	2207      	movs	r2, #7
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8007450:	4b57      	ldr	r3, [pc, #348]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	4a56      	ldr	r2, [pc, #344]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 8007458:	6013      	str	r3, [r2, #0]
        break;
 800745a:	e108      	b.n	800766e <ndefVCardToPayloadItem+0x322>
    case 5:
        bufItem->buffer = bufDelimiterColon.buffer;
 800745c:	4a58      	ldr	r2, [pc, #352]	; (80075c0 <ndefVCardToPayloadItem+0x274>)
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 8007462:	2201      	movs	r2, #1
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8007468:	4b51      	ldr	r3, [pc, #324]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3301      	adds	r3, #1
 800746e:	4a50      	ldr	r2, [pc, #320]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 8007470:	6013      	str	r3, [r2, #0]
        break;
 8007472:	e0fc      	b.n	800766e <ndefVCardToPayloadItem+0x322>
    case 6:
        bufItem->buffer = bufValue_2_1.buffer;
 8007474:	4a56      	ldr	r2, [pc, #344]	; (80075d0 <ndefVCardToPayloadItem+0x284>)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValue_2_1.length;
 800747a:	2203      	movs	r2, #3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8007480:	4b4b      	ldr	r3, [pc, #300]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3301      	adds	r3, #1
 8007486:	4a4a      	ldr	r2, [pc, #296]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 8007488:	6013      	str	r3, [r2, #0]
        break;
 800748a:	e0f0      	b.n	800766e <ndefVCardToPayloadItem+0x322>
    case 7:
        bufItem->buffer = bufDelimiterNewLine.buffer;
 800748c:	4a4e      	ldr	r2, [pc, #312]	; (80075c8 <ndefVCardToPayloadItem+0x27c>)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterNewLine.length;
 8007492:	2202      	movs	r2, #2
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8007498:	4b45      	ldr	r3, [pc, #276]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3301      	adds	r3, #1
 800749e:	4a44      	ldr	r2, [pc, #272]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 80074a0:	6013      	str	r3, [r2, #0]
        userItem = 0;
 80074a2:	4b44      	ldr	r3, [pc, #272]	; (80075b4 <ndefVCardToPayloadItem+0x268>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]
        index    = 0;
 80074a8:	4b43      	ldr	r3, [pc, #268]	; (80075b8 <ndefVCardToPayloadItem+0x26c>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]
        break;
 80074ae:	e0de      	b.n	800766e <ndefVCardToPayloadItem+0x322>
    case 8:
        /* User data */
        switch (userItem)
 80074b0:	4b40      	ldr	r3, [pc, #256]	; (80075b4 <ndefVCardToPayloadItem+0x268>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b05      	cmp	r3, #5
 80074b6:	f200 80b9 	bhi.w	800762c <ndefVCardToPayloadItem+0x2e0>
 80074ba:	a201      	add	r2, pc, #4	; (adr r2, 80074c0 <ndefVCardToPayloadItem+0x174>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	080074d9 	.word	0x080074d9
 80074c4:	0800754f 	.word	0x0800754f
 80074c8:	08007567 	.word	0x08007567
 80074cc:	08007599 	.word	0x08007599
 80074d0:	080075dd 	.word	0x080075dd
 80074d4:	0800760f 	.word	0x0800760f
        {
        case 0:
            /* Type */
            if (vCardData->entry[index].bufTypeBuffer == NULL)
 80074d8:	4b37      	ldr	r3, [pc, #220]	; (80075b8 <ndefVCardToPayloadItem+0x26c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	4413      	add	r3, r2
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10b      	bne.n	8007500 <ndefVCardToPayloadItem+0x1b4>
            {
                bufItem->buffer = bufTypeEnd.buffer;
 80074e8:	4a3a      	ldr	r2, [pc, #232]	; (80075d4 <ndefVCardToPayloadItem+0x288>)
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	601a      	str	r2, [r3, #0]
                bufItem->length = bufTypeEnd.length;
 80074ee:	2203      	movs	r2, #3
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	605a      	str	r2, [r3, #4]
                item++; /* Exit the user item loop */
 80074f4:	4b2e      	ldr	r3, [pc, #184]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3301      	adds	r3, #1
 80074fa:	4a2d      	ldr	r2, [pc, #180]	; (80075b0 <ndefVCardToPayloadItem+0x264>)
 80074fc:	6013      	str	r3, [r2, #0]
                break;
 80074fe:	e096      	b.n	800762e <ndefVCardToPayloadItem+0x2e2>
            }
            bufItem->buffer = vCardData->entry[index].bufTypeBuffer;
 8007500:	4b2d      	ldr	r3, [pc, #180]	; (80075b8 <ndefVCardToPayloadItem+0x26c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	4413      	add	r3, r2
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufTypeLength;
 8007510:	4b29      	ldr	r3, [pc, #164]	; (80075b8 <ndefVCardToPayloadItem+0x26c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	011b      	lsls	r3, r3, #4
 8007518:	4413      	add	r3, r2
 800751a:	330c      	adds	r3, #12
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	605a      	str	r2, [r3, #4]

            if (vCardData->entry[index].bufSubTypeBuffer != NULL)
 8007524:	4b24      	ldr	r3, [pc, #144]	; (80075b8 <ndefVCardToPayloadItem+0x26c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	011b      	lsls	r3, r3, #4
 800752c:	4413      	add	r3, r2
 800752e:	3304      	adds	r3, #4
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <ndefVCardToPayloadItem+0x1f6>
            {
                userItem++;
 8007536:	4b1f      	ldr	r3, [pc, #124]	; (80075b4 <ndefVCardToPayloadItem+0x268>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3301      	adds	r3, #1
 800753c:	4a1d      	ldr	r2, [pc, #116]	; (80075b4 <ndefVCardToPayloadItem+0x268>)
 800753e:	6013      	str	r3, [r2, #0]
            }
            else
            {
                userItem += 3U; /* Skip sending semicolon and subtype, move to colon */
            }
            break;
 8007540:	e075      	b.n	800762e <ndefVCardToPayloadItem+0x2e2>
                userItem += 3U; /* Skip sending semicolon and subtype, move to colon */
 8007542:	4b1c      	ldr	r3, [pc, #112]	; (80075b4 <ndefVCardToPayloadItem+0x268>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3303      	adds	r3, #3
 8007548:	4a1a      	ldr	r2, [pc, #104]	; (80075b4 <ndefVCardToPayloadItem+0x268>)
 800754a:	6013      	str	r3, [r2, #0]
            break;
 800754c:	e06f      	b.n	800762e <ndefVCardToPayloadItem+0x2e2>
        case 1:
            bufItem->buffer = bufDelimiterSemicolon.buffer;
 800754e:	4a22      	ldr	r2, [pc, #136]	; (80075d8 <ndefVCardToPayloadItem+0x28c>)
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterSemicolon.length;
 8007554:	2201      	movs	r2, #1
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	605a      	str	r2, [r3, #4]
            userItem++;
 800755a:	4b16      	ldr	r3, [pc, #88]	; (80075b4 <ndefVCardToPayloadItem+0x268>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3301      	adds	r3, #1
 8007560:	4a14      	ldr	r2, [pc, #80]	; (80075b4 <ndefVCardToPayloadItem+0x268>)
 8007562:	6013      	str	r3, [r2, #0]
            break;
 8007564:	e063      	b.n	800762e <ndefVCardToPayloadItem+0x2e2>
        case 2:
            /* Subtype */
            bufItem->buffer = vCardData->entry[index].bufSubTypeBuffer;
 8007566:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <ndefVCardToPayloadItem+0x26c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	011b      	lsls	r3, r3, #4
 800756e:	4413      	add	r3, r2
 8007570:	3304      	adds	r3, #4
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufSubTypeLength;
 8007578:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <ndefVCardToPayloadItem+0x26c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	4413      	add	r3, r2
 8007582:	330d      	adds	r3, #13
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	605a      	str	r2, [r3, #4]
            userItem++;
 800758c:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <ndefVCardToPayloadItem+0x268>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3301      	adds	r3, #1
 8007592:	4a08      	ldr	r2, [pc, #32]	; (80075b4 <ndefVCardToPayloadItem+0x268>)
 8007594:	6013      	str	r3, [r2, #0]
            break;
 8007596:	e04a      	b.n	800762e <ndefVCardToPayloadItem+0x2e2>
        case 3:
            bufItem->buffer = bufDelimiterColon.buffer;
 8007598:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <ndefVCardToPayloadItem+0x274>)
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterColon.length;
 800759e:	2201      	movs	r2, #1
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	605a      	str	r2, [r3, #4]
            userItem++;
 80075a4:	4b03      	ldr	r3, [pc, #12]	; (80075b4 <ndefVCardToPayloadItem+0x268>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	4a02      	ldr	r2, [pc, #8]	; (80075b4 <ndefVCardToPayloadItem+0x268>)
 80075ac:	6013      	str	r3, [r2, #0]
            break;
 80075ae:	e03e      	b.n	800762e <ndefVCardToPayloadItem+0x2e2>
 80075b0:	20002f1c 	.word	0x20002f1c
 80075b4:	20002f20 	.word	0x20002f20
 80075b8:	20002f24 	.word	0x20002f24
 80075bc:	0801aaa8 	.word	0x0801aaa8
 80075c0:	0801aa84 	.word	0x0801aa84
 80075c4:	0801aabc 	.word	0x0801aabc
 80075c8:	0801aa8c 	.word	0x0801aa8c
 80075cc:	0801aab4 	.word	0x0801aab4
 80075d0:	0801aac4 	.word	0x0801aac4
 80075d4:	0801aab0 	.word	0x0801aab0
 80075d8:	0801aa88 	.word	0x0801aa88
        case 4:
            /* Value */
            bufItem->buffer = vCardData->entry[index].bufValueBuffer;
 80075dc:	4b27      	ldr	r3, [pc, #156]	; (800767c <ndefVCardToPayloadItem+0x330>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	4413      	add	r3, r2
 80075e6:	3308      	adds	r3, #8
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufValueLength;
 80075ee:	4b23      	ldr	r3, [pc, #140]	; (800767c <ndefVCardToPayloadItem+0x330>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	011b      	lsls	r3, r3, #4
 80075f6:	4413      	add	r3, r2
 80075f8:	330e      	adds	r3, #14
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	461a      	mov	r2, r3
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	605a      	str	r2, [r3, #4]
            userItem++;
 8007602:	4b1f      	ldr	r3, [pc, #124]	; (8007680 <ndefVCardToPayloadItem+0x334>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3301      	adds	r3, #1
 8007608:	4a1d      	ldr	r2, [pc, #116]	; (8007680 <ndefVCardToPayloadItem+0x334>)
 800760a:	6013      	str	r3, [r2, #0]
            break;
 800760c:	e00f      	b.n	800762e <ndefVCardToPayloadItem+0x2e2>
        case 5:
            bufItem->buffer = bufDelimiterNewLine.buffer;
 800760e:	4a1d      	ldr	r2, [pc, #116]	; (8007684 <ndefVCardToPayloadItem+0x338>)
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterNewLine.length;
 8007614:	2202      	movs	r2, #2
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	605a      	str	r2, [r3, #4]
            index++;
 800761a:	4b18      	ldr	r3, [pc, #96]	; (800767c <ndefVCardToPayloadItem+0x330>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3301      	adds	r3, #1
 8007620:	4a16      	ldr	r2, [pc, #88]	; (800767c <ndefVCardToPayloadItem+0x330>)
 8007622:	6013      	str	r3, [r2, #0]
            userItem = 0; /* Looping to case 0 */
 8007624:	4b16      	ldr	r3, [pc, #88]	; (8007680 <ndefVCardToPayloadItem+0x334>)
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]
            break;
 800762a:	e000      	b.n	800762e <ndefVCardToPayloadItem+0x2e2>
        default:
            /* MISRA 16.4: mandatory default statement */
            break;
 800762c:	bf00      	nop
        }
        break;
 800762e:	e01e      	b.n	800766e <ndefVCardToPayloadItem+0x322>
    case 9:
        bufItem->buffer = bufDelimiterColon.buffer;
 8007630:	4a15      	ldr	r2, [pc, #84]	; (8007688 <ndefVCardToPayloadItem+0x33c>)
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 8007636:	2201      	movs	r2, #1
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 800763c:	4b13      	ldr	r3, [pc, #76]	; (800768c <ndefVCardToPayloadItem+0x340>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3301      	adds	r3, #1
 8007642:	4a12      	ldr	r2, [pc, #72]	; (800768c <ndefVCardToPayloadItem+0x340>)
 8007644:	6013      	str	r3, [r2, #0]
        break;
 8007646:	e012      	b.n	800766e <ndefVCardToPayloadItem+0x322>
    case 10:
        bufItem->buffer = bufValueVCard.buffer;
 8007648:	4a11      	ldr	r2, [pc, #68]	; (8007690 <ndefVCardToPayloadItem+0x344>)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValueVCard.length;
 800764e:	2205      	movs	r2, #5
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8007654:	4b0d      	ldr	r3, [pc, #52]	; (800768c <ndefVCardToPayloadItem+0x340>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3301      	adds	r3, #1
 800765a:	4a0c      	ldr	r2, [pc, #48]	; (800768c <ndefVCardToPayloadItem+0x340>)
 800765c:	6013      	str	r3, [r2, #0]
        break;
 800765e:	e006      	b.n	800766e <ndefVCardToPayloadItem+0x322>
    default:
        bufItem->buffer = NULL;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2200      	movs	r2, #0
 800766a:	605a      	str	r2, [r3, #4]
        break;
 800766c:	bf00      	nop
    }

    return bufItem->buffer;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	681b      	ldr	r3, [r3, #0]
}
 8007672:	4618      	mov	r0, r3
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	bc80      	pop	{r7}
 800767a:	4770      	bx	lr
 800767c:	20002f24 	.word	0x20002f24
 8007680:	20002f20 	.word	0x20002f20
 8007684:	0801aa8c 	.word	0x0801aa8c
 8007688:	0801aa84 	.word	0x0801aa84
 800768c:	20002f1c 	.word	0x20002f1c
 8007690:	0801aabc 	.word	0x0801aabc

08007694 <ndefGetVCard>:
}


/*****************************************************************************/
ReturnCode ndefGetVCard(const ndefType* vCard, const ndefConstBuffer* bufType, ndefConstBuffer* bufSubType, ndefConstBuffer* bufValue)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
    const ndefTypeVCard* vCardData;
    uint32_t i;

    if ( (vCard   == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00c      	beq.n	80076c2 <ndefGetVCard+0x2e>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b06      	cmp	r3, #6
 80076ae:	d108      	bne.n	80076c2 <ndefGetVCard+0x2e>
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d005      	beq.n	80076c2 <ndefGetVCard+0x2e>
         (bufType == NULL) || (bufSubType == NULL) || (bufValue == NULL) )
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <ndefGetVCard+0x2e>
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <ndefGetVCard+0x32>
    {
        return ERR_PARAM;
 80076c2:	2307      	movs	r3, #7
 80076c4:	e062      	b.n	800778c <ndefGetVCard+0xf8>
    }

    vCardData = &vCard->data.vCard;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	330c      	adds	r3, #12
 80076ca:	613b      	str	r3, [r7, #16]

    bufSubType->buffer = NULL;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	601a      	str	r2, [r3, #0]
    bufSubType->length = 0;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	605a      	str	r2, [r3, #4]

    bufValue->buffer = NULL;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
    bufValue->length = 0;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2200      	movs	r2, #0
 80076e2:	605a      	str	r2, [r3, #4]

    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 80076e4:	2300      	movs	r3, #0
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	e04c      	b.n	8007784 <ndefGetVCard+0xf0>
    {
        if ( (vCardData->entry[i].bufTypeLength != 0U) &&
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	011b      	lsls	r3, r3, #4
 80076f0:	4413      	add	r3, r2
 80076f2:	330c      	adds	r3, #12
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d041      	beq.n	800777e <ndefGetVCard+0xea>
             (vCardData->entry[i].bufTypeLength == bufType->length) )
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	4413      	add	r3, r2
 8007702:	330c      	adds	r3, #12
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	685b      	ldr	r3, [r3, #4]
        if ( (vCardData->entry[i].bufTypeLength != 0U) &&
 800770c:	429a      	cmp	r2, r3
 800770e:	d136      	bne.n	800777e <ndefGetVCard+0xea>
        {
            if (bufType->length > 0U)
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d032      	beq.n	800777e <ndefGetVCard+0xea>
            {
                if (ST_BYTECMP(vCardData->entry[i].bufTypeBuffer, bufType->buffer, bufType->length) == 0)
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	4413      	add	r3, r2
 8007720:	6818      	ldr	r0, [r3, #0]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	6819      	ldr	r1, [r3, #0]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	461a      	mov	r2, r3
 800772c:	f011 fb54 	bl	8018dd8 <memcmp>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d123      	bne.n	800777e <ndefGetVCard+0xea>
                {
                    bufSubType->buffer = vCardData->entry[i].bufSubTypeBuffer;
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	4413      	add	r3, r2
 800773e:	3304      	adds	r3, #4
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	601a      	str	r2, [r3, #0]
                    bufSubType->length = vCardData->entry[i].bufSubTypeLength;
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	4413      	add	r3, r2
 800774e:	330d      	adds	r3, #13
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	605a      	str	r2, [r3, #4]

                    bufValue->buffer = vCardData->entry[i].bufValueBuffer;
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	011b      	lsls	r3, r3, #4
 800775e:	4413      	add	r3, r2
 8007760:	3308      	adds	r3, #8
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	601a      	str	r2, [r3, #0]
                    bufValue->length = vCardData->entry[i].bufValueLength;
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	011b      	lsls	r3, r3, #4
 800776e:	4413      	add	r3, r2
 8007770:	330e      	adds	r3, #14
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	605a      	str	r2, [r3, #4]

                    return ERR_NONE;
 800777a:	2300      	movs	r3, #0
 800777c:	e006      	b.n	800778c <ndefGetVCard+0xf8>
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	3301      	adds	r3, #1
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2b0f      	cmp	r3, #15
 8007788:	d9af      	bls.n	80076ea <ndefGetVCard+0x56>
                }
            }
        }
    }

    return ERR_NOTFOUND;
 800778a:	2316      	movs	r3, #22
}
 800778c:	4618      	mov	r0, r3
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <ndefVCardFindMarker>:


/*****************************************************************************/
static ReturnCode ndefVCardFindMarker(const ndefConstBuffer* bufPayload, const ndefConstBuffer* bufMarker, uint32_t* offset)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
    uint32_t tempOffset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) ||
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00d      	beq.n	80077c2 <ndefVCardFindMarker+0x2e>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d009      	beq.n	80077c2 <ndefVCardFindMarker+0x2e>
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d006      	beq.n	80077c2 <ndefVCardFindMarker+0x2e>
         (bufMarker  == NULL) || (bufMarker->buffer  == NULL) ||
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <ndefVCardFindMarker+0x2e>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <ndefVCardFindMarker+0x32>
         (offset     == NULL) )
    {
        return ERR_PROTO;
 80077c2:	230b      	movs	r3, #11
 80077c4:	e025      	b.n	8007812 <ndefVCardFindMarker+0x7e>
    }

    tempOffset = 0;
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]
    while (tempOffset < (bufPayload->length - bufMarker->length))
 80077ca:	e019      	b.n	8007800 <ndefVCardFindMarker+0x6c>
    {
        if (bufMarker->length > 0U)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d012      	beq.n	80077fa <ndefVCardFindMarker+0x66>
        {
            // TODO Convert To Upper to be case insensitive
            if (ST_BYTECMP(&bufPayload->buffer[tempOffset], bufMarker->buffer, bufMarker->length) == 0)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	18d0      	adds	r0, r2, r3
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	6819      	ldr	r1, [r3, #0]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	461a      	mov	r2, r3
 80077e6:	f011 faf7 	bl	8018dd8 <memcmp>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d104      	bne.n	80077fa <ndefVCardFindMarker+0x66>
            {
                *offset = tempOffset;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	601a      	str	r2, [r3, #0]
                return ERR_NONE;
 80077f6:	2300      	movs	r3, #0
 80077f8:	e00b      	b.n	8007812 <ndefVCardFindMarker+0x7e>
            }
        }
        tempOffset++;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	3301      	adds	r3, #1
 80077fe:	617b      	str	r3, [r7, #20]
    while (tempOffset < (bufPayload->length - bufMarker->length))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	429a      	cmp	r2, r3
 800780e:	d3dd      	bcc.n	80077cc <ndefVCardFindMarker+0x38>
    }

    return ERR_NOTFOUND;
 8007810:	2316      	movs	r3, #22
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <ndefVCardExtractLine>:


/*****************************************************************************/
static ReturnCode ndefVCardExtractLine(const ndefConstBuffer* bufPayload, const ndefConstBuffer* bufMarker, ndefConstBuffer* bufLine)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b086      	sub	sp, #24
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
    ReturnCode err;
    uint32_t markerOffset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) ||
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d011      	beq.n	8007850 <ndefVCardExtractLine+0x36>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00d      	beq.n	8007850 <ndefVCardExtractLine+0x36>
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <ndefVCardExtractLine+0x36>
         (bufMarker  == NULL) || (bufMarker->buffer  == NULL) ||
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d006      	beq.n	8007850 <ndefVCardExtractLine+0x36>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <ndefVCardExtractLine+0x36>
         (bufLine    == NULL) || (bufLine->buffer    == NULL) )
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <ndefVCardExtractLine+0x3a>
    {
        return ERR_PROTO;
 8007850:	230b      	movs	r3, #11
 8007852:	e01c      	b.n	800788e <ndefVCardExtractLine+0x74>
    }

    err = ndefVCardFindMarker(bufPayload, bufMarker, &markerOffset);
 8007854:	f107 0310 	add.w	r3, r7, #16
 8007858:	461a      	mov	r2, r3
 800785a:	68b9      	ldr	r1, [r7, #8]
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f7ff ff99 	bl	8007794 <ndefVCardFindMarker>
 8007862:	4603      	mov	r3, r0
 8007864:	82fb      	strh	r3, [r7, #22]
    if (err == ERR_NONE)
 8007866:	8afb      	ldrh	r3, [r7, #22]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d107      	bne.n	800787c <ndefVCardExtractLine+0x62>
    {
        /* Return up to the marker */
        bufLine->buffer = bufPayload->buffer;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	601a      	str	r2, [r3, #0]
        bufLine->length = markerOffset;
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	605a      	str	r2, [r3, #4]
 800787a:	e007      	b.n	800788c <ndefVCardExtractLine+0x72>
    }
    else
    {
        /* Return up to the end of the payload */
        bufLine->buffer = bufPayload->buffer;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	601a      	str	r2, [r3, #0]
        bufLine->length = bufPayload->length;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	605a      	str	r2, [r3, #4]
    }

    return ERR_NONE;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <ndefVCardParseLine>:


/*****************************************************************************/
static ReturnCode ndefVCardParseLine(const ndefConstBuffer* bufLine, ndefVCardEntry* vCardEntry)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    ndefConstBuffer bufKeyword;
    uint32_t semicolonOffset;
    uint32_t colonOffset;

    if ( (bufLine == NULL) || (bufLine->buffer == NULL) || (vCardEntry == NULL) )
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d006      	beq.n	80078b6 <ndefVCardParseLine+0x1e>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <ndefVCardParseLine+0x1e>
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <ndefVCardParseLine+0x22>
    {
        return ERR_PROTO;
 80078b6:	230b      	movs	r3, #11
 80078b8:	e053      	b.n	8007962 <ndefVCardParseLine+0xca>
    }

    /* Look for the type delimiter colon ":" */
    err = ndefVCardFindMarker(bufLine, &bufDelimiterColon, &colonOffset);
 80078ba:	f107 030c 	add.w	r3, r7, #12
 80078be:	461a      	mov	r2, r3
 80078c0:	492a      	ldr	r1, [pc, #168]	; (800796c <ndefVCardParseLine+0xd4>)
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff ff66 	bl	8007794 <ndefVCardFindMarker>
 80078c8:	4603      	mov	r3, r0
 80078ca:	83fb      	strh	r3, [r7, #30]
    if (err != ERR_NONE)
 80078cc:	8bfb      	ldrh	r3, [r7, #30]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <ndefVCardParseLine+0x3e>
    {
        /* Invalid line */
        return err;
 80078d2:	8bfb      	ldrh	r3, [r7, #30]
 80078d4:	e045      	b.n	8007962 <ndefVCardParseLine+0xca>
    }

    /* Keyword is located at the begining of the line up to the delimiter colon */
    bufKeyword.buffer = bufLine->buffer;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	617b      	str	r3, [r7, #20]
    bufKeyword.length = colonOffset;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	61bb      	str	r3, [r7, #24]

    vCardEntry->bufTypeBuffer = bufLine->buffer;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	601a      	str	r2, [r3, #0]
    vCardEntry->bufTypeLength = (uint8_t)colonOffset;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	731a      	strb	r2, [r3, #12]

    /* Look for any subtype delimiter semicolon ";" */
    err = ndefVCardFindMarker(&bufKeyword, &bufDelimiterSemicolon, &semicolonOffset);
 80078f0:	f107 0210 	add.w	r2, r7, #16
 80078f4:	f107 0314 	add.w	r3, r7, #20
 80078f8:	491d      	ldr	r1, [pc, #116]	; (8007970 <ndefVCardParseLine+0xd8>)
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7ff ff4a 	bl	8007794 <ndefVCardFindMarker>
 8007900:	4603      	mov	r3, r0
 8007902:	83fb      	strh	r3, [r7, #30]
    if (err == ERR_NONE)
 8007904:	8bfb      	ldrh	r3, [r7, #30]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d11a      	bne.n	8007940 <ndefVCardParseLine+0xa8>
    {
        /* Subtype found (remove the leading ";") */
        vCardEntry->bufSubTypeBuffer = &bufLine->buffer[semicolonOffset + 1U];
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	3301      	adds	r3, #1
 8007912:	441a      	add	r2, r3
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	605a      	str	r2, [r3, #4]
        vCardEntry->bufSubTypeLength = (uint8_t)(colonOffset - semicolonOffset - 1U);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	b2da      	uxtb	r2, r3
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	b2db      	uxtb	r3, r3
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	b2db      	uxtb	r3, r3
 8007924:	3b01      	subs	r3, #1
 8007926:	b2da      	uxtb	r2, r3
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	735a      	strb	r2, [r3, #13]

        /* Adjust the Type length */
        vCardEntry->bufTypeLength -= vCardEntry->bufSubTypeLength + 1U;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	7b1a      	ldrb	r2, [r3, #12]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	7b5b      	ldrb	r3, [r3, #13]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	b2db      	uxtb	r3, r3
 8007938:	3b01      	subs	r3, #1
 800793a:	b2da      	uxtb	r2, r3
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	731a      	strb	r2, [r3, #12]
    }

    /* The value follows ":" until the end of the line */
    vCardEntry->bufValueBuffer = &bufLine->buffer[colonOffset + 1U];
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3301      	adds	r3, #1
 8007948:	441a      	add	r2, r3
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	609a      	str	r2, [r3, #8]
    vCardEntry->bufValueLength = (uint16_t)(bufLine->length - colonOffset);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	b29a      	uxth	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	b29b      	uxth	r3, r3
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	b29a      	uxth	r2, r3
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	81da      	strh	r2, [r3, #14]

    return ERR_NONE;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3720      	adds	r7, #32
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	0801aa90 	.word	0x0801aa90
 8007970:	0801aa98 	.word	0x0801aa98

08007974 <ndefIsVCardTypeFound>:


/*****************************************************************************/
static bool ndefIsVCardTypeFound(const ndefTypeVCard* vCard, const uint8_t* typeString)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800797e:	2300      	movs	r3, #0
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	e01e      	b.n	80079c2 <ndefIsVCardTypeFound+0x4e>
    {
        if (vCard->entry[i].bufTypeLength > 0U)
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	4413      	add	r3, r2
 800798c:	330c      	adds	r3, #12
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d013      	beq.n	80079bc <ndefIsVCardTypeFound+0x48>
        {
            if (ST_BYTECMP(typeString, vCard->entry[i].bufTypeBuffer, vCard->entry[i].bufTypeLength) == 0)
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	011b      	lsls	r3, r3, #4
 800799a:	4413      	add	r3, r2
 800799c:	6819      	ldr	r1, [r3, #0]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	011b      	lsls	r3, r3, #4
 80079a4:	4413      	add	r3, r2
 80079a6:	330c      	adds	r3, #12
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	6838      	ldr	r0, [r7, #0]
 80079ae:	f011 fa13 	bl	8018dd8 <memcmp>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <ndefIsVCardTypeFound+0x48>
            {
                return true;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e006      	b.n	80079ca <ndefIsVCardTypeFound+0x56>
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	3301      	adds	r3, #1
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b0f      	cmp	r3, #15
 80079c6:	d9dd      	bls.n	8007984 <ndefIsVCardTypeFound+0x10>
            }
        }
    }

    return false;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <ndefPayloadToVcard>:


/*****************************************************************************/
static ReturnCode ndefPayloadToVcard(const ndefConstBuffer* bufPayload, ndefType* vCard)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08c      	sub	sp, #48	; 0x30
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint32_t entry_count;
    ndefConstBuffer bufLinePayload;
    ndefConstBuffer bufLine;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (bufPayload->length == 0U) ||
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00a      	beq.n	80079fa <ndefPayloadToVcard+0x26>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d006      	beq.n	80079fa <ndefPayloadToVcard+0x26>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <ndefPayloadToVcard+0x26>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <ndefPayloadToVcard+0x2a>
         (vCard      == NULL) )
    {
        return ERR_PROTO;
 80079fa:	230b      	movs	r3, #11
 80079fc:	e09c      	b.n	8007b38 <ndefPayloadToVcard+0x164>
    }

    vCard->id               = NDEF_TYPE_MEDIA_VCARD;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2206      	movs	r2, #6
 8007a02:	701a      	strb	r2, [r3, #0]
    vCard->getPayloadLength = ndefVCardPayloadGetLength;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	4a4e      	ldr	r2, [pc, #312]	; (8007b40 <ndefPayloadToVcard+0x16c>)
 8007a08:	605a      	str	r2, [r3, #4]
    vCard->getPayloadItem   = ndefVCardToPayloadItem;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	4a4d      	ldr	r2, [pc, #308]	; (8007b44 <ndefPayloadToVcard+0x170>)
 8007a0e:	609a      	str	r2, [r3, #8]
    vCardData               = &vCard->data.vCard;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	330c      	adds	r3, #12
 8007a14:	623b      	str	r3, [r7, #32]

    /* Clear the vCard before parsing */
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 8007a16:	2300      	movs	r3, #0
 8007a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a1a:	e02b      	b.n	8007a74 <ndefPayloadToVcard+0xa0>
    {
        vCardData->entry[i].bufTypeBuffer    = NULL;
 8007a1c:	6a3a      	ldr	r2, [r7, #32]
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	011b      	lsls	r3, r3, #4
 8007a22:	4413      	add	r3, r2
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufTypeLength    = 0;
 8007a28:	6a3a      	ldr	r2, [r7, #32]
 8007a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2c:	011b      	lsls	r3, r3, #4
 8007a2e:	4413      	add	r3, r2
 8007a30:	330c      	adds	r3, #12
 8007a32:	2200      	movs	r2, #0
 8007a34:	701a      	strb	r2, [r3, #0]
        vCardData->entry[i].bufSubTypeBuffer = NULL;
 8007a36:	6a3a      	ldr	r2, [r7, #32]
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	4413      	add	r3, r2
 8007a3e:	3304      	adds	r3, #4
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufSubTypeLength = 0;
 8007a44:	6a3a      	ldr	r2, [r7, #32]
 8007a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a48:	011b      	lsls	r3, r3, #4
 8007a4a:	4413      	add	r3, r2
 8007a4c:	330d      	adds	r3, #13
 8007a4e:	2200      	movs	r2, #0
 8007a50:	701a      	strb	r2, [r3, #0]
        vCardData->entry[i].bufValueBuffer   = NULL;
 8007a52:	6a3a      	ldr	r2, [r7, #32]
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	011b      	lsls	r3, r3, #4
 8007a58:	4413      	add	r3, r2
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufValueLength   = 0;
 8007a60:	6a3a      	ldr	r2, [r7, #32]
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	011b      	lsls	r3, r3, #4
 8007a66:	4413      	add	r3, r2
 8007a68:	330e      	adds	r3, #14
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 8007a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a70:	3301      	adds	r3, #1
 8007a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	2b0f      	cmp	r3, #15
 8007a78:	d9d0      	bls.n	8007a1c <ndefPayloadToVcard+0x48>
    }

    offset = 0;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    entry_count = 0;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	627b      	str	r3, [r7, #36]	; 0x24
    while ( (offset < bufPayload->length) && (entry_count < NDEF_VCARD_ENTRY_MAX) )
 8007a82:	e029      	b.n	8007ad8 <ndefPayloadToVcard+0x104>
    {
        /* Search an "end of line" or end of payload among the remaining to parse */
        bufLinePayload.buffer = &bufPayload->buffer[offset];
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	4413      	add	r3, r2
 8007a8c:	617b      	str	r3, [r7, #20]
        bufLinePayload.length = bufPayload->length - offset;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	61bb      	str	r3, [r7, #24]

        (void)ndefVCardExtractLine(&bufLinePayload, &bufDelimiterNewLine, &bufLine);
 8007a98:	f107 020c 	add.w	r2, r7, #12
 8007a9c:	f107 0314 	add.w	r3, r7, #20
 8007aa0:	4929      	ldr	r1, [pc, #164]	; (8007b48 <ndefPayloadToVcard+0x174>)
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7ff feb9 	bl	800781a <ndefVCardExtractLine>

        /* Parse line and fill vCard entry */
        err = ndefVCardParseLine(&bufLine, &vCardData->entry[entry_count]);
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	011b      	lsls	r3, r3, #4
 8007aac:	6a3a      	ldr	r2, [r7, #32]
 8007aae:	441a      	add	r2, r3
 8007ab0:	f107 030c 	add.w	r3, r7, #12
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7ff feee 	bl	8007898 <ndefVCardParseLine>
 8007abc:	4603      	mov	r3, r0
 8007abe:	83fb      	strh	r3, [r7, #30]
        if (err == ERR_NONE)
 8007ac0:	8bfb      	ldrh	r3, [r7, #30]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d102      	bne.n	8007acc <ndefPayloadToVcard+0xf8>
        {
            entry_count++;
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	3301      	adds	r3, #1
 8007aca:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Move to the next line */
        offset += bufLine.length + bufDelimiterNewLine.length;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ad4:	4413      	add	r3, r2
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    while ( (offset < bufPayload->length) && (entry_count < NDEF_VCARD_ENTRY_MAX) )
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d202      	bcs.n	8007ae8 <ndefPayloadToVcard+0x114>
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	2b0f      	cmp	r3, #15
 8007ae6:	d9cd      	bls.n	8007a84 <ndefPayloadToVcard+0xb0>
    }

    /* Check BEGIN, VERSION and END types exist */
    if (ndefIsVCardTypeFound(vCardData, bufTypeBegin.buffer) == false)
 8007ae8:	4b18      	ldr	r3, [pc, #96]	; (8007b4c <ndefPayloadToVcard+0x178>)
 8007aea:	4619      	mov	r1, r3
 8007aec:	6a38      	ldr	r0, [r7, #32]
 8007aee:	f7ff ff41 	bl	8007974 <ndefIsVCardTypeFound>
 8007af2:	4603      	mov	r3, r0
 8007af4:	f083 0301 	eor.w	r3, r3, #1
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <ndefPayloadToVcard+0x12e>
    {
        return ERR_SYNTAX;
 8007afe:	2314      	movs	r3, #20
 8007b00:	e01a      	b.n	8007b38 <ndefPayloadToVcard+0x164>
    }
    else if (ndefIsVCardTypeFound(vCardData, bufTypeVersion.buffer) == false)
 8007b02:	4b13      	ldr	r3, [pc, #76]	; (8007b50 <ndefPayloadToVcard+0x17c>)
 8007b04:	4619      	mov	r1, r3
 8007b06:	6a38      	ldr	r0, [r7, #32]
 8007b08:	f7ff ff34 	bl	8007974 <ndefIsVCardTypeFound>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	f083 0301 	eor.w	r3, r3, #1
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <ndefPayloadToVcard+0x148>
    {
        return ERR_SYNTAX;
 8007b18:	2314      	movs	r3, #20
 8007b1a:	e00d      	b.n	8007b38 <ndefPayloadToVcard+0x164>
    }
    else if (ndefIsVCardTypeFound(vCardData, bufTypeEnd.buffer) == false)
 8007b1c:	4b0d      	ldr	r3, [pc, #52]	; (8007b54 <ndefPayloadToVcard+0x180>)
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6a38      	ldr	r0, [r7, #32]
 8007b22:	f7ff ff27 	bl	8007974 <ndefIsVCardTypeFound>
 8007b26:	4603      	mov	r3, r0
 8007b28:	f083 0301 	eor.w	r3, r3, #1
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <ndefPayloadToVcard+0x162>
    {
        return ERR_SYNTAX;
 8007b32:	2314      	movs	r3, #20
 8007b34:	e000      	b.n	8007b38 <ndefPayloadToVcard+0x164>
    else
    {
        /* MISRA 15.7 - Empty else */
    }

    return ERR_NONE;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3730      	adds	r7, #48	; 0x30
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	08007247 	.word	0x08007247
 8007b44:	0800734d 	.word	0x0800734d
 8007b48:	0801aaa0 	.word	0x0801aaa0
 8007b4c:	0801aaa8 	.word	0x0801aaa8
 8007b50:	0801aab4 	.word	0x0801aab4
 8007b54:	0801aab0 	.word	0x0801aab0

08007b58 <ndefRecordToVCard>:


/*****************************************************************************/
ReturnCode ndefRecordToVCard(const ndefRecord* record, ndefType* vCard)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (vCard == NULL) )
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <ndefRecordToVCard+0x16>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <ndefRecordToVCard+0x1a>
    {
        return ERR_PARAM;
 8007b6e:	2307      	movs	r3, #7
 8007b70:	e022      	b.n	8007bb8 <ndefRecordToVCard+0x60>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeVCard)) /* "text/x-vCard" */
 8007b72:	4a13      	ldr	r2, [pc, #76]	; (8007bc0 <ndefRecordToVCard+0x68>)
 8007b74:	2102      	movs	r1, #2
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7fe fc38 	bl	80063ec <ndefRecordTypeMatch>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	f083 0301 	eor.w	r3, r3, #1
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <ndefRecordToVCard+0x34>
    {
        return ERR_PROTO;
 8007b88:	230b      	movs	r3, #11
 8007b8a:	e015      	b.n	8007bb8 <ndefRecordToVCard+0x60>
    }

    ndeftype = ndefRecordGetNdefType(record);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff fb35 	bl	80071fc <ndefRecordGetNdefType>
 8007b92:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d007      	beq.n	8007baa <ndefRecordToVCard+0x52>
    {
        (void)ST_MEMCPY(vCard, ndeftype, sizeof(ndefType));
 8007b9a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8007b9e:	68f9      	ldr	r1, [r7, #12]
 8007ba0:	6838      	ldr	r0, [r7, #0]
 8007ba2:	f011 f928 	bl	8018df6 <memcpy>
        return ERR_NONE;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e006      	b.n	8007bb8 <ndefRecordToVCard+0x60>
    }

    return ndefPayloadToVcard(&record->bufPayload, vCard);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	330c      	adds	r3, #12
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff ff0f 	bl	80079d4 <ndefPayloadToVcard>
 8007bb6:	4603      	mov	r3, r0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	0801aa7c 	.word	0x0801aa7c

08007bc4 <ndefVCardToRecord>:


/*****************************************************************************/
ReturnCode ndefVCardToRecord(const ndefType* vCard, ndefRecord* record)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
    if ( (vCard  == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d006      	beq.n	8007be2 <ndefVCardToRecord+0x1e>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b06      	cmp	r3, #6
 8007bda:	d102      	bne.n	8007be2 <ndefVCardToRecord+0x1e>
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <ndefVCardToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 8007be2:	2307      	movs	r3, #7
 8007be4:	e00c      	b.n	8007c00 <ndefVCardToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 8007be6:	6838      	ldr	r0, [r7, #0]
 8007be8:	f7fe fb2a 	bl	8006240 <ndefRecordReset>

    (void)ndefRecordSetType(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeVCard);
 8007bec:	4a06      	ldr	r2, [pc, #24]	; (8007c08 <ndefVCardToRecord+0x44>)
 8007bee:	2102      	movs	r1, #2
 8007bf0:	6838      	ldr	r0, [r7, #0]
 8007bf2:	f7fe fba6 	bl	8006342 <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, vCard);
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	6838      	ldr	r0, [r7, #0]
 8007bfa:	f7ff fac7 	bl	800718c <ndefRecordSetNdefType>

    return ERR_NONE;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	0801aa7c 	.word	0x0801aa7c

08007c0c <ndefEmptyTypePayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefEmptyTypePayloadGetLength(const ndefType* empty)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
    if ( (empty == NULL) || (empty->id != NDEF_TYPE_EMPTY) )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <ndefEmptyTypePayloadGetLength+0x16>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <ndefEmptyTypePayloadGetLength+0x1a>
    {
        return 0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	e000      	b.n	8007c28 <ndefEmptyTypePayloadGetLength+0x1c>
    }

    return 0;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bc80      	pop	{r7}
 8007c30:	4770      	bx	lr

08007c32 <ndefEmptyTypePayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefEmptyTypePayloadItem(const ndefType* empty, ndefConstBuffer* bufItem, bool begin)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b085      	sub	sp, #20
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	71fb      	strb	r3, [r7, #7]
    if ( (empty == NULL) || (empty->id != NDEF_TYPE_EMPTY) )
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <ndefEmptyTypePayloadItem+0x1c>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <ndefEmptyTypePayloadItem+0x20>
    {
        return NULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e009      	b.n	8007c66 <ndefEmptyTypePayloadItem+0x34>
    }

    NO_WARNING(begin);

    if (bufItem != NULL)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d005      	beq.n	8007c64 <ndefEmptyTypePayloadItem+0x32>
    {
        bufItem->buffer = NULL;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2200      	movs	r2, #0
 8007c62:	605a      	str	r2, [r3, #4]
    }

    return NULL;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bc80      	pop	{r7}
 8007c6e:	4770      	bx	lr

08007c70 <ndefEmptyType>:


/*****************************************************************************/
ReturnCode ndefEmptyType(ndefType* empty)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
    if (empty == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <ndefEmptyType+0x12>
    {
        return ERR_PARAM;
 8007c7e:	2307      	movs	r3, #7
 8007c80:	e009      	b.n	8007c96 <ndefEmptyType+0x26>
    }

    empty->id               = NDEF_TYPE_EMPTY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	701a      	strb	r2, [r3, #0]
    empty->getPayloadLength = ndefEmptyTypePayloadGetLength;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a05      	ldr	r2, [pc, #20]	; (8007ca0 <ndefEmptyType+0x30>)
 8007c8c:	605a      	str	r2, [r3, #4]
    empty->getPayloadItem   = ndefEmptyTypePayloadItem;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a04      	ldr	r2, [pc, #16]	; (8007ca4 <ndefEmptyType+0x34>)
 8007c92:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bc80      	pop	{r7}
 8007c9e:	4770      	bx	lr
 8007ca0:	08007c0d 	.word	0x08007c0d
 8007ca4:	08007c33 	.word	0x08007c33

08007ca8 <ndefRecordToEmptyType>:


/*****************************************************************************/
ReturnCode ndefRecordToEmptyType(const ndefRecord* record, ndefType* empty)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
    ndefConstBuffer8 bufEmpty = { NULL, 0 };
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60bb      	str	r3, [r7, #8]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	733b      	strb	r3, [r7, #12]

    if ( (record == NULL) || (empty == NULL) )
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <ndefRecordToEmptyType+0x1e>
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <ndefRecordToEmptyType+0x22>
    {
        return ERR_PARAM;
 8007cc6:	2307      	movs	r3, #7
 8007cc8:	e024      	b.n	8007d14 <ndefRecordToEmptyType+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_EMPTY, &bufEmpty))
 8007cca:	f107 0308 	add.w	r3, r7, #8
 8007cce:	461a      	mov	r2, r3
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7fe fb8a 	bl	80063ec <ndefRecordTypeMatch>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f083 0301 	eor.w	r3, r3, #1
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <ndefRecordToEmptyType+0x40>
    {
        return ERR_PARAM;
 8007ce4:	2307      	movs	r3, #7
 8007ce6:	e015      	b.n	8007d14 <ndefRecordToEmptyType+0x6c>
    }

    if ( (record->idLength          != 0U) || (record->id                != NULL) ||
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	789b      	ldrb	r3, [r3, #2]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10b      	bne.n	8007d08 <ndefRecordToEmptyType+0x60>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d107      	bne.n	8007d08 <ndefRecordToEmptyType+0x60>
         (record->bufPayload.length != 0U) || (record->bufPayload.buffer != NULL) )
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
    if ( (record->idLength          != 0U) || (record->id                != NULL) ||
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d103      	bne.n	8007d08 <ndefRecordToEmptyType+0x60>
         (record->bufPayload.length != 0U) || (record->bufPayload.buffer != NULL) )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <ndefRecordToEmptyType+0x64>
    {
        return ERR_PARAM;
 8007d08:	2307      	movs	r3, #7
 8007d0a:	e003      	b.n	8007d14 <ndefRecordToEmptyType+0x6c>
    }

    return ndefEmptyType(empty);
 8007d0c:	6838      	ldr	r0, [r7, #0]
 8007d0e:	f7ff ffaf 	bl	8007c70 <ndefEmptyType>
 8007d12:	4603      	mov	r3, r0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <ndefEmptyTypeToRecord>:


/*****************************************************************************/
ReturnCode ndefEmptyTypeToRecord(const ndefType* empty, ndefRecord* record)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
    if ( (empty  == NULL) || (empty->id != NDEF_TYPE_EMPTY) ||
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d006      	beq.n	8007d3a <ndefEmptyTypeToRecord+0x1e>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d102      	bne.n	8007d3a <ndefEmptyTypeToRecord+0x1e>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <ndefEmptyTypeToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 8007d3a:	2307      	movs	r3, #7
 8007d3c:	e007      	b.n	8007d4e <ndefEmptyTypeToRecord+0x32>
    }

    (void)ndefRecordReset(record);
 8007d3e:	6838      	ldr	r0, [r7, #0]
 8007d40:	f7fe fa7e 	bl	8006240 <ndefRecordReset>

    (void)ndefRecordSetNdefType(record, empty);
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	6838      	ldr	r0, [r7, #0]
 8007d48:	f7ff fa20 	bl	800718c <ndefRecordSetNdefType>

    return ERR_NONE;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <ndefRtdDeviceInfoPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdDeviceInfoPayloadGetLength(const ndefType* devInfo)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b087      	sub	sp, #28
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t payloadLength = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	617b      	str	r3, [r7, #20]
    uint32_t i;

    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) )
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <ndefRtdDeviceInfoPayloadGetLength+0x1a>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d001      	beq.n	8007d74 <ndefRtdDeviceInfoPayloadGetLength+0x1e>
    {
        return 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	e01d      	b.n	8007db0 <ndefRtdDeviceInfoPayloadGetLength+0x5a>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	330c      	adds	r3, #12
 8007d78:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	613b      	str	r3, [r7, #16]
 8007d7e:	e013      	b.n	8007da8 <ndefRtdDeviceInfoPayloadGetLength+0x52>
    {
        if (rtdDevInfo->devInfo[i].length != 0U)
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	00db      	lsls	r3, r3, #3
 8007d86:	4413      	add	r3, r2
 8007d88:	785b      	ldrb	r3, [r3, #1]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d009      	beq.n	8007da2 <ndefRtdDeviceInfoPayloadGetLength+0x4c>
        {
            payloadLength += sizeof(rtdDevInfo->devInfo[i].type) + sizeof(rtdDevInfo->devInfo[i].length) + (uint32_t)rtdDevInfo->devInfo[i].length;
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	4413      	add	r3, r2
 8007d96:	785b      	ldrb	r3, [r3, #1]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	3302      	adds	r3, #2
 8007da0:	617b      	str	r3, [r7, #20]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	3301      	adds	r3, #1
 8007da6:	613b      	str	r3, [r7, #16]
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	2b04      	cmp	r3, #4
 8007dac:	d9e8      	bls.n	8007d80 <ndefRtdDeviceInfoPayloadGetLength+0x2a>
        }
    }

    return payloadLength;
 8007dae:	697b      	ldr	r3, [r7, #20]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	371c      	adds	r7, #28
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bc80      	pop	{r7}
 8007db8:	4770      	bx	lr
	...

08007dbc <ndefRtdDeviceInfoToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdDeviceInfoToPayloadItem(const ndefType* devInfo, ndefConstBuffer* bufItem, bool begin)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b087      	sub	sp, #28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t index;

    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d006      	beq.n	8007dde <ndefRtdDeviceInfoToPayloadItem+0x22>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d102      	bne.n	8007dde <ndefRtdDeviceInfoToPayloadItem+0x22>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <ndefRtdDeviceInfoToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	e061      	b.n	8007ea6 <ndefRtdDeviceInfoToPayloadItem+0xea>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	330c      	adds	r3, #12
 8007de6:	617b      	str	r3, [r7, #20]

    if (begin == true)
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <ndefRtdDeviceInfoToPayloadItem+0x38>
    {
        item = 0;
 8007dee:	4b30      	ldr	r3, [pc, #192]	; (8007eb0 <ndefRtdDeviceInfoToPayloadItem+0xf4>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	605a      	str	r2, [r3, #4]

    index = item / 3U;
 8007e00:	4b2b      	ldr	r3, [pc, #172]	; (8007eb0 <ndefRtdDeviceInfoToPayloadItem+0xf4>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a2b      	ldr	r2, [pc, #172]	; (8007eb4 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 8007e06:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0a:	085b      	lsrs	r3, r3, #1
 8007e0c:	613b      	str	r3, [r7, #16]

    /* Stop streaming on first empty entry */
    if (rtdDevInfo->devInfo[index].length > 0U)
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	4413      	add	r3, r2
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d03c      	beq.n	8007e96 <ndefRtdDeviceInfoToPayloadItem+0xda>
    {
        switch (item % 3U)
 8007e1c:	4b24      	ldr	r3, [pc, #144]	; (8007eb0 <ndefRtdDeviceInfoToPayloadItem+0xf4>)
 8007e1e:	6819      	ldr	r1, [r3, #0]
 8007e20:	4b24      	ldr	r3, [pc, #144]	; (8007eb4 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 8007e22:	fba3 2301 	umull	r2, r3, r3, r1
 8007e26:	085b      	lsrs	r3, r3, #1
 8007e28:	461a      	mov	r2, r3
 8007e2a:	0052      	lsls	r2, r2, #1
 8007e2c:	441a      	add	r2, r3
 8007e2e:	1a8b      	subs	r3, r1, r2
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d00e      	beq.n	8007e52 <ndefRtdDeviceInfoToPayloadItem+0x96>
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d302      	bcc.n	8007e3e <ndefRtdDeviceInfoToPayloadItem+0x82>
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d015      	beq.n	8007e68 <ndefRtdDeviceInfoToPayloadItem+0xac>
 8007e3c:	e024      	b.n	8007e88 <ndefRtdDeviceInfoToPayloadItem+0xcc>
        {
        case 0:
            bufItem->buffer = &rtdDevInfo->devInfo[index].type;
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	441a      	add	r2, r3
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	601a      	str	r2, [r3, #0]
            bufItem->length = sizeof(rtdDevInfo->devInfo[index].type);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	605a      	str	r2, [r3, #4]
            break;
 8007e50:	e022      	b.n	8007e98 <ndefRtdDeviceInfoToPayloadItem+0xdc>
        case 1:
            bufItem->buffer = &rtdDevInfo->devInfo[index].length;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	00db      	lsls	r3, r3, #3
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	4413      	add	r3, r2
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	601a      	str	r2, [r3, #0]
            bufItem->length = sizeof(rtdDevInfo->devInfo[index].length);
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2201      	movs	r2, #1
 8007e64:	605a      	str	r2, [r3, #4]
            break;
 8007e66:	e017      	b.n	8007e98 <ndefRtdDeviceInfoToPayloadItem+0xdc>
        case 2:
            bufItem->buffer = rtdDevInfo->devInfo[index].buffer;
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	00db      	lsls	r3, r3, #3
 8007e6e:	4413      	add	r3, r2
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	601a      	str	r2, [r3, #0]
            bufItem->length = rtdDevInfo->devInfo[index].length;
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	4413      	add	r3, r2
 8007e7e:	785b      	ldrb	r3, [r3, #1]
 8007e80:	461a      	mov	r2, r3
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	605a      	str	r2, [r3, #4]
            break;
 8007e86:	e007      	b.n	8007e98 <ndefRtdDeviceInfoToPayloadItem+0xdc>
        default:
            bufItem->buffer = NULL;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	601a      	str	r2, [r3, #0]
            bufItem->length = 0;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2200      	movs	r2, #0
 8007e92:	605a      	str	r2, [r3, #4]
            break;
 8007e94:	e000      	b.n	8007e98 <ndefRtdDeviceInfoToPayloadItem+0xdc>
        }
    }
 8007e96:	bf00      	nop

    /* Move to next item for next call */
    item++;
 8007e98:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <ndefRtdDeviceInfoToPayloadItem+0xf4>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	4a04      	ldr	r2, [pc, #16]	; (8007eb0 <ndefRtdDeviceInfoToPayloadItem+0xf4>)
 8007ea0:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	681b      	ldr	r3, [r3, #0]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	371c      	adds	r7, #28
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr
 8007eb0:	20002f28 	.word	0x20002f28
 8007eb4:	aaaaaaab 	.word	0xaaaaaaab

08007eb8 <ndefGetRtdDeviceInfo>:
}


/*****************************************************************************/
ReturnCode ndefGetRtdDeviceInfo(const ndefType* devInfo, ndefTypeRtdDeviceInfo* devInfoData)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t i;

    if ( (devInfo     == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d006      	beq.n	8007ed6 <ndefGetRtdDeviceInfo+0x1e>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d102      	bne.n	8007ed6 <ndefGetRtdDeviceInfo+0x1e>
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <ndefGetRtdDeviceInfo+0x22>
         (devInfoData == NULL) )
    {
        return ERR_PARAM;
 8007ed6:	2307      	movs	r3, #7
 8007ed8:	e029      	b.n	8007f2e <ndefGetRtdDeviceInfo+0x76>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	330c      	adds	r3, #12
 8007ede:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	e01f      	b.n	8007f26 <ndefGetRtdDeviceInfo+0x6e>
    {
        devInfoData->devInfo[i].type   = rtdDevInfo->devInfo[i].type;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        devInfoData->devInfo[i].length = rtdDevInfo->devInfo[i].length;
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	4413      	add	r3, r2
 8007efe:	7859      	ldrb	r1, [r3, #1]
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	4413      	add	r3, r2
 8007f08:	460a      	mov	r2, r1
 8007f0a:	705a      	strb	r2, [r3, #1]
        devInfoData->devInfo[i].buffer = rtdDevInfo->devInfo[i].buffer;
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	4413      	add	r3, r2
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	440b      	add	r3, r1
 8007f1e:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3301      	adds	r3, #1
 8007f24:	60fb      	str	r3, [r7, #12]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	d9dc      	bls.n	8007ee6 <ndefGetRtdDeviceInfo+0x2e>
    }

    return ERR_NONE;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bc80      	pop	{r7}
 8007f36:	4770      	bx	lr

08007f38 <ndefPayloadToRtdDeviceInfo>:


/*****************************************************************************/
static ReturnCode ndefPayloadToRtdDeviceInfo(const ndefConstBuffer* bufDevInfo, ndefType* devInfo)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b089      	sub	sp, #36	; 0x24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint8_t  count;
    uint8_t  manufacturerNameIndex;
    uint8_t  modelNameIndex;

    if ( (bufDevInfo == NULL) || (bufDevInfo->buffer == NULL) || (bufDevInfo->length == 0U) ||
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00a      	beq.n	8007f5e <ndefPayloadToRtdDeviceInfo+0x26>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d006      	beq.n	8007f5e <ndefPayloadToRtdDeviceInfo+0x26>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <ndefPayloadToRtdDeviceInfo+0x26>
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <ndefPayloadToRtdDeviceInfo+0x2a>
         (devInfo    == NULL) )
    {
        return ERR_PARAM;
 8007f5e:	2307      	movs	r3, #7
 8007f60:	e09d      	b.n	800809e <ndefPayloadToRtdDeviceInfo+0x166>
    }

    devInfo->id               = NDEF_TYPE_RTD_DEVICE_INFO;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2201      	movs	r2, #1
 8007f66:	701a      	strb	r2, [r3, #0]
    devInfo->getPayloadLength = ndefRtdDeviceInfoPayloadGetLength;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	4a4f      	ldr	r2, [pc, #316]	; (80080a8 <ndefPayloadToRtdDeviceInfo+0x170>)
 8007f6c:	605a      	str	r2, [r3, #4]
    devInfo->getPayloadItem   = ndefRtdDeviceInfoToPayloadItem;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	4a4e      	ldr	r2, [pc, #312]	; (80080ac <ndefPayloadToRtdDeviceInfo+0x174>)
 8007f72:	609a      	str	r2, [r3, #8]
    rtdDevInfo                = &devInfo->data.deviceInfo;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	330c      	adds	r3, #12
 8007f78:	613b      	str	r3, [r7, #16]

    if ( (bufDevInfo->length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) ||
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	2b05      	cmp	r3, #5
 8007f80:	d905      	bls.n	8007f8e <ndefPayloadToRtdDeviceInfo+0x56>
         (bufDevInfo->length > NDEF_RTD_DEVICE_INFO_PAYLOAD_MAX) )
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
    if ( (bufDevInfo->length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) ||
 8007f86:	f240 4216 	movw	r2, #1046	; 0x416
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d901      	bls.n	8007f92 <ndefPayloadToRtdDeviceInfo+0x5a>
    {
        return ERR_PROTO;
 8007f8e:	230b      	movs	r3, #11
 8007f90:	e085      	b.n	800809e <ndefPayloadToRtdDeviceInfo+0x166>
    }

    /* Extract device information from the buffer */

    /* Clear the Device Information structure before parsing */
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8007f92:	2300      	movs	r3, #0
 8007f94:	61fb      	str	r3, [r7, #28]
 8007f96:	e013      	b.n	8007fc0 <ndefPayloadToRtdDeviceInfo+0x88>
    {
        rtdDevInfo->devInfo[i].type   = 0;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        rtdDevInfo->devInfo[i].length = 0;
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	4413      	add	r3, r2
 8007faa:	2200      	movs	r2, #0
 8007fac:	705a      	strb	r2, [r3, #1]
        rtdDevInfo->devInfo[i].buffer = NULL;
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	61fb      	str	r3, [r7, #28]
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	2b04      	cmp	r3, #4
 8007fc4:	d9e8      	bls.n	8007f98 <ndefPayloadToRtdDeviceInfo+0x60>
    }

    /* Read Type, Length and Value fields */
    /* Not checking multiple occurences of a given field, use the last one */
    offset = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	61bb      	str	r3, [r7, #24]
    count = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	75fb      	strb	r3, [r7, #23]
    manufacturerNameIndex = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	75bb      	strb	r3, [r7, #22]
    modelNameIndex = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	757b      	strb	r3, [r7, #21]

    while ( ((offset + NDEF_RTD_DEVICE_INFO_TLV_LENGTH_MIN) < bufDevInfo->length)
 8007fd6:	e044      	b.n	8008062 <ndefPayloadToRtdDeviceInfo+0x12a>
            && (count < NDEF_DEVICE_INFO_TYPE_COUNT) )
    {
        uint8_t type   =  bufDevInfo->buffer[offset];
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	4413      	add	r3, r2
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	73fb      	strb	r3, [r7, #15]
        uint8_t length =  bufDevInfo->buffer[offset + 1U];
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	3301      	adds	r3, #1
 8007fec:	4413      	add	r3, r2
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	73bb      	strb	r3, [r7, #14]
        if ((type == NDEF_DEVICE_INFO_UUID) && (length != NDEF_UUID_LENGTH))
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d104      	bne.n	8008002 <ndefPayloadToRtdDeviceInfo+0xca>
 8007ff8:	7bbb      	ldrb	r3, [r7, #14]
 8007ffa:	2b10      	cmp	r3, #16
 8007ffc:	d001      	beq.n	8008002 <ndefPayloadToRtdDeviceInfo+0xca>
        {
            return ERR_PROTO;
 8007ffe:	230b      	movs	r3, #11
 8008000:	e04d      	b.n	800809e <ndefPayloadToRtdDeviceInfo+0x166>
        }
        if ( (type > NDEF_DEVICE_INFO_TYPE_COUNT) || (length == 0U) )
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	2b05      	cmp	r3, #5
 8008006:	d802      	bhi.n	800800e <ndefPayloadToRtdDeviceInfo+0xd6>
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <ndefPayloadToRtdDeviceInfo+0xda>
        {
            return ERR_PROTO;
 800800e:	230b      	movs	r3, #11
 8008010:	e045      	b.n	800809e <ndefPayloadToRtdDeviceInfo+0x166>
        }
        if (type == NDEF_DEVICE_INFO_MANUFACTURER_NAME)
 8008012:	7bfb      	ldrb	r3, [r7, #15]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d102      	bne.n	800801e <ndefPayloadToRtdDeviceInfo+0xe6>
        {
            manufacturerNameIndex = count;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
 800801a:	75bb      	strb	r3, [r7, #22]
 800801c:	e004      	b.n	8008028 <ndefPayloadToRtdDeviceInfo+0xf0>
        }
        else
        {
            if (type == NDEF_DEVICE_INFO_MODEL_NAME)
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d101      	bne.n	8008028 <ndefPayloadToRtdDeviceInfo+0xf0>
            {
                modelNameIndex = count;
 8008024:	7dfb      	ldrb	r3, [r7, #23]
 8008026:	757b      	strb	r3, [r7, #21]
            }
        }

        rtdDevInfo->devInfo[count].type   = type;
 8008028:	7dfa      	ldrb	r2, [r7, #23]
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	7bf9      	ldrb	r1, [r7, #15]
 800802e:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        rtdDevInfo->devInfo[count].length = length;
 8008032:	7dfb      	ldrb	r3, [r7, #23]
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	00db      	lsls	r3, r3, #3
 8008038:	4413      	add	r3, r2
 800803a:	7bba      	ldrb	r2, [r7, #14]
 800803c:	705a      	strb	r2, [r3, #1]
        rtdDevInfo->devInfo[count].buffer = &bufDevInfo->buffer[offset + 2U];
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6819      	ldr	r1, [r3, #0]
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	1c9a      	adds	r2, r3, #2
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	440a      	add	r2, r1
 800804a:	6939      	ldr	r1, [r7, #16]
 800804c:	00db      	lsls	r3, r3, #3
 800804e:	440b      	add	r3, r1
 8008050:	605a      	str	r2, [r3, #4]
        count++;
 8008052:	7dfb      	ldrb	r3, [r7, #23]
 8008054:	3301      	adds	r3, #1
 8008056:	75fb      	strb	r3, [r7, #23]

        /* Next entry */
        offset += sizeof(uint8_t) + sizeof(uint8_t) + (uint32_t)length;
 8008058:	7bba      	ldrb	r2, [r7, #14]
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	4413      	add	r3, r2
 800805e:	3302      	adds	r3, #2
 8008060:	61bb      	str	r3, [r7, #24]
    while ( ((offset + NDEF_RTD_DEVICE_INFO_TLV_LENGTH_MIN) < bufDevInfo->length)
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	1c9a      	adds	r2, r3, #2
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	429a      	cmp	r2, r3
 800806c:	d202      	bcs.n	8008074 <ndefPayloadToRtdDeviceInfo+0x13c>
            && (count < NDEF_DEVICE_INFO_TYPE_COUNT) )
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	2b04      	cmp	r3, #4
 8008072:	d9b1      	bls.n	8007fd8 <ndefPayloadToRtdDeviceInfo+0xa0>
    }

    /* Check both required fields are there */
    if ( (manufacturerNameIndex != modelNameIndex) &&
 8008074:	7dba      	ldrb	r2, [r7, #22]
 8008076:	7d7b      	ldrb	r3, [r7, #21]
 8008078:	429a      	cmp	r2, r3
 800807a:	d00f      	beq.n	800809c <ndefPayloadToRtdDeviceInfo+0x164>
         (rtdDevInfo->devInfo[manufacturerNameIndex].buffer != NULL) &&
 800807c:	7dbb      	ldrb	r3, [r7, #22]
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	00db      	lsls	r3, r3, #3
 8008082:	4413      	add	r3, r2
 8008084:	685b      	ldr	r3, [r3, #4]
    if ( (manufacturerNameIndex != modelNameIndex) &&
 8008086:	2b00      	cmp	r3, #0
 8008088:	d008      	beq.n	800809c <ndefPayloadToRtdDeviceInfo+0x164>
         (rtdDevInfo->devInfo[modelNameIndex].buffer        != NULL) )
 800808a:	7d7b      	ldrb	r3, [r7, #21]
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	4413      	add	r3, r2
 8008092:	685b      	ldr	r3, [r3, #4]
         (rtdDevInfo->devInfo[manufacturerNameIndex].buffer != NULL) &&
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <ndefPayloadToRtdDeviceInfo+0x164>
    {
        return ERR_NONE;
 8008098:	2300      	movs	r3, #0
 800809a:	e000      	b.n	800809e <ndefPayloadToRtdDeviceInfo+0x166>
    }
    else
    {
        return ERR_PARAM;
 800809c:	2307      	movs	r3, #7
    }
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3724      	adds	r7, #36	; 0x24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bc80      	pop	{r7}
 80080a6:	4770      	bx	lr
 80080a8:	08007d57 	.word	0x08007d57
 80080ac:	08007dbd 	.word	0x08007dbd

080080b0 <ndefRecordToRtdDeviceInfo>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdDeviceInfo(const ndefRecord* record, ndefType* devInfo)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (devInfo == NULL) )
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <ndefRecordToRtdDeviceInfo+0x16>
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <ndefRecordToRtdDeviceInfo+0x1a>
    {
        return ERR_PARAM;
 80080c6:	2307      	movs	r3, #7
 80080c8:	e028      	b.n	800811c <ndefRecordToRtdDeviceInfo+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeDeviceInfo)) /* "Di" */
 80080ca:	4a16      	ldr	r2, [pc, #88]	; (8008124 <ndefRecordToRtdDeviceInfo+0x74>)
 80080cc:	2101      	movs	r1, #1
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7fe f98c 	bl	80063ec <ndefRecordTypeMatch>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f083 0301 	eor.w	r3, r3, #1
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <ndefRecordToRtdDeviceInfo+0x34>
    {
        return ERR_PROTO;
 80080e0:	230b      	movs	r3, #11
 80080e2:	e01b      	b.n	800811c <ndefRecordToRtdDeviceInfo+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff f889 	bl	80071fc <ndefRecordGetNdefType>
 80080ea:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d007      	beq.n	8008102 <ndefRecordToRtdDeviceInfo+0x52>
    {
        (void)ST_MEMCPY(devInfo, ndeftype, sizeof(ndefType));
 80080f2:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80080f6:	68f9      	ldr	r1, [r7, #12]
 80080f8:	6838      	ldr	r0, [r7, #0]
 80080fa:	f010 fe7c 	bl	8018df6 <memcpy>
        return ERR_NONE;
 80080fe:	2300      	movs	r3, #0
 8008100:	e00c      	b.n	800811c <ndefRecordToRtdDeviceInfo+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) /* Device Information Payload Min */
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	2b05      	cmp	r3, #5
 8008108:	d801      	bhi.n	800810e <ndefRecordToRtdDeviceInfo+0x5e>
    {
        return ERR_PROTO;
 800810a:	230b      	movs	r3, #11
 800810c:	e006      	b.n	800811c <ndefRecordToRtdDeviceInfo+0x6c>
    }

    return ndefPayloadToRtdDeviceInfo(&record->bufPayload, devInfo);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	330c      	adds	r3, #12
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	4618      	mov	r0, r3
 8008116:	f7ff ff0f 	bl	8007f38 <ndefPayloadToRtdDeviceInfo>
 800811a:	4603      	mov	r3, r0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	0801aae4 	.word	0x0801aae4

08008128 <ndefRtdDeviceInfoToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdDeviceInfoToRecord(const ndefType* devInfo, ndefRecord* record)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d006      	beq.n	8008146 <ndefRtdDeviceInfoToRecord+0x1e>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d102      	bne.n	8008146 <ndefRtdDeviceInfoToRecord+0x1e>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <ndefRtdDeviceInfoToRecord+0x22>
         (record  == NULL) )
    {
        return ERR_PARAM;
 8008146:	2307      	movs	r3, #7
 8008148:	e00c      	b.n	8008164 <ndefRtdDeviceInfoToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800814a:	6838      	ldr	r0, [r7, #0]
 800814c:	f7fe f878 	bl	8006240 <ndefRecordReset>

    /* "Di" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeDeviceInfo);
 8008150:	4a06      	ldr	r2, [pc, #24]	; (800816c <ndefRtdDeviceInfoToRecord+0x44>)
 8008152:	2101      	movs	r1, #1
 8008154:	6838      	ldr	r0, [r7, #0]
 8008156:	f7fe f8f4 	bl	8006342 <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, devInfo);
 800815a:	6879      	ldr	r1, [r7, #4]
 800815c:	6838      	ldr	r0, [r7, #0]
 800815e:	f7ff f815 	bl	800718c <ndefRecordSetNdefType>

    return ERR_NONE;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	0801aae4 	.word	0x0801aae4

08008170 <ndefRtdTextPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdTextPayloadGetLength(const ndefType* text)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdText* rtdText;

    if ( (text == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) )
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <ndefRtdTextPayloadGetLength+0x16>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	2b02      	cmp	r3, #2
 8008184:	d001      	beq.n	800818a <ndefRtdTextPayloadGetLength+0x1a>
    {
        return 0;
 8008186:	2300      	movs	r3, #0
 8008188:	e009      	b.n	800819e <ndefRtdTextPayloadGetLength+0x2e>
    }

    rtdText = &text->data.text;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	330c      	adds	r3, #12
 800818e:	60fb      	str	r3, [r7, #12]

    return sizeof(rtdText->status) + rtdText->bufLanguageCode.length + rtdText->bufSentence.length;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	7a1b      	ldrb	r3, [r3, #8]
 8008194:	461a      	mov	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	4413      	add	r3, r2
 800819c:	3301      	adds	r3, #1
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bc80      	pop	{r7}
 80081a6:	4770      	bx	lr

080081a8 <ndefRtdTextToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdTextToPayloadItem(const ndefType* text, ndefConstBuffer* bufItem, bool begin)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	4613      	mov	r3, r2
 80081b4:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdText* rtdText;

    if ( (text    == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d006      	beq.n	80081ca <ndefRtdTextToPayloadItem+0x22>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d102      	bne.n	80081ca <ndefRtdTextToPayloadItem+0x22>
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <ndefRtdTextToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	e039      	b.n	8008242 <ndefRtdTextToPayloadItem+0x9a>
    }

    rtdText = &text->data.text;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	330c      	adds	r3, #12
 80081d2:	617b      	str	r3, [r7, #20]

    if (begin == true)
 80081d4:	79fb      	ldrb	r3, [r7, #7]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <ndefRtdTextToPayloadItem+0x38>
    {
        item = 0;
 80081da:	4b1c      	ldr	r3, [pc, #112]	; (800824c <ndefRtdTextToPayloadItem+0xa4>)
 80081dc:	2200      	movs	r2, #0
 80081de:	601a      	str	r2, [r3, #0]
    }

    switch (item)
 80081e0:	4b1a      	ldr	r3, [pc, #104]	; (800824c <ndefRtdTextToPayloadItem+0xa4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d00b      	beq.n	8008200 <ndefRtdTextToPayloadItem+0x58>
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d302      	bcc.n	80081f2 <ndefRtdTextToPayloadItem+0x4a>
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d011      	beq.n	8008214 <ndefRtdTextToPayloadItem+0x6c>
 80081f0:	e019      	b.n	8008226 <ndefRtdTextToPayloadItem+0x7e>
    {
    case 0:
        /* Status byte */
        bufItem->buffer = &rtdText->status;
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(rtdText->status);
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2201      	movs	r2, #1
 80081fc:	605a      	str	r2, [r3, #4]
        break;
 80081fe:	e019      	b.n	8008234 <ndefRtdTextToPayloadItem+0x8c>

    case 1:
        /* Language Code */
        bufItem->buffer = rtdText->bufLanguageCode.buffer;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdText->bufLanguageCode.length;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	7a1b      	ldrb	r3, [r3, #8]
 800820c:	461a      	mov	r2, r3
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	605a      	str	r2, [r3, #4]
        break;
 8008212:	e00f      	b.n	8008234 <ndefRtdTextToPayloadItem+0x8c>

    case 2:
        /* Actual text */
        bufItem->buffer = rtdText->bufSentence.buffer;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	68da      	ldr	r2, [r3, #12]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdText->bufSentence.length;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	691a      	ldr	r2, [r3, #16]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	605a      	str	r2, [r3, #4]
        break;
 8008224:	e006      	b.n	8008234 <ndefRtdTextToPayloadItem+0x8c>

    default:
        bufItem->buffer = NULL;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2200      	movs	r2, #0
 8008230:	605a      	str	r2, [r3, #4]
        break;
 8008232:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 8008234:	4b05      	ldr	r3, [pc, #20]	; (800824c <ndefRtdTextToPayloadItem+0xa4>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3301      	adds	r3, #1
 800823a:	4a04      	ldr	r2, [pc, #16]	; (800824c <ndefRtdTextToPayloadItem+0xa4>)
 800823c:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	681b      	ldr	r3, [r3, #0]
}
 8008242:	4618      	mov	r0, r3
 8008244:	371c      	adds	r7, #28
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	4770      	bx	lr
 800824c:	20002f2c 	.word	0x20002f2c

08008250 <ndefRtdText>:


/*****************************************************************************/
ReturnCode ndefRtdText(ndefType* text, uint8_t utfEncoding, const ndefConstBuffer8* bufLanguageCode, const ndefConstBuffer* bufSentence)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	607a      	str	r2, [r7, #4]
 800825a:	603b      	str	r3, [r7, #0]
 800825c:	460b      	mov	r3, r1
 800825e:	72fb      	strb	r3, [r7, #11]
    ndefTypeRtdText* rtdText;

    if ( (text            == NULL) ||
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d015      	beq.n	8008292 <ndefRtdText+0x42>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d012      	beq.n	8008292 <ndefRtdText+0x42>
         (bufLanguageCode == NULL) || (bufLanguageCode->buffer == NULL) || (bufLanguageCode->length == 0U) ||
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00e      	beq.n	8008292 <ndefRtdText+0x42>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	791b      	ldrb	r3, [r3, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00a      	beq.n	8008292 <ndefRtdText+0x42>
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d007      	beq.n	8008292 <ndefRtdText+0x42>
         (bufSentence     == NULL) || (bufSentence->buffer     == NULL) || (bufSentence->length     == 0U) )
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <ndefRtdText+0x42>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <ndefRtdText+0x46>
    {
        return ERR_PARAM;
 8008292:	2307      	movs	r3, #7
 8008294:	e036      	b.n	8008304 <ndefRtdText+0xb4>
    }

    if (bufLanguageCode->length > NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	791b      	ldrb	r3, [r3, #4]
 800829a:	2b3f      	cmp	r3, #63	; 0x3f
 800829c:	d901      	bls.n	80082a2 <ndefRtdText+0x52>
    {
        return ERR_PROTO;
 800829e:	230b      	movs	r3, #11
 80082a0:	e030      	b.n	8008304 <ndefRtdText+0xb4>
    }

    if ( (utfEncoding != TEXT_ENCODING_UTF8) && (utfEncoding != TEXT_ENCODING_UTF16) )
 80082a2:	7afb      	ldrb	r3, [r7, #11]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d004      	beq.n	80082b2 <ndefRtdText+0x62>
 80082a8:	7afb      	ldrb	r3, [r7, #11]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d001      	beq.n	80082b2 <ndefRtdText+0x62>
    {
        return ERR_PARAM;
 80082ae:	2307      	movs	r3, #7
 80082b0:	e028      	b.n	8008304 <ndefRtdText+0xb4>
    }

    text->id               = NDEF_TYPE_RTD_TEXT;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2202      	movs	r2, #2
 80082b6:	701a      	strb	r2, [r3, #0]
    text->getPayloadLength = ndefRtdTextPayloadGetLength;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4a15      	ldr	r2, [pc, #84]	; (8008310 <ndefRtdText+0xc0>)
 80082bc:	605a      	str	r2, [r3, #4]
    text->getPayloadItem   = ndefRtdTextToPayloadItem;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4a14      	ldr	r2, [pc, #80]	; (8008314 <ndefRtdText+0xc4>)
 80082c2:	609a      	str	r2, [r3, #8]
    rtdText                = &text->data.text;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	330c      	adds	r3, #12
 80082c8:	617b      	str	r3, [r7, #20]

    rtdText->status = (utfEncoding << NDEF_RTD_TEXT_ENCODING_SHIFT) | (bufLanguageCode->length & NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK);
 80082ca:	7afb      	ldrb	r3, [r7, #11]
 80082cc:	01db      	lsls	r3, r3, #7
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	791b      	ldrb	r3, [r3, #4]
 80082d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	4313      	orrs	r3, r2
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	701a      	strb	r2, [r3, #0]

    rtdText->bufLanguageCode.buffer = bufLanguageCode->buffer;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	605a      	str	r2, [r3, #4]
    rtdText->bufLanguageCode.length = bufLanguageCode->length;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	791a      	ldrb	r2, [r3, #4]
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	721a      	strb	r2, [r3, #8]

    rtdText->bufSentence.buffer = bufSentence->buffer;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	60da      	str	r2, [r3, #12]
    rtdText->bufSentence.length = bufSentence->length;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	371c      	adds	r7, #28
 8008308:	46bd      	mov	sp, r7
 800830a:	bc80      	pop	{r7}
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	08008171 	.word	0x08008171
 8008314:	080081a9 	.word	0x080081a9

08008318 <ndefGetRtdText>:


/*****************************************************************************/
ReturnCode ndefGetRtdText(const ndefType* text, uint8_t* utfEncoding, ndefConstBuffer8* bufLanguageCode, ndefConstBuffer* bufSentence)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	603b      	str	r3, [r7, #0]
    const ndefTypeRtdText* rtdText;

    if ( (text        == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00c      	beq.n	8008346 <ndefGetRtdText+0x2e>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	2b02      	cmp	r3, #2
 8008332:	d108      	bne.n	8008346 <ndefGetRtdText+0x2e>
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d005      	beq.n	8008346 <ndefGetRtdText+0x2e>
         (utfEncoding == NULL) || (bufLanguageCode == NULL) || (bufSentence == NULL) )
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d002      	beq.n	8008346 <ndefGetRtdText+0x2e>
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <ndefGetRtdText+0x32>
    {
        return ERR_PARAM;
 8008346:	2307      	movs	r3, #7
 8008348:	e019      	b.n	800837e <ndefGetRtdText+0x66>
    }

    rtdText = &text->data.text;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	330c      	adds	r3, #12
 800834e:	617b      	str	r3, [r7, #20]

    *utfEncoding            = (rtdText->status >> NDEF_RTD_TEXT_ENCODING_SHIFT) & 1U;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	09db      	lsrs	r3, r3, #7
 8008356:	b2da      	uxtb	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	701a      	strb	r2, [r3, #0]

    bufLanguageCode->buffer = rtdText->bufLanguageCode.buffer;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	601a      	str	r2, [r3, #0]
    bufLanguageCode->length = rtdText->bufLanguageCode.length;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	7a1a      	ldrb	r2, [r3, #8]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	711a      	strb	r2, [r3, #4]

    bufSentence->buffer     = rtdText->bufSentence.buffer;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	68da      	ldr	r2, [r3, #12]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	601a      	str	r2, [r3, #0]
    bufSentence->length     = rtdText->bufSentence.length;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	691a      	ldr	r2, [r3, #16]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	bc80      	pop	{r7}
 8008386:	4770      	bx	lr

08008388 <ndefPayloadToRtdText>:


/*****************************************************************************/
static ReturnCode ndefPayloadToRtdText(const ndefConstBuffer* bufText, ndefType* text)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
    ndefTypeRtdText* rtdText;
    uint8_t status;
    uint8_t languageCodeLength;

    if ( (bufText == NULL) || (bufText->buffer == NULL) || (bufText->length == 0U) ||
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00a      	beq.n	80083ae <ndefPayloadToRtdText+0x26>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d006      	beq.n	80083ae <ndefPayloadToRtdText+0x26>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <ndefPayloadToRtdText+0x26>
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <ndefPayloadToRtdText+0x2a>
         (text    == NULL) )
    {
        return ERR_PARAM;
 80083ae:	2307      	movs	r3, #7
 80083b0:	e02d      	b.n	800840e <ndefPayloadToRtdText+0x86>
    }

    text->id               = NDEF_TYPE_RTD_TEXT;
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2202      	movs	r2, #2
 80083b6:	701a      	strb	r2, [r3, #0]
    text->getPayloadLength = ndefRtdTextPayloadGetLength;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	4a17      	ldr	r2, [pc, #92]	; (8008418 <ndefPayloadToRtdText+0x90>)
 80083bc:	605a      	str	r2, [r3, #4]
    text->getPayloadItem   = ndefRtdTextToPayloadItem;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	4a16      	ldr	r2, [pc, #88]	; (800841c <ndefPayloadToRtdText+0x94>)
 80083c2:	609a      	str	r2, [r3, #8]
    rtdText                = &text->data.text;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	330c      	adds	r3, #12
 80083c8:	60fb      	str	r3, [r7, #12]

    /* Extract info from the payload */
    status = bufText->buffer[NDEF_RTD_TEXT_STATUS_OFFSET];
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	72fb      	strb	r3, [r7, #11]

    rtdText->status = status;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	7afa      	ldrb	r2, [r7, #11]
 80083d6:	701a      	strb	r2, [r3, #0]

    /* Extract info from the status byte */
    //uint8_t textUtfEncoding          = (status & NDEF_RTD_TEXT_ENCODING_MASK) >> NDEF_RTD_TEXT_ENCODING_SHIFT;
    languageCodeLength = (status & NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK);
 80083d8:	7afb      	ldrb	r3, [r7, #11]
 80083da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083de:	72bb      	strb	r3, [r7, #10]

    rtdText->bufLanguageCode.buffer = &(bufText->buffer[NDEF_RTD_TEXT_LANGUAGE_OFFSET]);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	1c5a      	adds	r2, r3, #1
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	605a      	str	r2, [r3, #4]
    rtdText->bufLanguageCode.length = languageCodeLength;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	7aba      	ldrb	r2, [r7, #10]
 80083ee:	721a      	strb	r2, [r3, #8]

    rtdText->bufSentence.buffer = &(bufText->buffer[NDEF_RTD_TEXT_LANGUAGE_OFFSET + languageCodeLength]);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	7abb      	ldrb	r3, [r7, #10]
 80083f6:	3301      	adds	r3, #1
 80083f8:	441a      	add	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	60da      	str	r2, [r3, #12]
    rtdText->bufSentence.length = bufText->length - sizeof(status) - languageCodeLength;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	7abb      	ldrb	r3, [r7, #10]
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	1e5a      	subs	r2, r3, #1
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	bc80      	pop	{r7}
 8008416:	4770      	bx	lr
 8008418:	08008171 	.word	0x08008171
 800841c:	080081a9 	.word	0x080081a9

08008420 <ndefRecordToRtdText>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdText(const ndefRecord* record, ndefType* text)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (text == NULL) )
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <ndefRecordToRtdText+0x16>
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <ndefRecordToRtdText+0x1a>
    {
        return ERR_PARAM;
 8008436:	2307      	movs	r3, #7
 8008438:	e028      	b.n	800848c <ndefRecordToRtdText+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeText)) /* "T" */
 800843a:	4a16      	ldr	r2, [pc, #88]	; (8008494 <ndefRecordToRtdText+0x74>)
 800843c:	2101      	movs	r1, #1
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7fd ffd4 	bl	80063ec <ndefRecordTypeMatch>
 8008444:	4603      	mov	r3, r0
 8008446:	f083 0301 	eor.w	r3, r3, #1
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <ndefRecordToRtdText+0x34>
    {
        return ERR_PROTO;
 8008450:	230b      	movs	r3, #11
 8008452:	e01b      	b.n	800848c <ndefRecordToRtdText+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7fe fed1 	bl	80071fc <ndefRecordGetNdefType>
 800845a:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d007      	beq.n	8008472 <ndefRecordToRtdText+0x52>
    {
        (void)ST_MEMCPY(text, ndeftype, sizeof(ndefType));
 8008462:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8008466:	68f9      	ldr	r1, [r7, #12]
 8008468:	6838      	ldr	r0, [r7, #0]
 800846a:	f010 fcc4 	bl	8018df6 <memcpy>
        return ERR_NONE;
 800846e:	2300      	movs	r3, #0
 8008470:	e00c      	b.n	800848c <ndefRecordToRtdText+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_TEXT_PAYLOAD_LENGTH_MIN) /* Text Payload Min */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d801      	bhi.n	800847e <ndefRecordToRtdText+0x5e>
    {
        return ERR_PROTO;
 800847a:	230b      	movs	r3, #11
 800847c:	e006      	b.n	800848c <ndefRecordToRtdText+0x6c>
    }

    return ndefPayloadToRtdText(&record->bufPayload, text);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	330c      	adds	r3, #12
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff ff7f 	bl	8008388 <ndefPayloadToRtdText>
 800848a:	4603      	mov	r3, r0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	0801aaec 	.word	0x0801aaec

08008498 <ndefRtdTextToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdTextToRecord(const ndefType* text, ndefRecord* record)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
    if ( (text   == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d006      	beq.n	80084b6 <ndefRtdTextToRecord+0x1e>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d102      	bne.n	80084b6 <ndefRtdTextToRecord+0x1e>
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <ndefRtdTextToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 80084b6:	2307      	movs	r3, #7
 80084b8:	e00c      	b.n	80084d4 <ndefRtdTextToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 80084ba:	6838      	ldr	r0, [r7, #0]
 80084bc:	f7fd fec0 	bl	8006240 <ndefRecordReset>

    /* "T" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeText);
 80084c0:	4a06      	ldr	r2, [pc, #24]	; (80084dc <ndefRtdTextToRecord+0x44>)
 80084c2:	2101      	movs	r1, #1
 80084c4:	6838      	ldr	r0, [r7, #0]
 80084c6:	f7fd ff3c 	bl	8006342 <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, text);
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	6838      	ldr	r0, [r7, #0]
 80084ce:	f7fe fe5d 	bl	800718c <ndefRecordSetNdefType>

    return ERR_NONE;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	0801aaec 	.word	0x0801aaec

080084e0 <ndefRtdUriPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdUriPayloadGetLength(const ndefType* uri)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdUri* rtdUri;

    if ( (uri == NULL) || (uri->id != NDEF_TYPE_RTD_URI) )
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d003      	beq.n	80084f6 <ndefRtdUriPayloadGetLength+0x16>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d001      	beq.n	80084fa <ndefRtdUriPayloadGetLength+0x1a>
    {
        return 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	e005      	b.n	8008506 <ndefRtdUriPayloadGetLength+0x26>
    }

    rtdUri = &uri->data.uri;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	330c      	adds	r3, #12
 80084fe:	60fb      	str	r3, [r7, #12]

    return sizeof(rtdUri->protocol) + rtdUri->bufUriString.length;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	3301      	adds	r3, #1
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	bc80      	pop	{r7}
 800850e:	4770      	bx	lr

08008510 <ndefRtdUriToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdUriToPayloadItem(const ndefType* uri, ndefConstBuffer* bufItem, bool begin)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdUri* rtdUri;

    if ( (uri     == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d006      	beq.n	8008532 <ndefRtdUriToPayloadItem+0x22>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	2b03      	cmp	r3, #3
 800852a:	d102      	bne.n	8008532 <ndefRtdUriToPayloadItem+0x22>
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <ndefRtdUriToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 8008532:	2300      	movs	r3, #0
 8008534:	e02d      	b.n	8008592 <ndefRtdUriToPayloadItem+0x82>
    }

    rtdUri = &uri->data.uri;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	330c      	adds	r3, #12
 800853a:	617b      	str	r3, [r7, #20]

    if (begin == true)
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <ndefRtdUriToPayloadItem+0x38>
    {
        item = 0;
 8008542:	4b16      	ldr	r3, [pc, #88]	; (800859c <ndefRtdUriToPayloadItem+0x8c>)
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]
    }

    switch (item)
 8008548:	4b14      	ldr	r3, [pc, #80]	; (800859c <ndefRtdUriToPayloadItem+0x8c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <ndefRtdUriToPayloadItem+0x46>
 8008550:	2b01      	cmp	r3, #1
 8008552:	d007      	beq.n	8008564 <ndefRtdUriToPayloadItem+0x54>
 8008554:	e00f      	b.n	8008576 <ndefRtdUriToPayloadItem+0x66>
    {
    case 0:
        /* Protocol byte */
        bufItem->buffer = &rtdUri->protocol;
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(rtdUri->protocol);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2201      	movs	r2, #1
 8008560:	605a      	str	r2, [r3, #4]
        break;
 8008562:	e00f      	b.n	8008584 <ndefRtdUriToPayloadItem+0x74>

    case 1:
        /* URI string */
        bufItem->buffer = rtdUri->bufUriString.buffer;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdUri->bufUriString.length;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	689a      	ldr	r2, [r3, #8]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	605a      	str	r2, [r3, #4]
        break;
 8008574:	e006      	b.n	8008584 <ndefRtdUriToPayloadItem+0x74>

    default:
        bufItem->buffer = NULL;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2200      	movs	r2, #0
 8008580:	605a      	str	r2, [r3, #4]
        break;
 8008582:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 8008584:	4b05      	ldr	r3, [pc, #20]	; (800859c <ndefRtdUriToPayloadItem+0x8c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3301      	adds	r3, #1
 800858a:	4a04      	ldr	r2, [pc, #16]	; (800859c <ndefRtdUriToPayloadItem+0x8c>)
 800858c:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	681b      	ldr	r3, [r3, #0]
}
 8008592:	4618      	mov	r0, r3
 8008594:	371c      	adds	r7, #28
 8008596:	46bd      	mov	sp, r7
 8008598:	bc80      	pop	{r7}
 800859a:	4770      	bx	lr
 800859c:	20002f30 	.word	0x20002f30

080085a0 <ndefRtdUriProtocolAutodetect>:


/*****************************************************************************/
static ReturnCode ndefRtdUriProtocolAutodetect(uint8_t* protocol, ndefConstBuffer* bufUriString)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
    uint8_t i; /* Protocol fits in 1 byte */

    if ( (protocol  == NULL)                       ||
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d006      	beq.n	80085be <ndefRtdUriProtocolAutodetect+0x1e>
         (*protocol != NDEF_URI_PREFIX_AUTODETECT) ||
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	781b      	ldrb	r3, [r3, #0]
    if ( (protocol  == NULL)                       ||
 80085b4:	2b24      	cmp	r3, #36	; 0x24
 80085b6:	d102      	bne.n	80085be <ndefRtdUriProtocolAutodetect+0x1e>
         (*protocol != NDEF_URI_PREFIX_AUTODETECT) ||
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <ndefRtdUriProtocolAutodetect+0x22>
         (bufUriString == NULL) )
    {
        return ERR_PARAM;
 80085be:	2307      	movs	r3, #7
 80085c0:	e03d      	b.n	800863e <ndefRtdUriProtocolAutodetect+0x9e>
    }

    for (i = 0; i < NDEF_URI_PREFIX_COUNT; i++)
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]
 80085c6:	e033      	b.n	8008630 <ndefRtdUriProtocolAutodetect+0x90>
    {
        if (ndefUriPrefix[i].length > 0U)
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	4a1f      	ldr	r2, [pc, #124]	; (8008648 <ndefRtdUriProtocolAutodetect+0xa8>)
 80085cc:	00db      	lsls	r3, r3, #3
 80085ce:	4413      	add	r3, r2
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d029      	beq.n	800862a <ndefRtdUriProtocolAutodetect+0x8a>
        {
            if (ST_BYTECMP(bufUriString->buffer, ndefUriPrefix[i].buffer, ndefUriPrefix[i].length) == 0)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	7bfb      	ldrb	r3, [r7, #15]
 80085dc:	4a1a      	ldr	r2, [pc, #104]	; (8008648 <ndefRtdUriProtocolAutodetect+0xa8>)
 80085de:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	4a18      	ldr	r2, [pc, #96]	; (8008648 <ndefRtdUriProtocolAutodetect+0xa8>)
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	4413      	add	r3, r2
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	461a      	mov	r2, r3
 80085ee:	f010 fbf3 	bl	8018dd8 <memcmp>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d118      	bne.n	800862a <ndefRtdUriProtocolAutodetect+0x8a>
            {
                *protocol = i;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	7bfa      	ldrb	r2, [r7, #15]
 80085fc:	701a      	strb	r2, [r3, #0]
                /* Move after the protocol string */
                bufUriString->buffer  = &bufUriString->buffer[ndefUriPrefix[i].length];
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	7bfb      	ldrb	r3, [r7, #15]
 8008604:	4910      	ldr	r1, [pc, #64]	; (8008648 <ndefRtdUriProtocolAutodetect+0xa8>)
 8008606:	00db      	lsls	r3, r3, #3
 8008608:	440b      	add	r3, r1
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	441a      	add	r2, r3
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	601a      	str	r2, [r3, #0]
                bufUriString->length -= ndefUriPrefix[i].length;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	685a      	ldr	r2, [r3, #4]
 8008616:	7bfb      	ldrb	r3, [r7, #15]
 8008618:	490b      	ldr	r1, [pc, #44]	; (8008648 <ndefRtdUriProtocolAutodetect+0xa8>)
 800861a:	00db      	lsls	r3, r3, #3
 800861c:	440b      	add	r3, r1
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	1ad2      	subs	r2, r2, r3
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	605a      	str	r2, [r3, #4]
                return ERR_NONE;
 8008626:	2300      	movs	r3, #0
 8008628:	e009      	b.n	800863e <ndefRtdUriProtocolAutodetect+0x9e>
    for (i = 0; i < NDEF_URI_PREFIX_COUNT; i++)
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	3301      	adds	r3, #1
 800862e:	73fb      	strb	r3, [r7, #15]
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	2b24      	cmp	r3, #36	; 0x24
 8008634:	d9c8      	bls.n	80085c8 <ndefRtdUriProtocolAutodetect+0x28>
            }
        }
    }

    *protocol = NDEF_URI_PREFIX_NONE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	701a      	strb	r2, [r3, #0]

    return ERR_NOTFOUND;
 800863c:	2316      	movs	r3, #22
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	0801ac84 	.word	0x0801ac84

0800864c <ndefRtdUri>:


/*****************************************************************************/
ReturnCode ndefRtdUri(ndefType* uri, uint8_t protocol, const ndefConstBuffer* bufUriString)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	460b      	mov	r3, r1
 8008656:	607a      	str	r2, [r7, #4]
 8008658:	72fb      	strb	r3, [r7, #11]
    ndefTypeRtdUri* rtdUri;
    ndefConstBuffer bufUri;
    uint8_t protocolDetect;

    if ( (uri == NULL) || (protocol >= NDEF_URI_PREFIX_COUNT) ||
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00d      	beq.n	800867c <ndefRtdUri+0x30>
 8008660:	7afb      	ldrb	r3, [r7, #11]
 8008662:	2b24      	cmp	r3, #36	; 0x24
 8008664:	d80a      	bhi.n	800867c <ndefRtdUri+0x30>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d007      	beq.n	800867c <ndefRtdUri+0x30>
         (bufUriString == NULL) || (bufUriString->buffer == NULL) || (bufUriString->length == 0U) )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d003      	beq.n	800867c <ndefRtdUri+0x30>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <ndefRtdUri+0x34>
    {
        return ERR_PARAM;
 800867c:	2307      	movs	r3, #7
 800867e:	e028      	b.n	80086d2 <ndefRtdUri+0x86>
    }

    uri->id               = NDEF_TYPE_RTD_URI;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2203      	movs	r2, #3
 8008684:	701a      	strb	r2, [r3, #0]
    uri->getPayloadLength = ndefRtdUriPayloadGetLength;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	4a14      	ldr	r2, [pc, #80]	; (80086dc <ndefRtdUri+0x90>)
 800868a:	605a      	str	r2, [r3, #4]
    uri->getPayloadItem   = ndefRtdUriToPayloadItem;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4a14      	ldr	r2, [pc, #80]	; (80086e0 <ndefRtdUri+0x94>)
 8008690:	609a      	str	r2, [r3, #8]
    rtdUri                = &uri->data.uri;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	330c      	adds	r3, #12
 8008696:	61fb      	str	r3, [r7, #28]

    bufUri.buffer = bufUriString->buffer;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	617b      	str	r3, [r7, #20]
    bufUri.length = bufUriString->length;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	61bb      	str	r3, [r7, #24]
    protocolDetect = protocol;
 80086a4:	7afb      	ldrb	r3, [r7, #11]
 80086a6:	74fb      	strb	r3, [r7, #19]
    if (protocol == NDEF_URI_PREFIX_AUTODETECT)
 80086a8:	7afb      	ldrb	r3, [r7, #11]
 80086aa:	2b24      	cmp	r3, #36	; 0x24
 80086ac:	d107      	bne.n	80086be <ndefRtdUri+0x72>
    {
        /* Update protocol and URI buffer */
        (void)ndefRtdUriProtocolAutodetect(&protocolDetect, &bufUri);
 80086ae:	f107 0214 	add.w	r2, r7, #20
 80086b2:	f107 0313 	add.w	r3, r7, #19
 80086b6:	4611      	mov	r1, r2
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7ff ff71 	bl	80085a0 <ndefRtdUriProtocolAutodetect>
    }
    rtdUri->protocol = protocolDetect;
 80086be:	7cfa      	ldrb	r2, [r7, #19]
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	701a      	strb	r2, [r3, #0]

    rtdUri->bufUriString.buffer = bufUri.buffer;
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	605a      	str	r2, [r3, #4]
    rtdUri->bufUriString.length = bufUri.length;
 80086ca:	69ba      	ldr	r2, [r7, #24]
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3720      	adds	r7, #32
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	080084e1 	.word	0x080084e1
 80086e0:	08008511 	.word	0x08008511

080086e4 <ndefGetRtdUri>:


/*****************************************************************************/
ReturnCode ndefGetRtdUri(const ndefType* uri, ndefConstBuffer* bufProtocol, ndefConstBuffer* bufUriString)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
    const ndefTypeRtdUri* rtdUri;

    if ( (uri         == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d009      	beq.n	800870a <ndefGetRtdUri+0x26>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d105      	bne.n	800870a <ndefGetRtdUri+0x26>
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <ndefGetRtdUri+0x26>
         (bufProtocol == NULL) || (bufUriString == NULL) )
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <ndefGetRtdUri+0x2a>
    {
        return ERR_PARAM;
 800870a:	2307      	movs	r3, #7
 800870c:	e01b      	b.n	8008746 <ndefGetRtdUri+0x62>
    }

    rtdUri = &uri->data.uri;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	330c      	adds	r3, #12
 8008712:	617b      	str	r3, [r7, #20]

    bufProtocol->buffer   = ndefUriPrefix[rtdUri->protocol].buffer;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	4b0d      	ldr	r3, [pc, #52]	; (8008750 <ndefGetRtdUri+0x6c>)
 800871c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	601a      	str	r2, [r3, #0]
    bufProtocol->length   = ndefUriPrefix[rtdUri->protocol].length;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	4a09      	ldr	r2, [pc, #36]	; (8008750 <ndefGetRtdUri+0x6c>)
 800872a:	00db      	lsls	r3, r3, #3
 800872c:	4413      	add	r3, r2
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	605a      	str	r2, [r3, #4]

    bufUriString->buffer = rtdUri->bufUriString.buffer;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	601a      	str	r2, [r3, #0]
    bufUriString->length = rtdUri->bufUriString.length;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	689a      	ldr	r2, [r3, #8]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	371c      	adds	r7, #28
 800874a:	46bd      	mov	sp, r7
 800874c:	bc80      	pop	{r7}
 800874e:	4770      	bx	lr
 8008750:	0801ac84 	.word	0x0801ac84

08008754 <ndefPayloadToRtdUri>:

/*****************************************************************************/
static ReturnCode ndefPayloadToRtdUri(const ndefConstBuffer* bufUri, ndefType* uri)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
    uint8_t protocol;

    if ( (bufUri == NULL) || (bufUri->buffer == NULL) || (bufUri->length == 0U) ||
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00a      	beq.n	800877a <ndefPayloadToRtdUri+0x26>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d006      	beq.n	800877a <ndefPayloadToRtdUri+0x26>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <ndefPayloadToRtdUri+0x26>
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <ndefPayloadToRtdUri+0x2a>
         (uri    == NULL) )
    {
        return ERR_PARAM;
 800877a:	2307      	movs	r3, #7
 800877c:	e013      	b.n	80087a6 <ndefPayloadToRtdUri+0x52>
    }

    /* Extract info from the payload */
    protocol = bufUri->buffer[NDEF_RTD_URI_ID_CODE_OFFSET];
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	75fb      	strb	r3, [r7, #23]

    ndefConstBuffer bufStringUri;
    bufStringUri.buffer = &bufUri->buffer[NDEF_RTD_URI_FIELD_OFFSET];
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3301      	adds	r3, #1
 800878c:	60fb      	str	r3, [r7, #12]
    bufStringUri.length =  bufUri->length - sizeof(protocol);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	3b01      	subs	r3, #1
 8008794:	613b      	str	r3, [r7, #16]

    return ndefRtdUri(uri, protocol, &bufStringUri);
 8008796:	f107 020c 	add.w	r2, r7, #12
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	4619      	mov	r1, r3
 800879e:	6838      	ldr	r0, [r7, #0]
 80087a0:	f7ff ff54 	bl	800864c <ndefRtdUri>
 80087a4:	4603      	mov	r3, r0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3718      	adds	r7, #24
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
	...

080087b0 <ndefRecordToRtdUri>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdUri(const ndefRecord* record, ndefType* uri)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (uri == NULL) )
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <ndefRecordToRtdUri+0x16>
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <ndefRecordToRtdUri+0x1a>
    {
        return ERR_PARAM;
 80087c6:	2307      	movs	r3, #7
 80087c8:	e028      	b.n	800881c <ndefRecordToRtdUri+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeUri)) /* "U" */
 80087ca:	4a16      	ldr	r2, [pc, #88]	; (8008824 <ndefRecordToRtdUri+0x74>)
 80087cc:	2101      	movs	r1, #1
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7fd fe0c 	bl	80063ec <ndefRecordTypeMatch>
 80087d4:	4603      	mov	r3, r0
 80087d6:	f083 0301 	eor.w	r3, r3, #1
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <ndefRecordToRtdUri+0x34>
    {
        return ERR_PROTO;
 80087e0:	230b      	movs	r3, #11
 80087e2:	e01b      	b.n	800881c <ndefRecordToRtdUri+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7fe fd09 	bl	80071fc <ndefRecordGetNdefType>
 80087ea:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d007      	beq.n	8008802 <ndefRecordToRtdUri+0x52>
    {
        (void)ST_MEMCPY(uri, ndeftype, sizeof(ndefType));
 80087f2:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80087f6:	68f9      	ldr	r1, [r7, #12]
 80087f8:	6838      	ldr	r0, [r7, #0]
 80087fa:	f010 fafc 	bl	8018df6 <memcpy>
        return ERR_NONE;
 80087fe:	2300      	movs	r3, #0
 8008800:	e00c      	b.n	800881c <ndefRecordToRtdUri+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_URI_PAYLOAD_LENGTH_MIN)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d801      	bhi.n	800880e <ndefRecordToRtdUri+0x5e>
    {
        return ERR_PROTO;
 800880a:	230b      	movs	r3, #11
 800880c:	e006      	b.n	800881c <ndefRecordToRtdUri+0x6c>
    }

    return ndefPayloadToRtdUri(&record->bufPayload, uri);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	330c      	adds	r3, #12
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	4618      	mov	r0, r3
 8008816:	f7ff ff9d 	bl	8008754 <ndefPayloadToRtdUri>
 800881a:	4603      	mov	r3, r0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	0801aaf4 	.word	0x0801aaf4

08008828 <ndefRtdUriToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdUriToRecord(const ndefType* uri, ndefRecord* record)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
    if ( (uri    == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d006      	beq.n	8008846 <ndefRtdUriToRecord+0x1e>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b03      	cmp	r3, #3
 800883e:	d102      	bne.n	8008846 <ndefRtdUriToRecord+0x1e>
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <ndefRtdUriToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 8008846:	2307      	movs	r3, #7
 8008848:	e00c      	b.n	8008864 <ndefRtdUriToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800884a:	6838      	ldr	r0, [r7, #0]
 800884c:	f7fd fcf8 	bl	8006240 <ndefRecordReset>

    /* "U" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeUri);
 8008850:	4a06      	ldr	r2, [pc, #24]	; (800886c <ndefRtdUriToRecord+0x44>)
 8008852:	2101      	movs	r1, #1
 8008854:	6838      	ldr	r0, [r7, #0]
 8008856:	f7fd fd74 	bl	8006342 <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, uri);
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	6838      	ldr	r0, [r7, #0]
 800885e:	f7fe fc95 	bl	800718c <ndefRecordSetNdefType>

    return ERR_NONE;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	0801aaf4 	.word	0x0801aaf4

08008870 <ndefRtdAar>:
 */


/*****************************************************************************/
ReturnCode ndefRtdAar(ndefType* aar, const ndefConstBuffer* bufPayload)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
    ndefTypeRtdAar* rtdAar;

    if ( (aar == NULL) ||
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00a      	beq.n	8008896 <ndefRtdAar+0x26>
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d007      	beq.n	8008896 <ndefRtdAar+0x26>
         (bufPayload == NULL) || (bufPayload->buffer == NULL) || (bufPayload->length == 0U) )
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <ndefRtdAar+0x26>
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <ndefRtdAar+0x2a>
    {
        return ERR_PARAM;
 8008896:	2307      	movs	r3, #7
 8008898:	e01a      	b.n	80088d0 <ndefRtdAar+0x60>
    }

    aar->id               = NDEF_TYPE_RTD_AAR;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2204      	movs	r2, #4
 800889e:	701a      	strb	r2, [r3, #0]
    aar->getPayloadLength = NULL;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	605a      	str	r2, [r3, #4]
    aar->getPayloadItem   = NULL;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	609a      	str	r2, [r3, #8]
    rtdAar                = &aar->data.aar;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	330c      	adds	r3, #12
 80088b0:	60fb      	str	r3, [r7, #12]

    rtdAar->bufType.buffer    = bufRtdTypeAar.buffer;
 80088b2:	4a0a      	ldr	r2, [pc, #40]	; (80088dc <ndefRtdAar+0x6c>)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	601a      	str	r2, [r3, #0]
    rtdAar->bufType.length    = bufRtdTypeAar.length;
 80088b8:	220f      	movs	r2, #15
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	711a      	strb	r2, [r3, #4]
    rtdAar->bufPayload.buffer = bufPayload->buffer;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	609a      	str	r2, [r3, #8]
    rtdAar->bufPayload.length = bufPayload->length;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	685a      	ldr	r2, [r3, #4]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	60da      	str	r2, [r3, #12]

    return ERR_NONE;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bc80      	pop	{r7}
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	0801aad4 	.word	0x0801aad4

080088e0 <ndefGetRtdAar>:


/*****************************************************************************/
ReturnCode ndefGetRtdAar(const ndefType* aar, ndefConstBuffer* bufAarString)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdAar* rtdAar;

    if ( (aar          == NULL) || (aar->id != NDEF_TYPE_RTD_AAR) ||
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d006      	beq.n	80088fe <ndefGetRtdAar+0x1e>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b04      	cmp	r3, #4
 80088f6:	d102      	bne.n	80088fe <ndefGetRtdAar+0x1e>
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <ndefGetRtdAar+0x22>
         (bufAarString == NULL) )
    {
        return ERR_PARAM;
 80088fe:	2307      	movs	r3, #7
 8008900:	e00b      	b.n	800891a <ndefGetRtdAar+0x3a>
    }

    rtdAar = &aar->data.aar;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	330c      	adds	r3, #12
 8008906:	60fb      	str	r3, [r7, #12]

    bufAarString->buffer = rtdAar->bufPayload.buffer;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	689a      	ldr	r2, [r3, #8]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	601a      	str	r2, [r3, #0]
    bufAarString->length = rtdAar->bufPayload.length;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	68da      	ldr	r2, [r3, #12]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	bc80      	pop	{r7}
 8008922:	4770      	bx	lr

08008924 <ndefRecordToRtdAar>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdAar(const ndefRecord* record, ndefType* aar)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (aar == NULL) )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <ndefRecordToRtdAar+0x16>
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d101      	bne.n	800893e <ndefRecordToRtdAar+0x1a>
    {
        return ERR_PARAM;
 800893a:	2307      	movs	r3, #7
 800893c:	e013      	b.n	8008966 <ndefRecordToRtdAar+0x42>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_EXTERNAL_TYPE, &bufRtdTypeAar)) /* "android.com:pkg" */
 800893e:	4a0c      	ldr	r2, [pc, #48]	; (8008970 <ndefRecordToRtdAar+0x4c>)
 8008940:	2104      	movs	r1, #4
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7fd fd52 	bl	80063ec <ndefRecordTypeMatch>
 8008948:	4603      	mov	r3, r0
 800894a:	f083 0301 	eor.w	r3, r3, #1
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <ndefRecordToRtdAar+0x34>
    {
        return ERR_PROTO;
 8008954:	230b      	movs	r3, #11
 8008956:	e006      	b.n	8008966 <ndefRecordToRtdAar+0x42>
    }

    /* No constraint on payload length */

    return ndefRtdAar(aar, &record->bufPayload);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	330c      	adds	r3, #12
 800895c:	4619      	mov	r1, r3
 800895e:	6838      	ldr	r0, [r7, #0]
 8008960:	f7ff ff86 	bl	8008870 <ndefRtdAar>
 8008964:	4603      	mov	r3, r0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	0801aafc 	.word	0x0801aafc

08008974 <ndefRtdAarToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdAarToRecord(const ndefType* aar, ndefRecord* record)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdAar* rtdAar;

    if ( (aar    == NULL) || (aar->id != NDEF_TYPE_RTD_AAR) ||
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d006      	beq.n	8008992 <ndefRtdAarToRecord+0x1e>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2b04      	cmp	r3, #4
 800898a:	d102      	bne.n	8008992 <ndefRtdAarToRecord+0x1e>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <ndefRtdAarToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 8008992:	2307      	movs	r3, #7
 8008994:	e011      	b.n	80089ba <ndefRtdAarToRecord+0x46>
    }

    rtdAar = &aar->data.aar;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	330c      	adds	r3, #12
 800899a:	60fb      	str	r3, [r7, #12]

    (void)ndefRecordReset(record);
 800899c:	6838      	ldr	r0, [r7, #0]
 800899e:	f7fd fc4f 	bl	8006240 <ndefRecordReset>

    /* "android.com:pkg" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_EXTERNAL_TYPE, &bufRtdTypeAar);
 80089a2:	4a08      	ldr	r2, [pc, #32]	; (80089c4 <ndefRtdAarToRecord+0x50>)
 80089a4:	2104      	movs	r1, #4
 80089a6:	6838      	ldr	r0, [r7, #0]
 80089a8:	f7fd fccb 	bl	8006342 <ndefRecordSetType>

    (void)ndefRecordSetPayload(record, &rtdAar->bufPayload);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	3308      	adds	r3, #8
 80089b0:	4619      	mov	r1, r3
 80089b2:	6838      	ldr	r0, [r7, #0]
 80089b4:	f7fd fd9a 	bl	80064ec <ndefRecordSetPayload>

    return ERR_NONE;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	0801aafc 	.word	0x0801aafc

080089c8 <ndefPollerContextInitialization>:
 */


/*******************************************************************************/
ReturnCode ndefPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
#else
        NULL,
#endif
    };

    if( (ctx == NULL) || (dev == NULL) )
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <ndefPollerContextInitialization+0x16>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <ndefPollerContextInitialization+0x1a>
    {
        return ERR_PARAM;
 80089de:	2307      	movs	r3, #7
 80089e0:	e019      	b.n	8008a16 <ndefPollerContextInitialization+0x4e>
    }
    
    ctx->ndefPollWrapper = ndefPollerWrappers[ndefPollerGetDeviceType(dev)];
 80089e2:	6838      	ldr	r0, [r7, #0]
 80089e4:	f000 fa02 	bl	8008dec <ndefPollerGetDeviceType>
 80089e8:	4603      	mov	r3, r0
 80089ea:	461a      	mov	r2, r3
 80089ec:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <ndefPollerContextInitialization+0x58>)
 80089ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    
    /* ndefPollWrapper is NULL when support of a given tag type is not enabled */
    if( ctx->ndefPollWrapper == NULL )
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <ndefPollerContextInitialization+0x3e>
    {
        return ERR_NOTSUPP;
 8008a02:	2318      	movs	r3, #24
 8008a04:	e007      	b.n	8008a16 <ndefPollerContextInitialization+0x4e>
    }
    
    return (ctx->ndefPollWrapper->pollerContextInitialization)(ctx, dev);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	4798      	blx	r3
 8008a14:	4603      	mov	r3, r0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	200000f4 	.word	0x200000f4

08008a24 <ndefPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <ndefPollerNdefDetect+0x14>
    {
        return ERR_PARAM;
 8008a34:	2307      	movs	r3, #7
 8008a36:	e00e      	b.n	8008a56 <ndefPollerNdefDetect+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <ndefPollerNdefDetect+0x22>
    { 
        return ERR_WRONG_STATE;
 8008a42:	2321      	movs	r3, #33	; 0x21
 8008a44:	e007      	b.n	8008a56 <ndefPollerNdefDetect+0x32>
    }
   
    return (ctx->ndefPollWrapper->pollerNdefDetect)(ctx, info);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	4798      	blx	r3
 8008a54:	4603      	mov	r3, r0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <ndefPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 8008a5e:	b590      	push	{r4, r7, lr}
 8008a60:	b085      	sub	sp, #20
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	60f8      	str	r0, [r7, #12]
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	607a      	str	r2, [r7, #4]
 8008a6a:	603b      	str	r3, [r7, #0]
    if( ctx == NULL )
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <ndefPollerReadRawMessage+0x18>
    {
        return ERR_PARAM;
 8008a72:	2307      	movs	r3, #7
 8008a74:	e010      	b.n	8008a98 <ndefPollerReadRawMessage+0x3a>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d101      	bne.n	8008a84 <ndefPollerReadRawMessage+0x26>
    { 
        return ERR_WRONG_STATE;
 8008a80:	2321      	movs	r3, #33	; 0x21
 8008a82:	e009      	b.n	8008a98 <ndefPollerReadRawMessage+0x3a>
    }

    return (ctx->ndefPollWrapper->pollerReadRawMessage)(ctx, buf, bufLen, rcvdLen);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a8a:	68dc      	ldr	r4, [r3, #12]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	68b9      	ldr	r1, [r7, #8]
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	47a0      	blx	r4
 8008a96:	4603      	mov	r3, r0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3714      	adds	r7, #20
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd90      	pop	{r4, r7, pc}

08008aa0 <ndefPollerWriteRawMessage>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
    if( ctx == NULL )
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <ndefPollerWriteRawMessage+0x16>
    {
        return ERR_PARAM;
 8008ab2:	2307      	movs	r3, #7
 8008ab4:	e00f      	b.n	8008ad6 <ndefPollerWriteRawMessage+0x36>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <ndefPollerWriteRawMessage+0x24>
    { 
        return ERR_WRONG_STATE;
 8008ac0:	2321      	movs	r3, #33	; 0x21
 8008ac2:	e008      	b.n	8008ad6 <ndefPollerWriteRawMessage+0x36>
    }
  
    return (ctx->ndefPollWrapper->pollerWriteRawMessage)(ctx, buf, bufLen);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	68b9      	ldr	r1, [r7, #8]
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	4798      	blx	r3
 8008ad4:	4603      	mov	r3, r0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <ndefPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b084      	sub	sp, #16
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	60f8      	str	r0, [r7, #12]
 8008ae6:	60b9      	str	r1, [r7, #8]
 8008ae8:	607a      	str	r2, [r7, #4]
    if( ctx == NULL )
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <ndefPollerTagFormat+0x16>
    {
        return ERR_PARAM;
 8008af0:	2307      	movs	r3, #7
 8008af2:	e00f      	b.n	8008b14 <ndefPollerTagFormat+0x36>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <ndefPollerTagFormat+0x24>
    { 
        return ERR_WRONG_STATE;
 8008afe:	2321      	movs	r3, #33	; 0x21
 8008b00:	e008      	b.n	8008b14 <ndefPollerTagFormat+0x36>
    }
  
    return (ctx->ndefPollWrapper->pollerTagFormat)(ctx, cc, options);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	68b9      	ldr	r1, [r7, #8]
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	4798      	blx	r3
 8008b12:	4603      	mov	r3, r0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <ndefPollerWriteBytes>:
    return (ctx->ndefPollWrapper->pollerWriteRawMessageLen)(ctx, rawMessageLen);
}

/*******************************************************************************/
ReturnCode ndefPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 8008b1c:	b590      	push	{r4, r7, lr}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
 8008b28:	603b      	str	r3, [r7, #0]
    if( ctx == NULL )
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <ndefPollerWriteBytes+0x18>
    {
        return ERR_PARAM;
 8008b30:	2307      	movs	r3, #7
 8008b32:	e010      	b.n	8008b56 <ndefPollerWriteBytes+0x3a>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <ndefPollerWriteBytes+0x26>
    { 
        return ERR_WRONG_STATE;
 8008b3e:	2321      	movs	r3, #33	; 0x21
 8008b40:	e009      	b.n	8008b56 <ndefPollerWriteBytes+0x3a>
    }
  
    return (ctx->ndefPollWrapper->pollerWriteBytes)(ctx, offset, buf, len);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b48:	691c      	ldr	r4, [r3, #16]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	68b9      	ldr	r1, [r7, #8]
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	47a0      	blx	r4
 8008b54:	4603      	mov	r3, r0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd90      	pop	{r4, r7, pc}

08008b5e <ndefPollerCheckAvailableSpace>:
    return (ctx->ndefPollWrapper->pollerCheckPresence)(ctx);
}

/*******************************************************************************/
ReturnCode ndefPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b082      	sub	sp, #8
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <ndefPollerCheckAvailableSpace+0x14>
    {
        return ERR_PARAM;
 8008b6e:	2307      	movs	r3, #7
 8008b70:	e00e      	b.n	8008b90 <ndefPollerCheckAvailableSpace+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <ndefPollerCheckAvailableSpace+0x22>
    { 
        return ERR_WRONG_STATE;
 8008b7c:	2321      	movs	r3, #33	; 0x21
 8008b7e:	e007      	b.n	8008b90 <ndefPollerCheckAvailableSpace+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerCheckAvailableSpace)(ctx, messageLen);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	4798      	blx	r3
 8008b8e:	4603      	mov	r3, r0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <ndefPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <ndefPollerBeginWriteMessage+0x14>
    {
        return ERR_PARAM;
 8008ba8:	2307      	movs	r3, #7
 8008baa:	e00e      	b.n	8008bca <ndefPollerBeginWriteMessage+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <ndefPollerBeginWriteMessage+0x22>
    { 
        return ERR_WRONG_STATE;
 8008bb6:	2321      	movs	r3, #33	; 0x21
 8008bb8:	e007      	b.n	8008bca <ndefPollerBeginWriteMessage+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerBeginWriteMessage)(ctx, messageLen);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	4798      	blx	r3
 8008bc8:	4603      	mov	r3, r0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <ndefPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b082      	sub	sp, #8
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <ndefPollerEndWriteMessage+0x14>
    {
        return ERR_PARAM;
 8008be2:	2307      	movs	r3, #7
 8008be4:	e00e      	b.n	8008c04 <ndefPollerEndWriteMessage+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <ndefPollerEndWriteMessage+0x22>
    { 
        return ERR_WRONG_STATE;
 8008bf0:	2321      	movs	r3, #33	; 0x21
 8008bf2:	e007      	b.n	8008c04 <ndefPollerEndWriteMessage+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerEndWriteMessage)(ctx, messageLen);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	4798      	blx	r3
 8008c02:	4603      	mov	r3, r0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <ndefPollerWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerWriteMessage(ndefContext *ctx, const ndefMessage* message)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08e      	sub	sp, #56	; 0x38
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
    ndefBuffer      bufHeader;
    ndefConstBuffer bufPayloadItem;
    uint32_t        offset;
    bool            firstPayloadItem;

    if ( (ctx == NULL) || (message == NULL) )
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <ndefPollerWriteMessage+0x16>
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <ndefPollerWriteMessage+0x1a>
    {
        return ERR_PARAM;
 8008c22:	2307      	movs	r3, #7
 8008c24:	e0de      	b.n	8008de4 <ndefPollerWriteMessage+0x1d8>
    }

    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d006      	beq.n	8008c3e <ndefPollerWriteMessage+0x32>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d001      	beq.n	8008c3e <ndefPollerWriteMessage+0x32>
    {
        return ERR_WRONG_STATE;
 8008c3a:	2321      	movs	r3, #33	; 0x21
 8008c3c:	e0d2      	b.n	8008de4 <ndefPollerWriteMessage+0x1d8>
    }

    (void)ndefMessageGetInfo(message, &info);
 8008c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c42:	4619      	mov	r1, r3
 8008c44:	6838      	ldr	r0, [r7, #0]
 8008c46:	f7fd f9b7 	bl	8005fb8 <ndefMessageGetInfo>

    /* Verify length of the NDEF message */
    err = ndefPollerCheckAvailableSpace(ctx, info.length);
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7ff ff85 	bl	8008b5e <ndefPollerCheckAvailableSpace>
 8008c54:	4603      	mov	r3, r0
 8008c56:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (err != ERR_NONE)
 8008c58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <ndefPollerWriteMessage+0x56>
    {
        /* Conclude procedure */
        return ERR_PARAM;
 8008c5e:	2307      	movs	r3, #7
 8008c60:	e0c0      	b.n	8008de4 <ndefPollerWriteMessage+0x1d8>
    }

    /* Reset L-Field/NLEN field */
    err = ndefPollerBeginWriteMessage(ctx, info.length);
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff ff96 	bl	8008b98 <ndefPollerBeginWriteMessage>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (err != ERR_NONE)
 8008c70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d005      	beq.n	8008c82 <ndefPollerWriteMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return err;
 8008c7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c80:	e0b0      	b.n	8008de4 <ndefPollerWriteMessage+0x1d8>
    }

    if (info.length != 0U)
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 80ac 	beq.w	8008de2 <ndefPollerWriteMessage+0x1d6>
    {
        offset = ctx->messageOffset;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c90:	633b      	str	r3, [r7, #48]	; 0x30
        record = ndefMessageGetFirstRecord(message);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <ndefPollerWriteMessage+0x92>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	e000      	b.n	8008ca0 <ndefPollerWriteMessage+0x94>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	637b      	str	r3, [r7, #52]	; 0x34

        while (record != NULL)
 8008ca2:	e08a      	b.n	8008dba <ndefPollerWriteMessage+0x1ae>
        {
            bufHeader.buffer = recordHeaderBuf;
 8008ca4:	f107 031c 	add.w	r3, r7, #28
 8008ca8:	617b      	str	r3, [r7, #20]
            bufHeader.length = sizeof(recordHeaderBuf);
 8008caa:	2307      	movs	r3, #7
 8008cac:	61bb      	str	r3, [r7, #24]
            (void)ndefRecordEncodeHeader(record, &bufHeader);
 8008cae:	f107 0314 	add.w	r3, r7, #20
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008cb6:	f7fd fd69 	bl	800678c <ndefRecordEncodeHeader>
            err = ndefPollerWriteBytes(ctx, offset, bufHeader.buffer, bufHeader.length);
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7ff ff2b 	bl	8008b1c <ndefPollerWriteBytes>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	85bb      	strh	r3, [r7, #44]	; 0x2c
            if (err != ERR_NONE)
 8008cca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <ndefPollerWriteMessage+0xc8>
            {
                return err;
 8008cd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008cd2:	e087      	b.n	8008de4 <ndefPollerWriteMessage+0x1d8>
            }
            offset += bufHeader.length;
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cd8:	4413      	add	r3, r2
 8008cda:	633b      	str	r3, [r7, #48]	; 0x30
            // TODO Use API to access record internal
            if (record->typeLength != 0U)
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cde:	785b      	ldrb	r3, [r3, #1]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d018      	beq.n	8008d16 <ndefPollerWriteMessage+0x10a>
            {
                err = ndefPollerWriteBytes(ctx, offset, record->type, record->typeLength);
 8008ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cea:	785b      	ldrb	r3, [r3, #1]
 8008cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7ff ff14 	bl	8008b1c <ndefPollerWriteBytes>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	85bb      	strh	r3, [r7, #44]	; 0x2c
                if (err != ERR_NONE)
 8008cf8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d005      	beq.n	8008d0a <ndefPollerWriteMessage+0xfe>
                {
                    /* Conclude procedure */
                    ctx->state = NDEF_STATE_INVALID;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    return err;
 8008d06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d08:	e06c      	b.n	8008de4 <ndefPollerWriteMessage+0x1d8>
                }
                offset += record->typeLength;
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0c:	785b      	ldrb	r3, [r3, #1]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d12:	4413      	add	r3, r2
 8008d14:	633b      	str	r3, [r7, #48]	; 0x30
            }
            if (record->idLength != 0U)
 8008d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d18:	789b      	ldrb	r3, [r3, #2]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d018      	beq.n	8008d50 <ndefPollerWriteMessage+0x144>
            {
                err = ndefPollerWriteBytes(ctx, offset, record->id, record->idLength);
 8008d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d20:	689a      	ldr	r2, [r3, #8]
 8008d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d24:	789b      	ldrb	r3, [r3, #2]
 8008d26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7ff fef7 	bl	8008b1c <ndefPollerWriteBytes>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	85bb      	strh	r3, [r7, #44]	; 0x2c
                if (err != ERR_NONE)
 8008d32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d005      	beq.n	8008d44 <ndefPollerWriteMessage+0x138>
                {
                    /* Conclude procedure */
                    ctx->state = NDEF_STATE_INVALID;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    return err;
 8008d40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d42:	e04f      	b.n	8008de4 <ndefPollerWriteMessage+0x1d8>
                }
                offset += record->idLength;
 8008d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d46:	789b      	ldrb	r3, [r3, #2]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4c:	4413      	add	r3, r2
 8008d4e:	633b      	str	r3, [r7, #48]	; 0x30
            }
            if (ndefRecordGetPayloadLength(record) != 0U)
 8008d50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008d52:	f7fd fe62 	bl	8006a1a <ndefRecordGetPayloadLength>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d026      	beq.n	8008daa <ndefPollerWriteMessage+0x19e>
            {
                firstPayloadItem = true;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                while (ndefRecordGetPayloadItem(record, &bufPayloadItem, firstPayloadItem) != NULL)
 8008d62:	e017      	b.n	8008d94 <ndefPollerWriteMessage+0x188>
                {
                    firstPayloadItem = false;
 8008d64:	2300      	movs	r3, #0
 8008d66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    err = ndefPollerWriteBytes(ctx, offset, bufPayloadItem.buffer, bufPayloadItem.length);
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7ff fed3 	bl	8008b1c <ndefPollerWriteBytes>
 8008d76:	4603      	mov	r3, r0
 8008d78:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    if (err != ERR_NONE)
 8008d7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <ndefPollerWriteMessage+0x180>
                    {
                        /* Conclude procedure */
                        ctx->state = NDEF_STATE_INVALID;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        return err;
 8008d88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d8a:	e02b      	b.n	8008de4 <ndefPollerWriteMessage+0x1d8>
                    }
                    offset += bufPayloadItem.length;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d90:	4413      	add	r3, r2
 8008d92:	633b      	str	r3, [r7, #48]	; 0x30
                while (ndefRecordGetPayloadItem(record, &bufPayloadItem, firstPayloadItem) != NULL)
 8008d94:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008d98:	f107 030c 	add.w	r3, r7, #12
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008da0:	f7fd fe5e 	bl	8006a60 <ndefRecordGetPayloadItem>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1dc      	bne.n	8008d64 <ndefPollerWriteMessage+0x158>
                }
            }
            record = ndefMessageGetNextRecord(record);
 8008daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <ndefPollerWriteMessage+0x1aa>
 8008db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	e000      	b.n	8008db8 <ndefPollerWriteMessage+0x1ac>
 8008db6:	2300      	movs	r3, #0
 8008db8:	637b      	str	r3, [r7, #52]	; 0x34
        while (record != NULL)
 8008dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f47f af71 	bne.w	8008ca4 <ndefPollerWriteMessage+0x98>
        }

        err = ndefPollerEndWriteMessage(ctx, info.length);
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff ff03 	bl	8008bd2 <ndefPollerEndWriteMessage>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if (err != ERR_NONE)
 8008dd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d005      	beq.n	8008de2 <ndefPollerWriteMessage+0x1d6>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return err;
 8008dde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008de0:	e000      	b.n	8008de4 <ndefPollerWriteMessage+0x1d8>
        }
    }

    return ERR_NONE;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3738      	adds	r7, #56	; 0x38
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <ndefPollerGetDeviceType>:

#endif /* NDEF_FEATURE_ALL */

/*******************************************************************************/
static ndefDeviceType ndefPollerGetDeviceType(const rfalNfcDevice *dev)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
    ndefDeviceType type;
    
    if( dev == NULL )
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d102      	bne.n	8008e00 <ndefPollerGetDeviceType+0x14>
    {
        type = NDEF_DEV_NONE;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	73fb      	strb	r3, [r7, #15]
 8008dfe:	e031      	b.n	8008e64 <ndefPollerGetDeviceType+0x78>
    }
    else
    {
        switch( dev->type )
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	d82a      	bhi.n	8008e5e <ndefPollerGetDeviceType+0x72>
 8008e08:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <ndefPollerGetDeviceType+0x24>)
 8008e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0e:	bf00      	nop
 8008e10:	08008e21 	.word	0x08008e21
 8008e14:	08008e4d 	.word	0x08008e4d
 8008e18:	08008e53 	.word	0x08008e53
 8008e1c:	08008e59 	.word	0x08008e59
        {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            switch( dev->dev.nfca.type )
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	785b      	ldrb	r3, [r3, #1]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d004      	beq.n	8008e32 <ndefPollerGetDeviceType+0x46>
 8008e28:	2b20      	cmp	r3, #32
 8008e2a:	d008      	beq.n	8008e3e <ndefPollerGetDeviceType+0x52>
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d003      	beq.n	8008e38 <ndefPollerGetDeviceType+0x4c>
 8008e30:	e008      	b.n	8008e44 <ndefPollerGetDeviceType+0x58>
            {
                case RFAL_NFCA_T1T:
                    type = NDEF_DEV_T1T;
 8008e32:	2301      	movs	r3, #1
 8008e34:	73fb      	strb	r3, [r7, #15]
                    break; 
 8008e36:	e008      	b.n	8008e4a <ndefPollerGetDeviceType+0x5e>
                case RFAL_NFCA_T2T:
                    type = NDEF_DEV_T2T;
 8008e38:	2302      	movs	r3, #2
 8008e3a:	73fb      	strb	r3, [r7, #15]
                    break;
 8008e3c:	e005      	b.n	8008e4a <ndefPollerGetDeviceType+0x5e>
                case RFAL_NFCA_T4T:
                    type = NDEF_DEV_T4T;
 8008e3e:	2304      	movs	r3, #4
 8008e40:	73fb      	strb	r3, [r7, #15]
                    break;
 8008e42:	e002      	b.n	8008e4a <ndefPollerGetDeviceType+0x5e>
                default:
                    type = NDEF_DEV_NONE;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]
                    break;
 8008e48:	bf00      	nop
            }
            break;
 8008e4a:	e00b      	b.n	8008e64 <ndefPollerGetDeviceType+0x78>
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            type = NDEF_DEV_T4T;
 8008e4c:	2304      	movs	r3, #4
 8008e4e:	73fb      	strb	r3, [r7, #15]
            break;
 8008e50:	e008      	b.n	8008e64 <ndefPollerGetDeviceType+0x78>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            type = NDEF_DEV_T3T;
 8008e52:	2303      	movs	r3, #3
 8008e54:	73fb      	strb	r3, [r7, #15]
            break;
 8008e56:	e005      	b.n	8008e64 <ndefPollerGetDeviceType+0x78>
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            type = NDEF_DEV_T5T;
 8008e58:	2305      	movs	r3, #5
 8008e5a:	73fb      	strb	r3, [r7, #15]
            break;
 8008e5c:	e002      	b.n	8008e64 <ndefPollerGetDeviceType+0x78>
        default:
            type = NDEF_DEV_NONE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]
            break;
 8008e62:	bf00      	nop
        }
    }
    return type;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bc80      	pop	{r7}
 8008e6e:	4770      	bx	lr

08008e70 <ndefT2TPollerReadBlock>:
 ******************************************************************************
 */

/*******************************************************************************/
static ReturnCode ndefT2TPollerReadBlock(ndefContext *ctx, uint16_t blockAddr, uint8_t *buf)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	817b      	strh	r3, [r7, #10]
    ReturnCode           ret;
    uint8_t              secNo;
    uint8_t              blNo;
    uint16_t             rcvdLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00a      	beq.n	8008e9a <ndefT2TPollerReadBlock+0x2a>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d106      	bne.n	8008e9a <ndefT2TPollerReadBlock+0x2a>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	785b      	ldrb	r3, [r3, #1]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d102      	bne.n	8008e9a <ndefT2TPollerReadBlock+0x2a>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <ndefT2TPollerReadBlock+0x2e>
    {
        return ERR_PARAM;
 8008e9a:	2307      	movs	r3, #7
 8008e9c:	e02c      	b.n	8008ef8 <ndefT2TPollerReadBlock+0x88>
    }

    secNo = (uint8_t)(blockAddr >> 8U);
 8008e9e:	897b      	ldrh	r3, [r7, #10]
 8008ea0:	0a1b      	lsrs	r3, r3, #8
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	75fb      	strb	r3, [r7, #23]
    blNo  = (uint8_t)blockAddr;
 8008ea6:	897b      	ldrh	r3, [r7, #10]
 8008ea8:	75bb      	strb	r3, [r7, #22]

    if( secNo != ctx->subCtx.t2t.currentSecNo )
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8008eb0:	7dfa      	ldrb	r2, [r7, #23]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d00e      	beq.n	8008ed4 <ndefT2TPollerReadBlock+0x64>
    {
        ret = rfalT2TPollerSectorSelect(secNo);
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f00f fc4b 	bl	8018754 <rfalT2TPollerSectorSelect>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	82bb      	strh	r3, [r7, #20]
        if( ret != ERR_NONE )
 8008ec2:	8abb      	ldrh	r3, [r7, #20]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <ndefT2TPollerReadBlock+0x5c>
        {
            return ret;
 8008ec8:	8abb      	ldrh	r3, [r7, #20]
 8008eca:	e015      	b.n	8008ef8 <ndefT2TPollerReadBlock+0x88>
        }
        ctx->subCtx.t2t.currentSecNo = secNo;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	7dfa      	ldrb	r2, [r7, #23]
 8008ed0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    }

    ret = rfalT2TPollerRead(blNo, buf, NDEF_T2T_READ_RESP_SIZE, &rcvdLen);
 8008ed4:	f107 0312 	add.w	r3, r7, #18
 8008ed8:	7db8      	ldrb	r0, [r7, #22]
 8008eda:	2210      	movs	r2, #16
 8008edc:	6879      	ldr	r1, [r7, #4]
 8008ede:	f00f fbc5 	bl	801866c <rfalT2TPollerRead>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	82bb      	strh	r3, [r7, #20]

    if( (ret == ERR_NONE) && (rcvdLen != NDEF_T2T_READ_RESP_SIZE) )
 8008ee6:	8abb      	ldrh	r3, [r7, #20]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d104      	bne.n	8008ef6 <ndefT2TPollerReadBlock+0x86>
 8008eec:	8a7b      	ldrh	r3, [r7, #18]
 8008eee:	2b10      	cmp	r3, #16
 8008ef0:	d001      	beq.n	8008ef6 <ndefT2TPollerReadBlock+0x86>
    {
        return ERR_PROTO;
 8008ef2:	230b      	movs	r3, #11
 8008ef4:	e000      	b.n	8008ef8 <ndefT2TPollerReadBlock+0x88>
    }

    return ret;
 8008ef6:	8abb      	ldrh	r3, [r7, #20]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <ndefT2TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT2TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08a      	sub	sp, #40	; 0x28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              le;
    uint32_t             lvOffset = offset;
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	623b      	str	r3, [r7, #32]
    uint32_t             lvLen    = len;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	61fb      	str	r3, [r7, #28]
    uint8_t *            lvBuf    = buf;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	61bb      	str	r3, [r7, #24]
    uint16_t             blockAddr;
    uint8_t              byteNo;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (lvLen == 0U) || (offset > NDEF_T2T_MAX_OFFSET) )
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00e      	beq.n	8008f3e <ndefT2TPollerReadBytes+0x3e>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10a      	bne.n	8008f3e <ndefT2TPollerReadBytes+0x3e>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	785b      	ldrb	r3, [r3, #1]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d106      	bne.n	8008f3e <ndefT2TPollerReadBytes+0x3e>
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <ndefT2TPollerReadBytes+0x3e>
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	f5b3 3f7f 	cmp.w	r3, #261120	; 0x3fc00
 8008f3c:	d901      	bls.n	8008f42 <ndefT2TPollerReadBytes+0x42>
    {
        return ERR_PARAM;
 8008f3e:	2307      	movs	r3, #7
 8008f40:	e0a7      	b.n	8009092 <ndefT2TPollerReadBytes+0x192>
    }

    if( (offset >= ctx->subCtx.t2t.cacheAddr) && (offset < (ctx->subCtx.t2t.cacheAddr + NDEF_T2T_READ_RESP_SIZE)) && ((offset + len) < (ctx->subCtx.t2t.cacheAddr + NDEF_T2T_READ_RESP_SIZE)) )
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d31e      	bcc.n	8008f8c <ndefT2TPollerReadBytes+0x8c>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008f54:	3310      	adds	r3, #16
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d217      	bcs.n	8008f8c <ndefT2TPollerReadBytes+0x8c>
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	441a      	add	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008f68:	3310      	adds	r3, #16
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d20e      	bcs.n	8008f8c <ndefT2TPollerReadBytes+0x8c>
    {
        /* data in cache buffer */
        (void)ST_MEMCPY(lvBuf, &ctx->subCtx.t2t.cacheBuf[offset - ctx->subCtx.t2t.cacheAddr], len);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	33b0      	adds	r3, #176	; 0xb0
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	3305      	adds	r3, #5
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	4619      	mov	r1, r3
 8008f84:	69b8      	ldr	r0, [r7, #24]
 8008f86:	f00f ff36 	bl	8018df6 <memcpy>
 8008f8a:	e07b      	b.n	8009084 <ndefT2TPollerReadBytes+0x184>
    }
    else
    {
        do {
            blockAddr = (uint16_t)(lvOffset / NDEF_T2T_BLOCK_SIZE);
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	089b      	lsrs	r3, r3, #2
 8008f90:	82fb      	strh	r3, [r7, #22]
            byteNo    =  (uint8_t)(lvOffset % NDEF_T2T_BLOCK_SIZE);
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	f003 0303 	and.w	r3, r3, #3
 8008f9a:	757b      	strb	r3, [r7, #21]
            le = (lvLen < NDEF_T2T_READ_RESP_SIZE) ? (uint8_t)lvLen : (uint8_t)NDEF_T2T_READ_RESP_SIZE;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	2b0f      	cmp	r3, #15
 8008fa0:	d802      	bhi.n	8008fa8 <ndefT2TPollerReadBytes+0xa8>
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	e000      	b.n	8008faa <ndefT2TPollerReadBytes+0xaa>
 8008fa8:	2310      	movs	r3, #16
 8008faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if( (byteNo != 0U ) || (lvLen < NDEF_T2T_READ_RESP_SIZE) )
 8008fae:	7d7b      	ldrb	r3, [r7, #21]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d102      	bne.n	8008fba <ndefT2TPollerReadBytes+0xba>
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	2b0f      	cmp	r3, #15
 8008fb8:	d834      	bhi.n	8009024 <ndefT2TPollerReadBytes+0x124>
            {
                ret = ndefT2TPollerReadBlock(ctx, blockAddr, ctx->subCtx.t2t.cacheBuf);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f103 02b5 	add.w	r2, r3, #181	; 0xb5
 8008fc0:	8afb      	ldrh	r3, [r7, #22]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f7ff ff53 	bl	8008e70 <ndefT2TPollerReadBlock>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	827b      	strh	r3, [r7, #18]
                if( ret != ERR_NONE )
 8008fce:	8a7b      	ldrh	r3, [r7, #18]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d006      	beq.n	8008fe2 <ndefT2TPollerReadBytes+0xe2>
                {
                    ndefT2TInvalidateCache(ctx);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fda:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                    return ret;
 8008fde:	8a7b      	ldrh	r3, [r7, #18]
 8008fe0:	e057      	b.n	8009092 <ndefT2TPollerReadBytes+0x192>
                }
                ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 8008fe2:	8afb      	ldrh	r3, [r7, #22]
 8008fe4:	009a      	lsls	r2, r3, #2
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                if( (NDEF_T2T_READ_RESP_SIZE - byteNo) < le )
 8008fec:	7d7b      	ldrb	r3, [r7, #21]
 8008fee:	f1c3 0210 	rsb	r2, r3, #16
 8008ff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d204      	bcs.n	8009004 <ndefT2TPollerReadBytes+0x104>
                {
                    le = NDEF_T2T_READ_RESP_SIZE - byteNo;
 8008ffa:	7d7b      	ldrb	r3, [r7, #21]
 8008ffc:	f1c3 0310 	rsb	r3, r3, #16
 8009000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                if( le > 0U)
 8009004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009008:	2b00      	cmp	r3, #0
 800900a:	d029      	beq.n	8009060 <ndefT2TPollerReadBytes+0x160>
                {
                    (void)ST_MEMCPY(lvBuf, &ctx->subCtx.t2t.cacheBuf[byteNo], le);
 800900c:	7d7b      	ldrb	r3, [r7, #21]
 800900e:	33b0      	adds	r3, #176	; 0xb0
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	4413      	add	r3, r2
 8009014:	3305      	adds	r3, #5
 8009016:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800901a:	4619      	mov	r1, r3
 800901c:	69b8      	ldr	r0, [r7, #24]
 800901e:	f00f feea 	bl	8018df6 <memcpy>
                if( le > 0U)
 8009022:	e01d      	b.n	8009060 <ndefT2TPollerReadBytes+0x160>
                }
            }
            else
            {
                ret = ndefT2TPollerReadBlock(ctx, blockAddr, lvBuf);
 8009024:	8afb      	ldrh	r3, [r7, #22]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	4619      	mov	r1, r3
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f7ff ff20 	bl	8008e70 <ndefT2TPollerReadBlock>
 8009030:	4603      	mov	r3, r0
 8009032:	827b      	strh	r3, [r7, #18]
                if( ret != ERR_NONE )
 8009034:	8a7b      	ldrh	r3, [r7, #18]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <ndefT2TPollerReadBytes+0x13e>
                {
                    return ret;
 800903a:	8a7b      	ldrh	r3, [r7, #18]
 800903c:	e029      	b.n	8009092 <ndefT2TPollerReadBytes+0x192>
                }
                if( lvLen == le )
 800903e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009042:	69fa      	ldr	r2, [r7, #28]
 8009044:	429a      	cmp	r2, r3
 8009046:	d10b      	bne.n	8009060 <ndefT2TPollerReadBytes+0x160>
                {
                    /* cache the last read block */
                    (void)ST_MEMCPY(&ctx->subCtx.t2t.cacheBuf[0], lvBuf, NDEF_T2T_READ_RESP_SIZE);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	33b5      	adds	r3, #181	; 0xb5
 800904c:	2210      	movs	r2, #16
 800904e:	69b9      	ldr	r1, [r7, #24]
 8009050:	4618      	mov	r0, r3
 8009052:	f00f fed0 	bl	8018df6 <memcpy>
                    ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 8009056:	8afb      	ldrh	r3, [r7, #22]
 8009058:	009a      	lsls	r2, r3, #2
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                }
            }
            lvBuf     = &lvBuf[le];
 8009060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009064:	69ba      	ldr	r2, [r7, #24]
 8009066:	4413      	add	r3, r2
 8009068:	61bb      	str	r3, [r7, #24]
            lvOffset += le;
 800906a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800906e:	6a3a      	ldr	r2, [r7, #32]
 8009070:	4413      	add	r3, r2
 8009072:	623b      	str	r3, [r7, #32]
            lvLen    -= le;
 8009074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009078:	69fa      	ldr	r2, [r7, #28]
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	61fb      	str	r3, [r7, #28]

        } while( lvLen != 0U );
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d183      	bne.n	8008f8c <ndefT2TPollerReadBytes+0x8c>
    }

    if( rcvdLen != NULL )
 8009084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009086:	2b00      	cmp	r3, #0
 8009088:	d002      	beq.n	8009090 <ndefT2TPollerReadBytes+0x190>
    {
        *rcvdLen = len;
 800908a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	601a      	str	r2, [r3, #0]
    }
    return ERR_NONE;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3728      	adds	r7, #40	; 0x28
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <ndefT2TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT2TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT2TisT2TDevice(dev) )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00a      	beq.n	80090c0 <ndefT2TPollerContextInitialization+0x26>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d007      	beq.n	80090c0 <ndefT2TPollerContextInitialization+0x26>
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d103      	bne.n	80090c0 <ndefT2TPollerContextInitialization+0x26>
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	785b      	ldrb	r3, [r3, #1]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <ndefT2TPollerContextInitialization+0x2a>
    {
        return ERR_PARAM;
 80090c0:	2307      	movs	r3, #7
 80090c2:	e013      	b.n	80090ec <ndefT2TPollerContextInitialization+0x52>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2278      	movs	r2, #120	; 0x78
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f00f fe93 	bl	8018df6 <memcpy>

    ctx->state                   = NDEF_STATE_INVALID;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->subCtx.t2t.currentSecNo = 0U;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    ndefT2TInvalidateCache(ctx);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f04f 32ff 	mov.w	r2, #4294967295
 80090e6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

   return ERR_NONE;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <ndefT2TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT2TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af02      	add	r7, sp, #8
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
    uint8_t              data[2];
    uint32_t             offset;
    uint16_t             lenTLV;
    uint8_t              typeTLV;

    if( info != NULL )
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d011      	beq.n	8009128 <ndefT2TPollerNdefDetect+0x34>
    {
        info->state                = NDEF_STATE_INVALID;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2200      	movs	r2, #0
 8009108:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	2200      	movs	r2, #0
 800910e:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	2200      	movs	r2, #0
 8009114:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2200      	movs	r2, #0
 800911a:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2200      	movs	r2, #0
 8009120:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2200      	movs	r2, #0
 8009126:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d007      	beq.n	800913e <ndefT2TPollerNdefDetect+0x4a>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d103      	bne.n	800913e <ndefT2TPollerNdefDetect+0x4a>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	785b      	ldrb	r3, [r3, #1]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <ndefT2TPollerNdefDetect+0x4e>
    {
        return ERR_PARAM;
 800913e:	2307      	movs	r3, #7
 8009140:	e139      	b.n	80093b6 <ndefT2TPollerNdefDetect+0x2c2>
    }

    ctx->state = NDEF_STATE_INVALID;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Read CC TS T2T v1.0 7.5.1.1 */
    ret = ndefT2TPollerReadBytes(ctx, NDEF_T2T_CC_OFFSET, NDEF_T2T_CC_LEN, ctx->ccBuf, NULL);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8009150:	2300      	movs	r3, #0
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	4613      	mov	r3, r2
 8009156:	2204      	movs	r2, #4
 8009158:	210c      	movs	r1, #12
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7ff fed0 	bl	8008f00 <ndefT2TPollerReadBytes>
 8009160:	4603      	mov	r3, r0
 8009162:	823b      	strh	r3, [r7, #16]
    if( ret != ERR_NONE )
 8009164:	8a3b      	ldrh	r3, [r7, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <ndefT2TPollerNdefDetect+0x7a>
    {
        /* Conclude procedure */
        return ret;
 800916a:	8a3b      	ldrh	r3, [r7, #16]
 800916c:	e123      	b.n	80093b6 <ndefT2TPollerNdefDetect+0x2c2>
    }
    ctx->cc.t2t.magicNumber  = ctx->ccBuf[NDEF_T2T_CC_0];
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t2t.majorVersion = ndefMajorVersion(ctx->ccBuf[NDEF_T2T_CC_1]);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009180:	091b      	lsrs	r3, r3, #4
 8009182:	b2da      	uxtb	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    ctx->cc.t2t.minorVersion = ndefMinorVersion(ctx->ccBuf[NDEF_T2T_CC_1]);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009190:	f003 030f 	and.w	r3, r3, #15
 8009194:	b2da      	uxtb	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    ctx->cc.t2t.size         = ctx->ccBuf[NDEF_T2T_CC_2];
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    ctx->cc.t2t.readAccess   = (uint8_t)(ctx->ccBuf[NDEF_T2T_CC_3] >> 4U);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80091ae:	091b      	lsrs	r3, r3, #4
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    ctx->cc.t2t.writeAccess  = (uint8_t)(ctx->ccBuf[NDEF_T2T_CC_3] & 0xFU);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80091be:	f003 030f 	and.w	r3, r3, #15
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    ctx->areaLen = (uint32_t)ctx->cc.t2t.size * NDEF_T2T_SIZE_DIVIDER;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80091d0:	00da      	lsls	r2, r3, #3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    /* Check version number TS T2T v1.0 7.5.1.2 */
    if( (ctx->cc.t2t.magicNumber != NDEF_T2T_MAGIC) || (ctx->cc.t2t.majorVersion > ndefMajorVersion(NDEF_T2T_VERSION_1_0)) )
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80091de:	2be1      	cmp	r3, #225	; 0xe1
 80091e0:	d104      	bne.n	80091ec <ndefT2TPollerNdefDetect+0xf8>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d901      	bls.n	80091f0 <ndefT2TPollerNdefDetect+0xfc>
    {
        /* Conclude procedure TS T2T v1.0 7.5.1.2 */
        return ERR_REQUEST;
 80091ec:	2305      	movs	r3, #5
 80091ee:	e0e2      	b.n	80093b6 <ndefT2TPollerNdefDetect+0x2c2>
    }
    /* Search for NDEF message TLV TS T2T v1.0 7.5.1.3 */
    offset = NDEF_T2T_AREA_OFFSET;
 80091f0:	2310      	movs	r3, #16
 80091f2:	617b      	str	r3, [r7, #20]
    while ( (offset < (NDEF_T2T_AREA_OFFSET + ctx->areaLen)) )
 80091f4:	e0d4      	b.n	80093a0 <ndefT2TPollerNdefDetect+0x2ac>
    {
        ret = ndefT2TPollerReadBytes(ctx, offset, 1, data, NULL);
 80091f6:	f107 020c 	add.w	r2, r7, #12
 80091fa:	2300      	movs	r3, #0
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	4613      	mov	r3, r2
 8009200:	2201      	movs	r2, #1
 8009202:	6979      	ldr	r1, [r7, #20]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff fe7b 	bl	8008f00 <ndefT2TPollerReadBytes>
 800920a:	4603      	mov	r3, r0
 800920c:	823b      	strh	r3, [r7, #16]
        if( ret != ERR_NONE )
 800920e:	8a3b      	ldrh	r3, [r7, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <ndefT2TPollerNdefDetect+0x124>
        {
            /* Conclude procedure */
            return ret;
 8009214:	8a3b      	ldrh	r3, [r7, #16]
 8009216:	e0ce      	b.n	80093b6 <ndefT2TPollerNdefDetect+0x2c2>
        }
        typeTLV = data[0];
 8009218:	7b3b      	ldrb	r3, [r7, #12]
 800921a:	73fb      	strb	r3, [r7, #15]
        if( typeTLV == NDEF_T2T_TLV_NDEF_MESSAGE )
 800921c:	7bfb      	ldrb	r3, [r7, #15]
 800921e:	2b03      	cmp	r3, #3
 8009220:	d103      	bne.n	800922a <ndefT2TPollerNdefDetect+0x136>
        {
            ctx->subCtx.t2t.offsetNdefTLV = offset;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	697a      	ldr	r2, [r7, #20]
 8009226:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        }
        offset++;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	3301      	adds	r3, #1
 800922e:	617b      	str	r3, [r7, #20]
        if( typeTLV == NDEF_T2T_TLV_TERMINATOR )
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	2bfe      	cmp	r3, #254	; 0xfe
 8009234:	f000 80bd 	beq.w	80093b2 <ndefT2TPollerNdefDetect+0x2be>
        {
            break;
        }
        if( typeTLV == NDEF_T2T_TLV_NULL )
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d100      	bne.n	8009240 <ndefT2TPollerNdefDetect+0x14c>
        {
            continue;
 800923e:	e0af      	b.n	80093a0 <ndefT2TPollerNdefDetect+0x2ac>
        }
        /* read TLV Len */
        ret = ndefT2TPollerReadBytes(ctx, offset, 1, data, NULL);
 8009240:	f107 020c 	add.w	r2, r7, #12
 8009244:	2300      	movs	r3, #0
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	4613      	mov	r3, r2
 800924a:	2201      	movs	r2, #1
 800924c:	6979      	ldr	r1, [r7, #20]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7ff fe56 	bl	8008f00 <ndefT2TPollerReadBytes>
 8009254:	4603      	mov	r3, r0
 8009256:	823b      	strh	r3, [r7, #16]
        if( ret != ERR_NONE )
 8009258:	8a3b      	ldrh	r3, [r7, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <ndefT2TPollerNdefDetect+0x16e>
        {
            /* Conclude procedure */
            return ret;
 800925e:	8a3b      	ldrh	r3, [r7, #16]
 8009260:	e0a9      	b.n	80093b6 <ndefT2TPollerNdefDetect+0x2c2>
        }
        offset++;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	3301      	adds	r3, #1
 8009266:	617b      	str	r3, [r7, #20]
        lenTLV = data[0];
 8009268:	7b3b      	ldrb	r3, [r7, #12]
 800926a:	827b      	strh	r3, [r7, #18]
        if( lenTLV == NDEF_T2T_3_BYTES_TLV_LEN )
 800926c:	8a7b      	ldrh	r3, [r7, #18]
 800926e:	2bff      	cmp	r3, #255	; 0xff
 8009270:	d11e      	bne.n	80092b0 <ndefT2TPollerNdefDetect+0x1bc>
        {
            ret = ndefT2TPollerReadBytes(ctx, offset, 2, data, NULL);
 8009272:	f107 020c 	add.w	r2, r7, #12
 8009276:	2300      	movs	r3, #0
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	4613      	mov	r3, r2
 800927c:	2202      	movs	r2, #2
 800927e:	6979      	ldr	r1, [r7, #20]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff fe3d 	bl	8008f00 <ndefT2TPollerReadBytes>
 8009286:	4603      	mov	r3, r0
 8009288:	823b      	strh	r3, [r7, #16]
            if( ret != ERR_NONE )
 800928a:	8a3b      	ldrh	r3, [r7, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <ndefT2TPollerNdefDetect+0x1a0>
            {
                /* Conclude procedure */
                return ret;
 8009290:	8a3b      	ldrh	r3, [r7, #16]
 8009292:	e090      	b.n	80093b6 <ndefT2TPollerNdefDetect+0x2c2>
            }
            offset += 2U;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	3302      	adds	r3, #2
 8009298:	617b      	str	r3, [r7, #20]
            lenTLV = GETU16(&data[0]);
 800929a:	7b3b      	ldrb	r3, [r7, #12]
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	b21a      	sxth	r2, r3
 80092a0:	f107 030c 	add.w	r3, r7, #12
 80092a4:	3301      	adds	r3, #1
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	b21b      	sxth	r3, r3
 80092aa:	4313      	orrs	r3, r2
 80092ac:	b21b      	sxth	r3, r3
 80092ae:	827b      	strh	r3, [r7, #18]
        }

        if( (typeTLV == NDEF_T2T_TLV_LOCK_CTRL) || (typeTLV == NDEF_T2T_TLV_MEMORY_CTRL) )
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d002      	beq.n	80092bc <ndefT2TPollerNdefDetect+0x1c8>
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d101      	bne.n	80092c0 <ndefT2TPollerNdefDetect+0x1cc>
        {
            /* No support of Lock control or Memory control in this version */
            return ERR_REQUEST;
 80092bc:	2305      	movs	r3, #5
 80092be:	e07a      	b.n	80093b6 <ndefT2TPollerNdefDetect+0x2c2>
        }
        /* NDEF message present TLV TS T2T v1.0 7.5.1.4 */
        if( typeTLV == NDEF_T2T_TLV_NDEF_MESSAGE )
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	d168      	bne.n	8009398 <ndefT2TPollerNdefDetect+0x2a4>
        {
            /* Read length TS T2T v1.0 7.5.1.5 */
            ctx->messageLen    = lenTLV;
 80092c6:	8a7a      	ldrh	r2, [r7, #18]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            ctx->messageOffset = offset;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            if( ctx->messageLen == 0U )
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d110      	bne.n	8009302 <ndefT2TPollerNdefDetect+0x20e>
            {
                if( !(ndefT2TIsReadWriteAccessGranted(ctx)) )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d104      	bne.n	80092f4 <ndefT2TPollerNdefDetect+0x200>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <ndefT2TPollerNdefDetect+0x204>
                {
                    /* Conclude procedure  */
                    return ERR_REQUEST;
 80092f4:	2305      	movs	r3, #5
 80092f6:	e05e      	b.n	80093b6 <ndefT2TPollerNdefDetect+0x2c2>
                }
                 /* Empty message found TS T2T v1.0 7.5.1.6 & TS T2T v1.0 7.4.2.1 */
                ctx->state = NDEF_STATE_INITIALIZED;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8009300:	e01e      	b.n	8009340 <ndefT2TPollerNdefDetect+0x24c>
            }
            else
            {
                if( (ndefT2TIsReadWriteAccessGranted(ctx)) )
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009308:	2b00      	cmp	r3, #0
 800930a:	d109      	bne.n	8009320 <ndefT2TPollerNdefDetect+0x22c>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009312:	2b00      	cmp	r3, #0
 8009314:	d104      	bne.n	8009320 <ndefT2TPollerNdefDetect+0x22c>
                {
                    /* Empty message found TS T2T v1.0 7.5.1.7 & TS T2T v1.0 7.4.3.1 */
                    ctx->state = NDEF_STATE_READWRITE;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2202      	movs	r2, #2
 800931a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800931e:	e00f      	b.n	8009340 <ndefT2TPollerNdefDetect+0x24c>
                }
                else
                {
                    if( !(ndefT2TIsReadOnlyAccessGranted(ctx)) )
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009326:	2b00      	cmp	r3, #0
 8009328:	d104      	bne.n	8009334 <ndefT2TPollerNdefDetect+0x240>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009330:	2b0f      	cmp	r3, #15
 8009332:	d001      	beq.n	8009338 <ndefT2TPollerNdefDetect+0x244>
                    {
                        /* Conclude procedure  */
                        return ERR_REQUEST;
 8009334:	2305      	movs	r3, #5
 8009336:	e03e      	b.n	80093b6 <ndefT2TPollerNdefDetect+0x2c2>
                    }
                     /* Empty message found TS T2T v1.0 7.5.1.7 & TS T2T v1.0 7.4.4.1 */
                    ctx->state = NDEF_STATE_READONLY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2203      	movs	r2, #3
 800933c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                }
            }
            if( info != NULL )
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d026      	beq.n	8009394 <ndefT2TPollerNdefDetect+0x2a0>
            {
                info->state                = ctx->state;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	741a      	strb	r2, [r3, #16]
                info->majorVersion         = ndefMajorVersion(ctx->cc.t4t.vNo);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8009356:	091b      	lsrs	r3, r3, #4
 8009358:	b2da      	uxtb	r2, r3
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	701a      	strb	r2, [r3, #0]
                info->minorVersion         = ndefMinorVersion(ctx->cc.t4t.vNo);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8009364:	f003 030f 	and.w	r3, r3, #15
 8009368:	b2da      	uxtb	r2, r3
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	705a      	strb	r2, [r3, #1]
                info->areaLen              = ctx->areaLen;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	605a      	str	r2, [r3, #4]
                info->areaAvalableSpaceLen = ctx->areaLen - ctx->messageOffset;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009384:	1ad2      	subs	r2, r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	609a      	str	r2, [r3, #8]
                info->messageLen           = ctx->messageLen;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	60da      	str	r2, [r3, #12]
            }
            return ERR_NONE;
 8009394:	2300      	movs	r3, #0
 8009396:	e00e      	b.n	80093b6 <ndefT2TPollerNdefDetect+0x2c2>
        }
        offset += lenTLV;
 8009398:	8a7b      	ldrh	r3, [r7, #18]
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	4413      	add	r3, r2
 800939e:	617b      	str	r3, [r7, #20]
    while ( (offset < (NDEF_T2T_AREA_OFFSET + ctx->areaLen)) )
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093a6:	3310      	adds	r3, #16
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	f4ff af23 	bcc.w	80091f6 <ndefT2TPollerNdefDetect+0x102>
 80093b0:	e000      	b.n	80093b4 <ndefT2TPollerNdefDetect+0x2c0>
            break;
 80093b2:	bf00      	nop
    }
    return ERR_REQUEST;
 80093b4:	2305      	movs	r3, #5
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <ndefT2TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b088      	sub	sp, #32
 80093c2:	af02      	add	r7, sp, #8
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	60b9      	str	r1, [r7, #8]
 80093c8:	607a      	str	r2, [r7, #4]
 80093ca:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00a      	beq.n	80093e8 <ndefT2TPollerReadRawMessage+0x2a>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d106      	bne.n	80093e8 <ndefT2TPollerReadRawMessage+0x2a>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	785b      	ldrb	r3, [r3, #1]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d102      	bne.n	80093e8 <ndefT2TPollerReadRawMessage+0x2a>
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <ndefT2TPollerReadRawMessage+0x2e>
    {
        return ERR_PARAM;
 80093e8:	2307      	movs	r3, #7
 80093ea:	e024      	b.n	8009436 <ndefT2TPollerReadRawMessage+0x78>

    /* TS T2T v1.0 7.5.2.1: T2T NDEF Detect should have been called before NDEF read procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T2T v1.0 7.5.2.3: check presence of NDEF message */
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d801      	bhi.n	80093fa <ndefT2TPollerReadRawMessage+0x3c>
    {
        /* Conclude procedure TS T4T v1.0 7.2.2.2 */
        return ERR_WRONG_STATE;
 80093f6:	2321      	movs	r3, #33	; 0x21
 80093f8:	e01d      	b.n	8009436 <ndefT2TPollerReadRawMessage+0x78>
    }

    if( ctx->messageLen > bufLen )
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	429a      	cmp	r2, r3
 8009404:	d201      	bcs.n	800940a <ndefT2TPollerReadRawMessage+0x4c>
    {
        return ERR_NOMEM;
 8009406:	2301      	movs	r3, #1
 8009408:	e015      	b.n	8009436 <ndefT2TPollerReadRawMessage+0x78>
    }

    /* Current implementation does not support Rsvd_area */
    ret = ndefT2TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f7ff fd6f 	bl	8008f00 <ndefT2TPollerReadBytes>
 8009422:	4603      	mov	r3, r0
 8009424:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8009426:	8afb      	ldrh	r3, [r7, #22]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d003      	beq.n	8009434 <ndefT2TPollerReadRawMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return ret;
 8009434:	8afb      	ldrh	r3, [r7, #22]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <ndefT2TPollerWriteBlock>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
static ReturnCode ndefT2TPollerWriteBlock(ndefContext *ctx, uint16_t blockAddr, const uint8_t *buf)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b086      	sub	sp, #24
 8009442:	af00      	add	r7, sp, #0
 8009444:	60f8      	str	r0, [r7, #12]
 8009446:	460b      	mov	r3, r1
 8009448:	607a      	str	r2, [r7, #4]
 800944a:	817b      	strh	r3, [r7, #10]
    ReturnCode           ret;
    uint8_t              secNo;
    uint8_t              blNo;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00a      	beq.n	8009468 <ndefT2TPollerWriteBlock+0x2a>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d106      	bne.n	8009468 <ndefT2TPollerWriteBlock+0x2a>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	785b      	ldrb	r3, [r3, #1]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d102      	bne.n	8009468 <ndefT2TPollerWriteBlock+0x2a>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <ndefT2TPollerWriteBlock+0x2e>
    {
        return ERR_PARAM;
 8009468:	2307      	movs	r3, #7
 800946a:	e022      	b.n	80094b2 <ndefT2TPollerWriteBlock+0x74>
    }

    secNo = (uint8_t)(blockAddr >> 8U);
 800946c:	897b      	ldrh	r3, [r7, #10]
 800946e:	0a1b      	lsrs	r3, r3, #8
 8009470:	b29b      	uxth	r3, r3
 8009472:	75fb      	strb	r3, [r7, #23]
    blNo  = (uint8_t)blockAddr;
 8009474:	897b      	ldrh	r3, [r7, #10]
 8009476:	75bb      	strb	r3, [r7, #22]

    if( secNo != ctx->subCtx.t2t.currentSecNo )
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800947e:	7dfa      	ldrb	r2, [r7, #23]
 8009480:	429a      	cmp	r2, r3
 8009482:	d00e      	beq.n	80094a2 <ndefT2TPollerWriteBlock+0x64>
    {
        ret = rfalT2TPollerSectorSelect(secNo);
 8009484:	7dfb      	ldrb	r3, [r7, #23]
 8009486:	4618      	mov	r0, r3
 8009488:	f00f f964 	bl	8018754 <rfalT2TPollerSectorSelect>
 800948c:	4603      	mov	r3, r0
 800948e:	82bb      	strh	r3, [r7, #20]
        if( ret != ERR_NONE )
 8009490:	8abb      	ldrh	r3, [r7, #20]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <ndefT2TPollerWriteBlock+0x5c>
        {
            return ret;
 8009496:	8abb      	ldrh	r3, [r7, #20]
 8009498:	e00b      	b.n	80094b2 <ndefT2TPollerWriteBlock+0x74>
        }
        ctx->subCtx.t2t.currentSecNo = secNo;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	7dfa      	ldrb	r2, [r7, #23]
 800949e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    }

    ret = rfalT2TPollerWrite(blNo, buf);
 80094a2:	7dbb      	ldrb	r3, [r7, #22]
 80094a4:	6879      	ldr	r1, [r7, #4]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f00f f91c 	bl	80186e4 <rfalT2TPollerWrite>
 80094ac:	4603      	mov	r3, r0
 80094ae:	82bb      	strh	r3, [r7, #20]

    return ret;
 80094b0:	8abb      	ldrh	r3, [r7, #20]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <ndefT2TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b08e      	sub	sp, #56	; 0x38
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	607a      	str	r2, [r7, #4]
 80094c6:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint32_t             lvOffset = offset;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t             lvLen    = len;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	633b      	str	r3, [r7, #48]	; 0x30
    const uint8_t *      lvBuf    = buf;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t             blockAddr;
    uint8_t              byteNo;
    uint8_t              le;
    uint8_t              tempBuf[NDEF_T2T_READ_RESP_SIZE];

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (lvLen == 0U) )
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00a      	beq.n	80094f0 <ndefT2TPollerWriteBytes+0x36>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d106      	bne.n	80094f0 <ndefT2TPollerWriteBytes+0x36>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	785b      	ldrb	r3, [r3, #1]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d102      	bne.n	80094f0 <ndefT2TPollerWriteBytes+0x36>
 80094ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <ndefT2TPollerWriteBytes+0x3a>
    {
        return ERR_PARAM;
 80094f0:	2307      	movs	r3, #7
 80094f2:	e076      	b.n	80095e2 <ndefT2TPollerWriteBytes+0x128>
    }

    ndefT2TInvalidateCache(ctx);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f04f 32ff 	mov.w	r2, #4294967295
 80094fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    do
    {
        blockAddr = (uint16_t)(lvOffset / NDEF_T2T_BLOCK_SIZE);
 80094fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009500:	089b      	lsrs	r3, r3, #2
 8009502:	853b      	strh	r3, [r7, #40]	; 0x28
        byteNo    =  (uint8_t)(lvOffset % NDEF_T2T_BLOCK_SIZE);
 8009504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009506:	b2db      	uxtb	r3, r3
 8009508:	f003 0303 	and.w	r3, r3, #3
 800950c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        le = (lvLen < NDEF_T2T_BLOCK_SIZE) ? (uint8_t)lvLen : (uint8_t)NDEF_T2T_BLOCK_SIZE;
 8009510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009512:	2b03      	cmp	r3, #3
 8009514:	d802      	bhi.n	800951c <ndefT2TPollerWriteBytes+0x62>
 8009516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009518:	b2db      	uxtb	r3, r3
 800951a:	e000      	b.n	800951e <ndefT2TPollerWriteBytes+0x64>
 800951c:	2304      	movs	r3, #4
 800951e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if( (byteNo != 0U ) || (lvLen < NDEF_T2T_BLOCK_SIZE) )
 8009522:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009526:	2b00      	cmp	r3, #0
 8009528:	d102      	bne.n	8009530 <ndefT2TPollerWriteBytes+0x76>
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	2b03      	cmp	r3, #3
 800952e:	d838      	bhi.n	80095a2 <ndefT2TPollerWriteBytes+0xe8>
        {
            ret = ndefT2TPollerReadBlock(ctx, blockAddr, tempBuf);
 8009530:	f107 0214 	add.w	r2, r7, #20
 8009534:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009536:	4619      	mov	r1, r3
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f7ff fc99 	bl	8008e70 <ndefT2TPollerReadBlock>
 800953e:	4603      	mov	r3, r0
 8009540:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 8009542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <ndefT2TPollerWriteBytes+0x92>
            {
                return ret;
 8009548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800954a:	e04a      	b.n	80095e2 <ndefT2TPollerWriteBytes+0x128>
            }
            if( (NDEF_T2T_BLOCK_SIZE - byteNo) < le )
 800954c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009550:	f1c3 0204 	rsb	r2, r3, #4
 8009554:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009558:	429a      	cmp	r2, r3
 800955a:	d205      	bcs.n	8009568 <ndefT2TPollerWriteBytes+0xae>
            {
                le = NDEF_T2T_BLOCK_SIZE - byteNo;
 800955c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009560:	f1c3 0304 	rsb	r3, r3, #4
 8009564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }
            if( le > 0U )
 8009568:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00a      	beq.n	8009586 <ndefT2TPollerWriteBytes+0xcc>
            {
                (void)ST_MEMCPY(&tempBuf[byteNo], lvBuf, le);
 8009570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009574:	f107 0214 	add.w	r2, r7, #20
 8009578:	4413      	add	r3, r2
 800957a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800957e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009580:	4618      	mov	r0, r3
 8009582:	f00f fc38 	bl	8018df6 <memcpy>
            }
            ret = ndefT2TPollerWriteBlock(ctx, blockAddr, tempBuf);
 8009586:	f107 0214 	add.w	r2, r7, #20
 800958a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800958c:	4619      	mov	r1, r3
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f7ff ff55 	bl	800943e <ndefT2TPollerWriteBlock>
 8009594:	4603      	mov	r3, r0
 8009596:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 8009598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00e      	beq.n	80095bc <ndefT2TPollerWriteBytes+0x102>
            {
                return ret;
 800959e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095a0:	e01f      	b.n	80095e2 <ndefT2TPollerWriteBytes+0x128>
            }
        }
        else
        {
            ret = ndefT2TPollerWriteBlock(ctx, blockAddr, lvBuf);
 80095a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095a6:	4619      	mov	r1, r3
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f7ff ff48 	bl	800943e <ndefT2TPollerWriteBlock>
 80095ae:	4603      	mov	r3, r0
 80095b0:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 80095b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <ndefT2TPollerWriteBytes+0x102>
            {
                return ret;
 80095b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095ba:	e012      	b.n	80095e2 <ndefT2TPollerWriteBytes+0x128>
            }
        }
        lvBuf     = &lvBuf[le];
 80095bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095c2:	4413      	add	r3, r2
 80095c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        lvOffset += le;
 80095c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095cc:	4413      	add	r3, r2
 80095ce:	637b      	str	r3, [r7, #52]	; 0x34
        lvLen    -= le;
 80095d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	633b      	str	r3, [r7, #48]	; 0x30

    } while( lvLen != 0U );
 80095da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d18e      	bne.n	80094fe <ndefT2TPollerWriteBytes+0x44>

    return ERR_NONE;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3738      	adds	r7, #56	; 0x38
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <ndefT2TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t              buf[NDEF_T2T_BLOCK_SIZE];
    uint8_t              dataIt;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d007      	beq.n	800960a <ndefT2TPollerWriteRawMessageLen+0x20>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d103      	bne.n	800960a <ndefT2TPollerWriteRawMessageLen+0x20>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	785b      	ldrb	r3, [r3, #1]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <ndefT2TPollerWriteRawMessageLen+0x24>
    {
        return ERR_PARAM;
 800960a:	2307      	movs	r3, #7
 800960c:	e07d      	b.n	800970a <ndefT2TPollerWriteRawMessageLen+0x120>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009614:	2b01      	cmp	r3, #1
 8009616:	d006      	beq.n	8009626 <ndefT2TPollerWriteRawMessageLen+0x3c>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800961e:	2b02      	cmp	r3, #2
 8009620:	d001      	beq.n	8009626 <ndefT2TPollerWriteRawMessageLen+0x3c>
    {
        return ERR_WRONG_STATE;
 8009622:	2321      	movs	r3, #33	; 0x21
 8009624:	e071      	b.n	800970a <ndefT2TPollerWriteRawMessageLen+0x120>
    }
    dataIt = 0U;
 8009626:	2300      	movs	r3, #0
 8009628:	73fb      	strb	r3, [r7, #15]
    buf[dataIt] = NDEF_T2T_TLV_NDEF_MESSAGE;
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	f107 0210 	add.w	r2, r7, #16
 8009630:	4413      	add	r3, r2
 8009632:	2203      	movs	r2, #3
 8009634:	f803 2c08 	strb.w	r2, [r3, #-8]
    dataIt++;
 8009638:	7bfb      	ldrb	r3, [r7, #15]
 800963a:	3301      	adds	r3, #1
 800963c:	73fb      	strb	r3, [r7, #15]
    if( rawMessageLen <= NDEF_SHORT_VFIELD_MAX_LEN )
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	2bfe      	cmp	r3, #254	; 0xfe
 8009642:	d80b      	bhi.n	800965c <ndefT2TPollerWriteRawMessageLen+0x72>
    {
        buf[dataIt] = (uint8_t) rawMessageLen;
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	b2d2      	uxtb	r2, r2
 800964a:	f107 0110 	add.w	r1, r7, #16
 800964e:	440b      	add	r3, r1
 8009650:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	3301      	adds	r3, #1
 8009658:	73fb      	strb	r3, [r7, #15]
 800965a:	e016      	b.n	800968a <ndefT2TPollerWriteRawMessageLen+0xa0>
    }
    else
    {
        buf[dataIt] = (uint8_t) (rawMessageLen >> 8U);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	0a1a      	lsrs	r2, r3, #8
 8009660:	7bfb      	ldrb	r3, [r7, #15]
 8009662:	b2d2      	uxtb	r2, r2
 8009664:	f107 0110 	add.w	r1, r7, #16
 8009668:	440b      	add	r3, r1
 800966a:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	3301      	adds	r3, #1
 8009672:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t) rawMessageLen;
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	683a      	ldr	r2, [r7, #0]
 8009678:	b2d2      	uxtb	r2, r2
 800967a:	f107 0110 	add.w	r1, r7, #16
 800967e:	440b      	add	r3, r1
 8009680:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	3301      	adds	r3, #1
 8009688:	73fb      	strb	r3, [r7, #15]
    }
    if( rawMessageLen == 0U )
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d109      	bne.n	80096a4 <ndefT2TPollerWriteRawMessageLen+0xba>
    {
        buf[dataIt] = NDEF_T2T_TLV_TERMINATOR;
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	f107 0210 	add.w	r2, r7, #16
 8009696:	4413      	add	r3, r2
 8009698:	22fe      	movs	r2, #254	; 0xfe
 800969a:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800969e:	7bfb      	ldrb	r3, [r7, #15]
 80096a0:	3301      	adds	r3, #1
 80096a2:	73fb      	strb	r3, [r7, #15]
    }

    ret = ndefT2TPollerWriteBytes(ctx, ctx->subCtx.t2t.offsetNdefTLV, buf, dataIt);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
 80096ac:	f107 0208 	add.w	r2, r7, #8
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f7ff ff02 	bl	80094ba <ndefT2TPollerWriteBytes>
 80096b6:	4603      	mov	r3, r0
 80096b8:	81bb      	strh	r3, [r7, #12]
    if( (ret != ERR_NONE) && (rawMessageLen != 0U) && ((ctx->messageOffset + rawMessageLen) < ctx->areaLen) )
 80096ba:	89bb      	ldrh	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d023      	beq.n	8009708 <ndefT2TPollerWriteRawMessageLen+0x11e>
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d020      	beq.n	8009708 <ndefT2TPollerWriteRawMessageLen+0x11e>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	441a      	add	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d216      	bcs.n	8009708 <ndefT2TPollerWriteRawMessageLen+0x11e>
    {
        /* Write Terminator TLV */
        dataIt = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = NDEF_T2T_TLV_TERMINATOR;
 80096de:	7bfb      	ldrb	r3, [r7, #15]
 80096e0:	f107 0210 	add.w	r2, r7, #16
 80096e4:	4413      	add	r3, r2
 80096e6:	22fe      	movs	r2, #254	; 0xfe
 80096e8:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	3301      	adds	r3, #1
 80096f0:	73fb      	strb	r3, [r7, #15]
        (void)ndefT2TPollerWriteBytes(ctx, ctx->messageOffset + rawMessageLen, buf, dataIt );
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	18d1      	adds	r1, r2, r3
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	f107 0208 	add.w	r2, r7, #8
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7ff fed9 	bl	80094ba <ndefT2TPollerWriteBytes>
    }

    return ret;
 8009708:	89bb      	ldrh	r3, [r7, #12]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <ndefT2TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b086      	sub	sp, #24
 8009716:	af00      	add	r7, sp, #0
 8009718:	60f8      	str	r0, [r7, #12]
 800971a:	60b9      	str	r1, [r7, #8]
 800971c:	607a      	str	r2, [r7, #4]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00d      	beq.n	8009740 <ndefT2TPollerWriteRawMessage+0x2e>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d109      	bne.n	8009740 <ndefT2TPollerWriteRawMessage+0x2e>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	785b      	ldrb	r3, [r3, #1]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d105      	bne.n	8009740 <ndefT2TPollerWriteRawMessage+0x2e>
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d104      	bne.n	8009744 <ndefT2TPollerWriteRawMessage+0x32>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <ndefT2TPollerWriteRawMessage+0x32>
    {
        return ERR_PARAM;
 8009740:	2307      	movs	r3, #7
 8009742:	e04b      	b.n	80097dc <ndefT2TPollerWriteRawMessage+0xca>

    /* TS T2T v1.0 7.5.3.1/2: T4T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T2T v1.0 7.5.3.3: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800974a:	2b01      	cmp	r3, #1
 800974c:	d006      	beq.n	800975c <ndefT2TPollerWriteRawMessage+0x4a>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009754:	2b02      	cmp	r3, #2
 8009756:	d001      	beq.n	800975c <ndefT2TPollerWriteRawMessage+0x4a>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 8009758:	2321      	movs	r3, #33	; 0x21
 800975a:	e03f      	b.n	80097dc <ndefT2TPollerWriteRawMessage+0xca>
    }

    /* TS T2T v1.0 7.5.3.3: verify available space */
    ret = ndefT2TPollerCheckAvailableSpace(ctx, bufLen);
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 f92d 	bl	80099be <ndefT2TPollerCheckAvailableSpace>
 8009764:	4603      	mov	r3, r0
 8009766:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8009768:	8afb      	ldrh	r3, [r7, #22]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <ndefT2TPollerWriteRawMessage+0x60>
    {
        /* Conclude procedures */
        return ERR_PARAM;
 800976e:	2307      	movs	r3, #7
 8009770:	e034      	b.n	80097dc <ndefT2TPollerWriteRawMessage+0xca>
    }

    /* TS T2T v1.0 7.5.3.4: reset L_Field to 0                */
    /* and update ctx->messageOffset according to L-field len */
    ret = ndefT2TPollerBeginWriteMessage(ctx, bufLen);
 8009772:	6879      	ldr	r1, [r7, #4]
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 f958 	bl	8009a2a <ndefT2TPollerBeginWriteMessage>
 800977a:	4603      	mov	r3, r0
 800977c:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800977e:	8afb      	ldrh	r3, [r7, #22]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d005      	beq.n	8009790 <ndefT2TPollerWriteRawMessage+0x7e>
    {
        ctx->state = NDEF_STATE_INVALID;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return ret;
 800978c:	8afb      	ldrh	r3, [r7, #22]
 800978e:	e025      	b.n	80097dc <ndefT2TPollerWriteRawMessage+0xca>
    }

    if( bufLen != 0U )
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d021      	beq.n	80097da <ndefT2TPollerWriteRawMessage+0xc8>
    {
       /* TS T2T v1.0 7.5.3.5: write new NDEF message */
        ret = ndefT2TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f7ff fe8a 	bl	80094ba <ndefT2TPollerWriteBytes>
 80097a6:	4603      	mov	r3, r0
 80097a8:	82fb      	strh	r3, [r7, #22]
        if  (ret != ERR_NONE)
 80097aa:	8afb      	ldrh	r3, [r7, #22]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d005      	beq.n	80097bc <ndefT2TPollerWriteRawMessage+0xaa>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 80097b8:	8afb      	ldrh	r3, [r7, #22]
 80097ba:	e00f      	b.n	80097dc <ndefT2TPollerWriteRawMessage+0xca>
        }

        /* TS T2T v1.0 7.5.3.6 & 7.5.3.7: update L_Field and write Terminator TLV */
        ret = ndefT2TPollerEndWriteMessage(ctx, bufLen);
 80097bc:	6879      	ldr	r1, [r7, #4]
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f000 f985 	bl	8009ace <ndefT2TPollerEndWriteMessage>
 80097c4:	4603      	mov	r3, r0
 80097c6:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 80097c8:	8afb      	ldrh	r3, [r7, #22]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d005      	beq.n	80097da <ndefT2TPollerWriteRawMessage+0xc8>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 80097d6:	8afb      	ldrh	r3, [r7, #22]
 80097d8:	e000      	b.n	80097dc <ndefT2TPollerWriteRawMessage+0xca>
        }
    }

    return ret;
 80097da:	8afb      	ldrh	r3, [r7, #22]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <ndefT2TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT2TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b088      	sub	sp, #32
 80097e8:	af02      	add	r7, sp, #8
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
    uint8_t              dataIt;
    static const uint8_t emptyNdef[] = {NDEF_T2T_TLV_NDEF_MESSAGE, 0x00U, NDEF_T2T_TLV_TERMINATOR, 0x00U};

    NO_WARNING(options);

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d007      	beq.n	8009806 <ndefT2TPollerTagFormat+0x22>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d103      	bne.n	8009806 <ndefT2TPollerTagFormat+0x22>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	785b      	ldrb	r3, [r3, #1]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <ndefT2TPollerTagFormat+0x26>
    {
        return ERR_PARAM;
 8009806:	2307      	movs	r3, #7
 8009808:	e0a2      	b.n	8009950 <ndefT2TPollerTagFormat+0x16c>
    }

    /*
     * Read CC area
     */
    ret = ndefT2TPollerReadBytes(ctx, NDEF_T2T_CC_OFFSET, NDEF_T2T_CC_LEN, ctx->ccBuf, NULL);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8009810:	2300      	movs	r3, #0
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	4613      	mov	r3, r2
 8009816:	2204      	movs	r2, #4
 8009818:	210c      	movs	r1, #12
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f7ff fb70 	bl	8008f00 <ndefT2TPollerReadBytes>
 8009820:	4603      	mov	r3, r0
 8009822:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8009824:	8afb      	ldrh	r3, [r7, #22]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <ndefT2TPollerTagFormat+0x4a>
    {
        return ret;
 800982a:	8afb      	ldrh	r3, [r7, #22]
 800982c:	e090      	b.n	8009950 <ndefT2TPollerTagFormat+0x16c>
    }

    ndefT2TInvalidateCache(ctx);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f04f 32ff 	mov.w	r2, #4294967295
 8009834:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    /*
     * Write CC only in case of virgin CC area
     */
    if( (ctx->ccBuf[NDEF_T2T_CC_0] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_1] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_2] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_3] == 0U) )
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800983e:	2b00      	cmp	r3, #0
 8009840:	d17e      	bne.n	8009940 <ndefT2TPollerTagFormat+0x15c>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009848:	2b00      	cmp	r3, #0
 800984a:	d179      	bne.n	8009940 <ndefT2TPollerTagFormat+0x15c>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8009852:	2b00      	cmp	r3, #0
 8009854:	d174      	bne.n	8009940 <ndefT2TPollerTagFormat+0x15c>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800985c:	2b00      	cmp	r3, #0
 800985e:	d16f      	bne.n	8009940 <ndefT2TPollerTagFormat+0x15c>
    {
        dataIt = 0U;
 8009860:	2300      	movs	r3, #0
 8009862:	757b      	strb	r3, [r7, #21]
        if( cc == NULL )
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d124      	bne.n	80098b4 <ndefT2TPollerTagFormat+0xd0>
        {
            /* Use default values if no cc provided */
            ctx->ccBuf[dataIt] = NDEF_T2T_MAGIC;
 800986a:	7d7b      	ldrb	r3, [r7, #21]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	4413      	add	r3, r2
 8009870:	22e1      	movs	r2, #225	; 0xe1
 8009872:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 8009876:	7d7b      	ldrb	r3, [r7, #21]
 8009878:	3301      	adds	r3, #1
 800987a:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = NDEF_T2T_VERSION_1_0;
 800987c:	7d7b      	ldrb	r3, [r7, #21]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	4413      	add	r3, r2
 8009882:	2210      	movs	r2, #16
 8009884:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 8009888:	7d7b      	ldrb	r3, [r7, #21]
 800988a:	3301      	adds	r3, #1
 800988c:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = NDEF_T2T_STATIC_MEM_SIZE / NDEF_T2T_SIZE_DIVIDER;
 800988e:	7d7b      	ldrb	r3, [r7, #21]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	4413      	add	r3, r2
 8009894:	2206      	movs	r2, #6
 8009896:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800989a:	7d7b      	ldrb	r3, [r7, #21]
 800989c:	3301      	adds	r3, #1
 800989e:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = 0x00U;
 80098a0:	7d7b      	ldrb	r3, [r7, #21]
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	4413      	add	r3, r2
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 80098ac:	7d7b      	ldrb	r3, [r7, #21]
 80098ae:	3301      	adds	r3, #1
 80098b0:	757b      	strb	r3, [r7, #21]
 80098b2:	e037      	b.n	8009924 <ndefT2TPollerTagFormat+0x140>
        }
        else
        {
            ctx->ccBuf[dataIt] = cc->t2t.magicNumber;
 80098b4:	7d7b      	ldrb	r3, [r7, #21]
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	7811      	ldrb	r1, [r2, #0]
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	4413      	add	r3, r2
 80098be:	460a      	mov	r2, r1
 80098c0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 80098c4:	7d7b      	ldrb	r3, [r7, #21]
 80098c6:	3301      	adds	r3, #1
 80098c8:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = (uint8_t)(cc->t2t.majorVersion << 4U) | cc->t2t.minorVersion;
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	785b      	ldrb	r3, [r3, #1]
 80098ce:	011b      	lsls	r3, r3, #4
 80098d0:	b2d9      	uxtb	r1, r3
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	789a      	ldrb	r2, [r3, #2]
 80098d6:	7d7b      	ldrb	r3, [r7, #21]
 80098d8:	430a      	orrs	r2, r1
 80098da:	b2d1      	uxtb	r1, r2
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	4413      	add	r3, r2
 80098e0:	460a      	mov	r2, r1
 80098e2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 80098e6:	7d7b      	ldrb	r3, [r7, #21]
 80098e8:	3301      	adds	r3, #1
 80098ea:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = cc->t2t.size;
 80098ec:	7d7b      	ldrb	r3, [r7, #21]
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	78d1      	ldrb	r1, [r2, #3]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4413      	add	r3, r2
 80098f6:	460a      	mov	r2, r1
 80098f8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 80098fc:	7d7b      	ldrb	r3, [r7, #21]
 80098fe:	3301      	adds	r3, #1
 8009900:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = (uint8_t)(cc->t2t.readAccess << 4U) | cc->t2t.writeAccess;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	791b      	ldrb	r3, [r3, #4]
 8009906:	011b      	lsls	r3, r3, #4
 8009908:	b2d9      	uxtb	r1, r3
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	795a      	ldrb	r2, [r3, #5]
 800990e:	7d7b      	ldrb	r3, [r7, #21]
 8009910:	430a      	orrs	r2, r1
 8009912:	b2d1      	uxtb	r1, r2
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	4413      	add	r3, r2
 8009918:	460a      	mov	r2, r1
 800991a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800991e:	7d7b      	ldrb	r3, [r7, #21]
 8009920:	3301      	adds	r3, #1
 8009922:	757b      	strb	r3, [r7, #21]
        }
        ret = ndefT2TPollerWriteBlock(ctx, NDEF_T2T_CC_OFFSET/NDEF_T2T_BLOCK_SIZE, ctx->ccBuf);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	339c      	adds	r3, #156	; 0x9c
 8009928:	461a      	mov	r2, r3
 800992a:	2103      	movs	r1, #3
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f7ff fd86 	bl	800943e <ndefT2TPollerWriteBlock>
 8009932:	4603      	mov	r3, r0
 8009934:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 8009936:	8afb      	ldrh	r3, [r7, #22]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <ndefT2TPollerTagFormat+0x15c>
        {
            return ret;
 800993c:	8afb      	ldrh	r3, [r7, #22]
 800993e:	e007      	b.n	8009950 <ndefT2TPollerTagFormat+0x16c>
    }

    /*
     * Write NDEF place holder
     */
    ret = ndefT2TPollerWriteBlock(ctx, NDEF_T2T_AREA_OFFSET/NDEF_T2T_BLOCK_SIZE, emptyNdef);
 8009940:	4a05      	ldr	r2, [pc, #20]	; (8009958 <ndefT2TPollerTagFormat+0x174>)
 8009942:	2104      	movs	r1, #4
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f7ff fd7a 	bl	800943e <ndefT2TPollerWriteBlock>
 800994a:	4603      	mov	r3, r0
 800994c:	82fb      	strh	r3, [r7, #22]

    return ret;
 800994e:	8afb      	ldrh	r3, [r7, #22]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3718      	adds	r7, #24
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	0801ae9c 	.word	0x0801ae9c

0800995c <ndefT2TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT2TPollerCheckPresence(ndefContext *ctx)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
    ReturnCode           ret;
    uint16_t             blockAddr;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d007      	beq.n	800997a <ndefT2TPollerCheckPresence+0x1e>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d103      	bne.n	800997a <ndefT2TPollerCheckPresence+0x1e>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	785b      	ldrb	r3, [r3, #1]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d001      	beq.n	800997e <ndefT2TPollerCheckPresence+0x22>
    {
        return ERR_PARAM;
 800997a:	2307      	movs	r3, #7
 800997c:	e01b      	b.n	80099b6 <ndefT2TPollerCheckPresence+0x5a>
    }

    blockAddr = 0U;
 800997e:	2300      	movs	r3, #0
 8009980:	81fb      	strh	r3, [r7, #14]
    ret = ndefT2TPollerReadBlock(ctx, blockAddr, ctx->subCtx.t2t.cacheBuf);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f103 02b5 	add.w	r2, r3, #181	; 0xb5
 8009988:	89fb      	ldrh	r3, [r7, #14]
 800998a:	4619      	mov	r1, r3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7ff fa6f 	bl	8008e70 <ndefT2TPollerReadBlock>
 8009992:	4603      	mov	r3, r0
 8009994:	81bb      	strh	r3, [r7, #12]
    if( ret != ERR_NONE )
 8009996:	89bb      	ldrh	r3, [r7, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d006      	beq.n	80099aa <ndefT2TPollerCheckPresence+0x4e>
    {
        ndefT2TInvalidateCache(ctx);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f04f 32ff 	mov.w	r2, #4294967295
 80099a2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        return ret;
 80099a6:	89bb      	ldrh	r3, [r7, #12]
 80099a8:	e005      	b.n	80099b6 <ndefT2TPollerCheckPresence+0x5a>
    }
    ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 80099aa:	89fb      	ldrh	r3, [r7, #14]
 80099ac:	009a      	lsls	r2, r3, #2
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    return ERR_NONE;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <ndefT2TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT2TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 80099be:	b480      	push	{r7}
 80099c0:	b085      	sub	sp, #20
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	6039      	str	r1, [r7, #0]
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d007      	beq.n	80099de <ndefT2TPollerCheckAvailableSpace+0x20>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d103      	bne.n	80099de <ndefT2TPollerCheckAvailableSpace+0x20>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	785b      	ldrb	r3, [r3, #1]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <ndefT2TPollerCheckAvailableSpace+0x24>
    {
        return ERR_PARAM;
 80099de:	2307      	movs	r3, #7
 80099e0:	e01e      	b.n	8009a20 <ndefT2TPollerCheckAvailableSpace+0x62>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d101      	bne.n	80099f0 <ndefT2TPollerCheckAvailableSpace+0x32>
    {
        return ERR_WRONG_STATE;
 80099ec:	2321      	movs	r3, #33	; 0x21
 80099ee:	e017      	b.n	8009a20 <ndefT2TPollerCheckAvailableSpace+0x62>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T2T_TLV_L_3_BYTES_LEN : NDEF_T2T_TLV_L_1_BYTES_LEN;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2bfe      	cmp	r3, #254	; 0xfe
 80099f4:	d901      	bls.n	80099fa <ndefT2TPollerCheckAvailableSpace+0x3c>
 80099f6:	2303      	movs	r3, #3
 80099f8:	e000      	b.n	80099fc <ndefT2TPollerCheckAvailableSpace+0x3e>
 80099fa:	2301      	movs	r3, #1
 80099fc:	60fb      	str	r3, [r7, #12]

    if( (messageLen + ctx->subCtx.t2t.offsetNdefTLV + NDEF_T2T_TLV_T_LEN + lLen) > (ctx->areaLen + NDEF_T2T_AREA_OFFSET) )
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	441a      	add	r2, r3
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	1c5a      	adds	r2, r3, #1
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a14:	3310      	adds	r3, #16
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d901      	bls.n	8009a1e <ndefT2TPollerCheckAvailableSpace+0x60>
    {
        return ERR_NOMEM;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e000      	b.n	8009a20 <ndefT2TPollerCheckAvailableSpace+0x62>
    }
    return ERR_NONE;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3714      	adds	r7, #20
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bc80      	pop	{r7}
 8009a28:	4770      	bx	lr

08009a2a <ndefT2TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
 8009a32:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d007      	beq.n	8009a4a <ndefT2TPollerBeginWriteMessage+0x20>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d103      	bne.n	8009a4a <ndefT2TPollerBeginWriteMessage+0x20>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <ndefT2TPollerBeginWriteMessage+0x24>
    {
        return ERR_PARAM;
 8009a4a:	2307      	movs	r3, #7
 8009a4c:	e03b      	b.n	8009ac6 <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d006      	beq.n	8009a66 <ndefT2TPollerBeginWriteMessage+0x3c>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d001      	beq.n	8009a66 <ndefT2TPollerBeginWriteMessage+0x3c>
    {
        return ERR_WRONG_STATE;
 8009a62:	2321      	movs	r3, #33	; 0x21
 8009a64:	e02f      	b.n	8009ac6 <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    /* TS T2T v1.0 7.5.3.4: reset L_Field to 0 */
    ret = ndefT2TPollerWriteRawMessageLen(ctx, 0U);
 8009a66:	2100      	movs	r1, #0
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7ff fdbe 	bl	80095ea <ndefT2TPollerWriteRawMessageLen>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 8009a72:	89fb      	ldrh	r3, [r7, #14]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d005      	beq.n	8009a84 <ndefT2TPollerBeginWriteMessage+0x5a>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 8009a80:	89fb      	ldrh	r3, [r7, #14]
 8009a82:	e020      	b.n	8009ac6 <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T2T_TLV_L_3_BYTES_LEN : NDEF_T2T_TLV_L_1_BYTES_LEN;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2bfe      	cmp	r3, #254	; 0xfe
 8009a88:	d901      	bls.n	8009a8e <ndefT2TPollerBeginWriteMessage+0x64>
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e000      	b.n	8009a90 <ndefT2TPollerBeginWriteMessage+0x66>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	60bb      	str	r3, [r7, #8]
    ctx->messageOffset  = ctx->subCtx.t2t.offsetNdefTLV;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += NDEF_T2T_TLV_T_LEN; /* T Len */
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += lLen;               /* L Len */
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	441a      	add	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    ctx->state = NDEF_STATE_INITIALIZED;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <ndefT2TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d007      	beq.n	8009aee <ndefT2TPollerEndWriteMessage+0x20>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d103      	bne.n	8009aee <ndefT2TPollerEndWriteMessage+0x20>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	785b      	ldrb	r3, [r3, #1]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <ndefT2TPollerEndWriteMessage+0x24>
    {
        return ERR_PARAM;
 8009aee:	2307      	movs	r3, #7
 8009af0:	e025      	b.n	8009b3e <ndefT2TPollerEndWriteMessage+0x70>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d001      	beq.n	8009b00 <ndefT2TPollerEndWriteMessage+0x32>
    {
        return ERR_WRONG_STATE;
 8009afc:	2321      	movs	r3, #33	; 0x21
 8009afe:	e01e      	b.n	8009b3e <ndefT2TPollerEndWriteMessage+0x70>
    }

    /* TS T2T v1.0 7.5.3.6 & 7.5.3.7: update L_Field and write Terminator TLV */
    ret = ndefT2TPollerWriteRawMessageLen(ctx, messageLen);
 8009b00:	6839      	ldr	r1, [r7, #0]
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7ff fd71 	bl	80095ea <ndefT2TPollerWriteRawMessageLen>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 8009b0c:	89fb      	ldrh	r3, [r7, #14]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d005      	beq.n	8009b1e <ndefT2TPollerEndWriteMessage+0x50>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 8009b1a:	89fb      	ldrh	r3, [r7, #14]
 8009b1c:	e00f      	b.n	8009b3e <ndefT2TPollerEndWriteMessage+0x70>
    }
    ctx->messageLen = messageLen;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <ndefT2TPollerEndWriteMessage+0x66>
 8009b30:	2201      	movs	r2, #1
 8009b32:	e000      	b.n	8009b36 <ndefT2TPollerEndWriteMessage+0x68>
 8009b34:	2202      	movs	r2, #2
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <ndefT3TPollerReadBlocks>:
 ******************************************************************************
 */

/*******************************************************************************/
static ReturnCode ndefT3TPollerReadBlocks( ndefContext *ctx, uint16_t blockNum, uint8_t nbBlocks, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b08e      	sub	sp, #56	; 0x38
 8009b4a:	af02      	add	r7, sp, #8
 8009b4c:	60f8      	str	r0, [r7, #12]
 8009b4e:	607b      	str	r3, [r7, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	817b      	strh	r3, [r7, #10]
 8009b54:	4613      	mov	r3, r2
 8009b56:	727b      	strb	r3, [r7, #9]
    ReturnCode                 ret;
    uint16_t                   requestedDataSize;
    rfalNfcfServBlockListParam servBlock;
    rfalNfcfBlockListElem *    listBlocks;
    uint8_t                    index;
    uint16_t                   rcvdLen = 0U;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	827b      	strh	r3, [r7, #18]
    rfalNfcfServ               serviceCodeLst = 0x000BU; /* serviceCodeLst */
 8009b5c:	230b      	movs	r3, #11
 8009b5e:	823b      	strh	r3, [r7, #16]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d003      	beq.n	8009b6e <ndefT3TPollerReadBlocks+0x28>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d001      	beq.n	8009b72 <ndefT3TPollerReadBlocks+0x2c>
    {
        return ERR_PARAM;
 8009b6e:	2307      	movs	r3, #7
 8009b70:	e065      	b.n	8009c3e <ndefT3TPollerReadBlocks+0xf8>
    }

    requestedDataSize = (uint16_t)nbBlocks * NDEF_T3T_BLOCK_SIZE;
 8009b72:	7a7b      	ldrb	r3, [r7, #9]
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	011b      	lsls	r3, r3, #4
 8009b78:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if( rxBufLen < requestedDataSize )
 8009b7a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009b7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d201      	bcs.n	8009b86 <ndefT3TPollerReadBlocks+0x40>
    {
        return ERR_PARAM;
 8009b82:	2307      	movs	r3, #7
 8009b84:	e05b      	b.n	8009c3e <ndefT3TPollerReadBlocks+0xf8>
    }

    listBlocks = ctx->subCtx.t3t.listBlocks;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b8c:	62bb      	str	r3, [r7, #40]	; 0x28

    for (index = 0U; index < nbBlocks; index++ )
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009b94:	e017      	b.n	8009bc6 <ndefT3TPollerReadBlocks+0x80>
    {
        /* Write each block number (16 bits per block address) */
        listBlocks[index].conf     = (uint8_t) NDEF_T3T_BLOCKNB_CONF;
 8009b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b9e:	4413      	add	r3, r2
 8009ba0:	2280      	movs	r2, #128	; 0x80
 8009ba2:	701a      	strb	r2, [r3, #0]
        listBlocks[index].blockNum = (uint16_t)( blockNum + (uint16_t) index);
 8009ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ba8:	b299      	uxth	r1, r3
 8009baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bb2:	4413      	add	r3, r2
 8009bb4:	897a      	ldrh	r2, [r7, #10]
 8009bb6:	440a      	add	r2, r1
 8009bb8:	b292      	uxth	r2, r2
 8009bba:	805a      	strh	r2, [r3, #2]
    for (index = 0U; index < nbBlocks; index++ )
 8009bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009bc6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009bca:	7a7b      	ldrb	r3, [r7, #9]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d3e2      	bcc.n	8009b96 <ndefT3TPollerReadBlocks+0x50>
    }

    servBlock.numServ   = 1U;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	753b      	strb	r3, [r7, #20]
    servBlock.servList  = &serviceCodeLst;
 8009bd4:	f107 0310 	add.w	r3, r7, #16
 8009bd8:	61bb      	str	r3, [r7, #24]
    servBlock.numBlock  = nbBlocks;
 8009bda:	7a7b      	ldrb	r3, [r7, #9]
 8009bdc:	773b      	strb	r3, [r7, #28]
    servBlock.blockList = listBlocks;
 8009bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be0:	623b      	str	r3, [r7, #32]

    ret = rfalNfcfPollerCheck(ctx->device.dev.nfcf.sensfRes.NFCID2, &servBlock, ctx->subCtx.t3t.rxbuf, (uint16_t)sizeof(ctx->subCtx.t3t.rxbuf), &rcvdLen);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	1cd8      	adds	r0, r3, #3
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8009bec:	f107 0114 	add.w	r1, r7, #20
 8009bf0:	f107 0312 	add.w	r3, r7, #18
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	2350      	movs	r3, #80	; 0x50
 8009bf8:	f00a fb3a 	bl	8014270 <rfalNfcfPollerCheck>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (ret != ERR_NONE)
 8009c00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <ndefT3TPollerReadBlocks+0xc4>
    {
        return ret;
 8009c06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c08:	e019      	b.n	8009c3e <ndefT3TPollerReadBlocks+0xf8>
    }
    if( rcvdLen != (uint16_t)(NDEF_T3T_CHECK_NB_BLOCKS_LEN + requestedDataSize) )
 8009c0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	8a7b      	ldrh	r3, [r7, #18]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d001      	beq.n	8009c1a <ndefT3TPollerReadBlocks+0xd4>
    {
        return ERR_REQUEST;
 8009c16:	2305      	movs	r3, #5
 8009c18:	e011      	b.n	8009c3e <ndefT3TPollerReadBlocks+0xf8>
    }
    if( requestedDataSize > 0U )
 8009c1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00d      	beq.n	8009c3c <ndefT3TPollerReadBlocks+0xf6>
    {
        (void)ST_MEMCPY( rxBuf, &ctx->subCtx.t3t.rxbuf[NDEF_T3T_CHECK_NB_BLOCKS_LEN], requestedDataSize );
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f203 1305 	addw	r3, r3, #261	; 0x105
 8009c26:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f00f f8e3 	bl	8018df6 <memcpy>
        if (rcvLen != NULL)
 8009c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <ndefT3TPollerReadBlocks+0xf6>
        {
            *rcvLen = requestedDataSize;
 8009c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c38:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009c3a:	801a      	strh	r2, [r3, #0]
        }
    }
    return ERR_NONE;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3730      	adds	r7, #48	; 0x30
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <ndefT3TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT3TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 8009c46:	b590      	push	{r4, r7, lr}
 8009c48:	b08f      	sub	sp, #60	; 0x3c
 8009c4a:	af02      	add	r7, sp, #8
 8009c4c:	60f8      	str	r0, [r7, #12]
 8009c4e:	60b9      	str	r1, [r7, #8]
 8009c50:	607a      	str	r2, [r7, #4]
 8009c52:	603b      	str	r3, [r7, #0]
    uint16_t        res;
    uint16_t        nbRead;
    ReturnCode      result     = ERR_NONE;
 8009c54:	2300      	movs	r3, #0
 8009c56:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t        currentLen = len;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t        lvRcvLen   = 0U;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	627b      	str	r3, [r7, #36]	; 0x24
    const uint16_t  blockLen   = (uint16_t) NDEF_T3T_BLOCKLEN;
 8009c60:	2310      	movs	r3, #16
 8009c62:	83fb      	strh	r3, [r7, #30]
    uint16_t        startBlock = (uint16_t) (offset / blockLen);
 8009c64:	8bfb      	ldrh	r3, [r7, #30]
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c6c:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t        startAddr  = (uint16_t) (startBlock * blockLen);
 8009c6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c70:	8bfa      	ldrh	r2, [r7, #30]
 8009c72:	fb02 f303 	mul.w	r3, r2, r3
 8009c76:	83bb      	strh	r3, [r7, #28]
    uint16_t        startOffset= (uint16_t) (offset -  (uint32_t) startAddr);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	8bbb      	ldrh	r3, [r7, #28]
 8009c7e:	1ad3      	subs	r3, r2, r3
 8009c80:	837b      	strh	r3, [r7, #26]
    uint16_t        nbBlocks   = (uint16_t) NDEF_T3T_NBBLOCKSMAX;
 8009c82:	2304      	movs	r3, #4
 8009c84:	843b      	strh	r3, [r7, #32]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (len == 0U) )
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d006      	beq.n	8009c9a <ndefT3TPollerReadBytes+0x54>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d102      	bne.n	8009c9a <ndefT3TPollerReadBytes+0x54>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <ndefT3TPollerReadBytes+0x58>
    {
        return ERR_PARAM;
 8009c9a:	2307      	movs	r3, #7
 8009c9c:	e0e3      	b.n	8009e66 <ndefT3TPollerReadBytes+0x220>
    }
    if (ctx->state != NDEF_STATE_INVALID)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d003      	beq.n	8009cb0 <ndefT3TPollerReadBytes+0x6a>
    {
        nbBlocks = ctx->cc.t3t.nbR;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8009cae:	843b      	strh	r3, [r7, #32]
    }

    if ( startOffset != 0U )
 8009cb0:	8b7b      	ldrh	r3, [r7, #26]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f000 808e 	beq.w	8009dd4 <ndefT3TPollerReadBytes+0x18e>
    {
        /* Unaligned read, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */ , ctx->subCtx.t3t.rxbuf, blockLen, &nbRead);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8009cbe:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8009cc0:	f107 0316 	add.w	r3, r7, #22
 8009cc4:	9301      	str	r3, [sp, #4]
 8009cc6:	8bfb      	ldrh	r3, [r7, #30]
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	2201      	movs	r2, #1
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f7ff ff39 	bl	8009b46 <ndefT3TPollerReadBlocks>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 8009cd8:	8b3b      	ldrh	r3, [r7, #24]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <ndefT3TPollerReadBytes+0x9e>
        {
            /* Check result */
            result = res;
 8009cde:	8b3b      	ldrh	r3, [r7, #24]
 8009ce0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009ce2:	e077      	b.n	8009dd4 <ndefT3TPollerReadBytes+0x18e>
        }
        else if (nbRead != NDEF_T3T_BLOCKLEN)
 8009ce4:	8afb      	ldrh	r3, [r7, #22]
 8009ce6:	2b10      	cmp	r3, #16
 8009ce8:	d002      	beq.n	8009cf0 <ndefT3TPollerReadBytes+0xaa>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 8009cea:	230e      	movs	r3, #14
 8009cec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009cee:	e071      	b.n	8009dd4 <ndefT3TPollerReadBytes+0x18e>
        }
        else
        {
            nbRead = (uint16_t) (nbRead - (uint16_t)startOffset);
 8009cf0:	8afa      	ldrh	r2, [r7, #22]
 8009cf2:	8b7b      	ldrh	r3, [r7, #26]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	82fb      	strh	r3, [r7, #22]
            if ((uint32_t) nbRead > currentLen)
 8009cfa:	8afb      	ldrh	r3, [r7, #22]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d202      	bcs.n	8009d0a <ndefT3TPollerReadBytes+0xc4>
            {
                nbRead = (uint16_t) currentLen;
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	82fb      	strh	r3, [r7, #22]
            }
            if (nbRead > 0U)
 8009d0a:	8afb      	ldrh	r3, [r7, #22]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00a      	beq.n	8009d26 <ndefT3TPollerReadBytes+0xe0>
            {
                (void)ST_MEMCPY(buf, &ctx->subCtx.t3t.rxbuf[offset], (uint32_t)nbRead);
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	4413      	add	r3, r2
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	8afa      	ldrh	r2, [r7, #22]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6838      	ldr	r0, [r7, #0]
 8009d22:	f00f f868 	bl	8018df6 <memcpy>
            }
            lvRcvLen   += (uint32_t) nbRead;
 8009d26:	8afb      	ldrh	r3, [r7, #22]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	4413      	add	r3, r2
 8009d2e:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= (uint32_t) nbRead;
 8009d30:	8afb      	ldrh	r3, [r7, #22]
 8009d32:	461a      	mov	r2, r3
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	1a9b      	subs	r3, r3, r2
 8009d38:	62bb      	str	r3, [r7, #40]	; 0x28
            startBlock++;
 8009d3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	847b      	strh	r3, [r7, #34]	; 0x22
        }
    }

    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 8009d40:	e048      	b.n	8009dd4 <ndefT3TPollerReadBytes+0x18e>
    {
        if ( currentLen <  ((uint32_t)blockLen * nbBlocks) )
 8009d42:	8bfb      	ldrh	r3, [r7, #30]
 8009d44:	8c3a      	ldrh	r2, [r7, #32]
 8009d46:	fb02 f303 	mul.w	r3, r2, r3
 8009d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d204      	bcs.n	8009d5a <ndefT3TPollerReadBytes+0x114>
        {
              /* Reduce the nb of blocks to read */
              nbBlocks =  (uint16_t) (currentLen / blockLen);
 8009d50:	8bfb      	ldrh	r3, [r7, #30]
 8009d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d58:	843b      	strh	r3, [r7, #32]
        }
        res = ndefT3TPollerReadBlocks(ctx, startBlock, (uint8_t)nbBlocks, ctx->subCtx.t3t.rxbuf, blockLen * nbBlocks, &nbRead);
 8009d5a:	8c3b      	ldrh	r3, [r7, #32]
 8009d5c:	b2d8      	uxtb	r0, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f503 7482 	add.w	r4, r3, #260	; 0x104
 8009d64:	8bfb      	ldrh	r3, [r7, #30]
 8009d66:	8c3a      	ldrh	r2, [r7, #32]
 8009d68:	fb02 f303 	mul.w	r3, r2, r3
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8009d70:	f107 0216 	add.w	r2, r7, #22
 8009d74:	9201      	str	r2, [sp, #4]
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	4623      	mov	r3, r4
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f7ff fee2 	bl	8009b46 <ndefT3TPollerReadBlocks>
 8009d82:	4603      	mov	r3, r0
 8009d84:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 8009d86:	8b3b      	ldrh	r3, [r7, #24]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <ndefT3TPollerReadBytes+0x14a>
        {
            /* Check result */
            return res;
 8009d8c:	8b3b      	ldrh	r3, [r7, #24]
 8009d8e:	e06a      	b.n	8009e66 <ndefT3TPollerReadBytes+0x220>
        }
        else if (nbRead != (blockLen * nbBlocks))
 8009d90:	8afb      	ldrh	r3, [r7, #22]
 8009d92:	4619      	mov	r1, r3
 8009d94:	8bfb      	ldrh	r3, [r7, #30]
 8009d96:	8c3a      	ldrh	r2, [r7, #32]
 8009d98:	fb02 f303 	mul.w	r3, r2, r3
 8009d9c:	4299      	cmp	r1, r3
 8009d9e:	d001      	beq.n	8009da4 <ndefT3TPollerReadBytes+0x15e>
        {
            /* Check len */
            return ERR_MEM_CORRUPT;
 8009da0:	230e      	movs	r3, #14
 8009da2:	e060      	b.n	8009e66 <ndefT3TPollerReadBytes+0x220>
        }
        else
        {
            (void)ST_MEMCPY(&buf[lvRcvLen], ctx->subCtx.t3t.rxbuf, (uint32_t)currentLen);
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	18d0      	adds	r0, r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8009db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009db2:	4619      	mov	r1, r3
 8009db4:	f00f f81f 	bl	8018df6 <memcpy>
            lvRcvLen   += nbRead;
 8009db8:	8afb      	ldrh	r3, [r7, #22]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	4413      	add	r3, r2
 8009dc0:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= nbRead;
 8009dc2:	8afb      	ldrh	r3, [r7, #22]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc8:	1a9b      	subs	r3, r3, r2
 8009dca:	62bb      	str	r3, [r7, #40]	; 0x28
            startBlock += nbBlocks;
 8009dcc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009dce:	8c3b      	ldrh	r3, [r7, #32]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	847b      	strh	r3, [r7, #34]	; 0x22
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 8009dd4:	8bfb      	ldrh	r3, [r7, #30]
 8009dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d302      	bcc.n	8009de2 <ndefT3TPollerReadBytes+0x19c>
 8009ddc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0af      	beq.n	8009d42 <ndefT3TPollerReadBytes+0xfc>
        }
    }
    if  ( (currentLen > 0U) && (result == ERR_NONE) )
 8009de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d02f      	beq.n	8009e48 <ndefT3TPollerReadBytes+0x202>
 8009de8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d12c      	bne.n	8009e48 <ndefT3TPollerReadBytes+0x202>
    {
        /* Unaligned read, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */, ctx->subCtx.t3t.rxbuf, blockLen, &nbRead);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8009df4:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8009df6:	f107 0316 	add.w	r3, r7, #22
 8009dfa:	9301      	str	r3, [sp, #4]
 8009dfc:	8bfb      	ldrh	r3, [r7, #30]
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	4613      	mov	r3, r2
 8009e02:	2201      	movs	r2, #1
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7ff fe9e 	bl	8009b46 <ndefT3TPollerReadBlocks>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 8009e0e:	8b3b      	ldrh	r3, [r7, #24]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <ndefT3TPollerReadBytes+0x1d2>
        {
            /* Check result */
            return res;
 8009e14:	8b3b      	ldrh	r3, [r7, #24]
 8009e16:	e026      	b.n	8009e66 <ndefT3TPollerReadBytes+0x220>
        }
        else if (nbRead != NDEF_T3T_BLOCKLEN)
 8009e18:	8afb      	ldrh	r3, [r7, #22]
 8009e1a:	2b10      	cmp	r3, #16
 8009e1c:	d001      	beq.n	8009e22 <ndefT3TPollerReadBytes+0x1dc>
        {
            /* Check len */
            return ERR_MEM_CORRUPT;
 8009e1e:	230e      	movs	r3, #14
 8009e20:	e021      	b.n	8009e66 <ndefT3TPollerReadBytes+0x220>
        }
        else
        {
            if (currentLen > 0U)
 8009e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d009      	beq.n	8009e3c <ndefT3TPollerReadBytes+0x1f6>
            {
                (void)ST_MEMCPY(&buf[lvRcvLen], ctx->subCtx.t3t.rxbuf, (uint32_t)currentLen);
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	18d0      	adds	r0, r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8009e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e36:	4619      	mov	r1, r3
 8009e38:	f00e ffdd 	bl	8018df6 <memcpy>
            }
            lvRcvLen   += (uint32_t) currentLen;
 8009e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e40:	4413      	add	r3, r2
 8009e42:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= (uint32_t) currentLen;
 8009e44:	2300      	movs	r3, #0
 8009e46:	62bb      	str	r3, [r7, #40]	; 0x28
        }
    }
    if ( (currentLen == 0U) && (result == ERR_NONE) )
 8009e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d104      	bne.n	8009e58 <ndefT3TPollerReadBytes+0x212>
 8009e4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d101      	bne.n	8009e58 <ndefT3TPollerReadBytes+0x212>
    {
        result = ERR_NONE;
 8009e54:	2300      	movs	r3, #0
 8009e56:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    if( rcvdLen != NULL )
 8009e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <ndefT3TPollerReadBytes+0x21e>
    {
        *rcvdLen = lvRcvLen;
 8009e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e62:	601a      	str	r2, [r3, #0]
    }
    return result;
 8009e64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3734      	adds	r7, #52	; 0x34
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd90      	pop	{r4, r7, pc}

08009e6e <ndefT3TPollerReadAttributeInformationBlock>:

/*******************************************************************************/
static ReturnCode ndefT3TPollerReadAttributeInformationBlock( ndefContext * ctx)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b088      	sub	sp, #32
 8009e72:	af02      	add	r7, sp, #8
 8009e74:	6078      	str	r0, [r7, #4]
    /* Follow 7.4.1 NDEF Detection Procedure */
    ReturnCode   retcode;
    uint8_t    * rxbuf;
    uint16_t     checksum_received;
    uint16_t     checksum_computed = 0U;
 8009e76:	2300      	movs	r3, #0
 8009e78:	82fb      	strh	r3, [r7, #22]
    uint16_t     rcvLen            = 0U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	817b      	strh	r3, [r7, #10]
    uint8_t      i;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d003      	beq.n	8009e8c <ndefT3TPollerReadAttributeInformationBlock+0x1e>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d001      	beq.n	8009e90 <ndefT3TPollerReadAttributeInformationBlock+0x22>
    {
        return ERR_PARAM;
 8009e8c:	2307      	movs	r3, #7
 8009e8e:	e07d      	b.n	8009f8c <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }
    rxbuf   = ctx->ccBuf;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	339c      	adds	r3, #156	; 0x9c
 8009e94:	613b      	str	r3, [r7, #16]
    retcode = ndefT3TPollerReadBlocks( ctx, NDEF_T3T_ATTRIB_INFO_BLOCK_NB, 1U /* One block */, rxbuf, NDEF_T3T_BLOCK_SIZE, &rcvLen );
 8009e96:	f107 030a 	add.w	r3, r7, #10
 8009e9a:	9301      	str	r3, [sp, #4]
 8009e9c:	2310      	movs	r3, #16
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff fe4d 	bl	8009b46 <ndefT3TPollerReadBlocks>
 8009eac:	4603      	mov	r3, r0
 8009eae:	81fb      	strh	r3, [r7, #14]
    if ( (retcode != ERR_NONE) && (rcvLen != NDEF_T3T_BLOCK_SIZE) )
 8009eb0:	89fb      	ldrh	r3, [r7, #14]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d004      	beq.n	8009ec0 <ndefT3TPollerReadAttributeInformationBlock+0x52>
 8009eb6:	897b      	ldrh	r3, [r7, #10]
 8009eb8:	2b10      	cmp	r3, #16
 8009eba:	d001      	beq.n	8009ec0 <ndefT3TPollerReadAttributeInformationBlock+0x52>
    {
        return retcode;
 8009ebc:	89fb      	ldrh	r3, [r7, #14]
 8009ebe:	e065      	b.n	8009f8c <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }
    /* Now compute checksum */
    for (i = 0U; i < NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN; i++)
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	757b      	strb	r3, [r7, #21]
 8009ec4:	e00a      	b.n	8009edc <ndefT3TPollerReadAttributeInformationBlock+0x6e>
    {
        checksum_computed += (uint16_t) rxbuf[i];
 8009ec6:	7d7b      	ldrb	r3, [r7, #21]
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	4413      	add	r3, r2
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	8afb      	ldrh	r3, [r7, #22]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	82fb      	strh	r3, [r7, #22]
    for (i = 0U; i < NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN; i++)
 8009ed6:	7d7b      	ldrb	r3, [r7, #21]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	757b      	strb	r3, [r7, #21]
 8009edc:	7d7b      	ldrb	r3, [r7, #21]
 8009ede:	2b0d      	cmp	r3, #13
 8009ee0:	d9f1      	bls.n	8009ec6 <ndefT3TPollerReadAttributeInformationBlock+0x58>
    }
    checksum_received = ((uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN] << 8U) + (uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN+ 1U];
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	330e      	adds	r3, #14
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	021b      	lsls	r3, r3, #8
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	330f      	adds	r3, #15
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	4413      	add	r3, r2
 8009ef8:	81bb      	strh	r3, [r7, #12]
    if (checksum_received !=  checksum_computed)
 8009efa:	89ba      	ldrh	r2, [r7, #12]
 8009efc:	8afb      	ldrh	r3, [r7, #22]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d001      	beq.n	8009f06 <ndefT3TPollerReadAttributeInformationBlock+0x98>
    {
        return ERR_REQUEST;
 8009f02:	2305      	movs	r3, #5
 8009f04:	e042      	b.n	8009f8c <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }

    /* Now copy the attribute struct */
    ctx->cc.t3t.majorVersion  = ( rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_VERSION] >> 4U);
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	091b      	lsrs	r3, r3, #4
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t3t.minorVersion  = ( rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_VERSION] & 0xFU);
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	f003 030f 	and.w	r3, r3, #15
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    ctx->cc.t3t.nbR           = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_NBR];
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	785a      	ldrb	r2, [r3, #1]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    ctx->cc.t3t.nbW           = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_NBW];
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	789a      	ldrb	r2, [r3, #2]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    ctx->cc.t3t.nMaxB         = ((uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_MAXB] << 8U) + (uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_MAXB + 1U];
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	3303      	adds	r3, #3
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	021b      	lsls	r3, r3, #8
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	3304      	adds	r3, #4
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	4413      	add	r3, r2
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    ctx->cc.t3t.writeFlag     = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_W];
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	7a5a      	ldrb	r2, [r3, #9]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ctx->cc.t3t.rwFlag        = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_RW];
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	7a9a      	ldrb	r2, [r3, #10]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    ctx->cc.t3t.Ln            =   ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 0U] << 0x10U)
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	330b      	adds	r3, #11
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	041a      	lsls	r2, r3, #16
                                | ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 1U] << 0x8U)
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	330c      	adds	r3, #12
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	021b      	lsls	r3, r3, #8
 8009f7a:	4313      	orrs	r3, r2
                                |  (uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 2U];
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	320d      	adds	r2, #13
 8009f80:	7812      	ldrb	r2, [r2, #0]
 8009f82:	431a      	orrs	r2, r3
    ctx->cc.t3t.Ln            =   ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 0U] << 0x10U)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     return ERR_NONE;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3718      	adds	r7, #24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <ndefT3TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT3TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT3TisT3TDevice(dev) )
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d006      	beq.n	8009fb2 <ndefT3TPollerContextInitialization+0x1e>
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d003      	beq.n	8009fb2 <ndefT3TPollerContextInitialization+0x1e>
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d001      	beq.n	8009fb6 <ndefT3TPollerContextInitialization+0x22>
    {
        return ERR_PARAM;
 8009fb2:	2307      	movs	r3, #7
 8009fb4:	e00a      	b.n	8009fcc <ndefT3TPollerContextInitialization+0x38>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2278      	movs	r2, #120	; 0x78
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f00e ff1a 	bl	8018df6 <memcpy>

    ctx->state                   = NDEF_STATE_INVALID;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <ndefT3TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT3TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08c      	sub	sp, #48	; 0x30
 8009fd8:	af02      	add	r7, sp, #8
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
    ReturnCode        retcode;
    rfalFeliCaPollRes pollRes[NDEF_T3T_MAX_DEVICE];
    uint8_t           devCnt     = NDEF_T3T_MAX_DEVICE;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	73fb      	strb	r3, [r7, #15]
    uint8_t           collisions = 0U;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	73bb      	strb	r3, [r7, #14]

    if( info != NULL )
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d011      	beq.n	800a010 <ndefT3TPollerNdefDetect+0x3c>
    {
        info->state                = NDEF_STATE_INVALID;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	2200      	movs	r2, #0
 800a002:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2200      	movs	r2, #0
 800a008:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2200      	movs	r2, #0
 800a00e:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d003      	beq.n	800a01e <ndefT3TPollerNdefDetect+0x4a>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d001      	beq.n	800a022 <ndefT3TPollerNdefDetect+0x4e>
    {
        return ERR_PARAM;
 800a01e:	2307      	movs	r3, #7
 800a020:	e087      	b.n	800a132 <ndefT3TPollerNdefDetect+0x15e>
    }
    ctx->state = NDEF_STATE_INVALID;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* TS T3T v1.0 7.4.1.1 the Reader/Writer SHALL send a SENSF_REQ Command with System Code set to 12FCh. */
    retcode = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_NO_REQUEST, pollRes, &devCnt, &collisions );
 800a02a:	f107 0210 	add.w	r2, r7, #16
 800a02e:	f107 030e 	add.w	r3, r7, #14
 800a032:	9301      	str	r3, [sp, #4]
 800a034:	f107 030f 	add.w	r3, r7, #15
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	4613      	mov	r3, r2
 800a03c:	2200      	movs	r2, #0
 800a03e:	f241 21fc 	movw	r1, #4860	; 0x12fc
 800a042:	2000      	movs	r0, #0
 800a044:	f00a f866 	bl	8014114 <rfalNfcfPollerPoll>
 800a048:	4603      	mov	r3, r0
 800a04a:	84fb      	strh	r3, [r7, #38]	; 0x26
    if( retcode != ERR_NONE )
 800a04c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <ndefT3TPollerNdefDetect+0x82>
    {
        /* TS T3T v1.0 7.4.1.2 Conclude procedure. */
        return retcode;
 800a052:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a054:	e06d      	b.n	800a132 <ndefT3TPollerNdefDetect+0x15e>
    }

    /* Check if UID of the first card is the same */
    if( ST_BYTECMP(&(pollRes[0U][NDEF_T3T_SENSFRES_NFCID2]), ctx->device.dev.nfcf.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) != 0 )
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	1cd9      	adds	r1, r3, #3
 800a05a:	f107 0310 	add.w	r3, r7, #16
 800a05e:	3302      	adds	r3, #2
 800a060:	2208      	movs	r2, #8
 800a062:	4618      	mov	r0, r3
 800a064:	f00e feb8 	bl	8018dd8 <memcmp>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <ndefT3TPollerNdefDetect+0x9e>
    {
        return ERR_REQUEST; /* Wrong UID */
 800a06e:	2305      	movs	r3, #5
 800a070:	e05f      	b.n	800a132 <ndefT3TPollerNdefDetect+0x15e>
    }

    /* TS T3T v1.0 7.4.1.3 The Reader/Writer SHALL read the Attribute Information Block using the CHECK Command. */
    /* TS T3T v1.0 7.4.1.4 The Reader/Writer SHALL verify the value of Checksum of the Attribute Information Block. */
    retcode = ndefT3TPollerReadAttributeInformationBlock(ctx);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7ff fefb 	bl	8009e6e <ndefT3TPollerReadAttributeInformationBlock>
 800a078:	4603      	mov	r3, r0
 800a07a:	84fb      	strh	r3, [r7, #38]	; 0x26
    if( retcode != ERR_NONE )
 800a07c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <ndefT3TPollerNdefDetect+0xb2>
    {
        return retcode;
 800a082:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a084:	e055      	b.n	800a132 <ndefT3TPollerNdefDetect+0x15e>
    }

    /* TS T3T v1.0 7.4.1.6 The Reader/Writer SHALL check if it supports the NDEF mapping version number based on the rules given in Section 7.3. */
    if( ctx->cc.t3t.majorVersion != ndefMajorVersion(NDEF_T3T_ATTRIB_INFO_VERSION_1_0) )
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d001      	beq.n	800a094 <ndefT3TPollerNdefDetect+0xc0>
    {
        return ERR_REQUEST;
 800a090:	2305      	movs	r3, #5
 800a092:	e04e      	b.n	800a132 <ndefT3TPollerNdefDetect+0x15e>
    }

    ctx->messageLen     = ctx->cc.t3t.Ln;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset  = NDEF_T3T_AREA_OFFSET;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2210      	movs	r2, #16
 800a0a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->areaLen        = (uint32_t)ctx->cc.t3t.nMaxB * NDEF_T3T_BLOCK_SIZE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800a0ae:	011a      	lsls	r2, r3, #4
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    ctx->state          = NDEF_STATE_INITIALIZED;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    if (ctx->messageLen > 0U)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d012      	beq.n	800a0ee <ndefT3TPollerNdefDetect+0x11a>
    {
        if (ctx->cc.t3t.rwFlag == NDEF_T3T_FLAG_RW)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d104      	bne.n	800a0dc <ndefT3TPollerNdefDetect+0x108>
        {
            ctx->state = NDEF_STATE_READWRITE;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800a0da:	e008      	b.n	800a0ee <ndefT3TPollerNdefDetect+0x11a>
        }
        else
        {
            if (ctx->cc.t3t.rwFlag == NDEF_T3T_FLAG_RO)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d103      	bne.n	800a0ee <ndefT3TPollerNdefDetect+0x11a>
            {
                ctx->state = NDEF_STATE_READONLY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2203      	movs	r2, #3
 800a0ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            }
        }
    }

    if( info != NULL )
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d01d      	beq.n	800a130 <ndefT3TPollerNdefDetect+0x15c>
    {
        info->state                = ctx->state;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ctx->cc.t3t.majorVersion;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ctx->cc.t3t.minorVersion;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = ctx->areaLen;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	60da      	str	r2, [r3, #12]
    }

    return ERR_NONE;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3728      	adds	r7, #40	; 0x28
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <ndefT3TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b088      	sub	sp, #32
 800a13e:	af02      	add	r7, sp, #8
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	60b9      	str	r1, [r7, #8]
 800a144:	607a      	str	r2, [r7, #4]
 800a146:	603b      	str	r3, [r7, #0]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (buf == NULL) )
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d006      	beq.n	800a15c <ndefT3TPollerReadRawMessage+0x22>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	2b02      	cmp	r3, #2
 800a154:	d102      	bne.n	800a15c <ndefT3TPollerReadRawMessage+0x22>
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d101      	bne.n	800a160 <ndefT3TPollerReadRawMessage+0x26>
    {
        return ERR_PARAM;
 800a15c:	2307      	movs	r3, #7
 800a15e:	e02b      	b.n	800a1b8 <ndefT3TPollerReadRawMessage+0x7e>
    }

    /* TS T3T v1.0 7.4.2: This procedure assumes that the Reader/Writer has successfully performed the NDEF detection procedure. */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a166:	2b01      	cmp	r3, #1
 800a168:	d801      	bhi.n	800a16e <ndefT3TPollerReadRawMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800a16a:	2321      	movs	r3, #33	; 0x21
 800a16c:	e024      	b.n	800a1b8 <ndefT3TPollerReadRawMessage+0x7e>
    }
    /* TS T3T v1.0 7.4.2.1: If the WriteFlag remembered during the NDEF detection procedure is set to ON, the NDEF data may be inconsistent ...*/
    if( ndefT3TIsWriteFlagON(ctx->cc.t3t.writeFlag) )
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a174:	2b0f      	cmp	r3, #15
 800a176:	d101      	bne.n	800a17c <ndefT3TPollerReadRawMessage+0x42>
    {
        /*  TS T3T v1.0 7.4.2.1: ... the Reader/Writer SHALL conclude the NDEF read procedure*/
        return ERR_WRONG_STATE;
 800a178:	2321      	movs	r3, #33	; 0x21
 800a17a:	e01d      	b.n	800a1b8 <ndefT3TPollerReadRawMessage+0x7e>
    }

    if( ctx->messageLen > bufLen )
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	429a      	cmp	r2, r3
 800a186:	d201      	bcs.n	800a18c <ndefT3TPollerReadRawMessage+0x52>
    {
        return ERR_NOMEM;
 800a188:	2301      	movs	r3, #1
 800a18a:	e015      	b.n	800a1b8 <ndefT3TPollerReadRawMessage+0x7e>
    }

    /*  TS T3T v1.0 7.4.2.2: Read NDEF data */
    ret = ndefT3TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f7ff fd51 	bl	8009c46 <ndefT3TPollerReadBytes>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a1a8:	8afb      	ldrh	r3, [r7, #22]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d003      	beq.n	800a1b6 <ndefT3TPollerReadRawMessage+0x7c>
    {
        ctx->state = NDEF_STATE_INVALID;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return ret;
 800a1b6:	8afb      	ldrh	r3, [r7, #22]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3718      	adds	r7, #24
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <ndefT3TPollerWriteBlocks>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
static ReturnCode ndefT3TPollerWriteBlocks( ndefContext * ctx, uint16_t blockNum, uint8_t nbBlocks, const uint8_t* dataBlocks)
{
 800a1c0:	b590      	push	{r4, r7, lr}
 800a1c2:	b091      	sub	sp, #68	; 0x44
 800a1c4:	af04      	add	r7, sp, #16
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	607b      	str	r3, [r7, #4]
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	817b      	strh	r3, [r7, #10]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	727b      	strb	r3, [r7, #9]
    ReturnCode                 ret;
    rfalNfcfServBlockListParam servBlock;
    rfalNfcfBlockListElem  *   listBlocks;
    uint8_t                    index;
    rfalNfcfServ               serviceCodeLst = 0x0009U;
 800a1d2:	2309      	movs	r3, #9
 800a1d4:	827b      	strh	r3, [r7, #18]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d003      	beq.n	800a1e4 <ndefT3TPollerWriteBlocks+0x24>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d001      	beq.n	800a1e8 <ndefT3TPollerWriteBlocks+0x28>
    {
        return ERR_PARAM;
 800a1e4:	2307      	movs	r3, #7
 800a1e6:	e043      	b.n	800a270 <ndefT3TPollerWriteBlocks+0xb0>
    }

    listBlocks = ctx->subCtx.t3t.listBlocks;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a1ee:	62bb      	str	r3, [r7, #40]	; 0x28

    for (index = 0U; index < nbBlocks; index++)
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a1f6:	e017      	b.n	800a228 <ndefT3TPollerWriteBlocks+0x68>
    {
        /* Write each block number (16 bits per block address) */
        listBlocks[index].conf     = (uint8_t) NDEF_T3T_BLOCKNB_CONF;
 800a1f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a200:	4413      	add	r3, r2
 800a202:	2280      	movs	r2, #128	; 0x80
 800a204:	701a      	strb	r2, [r3, #0]
        listBlocks[index].blockNum = (uint16_t)( blockNum + (uint16_t) index);
 800a206:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a20a:	b299      	uxth	r1, r3
 800a20c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a214:	4413      	add	r3, r2
 800a216:	897a      	ldrh	r2, [r7, #10]
 800a218:	440a      	add	r2, r1
 800a21a:	b292      	uxth	r2, r2
 800a21c:	805a      	strh	r2, [r3, #2]
    for (index = 0U; index < nbBlocks; index++)
 800a21e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a222:	3301      	adds	r3, #1
 800a224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a228:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a22c:	7a7b      	ldrb	r3, [r7, #9]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d3e2      	bcc.n	800a1f8 <ndefT3TPollerWriteBlocks+0x38>
    }
    servBlock.numServ   = 1U;
 800a232:	2301      	movs	r3, #1
 800a234:	753b      	strb	r3, [r7, #20]
    servBlock.servList  = &serviceCodeLst;
 800a236:	f107 0312 	add.w	r3, r7, #18
 800a23a:	61bb      	str	r3, [r7, #24]
    servBlock.numBlock  = nbBlocks;
 800a23c:	7a7b      	ldrb	r3, [r7, #9]
 800a23e:	773b      	strb	r3, [r7, #28]
    servBlock.blockList = listBlocks;
 800a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a242:	623b      	str	r3, [r7, #32]

    ret = rfalNfcfPollerUpdate( ctx->device.dev.nfcf.sensfRes.NFCID2, &servBlock, ctx->subCtx.t3t.txbuf, (uint16_t)sizeof(ctx->subCtx.t3t.txbuf), dataBlocks, ctx->subCtx.t3t.rxbuf, (uint16_t)sizeof(ctx->subCtx.t3t.rxbuf));
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	1cd8      	adds	r0, r3, #3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800a254:	f107 0114 	add.w	r1, r7, #20
 800a258:	2250      	movs	r2, #80	; 0x50
 800a25a:	9202      	str	r2, [sp, #8]
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	2350      	movs	r3, #80	; 0x50
 800a264:	4622      	mov	r2, r4
 800a266:	f00a f947 	bl	80144f8 <rfalNfcfPollerUpdate>
 800a26a:	4603      	mov	r3, r0
 800a26c:	84fb      	strh	r3, [r7, #38]	; 0x26

    return ret;
 800a26e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800a270:	4618      	mov	r0, r3
 800a272:	3734      	adds	r7, #52	; 0x34
 800a274:	46bd      	mov	sp, r7
 800a276:	bd90      	pop	{r4, r7, pc}

0800a278 <ndefT3TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b092      	sub	sp, #72	; 0x48
 800a27c:	af02      	add	r7, sp, #8
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
 800a284:	603b      	str	r3, [r7, #0]
    uint16_t        nbRead;
    uint16_t        nbWrite;
    uint16_t        res;
    ReturnCode      result     = ERR_NONE;
 800a286:	2300      	movs	r3, #0
 800a288:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint32_t        currentLen = len;
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	63bb      	str	r3, [r7, #56]	; 0x38
    uint32_t        txtLen     = 0U;
 800a28e:	2300      	movs	r3, #0
 800a290:	637b      	str	r3, [r7, #52]	; 0x34
    const uint16_t  blockLen   = (uint16_t )NDEF_T3T_BLOCKLEN;
 800a292:	2310      	movs	r3, #16
 800a294:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t        nbBlocks   = (uint16_t ) NDEF_T3T_NBBLOCKSMAX;
 800a296:	2304      	movs	r3, #4
 800a298:	867b      	strh	r3, [r7, #50]	; 0x32
    uint16_t        startBlock = (uint16_t) (offset / blockLen);
 800a29a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2a2:	863b      	strh	r3, [r7, #48]	; 0x30
    uint16_t        startAddr  = (uint16_t) (startBlock * blockLen);
 800a2a4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a2a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a2a8:	fb02 f303 	mul.w	r3, r2, r3
 800a2ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t        startOffset= (uint16_t) (offset -  (uint32_t) startAddr);
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint8_t         tmpBuf[NDEF_T3T_BLOCKLEN];

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (len == 0U) )
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d006      	beq.n	800a2cc <ndefT3TPollerWriteBytes+0x54>
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d102      	bne.n	800a2cc <ndefT3TPollerWriteBytes+0x54>
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d101      	bne.n	800a2d0 <ndefT3TPollerWriteBytes+0x58>
    {
        return ERR_PARAM;
 800a2cc:	2307      	movs	r3, #7
 800a2ce:	e0d0      	b.n	800a472 <ndefT3TPollerWriteBytes+0x1fa>
    }
    if (ctx->state != NDEF_STATE_INVALID)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d003      	beq.n	800a2e2 <ndefT3TPollerWriteBytes+0x6a>
    {
        nbBlocks = ctx->cc.t3t.nbW;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a2e0:	867b      	strh	r3, [r7, #50]	; 0x32
    }

    if ( startOffset != 0U )
 800a2e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d078      	beq.n	800a3da <ndefT3TPollerWriteBytes+0x162>
    {
        /* Unaligned write, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1, tmpBuf, blockLen, &nbRead);
 800a2e8:	f107 0214 	add.w	r2, r7, #20
 800a2ec:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800a2ee:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800a2f2:	9301      	str	r3, [sp, #4]
 800a2f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f7ff fc22 	bl	8009b46 <ndefT3TPollerReadBlocks>
 800a302:	4603      	mov	r3, r0
 800a304:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 800a306:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d002      	beq.n	800a312 <ndefT3TPollerWriteBytes+0x9a>
        {
            /* Check result */
            result = res;
 800a30c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a30e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a310:	e063      	b.n	800a3da <ndefT3TPollerWriteBytes+0x162>
        }
        else if (nbRead != blockLen)
 800a312:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a314:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a316:	429a      	cmp	r2, r3
 800a318:	d002      	beq.n	800a320 <ndefT3TPollerWriteBytes+0xa8>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 800a31a:	230e      	movs	r3, #14
 800a31c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a31e:	e05c      	b.n	800a3da <ndefT3TPollerWriteBytes+0x162>
        }
        else
        {
            /* Fill the rest of the buffer with user data */
            nbWrite =  NDEF_T3T_BLOCKLEN - startOffset;
 800a320:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a322:	f1c3 0310 	rsb	r3, r3, #16
 800a326:	87fb      	strh	r3, [r7, #62]	; 0x3e
            if (nbWrite >  len)
 800a328:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d201      	bcs.n	800a334 <ndefT3TPollerWriteBytes+0xbc>
            {
                 nbWrite = (uint16_t) len;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
            (void)ST_MEMCPY(&tmpBuf[startOffset], buf, nbWrite);
 800a334:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a336:	f107 0214 	add.w	r2, r7, #20
 800a33a:	4413      	add	r3, r2
 800a33c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a33e:	6879      	ldr	r1, [r7, #4]
 800a340:	4618      	mov	r0, r3
 800a342:	f00e fd58 	bl	8018df6 <memcpy>
            res = ndefT3TPollerWriteBlocks(ctx, startBlock, 1U /* One block */, tmpBuf);
 800a346:	f107 0314 	add.w	r3, r7, #20
 800a34a:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800a34c:	2201      	movs	r2, #1
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f7ff ff36 	bl	800a1c0 <ndefT3TPollerWriteBlocks>
 800a354:	4603      	mov	r3, r0
 800a356:	853b      	strh	r3, [r7, #40]	; 0x28
            if (res == ERR_NONE)
 800a358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10b      	bne.n	800a376 <ndefT3TPollerWriteBytes+0xfe>
            {
                txtLen     += (uint32_t) nbWrite;
 800a35e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a362:	4413      	add	r3, r2
 800a364:	637b      	str	r3, [r7, #52]	; 0x34
                currentLen -= (uint32_t) nbWrite;
 800a366:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	63bb      	str	r3, [r7, #56]	; 0x38
                startBlock++;
 800a36e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a370:	3301      	adds	r3, #1
 800a372:	863b      	strh	r3, [r7, #48]	; 0x30
 800a374:	e031      	b.n	800a3da <ndefT3TPollerWriteBytes+0x162>
            }
            else
            {
                result = res; /* Copy the error code */
 800a376:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a378:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }
    }
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800a37a:	e02e      	b.n	800a3da <ndefT3TPollerWriteBytes+0x162>
    {
        if ( currentLen <  ((uint32_t)blockLen * nbBlocks) )
 800a37c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a37e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a380:	fb02 f303 	mul.w	r3, r2, r3
 800a384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a386:	429a      	cmp	r2, r3
 800a388:	d204      	bcs.n	800a394 <ndefT3TPollerWriteBytes+0x11c>
        {
              /* Reduce the nb of blocks to read */
              nbBlocks = (uint16_t) (currentLen / blockLen);
 800a38a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a38c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a38e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a392:	867b      	strh	r3, [r7, #50]	; 0x32
        }
        nbWrite = blockLen * nbBlocks;
 800a394:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a396:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a398:	fb02 f303 	mul.w	r3, r2, r3
 800a39c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        res     = ndefT3TPollerWriteBlocks(ctx, startBlock, (uint8_t) nbBlocks, &buf[txtLen]);
 800a39e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a3a0:	b2d8      	uxtb	r0, r3
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a6:	4413      	add	r3, r2
 800a3a8:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f7ff ff07 	bl	800a1c0 <ndefT3TPollerWriteBlocks>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 800a3b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <ndefT3TPollerWriteBytes+0x14a>
        {
            /* Check result */
            result = res;
 800a3bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a3be:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a3c0:	e00b      	b.n	800a3da <ndefT3TPollerWriteBytes+0x162>
        }
        else
        {
            txtLen     += nbWrite;
 800a3c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a3c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3c6:	4413      	add	r3, r2
 800a3c8:	637b      	str	r3, [r7, #52]	; 0x34
            currentLen -= nbWrite;
 800a3ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a3cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	63bb      	str	r3, [r7, #56]	; 0x38
            startBlock += nbBlocks;
 800a3d2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a3d4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a3d6:	4413      	add	r3, r2
 800a3d8:	863b      	strh	r3, [r7, #48]	; 0x30
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800a3da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d302      	bcc.n	800a3e8 <ndefT3TPollerWriteBytes+0x170>
 800a3e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d0c9      	beq.n	800a37c <ndefT3TPollerWriteBytes+0x104>
        }
    }
    if ( (currentLen > 0U) && (result == ERR_NONE) )
 800a3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d038      	beq.n	800a460 <ndefT3TPollerWriteBytes+0x1e8>
 800a3ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d135      	bne.n	800a460 <ndefT3TPollerWriteBytes+0x1e8>
    {
        /* Unaligned write, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */, tmpBuf, blockLen, &nbRead);
 800a3f4:	f107 0214 	add.w	r2, r7, #20
 800a3f8:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800a3fa:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800a3fe:	9301      	str	r3, [sp, #4]
 800a400:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	4613      	mov	r3, r2
 800a406:	2201      	movs	r2, #1
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f7ff fb9c 	bl	8009b46 <ndefT3TPollerReadBlocks>
 800a40e:	4603      	mov	r3, r0
 800a410:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 800a412:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a414:	2b00      	cmp	r3, #0
 800a416:	d002      	beq.n	800a41e <ndefT3TPollerWriteBytes+0x1a6>
        {
            /* Check result */
            result = res;
 800a418:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a41a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a41c:	e020      	b.n	800a460 <ndefT3TPollerWriteBytes+0x1e8>
        }
        else if (nbRead != blockLen)
 800a41e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a420:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a422:	429a      	cmp	r2, r3
 800a424:	d002      	beq.n	800a42c <ndefT3TPollerWriteBytes+0x1b4>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 800a426:	230e      	movs	r3, #14
 800a428:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a42a:	e019      	b.n	800a460 <ndefT3TPollerWriteBytes+0x1e8>
        }
        else
        {
            /* Fill the beginning of the buffer with user data */
            (void)ST_MEMCPY( tmpBuf, &buf[txtLen], currentLen);
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a430:	18d1      	adds	r1, r2, r3
 800a432:	f107 0314 	add.w	r3, r7, #20
 800a436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a438:	4618      	mov	r0, r3
 800a43a:	f00e fcdc 	bl	8018df6 <memcpy>
            res = ndefT3TPollerWriteBlocks(ctx, startBlock, 1U /* One block */, tmpBuf);
 800a43e:	f107 0314 	add.w	r3, r7, #20
 800a442:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800a444:	2201      	movs	r2, #1
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f7ff feba 	bl	800a1c0 <ndefT3TPollerWriteBlocks>
 800a44c:	4603      	mov	r3, r0
 800a44e:	853b      	strh	r3, [r7, #40]	; 0x28
            if (res == ERR_NONE)
 800a450:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a452:	2b00      	cmp	r3, #0
 800a454:	d102      	bne.n	800a45c <ndefT3TPollerWriteBytes+0x1e4>
            {
                currentLen = 0U;
 800a456:	2300      	movs	r3, #0
 800a458:	63bb      	str	r3, [r7, #56]	; 0x38
 800a45a:	e001      	b.n	800a460 <ndefT3TPollerWriteBytes+0x1e8>
            }
            else
            {
                result = res; /* Copy the error code */
 800a45c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a45e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }
    }
    if ( (currentLen == 0U) && (result == ERR_NONE) )
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	2b00      	cmp	r3, #0
 800a464:	d104      	bne.n	800a470 <ndefT3TPollerWriteBytes+0x1f8>
 800a466:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d101      	bne.n	800a470 <ndefT3TPollerWriteBytes+0x1f8>
    {
        result = ERR_NONE;
 800a46c:	2300      	movs	r3, #0
 800a46e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    return result;
 800a470:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
}
 800a472:	4618      	mov	r0, r3
 800a474:	3740      	adds	r7, #64	; 0x40
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <ndefT3TPollerWriteAttributeInformationBlock>:

/*******************************************************************************/
static ReturnCode ndefT3TPollerWriteAttributeInformationBlock(ndefContext * ctx)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b086      	sub	sp, #24
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
    uint8_t    dataIt;
    uint16_t   checksum;
    uint8_t *  buf;
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d003      	beq.n	800a490 <ndefT3TPollerWriteAttributeInformationBlock+0x16>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d001      	beq.n	800a494 <ndefT3TPollerWriteAttributeInformationBlock+0x1a>
    {
        return ERR_PARAM;
 800a490:	2307      	movs	r3, #7
 800a492:	e10e      	b.n	800a6b2 <ndefT3TPollerWriteAttributeInformationBlock+0x238>
    }
    if ( ctx->state < NDEF_STATE_INITIALIZED )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d101      	bne.n	800a4a2 <ndefT3TPollerWriteAttributeInformationBlock+0x28>
    {
        return ERR_WRONG_STATE;
 800a49e:	2321      	movs	r3, #33	; 0x21
 800a4a0:	e107      	b.n	800a6b2 <ndefT3TPollerWriteAttributeInformationBlock+0x238>
    }
    dataIt        = 0U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	75fb      	strb	r3, [r7, #23]
    buf           = ctx->ccBuf;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	339c      	adds	r3, #156	; 0x9c
 800a4aa:	613b      	str	r3, [r7, #16]
    checksum      = 0U;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	81fb      	strh	r3, [r7, #14]
    buf[dataIt]   = ((uint8_t)(ctx->cc.t3t.majorVersion << 4U)) |  ctx->cc.t3t.minorVersion; /* Byte  0 Ver          */
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a4b6:	011b      	lsls	r3, r3, #4
 800a4b8:	b2d9      	uxtb	r1, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800a4c0:	7dfb      	ldrb	r3, [r7, #23]
 800a4c2:	6938      	ldr	r0, [r7, #16]
 800a4c4:	4403      	add	r3, r0
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	b2d2      	uxtb	r2, r2
 800a4ca:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	89fb      	ldrh	r3, [r7, #14]
 800a4d8:	4413      	add	r3, r2
 800a4da:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a4dc:	7dfb      	ldrb	r3, [r7, #23]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.nbR;                                                         /* Byte  1 Nbr          */
 800a4e2:	7dfb      	ldrb	r3, [r7, #23]
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 800a4ee:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a4f0:	7dfb      	ldrb	r3, [r7, #23]
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	89fb      	ldrh	r3, [r7, #14]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a500:	7dfb      	ldrb	r3, [r7, #23]
 800a502:	3301      	adds	r3, #1
 800a504:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.nbW;                                                         /* Byte  2 Nbw          */
 800a506:	7dfb      	ldrb	r3, [r7, #23]
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	4413      	add	r3, r2
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 800a512:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a514:	7dfb      	ldrb	r3, [r7, #23]
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	4413      	add	r3, r2
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	89fb      	ldrh	r3, [r7, #14]
 800a520:	4413      	add	r3, r2
 800a522:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a524:	7dfb      	ldrb	r3, [r7, #23]
 800a526:	3301      	adds	r3, #1
 800a528:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.nMaxB >> 8U);                                      /* Byte  3 NmaxB  (MSB) */
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800a530:	0a1b      	lsrs	r3, r3, #8
 800a532:	b299      	uxth	r1, r3
 800a534:	7dfb      	ldrb	r3, [r7, #23]
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	4413      	add	r3, r2
 800a53a:	b2ca      	uxtb	r2, r1
 800a53c:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a53e:	7dfb      	ldrb	r3, [r7, #23]
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	4413      	add	r3, r2
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	b29a      	uxth	r2, r3
 800a548:	89fb      	ldrh	r3, [r7, #14]
 800a54a:	4413      	add	r3, r2
 800a54c:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
 800a550:	3301      	adds	r3, #1
 800a552:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.nMaxB >> 0U);                                      /* Byte  4 NmaxB  (LSB) */
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	4413      	add	r3, r2
 800a560:	b2ca      	uxtb	r2, r1
 800a562:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a564:	7dfb      	ldrb	r3, [r7, #23]
 800a566:	693a      	ldr	r2, [r7, #16]
 800a568:	4413      	add	r3, r2
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	89fb      	ldrh	r3, [r7, #14]
 800a570:	4413      	add	r3, r2
 800a572:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a574:	7dfb      	ldrb	r3, [r7, #23]
 800a576:	3301      	adds	r3, #1
 800a578:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  5 RFU          */
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
 800a57c:	693a      	ldr	r2, [r7, #16]
 800a57e:	4413      	add	r3, r2
 800a580:	2200      	movs	r2, #0
 800a582:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800a584:	7dfb      	ldrb	r3, [r7, #23]
 800a586:	3301      	adds	r3, #1
 800a588:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  6 RFU          */
 800a58a:	7dfb      	ldrb	r3, [r7, #23]
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	4413      	add	r3, r2
 800a590:	2200      	movs	r2, #0
 800a592:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800a594:	7dfb      	ldrb	r3, [r7, #23]
 800a596:	3301      	adds	r3, #1
 800a598:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  7 RFU          */
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	4413      	add	r3, r2
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800a5a4:	7dfb      	ldrb	r3, [r7, #23]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  8 RFU          */
 800a5aa:	7dfb      	ldrb	r3, [r7, #23]
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800a5b4:	7dfb      	ldrb	r3, [r7, #23]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.writeFlag;                                                   /* Byte  9 WriteFlag    */
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	4413      	add	r3, r2
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 800a5c6:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a5c8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	89fb      	ldrh	r3, [r7, #14]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.rwFlag;                                                      /* Byte 10 RWFlag       */
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	693a      	ldr	r2, [r7, #16]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 800a5ea:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a5ec:	7dfb      	ldrb	r3, [r7, #23]
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	89fb      	ldrh	r3, [r7, #14]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a5fc:	7dfb      	ldrb	r3, [r7, #23]
 800a5fe:	3301      	adds	r3, #1
 800a600:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >> 16U);                                        /* Byte 11 Ln (MSB)     */
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a608:	0c19      	lsrs	r1, r3, #16
 800a60a:	7dfb      	ldrb	r3, [r7, #23]
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	4413      	add	r3, r2
 800a610:	b2ca      	uxtb	r2, r1
 800a612:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	4413      	add	r3, r2
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	89fb      	ldrh	r3, [r7, #14]
 800a620:	4413      	add	r3, r2
 800a622:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a624:	7dfb      	ldrb	r3, [r7, #23]
 800a626:	3301      	adds	r3, #1
 800a628:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >>  8U);                                        /* Byte 12 Ln (middle)  */
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a630:	0a19      	lsrs	r1, r3, #8
 800a632:	7dfb      	ldrb	r3, [r7, #23]
 800a634:	693a      	ldr	r2, [r7, #16]
 800a636:	4413      	add	r3, r2
 800a638:	b2ca      	uxtb	r2, r1
 800a63a:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a63c:	7dfb      	ldrb	r3, [r7, #23]
 800a63e:	693a      	ldr	r2, [r7, #16]
 800a640:	4413      	add	r3, r2
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	b29a      	uxth	r2, r3
 800a646:	89fb      	ldrh	r3, [r7, #14]
 800a648:	4413      	add	r3, r2
 800a64a:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a64c:	7dfb      	ldrb	r3, [r7, #23]
 800a64e:	3301      	adds	r3, #1
 800a650:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >>  0U);                                        /* Byte 13 Ln (LSB)     */
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	4413      	add	r3, r2
 800a65e:	b2ca      	uxtb	r2, r1
 800a660:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a662:	7dfb      	ldrb	r3, [r7, #23]
 800a664:	693a      	ldr	r2, [r7, #16]
 800a666:	4413      	add	r3, r2
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	89fb      	ldrh	r3, [r7, #14]
 800a66e:	4413      	add	r3, r2
 800a670:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a672:	7dfb      	ldrb	r3, [r7, #23]
 800a674:	3301      	adds	r3, #1
 800a676:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = (uint8_t)(checksum >> 8U);                                                 /* Byte 14 checksum MSB */
 800a678:	89fb      	ldrh	r3, [r7, #14]
 800a67a:	0a1b      	lsrs	r3, r3, #8
 800a67c:	b299      	uxth	r1, r3
 800a67e:	7dfb      	ldrb	r3, [r7, #23]
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	4413      	add	r3, r2
 800a684:	b2ca      	uxtb	r2, r1
 800a686:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800a688:	7dfb      	ldrb	r3, [r7, #23]
 800a68a:	3301      	adds	r3, #1
 800a68c:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = (uint8_t)(checksum >> 0U);                                                 /* Byte 15 checksum LSB */
 800a68e:	7dfb      	ldrb	r3, [r7, #23]
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	4413      	add	r3, r2
 800a694:	89fa      	ldrh	r2, [r7, #14]
 800a696:	b2d2      	uxtb	r2, r2
 800a698:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800a69a:	7dfb      	ldrb	r3, [r7, #23]
 800a69c:	3301      	adds	r3, #1
 800a69e:	75fb      	strb	r3, [r7, #23]

    ret = ndefT3TPollerWriteBlocks(ctx, NDEF_T3T_ATTRIB_INFO_BLOCK_NB, 1U /* One block */, buf);
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7ff fd8a 	bl	800a1c0 <ndefT3TPollerWriteBlocks>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	81bb      	strh	r3, [r7, #12]
    return ret;
 800a6b0:	89bb      	ldrh	r3, [r7, #12]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3718      	adds	r7, #24
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <ndefT3TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b086      	sub	sp, #24
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	60f8      	str	r0, [r7, #12]
 800a6c2:	60b9      	str	r1, [r7, #8]
 800a6c4:	607a      	str	r2, [r7, #4]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d009      	beq.n	800a6e0 <ndefT3TPollerWriteRawMessage+0x26>
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d105      	bne.n	800a6e0 <ndefT3TPollerWriteRawMessage+0x26>
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d104      	bne.n	800a6e4 <ndefT3TPollerWriteRawMessage+0x2a>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <ndefT3TPollerWriteRawMessage+0x2a>
    {
        return ERR_PARAM;
 800a6e0:	2307      	movs	r3, #7
 800a6e2:	e04b      	b.n	800a77c <ndefT3TPollerWriteRawMessage+0xc2>
    }
    /* TS T3T v1.0 7.4.3: This procedure assumes that the Reader/Writer has successfully performed the NDEF detection procedure... */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T3T v1.0 7.4.3: ... and that the RWFlag in the Attribute Information Block is set to 01h. */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d006      	beq.n	800a6fc <ndefT3TPollerWriteRawMessage+0x42>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d001      	beq.n	800a6fc <ndefT3TPollerWriteRawMessage+0x42>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 800a6f8:	2321      	movs	r3, #33	; 0x21
 800a6fa:	e03f      	b.n	800a77c <ndefT3TPollerWriteRawMessage+0xc2>
    }

    /* TS T3T v1.0 7.4.3.2: verify available space */
    ret = ndefT3TPollerCheckAvailableSpace(ctx, bufLen);
 800a6fc:	6879      	ldr	r1, [r7, #4]
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f000 f8cb 	bl	800a89a <ndefT3TPollerCheckAvailableSpace>
 800a704:	4603      	mov	r3, r0
 800a706:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a708:	8afb      	ldrh	r3, [r7, #22]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <ndefT3TPollerWriteRawMessage+0x58>
    {
        /* Conclude procedure */
        return ERR_PARAM;
 800a70e:	2307      	movs	r3, #7
 800a710:	e034      	b.n	800a77c <ndefT3TPollerWriteRawMessage+0xc2>
    }

    /* TS T3T v1.0 7.4.3.3: update WriteFlag */
    ret = ndefT3TPollerBeginWriteMessage(ctx, bufLen);
 800a712:	6879      	ldr	r1, [r7, #4]
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f000 f8e3 	bl	800a8e0 <ndefT3TPollerBeginWriteMessage>
 800a71a:	4603      	mov	r3, r0
 800a71c:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a71e:	8afb      	ldrh	r3, [r7, #22]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d005      	beq.n	800a730 <ndefT3TPollerWriteRawMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return ret;
 800a72c:	8afb      	ldrh	r3, [r7, #22]
 800a72e:	e025      	b.n	800a77c <ndefT3TPollerWriteRawMessage+0xc2>
    }

    if( bufLen != 0U )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d012      	beq.n	800a75c <ndefT3TPollerWriteRawMessage+0xa2>
    {
       /* TS T3T v1.0 7.4.3.4: write new NDEF message */
        ret = ndefT3TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f7ff fd99 	bl	800a278 <ndefT3TPollerWriteBytes>
 800a746:	4603      	mov	r3, r0
 800a748:	82fb      	strh	r3, [r7, #22]
        if  (ret != ERR_NONE)
 800a74a:	8afb      	ldrh	r3, [r7, #22]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d005      	beq.n	800a75c <ndefT3TPollerWriteRawMessage+0xa2>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800a758:	8afb      	ldrh	r3, [r7, #22]
 800a75a:	e00f      	b.n	800a77c <ndefT3TPollerWriteRawMessage+0xc2>
        }
    }
    /* TS T3T v1.0 7.4.3.5: update Ln value and set WriteFlag to OFF */
    ret = ndefT3TPollerEndWriteMessage(ctx, bufLen);
 800a75c:	6879      	ldr	r1, [r7, #4]
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f000 f8f3 	bl	800a94a <ndefT3TPollerEndWriteMessage>
 800a764:	4603      	mov	r3, r0
 800a766:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a768:	8afb      	ldrh	r3, [r7, #22]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d005      	beq.n	800a77a <ndefT3TPollerWriteRawMessage+0xc0>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800a776:	8afb      	ldrh	r3, [r7, #22]
 800a778:	e000      	b.n	800a77c <ndefT3TPollerWriteRawMessage+0xc2>
    }
    return ret;
 800a77a:	8afb      	ldrh	r3, [r7, #22]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3718      	adds	r7, #24
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <ndefT3TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT3TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer * cc, uint32_t options)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b08e      	sub	sp, #56	; 0x38
 800a788:	af02      	add	r7, sp, #8
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
    ReturnCode        res;
    rfalFeliCaPollRes buffOut [NDEF_T3T_MAX_DEVICE];
    uint8_t           devCnt     = NDEF_T3T_MAX_DEVICE;
 800a790:	2301      	movs	r3, #1
 800a792:	75fb      	strb	r3, [r7, #23]
    uint8_t           collisions = 0U;
 800a794:	2300      	movs	r3, #0
 800a796:	75bb      	strb	r3, [r7, #22]
    NO_WARNING(options); /* options not used in T3T */

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d003      	beq.n	800a7a6 <ndefT3TPollerTagFormat+0x22>
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d001      	beq.n	800a7aa <ndefT3TPollerTagFormat+0x26>
    {
        return ERR_PARAM;
 800a7a6:	2307      	movs	r3, #7
 800a7a8:	e051      	b.n	800a84e <ndefT3TPollerTagFormat+0xca>
    }
    if ( cc == NULL)
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d109      	bne.n	800a7c4 <ndefT3TPollerTagFormat+0x40>
    {
        /* No default CC found so have to analyse the tag */
        res = ndefT3TPollerReadAttributeInformationBlock(ctx);  /* Read current cc */
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7ff fb5c 	bl	8009e6e <ndefT3TPollerReadAttributeInformationBlock>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if (res != ERR_NONE)
 800a7ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d008      	beq.n	800a7d2 <ndefT3TPollerTagFormat+0x4e>
        {
            return res;
 800a7c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7c2:	e044      	b.n	800a84e <ndefT3TPollerTagFormat+0xca>
        }
    }
    else
    {
        /* Nothing to do */
        (void)ST_MEMCPY(&ctx->cc, cc, sizeof(ndefCapabilityContainer));
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	337c      	adds	r3, #124	; 0x7c
 800a7c8:	2214      	movs	r2, #20
 800a7ca:	68b9      	ldr	r1, [r7, #8]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f00e fb12 	bl	8018df6 <memcpy>
    }

    /* 4.3.3 System Definition Information for SystemCode = 0x12FC (NDEF) */
    res = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_NO_REQUEST, buffOut, &devCnt, &collisions );
 800a7d2:	f107 0218 	add.w	r2, r7, #24
 800a7d6:	f107 0316 	add.w	r3, r7, #22
 800a7da:	9301      	str	r3, [sp, #4]
 800a7dc:	f107 0317 	add.w	r3, r7, #23
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f241 21fc 	movw	r1, #4860	; 0x12fc
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	f009 fc92 	bl	8014114 <rfalNfcfPollerPoll>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (res != ERR_NONE)
 800a7f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d001      	beq.n	800a7fe <ndefT3TPollerTagFormat+0x7a>
    {
        return res;
 800a7fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7fc:	e027      	b.n	800a84e <ndefT3TPollerTagFormat+0xca>
    }
    res = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_SYSTEM_CODE, buffOut, &devCnt, &collisions );
 800a7fe:	f107 0218 	add.w	r2, r7, #24
 800a802:	f107 0316 	add.w	r3, r7, #22
 800a806:	9301      	str	r3, [sp, #4]
 800a808:	f107 0317 	add.w	r3, r7, #23
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	4613      	mov	r3, r2
 800a810:	2201      	movs	r2, #1
 800a812:	f241 21fc 	movw	r1, #4860	; 0x12fc
 800a816:	2000      	movs	r0, #0
 800a818:	f009 fc7c 	bl	8014114 <rfalNfcfPollerPoll>
 800a81c:	4603      	mov	r3, r0
 800a81e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (res != ERR_NONE)
 800a820:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <ndefT3TPollerTagFormat+0xa6>
    {
        return res;
 800a826:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a828:	e011      	b.n	800a84e <ndefT3TPollerTagFormat+0xca>
    }
    ctx->state            = NDEF_STATE_INITIALIZED; /* to be sure that the block will be written */
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2201      	movs	r2, #1
 800a82e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->cc.t3t.Ln        = 0U; /* Force actual stored NDEF size to 0 */
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2200      	movs	r2, #0
 800a836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ctx->cc.t3t.writeFlag = 0U; /* Force WriteFlag to 0 */
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    res = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f7ff fe19 	bl	800a47a <ndefT3TPollerWriteAttributeInformationBlock>
 800a848:	4603      	mov	r3, r0
 800a84a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    return res;
 800a84c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3730      	adds	r7, #48	; 0x30
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <ndefT3TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT3TPollerCheckPresence(ndefContext *ctx)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b086      	sub	sp, #24
 800a85a:	af02      	add	r7, sp, #8
 800a85c:	6078      	str	r0, [r7, #4]
    ReturnCode        retcode;
    uint16_t          nbRead;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d003      	beq.n	800a86c <ndefT3TPollerCheckPresence+0x16>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d001      	beq.n	800a870 <ndefT3TPollerCheckPresence+0x1a>
    {
        return ERR_PARAM;
 800a86c:	2307      	movs	r3, #7
 800a86e:	e010      	b.n	800a892 <ndefT3TPollerCheckPresence+0x3c>
    }
    /* Perform a simple readblock */
    retcode = ndefT3TPollerReadBlocks(ctx, 0U /* First block */, 1U /* One Block */, ctx->subCtx.t3t.rxbuf, NDEF_T3T_BLOCKLEN, &nbRead);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800a876:	f107 030c 	add.w	r3, r7, #12
 800a87a:	9301      	str	r3, [sp, #4]
 800a87c:	2310      	movs	r3, #16
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	4613      	mov	r3, r2
 800a882:	2201      	movs	r2, #1
 800a884:	2100      	movs	r1, #0
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7ff f95d 	bl	8009b46 <ndefT3TPollerReadBlocks>
 800a88c:	4603      	mov	r3, r0
 800a88e:	81fb      	strh	r3, [r7, #14]
    return retcode;
 800a890:	89fb      	ldrh	r3, [r7, #14]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <ndefT3TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT3TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b083      	sub	sp, #12
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <ndefT3TPollerCheckAvailableSpace+0x18>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	d001      	beq.n	800a8b6 <ndefT3TPollerCheckAvailableSpace+0x1c>
    {
        return ERR_PARAM;
 800a8b2:	2307      	movs	r3, #7
 800a8b4:	e00f      	b.n	800a8d6 <ndefT3TPollerCheckAvailableSpace+0x3c>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <ndefT3TPollerCheckAvailableSpace+0x2a>
    {
        return ERR_WRONG_STATE;
 800a8c0:	2321      	movs	r3, #33	; 0x21
 800a8c2:	e008      	b.n	800a8d6 <ndefT3TPollerCheckAvailableSpace+0x3c>
    }
    if( messageLen  > ctx->areaLen )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d901      	bls.n	800a8d4 <ndefT3TPollerCheckAvailableSpace+0x3a>
    {
        return ERR_NOMEM;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e000      	b.n	800a8d6 <ndefT3TPollerCheckAvailableSpace+0x3c>
    }
    return ERR_NONE;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bc80      	pop	{r7}
 800a8de:	4770      	bx	lr

0800a8e0 <ndefT3TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    NO_WARNING(messageLen);

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d003      	beq.n	800a8f8 <ndefT3TPollerBeginWriteMessage+0x18>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d001      	beq.n	800a8fc <ndefT3TPollerBeginWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800a8f8:	2307      	movs	r3, #7
 800a8fa:	e022      	b.n	800a942 <ndefT3TPollerBeginWriteMessage+0x62>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a902:	2b01      	cmp	r3, #1
 800a904:	d006      	beq.n	800a914 <ndefT3TPollerBeginWriteMessage+0x34>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d001      	beq.n	800a914 <ndefT3TPollerBeginWriteMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800a910:	2321      	movs	r3, #33	; 0x21
 800a912:	e016      	b.n	800a942 <ndefT3TPollerBeginWriteMessage+0x62>
    }
    /* Update WriteFlag */
    ctx->cc.t3t.writeFlag = NDEF_T3T_WRITEFLAG_ON;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	220f      	movs	r2, #15
 800a918:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ret                   = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7ff fdac 	bl	800a47a <ndefT3TPollerWriteAttributeInformationBlock>
 800a922:	4603      	mov	r3, r0
 800a924:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800a926:	89fb      	ldrh	r3, [r7, #14]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d005      	beq.n	800a938 <ndefT3TPollerBeginWriteMessage+0x58>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800a934:	89fb      	ldrh	r3, [r7, #14]
 800a936:	e004      	b.n	800a942 <ndefT3TPollerBeginWriteMessage+0x62>
    }
    ctx->state = NDEF_STATE_INITIALIZED;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <ndefT3TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b084      	sub	sp, #16
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	6039      	str	r1, [r7, #0]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d003      	beq.n	800a962 <ndefT3TPollerEndWriteMessage+0x18>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d001      	beq.n	800a966 <ndefT3TPollerEndWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800a962:	2307      	movs	r3, #7
 800a964:	e02c      	b.n	800a9c0 <ndefT3TPollerEndWriteMessage+0x76>
    }
    if( ctx->state != NDEF_STATE_INITIALIZED )
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d001      	beq.n	800a974 <ndefT3TPollerEndWriteMessage+0x2a>
    {
        return ERR_WRONG_STATE;
 800a970:	2321      	movs	r3, #33	; 0x21
 800a972:	e025      	b.n	800a9c0 <ndefT3TPollerEndWriteMessage+0x76>
    }
    /* TS T3T v1.0 7.4.3.5 Update Attribute Information Block */
    ctx->cc.t3t.writeFlag = NDEF_T3T_WRITEFLAG_OFF;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ctx->cc.t3t.Ln        = messageLen;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ret                   = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7ff fd78 	bl	800a47a <ndefT3TPollerWriteAttributeInformationBlock>
 800a98a:	4603      	mov	r3, r0
 800a98c:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800a98e:	89fb      	ldrh	r3, [r7, #14]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d005      	beq.n	800a9a0 <ndefT3TPollerEndWriteMessage+0x56>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800a99c:	89fb      	ldrh	r3, [r7, #14]
 800a99e:	e00f      	b.n	800a9c0 <ndefT3TPollerEndWriteMessage+0x76>
    }
    ctx->messageLen = messageLen;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state      = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <ndefT3TPollerEndWriteMessage+0x6c>
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	e000      	b.n	800a9b8 <ndefT3TPollerEndWriteMessage+0x6e>
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <ndefT3TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d003      	beq.n	800a9e0 <ndefT3TPollerWriteRawMessageLen+0x18>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	d001      	beq.n	800a9e4 <ndefT3TPollerWriteRawMessageLen+0x1c>
    {
        return ERR_PARAM;
 800a9e0:	2307      	movs	r3, #7
 800a9e2:	e010      	b.n	800aa06 <ndefT3TPollerWriteRawMessageLen+0x3e>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d006      	beq.n	800a9fc <ndefT3TPollerWriteRawMessageLen+0x34>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	d001      	beq.n	800a9fc <ndefT3TPollerWriteRawMessageLen+0x34>
    {
        return ERR_WRONG_STATE;
 800a9f8:	2321      	movs	r3, #33	; 0x21
 800a9fa:	e004      	b.n	800aa06 <ndefT3TPollerWriteRawMessageLen+0x3e>
    }
    return ndefT3TPollerEndWriteMessage(ctx, rawMessageLen);
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7ff ffa3 	bl	800a94a <ndefT3TPollerEndWriteMessage>
 800aa04:	4603      	mov	r3, r0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <ndefT4TInitializeIsoDepTxRxParam>:
 ******************************************************************************
 */

/*******************************************************************************/
static void ndefT4TInitializeIsoDepTxRxParam(ndefContext *ctx, rfalIsoDepApduTxRxParam *isoDepAPDU)
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b083      	sub	sp, #12
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	6039      	str	r1, [r7, #0]
    /* Initialize the ISO-DEP protocol transceive context */
    isoDepAPDU->txBuf        = &ctx->subCtx.t4t.cApduBuf;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f103 02b7 	add.w	r2, r3, #183	; 0xb7
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	601a      	str	r2, [r3, #0]
    isoDepAPDU->DID          = ctx->device.proto.isoDep.info.DID;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	f883 2020 	strb.w	r2, [r3, #32]
    isoDepAPDU->FWT          = ctx->device.proto.isoDep.info.FWT;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	615a      	str	r2, [r3, #20]
    isoDepAPDU->dFWT         = ctx->device.proto.isoDep.info.dFWT;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	619a      	str	r2, [r3, #24]
    isoDepAPDU->FSx          = ctx->device.proto.isoDep.info.FSx;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	839a      	strh	r2, [r3, #28]
    isoDepAPDU->ourFSx       = RFAL_ISODEP_FSX_KEEP;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	22ff      	movs	r2, #255	; 0xff
 800aa4c:	83da      	strh	r2, [r3, #30]
    isoDepAPDU->rxBuf        = &ctx->subCtx.t4t.rApduBuf;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	609a      	str	r2, [r3, #8]
    isoDepAPDU->tmpBuf       = &ctx->subCtx.t4t.tmpBuf;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f603 02cc 	addw	r2, r3, #2252	; 0x8cc
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	611a      	str	r2, [r3, #16]
}
 800aa62:	bf00      	nop
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bc80      	pop	{r7}
 800aa6a:	4770      	bx	lr

0800aa6c <ndefT4TTransceiveTxRx>:

/*******************************************************************************/
static ReturnCode ndefT4TTransceiveTxRx(ndefContext *ctx, rfalIsoDepApduTxRxParam *isoDepAPDU)
{
 800aa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa6e:	b08b      	sub	sp, #44	; 0x2c
 800aa70:	af06      	add	r7, sp, #24
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
    ReturnCode               ret;

    /* Initialize respAPDU */
    ctx->subCtx.t4t.respAPDU.rApduBuf = &ctx->subCtx.t4t.rApduBuf;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8c3 28c0 	str.w	r2, [r3, #2240]	; 0x8c0
    isoDepAPDU->rxLen                 = &ctx->subCtx.t4t.respAPDU.rcvdLen;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f603 02c4 	addw	r2, r3, #2244	; 0x8c4
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	60da      	str	r2, [r3, #12]

    ret = rfalIsoDepStartApduTransceive(*isoDepAPDU);
 800aa8c:	683e      	ldr	r6, [r7, #0]
 800aa8e:	466d      	mov	r5, sp
 800aa90:	f106 0410 	add.w	r4, r6, #16
 800aa94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa98:	6823      	ldr	r3, [r4, #0]
 800aa9a:	602b      	str	r3, [r5, #0]
 800aa9c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800aaa0:	f004 fa7e 	bl	800efa0 <rfalIsoDepStartApduTransceive>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	81fb      	strh	r3, [r7, #14]
    if( ret == ERR_NONE )
 800aaa8:	89fb      	ldrh	r3, [r7, #14]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d108      	bne.n	800aac0 <ndefT4TTransceiveTxRx+0x54>
    {
        do {
            /* Blocking implementation, T4T may define rather long timeouts */
            rfalWorker();
 800aaae:	f00b faef 	bl	8016090 <rfalWorker>
            ret = rfalIsoDepGetApduTransceiveStatus();
 800aab2:	f004 fac5 	bl	800f040 <rfalIsoDepGetApduTransceiveStatus>
 800aab6:	4603      	mov	r3, r0
 800aab8:	81fb      	strh	r3, [r7, #14]
        } while (ret == ERR_BUSY);
 800aaba:	89fb      	ldrh	r3, [r7, #14]
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d0f6      	beq.n	800aaae <ndefT4TTransceiveTxRx+0x42>
    }
    
    if (ret != ERR_NONE)
 800aac0:	89fb      	ldrh	r3, [r7, #14]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d001      	beq.n	800aaca <ndefT4TTransceiveTxRx+0x5e>
    {
        return ret;
 800aac6:	89fb      	ldrh	r3, [r7, #14]
 800aac8:	e00e      	b.n	800aae8 <ndefT4TTransceiveTxRx+0x7c>
    }

    ret = rfalT4TPollerParseRAPDU(&ctx->subCtx.t4t.respAPDU);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 800aad0:	4618      	mov	r0, r3
 800aad2:	f00d ff38 	bl	8018946 <rfalT4TPollerParseRAPDU>
 800aad6:	4603      	mov	r3, r0
 800aad8:	81fb      	strh	r3, [r7, #14]
    ctx->subCtx.t4t.rApduBodyLen = ctx->subCtx.t4t.respAPDU.rApduBodyLen;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8b3 28c6 	ldrh.w	r2, [r3, #2246]	; 0x8c6
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8a3 29d0 	strh.w	r2, [r3, #2512]	; 0x9d0
    
    return ret;
 800aae6:	89fb      	ldrh	r3, [r7, #14]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3714      	adds	r7, #20
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aaf0 <ndefT4TReadAndParseCCFile>:

/*******************************************************************************/
static ReturnCode ndefT4TReadAndParseCCFile(ndefContext *ctx)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
    
    ReturnCode           ret;
    uint8_t              dataIt;
    
    /* Select CCFILE TS T4T v1.0 7.2.1.3 */
    ret =  ndefT4TPollerSelectFile(ctx, RFAL_T4T_FID_CC);
 800aaf8:	49a0      	ldr	r1, [pc, #640]	; (800ad7c <ndefT4TReadAndParseCCFile+0x28c>)
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f9e6 	bl	800aecc <ndefT4TPollerSelectFile>
 800ab00:	4603      	mov	r3, r0
 800ab02:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800ab04:	89fb      	ldrh	r3, [r7, #14]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d001      	beq.n	800ab0e <ndefT4TReadAndParseCCFile+0x1e>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.4 */
        return ret;
 800ab0a:	89fb      	ldrh	r3, [r7, #14]
 800ab0c:	e180      	b.n	800ae10 <ndefT4TReadAndParseCCFile+0x320>
    }

    /* Read CCFILE TS T4T v1.0 7.2.1.5 */
    /* read CCFILE assuming at least 15 bytes are available. If V3 found will read the extra bytes in a second step */
    ret = ndefT4TPollerReadBinary(ctx, 0U, NDEF_T4T_CCFILEV2_LEN);
 800ab0e:	220f      	movs	r2, #15
 800ab10:	2100      	movs	r1, #0
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 fa19 	bl	800af4a <ndefT4TPollerReadBinary>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800ab1c:	89fb      	ldrh	r3, [r7, #14]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d001      	beq.n	800ab26 <ndefT4TReadAndParseCCFile+0x36>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.6 */
        return ret;
 800ab22:	89fb      	ldrh	r3, [r7, #14]
 800ab24:	e174      	b.n	800ae10 <ndefT4TReadAndParseCCFile+0x320>
    }
    (void)ST_MEMCPY(ctx->ccBuf, ctx->subCtx.t4t.rApduBuf.apdu, NDEF_T4T_CCFILEV2_LEN);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f203 43bd 	addw	r3, r3, #1213	; 0x4bd
 800ab32:	220f      	movs	r2, #15
 800ab34:	4619      	mov	r1, r3
 800ab36:	f00e f95e 	bl	8018df6 <memcpy>
    dataIt = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.ccLen = GETU16(&ctx->ccBuf[dataIt]);
 800ab3e:	7b7b      	ldrb	r3, [r7, #13]
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	4413      	add	r3, r2
 800ab44:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ab48:	021b      	lsls	r3, r3, #8
 800ab4a:	b21a      	sxth	r2, r3
 800ab4c:	7b7b      	ldrb	r3, [r7, #13]
 800ab4e:	3398      	adds	r3, #152	; 0x98
 800ab50:	6879      	ldr	r1, [r7, #4]
 800ab52:	440b      	add	r3, r1
 800ab54:	3304      	adds	r3, #4
 800ab56:	3301      	adds	r3, #1
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	b21b      	sxth	r3, r3
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	b21b      	sxth	r3, r3
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    dataIt += (uint8_t)sizeof(uint16_t);
 800ab68:	7b7b      	ldrb	r3, [r7, #13]
 800ab6a:	3302      	adds	r3, #2
 800ab6c:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.vNo   = ctx->ccBuf[dataIt];
 800ab6e:	7b7b      	ldrb	r3, [r7, #13]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	4413      	add	r3, r2
 800ab74:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    dataIt++;
 800ab7e:	7b7b      	ldrb	r3, [r7, #13]
 800ab80:	3301      	adds	r3, #1
 800ab82:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.mLe   = GETU16(&ctx->ccBuf[dataIt]);
 800ab84:	7b7b      	ldrb	r3, [r7, #13]
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	4413      	add	r3, r2
 800ab8a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ab8e:	021b      	lsls	r3, r3, #8
 800ab90:	b21a      	sxth	r2, r3
 800ab92:	7b7b      	ldrb	r3, [r7, #13]
 800ab94:	3398      	adds	r3, #152	; 0x98
 800ab96:	6879      	ldr	r1, [r7, #4]
 800ab98:	440b      	add	r3, r1
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	b21b      	sxth	r3, r3
 800aba2:	4313      	orrs	r3, r2
 800aba4:	b21b      	sxth	r3, r3
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    dataIt += (uint8_t)sizeof(uint16_t);
 800abae:	7b7b      	ldrb	r3, [r7, #13]
 800abb0:	3302      	adds	r3, #2
 800abb2:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.mLc   = GETU16(&ctx->ccBuf[dataIt]);
 800abb4:	7b7b      	ldrb	r3, [r7, #13]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	4413      	add	r3, r2
 800abba:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800abbe:	021b      	lsls	r3, r3, #8
 800abc0:	b21a      	sxth	r2, r3
 800abc2:	7b7b      	ldrb	r3, [r7, #13]
 800abc4:	3398      	adds	r3, #152	; 0x98
 800abc6:	6879      	ldr	r1, [r7, #4]
 800abc8:	440b      	add	r3, r1
 800abca:	3304      	adds	r3, #4
 800abcc:	3301      	adds	r3, #1
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	b21b      	sxth	r3, r3
 800abd2:	4313      	orrs	r3, r2
 800abd4:	b21b      	sxth	r3, r3
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    dataIt += (uint8_t)sizeof(uint16_t);
 800abde:	7b7b      	ldrb	r3, [r7, #13]
 800abe0:	3302      	adds	r3, #2
 800abe2:	737b      	strb	r3, [r7, #13]
    
    /* TS T4T v1.0 7.2.1.7 verify MLe and MLc are within the valid range */
    if( (ctx->cc.t4t.mLe < NDEF_T4T_MIN_VALID_MLE) || (ctx->cc.t4t.mLc < NDEF_T4T_MIN_VALID_MLC) )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800abea:	2b0e      	cmp	r3, #14
 800abec:	d904      	bls.n	800abf8 <ndefT4TReadAndParseCCFile+0x108>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800abf4:	2b0c      	cmp	r3, #12
 800abf6:	d801      	bhi.n	800abfc <ndefT4TReadAndParseCCFile+0x10c>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800abf8:	2305      	movs	r3, #5
 800abfa:	e109      	b.n	800ae10 <ndefT4TReadAndParseCCFile+0x320>
    }

    ctx->subCtx.t4t.curMLe   = (uint8_t)MIN(ctx->cc.t4t.mLe, NDEF_T4T_MAX_MLE); /* Only short field codind supported */
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800ac02:	2bfe      	cmp	r3, #254	; 0xfe
 800ac04:	d804      	bhi.n	800ac10 <ndefT4TReadAndParseCCFile+0x120>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	e000      	b.n	800ac12 <ndefT4TReadAndParseCCFile+0x122>
 800ac10:	22ff      	movs	r2, #255	; 0xff
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    ctx->subCtx.t4t.curMLc   = (uint8_t)MIN(ctx->cc.t4t.mLc, NDEF_T4T_MAX_MLC); /* Only short field codind supported */
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ac1e:	2bfe      	cmp	r3, #254	; 0xfe
 800ac20:	d804      	bhi.n	800ac2c <ndefT4TReadAndParseCCFile+0x13c>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ac28:	b2da      	uxtb	r2, r3
 800ac2a:	e000      	b.n	800ac2e <ndefT4TReadAndParseCCFile+0x13e>
 800ac2c:	22ff      	movs	r2, #255	; 0xff
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    /* TS T4T v1.0 7.2.1.7 and 4.3.2.4 verify support of mapping version */
    if( ndefMajorVersion(ctx->cc.t4t.vNo) > ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ac3a:	091b      	lsrs	r3, r3, #4
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	d901      	bls.n	800ac46 <ndefT4TReadAndParseCCFile+0x156>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800ac42:	2305      	movs	r3, #5
 800ac44:	e0e4      	b.n	800ae10 <ndefT4TReadAndParseCCFile+0x320>
    }
    if( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ac4c:	091b      	lsrs	r3, r3, #4
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	2b03      	cmp	r3, #3
 800ac52:	d17e      	bne.n	800ad52 <ndefT4TReadAndParseCCFile+0x262>
    {
        /* V3 found: read remainng bytes */
        ret = ndefT4TPollerReadBinary(ctx, NDEF_T4T_CCFILEV2_LEN, NDEF_T4T_CCFILEV3_LEN - NDEF_T4T_CCFILEV2_LEN);
 800ac54:	2202      	movs	r2, #2
 800ac56:	210f      	movs	r1, #15
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 f976 	bl	800af4a <ndefT4TPollerReadBinary>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	81fb      	strh	r3, [r7, #14]
        if( ret != ERR_NONE )
 800ac62:	89fb      	ldrh	r3, [r7, #14]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d001      	beq.n	800ac6c <ndefT4TReadAndParseCCFile+0x17c>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.6 */
            return ret;
 800ac68:	89fb      	ldrh	r3, [r7, #14]
 800ac6a:	e0d1      	b.n	800ae10 <ndefT4TReadAndParseCCFile+0x320>
        }
        (void)ST_MEMCPY(&ctx->ccBuf[NDEF_T4T_CCFILEV2_LEN], ctx->subCtx.t4t.rApduBuf.apdu, NDEF_T4T_CCFILEV3_LEN - NDEF_T4T_CCFILEV2_LEN);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	33ab      	adds	r3, #171	; 0xab
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	f202 42bd 	addw	r2, r2, #1213	; 0x4bd
 800ac76:	8812      	ldrh	r2, [r2, #0]
 800ac78:	b292      	uxth	r2, r2
 800ac7a:	801a      	strh	r2, [r3, #0]
                
        /* TS T4T v1.0 7.2.1.7 verify coding as in table 5 */
        if( ctx->ccBuf[dataIt] != NDEF_T4T_ENDEF_CTLV_T )
 800ac7c:	7b7b      	ldrb	r3, [r7, #13]
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	4413      	add	r3, r2
 800ac82:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ac86:	2b06      	cmp	r3, #6
 800ac88:	d001      	beq.n	800ac8e <ndefT4TReadAndParseCCFile+0x19e>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.8 */
            return ERR_REQUEST;
 800ac8a:	2305      	movs	r3, #5
 800ac8c:	e0c0      	b.n	800ae10 <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 800ac8e:	7b7b      	ldrb	r3, [r7, #13]
 800ac90:	3301      	adds	r3, #1
 800ac92:	737b      	strb	r3, [r7, #13]
        if( ctx->ccBuf[dataIt] < NDEF_T4T_ENDEF_CTLV_L )
 800ac94:	7b7b      	ldrb	r3, [r7, #13]
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	4413      	add	r3, r2
 800ac9a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ac9e:	2b07      	cmp	r3, #7
 800aca0:	d801      	bhi.n	800aca6 <ndefT4TReadAndParseCCFile+0x1b6>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.8 */
            return ERR_REQUEST;
 800aca2:	2305      	movs	r3, #5
 800aca4:	e0b4      	b.n	800ae10 <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 800aca6:	7b7b      	ldrb	r3, [r7, #13]
 800aca8:	3301      	adds	r3, #1
 800acaa:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[0U]   = ctx->ccBuf[dataIt];
 800acac:	7b7b      	ldrb	r3, [r7, #13]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	4413      	add	r3, r2
 800acb2:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        dataIt++;
 800acbc:	7b7b      	ldrb	r3, [r7, #13]
 800acbe:	3301      	adds	r3, #1
 800acc0:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[1U]   = ctx->ccBuf[dataIt];
 800acc2:	7b7b      	ldrb	r3, [r7, #13]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	4413      	add	r3, r2
 800acc8:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        dataIt++;
 800acd2:	7b7b      	ldrb	r3, [r7, #13]
 800acd4:	3301      	adds	r3, #1
 800acd6:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileSize    = GETU32(&ctx->ccBuf[dataIt]);
 800acd8:	7b7b      	ldrb	r3, [r7, #13]
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	4413      	add	r3, r2
 800acde:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ace2:	061a      	lsls	r2, r3, #24
 800ace4:	7b7b      	ldrb	r3, [r7, #13]
 800ace6:	3398      	adds	r3, #152	; 0x98
 800ace8:	6879      	ldr	r1, [r7, #4]
 800acea:	440b      	add	r3, r1
 800acec:	3304      	adds	r3, #4
 800acee:	3301      	adds	r3, #1
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	041b      	lsls	r3, r3, #16
 800acf4:	431a      	orrs	r2, r3
 800acf6:	7b7b      	ldrb	r3, [r7, #13]
 800acf8:	3398      	adds	r3, #152	; 0x98
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	440b      	add	r3, r1
 800acfe:	3304      	adds	r3, #4
 800ad00:	3302      	adds	r3, #2
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	021b      	lsls	r3, r3, #8
 800ad06:	4313      	orrs	r3, r2
 800ad08:	7b7a      	ldrb	r2, [r7, #13]
 800ad0a:	3298      	adds	r2, #152	; 0x98
 800ad0c:	6879      	ldr	r1, [r7, #4]
 800ad0e:	440a      	add	r2, r1
 800ad10:	3204      	adds	r2, #4
 800ad12:	3203      	adds	r2, #3
 800ad14:	7812      	ldrb	r2, [r2, #0]
 800ad16:	431a      	orrs	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        dataIt += (uint8_t)sizeof(uint32_t);
 800ad1e:	7b7b      	ldrb	r3, [r7, #13]
 800ad20:	3304      	adds	r3, #4
 800ad22:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.readAccess  = ctx->ccBuf[dataIt];
 800ad24:	7b7b      	ldrb	r3, [r7, #13]
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	4413      	add	r3, r2
 800ad2a:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        dataIt++;
 800ad34:	7b7b      	ldrb	r3, [r7, #13]
 800ad36:	3301      	adds	r3, #1
 800ad38:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.writeAccess = ctx->ccBuf[dataIt];
 800ad3a:	7b7b      	ldrb	r3, [r7, #13]
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	4413      	add	r3, r2
 800ad40:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        dataIt++;
 800ad4a:	7b7b      	ldrb	r3, [r7, #13]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	737b      	strb	r3, [r7, #13]
 800ad50:	e05d      	b.n	800ae0e <ndefT4TReadAndParseCCFile+0x31e>
    }
    else
    {
        if( ctx->ccBuf[dataIt] != NDEF_T4T_NDEF_CTLV_T )
 800ad52:	7b7b      	ldrb	r3, [r7, #13]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	4413      	add	r3, r2
 800ad58:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ad5c:	2b04      	cmp	r3, #4
 800ad5e:	d001      	beq.n	800ad64 <ndefT4TReadAndParseCCFile+0x274>
        {
            return ERR_REQUEST;
 800ad60:	2305      	movs	r3, #5
 800ad62:	e055      	b.n	800ae10 <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 800ad64:	7b7b      	ldrb	r3, [r7, #13]
 800ad66:	3301      	adds	r3, #1
 800ad68:	737b      	strb	r3, [r7, #13]
        if( ctx->ccBuf[dataIt] < NDEF_T4T_NDEF_CTLV_L )
 800ad6a:	7b7b      	ldrb	r3, [r7, #13]
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	4413      	add	r3, r2
 800ad70:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ad74:	2b05      	cmp	r3, #5
 800ad76:	d803      	bhi.n	800ad80 <ndefT4TReadAndParseCCFile+0x290>
        {
            return ERR_REQUEST;
 800ad78:	2305      	movs	r3, #5
 800ad7a:	e049      	b.n	800ae10 <ndefT4TReadAndParseCCFile+0x320>
 800ad7c:	0801aea0 	.word	0x0801aea0
        }
        dataIt++;
 800ad80:	7b7b      	ldrb	r3, [r7, #13]
 800ad82:	3301      	adds	r3, #1
 800ad84:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[0U]   = ctx->ccBuf[dataIt];
 800ad86:	7b7b      	ldrb	r3, [r7, #13]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        dataIt++;
 800ad96:	7b7b      	ldrb	r3, [r7, #13]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[1U]   = ctx->ccBuf[dataIt];
 800ad9c:	7b7b      	ldrb	r3, [r7, #13]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	4413      	add	r3, r2
 800ada2:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        dataIt++;
 800adac:	7b7b      	ldrb	r3, [r7, #13]
 800adae:	3301      	adds	r3, #1
 800adb0:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileSize    = ndefBytes2Uint16(ctx->ccBuf[dataIt], ctx->ccBuf[dataIt + 1U]);
 800adb2:	7b7b      	ldrb	r3, [r7, #13]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	4413      	add	r3, r2
 800adb8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	021b      	lsls	r3, r3, #8
 800adc0:	b29a      	uxth	r2, r3
 800adc2:	7b7b      	ldrb	r3, [r7, #13]
 800adc4:	3301      	adds	r3, #1
 800adc6:	6879      	ldr	r1, [r7, #4]
 800adc8:	440b      	add	r3, r1
 800adca:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800adce:	b29b      	uxth	r3, r3
 800add0:	4313      	orrs	r3, r2
 800add2:	b29b      	uxth	r3, r3
 800add4:	461a      	mov	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        dataIt += (uint8_t)sizeof(uint16_t);
 800addc:	7b7b      	ldrb	r3, [r7, #13]
 800adde:	3302      	adds	r3, #2
 800ade0:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.readAccess  = ctx->ccBuf[dataIt];
 800ade2:	7b7b      	ldrb	r3, [r7, #13]
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	4413      	add	r3, r2
 800ade8:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        dataIt++;
 800adf2:	7b7b      	ldrb	r3, [r7, #13]
 800adf4:	3301      	adds	r3, #1
 800adf6:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.writeAccess = ctx->ccBuf[dataIt];
 800adf8:	7b7b      	ldrb	r3, [r7, #13]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	4413      	add	r3, r2
 800adfe:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        dataIt++;
 800ae08:	7b7b      	ldrb	r3, [r7, #13]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	737b      	strb	r3, [r7, #13]
    }
    return ERR_NONE;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3710      	adds	r7, #16
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <ndefT4TPollerSelectNdefTagApplication>:

/*******************************************************************************/
ReturnCode ndefT4TPollerSelectNdefTagApplication(ndefContext *ctx)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b08c      	sub	sp, #48	; 0x30
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    static const uint8_t NDEF_T4T_AID_NDEF[]    = {0xD2, 0x76, 0x00, 0x00, 0x85, 0x01, 0x01};  /*!< AID_NDEF v2.0 or higher   T4T 1.0  4.3.3 */
    static const uint8_t NDEF_T4T_AID_NDEF_V1[] = {0xD2, 0x76, 0x00, 0x00, 0x85, 0x01, 0x00};  /*!< AID_NDEF v1.0             T4T 1.0  4.3.3 */

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00b      	beq.n	800ae3e <ndefT4TPollerSelectNdefTagApplication+0x26>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d103      	bne.n	800ae36 <ndefT4TPollerSelectNdefTagApplication+0x1e>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	785b      	ldrb	r3, [r3, #1]
 800ae32:	2b20      	cmp	r3, #32
 800ae34:	d005      	beq.n	800ae42 <ndefT4TPollerSelectNdefTagApplication+0x2a>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d001      	beq.n	800ae42 <ndefT4TPollerSelectNdefTagApplication+0x2a>
    {
        return ERR_PARAM;
 800ae3e:	2307      	movs	r3, #7
 800ae40:	e03b      	b.n	800aeba <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }
    
    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800ae42:	f107 0308 	add.w	r3, r7, #8
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f7ff fde0 	bl	800aa0e <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeSelectAppl(isoDepAPDU.txBuf, NDEF_T4T_AID_NDEF, (uint8_t)sizeof(NDEF_T4T_AID_NDEF), &isoDepAPDU.txBufLen);
 800ae4e:	68b8      	ldr	r0, [r7, #8]
 800ae50:	f107 0308 	add.w	r3, r7, #8
 800ae54:	3304      	adds	r3, #4
 800ae56:	2207      	movs	r2, #7
 800ae58:	491a      	ldr	r1, [pc, #104]	; (800aec4 <ndefT4TPollerSelectNdefTagApplication+0xac>)
 800ae5a:	f00d fdb0 	bl	80189be <rfalT4TPollerComposeSelectAppl>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800ae5e:	f107 0308 	add.w	r3, r7, #8
 800ae62:	4619      	mov	r1, r3
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7ff fe01 	bl	800aa6c <ndefT4TTransceiveTxRx>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    if( ret == ERR_NONE )
 800ae6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d105      	bne.n	800ae80 <ndefT4TPollerSelectNdefTagApplication+0x68>
    {
        /* application v2 or higher found */
        ctx->subCtx.t4t.mv1Flag = false;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
        return ret;
 800ae7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae7e:	e01c      	b.n	800aeba <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }
    
    if( ret != ERR_REQUEST )
 800ae80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	d001      	beq.n	800ae8a <ndefT4TPollerSelectNdefTagApplication+0x72>
    {
        return ret;
 800ae86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae88:	e017      	b.n	800aeba <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }

    /* if v2 application not found, try v1 */
    (void)rfalT4TPollerComposeSelectAppl(isoDepAPDU.txBuf, NDEF_T4T_AID_NDEF_V1, (uint8_t)sizeof(NDEF_T4T_AID_NDEF_V1), &isoDepAPDU.txBufLen);
 800ae8a:	68b8      	ldr	r0, [r7, #8]
 800ae8c:	f107 0308 	add.w	r3, r7, #8
 800ae90:	3304      	adds	r3, #4
 800ae92:	2207      	movs	r2, #7
 800ae94:	490c      	ldr	r1, [pc, #48]	; (800aec8 <ndefT4TPollerSelectNdefTagApplication+0xb0>)
 800ae96:	f00d fd92 	bl	80189be <rfalT4TPollerComposeSelectAppl>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800ae9a:	f107 0308 	add.w	r3, r7, #8
 800ae9e:	4619      	mov	r1, r3
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f7ff fde3 	bl	800aa6c <ndefT4TTransceiveTxRx>
 800aea6:	4603      	mov	r3, r0
 800aea8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    if( ret == ERR_NONE )
 800aeaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d103      	bne.n	800aeb8 <ndefT4TPollerSelectNdefTagApplication+0xa0>
    {
        /* application v1 found */
        ctx->subCtx.t4t.mv1Flag = true;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    }
    return ret;
 800aeb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3730      	adds	r7, #48	; 0x30
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	0801aea4 	.word	0x0801aea4
 800aec8:	0801aeac 	.word	0x0801aeac

0800aecc <ndefT4TPollerSelectFile>:

/*******************************************************************************/
ReturnCode ndefT4TPollerSelectFile(ndefContext *ctx, const uint8_t *fileId)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08c      	sub	sp, #48	; 0x30
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00b      	beq.n	800aef4 <ndefT4TPollerSelectFile+0x28>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d103      	bne.n	800aeec <ndefT4TPollerSelectFile+0x20>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	785b      	ldrb	r3, [r3, #1]
 800aee8:	2b20      	cmp	r3, #32
 800aeea:	d005      	beq.n	800aef8 <ndefT4TPollerSelectFile+0x2c>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d001      	beq.n	800aef8 <ndefT4TPollerSelectFile+0x2c>
    {
        return ERR_PARAM;
 800aef4:	2307      	movs	r3, #7
 800aef6:	e024      	b.n	800af42 <ndefT4TPollerSelectFile+0x76>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800aef8:	f107 0308 	add.w	r3, r7, #8
 800aefc:	4619      	mov	r1, r3
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7ff fd85 	bl	800aa0e <ndefT4TInitializeIsoDepTxRxParam>

    if (ctx->subCtx.t4t.mv1Flag)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d008      	beq.n	800af20 <ndefT4TPollerSelectFile+0x54>
    {
        (void)rfalT4TPollerComposeSelectFileV1Mapping(isoDepAPDU.txBuf, fileId, (uint8_t)sizeof(fileId), &isoDepAPDU.txBufLen);
 800af0e:	68b8      	ldr	r0, [r7, #8]
 800af10:	f107 0308 	add.w	r3, r7, #8
 800af14:	3304      	adds	r3, #4
 800af16:	2204      	movs	r2, #4
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	f00d fdb0 	bl	8018a7e <rfalT4TPollerComposeSelectFileV1Mapping>
 800af1e:	e007      	b.n	800af30 <ndefT4TPollerSelectFile+0x64>
    }
    else
    {
        (void)rfalT4TPollerComposeSelectFile(isoDepAPDU.txBuf, fileId, NDEF_T4T_FID_SIZE, &isoDepAPDU.txBufLen);
 800af20:	68b8      	ldr	r0, [r7, #8]
 800af22:	f107 0308 	add.w	r3, r7, #8
 800af26:	3304      	adds	r3, #4
 800af28:	2202      	movs	r2, #2
 800af2a:	6839      	ldr	r1, [r7, #0]
 800af2c:	f00d fd77 	bl	8018a1e <rfalT4TPollerComposeSelectFile>
    }
       
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800af30:	f107 0308 	add.w	r3, r7, #8
 800af34:	4619      	mov	r1, r3
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f7ff fd98 	bl	800aa6c <ndefT4TTransceiveTxRx>
 800af3c:	4603      	mov	r3, r0
 800af3e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    return ret;
 800af40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800af42:	4618      	mov	r0, r3
 800af44:	3730      	adds	r7, #48	; 0x30
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <ndefT4TPollerReadBinary>:


/*******************************************************************************/
ReturnCode ndefT4TPollerReadBinary(ndefContext *ctx, uint16_t offset, uint8_t len)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b08c      	sub	sp, #48	; 0x30
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	460b      	mov	r3, r1
 800af54:	807b      	strh	r3, [r7, #2]
 800af56:	4613      	mov	r3, r2
 800af58:	707b      	strb	r3, [r7, #1]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLe) || (offset > NDEF_T4T_OFFSET_MAX) )
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d015      	beq.n	800af8c <ndefT4TPollerReadBinary+0x42>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d103      	bne.n	800af70 <ndefT4TPollerReadBinary+0x26>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	785b      	ldrb	r3, [r3, #1]
 800af6c:	2b20      	cmp	r3, #32
 800af6e:	d003      	beq.n	800af78 <ndefT4TPollerReadBinary+0x2e>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d109      	bne.n	800af8c <ndefT4TPollerReadBinary+0x42>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800af7e:	787a      	ldrb	r2, [r7, #1]
 800af80:	429a      	cmp	r2, r3
 800af82:	d803      	bhi.n	800af8c <ndefT4TPollerReadBinary+0x42>
 800af84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	da01      	bge.n	800af90 <ndefT4TPollerReadBinary+0x46>
    {
        return ERR_PARAM;
 800af8c:	2307      	movs	r3, #7
 800af8e:	e016      	b.n	800afbe <ndefT4TPollerReadBinary+0x74>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800af90:	f107 0308 	add.w	r3, r7, #8
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff fd39 	bl	800aa0e <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadData(isoDepAPDU.txBuf, offset, len, &isoDepAPDU.txBufLen);
 800af9c:	68b8      	ldr	r0, [r7, #8]
 800af9e:	f107 0308 	add.w	r3, r7, #8
 800afa2:	3304      	adds	r3, #4
 800afa4:	787a      	ldrb	r2, [r7, #1]
 800afa6:	8879      	ldrh	r1, [r7, #2]
 800afa8:	f00d fd99 	bl	8018ade <rfalT4TPollerComposeReadData>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800afac:	f107 0308 	add.w	r3, r7, #8
 800afb0:	4619      	mov	r1, r3
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7ff fd5a 	bl	800aa6c <ndefT4TTransceiveTxRx>
 800afb8:	4603      	mov	r3, r0
 800afba:	85fb      	strh	r3, [r7, #46]	; 0x2e
   
    return ret;
 800afbc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3730      	adds	r7, #48	; 0x30
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
	...

0800afc8 <ndefT4TPollerReadBinaryODO>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadBinaryODO(ndefContext *ctx, uint32_t offset, uint8_t len)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b08e      	sub	sp, #56	; 0x38
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	4613      	mov	r3, r2
 800afd4:	71fb      	strb	r3, [r7, #7]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLe)  || (offset > NDEF_T4T_ODO_OFFSET_MAX) )
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d015      	beq.n	800b008 <ndefT4TPollerReadBinaryODO+0x40>
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d103      	bne.n	800afec <ndefT4TPollerReadBinaryODO+0x24>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	785b      	ldrb	r3, [r3, #1]
 800afe8:	2b20      	cmp	r3, #32
 800afea:	d003      	beq.n	800aff4 <ndefT4TPollerReadBinaryODO+0x2c>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d109      	bne.n	800b008 <ndefT4TPollerReadBinaryODO+0x40>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800affa:	79fa      	ldrb	r2, [r7, #7]
 800affc:	429a      	cmp	r2, r3
 800affe:	d803      	bhi.n	800b008 <ndefT4TPollerReadBinaryODO+0x40>
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	4a10      	ldr	r2, [pc, #64]	; (800b044 <ndefT4TPollerReadBinaryODO+0x7c>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d901      	bls.n	800b00c <ndefT4TPollerReadBinaryODO+0x44>
    {
        return ERR_PARAM;
 800b008:	2307      	movs	r3, #7
 800b00a:	e016      	b.n	800b03a <ndefT4TPollerReadBinaryODO+0x72>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800b00c:	f107 0310 	add.w	r3, r7, #16
 800b010:	4619      	mov	r1, r3
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f7ff fcfb 	bl	800aa0e <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadDataODO(isoDepAPDU.txBuf, offset, len, &isoDepAPDU.txBufLen);
 800b018:	6938      	ldr	r0, [r7, #16]
 800b01a:	f107 0310 	add.w	r3, r7, #16
 800b01e:	3304      	adds	r3, #4
 800b020:	79fa      	ldrb	r2, [r7, #7]
 800b022:	68b9      	ldr	r1, [r7, #8]
 800b024:	f00d fd84 	bl	8018b30 <rfalT4TPollerComposeReadDataODO>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800b028:	f107 0310 	add.w	r3, r7, #16
 800b02c:	4619      	mov	r1, r3
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f7ff fd1c 	bl	800aa6c <ndefT4TTransceiveTxRx>
 800b034:	4603      	mov	r3, r0
 800b036:	86fb      	strh	r3, [r7, #54]	; 0x36

    return ret;
 800b038:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 }
 800b03a:	4618      	mov	r0, r3
 800b03c:	3738      	adds	r7, #56	; 0x38
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	00fffffe 	.word	0x00fffffe

0800b048 <ndefT4TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b08a      	sub	sp, #40	; 0x28
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
 800b054:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              le;
    uint32_t             lvOffset = offset;
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	623b      	str	r3, [r7, #32]
    uint32_t             lvLen    = len;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	61fb      	str	r3, [r7, #28]
    uint8_t *            lvBuf    = buf;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	61bb      	str	r3, [r7, #24]

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (lvLen == 0U) )
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00e      	beq.n	800b086 <ndefT4TPollerReadBytes+0x3e>
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d103      	bne.n	800b078 <ndefT4TPollerReadBytes+0x30>
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	785b      	ldrb	r3, [r3, #1]
 800b074:	2b20      	cmp	r3, #32
 800b076:	d003      	beq.n	800b080 <ndefT4TPollerReadBytes+0x38>
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d102      	bne.n	800b086 <ndefT4TPollerReadBytes+0x3e>
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d101      	bne.n	800b08a <ndefT4TPollerReadBytes+0x42>
    {
        return ERR_PARAM;
 800b086:	2307      	movs	r3, #7
 800b088:	e06c      	b.n	800b164 <ndefT4TPollerReadBytes+0x11c>
    }
    if( rcvdLen != NULL )
 800b08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <ndefT4TPollerReadBytes+0x4e>
    {
        *rcvdLen = 0U;
 800b090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b092:	2200      	movs	r2, #0
 800b094:	601a      	str	r2, [r3, #0]
    }

    do {
        le = ( lvLen > ctx->subCtx.t4t.curMLe ) ? ctx->subCtx.t4t.curMLe : (uint8_t)lvLen;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800b09c:	461a      	mov	r2, r3
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d903      	bls.n	800b0ac <ndefT4TPollerReadBytes+0x64>
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800b0aa:	e001      	b.n	800b0b0 <ndefT4TPollerReadBytes+0x68>
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	75fb      	strb	r3, [r7, #23]
        if( lvOffset > NDEF_T4T_MV2_MAX_OFSSET )
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
 800b0b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0b8:	d308      	bcc.n	800b0cc <ndefT4TPollerReadBytes+0x84>
        {
            ret = ndefT4TPollerReadBinaryODO(ctx, lvOffset, le);
 800b0ba:	7dfb      	ldrb	r3, [r7, #23]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	6a39      	ldr	r1, [r7, #32]
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f7ff ff81 	bl	800afc8 <ndefT4TPollerReadBinaryODO>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b0ca:	e008      	b.n	800b0de <ndefT4TPollerReadBytes+0x96>
        }
        else
        {
            ret = ndefT4TPollerReadBinary(ctx, (uint16_t)lvOffset, le);
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	7dfa      	ldrb	r2, [r7, #23]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f7ff ff38 	bl	800af4a <ndefT4TPollerReadBinary>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if( ret != ERR_NONE )
 800b0de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <ndefT4TPollerReadBytes+0xa0>
        {
            return ret;
 800b0e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b0e6:	e03d      	b.n	800b164 <ndefT4TPollerReadBytes+0x11c>
        }
        if( ctx->subCtx.t4t.rApduBodyLen == 0U )
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d036      	beq.n	800b160 <ndefT4TPollerReadBytes+0x118>
        {
            break; /* no more to read */
        }
        if( ctx->subCtx.t4t.rApduBodyLen >  lvLen )
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d201      	bcs.n	800b104 <ndefT4TPollerReadBytes+0xbc>
        {
            return ERR_SYSTEM;
 800b100:	2308      	movs	r3, #8
 800b102:	e02f      	b.n	800b164 <ndefT4TPollerReadBytes+0x11c>
        }
        (void)ST_MEMCPY(lvBuf, ctx->subCtx.t4t.rApduBuf.apdu, ctx->subCtx.t4t.rApduBodyLen);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f203 41bd 	addw	r1, r3, #1213	; 0x4bd
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800b110:	461a      	mov	r2, r3
 800b112:	69b8      	ldr	r0, [r7, #24]
 800b114:	f00d fe6f 	bl	8018df6 <memcpy>
        lvBuf     = &lvBuf[ctx->subCtx.t4t.rApduBodyLen];
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800b11e:	461a      	mov	r2, r3
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	4413      	add	r3, r2
 800b124:	61bb      	str	r3, [r7, #24]
        lvOffset += ctx->subCtx.t4t.rApduBodyLen;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800b12c:	461a      	mov	r2, r3
 800b12e:	6a3b      	ldr	r3, [r7, #32]
 800b130:	4413      	add	r3, r2
 800b132:	623b      	str	r3, [r7, #32]
        lvLen    -= ctx->subCtx.t4t.rApduBodyLen;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800b13a:	461a      	mov	r2, r3
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	1a9b      	subs	r3, r3, r2
 800b140:	61fb      	str	r3, [r7, #28]
        if( rcvdLen != NULL )
 800b142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b144:	2b00      	cmp	r3, #0
 800b146:	d007      	beq.n	800b158 <ndefT4TPollerReadBytes+0x110>
        {
            *rcvdLen += ctx->subCtx.t4t.rApduBodyLen;
 800b148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	f8b2 29d0 	ldrh.w	r2, [r2, #2512]	; 0x9d0
 800b152:	441a      	add	r2, r3
 800b154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b156:	601a      	str	r2, [r3, #0]
        }
    } while( lvLen != 0U );
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d19b      	bne.n	800b096 <ndefT4TPollerReadBytes+0x4e>
 800b15e:	e000      	b.n	800b162 <ndefT4TPollerReadBytes+0x11a>
            break; /* no more to read */
 800b160:	bf00      	nop

    return ERR_NONE;
 800b162:	2300      	movs	r3, #0
}
 800b164:	4618      	mov	r0, r3
 800b166:	3728      	adds	r7, #40	; 0x28
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <ndefT4TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT4TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT4TisT4TDevice(dev) )
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00e      	beq.n	800b19a <ndefT4TPollerContextInitialization+0x2e>
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00b      	beq.n	800b19a <ndefT4TPollerContextInitialization+0x2e>
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d103      	bne.n	800b192 <ndefT4TPollerContextInitialization+0x26>
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	785b      	ldrb	r3, [r3, #1]
 800b18e:	2b20      	cmp	r3, #32
 800b190:	d005      	beq.n	800b19e <ndefT4TPollerContextInitialization+0x32>
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d001      	beq.n	800b19e <ndefT4TPollerContextInitialization+0x32>
    {
        return ERR_PARAM;
 800b19a:	2307      	movs	r3, #7
 800b19c:	e012      	b.n	800b1c4 <ndefT4TPollerContextInitialization+0x58>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2278      	movs	r2, #120	; 0x78
 800b1a2:	6839      	ldr	r1, [r7, #0]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f00d fe26 	bl	8018df6 <memcpy>

    ctx->state             = NDEF_STATE_INVALID;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->subCtx.t4t.curMLc = NDEF_T4T_DEFAULT_MLC;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	220d      	movs	r2, #13
 800b1b6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
    ctx->subCtx.t4t.curMLe = NDEF_T4T_DEFAULT_MLE;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	220f      	movs	r2, #15
 800b1be:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    return ERR_NONE;
 800b1c2:	2300      	movs	r3, #0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <ndefT4TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT4TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t*             nLen;
    uint8_t              nlenLen;

    if( info != NULL )
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d011      	beq.n	800b200 <ndefT4TPollerNdefDetect+0x34>
    {
        info->state                = NDEF_STATE_INVALID;
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00b      	beq.n	800b21e <ndefT4TPollerNdefDetect+0x52>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d103      	bne.n	800b216 <ndefT4TPollerNdefDetect+0x4a>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	785b      	ldrb	r3, [r3, #1]
 800b212:	2b20      	cmp	r3, #32
 800b214:	d005      	beq.n	800b222 <ndefT4TPollerNdefDetect+0x56>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d001      	beq.n	800b222 <ndefT4TPollerNdefDetect+0x56>
    {
        return ERR_PARAM;
 800b21e:	2307      	movs	r3, #7
 800b220:	e0fa      	b.n	800b418 <ndefT4TPollerNdefDetect+0x24c>
    }

    ctx->state = NDEF_STATE_INVALID;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Select NDEF Tag application TS T4T v1.0 7.2.1.1 */
    ret =  ndefT4TPollerSelectNdefTagApplication(ctx);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7ff fdf4 	bl	800ae18 <ndefT4TPollerSelectNdefTagApplication>
 800b230:	4603      	mov	r3, r0
 800b232:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800b234:	89fb      	ldrh	r3, [r7, #14]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <ndefT4TPollerNdefDetect+0x72>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.2 */
        return ret; 
 800b23a:	89fb      	ldrh	r3, [r7, #14]
 800b23c:	e0ec      	b.n	800b418 <ndefT4TPollerNdefDetect+0x24c>
    }
    
    /* TS T4T v1.0 7.2.1.3 and following */
    ret = ndefT4TReadAndParseCCFile(ctx);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f7ff fc56 	bl	800aaf0 <ndefT4TReadAndParseCCFile>
 800b244:	4603      	mov	r3, r0
 800b246:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800b248:	89fb      	ldrh	r3, [r7, #14]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d001      	beq.n	800b252 <ndefT4TPollerNdefDetect+0x86>
    {
        return ret;
 800b24e:	89fb      	ldrh	r3, [r7, #14]
 800b250:	e0e2      	b.n	800b418 <ndefT4TPollerNdefDetect+0x24c>
    }
    nlenLen = ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b258:	091b      	lsrs	r3, r3, #4
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	2b03      	cmp	r3, #3
 800b25e:	d101      	bne.n	800b264 <ndefT4TPollerNdefDetect+0x98>
 800b260:	2304      	movs	r3, #4
 800b262:	e000      	b.n	800b266 <ndefT4TPollerNdefDetect+0x9a>
 800b264:	2302      	movs	r3, #2
 800b266:	737b      	strb	r3, [r7, #13]
    
    /* TS T4T v1.0 7.2.1.7 verify file READ access */
    if( !(ndefT4TIsReadAccessGranted(ctx->cc.t4t.readAccess)) )
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00c      	beq.n	800b28c <ndefT4TPollerNdefDetect+0xc0>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b278:	b25b      	sxtb	r3, r3
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	da04      	bge.n	800b288 <ndefT4TPollerNdefDetect+0xbc>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b284:	2bff      	cmp	r3, #255	; 0xff
 800b286:	d101      	bne.n	800b28c <ndefT4TPollerNdefDetect+0xc0>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800b288:	2305      	movs	r3, #5
 800b28a:	e0c5      	b.n	800b418 <ndefT4TPollerNdefDetect+0x24c>
    }
    /* File size need at least be enough to store NLEN or ENLEN */
    if( ctx->cc.t4t.fileSize < nlenLen)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b292:	7b7b      	ldrb	r3, [r7, #13]
 800b294:	429a      	cmp	r2, r3
 800b296:	d201      	bcs.n	800b29c <ndefT4TPollerNdefDetect+0xd0>
    {
        return ERR_REQUEST;
 800b298:	2305      	movs	r3, #5
 800b29a:	e0bd      	b.n	800b418 <ndefT4TPollerNdefDetect+0x24c>
    }

    /* Select NDEF File TS T4T v1.0 7.2.1.9 */
    ret =  ndefT4TPollerSelectFile(ctx, ctx->cc.t4t.fileId);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	3384      	adds	r3, #132	; 0x84
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7ff fe12 	bl	800aecc <ndefT4TPollerSelectFile>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800b2ac:	89fb      	ldrh	r3, [r7, #14]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d001      	beq.n	800b2b6 <ndefT4TPollerNdefDetect+0xea>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.10 */
        return ret;
 800b2b2:	89fb      	ldrh	r3, [r7, #14]
 800b2b4:	e0b0      	b.n	800b418 <ndefT4TPollerNdefDetect+0x24c>
    }
    /* Read NLEN/ENLEN TS T4T v1.0 7.2.1.11 */
    ret = ndefT4TPollerReadBinary(ctx, 0U, nlenLen);
 800b2b6:	7b7b      	ldrb	r3, [r7, #13]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff fe44 	bl	800af4a <ndefT4TPollerReadBinary>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800b2c6:	89fb      	ldrh	r3, [r7, #14]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d001      	beq.n	800b2d0 <ndefT4TPollerNdefDetect+0x104>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.11 */
        return ret;
 800b2cc:	89fb      	ldrh	r3, [r7, #14]
 800b2ce:	e0a3      	b.n	800b418 <ndefT4TPollerNdefDetect+0x24c>
    }
    nLen = ctx->subCtx.t4t.rApduBuf.apdu;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f203 43bd 	addw	r3, r3, #1213	; 0x4bd
 800b2d6:	60bb      	str	r3, [r7, #8]
    ctx->messageLen    = (nlenLen == NDEF_T4T_ENLEN_LEN) ?  GETU32(&nLen[0]) : (uint32_t)ndefBytes2Uint16(nLen[0], nLen[1]);
 800b2d8:	7b7b      	ldrb	r3, [r7, #13]
 800b2da:	2b04      	cmp	r3, #4
 800b2dc:	d111      	bne.n	800b302 <ndefT4TPollerNdefDetect+0x136>
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	061a      	lsls	r2, r3, #24
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	041b      	lsls	r3, r3, #16
 800b2ec:	431a      	orrs	r2, r3
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	3302      	adds	r3, #2
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	021b      	lsls	r3, r3, #8
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	68ba      	ldr	r2, [r7, #8]
 800b2fa:	3203      	adds	r2, #3
 800b2fc:	7812      	ldrb	r2, [r2, #0]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	e00a      	b.n	800b318 <ndefT4TPollerNdefDetect+0x14c>
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	b29b      	uxth	r3, r3
 800b308:	021b      	lsls	r3, r3, #8
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	3301      	adds	r3, #1
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	b29b      	uxth	r3, r3
 800b314:	4313      	orrs	r3, r2
 800b316:	b29b      	uxth	r3, r3
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    ctx->messageOffset = nlenLen;
 800b31e:	7b7a      	ldrb	r2, [r7, #13]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->areaLen       = ctx->cc.t4t.fileSize;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    if ( (ctx->messageLen > (ctx->cc.t4t.fileSize - nlenLen)) || ((ctx->messageLen > 0U) && (ctx->messageLen < NDEF_T4T_MIN_NLEN)) )
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800b33e:	7b7b      	ldrb	r3, [r7, #13]
 800b340:	1acb      	subs	r3, r1, r3
 800b342:	429a      	cmp	r2, r3
 800b344:	d809      	bhi.n	800b35a <ndefT4TPollerNdefDetect+0x18e>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d006      	beq.n	800b35e <ndefT4TPollerNdefDetect+0x192>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b356:	2b02      	cmp	r3, #2
 800b358:	d801      	bhi.n	800b35e <ndefT4TPollerNdefDetect+0x192>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.11 */
        return ERR_REQUEST;
 800b35a:	2305      	movs	r3, #5
 800b35c:	e05c      	b.n	800b418 <ndefT4TPollerNdefDetect+0x24c>
    }
    
    if( ctx->messageLen == 0U ) 
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b364:	2b00      	cmp	r3, #0
 800b366:	d116      	bne.n	800b396 <ndefT4TPollerNdefDetect+0x1ca>
    {
        if( !(ndefT4TIsWriteAccessGranted(ctx->cc.t4t.writeAccess)) )
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00c      	beq.n	800b38c <ndefT4TPollerNdefDetect+0x1c0>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b378:	b25b      	sxtb	r3, r3
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	da04      	bge.n	800b388 <ndefT4TPollerNdefDetect+0x1bc>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b384:	2bff      	cmp	r3, #255	; 0xff
 800b386:	d101      	bne.n	800b38c <ndefT4TPollerNdefDetect+0x1c0>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.11 */
            return ERR_REQUEST;
 800b388:	2305      	movs	r3, #5
 800b38a:	e045      	b.n	800b418 <ndefT4TPollerNdefDetect+0x24c>
        }
        ctx->state = NDEF_STATE_INITIALIZED;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800b394:	e015      	b.n	800b3c2 <ndefT4TPollerNdefDetect+0x1f6>
    }
    else
    {
        ctx->state = (ndefT4TIsWriteAccessGranted(ctx->cc.t4t.writeAccess)) ? NDEF_STATE_READWRITE : NDEF_STATE_READONLY;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00a      	beq.n	800b3b6 <ndefT4TPollerNdefDetect+0x1ea>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b3a6:	b25b      	sxtb	r3, r3
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	da06      	bge.n	800b3ba <ndefT4TPollerNdefDetect+0x1ee>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b3b2:	2bff      	cmp	r3, #255	; 0xff
 800b3b4:	d001      	beq.n	800b3ba <ndefT4TPollerNdefDetect+0x1ee>
 800b3b6:	2202      	movs	r2, #2
 800b3b8:	e000      	b.n	800b3bc <ndefT4TPollerNdefDetect+0x1f0>
 800b3ba:	2203      	movs	r2, #3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    if( info != NULL )
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d026      	beq.n	800b416 <ndefT4TPollerNdefDetect+0x24a>
    {
        info->state                = ctx->state; 
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ndefMajorVersion(ctx->cc.t4t.vNo);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b3d8:	091b      	lsrs	r3, r3, #4
 800b3da:	b2da      	uxtb	r2, r3
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ndefMinorVersion(ctx->cc.t4t.vNo);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b3e6:	f003 030f 	and.w	r3, r3, #15
 800b3ea:	b2da      	uxtb	r2, r3
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = ctx->areaLen - ctx->messageOffset;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b406:	1ad2      	subs	r2, r2, r3
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	60da      	str	r2, [r3, #12]
    }

    return ERR_NONE;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <ndefT4TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b088      	sub	sp, #32
 800b424:	af02      	add	r7, sp, #8
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
 800b42c:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (buf == NULL) )
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00e      	beq.n	800b452 <ndefT4TPollerReadRawMessage+0x32>
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d103      	bne.n	800b444 <ndefT4TPollerReadRawMessage+0x24>
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	785b      	ldrb	r3, [r3, #1]
 800b440:	2b20      	cmp	r3, #32
 800b442:	d003      	beq.n	800b44c <ndefT4TPollerReadRawMessage+0x2c>
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d102      	bne.n	800b452 <ndefT4TPollerReadRawMessage+0x32>
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d101      	bne.n	800b456 <ndefT4TPollerReadRawMessage+0x36>
    {
        return ERR_PARAM;
 800b452:	2307      	movs	r3, #7
 800b454:	e024      	b.n	800b4a0 <ndefT4TPollerReadRawMessage+0x80>
    }
    /* TS T4T v1.0 7.2.2.1: T4T NDEF Detect should have been called before NDEF read procedure */
    /* Warning: current selected file must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T4T v1.0 7.3.3.2: check presence of NDEF message */
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d801      	bhi.n	800b464 <ndefT4TPollerReadRawMessage+0x44>
    {
        /* Conclude procedure TS T4T v1.0 7.2.2.2 */
        return ERR_WRONG_STATE;
 800b460:	2321      	movs	r3, #33	; 0x21
 800b462:	e01d      	b.n	800b4a0 <ndefT4TPollerReadRawMessage+0x80>
    }

    if( ctx->messageLen > bufLen )
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d201      	bcs.n	800b474 <ndefT4TPollerReadRawMessage+0x54>
    {
        return ERR_NOMEM;
 800b470:	2301      	movs	r3, #1
 800b472:	e015      	b.n	800b4a0 <ndefT4TPollerReadRawMessage+0x80>
    }

    /* TS T4T v1.0 7.3.3.3: read the NDEF message */
    ret = ndefT4TPollerReadBytes(ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	9300      	str	r3, [sp, #0]
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	f7ff fdde 	bl	800b048 <ndefT4TPollerReadBytes>
 800b48c:	4603      	mov	r3, r0
 800b48e:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800b490:	8afb      	ldrh	r3, [r7, #22]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d003      	beq.n	800b49e <ndefT4TPollerReadRawMessage+0x7e>
    {
        ctx->state = NDEF_STATE_INVALID;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2200      	movs	r2, #0
 800b49a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }

    return ret;
 800b49e:	8afb      	ldrh	r3, [r7, #22]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <ndefT4TPollerWriteBinary>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBinary(ndefContext *ctx, uint16_t offset, const uint8_t *data, uint8_t len)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b090      	sub	sp, #64	; 0x40
 800b4ac:	af02      	add	r7, sp, #8
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	607a      	str	r2, [r7, #4]
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	817b      	strh	r3, [r7, #10]
 800b4b8:	4613      	mov	r3, r2
 800b4ba:	727b      	strb	r3, [r7, #9]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLc) || (offset > NDEF_T4T_OFFSET_MAX) )
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d015      	beq.n	800b4ee <ndefT4TPollerWriteBinary+0x46>
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d103      	bne.n	800b4d2 <ndefT4TPollerWriteBinary+0x2a>
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	785b      	ldrb	r3, [r3, #1]
 800b4ce:	2b20      	cmp	r3, #32
 800b4d0:	d003      	beq.n	800b4da <ndefT4TPollerWriteBinary+0x32>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d109      	bne.n	800b4ee <ndefT4TPollerWriteBinary+0x46>
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b4e0:	7a7a      	ldrb	r2, [r7, #9]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d803      	bhi.n	800b4ee <ndefT4TPollerWriteBinary+0x46>
 800b4e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	da01      	bge.n	800b4f2 <ndefT4TPollerWriteBinary+0x4a>
    {
        return ERR_PARAM;
 800b4ee:	2307      	movs	r3, #7
 800b4f0:	e019      	b.n	800b526 <ndefT4TPollerWriteBinary+0x7e>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800b4f2:	f107 0310 	add.w	r3, r7, #16
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f7ff fa88 	bl	800aa0e <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeWriteData(isoDepAPDU.txBuf, offset, data, len, &isoDepAPDU.txBufLen);
 800b4fe:	6938      	ldr	r0, [r7, #16]
 800b500:	7a7a      	ldrb	r2, [r7, #9]
 800b502:	8979      	ldrh	r1, [r7, #10]
 800b504:	f107 0310 	add.w	r3, r7, #16
 800b508:	3304      	adds	r3, #4
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	4613      	mov	r3, r2
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	f00d fb6f 	bl	8018bf2 <rfalT4TPollerComposeWriteData>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800b514:	f107 0310 	add.w	r3, r7, #16
 800b518:	4619      	mov	r1, r3
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f7ff faa6 	bl	800aa6c <ndefT4TTransceiveTxRx>
 800b520:	4603      	mov	r3, r0
 800b522:	86fb      	strh	r3, [r7, #54]	; 0x36
   
    return ret;
 800b524:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800b526:	4618      	mov	r0, r3
 800b528:	3738      	adds	r7, #56	; 0x38
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
	...

0800b530 <ndefT4TPollerWriteBinaryODO>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBinaryODO(ndefContext *ctx, uint32_t offset, const uint8_t *data, uint8_t len)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b090      	sub	sp, #64	; 0x40
 800b534:	af02      	add	r7, sp, #8
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
 800b53c:	70fb      	strb	r3, [r7, #3]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLc) || (offset > NDEF_T4T_ODO_OFFSET_MAX) )
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d015      	beq.n	800b570 <ndefT4TPollerWriteBinaryODO+0x40>
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d103      	bne.n	800b554 <ndefT4TPollerWriteBinaryODO+0x24>
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	785b      	ldrb	r3, [r3, #1]
 800b550:	2b20      	cmp	r3, #32
 800b552:	d003      	beq.n	800b55c <ndefT4TPollerWriteBinaryODO+0x2c>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d109      	bne.n	800b570 <ndefT4TPollerWriteBinaryODO+0x40>
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b562:	78fa      	ldrb	r2, [r7, #3]
 800b564:	429a      	cmp	r2, r3
 800b566:	d803      	bhi.n	800b570 <ndefT4TPollerWriteBinaryODO+0x40>
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	4a11      	ldr	r2, [pc, #68]	; (800b5b0 <ndefT4TPollerWriteBinaryODO+0x80>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d901      	bls.n	800b574 <ndefT4TPollerWriteBinaryODO+0x44>
    {
        return ERR_PARAM;
 800b570:	2307      	movs	r3, #7
 800b572:	e019      	b.n	800b5a8 <ndefT4TPollerWriteBinaryODO+0x78>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800b574:	f107 0310 	add.w	r3, r7, #16
 800b578:	4619      	mov	r1, r3
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f7ff fa47 	bl	800aa0e <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeWriteDataODO(isoDepAPDU.txBuf, offset, data, len, &isoDepAPDU.txBufLen);
 800b580:	6938      	ldr	r0, [r7, #16]
 800b582:	78fa      	ldrb	r2, [r7, #3]
 800b584:	f107 0310 	add.w	r3, r7, #16
 800b588:	3304      	adds	r3, #4
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	4613      	mov	r3, r2
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	68b9      	ldr	r1, [r7, #8]
 800b592:	f00d fb62 	bl	8018c5a <rfalT4TPollerComposeWriteDataODO>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800b596:	f107 0310 	add.w	r3, r7, #16
 800b59a:	4619      	mov	r1, r3
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	f7ff fa65 	bl	800aa6c <ndefT4TTransceiveTxRx>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	86fb      	strh	r3, [r7, #54]	; 0x36

    return ret;
 800b5a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3738      	adds	r7, #56	; 0x38
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	00fffffe 	.word	0x00fffffe

0800b5b4 <ndefT4TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b088      	sub	sp, #32
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
 800b5c0:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              lc;
    uint32_t             lvOffset = offset;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	61bb      	str	r3, [r7, #24]
    uint32_t             lvLen    = len;
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	617b      	str	r3, [r7, #20]
    const uint8_t *      lvBuf    = buf;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	613b      	str	r3, [r7, #16]

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (lvLen == 0U) )
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00e      	beq.n	800b5f2 <ndefT4TPollerWriteBytes+0x3e>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d103      	bne.n	800b5e4 <ndefT4TPollerWriteBytes+0x30>
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	785b      	ldrb	r3, [r3, #1]
 800b5e0:	2b20      	cmp	r3, #32
 800b5e2:	d003      	beq.n	800b5ec <ndefT4TPollerWriteBytes+0x38>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d102      	bne.n	800b5f2 <ndefT4TPollerWriteBytes+0x3e>
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d101      	bne.n	800b5f6 <ndefT4TPollerWriteBytes+0x42>
    {
        return ERR_PARAM;
 800b5f2:	2307      	movs	r3, #7
 800b5f4:	e048      	b.n	800b688 <ndefT4TPollerWriteBytes+0xd4>
    }

    do {

        if( lvOffset > NDEF_T4T_MV2_MAX_OFSSET )
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5fc:	d318      	bcc.n	800b630 <ndefT4TPollerWriteBytes+0x7c>
        {
            lc = ( lvLen > ((uint32_t)ctx->subCtx.t4t.curMLc - NDEF_T4T_WRITE_ODO_PREFIX_SIZE) ) ? (uint8_t)(ctx->subCtx.t4t.curMLc - NDEF_T4T_WRITE_ODO_PREFIX_SIZE) : (uint8_t)lvLen;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b604:	3b07      	subs	r3, #7
 800b606:	697a      	ldr	r2, [r7, #20]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d905      	bls.n	800b618 <ndefT4TPollerWriteBytes+0x64>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b612:	3b07      	subs	r3, #7
 800b614:	b2db      	uxtb	r3, r3
 800b616:	e001      	b.n	800b61c <ndefT4TPollerWriteBytes+0x68>
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	777b      	strb	r3, [r7, #29]
            ret = ndefT4TPollerWriteBinaryODO(ctx, lvOffset, lvBuf, lc);
 800b61e:	7f7b      	ldrb	r3, [r7, #29]
 800b620:	693a      	ldr	r2, [r7, #16]
 800b622:	69b9      	ldr	r1, [r7, #24]
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f7ff ff83 	bl	800b530 <ndefT4TPollerWriteBinaryODO>
 800b62a:	4603      	mov	r3, r0
 800b62c:	83fb      	strh	r3, [r7, #30]
 800b62e:	e016      	b.n	800b65e <ndefT4TPollerWriteBytes+0xaa>
        }
        else
        {
            lc = ( lvLen > ctx->subCtx.t4t.curMLc ) ? ctx->subCtx.t4t.curMLc : (uint8_t)lvLen;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b636:	461a      	mov	r2, r3
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d903      	bls.n	800b646 <ndefT4TPollerWriteBytes+0x92>
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b644:	e001      	b.n	800b64a <ndefT4TPollerWriteBytes+0x96>
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	777b      	strb	r3, [r7, #29]
            ret = ndefT4TPollerWriteBinary(ctx, (uint16_t)lvOffset, lvBuf, lc);
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	b299      	uxth	r1, r3
 800b650:	7f7b      	ldrb	r3, [r7, #29]
 800b652:	693a      	ldr	r2, [r7, #16]
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f7ff ff27 	bl	800b4a8 <ndefT4TPollerWriteBinary>
 800b65a:	4603      	mov	r3, r0
 800b65c:	83fb      	strh	r3, [r7, #30]
        }
        if( ret != ERR_NONE )
 800b65e:	8bfb      	ldrh	r3, [r7, #30]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <ndefT4TPollerWriteBytes+0xb4>
        {
            return ret;
 800b664:	8bfb      	ldrh	r3, [r7, #30]
 800b666:	e00f      	b.n	800b688 <ndefT4TPollerWriteBytes+0xd4>
        }
        lvBuf     = &lvBuf[lc];
 800b668:	7f7b      	ldrb	r3, [r7, #29]
 800b66a:	693a      	ldr	r2, [r7, #16]
 800b66c:	4413      	add	r3, r2
 800b66e:	613b      	str	r3, [r7, #16]
        lvOffset += lc;
 800b670:	7f7b      	ldrb	r3, [r7, #29]
 800b672:	69ba      	ldr	r2, [r7, #24]
 800b674:	4413      	add	r3, r2
 800b676:	61bb      	str	r3, [r7, #24]
        lvLen    -= lc; 
 800b678:	7f7b      	ldrb	r3, [r7, #29]
 800b67a:	697a      	ldr	r2, [r7, #20]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	617b      	str	r3, [r7, #20]
    } while( lvLen != 0U );
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d1b7      	bne.n	800b5f6 <ndefT4TPollerWriteBytes+0x42>

    return ERR_NONE;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3720      	adds	r7, #32
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <ndefT4TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t              buf[NDEF_T4T_ENLEN_LEN];
    uint8_t              dataIt;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00b      	beq.n	800b6b8 <ndefT4TPollerWriteRawMessageLen+0x28>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d103      	bne.n	800b6b0 <ndefT4TPollerWriteRawMessageLen+0x20>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	785b      	ldrb	r3, [r3, #1]
 800b6ac:	2b20      	cmp	r3, #32
 800b6ae:	d005      	beq.n	800b6bc <ndefT4TPollerWriteRawMessageLen+0x2c>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d001      	beq.n	800b6bc <ndefT4TPollerWriteRawMessageLen+0x2c>
    {
        return ERR_PARAM;
 800b6b8:	2307      	movs	r3, #7
 800b6ba:	e065      	b.n	800b788 <ndefT4TPollerWriteRawMessageLen+0xf8>
    }
    
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d006      	beq.n	800b6d4 <ndefT4TPollerWriteRawMessageLen+0x44>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b6cc:	2b02      	cmp	r3, #2
 800b6ce:	d001      	beq.n	800b6d4 <ndefT4TPollerWriteRawMessageLen+0x44>
    {
        return ERR_WRONG_STATE;
 800b6d0:	2321      	movs	r3, #33	; 0x21
 800b6d2:	e059      	b.n	800b788 <ndefT4TPollerWriteRawMessageLen+0xf8>
    }

    dataIt = 0U;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	73fb      	strb	r3, [r7, #15]
    if( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b6de:	091b      	lsrs	r3, r3, #4
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b03      	cmp	r3, #3
 800b6e4:	d12f      	bne.n	800b746 <ndefT4TPollerWriteRawMessageLen+0xb6>
    {
        buf[dataIt] = (uint8_t)(rawMessageLen >> 24U);
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	0e1a      	lsrs	r2, r3, #24
 800b6ea:	7bfb      	ldrb	r3, [r7, #15]
 800b6ec:	b2d2      	uxtb	r2, r2
 800b6ee:	f107 0110 	add.w	r1, r7, #16
 800b6f2:	440b      	add	r3, r1
 800b6f4:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen >> 16U);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	0c1a      	lsrs	r2, r3, #16
 800b702:	7bfb      	ldrb	r3, [r7, #15]
 800b704:	b2d2      	uxtb	r2, r2
 800b706:	f107 0110 	add.w	r1, r7, #16
 800b70a:	440b      	add	r3, r1
 800b70c:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800b710:	7bfb      	ldrb	r3, [r7, #15]
 800b712:	3301      	adds	r3, #1
 800b714:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen >>  8U);
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	0a1a      	lsrs	r2, r3, #8
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
 800b71c:	b2d2      	uxtb	r2, r2
 800b71e:	f107 0110 	add.w	r1, r7, #16
 800b722:	440b      	add	r3, r1
 800b724:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800b728:	7bfb      	ldrb	r3, [r7, #15]
 800b72a:	3301      	adds	r3, #1
 800b72c:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen);
 800b72e:	7bfb      	ldrb	r3, [r7, #15]
 800b730:	683a      	ldr	r2, [r7, #0]
 800b732:	b2d2      	uxtb	r2, r2
 800b734:	f107 0110 	add.w	r1, r7, #16
 800b738:	440b      	add	r3, r1
 800b73a:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800b73e:	7bfb      	ldrb	r3, [r7, #15]
 800b740:	3301      	adds	r3, #1
 800b742:	73fb      	strb	r3, [r7, #15]
 800b744:	e016      	b.n	800b774 <ndefT4TPollerWriteRawMessageLen+0xe4>
    }
    else
    {
        buf[dataIt] = (uint8_t)(rawMessageLen >>  8U);
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	0a1a      	lsrs	r2, r3, #8
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
 800b74c:	b2d2      	uxtb	r2, r2
 800b74e:	f107 0110 	add.w	r1, r7, #16
 800b752:	440b      	add	r3, r1
 800b754:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800b758:	7bfb      	ldrb	r3, [r7, #15]
 800b75a:	3301      	adds	r3, #1
 800b75c:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen);
 800b75e:	7bfb      	ldrb	r3, [r7, #15]
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	b2d2      	uxtb	r2, r2
 800b764:	f107 0110 	add.w	r1, r7, #16
 800b768:	440b      	add	r3, r1
 800b76a:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800b76e:	7bfb      	ldrb	r3, [r7, #15]
 800b770:	3301      	adds	r3, #1
 800b772:	73fb      	strb	r3, [r7, #15]
    }

    ret = ndefT4TPollerWriteBytes(ctx, 0U, buf, dataIt);
 800b774:	7bfb      	ldrb	r3, [r7, #15]
 800b776:	f107 0208 	add.w	r2, r7, #8
 800b77a:	2100      	movs	r1, #0
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f7ff ff19 	bl	800b5b4 <ndefT4TPollerWriteBytes>
 800b782:	4603      	mov	r3, r0
 800b784:	81bb      	strh	r3, [r7, #12]
    return ret;
 800b786:	89bb      	ldrh	r3, [r7, #12]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <ndefT4TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b086      	sub	sp, #24
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
    ReturnCode           ret;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d011      	beq.n	800b7c6 <ndefT4TPollerWriteRawMessage+0x36>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d103      	bne.n	800b7b2 <ndefT4TPollerWriteRawMessage+0x22>
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	785b      	ldrb	r3, [r3, #1]
 800b7ae:	2b20      	cmp	r3, #32
 800b7b0:	d003      	beq.n	800b7ba <ndefT4TPollerWriteRawMessage+0x2a>
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d105      	bne.n	800b7c6 <ndefT4TPollerWriteRawMessage+0x36>
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d104      	bne.n	800b7ca <ndefT4TPollerWriteRawMessage+0x3a>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <ndefT4TPollerWriteRawMessage+0x3a>
    {
        return ERR_PARAM;
 800b7c6:	2307      	movs	r3, #7
 800b7c8:	e04b      	b.n	800b862 <ndefT4TPollerWriteRawMessage+0xd2>

    /* TS T4T v1.0 7.2.3.1: T4T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current selected file must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T4T v1.0 7.3.3.2: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d006      	beq.n	800b7e2 <ndefT4TPollerWriteRawMessage+0x52>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d001      	beq.n	800b7e2 <ndefT4TPollerWriteRawMessage+0x52>
    {
        /* Conclude procedure TS T4T v1.0 7.2.3.2 */
        return ERR_WRONG_STATE;
 800b7de:	2321      	movs	r3, #33	; 0x21
 800b7e0:	e03f      	b.n	800b862 <ndefT4TPollerWriteRawMessage+0xd2>

    /* TS T4T v1.0 7.2.3.3: check Mapping Version    */
   /* Done automatically inside underlying fucntions */
    
    /* TS T4T v1.0 7.2.3.4/8 verify length of the NDEF message */
    ret = ndefT4TPollerCheckAvailableSpace(ctx, bufLen);
 800b7e2:	6879      	ldr	r1, [r7, #4]
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f000 f8dd 	bl	800b9a4 <ndefT4TPollerCheckAvailableSpace>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800b7ee:	8afb      	ldrh	r3, [r7, #22]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d001      	beq.n	800b7f8 <ndefT4TPollerWriteRawMessage+0x68>
    {
        /* Conclude procedure TS T4T v1.0 7.2.3.4/8 */
        return ERR_PARAM;
 800b7f4:	2307      	movs	r3, #7
 800b7f6:	e034      	b.n	800b862 <ndefT4TPollerWriteRawMessage+0xd2>
    }

    /* TS T4T v1.0 7.2.3.5/9 Write value 0000h in NLEN field (resp. 00000000h in ENLEN field) */
    ret = ndefT4TPollerBeginWriteMessage(ctx, bufLen);
 800b7f8:	6879      	ldr	r1, [r7, #4]
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 f90a 	bl	800ba14 <ndefT4TPollerBeginWriteMessage>
 800b800:	4603      	mov	r3, r0
 800b802:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800b804:	8afb      	ldrh	r3, [r7, #22]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d005      	beq.n	800b816 <ndefT4TPollerWriteRawMessage+0x86>
    {
        ctx->state = NDEF_STATE_INVALID;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure TS T4T v1.0 7.2.3.5/9 */
        return ret;
 800b812:	8afb      	ldrh	r3, [r7, #22]
 800b814:	e025      	b.n	800b862 <ndefT4TPollerWriteRawMessage+0xd2>
    }

    if( bufLen != 0U )
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d021      	beq.n	800b860 <ndefT4TPollerWriteRawMessage+0xd0>
    {
        /* TS T4T v1.0 7.2.3.6/10 Write NDEF message) */
        ret = ndefT4TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen); 
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f7ff fec4 	bl	800b5b4 <ndefT4TPollerWriteBytes>
 800b82c:	4603      	mov	r3, r0
 800b82e:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800b830:	8afb      	ldrh	r3, [r7, #22]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d005      	beq.n	800b842 <ndefT4TPollerWriteRawMessage+0xb2>
        {
            /* Conclude procedure TS T4T v1.0 7.2.3.6/10 */
            ctx->state = NDEF_STATE_INVALID;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800b83e:	8afb      	ldrh	r3, [r7, #22]
 800b840:	e00f      	b.n	800b862 <ndefT4TPollerWriteRawMessage+0xd2>
        }

        /* TS T4T v1.0 7.2.3.7/11 Write value length in NLEN field (resp. in ENLEN field) */
        ret = ndefT4TPollerEndWriteMessage(ctx, bufLen);
 800b842:	6879      	ldr	r1, [r7, #4]
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f000 f91f 	bl	800ba88 <ndefT4TPollerEndWriteMessage>
 800b84a:	4603      	mov	r3, r0
 800b84c:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800b84e:	8afb      	ldrh	r3, [r7, #22]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d005      	beq.n	800b860 <ndefT4TPollerWriteRawMessage+0xd0>
        {
            /* Conclude procedure TS T4T v1.0 7.2.3.7/11 */
            ctx->state = NDEF_STATE_INVALID;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2200      	movs	r2, #0
 800b858:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800b85c:	8afb      	ldrh	r3, [r7, #22]
 800b85e:	e000      	b.n	800b862 <ndefT4TPollerWriteRawMessage+0xd2>
        }
    }

    return ret;
 800b860:	8afb      	ldrh	r3, [r7, #22]
}
 800b862:	4618      	mov	r0, r3
 800b864:	3718      	adds	r7, #24
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <ndefT4TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT4TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b086      	sub	sp, #24
 800b86e:	af00      	add	r7, sp, #0
 800b870:	60f8      	str	r0, [r7, #12]
 800b872:	60b9      	str	r1, [r7, #8]
 800b874:	607a      	str	r2, [r7, #4]
    uint8_t              buf[NDEF_T4T_ENLEN_LEN];

    NO_WARNING(cc);
    NO_WARNING(options);

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device)  )
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00b      	beq.n	800b894 <ndefT4TPollerTagFormat+0x2a>
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d103      	bne.n	800b88c <ndefT4TPollerTagFormat+0x22>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	785b      	ldrb	r3, [r3, #1]
 800b888:	2b20      	cmp	r3, #32
 800b88a:	d005      	beq.n	800b898 <ndefT4TPollerTagFormat+0x2e>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d001      	beq.n	800b898 <ndefT4TPollerTagFormat+0x2e>
    {
        return ERR_PARAM;
 800b894:	2307      	movs	r3, #7
 800b896:	e03a      	b.n	800b90e <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TPollerSelectNdefTagApplication(ctx);
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f7ff fabd 	bl	800ae18 <ndefT4TPollerSelectNdefTagApplication>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800b8a2:	8afb      	ldrh	r3, [r7, #22]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d001      	beq.n	800b8ac <ndefT4TPollerTagFormat+0x42>
    {
        return ret; 
 800b8a8:	8afb      	ldrh	r3, [r7, #22]
 800b8aa:	e030      	b.n	800b90e <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TReadAndParseCCFile(ctx);
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f7ff f91f 	bl	800aaf0 <ndefT4TReadAndParseCCFile>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800b8b6:	8afb      	ldrh	r3, [r7, #22]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d001      	beq.n	800b8c0 <ndefT4TPollerTagFormat+0x56>
    {
        return ret;
 800b8bc:	8afb      	ldrh	r3, [r7, #22]
 800b8be:	e026      	b.n	800b90e <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TPollerSelectFile(ctx, ctx->cc.t4t.fileId);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	3384      	adds	r3, #132	; 0x84
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f7ff fb00 	bl	800aecc <ndefT4TPollerSelectFile>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800b8d0:	8afb      	ldrh	r3, [r7, #22]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d001      	beq.n	800b8da <ndefT4TPollerTagFormat+0x70>
    {
        return ret;
 800b8d6:	8afb      	ldrh	r3, [r7, #22]
 800b8d8:	e019      	b.n	800b90e <ndefT4TPollerTagFormat+0xa4>
    }
    (void)ST_MEMSET(buf, 0x00, sizeof(buf));
 800b8da:	f107 0310 	add.w	r3, r7, #16
 800b8de:	2204      	movs	r2, #4
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f00d faab 	bl	8018e3e <memset>
    ret = ndefT4TPollerWriteBytes(ctx, 0U, buf, ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b8ee:	091b      	lsrs	r3, r3, #4
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	d101      	bne.n	800b8fa <ndefT4TPollerTagFormat+0x90>
 800b8f6:	2304      	movs	r3, #4
 800b8f8:	e000      	b.n	800b8fc <ndefT4TPollerTagFormat+0x92>
 800b8fa:	2302      	movs	r3, #2
 800b8fc:	f107 0210 	add.w	r2, r7, #16
 800b900:	2100      	movs	r1, #0
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f7ff fe56 	bl	800b5b4 <ndefT4TPollerWriteBytes>
 800b908:	4603      	mov	r3, r0
 800b90a:	82fb      	strh	r3, [r7, #22]
    return ret;
 800b90c:	8afb      	ldrh	r3, [r7, #22]
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3718      	adds	r7, #24
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <ndefT4TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT4TPollerCheckPresence(ndefContext *ctx)
{
 800b916:	b5b0      	push	{r4, r5, r7, lr}
 800b918:	b092      	sub	sp, #72	; 0x48
 800b91a:	af06      	add	r7, sp, #24
 800b91c:	6078      	str	r0, [r7, #4]
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    ReturnCode               ret;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00b      	beq.n	800b93c <ndefT4TPollerCheckPresence+0x26>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d103      	bne.n	800b934 <ndefT4TPollerCheckPresence+0x1e>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	785b      	ldrb	r3, [r3, #1]
 800b930:	2b20      	cmp	r3, #32
 800b932:	d005      	beq.n	800b940 <ndefT4TPollerCheckPresence+0x2a>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d001      	beq.n	800b940 <ndefT4TPollerCheckPresence+0x2a>
    {
        return ERR_PARAM;
 800b93c:	2307      	movs	r3, #7
 800b93e:	e02d      	b.n	800b99c <ndefT4TPollerCheckPresence+0x86>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800b940:	f107 0308 	add.w	r3, r7, #8
 800b944:	4619      	mov	r1, r3
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7ff f861 	bl	800aa0e <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadData(isoDepAPDU.txBuf, 0, 1, &isoDepAPDU.txBufLen);
 800b94c:	68b8      	ldr	r0, [r7, #8]
 800b94e:	f107 0308 	add.w	r3, r7, #8
 800b952:	3304      	adds	r3, #4
 800b954:	2201      	movs	r2, #1
 800b956:	2100      	movs	r1, #0
 800b958:	f00d f8c1 	bl	8018ade <rfalT4TPollerComposeReadData>

    /* Initialize respAPDU */
    ctx->subCtx.t4t.respAPDU.rApduBuf = &ctx->subCtx.t4t.rApduBuf;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8c3 28c0 	str.w	r2, [r3, #2240]	; 0x8c0
    isoDepAPDU.rxLen                  = &ctx->subCtx.t4t.respAPDU.rcvdLen;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 800b96e:	617b      	str	r3, [r7, #20]

    (void)rfalIsoDepStartApduTransceive(isoDepAPDU);
 800b970:	466d      	mov	r5, sp
 800b972:	f107 0418 	add.w	r4, r7, #24
 800b976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	602b      	str	r3, [r5, #0]
 800b97e:	f107 0308 	add.w	r3, r7, #8
 800b982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b984:	f003 fb0c 	bl	800efa0 <rfalIsoDepStartApduTransceive>
    do {
        /* Blocking implementation, T4T may define rather long timeouts */
        rfalWorker();
 800b988:	f00a fb82 	bl	8016090 <rfalWorker>
        ret = rfalIsoDepGetApduTransceiveStatus();
 800b98c:	f003 fb58 	bl	800f040 <rfalIsoDepGetApduTransceiveStatus>
 800b990:	4603      	mov	r3, r0
 800b992:	85fb      	strh	r3, [r7, #46]	; 0x2e
    } while (ret == ERR_BUSY);
 800b994:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b996:	2b02      	cmp	r3, #2
 800b998:	d0f6      	beq.n	800b988 <ndefT4TPollerCheckPresence+0x72>

    return ret;
 800b99a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3730      	adds	r7, #48	; 0x30
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bdb0      	pop	{r4, r5, r7, pc}

0800b9a4 <ndefT4TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT4TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
    uint8_t              nlenLen;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00b      	beq.n	800b9cc <ndefT4TPollerCheckAvailableSpace+0x28>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d103      	bne.n	800b9c4 <ndefT4TPollerCheckAvailableSpace+0x20>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	785b      	ldrb	r3, [r3, #1]
 800b9c0:	2b20      	cmp	r3, #32
 800b9c2:	d005      	beq.n	800b9d0 <ndefT4TPollerCheckAvailableSpace+0x2c>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d001      	beq.n	800b9d0 <ndefT4TPollerCheckAvailableSpace+0x2c>
    {
        return ERR_PARAM;
 800b9cc:	2307      	movs	r3, #7
 800b9ce:	e01c      	b.n	800ba0a <ndefT4TPollerCheckAvailableSpace+0x66>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d101      	bne.n	800b9de <ndefT4TPollerCheckAvailableSpace+0x3a>
    {
        return ERR_WRONG_STATE;
 800b9da:	2321      	movs	r3, #33	; 0x21
 800b9dc:	e015      	b.n	800ba0a <ndefT4TPollerCheckAvailableSpace+0x66>
    }

    nlenLen = ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b9e4:	091b      	lsrs	r3, r3, #4
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	d101      	bne.n	800b9f0 <ndefT4TPollerCheckAvailableSpace+0x4c>
 800b9ec:	2304      	movs	r3, #4
 800b9ee:	e000      	b.n	800b9f2 <ndefT4TPollerCheckAvailableSpace+0x4e>
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	73fb      	strb	r3, [r7, #15]
    if( (messageLen + (uint32_t)nlenLen) > ctx->cc.t4t.fileSize )
 800b9f4:	7bfa      	ldrb	r2, [r7, #15]
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	441a      	add	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d901      	bls.n	800ba08 <ndefT4TPollerCheckAvailableSpace+0x64>
    {
        return ERR_NOMEM;
 800ba04:	2301      	movs	r3, #1
 800ba06:	e000      	b.n	800ba0a <ndefT4TPollerCheckAvailableSpace+0x66>
    }
    return ERR_NONE;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bc80      	pop	{r7}
 800ba12:	4770      	bx	lr

0800ba14 <ndefT4TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    NO_WARNING(messageLen);

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d00b      	beq.n	800ba3c <ndefT4TPollerBeginWriteMessage+0x28>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d103      	bne.n	800ba34 <ndefT4TPollerBeginWriteMessage+0x20>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	785b      	ldrb	r3, [r3, #1]
 800ba30:	2b20      	cmp	r3, #32
 800ba32:	d005      	beq.n	800ba40 <ndefT4TPollerBeginWriteMessage+0x2c>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d001      	beq.n	800ba40 <ndefT4TPollerBeginWriteMessage+0x2c>
    {
        return ERR_PARAM;
 800ba3c:	2307      	movs	r3, #7
 800ba3e:	e01f      	b.n	800ba80 <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d006      	beq.n	800ba58 <ndefT4TPollerBeginWriteMessage+0x44>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	d001      	beq.n	800ba58 <ndefT4TPollerBeginWriteMessage+0x44>
    {
        return ERR_WRONG_STATE;
 800ba54:	2321      	movs	r3, #33	; 0x21
 800ba56:	e013      	b.n	800ba80 <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    /* TS T4T v1.0 7.2.3.5/9 Write value 0000h in NLEN field (resp. 00000000h in ENLEN field) */
    ret = ndefT4TPollerWriteRawMessageLen(ctx, 0U);
 800ba58:	2100      	movs	r1, #0
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f7ff fe18 	bl	800b690 <ndefT4TPollerWriteRawMessageLen>
 800ba60:	4603      	mov	r3, r0
 800ba62:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800ba64:	89fb      	ldrh	r3, [r7, #14]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d005      	beq.n	800ba76 <ndefT4TPollerBeginWriteMessage+0x62>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800ba72:	89fb      	ldrh	r3, [r7, #14]
 800ba74:	e004      	b.n	800ba80 <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    ctx->state = NDEF_STATE_INITIALIZED;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <ndefT4TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00b      	beq.n	800bab0 <ndefT4TPollerEndWriteMessage+0x28>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d103      	bne.n	800baa8 <ndefT4TPollerEndWriteMessage+0x20>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	785b      	ldrb	r3, [r3, #1]
 800baa4:	2b20      	cmp	r3, #32
 800baa6:	d005      	beq.n	800bab4 <ndefT4TPollerEndWriteMessage+0x2c>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	2b01      	cmp	r3, #1
 800baae:	d001      	beq.n	800bab4 <ndefT4TPollerEndWriteMessage+0x2c>
    {
        return ERR_PARAM;
 800bab0:	2307      	movs	r3, #7
 800bab2:	e025      	b.n	800bb00 <ndefT4TPollerEndWriteMessage+0x78>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800baba:	2b01      	cmp	r3, #1
 800babc:	d001      	beq.n	800bac2 <ndefT4TPollerEndWriteMessage+0x3a>
    {
        return ERR_WRONG_STATE;
 800babe:	2321      	movs	r3, #33	; 0x21
 800bac0:	e01e      	b.n	800bb00 <ndefT4TPollerEndWriteMessage+0x78>
    }

    /* TS T4T v1.0 7.2.3.7/11 Write value length in NLEN field (resp. in ENLEN field) */
    ret = ndefT4TPollerWriteRawMessageLen(ctx, messageLen);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f7ff fde3 	bl	800b690 <ndefT4TPollerWriteRawMessageLen>
 800baca:	4603      	mov	r3, r0
 800bacc:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800bace:	89fb      	ldrh	r3, [r7, #14]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d005      	beq.n	800bae0 <ndefT4TPollerEndWriteMessage+0x58>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800badc:	89fb      	ldrh	r3, [r7, #14]
 800bade:	e00f      	b.n	800bb00 <ndefT4TPollerEndWriteMessage+0x78>
    }
    ctx->messageLen = messageLen;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	683a      	ldr	r2, [r7, #0]
 800bae4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE; 
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d101      	bne.n	800baf6 <ndefT4TPollerEndWriteMessage+0x6e>
 800baf2:	2201      	movs	r2, #1
 800baf4:	e000      	b.n	800baf8 <ndefT4TPollerEndWriteMessage+0x70>
 800baf6:	2202      	movs	r2, #2
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <ndefT5TPollerReadBytes>:
 ******************************************************************************
 */

/*******************************************************************************/
ReturnCode ndefT5TPollerReadBytes(ndefContext * ctx, uint32_t offset, uint32_t len, uint8_t* buf, uint32_t * rcvdLen )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b08c      	sub	sp, #48	; 0x30
 800bb0c:	af02      	add	r7, sp, #8
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
 800bb14:	603b      	str	r3, [r7, #0]
    uint16_t        res;
    uint16_t        nbRead;
    uint16_t        blockLen;
    uint16_t        startBlock;
    uint16_t        startAddr;
    ReturnCode      result     = ERR_PARAM;
 800bb16:	2307      	movs	r3, #7
 800bb18:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint32_t        currentLen = len;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	623b      	str	r3, [r7, #32]
    uint32_t        lvRcvLen   = 0U;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	61fb      	str	r3, [r7, #28]

    if ( ( ctx != NULL) && (ctx->subCtx.t5t.blockLen > 0U) && (buf != NULL) && (len > 0U) )
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f000 80ef 	beq.w	800bd08 <ndefT5TPollerReadBytes+0x200>
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f000 80e9 	beq.w	800bd08 <ndefT5TPollerReadBytes+0x200>
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f000 80e5 	beq.w	800bd08 <ndefT5TPollerReadBytes+0x200>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 80e1 	beq.w	800bd08 <ndefT5TPollerReadBytes+0x200>
    {
        blockLen   = (uint16_t )ctx->subCtx.t5t.blockLen;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800bb4c:	837b      	strh	r3, [r7, #26]
        if( blockLen == 0U )
 800bb4e:	8b7b      	ldrh	r3, [r7, #26]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d101      	bne.n	800bb58 <ndefT5TPollerReadBytes+0x50>
        {
            return ERR_SYSTEM;
 800bb54:	2308      	movs	r3, #8
 800bb56:	e0e3      	b.n	800bd20 <ndefT5TPollerReadBytes+0x218>
        }
        startBlock = (uint16_t) (offset / blockLen);
 800bb58:	8b7b      	ldrh	r3, [r7, #26]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb60:	84fb      	strh	r3, [r7, #38]	; 0x26
        startAddr  = (uint16_t) (startBlock * blockLen);
 800bb62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb64:	8b7a      	ldrh	r2, [r7, #26]
 800bb66:	fb02 f303 	mul.w	r3, r2, r3
 800bb6a:	833b      	strh	r3, [r7, #24]

        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen + 3U, &nbRead);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800bb72:	8b7b      	ldrh	r3, [r7, #26]
 800bb74:	3303      	adds	r3, #3
 800bb76:	b298      	uxth	r0, r3
 800bb78:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800bb7a:	f107 0312 	add.w	r3, r7, #18
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	4603      	mov	r3, r0
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f001 f937 	bl	800cdf6 <ndefT5TPollerReadSingleBlock>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 800bb8c:	8afb      	ldrh	r3, [r7, #22]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	f040 80ba 	bne.w	800bd08 <ndefT5TPollerReadBytes+0x200>
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f040 80b4 	bne.w	800bd08 <ndefT5TPollerReadBytes+0x200>
 800bba0:	8a7b      	ldrh	r3, [r7, #18]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f000 80b0 	beq.w	800bd08 <ndefT5TPollerReadBytes+0x200>
        {
            nbRead = (uint16_t) (nbRead  + startAddr - (uint16_t)offset - 1U );
 800bba8:	8a7a      	ldrh	r2, [r7, #18]
 800bbaa:	8b3b      	ldrh	r3, [r7, #24]
 800bbac:	4413      	add	r3, r2
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	1ad3      	subs	r3, r2, r3
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	827b      	strh	r3, [r7, #18]
            if ((uint32_t) nbRead > currentLen)
 800bbbe:	8a7b      	ldrh	r3, [r7, #18]
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	6a3b      	ldr	r3, [r7, #32]
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d202      	bcs.n	800bbce <ndefT5TPollerReadBytes+0xc6>
            {
                nbRead = (uint16_t) currentLen;
 800bbc8:	6a3b      	ldr	r3, [r7, #32]
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	827b      	strh	r3, [r7, #18]
            }
            if (nbRead > 0U)
 800bbce:	8a7b      	ldrh	r3, [r7, #18]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00e      	beq.n	800bbf2 <ndefT5TPollerReadBytes+0xea>
            {
                (void)ST_MEMCPY(buf, &ctx->subCtx.t5t.txrxBuf[1U - startAddr + (uint16_t)offset], (uint32_t)nbRead);
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	461a      	mov	r2, r3
 800bbda:	8b3b      	ldrh	r3, [r7, #24]
 800bbdc:	1ad3      	subs	r3, r2, r3
 800bbde:	3301      	adds	r3, #1
 800bbe0:	33d0      	adds	r3, #208	; 0xd0
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	8a7a      	ldrh	r2, [r7, #18]
 800bbea:	4619      	mov	r1, r3
 800bbec:	6838      	ldr	r0, [r7, #0]
 800bbee:	f00d f902 	bl	8018df6 <memcpy>
            }
            lvRcvLen   += (uint32_t) nbRead;
 800bbf2:	8a7b      	ldrh	r3, [r7, #18]
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	61fb      	str	r3, [r7, #28]
            currentLen -= (uint32_t) nbRead;
 800bbfc:	8a7b      	ldrh	r3, [r7, #18]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	6a3b      	ldr	r3, [r7, #32]
 800bc02:	1a9b      	subs	r3, r3, r2
 800bc04:	623b      	str	r3, [r7, #32]
            while (currentLen >= ((uint32_t)blockLen + 2U) )
 800bc06:	e036      	b.n	800bc76 <ndefT5TPollerReadBytes+0x16e>
            {
                startBlock++;
 800bc08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	84fb      	strh	r3, [r7, #38]	; 0x26
                lastVal = buf[lvRcvLen - 1U];
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	3b01      	subs	r3, #1
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	4413      	add	r3, r2
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	757b      	strb	r3, [r7, #21]
                res = ndefT5TPollerReadSingleBlock(ctx, startBlock, &buf[lvRcvLen - 1U], blockLen + 3U, &nbRead);
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	683a      	ldr	r2, [r7, #0]
 800bc20:	441a      	add	r2, r3
 800bc22:	8b7b      	ldrh	r3, [r7, #26]
 800bc24:	3303      	adds	r3, #3
 800bc26:	b298      	uxth	r0, r3
 800bc28:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800bc2a:	f107 0312 	add.w	r3, r7, #18
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	4603      	mov	r3, r0
 800bc32:	68f8      	ldr	r0, [r7, #12]
 800bc34:	f001 f8df 	bl	800cdf6 <ndefT5TPollerReadSingleBlock>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	82fb      	strh	r3, [r7, #22]
                status  = buf[lvRcvLen - 1U]; /* Keep status */
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	683a      	ldr	r2, [r7, #0]
 800bc42:	4413      	add	r3, r2
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	753b      	strb	r3, [r7, #20]
                buf[lvRcvLen - 1U] = lastVal; /* Restore previous value */
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	683a      	ldr	r2, [r7, #0]
 800bc4e:	4413      	add	r3, r2
 800bc50:	7d7a      	ldrb	r2, [r7, #21]
 800bc52:	701a      	strb	r2, [r3, #0]
                if ( (res == ERR_NONE) && (nbRead > 0U) && (status == 0U))
 800bc54:	8afb      	ldrh	r3, [r7, #22]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d153      	bne.n	800bd02 <ndefT5TPollerReadBytes+0x1fa>
 800bc5a:	8a7b      	ldrh	r3, [r7, #18]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d050      	beq.n	800bd02 <ndefT5TPollerReadBytes+0x1fa>
 800bc60:	7d3b      	ldrb	r3, [r7, #20]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d14d      	bne.n	800bd02 <ndefT5TPollerReadBytes+0x1fa>
                {
                    lvRcvLen   += blockLen;
 800bc66:	8b7b      	ldrh	r3, [r7, #26]
 800bc68:	69fa      	ldr	r2, [r7, #28]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	61fb      	str	r3, [r7, #28]
                    currentLen -= blockLen;
 800bc6e:	8b7b      	ldrh	r3, [r7, #26]
 800bc70:	6a3a      	ldr	r2, [r7, #32]
 800bc72:	1ad3      	subs	r3, r2, r3
 800bc74:	623b      	str	r3, [r7, #32]
            while (currentLen >= ((uint32_t)blockLen + 2U) )
 800bc76:	8b7b      	ldrh	r3, [r7, #26]
 800bc78:	3302      	adds	r3, #2
 800bc7a:	6a3a      	ldr	r2, [r7, #32]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d2c3      	bcs.n	800bc08 <ndefT5TPollerReadBytes+0x100>
                else
                {
                    break;
                }
            }
            while (currentLen > 0U)
 800bc80:	e03f      	b.n	800bd02 <ndefT5TPollerReadBytes+0x1fa>
            {
                startBlock++;
 800bc82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc84:	3301      	adds	r3, #1
 800bc86:	84fb      	strh	r3, [r7, #38]	; 0x26
                res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen + 3U, &nbRead);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800bc8e:	8b7b      	ldrh	r3, [r7, #26]
 800bc90:	3303      	adds	r3, #3
 800bc92:	b298      	uxth	r0, r3
 800bc94:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800bc96:	f107 0312 	add.w	r3, r7, #18
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f001 f8a9 	bl	800cdf6 <ndefT5TPollerReadSingleBlock>
 800bca4:	4603      	mov	r3, r0
 800bca6:	82fb      	strh	r3, [r7, #22]
                if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U))
 800bca8:	8afb      	ldrh	r3, [r7, #22]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d12c      	bne.n	800bd08 <ndefT5TPollerReadBytes+0x200>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d127      	bne.n	800bd08 <ndefT5TPollerReadBytes+0x200>
 800bcb8:	8a7b      	ldrh	r3, [r7, #18]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d024      	beq.n	800bd08 <ndefT5TPollerReadBytes+0x200>
                {
                    -- nbRead; /* remove status char */
 800bcbe:	8a7b      	ldrh	r3, [r7, #18]
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	827b      	strh	r3, [r7, #18]
                    if (nbRead > currentLen)
 800bcc6:	8a7b      	ldrh	r3, [r7, #18]
 800bcc8:	461a      	mov	r2, r3
 800bcca:	6a3b      	ldr	r3, [r7, #32]
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d202      	bcs.n	800bcd6 <ndefT5TPollerReadBytes+0x1ce>
                    {
                        nbRead = (uint16_t)currentLen;
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	827b      	strh	r3, [r7, #18]
                    }
                    if (nbRead > 0U)
 800bcd6:	8a7b      	ldrh	r3, [r7, #18]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d008      	beq.n	800bcee <ndefT5TPollerReadBytes+0x1e6>
                    {
                        (void)ST_MEMCPY(&buf[lvRcvLen], & ctx->subCtx.t5t.txrxBuf[1U], nbRead);
 800bcdc:	683a      	ldr	r2, [r7, #0]
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	18d0      	adds	r0, r2, r3
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	33d5      	adds	r3, #213	; 0xd5
 800bce6:	8a7a      	ldrh	r2, [r7, #18]
 800bce8:	4619      	mov	r1, r3
 800bcea:	f00d f884 	bl	8018df6 <memcpy>
                    }
                    lvRcvLen   += nbRead;
 800bcee:	8a7b      	ldrh	r3, [r7, #18]
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	61fb      	str	r3, [r7, #28]
                    currentLen -= nbRead;
 800bcf8:	8a7b      	ldrh	r3, [r7, #18]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	1a9b      	subs	r3, r3, r2
 800bd00:	623b      	str	r3, [r7, #32]
            while (currentLen > 0U)
 800bd02:	6a3b      	ldr	r3, [r7, #32]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d1bc      	bne.n	800bc82 <ndefT5TPollerReadBytes+0x17a>
                    break;
                }
            }
        }
    }
    if (currentLen == 0U)
 800bd08:	6a3b      	ldr	r3, [r7, #32]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <ndefT5TPollerReadBytes+0x20a>
    {
        result = ERR_NONE;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    if( rcvdLen != NULL )
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d002      	beq.n	800bd1e <ndefT5TPollerReadBytes+0x216>
    {
        * rcvdLen = lvRcvLen;
 800bd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1a:	69fa      	ldr	r2, [r7, #28]
 800bd1c:	601a      	str	r2, [r3, #0]
    }
    return result;
 800bd1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3728      	adds	r7, #40	; 0x28
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <ndefT5TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT5TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af02      	add	r7, sp, #8
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
    ReturnCode    result;
    uint16_t      rcvLen;

    if( (ctx == NULL) || (dev == NULL) || !ndefT5TisT5TDevice(dev) )
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d006      	beq.n	800bd46 <ndefT5TPollerContextInitialization+0x1e>
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d003      	beq.n	800bd46 <ndefT5TPollerContextInitialization+0x1e>
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	2b03      	cmp	r3, #3
 800bd44:	d001      	beq.n	800bd4a <ndefT5TPollerContextInitialization+0x22>
    {
        return ERR_PARAM;
 800bd46:	2307      	movs	r3, #7
 800bd48:	e096      	b.n	800be78 <ndefT5TPollerContextInitialization+0x150>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2278      	movs	r2, #120	; 0x78
 800bd4e:	6839      	ldr	r1, [r7, #0]
 800bd50:	4618      	mov	r0, r3
 800bd52:	f00d f850 	bl	8018df6 <memcpy>

    /* Reset info about the card */
    ctx->state                    = NDEF_STATE_INVALID;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->messageOffset            = 0U;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageLen               = 0U;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->subCtx.t5t.blockLen      = 0U;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    ctx->subCtx.t5t.pAddressedUid = ctx->device.dev.nfcv.InvRes.UID; /* By default work in addressed mode */
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	1cda      	adds	r2, r3, #3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    ctx->subCtx.t5t.TlvNDEFOffset = 0U; /* Offset for TLV */
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    ctx->subCtx.t5t.legacySTHighDensity = false;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
    result = ndefT5TPollerReadSingleBlock( ctx, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800bd96:	f107 030c 	add.w	r3, r7, #12
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	2323      	movs	r3, #35	; 0x23
 800bd9e:	2100      	movs	r1, #0
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f001 f828 	bl	800cdf6 <ndefT5TPollerReadSingleBlock>
 800bda6:	4603      	mov	r3, r0
 800bda8:	81fb      	strh	r3, [r7, #14]
    if( (result != ERR_NONE) && (ctx->device.dev.nfcv.InvRes.UID[NDEF_T5T_UID_MANUFACTURER_ID_POS] == NDEF_T5T_MANUFACTURER_ID_ST) )
 800bdaa:	89fb      	ldrh	r3, [r7, #14]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d019      	beq.n	800bde4 <ndefT5TPollerContextInitialization+0xbc>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	7a5b      	ldrb	r3, [r3, #9]
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	d115      	bne.n	800bde4 <ndefT5TPollerContextInitialization+0xbc>
    {
        /* Try High Density Legacy mode */
        ctx->subCtx.t5t.legacySTHighDensity = true;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
        result = ndefT5TPollerReadSingleBlock( ctx, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800bdc6:	f107 030c 	add.w	r3, r7, #12
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	2323      	movs	r3, #35	; 0x23
 800bdce:	2100      	movs	r1, #0
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f001 f810 	bl	800cdf6 <ndefT5TPollerReadSingleBlock>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	81fb      	strh	r3, [r7, #14]
        if( result != ERR_NONE )
 800bdda:	89fb      	ldrh	r3, [r7, #14]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d001      	beq.n	800bde4 <ndefT5TPollerContextInitialization+0xbc>
        {
            return result;
 800bde0:	89fb      	ldrh	r3, [r7, #14]
 800bde2:	e049      	b.n	800be78 <ndefT5TPollerContextInitialization+0x150>
        }
    }

    if( (rcvLen > 1U) && (ctx->subCtx.t5t.txrxBuf[0U] == (uint8_t) 0U) )
 800bde4:	89bb      	ldrh	r3, [r7, #12]
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d915      	bls.n	800be16 <ndefT5TPollerContextInitialization+0xee>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d110      	bne.n	800be16 <ndefT5TPollerContextInitialization+0xee>
    {
        ctx->subCtx.t5t.blockLen = (uint8_t) (rcvLen - 1U);
 800bdf4:	89bb      	ldrh	r3, [r7, #12]
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	b2da      	uxtb	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    else
    {
        return ERR_PROTO;
    }

    if (rfalNfcvPollerSelect( (uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->device.dev.nfcv.InvRes.UID)  == ERR_NONE)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	3303      	adds	r3, #3
 800be06:	4619      	mov	r1, r3
 800be08:	2002      	movs	r0, #2
 800be0a:	f008 ff23 	bl	8014c54 <rfalNfcvPollerSelect>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d002      	beq.n	800be1a <ndefT5TPollerContextInitialization+0xf2>
 800be14:	e005      	b.n	800be22 <ndefT5TPollerContextInitialization+0xfa>
        return ERR_PROTO;
 800be16:	230b      	movs	r3, #11
 800be18:	e02e      	b.n	800be78 <ndefT5TPollerContextInitialization+0x150>
    {
        ctx->subCtx.t5t.pAddressedUid = NULL; /* Switch to selected mode */
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    }

    ctx->subCtx.t5t.sysInfoSupported = false;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2

    if( !ctx->subCtx.t5t.legacySTHighDensity)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800be30:	f083 0301 	eor.w	r3, r3, #1
 800be34:	b2db      	uxtb	r3, r3
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00a      	beq.n	800be50 <ndefT5TPollerContextInitialization+0x128>
    {
        /* Extended Get System Info */
        if( ndefT5TGetSystemInformation(ctx, true) == ERR_NONE )
 800be3a:	2101      	movs	r1, #1
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f001 f827 	bl	800ce90 <ndefT5TGetSystemInformation>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d103      	bne.n	800be50 <ndefT5TPollerContextInitialization+0x128>
        {
            ctx->subCtx.t5t.sysInfoSupported = true;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
    }
    if( !ctx->subCtx.t5t.sysInfoSupported )
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800be56:	f083 0301 	eor.w	r3, r3, #1
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00a      	beq.n	800be76 <ndefT5TPollerContextInitialization+0x14e>
    {
        /* Get System Info */
        if( ndefT5TGetSystemInformation(ctx, false) == ERR_NONE )
 800be60:	2100      	movs	r1, #0
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f001 f814 	bl	800ce90 <ndefT5TGetSystemInformation>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d103      	bne.n	800be76 <ndefT5TPollerContextInitialization+0x14e>
        {
            ctx->subCtx.t5t.sysInfoSupported = true;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2201      	movs	r2, #1
 800be72:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
    }
    return result;
 800be76:	89fb      	ldrh	r3, [r7, #14]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <ndefT5TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT5TPollerNdefDetect(ndefContext * ctx, ndefInfo *info)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b08a      	sub	sp, #40	; 0x28
 800be84:	af02      	add	r7, sp, #8
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
    ReturnCode result;
    uint8_t    tmpBuf[NDEF_T5T_TL_MAX_SIZE];
    ReturnCode returnCode = ERR_REQUEST; /* Default return code */
 800be8a:	2305      	movs	r3, #5
 800be8c:	83fb      	strh	r3, [r7, #30]
    uint16_t   length;
    uint32_t   TlvOffset;
    bool       bExit;
    uint32_t   rcvLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d003      	beq.n	800be9c <ndefT5TPollerNdefDetect+0x1c>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	2b03      	cmp	r3, #3
 800be9a:	d001      	beq.n	800bea0 <ndefT5TPollerNdefDetect+0x20>
    {
        return ERR_PARAM;
 800be9c:	2307      	movs	r3, #7
 800be9e:	e203      	b.n	800c2a8 <ndefT5TPollerNdefDetect+0x428>
    }

    ctx->state                           = NDEF_STATE_INVALID;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->cc.t5t.ccLen                    = 0U;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t5t.memoryLen                = 0U;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    ctx->messageLen                      = 0U;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset                   = 0U;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    if( info != NULL )
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d011      	beq.n	800bef2 <ndefT5TPollerNdefDetect+0x72>
    {
        info->state                = NDEF_STATE_INVALID;
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	2200      	movs	r2, #0
 800bed2:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	2200      	movs	r2, #0
 800bed8:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	2200      	movs	r2, #0
 800bede:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	2200      	movs	r2, #0
 800bee4:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2200      	movs	r2, #0
 800beea:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	2200      	movs	r2, #0
 800bef0:	60da      	str	r2, [r3, #12]
    }

    result = ndefT5TPollerReadBytes(ctx, 0U, 8U, ctx->ccBuf, &rcvLen);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800bef8:	f107 0308 	add.w	r3, r7, #8
 800befc:	9300      	str	r3, [sp, #0]
 800befe:	4613      	mov	r3, r2
 800bf00:	2208      	movs	r2, #8
 800bf02:	2100      	movs	r1, #0
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f7ff fdff 	bl	800bb08 <ndefT5TPollerReadBytes>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	823b      	strh	r3, [r7, #16]
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 800bf0e:	8a3b      	ldrh	r3, [r7, #16]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	f040 818e 	bne.w	800c232 <ndefT5TPollerNdefDetect+0x3b2>
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	2b08      	cmp	r3, #8
 800bf1a:	f040 818a 	bne.w	800c232 <ndefT5TPollerNdefDetect+0x3b2>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800bf24:	2be1      	cmp	r3, #225	; 0xe1
 800bf26:	d005      	beq.n	800bf34 <ndefT5TPollerNdefDetect+0xb4>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800bf2e:	2be2      	cmp	r3, #226	; 0xe2
 800bf30:	f040 817f 	bne.w	800c232 <ndefT5TPollerNdefDetect+0x3b2>
    {
        ctx->cc.t5t.magicNumber           =  ctx->ccBuf[0U];
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        ctx->cc.t5t.majorVersion          = (ctx->ccBuf[1U] >> 6U ) & 0x03U;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bf46:	099b      	lsrs	r3, r3, #6
 800bf48:	b2da      	uxtb	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        ctx->cc.t5t.minorVersion          = (ctx->ccBuf[1U] >> 4U ) & 0x03U;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bf56:	091b      	lsrs	r3, r3, #4
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	f003 0303 	and.w	r3, r3, #3
 800bf5e:	b2da      	uxtb	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        ctx->cc.t5t.readAccess            = (ctx->ccBuf[1U] >> 2U ) & 0x03U;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bf6c:	089b      	lsrs	r3, r3, #2
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	f003 0303 	and.w	r3, r3, #3
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        ctx->cc.t5t.writeAccess           = (ctx->ccBuf[1U] >> 0U ) & 0x03U;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bf82:	f003 0303 	and.w	r3, r3, #3
 800bf86:	b2da      	uxtb	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        ctx->cc.t5t.memoryLen             =  ctx->ccBuf[2U];
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800bf94:	b29a      	uxth	r2, r3
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        ctx->cc.t5t.multipleBlockRead     = (((ctx->ccBuf[3U] >> 0U ) & 0x01U) != 0U);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800bfa2:	f003 0301 	and.w	r3, r3, #1
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	bf14      	ite	ne
 800bfaa:	2301      	movne	r3, #1
 800bfac:	2300      	moveq	r3, #0
 800bfae:	b2da      	uxtb	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        ctx->cc.t5t.mlenOverflow          = (((ctx->ccBuf[3U] >> 2U ) & 0x01U) != 0U);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800bfbc:	089b      	lsrs	r3, r3, #2
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	f003 0301 	and.w	r3, r3, #1
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	bf14      	ite	ne
 800bfc8:	2301      	movne	r3, #1
 800bfca:	2300      	moveq	r3, #0
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        ctx->cc.t5t.lockBlock             = (((ctx->ccBuf[3U] >> 3U ) & 0x01U) != 0U);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800bfda:	08db      	lsrs	r3, r3, #3
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	bf14      	ite	ne
 800bfe6:	2301      	movne	r3, #1
 800bfe8:	2300      	moveq	r3, #0
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
        ctx->cc.t5t.specialFrame          = (((ctx->ccBuf[3U] >> 4U ) & 0x01U) != 0U);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800bff8:	091b      	lsrs	r3, r3, #4
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	f003 0301 	and.w	r3, r3, #1
 800c000:	2b00      	cmp	r3, #0
 800c002:	bf14      	ite	ne
 800c004:	2301      	movne	r3, #1
 800c006:	2300      	moveq	r3, #0
 800c008:	b2da      	uxtb	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
        ctx->state                        = NDEF_STATE_INITIALIZED;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        if ( ctx->cc.t5t.memoryLen != 0U)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d02a      	beq.n	800c078 <ndefT5TPollerNdefDetect+0x1f8>
        {
            ctx->cc.t5t.ccLen             = NDEF_T5T_CC_LEN_4_BYTES;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2204      	movs	r2, #4
 800c026:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            if( (ctx->cc.t5t.memoryLen == 0xFFU) && ctx->cc.t5t.mlenOverflow )
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c030:	2bff      	cmp	r3, #255	; 0xff
 800c032:	d134      	bne.n	800c09e <ndefT5TPollerNdefDetect+0x21e>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d02f      	beq.n	800c09e <ndefT5TPollerNdefDetect+0x21e>
            {
                if( (ctx->subCtx.t5t.sysInfoSupported==true) && ( ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800c044:	2b00      	cmp	r3, #0
 800c046:	d02a      	beq.n	800c09e <ndefT5TPollerNdefDetect+0x21e>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800c04e:	089b      	lsrs	r3, r3, #2
 800c050:	b2db      	uxtb	r3, r3
 800c052:	f003 0301 	and.w	r3, r3, #1
 800c056:	2b00      	cmp	r3, #0
 800c058:	d021      	beq.n	800c09e <ndefT5TPollerNdefDetect+0x21e>
                {
                    ctx->cc.t5t.memoryLen = (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800c060:	461a      	mov	r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800c068:	fb03 f302 	mul.w	r3, r3, r2
 800c06c:	08db      	lsrs	r3, r3, #3
 800c06e:	b29a      	uxth	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800c076:	e012      	b.n	800c09e <ndefT5TPollerNdefDetect+0x21e>
                }
            }
        }
        else
        {
            ctx->cc.t5t.ccLen             = NDEF_T5T_CC_LEN_8_BYTES;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2208      	movs	r2, #8
 800c07c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            ctx->cc.t5t.memoryLen         = ((uint16_t)ctx->ccBuf[6U] << 8U) + (uint16_t)ctx->ccBuf[7U];
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800c086:	b29b      	uxth	r3, r3
 800c088:	021b      	lsls	r3, r3, #8
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800c092:	b29b      	uxth	r3, r3
 800c094:	4413      	add	r3, r2
 800c096:	b29a      	uxth	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        }
        if( (ctx->subCtx.t5t.sysInfoSupported==true) &&
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d025      	beq.n	800c0f4 <ndefT5TPollerNdefDetect+0x274>
            (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!= 0U) &&
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800c0ae:	089b      	lsrs	r3, r3, #2
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	f003 0301 	and.w	r3, r3, #1
        if( (ctx->subCtx.t5t.sysInfoSupported==true) &&
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d01c      	beq.n	800c0f4 <ndefT5TPollerNdefDetect+0x274>
            (ctx->cc.t5t.memoryLen == (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER)) &&
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800c0ce:	fb03 f301 	mul.w	r3, r3, r1
 800c0d2:	08db      	lsrs	r3, r3, #3
 800c0d4:	b29b      	uxth	r3, r3
            (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!= 0U) &&
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d10c      	bne.n	800c0f4 <ndefT5TPollerNdefDetect+0x274>
            (ctx->cc.t5t.memoryLen > 0U) )
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
            (ctx->cc.t5t.memoryLen == (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER)) &&
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d007      	beq.n	800c0f4 <ndefT5TPollerNdefDetect+0x274>
        {
            ctx->cc.t5t.memoryLen--; /* remove CC area from memory len */
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	b29a      	uxth	r2, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        }
        ctx->messageLen     = 0U;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        ctx->messageOffset  = ctx->cc.t5t.ccLen;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c102:	461a      	mov	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        TlvOffset = ctx->cc.t5t.ccLen;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c110:	617b      	str	r3, [r7, #20]
        bExit     = false;
 800c112:	2300      	movs	r3, #0
 800c114:	74fb      	strb	r3, [r7, #19]
        do
        {
            result = ndefT5TPollerReadBytes(ctx, TlvOffset, NDEF_T5T_TL_MAX_SIZE, tmpBuf, &rcvLen);
 800c116:	f107 020c 	add.w	r2, r7, #12
 800c11a:	f107 0308 	add.w	r3, r7, #8
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	4613      	mov	r3, r2
 800c122:	2204      	movs	r2, #4
 800c124:	6979      	ldr	r1, [r7, #20]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f7ff fcee 	bl	800bb08 <ndefT5TPollerReadBytes>
 800c12c:	4603      	mov	r3, r0
 800c12e:	823b      	strh	r3, [r7, #16]
            if ( (result != ERR_NONE) || ( rcvLen != NDEF_T5T_TL_MAX_SIZE) )
 800c130:	8a3b      	ldrh	r3, [r7, #16]
 800c132:	2b00      	cmp	r3, #0
 800c134:	f040 8085 	bne.w	800c242 <ndefT5TPollerNdefDetect+0x3c2>
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	2b04      	cmp	r3, #4
 800c13c:	f040 8081 	bne.w	800c242 <ndefT5TPollerNdefDetect+0x3c2>
            {
                break;
            }
            offset = 2U;
 800c140:	2302      	movs	r3, #2
 800c142:	83bb      	strh	r3, [r7, #28]
            length = tmpBuf[1U];
 800c144:	7b7b      	ldrb	r3, [r7, #13]
 800c146:	837b      	strh	r3, [r7, #26]
            if ( length == (NDEF_SHORT_VFIELD_MAX_LEN + 1U) )
 800c148:	8b7b      	ldrh	r3, [r7, #26]
 800c14a:	2bff      	cmp	r3, #255	; 0xff
 800c14c:	d10a      	bne.n	800c164 <ndefT5TPollerNdefDetect+0x2e4>
            {
                /* Size is encoded in 1 + 2 bytes */
                length = (((uint16_t)tmpBuf[2U]) << 8U) + (uint16_t)tmpBuf[3U];
 800c14e:	7bbb      	ldrb	r3, [r7, #14]
 800c150:	b29b      	uxth	r3, r3
 800c152:	021b      	lsls	r3, r3, #8
 800c154:	b29a      	uxth	r2, r3
 800c156:	7bfb      	ldrb	r3, [r7, #15]
 800c158:	b29b      	uxth	r3, r3
 800c15a:	4413      	add	r3, r2
 800c15c:	837b      	strh	r3, [r7, #26]
                offset += 2U;
 800c15e:	8bbb      	ldrh	r3, [r7, #28]
 800c160:	3302      	adds	r3, #2
 800c162:	83bb      	strh	r3, [r7, #28]
            }
            if (tmpBuf[0U] == (uint8_t)NDEF_T5T_TLV_NDEF)
 800c164:	7b3b      	ldrb	r3, [r7, #12]
 800c166:	2b03      	cmp	r3, #3
 800c168:	d142      	bne.n	800c1f0 <ndefT5TPollerNdefDetect+0x370>
            {
                /* NDEF record return it */
                returnCode                    = ERR_NONE;  /* Default */
 800c16a:	2300      	movs	r3, #0
 800c16c:	83fb      	strh	r3, [r7, #30]
                ctx->subCtx.t5t.TlvNDEFOffset = TlvOffset; /* Offset for TLV */
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	697a      	ldr	r2, [r7, #20]
 800c172:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
                ctx->messageOffset            = TlvOffset + offset;
 800c176:	8bba      	ldrh	r2, [r7, #28]
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	441a      	add	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                ctx->messageLen               = length;
 800c182:	8b7a      	ldrh	r2, [r7, #26]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                TlvOffset = 0U;
 800c18a:	2300      	movs	r3, #0
 800c18c:	617b      	str	r3, [r7, #20]
                if (length == 0U)
 800c18e:	8b7b      	ldrh	r3, [r7, #26]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d117      	bne.n	800c1c4 <ndefT5TPollerNdefDetect+0x344>
                {
                    /* Req 40 7.5.1.6 */
                    if ( (ctx->cc.t5t.readAccess == 0U) && (ctx->cc.t5t.writeAccess == 0U) )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d109      	bne.n	800c1b2 <ndefT5TPollerNdefDetect+0x332>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d104      	bne.n	800c1b2 <ndefT5TPollerNdefDetect+0x332>
                    {
                        ctx->state = NDEF_STATE_INITIALIZED;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800c1b0:	e005      	b.n	800c1be <ndefT5TPollerNdefDetect+0x33e>
                    }
                    else
                    {
                        ctx->state = NDEF_STATE_INVALID;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        returnCode = ERR_REQUEST; /* Default */
 800c1ba:	2305      	movs	r3, #5
 800c1bc:	83fb      	strh	r3, [r7, #30]
                    }
                    bExit = true;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	74fb      	strb	r3, [r7, #19]
 800c1c2:	e02b      	b.n	800c21c <ndefT5TPollerNdefDetect+0x39c>
                }
                else
                {
                    if (ctx->cc.t5t.readAccess == 0U)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10d      	bne.n	800c1ea <ndefT5TPollerNdefDetect+0x36a>
                    {
                        if (ctx->cc.t5t.writeAccess == 0U)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d104      	bne.n	800c1e2 <ndefT5TPollerNdefDetect+0x362>
                        {
                            ctx->state = NDEF_STATE_READWRITE;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2202      	movs	r2, #2
 800c1dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800c1e0:	e003      	b.n	800c1ea <ndefT5TPollerNdefDetect+0x36a>
                        }
                        else
                        {
                            ctx->state = NDEF_STATE_READONLY;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2203      	movs	r2, #3
 800c1e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        }
                    }
                    bExit = true;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	74fb      	strb	r3, [r7, #19]
 800c1ee:	e015      	b.n	800c21c <ndefT5TPollerNdefDetect+0x39c>
                }
            }
            else if (tmpBuf[0U]== (uint8_t) NDEF_T5T_TLV_TERMINATOR)
 800c1f0:	7b3b      	ldrb	r3, [r7, #12]
 800c1f2:	2bfe      	cmp	r3, #254	; 0xfe
 800c1f4:	d104      	bne.n	800c200 <ndefT5TPollerNdefDetect+0x380>
            {
                /* NDEF end */
                TlvOffset = 0U;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	617b      	str	r3, [r7, #20]
                bExit     = true;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	74fb      	strb	r3, [r7, #19]
 800c1fe:	e00d      	b.n	800c21c <ndefT5TPollerNdefDetect+0x39c>
            }
            else if (tmpBuf[0U]== (uint8_t) NDEF_T5T_TLV_PROPRIETARY)
 800c200:	7b3b      	ldrb	r3, [r7, #12]
 800c202:	2bfd      	cmp	r3, #253	; 0xfd
 800c204:	d106      	bne.n	800c214 <ndefT5TPollerNdefDetect+0x394>
            {   /* proprietary go next, nothing to do */
                TlvOffset +=  (uint32_t)offset + (uint32_t)length;
 800c206:	8bba      	ldrh	r2, [r7, #28]
 800c208:	8b7b      	ldrh	r3, [r7, #26]
 800c20a:	4413      	add	r3, r2
 800c20c:	697a      	ldr	r2, [r7, #20]
 800c20e:	4413      	add	r3, r2
 800c210:	617b      	str	r3, [r7, #20]
 800c212:	e003      	b.n	800c21c <ndefT5TPollerNdefDetect+0x39c>
            }
            else
            {
                /* RFU value */
                TlvOffset = 0U;
 800c214:	2300      	movs	r3, #0
 800c216:	617b      	str	r3, [r7, #20]
                bExit = true;
 800c218:	2301      	movs	r3, #1
 800c21a:	74fb      	strb	r3, [r7, #19]
            }
        } while ( ( TlvOffset > 0U) && (bExit == false) );
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d00f      	beq.n	800c242 <ndefT5TPollerNdefDetect+0x3c2>
 800c222:	7cfb      	ldrb	r3, [r7, #19]
 800c224:	f083 0301 	eor.w	r3, r3, #1
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f47f af73 	bne.w	800c116 <ndefT5TPollerNdefDetect+0x296>
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 800c230:	e007      	b.n	800c242 <ndefT5TPollerNdefDetect+0x3c2>
    }
    else
    {
        /* No CCFile */
        returnCode = ERR_REQUEST;
 800c232:	2305      	movs	r3, #5
 800c234:	83fb      	strh	r3, [r7, #30]
        if (result != ERR_NONE)
 800c236:	8a3b      	ldrh	r3, [r7, #16]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d003      	beq.n	800c244 <ndefT5TPollerNdefDetect+0x3c4>
        {
            returnCode = result;
 800c23c:	8a3b      	ldrh	r3, [r7, #16]
 800c23e:	83fb      	strh	r3, [r7, #30]
 800c240:	e000      	b.n	800c244 <ndefT5TPollerNdefDetect+0x3c4>
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 800c242:	bf00      	nop
        }
    }

    /* TS T5T v1.0 4.3.1.17 T5T_area size is measured in bytes is equal to 8 * MLEN */
    ctx->areaLen               = (uint32_t)ctx->cc.t5t.memoryLen * NDEF_T5T_MLEN_DIVIDER;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c24a:	00da      	lsls	r2, r3, #3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    if( info != NULL )
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d026      	beq.n	800c2a6 <ndefT5TPollerNdefDetect+0x426>
    {
        info->state                = ctx->state;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ctx->cc.t5t.majorVersion;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ctx->cc.t5t.minorVersion;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = (uint32_t)ctx->cc.t5t.ccLen + ctx->areaLen - ctx->messageOffset;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c286:	461a      	mov	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c28e:	441a      	add	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c296:	1ad2      	subs	r2, r2, r3
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	60da      	str	r2, [r3, #12]
    }
    return returnCode;
 800c2a6:	8bfb      	ldrh	r3, [r7, #30]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3720      	adds	r7, #32
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <ndefT5TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b088      	sub	sp, #32
 800c2b4:	af02      	add	r7, sp, #8
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
 800c2bc:	603b      	str	r3, [r7, #0]
    ReturnCode result;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (buf == NULL) )
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d006      	beq.n	800c2d2 <ndefT5TPollerReadRawMessage+0x22>
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	2b03      	cmp	r3, #3
 800c2ca:	d102      	bne.n	800c2d2 <ndefT5TPollerReadRawMessage+0x22>
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d101      	bne.n	800c2d6 <ndefT5TPollerReadRawMessage+0x26>
    {
        return ERR_PARAM;
 800c2d2:	2307      	movs	r3, #7
 800c2d4:	e016      	b.n	800c304 <ndefT5TPollerReadRawMessage+0x54>
    }

    if( ctx->messageLen > bufLen )
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d201      	bcs.n	800c2e6 <ndefT5TPollerReadRawMessage+0x36>
    {
        return ERR_NOMEM;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e00e      	b.n	800c304 <ndefT5TPollerReadRawMessage+0x54>
    }

    result = ndefT5TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	f7ff fc05 	bl	800bb08 <ndefT5TPollerReadBytes>
 800c2fe:	4603      	mov	r3, r0
 800c300:	82fb      	strh	r3, [r7, #22]
    return result;
 800c302:	8afb      	ldrh	r3, [r7, #22]
}
 800c304:	4618      	mov	r0, r3
 800c306:	3718      	adds	r7, #24
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <ndefT5TPollerWriteBytes>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t * buf, uint32_t len)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b08c      	sub	sp, #48	; 0x30
 800c310:	af02      	add	r7, sp, #8
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
 800c318:	603b      	str	r3, [r7, #0]
    ReturnCode      result = ERR_REQUEST;
 800c31a:	2305      	movs	r3, #5
 800c31c:	84fb      	strh	r3, [r7, #38]	; 0x26
    ReturnCode      res;
    uint16_t        nbRead;
    uint16_t        blockLen16;
    uint16_t        startBlock;
    uint16_t        startAddr ;
    const uint8_t * wrbuf      = buf;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	623b      	str	r3, [r7, #32]
    uint32_t        currentLen = len;
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	61fb      	str	r3, [r7, #28]

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (len == 0U) || (ctx->subCtx.t5t.blockLen == 0U))
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00b      	beq.n	800c344 <ndefT5TPollerWriteBytes+0x38>
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	2b03      	cmp	r3, #3
 800c332:	d107      	bne.n	800c344 <ndefT5TPollerWriteBytes+0x38>
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d004      	beq.n	800c344 <ndefT5TPollerWriteBytes+0x38>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800c340:	2b00      	cmp	r3, #0
 800c342:	d101      	bne.n	800c348 <ndefT5TPollerWriteBytes+0x3c>
    {
        return ERR_PARAM;
 800c344:	2307      	movs	r3, #7
 800c346:	e0eb      	b.n	800c520 <ndefT5TPollerWriteBytes+0x214>
    }
    blockLen16 = (uint16_t )ctx->subCtx.t5t.blockLen;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800c34e:	837b      	strh	r3, [r7, #26]
    if( blockLen16 == 0U )
 800c350:	8b7b      	ldrh	r3, [r7, #26]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d101      	bne.n	800c35a <ndefT5TPollerWriteBytes+0x4e>
    {
        return ERR_SYSTEM;
 800c356:	2308      	movs	r3, #8
 800c358:	e0e2      	b.n	800c520 <ndefT5TPollerWriteBytes+0x214>
    }
    startBlock = (uint16_t) (offset     / blockLen16);
 800c35a:	8b7b      	ldrh	r3, [r7, #26]
 800c35c:	68ba      	ldr	r2, [r7, #8]
 800c35e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c362:	84bb      	strh	r3, [r7, #36]	; 0x24
    startAddr  = (uint16_t) (startBlock * blockLen16);
 800c364:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c366:	8b7a      	ldrh	r2, [r7, #26]
 800c368:	fb02 f303 	mul.w	r3, r2, r3
 800c36c:	833b      	strh	r3, [r7, #24]

    if (startAddr != offset)
 800c36e:	8b3b      	ldrh	r3, [r7, #24]
 800c370:	68ba      	ldr	r2, [r7, #8]
 800c372:	429a      	cmp	r2, r3
 800c374:	f000 8081 	beq.w	800c47a <ndefT5TPollerWriteBytes+0x16e>
    {
        /* Unaligned start offset must read the first block before */
        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen16 + 3U, &nbRead);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800c37e:	8b7b      	ldrh	r3, [r7, #26]
 800c380:	3303      	adds	r3, #3
 800c382:	b298      	uxth	r0, r3
 800c384:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800c386:	f107 0314 	add.w	r3, r7, #20
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	4603      	mov	r3, r0
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	f000 fd31 	bl	800cdf6 <ndefT5TPollerReadSingleBlock>
 800c394:	4603      	mov	r3, r0
 800c396:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 800c398:	8afb      	ldrh	r3, [r7, #22]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d13b      	bne.n	800c416 <ndefT5TPollerWriteBytes+0x10a>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d136      	bne.n	800c416 <ndefT5TPollerWriteBytes+0x10a>
 800c3a8:	8abb      	ldrh	r3, [r7, #20]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d033      	beq.n	800c416 <ndefT5TPollerWriteBytes+0x10a>
        {
            nbRead = (uint16_t) ((uint32_t)nbRead - 1U  + startAddr - offset);
 800c3ae:	8aba      	ldrh	r2, [r7, #20]
 800c3b0:	8b3b      	ldrh	r3, [r7, #24]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	b29a      	uxth	r2, r3
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	1ad3      	subs	r3, r2, r3
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	82bb      	strh	r3, [r7, #20]
            if (nbRead > (uint32_t) currentLen)
 800c3c4:	8abb      	ldrh	r3, [r7, #20]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d202      	bcs.n	800c3d4 <ndefT5TPollerWriteBytes+0xc8>
            {
                nbRead = (uint16_t) currentLen;
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	82bb      	strh	r3, [r7, #20]
            }
            if (nbRead > 0U)
 800c3d4:	8abb      	ldrh	r3, [r7, #20]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00e      	beq.n	800c3f8 <ndefT5TPollerWriteBytes+0xec>
            {
                (void)ST_MEMCPY(&ctx->subCtx.t5t.txrxBuf[1U - startAddr + (uint16_t)offset], wrbuf, nbRead);
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	461a      	mov	r2, r3
 800c3e0:	8b3b      	ldrh	r3, [r7, #24]
 800c3e2:	1ad3      	subs	r3, r2, r3
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	33d0      	adds	r3, #208	; 0xd0
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	8aba      	ldrh	r2, [r7, #20]
 800c3f0:	6a39      	ldr	r1, [r7, #32]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f00c fcff 	bl	8018df6 <memcpy>
            }
            res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, &ctx->subCtx.t5t.txrxBuf[1U]);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f103 02d5 	add.w	r2, r3, #213	; 0xd5
 800c3fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c400:	4619      	mov	r1, r3
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f000 fc4e 	bl	800cca4 <ndefT5TPollerWriteSingleBlock>
 800c408:	4603      	mov	r3, r0
 800c40a:	82fb      	strh	r3, [r7, #22]
            if (res != ERR_NONE)
 800c40c:	8afb      	ldrh	r3, [r7, #22]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00b      	beq.n	800c42a <ndefT5TPollerWriteBytes+0x11e>
            {
                return res;
 800c412:	8afb      	ldrh	r3, [r7, #22]
 800c414:	e084      	b.n	800c520 <ndefT5TPollerWriteBytes+0x214>
            }
        }
        else
        {
            if (res != ERR_NONE)
 800c416:	8afb      	ldrh	r3, [r7, #22]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d002      	beq.n	800c422 <ndefT5TPollerWriteBytes+0x116>
            {
                result = res;
 800c41c:	8afb      	ldrh	r3, [r7, #22]
 800c41e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c420:	e001      	b.n	800c426 <ndefT5TPollerWriteBytes+0x11a>
            }
            else
            {
                result = ERR_PARAM;
 800c422:	2307      	movs	r3, #7
 800c424:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            return result;
 800c426:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c428:	e07a      	b.n	800c520 <ndefT5TPollerWriteBytes+0x214>
        }
        currentLen -= nbRead;
 800c42a:	8abb      	ldrh	r3, [r7, #20]
 800c42c:	461a      	mov	r2, r3
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	1a9b      	subs	r3, r3, r2
 800c432:	61fb      	str	r3, [r7, #28]
        wrbuf       = &wrbuf[nbRead];
 800c434:	8abb      	ldrh	r3, [r7, #20]
 800c436:	461a      	mov	r2, r3
 800c438:	6a3b      	ldr	r3, [r7, #32]
 800c43a:	4413      	add	r3, r2
 800c43c:	623b      	str	r3, [r7, #32]
        startBlock++;
 800c43e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c440:	3301      	adds	r3, #1
 800c442:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    while (currentLen >= blockLen16)
 800c444:	e019      	b.n	800c47a <ndefT5TPollerWriteBytes+0x16e>
    {
        res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, wrbuf);
 800c446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c448:	6a3a      	ldr	r2, [r7, #32]
 800c44a:	4619      	mov	r1, r3
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f000 fc29 	bl	800cca4 <ndefT5TPollerWriteSingleBlock>
 800c452:	4603      	mov	r3, r0
 800c454:	82fb      	strh	r3, [r7, #22]
        if (res == ERR_NONE)
 800c456:	8afb      	ldrh	r3, [r7, #22]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10b      	bne.n	800c474 <ndefT5TPollerWriteBytes+0x168>
        {
            currentLen -= blockLen16;
 800c45c:	8b7b      	ldrh	r3, [r7, #26]
 800c45e:	69fa      	ldr	r2, [r7, #28]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	61fb      	str	r3, [r7, #28]
            wrbuf       = &wrbuf[blockLen16];
 800c464:	8b7b      	ldrh	r3, [r7, #26]
 800c466:	6a3a      	ldr	r2, [r7, #32]
 800c468:	4413      	add	r3, r2
 800c46a:	623b      	str	r3, [r7, #32]
            startBlock++;
 800c46c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c46e:	3301      	adds	r3, #1
 800c470:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c472:	e002      	b.n	800c47a <ndefT5TPollerWriteBytes+0x16e>
        }
        else
        {
            result = res;
 800c474:	8afb      	ldrh	r3, [r7, #22]
 800c476:	84fb      	strh	r3, [r7, #38]	; 0x26
            break;
 800c478:	e003      	b.n	800c482 <ndefT5TPollerWriteBytes+0x176>
    while (currentLen >= blockLen16)
 800c47a:	8b7b      	ldrh	r3, [r7, #26]
 800c47c:	69fa      	ldr	r2, [r7, #28]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d2e1      	bcs.n	800c446 <ndefT5TPollerWriteBytes+0x13a>
        }
    }
    if ( (currentLen != 0U) && (currentLen < blockLen16) )
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d045      	beq.n	800c514 <ndefT5TPollerWriteBytes+0x208>
 800c488:	8b7b      	ldrh	r3, [r7, #26]
 800c48a:	69fa      	ldr	r2, [r7, #28]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d241      	bcs.n	800c514 <ndefT5TPollerWriteBytes+0x208>
    {
        /* Unaligned end, must read the first block before */
        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen16 + 3U, &nbRead);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800c496:	8b7b      	ldrh	r3, [r7, #26]
 800c498:	3303      	adds	r3, #3
 800c49a:	b298      	uxth	r0, r3
 800c49c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800c49e:	f107 0314 	add.w	r3, r7, #20
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	68f8      	ldr	r0, [r7, #12]
 800c4a8:	f000 fca5 	bl	800cdf6 <ndefT5TPollerReadSingleBlock>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 800c4b0:	8afb      	ldrh	r3, [r7, #22]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d124      	bne.n	800c500 <ndefT5TPollerWriteBytes+0x1f4>
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d11f      	bne.n	800c500 <ndefT5TPollerWriteBytes+0x1f4>
 800c4c0:	8abb      	ldrh	r3, [r7, #20]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d01c      	beq.n	800c500 <ndefT5TPollerWriteBytes+0x1f4>
        {
            if (currentLen > 0U) { (void)ST_MEMCPY(&ctx->subCtx.t5t.txrxBuf[1U], wrbuf, currentLen); }
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d006      	beq.n	800c4da <ndefT5TPollerWriteBytes+0x1ce>
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	33d5      	adds	r3, #213	; 0xd5
 800c4d0:	69fa      	ldr	r2, [r7, #28]
 800c4d2:	6a39      	ldr	r1, [r7, #32]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f00c fc8e 	bl	8018df6 <memcpy>
            res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, &ctx->subCtx.t5t.txrxBuf[1U]);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f103 02d5 	add.w	r2, r3, #213	; 0xd5
 800c4e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f000 fbdd 	bl	800cca4 <ndefT5TPollerWriteSingleBlock>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	82fb      	strh	r3, [r7, #22]
            if (res != ERR_NONE)
 800c4ee:	8afb      	ldrh	r3, [r7, #22]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d002      	beq.n	800c4fa <ndefT5TPollerWriteBytes+0x1ee>
            {
                result = res;
 800c4f4:	8afb      	ldrh	r3, [r7, #22]
 800c4f6:	84fb      	strh	r3, [r7, #38]	; 0x26
            if (res != ERR_NONE)
 800c4f8:	e00c      	b.n	800c514 <ndefT5TPollerWriteBytes+0x208>
            }
            else
            {
                currentLen = 0U;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	61fb      	str	r3, [r7, #28]
            if (res != ERR_NONE)
 800c4fe:	e009      	b.n	800c514 <ndefT5TPollerWriteBytes+0x208>
            }
        }
        else
        {
            if (res != ERR_NONE)
 800c500:	8afb      	ldrh	r3, [r7, #22]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d002      	beq.n	800c50c <ndefT5TPollerWriteBytes+0x200>
            {
                result = res;
 800c506:	8afb      	ldrh	r3, [r7, #22]
 800c508:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c50a:	e001      	b.n	800c510 <ndefT5TPollerWriteBytes+0x204>
            }
            else
            {
                result = ERR_PARAM;
 800c50c:	2307      	movs	r3, #7
 800c50e:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            return result;
 800c510:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c512:	e005      	b.n	800c520 <ndefT5TPollerWriteBytes+0x214>
        }
    }
    if (currentLen == 0U)
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d101      	bne.n	800c51e <ndefT5TPollerWriteBytes+0x212>
    {
        result = ERR_NONE;
 800c51a:	2300      	movs	r3, #0
 800c51c:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    return result;
 800c51e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800c520:	4618      	mov	r0, r3
 800c522:	3728      	adds	r7, #40	; 0x28
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <ndefT5TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
    uint8_t    TLV[8U];
    ReturnCode result = ERR_PARAM;
 800c532:	2307      	movs	r3, #7
 800c534:	82fb      	strh	r3, [r7, #22]
    uint8_t     len    = 0U;
 800c536:	2300      	movs	r3, #0
 800c538:	757b      	strb	r3, [r7, #21]

    if( (ctx != NULL) && ndefT5TisT5TDevice(&ctx->device))
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d077      	beq.n	800c630 <ndefT5TPollerWriteRawMessageLen+0x108>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	2b03      	cmp	r3, #3
 800c546:	d173      	bne.n	800c630 <ndefT5TPollerWriteRawMessageLen+0x108>
    {
        if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d007      	beq.n	800c562 <ndefT5TPollerWriteRawMessageLen+0x3a>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c558:	2b02      	cmp	r3, #2
 800c55a:	d002      	beq.n	800c562 <ndefT5TPollerWriteRawMessageLen+0x3a>
        {
            result = ERR_WRONG_STATE;
 800c55c:	2321      	movs	r3, #33	; 0x21
 800c55e:	82fb      	strh	r3, [r7, #22]
 800c560:	e066      	b.n	800c630 <ndefT5TPollerWriteRawMessageLen+0x108>
        }
        else
        {
            TLV[len] = NDEF_T5T_TLV_NDEF;
 800c562:	7d7b      	ldrb	r3, [r7, #21]
 800c564:	f107 0218 	add.w	r2, r7, #24
 800c568:	4413      	add	r3, r2
 800c56a:	2203      	movs	r2, #3
 800c56c:	f803 2c0c 	strb.w	r2, [r3, #-12]
            len++;
 800c570:	7d7b      	ldrb	r3, [r7, #21]
 800c572:	3301      	adds	r3, #1
 800c574:	757b      	strb	r3, [r7, #21]
            if (rawMessageLen <= NDEF_SHORT_VFIELD_MAX_LEN)
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	2bfe      	cmp	r3, #254	; 0xfe
 800c57a:	d80b      	bhi.n	800c594 <ndefT5TPollerWriteRawMessageLen+0x6c>
            {
                TLV[len] = (uint8_t) rawMessageLen;
 800c57c:	7d7b      	ldrb	r3, [r7, #21]
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	b2d2      	uxtb	r2, r2
 800c582:	f107 0118 	add.w	r1, r7, #24
 800c586:	440b      	add	r3, r1
 800c588:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800c58c:	7d7b      	ldrb	r3, [r7, #21]
 800c58e:	3301      	adds	r3, #1
 800c590:	757b      	strb	r3, [r7, #21]
 800c592:	e016      	b.n	800c5c2 <ndefT5TPollerWriteRawMessageLen+0x9a>
            }
            else
            {
                TLV[len] = (uint8_t) (rawMessageLen >> 8U);
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	0a1a      	lsrs	r2, r3, #8
 800c598:	7d7b      	ldrb	r3, [r7, #21]
 800c59a:	b2d2      	uxtb	r2, r2
 800c59c:	f107 0118 	add.w	r1, r7, #24
 800c5a0:	440b      	add	r3, r1
 800c5a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800c5a6:	7d7b      	ldrb	r3, [r7, #21]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	757b      	strb	r3, [r7, #21]
                TLV[len] = (uint8_t) rawMessageLen;
 800c5ac:	7d7b      	ldrb	r3, [r7, #21]
 800c5ae:	683a      	ldr	r2, [r7, #0]
 800c5b0:	b2d2      	uxtb	r2, r2
 800c5b2:	f107 0118 	add.w	r1, r7, #24
 800c5b6:	440b      	add	r3, r1
 800c5b8:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800c5bc:	7d7b      	ldrb	r3, [r7, #21]
 800c5be:	3301      	adds	r3, #1
 800c5c0:	757b      	strb	r3, [r7, #21]
            }
            if (rawMessageLen == 0U)
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d109      	bne.n	800c5dc <ndefT5TPollerWriteRawMessageLen+0xb4>
            {
                TLV[len] = NDEF_TERMINATOR_TLV_T; /* TLV terminator */
 800c5c8:	7d7b      	ldrb	r3, [r7, #21]
 800c5ca:	f107 0218 	add.w	r2, r7, #24
 800c5ce:	4413      	add	r3, r2
 800c5d0:	22fe      	movs	r2, #254	; 0xfe
 800c5d2:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800c5d6:	7d7b      	ldrb	r3, [r7, #21]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	757b      	strb	r3, [r7, #21]
            }

            result = ndefT5TPollerWriteBytes(ctx, ctx->subCtx.t5t.TlvNDEFOffset, TLV, len);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800c5e2:	7d7b      	ldrb	r3, [r7, #21]
 800c5e4:	f107 020c 	add.w	r2, r7, #12
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7ff fe8f 	bl	800c30c <ndefT5TPollerWriteBytes>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	82fb      	strh	r3, [r7, #22]
            if ((result == ERR_NONE) && (rawMessageLen != 0U))
 800c5f2:	8afb      	ldrh	r3, [r7, #22]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d11b      	bne.n	800c630 <ndefT5TPollerWriteRawMessageLen+0x108>
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d018      	beq.n	800c630 <ndefT5TPollerWriteRawMessageLen+0x108>
            {  /* T5T need specific terminator */
               len = 0U;
 800c5fe:	2300      	movs	r3, #0
 800c600:	757b      	strb	r3, [r7, #21]
               TLV[len] = NDEF_TERMINATOR_TLV_T; /* TLV terminator */
 800c602:	7d7b      	ldrb	r3, [r7, #21]
 800c604:	f107 0218 	add.w	r2, r7, #24
 800c608:	4413      	add	r3, r2
 800c60a:	22fe      	movs	r2, #254	; 0xfe
 800c60c:	f803 2c0c 	strb.w	r2, [r3, #-12]
               len++;
 800c610:	7d7b      	ldrb	r3, [r7, #21]
 800c612:	3301      	adds	r3, #1
 800c614:	757b      	strb	r3, [r7, #21]
               result = ndefT5TPollerWriteBytes(ctx, ctx->messageOffset + rawMessageLen, TLV, len );
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	18d1      	adds	r1, r2, r3
 800c620:	7d7b      	ldrb	r3, [r7, #21]
 800c622:	f107 020c 	add.w	r2, r7, #12
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7ff fe70 	bl	800c30c <ndefT5TPollerWriteBytes>
 800c62c:	4603      	mov	r3, r0
 800c62e:	82fb      	strh	r3, [r7, #22]
            }
        }
    }
    return result;
 800c630:	8afb      	ldrh	r3, [r7, #22]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3718      	adds	r7, #24
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}

0800c63a <ndefT5TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteRawMessage(ndefContext *ctx, const uint8_t * buf, uint32_t bufLen)
{
 800c63a:	b580      	push	{r7, lr}
 800c63c:	b086      	sub	sp, #24
 800c63e:	af00      	add	r7, sp, #0
 800c640:	60f8      	str	r0, [r7, #12]
 800c642:	60b9      	str	r1, [r7, #8]
 800c644:	607a      	str	r2, [r7, #4]
    uint32_t   len = bufLen ;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	613b      	str	r3, [r7, #16]
    ReturnCode result;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (buf == NULL) )
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d006      	beq.n	800c65e <ndefT5TPollerWriteRawMessage+0x24>
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	2b03      	cmp	r3, #3
 800c656:	d102      	bne.n	800c65e <ndefT5TPollerWriteRawMessage+0x24>
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d101      	bne.n	800c662 <ndefT5TPollerWriteRawMessage+0x28>
    {
        return ERR_PARAM;
 800c65e:	2307      	movs	r3, #7
 800c660:	e04b      	b.n	800c6fa <ndefT5TPollerWriteRawMessage+0xc0>

    /* TS T5T v1.0 7.5.3.1/2: T5T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T5T v1.0 7.5.3.3: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d006      	beq.n	800c67a <ndefT5TPollerWriteRawMessage+0x40>
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c672:	2b02      	cmp	r3, #2
 800c674:	d001      	beq.n	800c67a <ndefT5TPollerWriteRawMessage+0x40>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 800c676:	2321      	movs	r3, #33	; 0x21
 800c678:	e03f      	b.n	800c6fa <ndefT5TPollerWriteRawMessage+0xc0>
    }

    /* TS T5T v1.0 7.5.3.3: verify available space */
    result = ndefT5TPollerCheckAvailableSpace(ctx, bufLen);
 800c67a:	6879      	ldr	r1, [r7, #4]
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f000 fa56 	bl	800cb2e <ndefT5TPollerCheckAvailableSpace>
 800c682:	4603      	mov	r3, r0
 800c684:	82fb      	strh	r3, [r7, #22]
    if( result != ERR_NONE )
 800c686:	8afb      	ldrh	r3, [r7, #22]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d001      	beq.n	800c690 <ndefT5TPollerWriteRawMessage+0x56>
    {
        /* Conclude procedures */
        return ERR_PARAM;
 800c68c:	2307      	movs	r3, #7
 800c68e:	e034      	b.n	800c6fa <ndefT5TPollerWriteRawMessage+0xc0>
    }
    /* TS T5T v1.0 7.5.3.4: reset L-Field to 0 */
    /* and update ctx->messageOffset according to L-field len */
    result = ndefT5TPollerBeginWriteMessage(ctx, bufLen);
 800c690:	6879      	ldr	r1, [r7, #4]
 800c692:	68f8      	ldr	r0, [r7, #12]
 800c694:	f000 fa80 	bl	800cb98 <ndefT5TPollerBeginWriteMessage>
 800c698:	4603      	mov	r3, r0
 800c69a:	82fb      	strh	r3, [r7, #22]
    if  (result != ERR_NONE)
 800c69c:	8afb      	ldrh	r3, [r7, #22]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d005      	beq.n	800c6ae <ndefT5TPollerWriteRawMessage+0x74>
    {
        ctx->state = NDEF_STATE_INVALID;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return result;
 800c6aa:	8afb      	ldrh	r3, [r7, #22]
 800c6ac:	e025      	b.n	800c6fa <ndefT5TPollerWriteRawMessage+0xc0>
    }
    if( bufLen != 0U )
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d021      	beq.n	800c6f8 <ndefT5TPollerWriteRawMessage+0xbe>
    {
        /* TS T5T v1.0 7.5.3.5: write new NDEF message */
        result = ndefT5TPollerWriteBytes(ctx, ctx->messageOffset, buf, len);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	68ba      	ldr	r2, [r7, #8]
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f7ff fe24 	bl	800c30c <ndefT5TPollerWriteBytes>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	82fb      	strh	r3, [r7, #22]
        if  (result != ERR_NONE)
 800c6c8:	8afb      	ldrh	r3, [r7, #22]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d005      	beq.n	800c6da <ndefT5TPollerWriteRawMessage+0xa0>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return result;
 800c6d6:	8afb      	ldrh	r3, [r7, #22]
 800c6d8:	e00f      	b.n	800c6fa <ndefT5TPollerWriteRawMessage+0xc0>
        }
        /* TS T5T v1.0 7.5.3.6 & 7.5.3.7: update L-Field and write Terminator TLV */
        result = ndefT5TPollerEndWriteMessage(ctx, len);
 800c6da:	6939      	ldr	r1, [r7, #16]
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	f000 faa9 	bl	800cc34 <ndefT5TPollerEndWriteMessage>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	82fb      	strh	r3, [r7, #22]
        if  (result != ERR_NONE)
 800c6e6:	8afb      	ldrh	r3, [r7, #22]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d005      	beq.n	800c6f8 <ndefT5TPollerWriteRawMessage+0xbe>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return result;
 800c6f4:	8afb      	ldrh	r3, [r7, #22]
 800c6f6:	e000      	b.n	800c6fa <ndefT5TPollerWriteRawMessage+0xc0>
        }
    }
    return result;
 800c6f8:	8afb      	ldrh	r3, [r7, #22]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3718      	adds	r7, #24
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <ndefT5TWriteCC>:

/*******************************************************************************/
static ReturnCode ndefT5TWriteCC(ndefContext *ctx)
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b084      	sub	sp, #16
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
    ReturnCode  ret;
    uint8_t*    buf;
    uint8_t     dataIt;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d003      	beq.n	800c718 <ndefT5TWriteCC+0x16>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	2b03      	cmp	r3, #3
 800c716:	d001      	beq.n	800c71c <ndefT5TWriteCC+0x1a>
    {
        return ERR_PARAM;
 800c718:	2307      	movs	r3, #7
 800c71a:	e0c9      	b.n	800c8b0 <ndefT5TWriteCC+0x1ae>
    }

    buf    = ctx->ccBuf;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	339c      	adds	r3, #156	; 0x9c
 800c720:	60fb      	str	r3, [r7, #12]
    dataIt = 0U;
 800c722:	2300      	movs	r3, #0
 800c724:	72fb      	strb	r3, [r7, #11]
    /* Encode CC */
    buf[dataIt] = ctx->cc.t5t.magicNumber;                                                                /* Byte 0 */
 800c726:	7afb      	ldrb	r3, [r7, #11]
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	4413      	add	r3, r2
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	f892 207d 	ldrb.w	r2, [r2, #125]	; 0x7d
 800c732:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800c734:	7afb      	ldrb	r3, [r7, #11]
 800c736:	3301      	adds	r3, #1
 800c738:	72fb      	strb	r3, [r7, #11]
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800c740:	019b      	lsls	r3, r3, #6
 800c742:	b2da      	uxtb	r2, r3
                            ((ctx->cc.t5t.minorVersion  & 0x03U) << 4) |                                  /*        */
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800c74a:	011b      	lsls	r3, r3, #4
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c752:	b2db      	uxtb	r3, r3
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 800c754:	4313      	orrs	r3, r2
 800c756:	b2da      	uxtb	r2, r3
                            ((ctx->cc.t5t.readAccess    & 0x03U) << 2) |                                  /*        */
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	b2db      	uxtb	r3, r3
 800c762:	f003 030c 	and.w	r3, r3, #12
 800c766:	b2db      	uxtb	r3, r3
                            ((ctx->cc.t5t.minorVersion  & 0x03U) << 4) |                                  /*        */
 800c768:	4313      	orrs	r3, r2
 800c76a:	b2d9      	uxtb	r1, r3
                            ((ctx->cc.t5t.writeAccess   & 0x03U) << 0));                                  /*        */
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c772:	f003 0303 	and.w	r3, r3, #3
 800c776:	b2da      	uxtb	r2, r3
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 800c778:	7afb      	ldrb	r3, [r7, #11]
 800c77a:	68f8      	ldr	r0, [r7, #12]
 800c77c:	4403      	add	r3, r0
 800c77e:	430a      	orrs	r2, r1
 800c780:	b2d2      	uxtb	r2, r2
 800c782:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800c784:	7afb      	ldrb	r3, [r7, #11]
 800c786:	3301      	adds	r3, #1
 800c788:	72fb      	strb	r3, [r7, #11]
    buf[dataIt] = (ctx->cc.t5t.ccLen == NDEF_T5T_CC_LEN_8_BYTES) ? 0U : (uint8_t)ctx->cc.t5t.memoryLen;   /* Byte 2 */
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c790:	2b08      	cmp	r3, #8
 800c792:	d004      	beq.n	800c79e <ndefT5TWriteCC+0x9c>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c79a:	b2d9      	uxtb	r1, r3
 800c79c:	e000      	b.n	800c7a0 <ndefT5TWriteCC+0x9e>
 800c79e:	2100      	movs	r1, #0
 800c7a0:	7afb      	ldrb	r3, [r7, #11]
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	460a      	mov	r2, r1
 800c7a8:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800c7aa:	7afb      	ldrb	r3, [r7, #11]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	72fb      	strb	r3, [r7, #11]
    buf[dataIt]   = 0U;                                                                                   /* Byte 3 */
 800c7b0:	7afb      	ldrb	r3, [r7, #11]
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.multipleBlockRead ) { buf[dataIt] |= 0x01U; }                                         /* Byte 3  b0 MBREAD                */
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00a      	beq.n	800c7da <ndefT5TWriteCC+0xd8>
 800c7c4:	7afb      	ldrb	r3, [r7, #11]
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	781a      	ldrb	r2, [r3, #0]
 800c7cc:	7afb      	ldrb	r3, [r7, #11]
 800c7ce:	68f9      	ldr	r1, [r7, #12]
 800c7d0:	440b      	add	r3, r1
 800c7d2:	f042 0201 	orr.w	r2, r2, #1
 800c7d6:	b2d2      	uxtb	r2, r2
 800c7d8:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.mlenOverflow )      { buf[dataIt] |= 0x04U; }                                         /* Byte 3  b2 Android MLEN overflow */
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00a      	beq.n	800c7fa <ndefT5TWriteCC+0xf8>
 800c7e4:	7afb      	ldrb	r3, [r7, #11]
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	781a      	ldrb	r2, [r3, #0]
 800c7ec:	7afb      	ldrb	r3, [r7, #11]
 800c7ee:	68f9      	ldr	r1, [r7, #12]
 800c7f0:	440b      	add	r3, r1
 800c7f2:	f042 0204 	orr.w	r2, r2, #4
 800c7f6:	b2d2      	uxtb	r2, r2
 800c7f8:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.lockBlock )         { buf[dataIt] |= 0x08U; }                                         /* Byte 3  b3 Lock Block            */
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00a      	beq.n	800c81a <ndefT5TWriteCC+0x118>
 800c804:	7afb      	ldrb	r3, [r7, #11]
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	4413      	add	r3, r2
 800c80a:	781a      	ldrb	r2, [r3, #0]
 800c80c:	7afb      	ldrb	r3, [r7, #11]
 800c80e:	68f9      	ldr	r1, [r7, #12]
 800c810:	440b      	add	r3, r1
 800c812:	f042 0208 	orr.w	r2, r2, #8
 800c816:	b2d2      	uxtb	r2, r2
 800c818:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.specialFrame )      { buf[dataIt] |= 0x10U; }                                         /* Byte 3  b4 Special Frame         */
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00a      	beq.n	800c83a <ndefT5TWriteCC+0x138>
 800c824:	7afb      	ldrb	r3, [r7, #11]
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	4413      	add	r3, r2
 800c82a:	781a      	ldrb	r2, [r3, #0]
 800c82c:	7afb      	ldrb	r3, [r7, #11]
 800c82e:	68f9      	ldr	r1, [r7, #12]
 800c830:	440b      	add	r3, r1
 800c832:	f042 0210 	orr.w	r2, r2, #16
 800c836:	b2d2      	uxtb	r2, r2
 800c838:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800c83a:	7afb      	ldrb	r3, [r7, #11]
 800c83c:	3301      	adds	r3, #1
 800c83e:	72fb      	strb	r3, [r7, #11]
    if( ctx->cc.t5t.ccLen == NDEF_T5T_CC_LEN_8_BYTES )
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c846:	2b08      	cmp	r3, #8
 800c848:	d127      	bne.n	800c89a <ndefT5TWriteCC+0x198>
    {
        buf[dataIt] = 0U;                                                                                 /* Byte 4 */
 800c84a:	7afb      	ldrb	r3, [r7, #11]
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	4413      	add	r3, r2
 800c850:	2200      	movs	r2, #0
 800c852:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800c854:	7afb      	ldrb	r3, [r7, #11]
 800c856:	3301      	adds	r3, #1
 800c858:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = 0U;                                                                                 /* Byte 5 */
 800c85a:	7afb      	ldrb	r3, [r7, #11]
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	4413      	add	r3, r2
 800c860:	2200      	movs	r2, #0
 800c862:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800c864:	7afb      	ldrb	r3, [r7, #11]
 800c866:	3301      	adds	r3, #1
 800c868:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = (uint8_t)(ctx->cc.t5t.memoryLen >> 8);                                              /* Byte 6 */
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c870:	0a1b      	lsrs	r3, r3, #8
 800c872:	b299      	uxth	r1, r3
 800c874:	7afb      	ldrb	r3, [r7, #11]
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	4413      	add	r3, r2
 800c87a:	b2ca      	uxtb	r2, r1
 800c87c:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800c87e:	7afb      	ldrb	r3, [r7, #11]
 800c880:	3301      	adds	r3, #1
 800c882:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = (uint8_t)(ctx->cc.t5t.memoryLen >> 0);                                              /* Byte 7 */
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800c88a:	7afb      	ldrb	r3, [r7, #11]
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	4413      	add	r3, r2
 800c890:	b2ca      	uxtb	r2, r1
 800c892:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800c894:	7afb      	ldrb	r3, [r7, #11]
 800c896:	3301      	adds	r3, #1
 800c898:	72fb      	strb	r3, [r7, #11]
    }

    ret = ndefT5TPollerWriteBytes(ctx, 0U, buf, ctx->cc.t5t.ccLen );
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7ff fd31 	bl	800c30c <ndefT5TPollerWriteBytes>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	813b      	strh	r3, [r7, #8]
    return ret;
 800c8ae:	893b      	ldrh	r3, [r7, #8]
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3710      	adds	r7, #16
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <ndefT5TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT5TPollerTagFormat(ndefContext * ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b088      	sub	sp, #32
 800c8bc:	af02      	add	r7, sp, #8
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
    uint16_t                 rcvdLen;
    ReturnCode               result;
    static const uint8_t     emptyNDEF[] = { 0x03U, 0x00U, 0xFEU, 0x00U};

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d003      	beq.n	800c8d2 <ndefT5TPollerTagFormat+0x1a>
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d001      	beq.n	800c8d6 <ndefT5TPollerTagFormat+0x1e>
    {
        return ERR_PARAM;
 800c8d2:	2307      	movs	r3, #7
 800c8d4:	e103      	b.n	800cade <ndefT5TPollerTagFormat+0x226>
    }

    /* Reset previous potential info about NDEF messages */
    ctx->messageLen               = 0U;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset            = 0U;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->subCtx.t5t.TlvNDEFOffset = 0U;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    if( cc != NULL )
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d011      	beq.n	800c918 <ndefT5TPollerTagFormat+0x60>
    {
        if( (cc->t5t.ccLen != NDEF_T5T_CC_LEN_8_BYTES) && (cc->t5t.ccLen != NDEF_T5T_CC_LEN_4_BYTES) )
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	2b08      	cmp	r3, #8
 800c8fa:	d005      	beq.n	800c908 <ndefT5TPollerTagFormat+0x50>
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	2b04      	cmp	r3, #4
 800c902:	d001      	beq.n	800c908 <ndefT5TPollerTagFormat+0x50>
        {
            return ERR_PARAM;
 800c904:	2307      	movs	r3, #7
 800c906:	e0ea      	b.n	800cade <ndefT5TPollerTagFormat+0x226>
        }
        (void)ST_MEMCPY(&ctx->cc, cc, sizeof(ndefCapabilityContainer));
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	337c      	adds	r3, #124	; 0x7c
 800c90c:	2214      	movs	r2, #20
 800c90e:	68b9      	ldr	r1, [r7, #8]
 800c910:	4618      	mov	r0, r3
 800c912:	f00c fa70 	bl	8018df6 <memcpy>
 800c916:	e09b      	b.n	800ca50 <ndefT5TPollerTagFormat+0x198>
    }
    else
    {
        /* Try to find the appropriate cc values */
        ctx->cc.t5t.magicNumber  = NDEF_T5T_CC_MAGIC_1_BYTE_ADDR_MODE; /* E1 */
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	22e1      	movs	r2, #225	; 0xe1
 800c91c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        ctx->cc.t5t.majorVersion = 1U;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2201      	movs	r2, #1
 800c924:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        ctx->cc.t5t.minorVersion = 0U;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        ctx->cc.t5t.readAccess   = 0U;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2200      	movs	r2, #0
 800c934:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        ctx->cc.t5t.writeAccess  = 0U;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        ctx->cc.t5t.lockBlock    = false;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2200      	movs	r2, #0
 800c944:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
        ctx->cc.t5t.specialFrame = false;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2200      	movs	r2, #0
 800c94c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
        ctx->cc.t5t.memoryLen    = 0U;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2200      	movs	r2, #0
 800c954:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        ctx->cc.t5t.mlenOverflow = false;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85

        result = ndefT5TPollerReadMultipleBlocks(ctx, 0U, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvdLen);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800c966:	f107 0314 	add.w	r3, r7, #20
 800c96a:	9301      	str	r3, [sp, #4]
 800c96c:	2323      	movs	r3, #35	; 0x23
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	4613      	mov	r3, r2
 800c972:	2200      	movs	r2, #0
 800c974:	2100      	movs	r1, #0
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	f000 f9e7 	bl	800cd4a <ndefT5TPollerReadMultipleBlocks>
 800c97c:	4603      	mov	r3, r0
 800c97e:	82fb      	strh	r3, [r7, #22]
        ctx->cc.t5t.multipleBlockRead = (result ==  ERR_NONE) ? true : false;
 800c980:	8afb      	ldrh	r3, [r7, #22]
 800c982:	2b00      	cmp	r3, #0
 800c984:	bf0c      	ite	eq
 800c986:	2301      	moveq	r3, #1
 800c988:	2300      	movne	r3, #0
 800c98a:	b2da      	uxtb	r2, r3
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        /* Try to retrieve the tag's size using getSystemInfo and GetExtSystemInfo */

        if ( (ctx->subCtx.t5t.sysInfoSupported==true) && (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!=0U) )
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d056      	beq.n	800ca4a <ndefT5TPollerTagFormat+0x192>
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800c9a2:	089b      	lsrs	r3, r3, #2
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	f003 0301 	and.w	r3, r3, #1
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d04d      	beq.n	800ca4a <ndefT5TPollerTagFormat+0x192>
        {
            ctx->cc.t5t.memoryLen =  (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800c9bc:	fb03 f302 	mul.w	r3, r3, r2
 800c9c0:	08db      	lsrs	r3, r3, #3
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

            if( (options & NDEF_T5T_FORMAT_OPTION_NFC_FORUM) == NDEF_T5T_FORMAT_OPTION_NFC_FORUM ) /* NFC Forum format */
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f003 0301 	and.w	r3, r3, #1
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d016      	beq.n	800ca02 <ndefT5TPollerTagFormat+0x14a>
            {
                if( ctx->cc.t5t.memoryLen >= NDEF_T5T_MAX_MLEN_1_BYTE_ENCODING )
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c9da:	2bff      	cmp	r3, #255	; 0xff
 800c9dc:	d903      	bls.n	800c9e6 <ndefT5TPollerTagFormat+0x12e>
                {
                    ctx->cc.t5t.ccLen =  NDEF_T5T_CC_LEN_8_BYTES;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2208      	movs	r2, #8
 800c9e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                }
                if( ctx->cc.t5t.memoryLen > 0U )
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d019      	beq.n	800ca24 <ndefT5TPollerTagFormat+0x16c>
                {
                    ctx->cc.t5t.memoryLen--; /* remove CC area from memory len */
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800ca00:	e010      	b.n	800ca24 <ndefT5TPollerTagFormat+0x16c>
                }
            }
            else /* Android format */
            {
                ctx->cc.t5t.ccLen = NDEF_T5T_CC_LEN_4_BYTES;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2204      	movs	r2, #4
 800ca06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                 if( ctx->cc.t5t.memoryLen >= NDEF_T5T_MAX_MLEN_1_BYTE_ENCODING )
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ca10:	2bff      	cmp	r3, #255	; 0xff
 800ca12:	d907      	bls.n	800ca24 <ndefT5TPollerTagFormat+0x16c>
                {
                    ctx->cc.t5t.mlenOverflow = true;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                    ctx->cc.t5t.memoryLen    = 0xFFU;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	22ff      	movs	r2, #255	; 0xff
 800ca20:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                }
            }

            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800ca2a:	f083 0301 	eor.w	r3, r3, #1
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d00c      	beq.n	800ca4e <ndefT5TPollerTagFormat+0x196>
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800ca3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca3e:	d906      	bls.n	800ca4e <ndefT5TPollerTagFormat+0x196>
            {
                ctx->cc.t5t.magicNumber = NDEF_T5T_CC_MAGIC_2_BYTE_ADDR_MODE; /* E2 */
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	22e2      	movs	r2, #226	; 0xe2
 800ca44:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 800ca48:	e001      	b.n	800ca4e <ndefT5TPollerTagFormat+0x196>
            }
        }
        else
        {
            return ERR_REQUEST;
 800ca4a:	2305      	movs	r3, #5
 800ca4c:	e047      	b.n	800cade <ndefT5TPollerTagFormat+0x226>
            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 800ca4e:	bf00      	nop
        }
    }

    result = ndefT5TWriteCC(ctx);
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f7ff fe56 	bl	800c702 <ndefT5TWriteCC>
 800ca56:	4603      	mov	r3, r0
 800ca58:	82fb      	strh	r3, [r7, #22]
    if( result != ERR_NONE )
 800ca5a:	8afb      	ldrh	r3, [r7, #22]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d01e      	beq.n	800ca9e <ndefT5TPollerTagFormat+0x1e6>
    {
        /* If write fails, try to use special frame if not yet used */
        if( !ctx->cc.t5t.specialFrame )
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800ca66:	f083 0301 	eor.w	r3, r3, #1
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d014      	beq.n	800ca9a <ndefT5TPollerTagFormat+0x1e2>
        {
            platformDelay(20U); /* Wait to be sure that previous command has ended */
 800ca70:	2014      	movs	r0, #20
 800ca72:	f7f7 fc79 	bl	8004368 <HAL_Delay>
            ctx->cc.t5t.specialFrame = true; /* Add option flag */
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
            result = ndefT5TWriteCC(ctx);
 800ca7e:	68f8      	ldr	r0, [r7, #12]
 800ca80:	f7ff fe3f 	bl	800c702 <ndefT5TWriteCC>
 800ca84:	4603      	mov	r3, r0
 800ca86:	82fb      	strh	r3, [r7, #22]
            if( result != ERR_NONE )
 800ca88:	8afb      	ldrh	r3, [r7, #22]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d007      	beq.n	800ca9e <ndefT5TPollerTagFormat+0x1e6>
            {
                ctx->cc.t5t.specialFrame = false; /* Add option flag */
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                return result;
 800ca96:	8afb      	ldrh	r3, [r7, #22]
 800ca98:	e021      	b.n	800cade <ndefT5TPollerTagFormat+0x226>
            }
        }
        else
        {
           return result;
 800ca9a:	8afb      	ldrh	r3, [r7, #22]
 800ca9c:	e01f      	b.n	800cade <ndefT5TPollerTagFormat+0x226>
        }
    }
    /* Update info about current NDEF */

    ctx->subCtx.t5t.TlvNDEFOffset = ctx->cc.t5t.ccLen;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800caa4:	461a      	mov	r2, r3
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    result = ndefT5TPollerWriteBytes(ctx, ctx->subCtx.t5t.TlvNDEFOffset, emptyNDEF, sizeof(emptyNDEF) );
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800cab2:	2304      	movs	r3, #4
 800cab4:	4a0c      	ldr	r2, [pc, #48]	; (800cae8 <ndefT5TPollerTagFormat+0x230>)
 800cab6:	68f8      	ldr	r0, [r7, #12]
 800cab8:	f7ff fc28 	bl	800c30c <ndefT5TPollerWriteBytes>
 800cabc:	4603      	mov	r3, r0
 800cabe:	82fb      	strh	r3, [r7, #22]
    if (result == ERR_NONE)
 800cac0:	8afb      	ldrh	r3, [r7, #22]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10a      	bne.n	800cadc <ndefT5TPollerTagFormat+0x224>
    {
        /* Update info about current NDEF */
        ctx->messageOffset = (uint32_t)ctx->cc.t5t.ccLen + 0x02U;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cacc:	1c9a      	adds	r2, r3, #2
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        ctx->state         = NDEF_STATE_INITIALIZED;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2201      	movs	r2, #1
 800cad8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return result;
 800cadc:	8afb      	ldrh	r3, [r7, #22]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3718      	adds	r7, #24
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	0801aeb4 	.word	0x0801aeb4

0800caec <ndefT5TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT5TPollerCheckPresence(ndefContext *ctx)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af02      	add	r7, sp, #8
 800caf2:	6078      	str	r0, [r7, #4]
    ReturnCode          ret;
    uint16_t            blockAddr;
    uint16_t            rcvLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d003      	beq.n	800cb02 <ndefT5TPollerCheckPresence+0x16>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	2b03      	cmp	r3, #3
 800cb00:	d001      	beq.n	800cb06 <ndefT5TPollerCheckPresence+0x1a>
    {
        return ERR_PARAM;
 800cb02:	2307      	movs	r3, #7
 800cb04:	e00f      	b.n	800cb26 <ndefT5TPollerCheckPresence+0x3a>
    }

    blockAddr = 0U;
 800cb06:	2300      	movs	r3, #0
 800cb08:	81fb      	strh	r3, [r7, #14]

    ret = ndefT5TPollerReadSingleBlock( ctx, blockAddr, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800cb10:	89f9      	ldrh	r1, [r7, #14]
 800cb12:	f107 030a 	add.w	r3, r7, #10
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	2323      	movs	r3, #35	; 0x23
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 f96b 	bl	800cdf6 <ndefT5TPollerReadSingleBlock>
 800cb20:	4603      	mov	r3, r0
 800cb22:	81bb      	strh	r3, [r7, #12]

    return ret;
 800cb24:	89bb      	ldrh	r3, [r7, #12]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <ndefT5TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT5TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b085      	sub	sp, #20
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
 800cb36:	6039      	str	r1, [r7, #0]
    uint32_t            lLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d003      	beq.n	800cb46 <ndefT5TPollerCheckAvailableSpace+0x18>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	2b03      	cmp	r3, #3
 800cb44:	d001      	beq.n	800cb4a <ndefT5TPollerCheckAvailableSpace+0x1c>
    {
        return ERR_PARAM;
 800cb46:	2307      	movs	r3, #7
 800cb48:	e021      	b.n	800cb8e <ndefT5TPollerCheckAvailableSpace+0x60>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d101      	bne.n	800cb58 <ndefT5TPollerCheckAvailableSpace+0x2a>
    {
        return ERR_WRONG_STATE;
 800cb54:	2321      	movs	r3, #33	; 0x21
 800cb56:	e01a      	b.n	800cb8e <ndefT5TPollerCheckAvailableSpace+0x60>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T5T_TLV_L_3_BYTES_LEN : NDEF_T5T_TLV_L_1_BYTES_LEN;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	2bfe      	cmp	r3, #254	; 0xfe
 800cb5c:	d901      	bls.n	800cb62 <ndefT5TPollerCheckAvailableSpace+0x34>
 800cb5e:	2303      	movs	r3, #3
 800cb60:	e000      	b.n	800cb64 <ndefT5TPollerCheckAvailableSpace+0x36>
 800cb62:	2301      	movs	r3, #1
 800cb64:	60fb      	str	r3, [r7, #12]

    if( (messageLen + ctx->subCtx.t5t.TlvNDEFOffset + NDEF_T5T_TLV_T_LEN + lLen) > (ctx->areaLen + ctx->cc.t5t.ccLen) )
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	441a      	add	r2, r3
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	4413      	add	r3, r2
 800cb74:	1c5a      	adds	r2, r3, #1
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cb7c:	6879      	ldr	r1, [r7, #4]
 800cb7e:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
 800cb82:	440b      	add	r3, r1
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d901      	bls.n	800cb8c <ndefT5TPollerCheckAvailableSpace+0x5e>
    {
        return ERR_NOMEM;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e000      	b.n	800cb8e <ndefT5TPollerCheckAvailableSpace+0x60>
    }
    return ERR_NONE;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3714      	adds	r7, #20
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bc80      	pop	{r7}
 800cb96:	4770      	bx	lr

0800cb98 <ndefT5TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d003      	beq.n	800cbb0 <ndefT5TPollerBeginWriteMessage+0x18>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	2b03      	cmp	r3, #3
 800cbae:	d001      	beq.n	800cbb4 <ndefT5TPollerBeginWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800cbb0:	2307      	movs	r3, #7
 800cbb2:	e03b      	b.n	800cc2c <ndefT5TPollerBeginWriteMessage+0x94>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d006      	beq.n	800cbcc <ndefT5TPollerBeginWriteMessage+0x34>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	d001      	beq.n	800cbcc <ndefT5TPollerBeginWriteMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800cbc8:	2321      	movs	r3, #33	; 0x21
 800cbca:	e02f      	b.n	800cc2c <ndefT5TPollerBeginWriteMessage+0x94>
    }

    /* TS T5T v1.0 7.5.3.4: reset L-Field to 0 */
    ret = ndefT5TPollerWriteRawMessageLen(ctx, 0U);
 800cbcc:	2100      	movs	r1, #0
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f7ff fcaa 	bl	800c528 <ndefT5TPollerWriteRawMessageLen>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800cbd8:	89fb      	ldrh	r3, [r7, #14]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d005      	beq.n	800cbea <ndefT5TPollerBeginWriteMessage+0x52>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800cbe6:	89fb      	ldrh	r3, [r7, #14]
 800cbe8:	e020      	b.n	800cc2c <ndefT5TPollerBeginWriteMessage+0x94>
    }

    lLen                = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T5T_TLV_L_3_BYTES_LEN : NDEF_T5T_TLV_L_1_BYTES_LEN;
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	2bfe      	cmp	r3, #254	; 0xfe
 800cbee:	d901      	bls.n	800cbf4 <ndefT5TPollerBeginWriteMessage+0x5c>
 800cbf0:	2303      	movs	r3, #3
 800cbf2:	e000      	b.n	800cbf6 <ndefT5TPollerBeginWriteMessage+0x5e>
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	60bb      	str	r3, [r7, #8]
    ctx->messageOffset  = ctx->subCtx.t5t.TlvNDEFOffset;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += NDEF_T5T_TLV_T_LEN; /* T Len */
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc0a:	1c5a      	adds	r2, r3, #1
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += lLen;               /* L Len */
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	441a      	add	r2, r3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->state          = NDEF_STATE_INITIALIZED;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2201      	movs	r2, #1
 800cc26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3710      	adds	r7, #16
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <ndefT5TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d003      	beq.n	800cc4c <ndefT5TPollerEndWriteMessage+0x18>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	2b03      	cmp	r3, #3
 800cc4a:	d001      	beq.n	800cc50 <ndefT5TPollerEndWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800cc4c:	2307      	movs	r3, #7
 800cc4e:	e025      	b.n	800cc9c <ndefT5TPollerEndWriteMessage+0x68>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d001      	beq.n	800cc5e <ndefT5TPollerEndWriteMessage+0x2a>
    {
        return ERR_WRONG_STATE;
 800cc5a:	2321      	movs	r3, #33	; 0x21
 800cc5c:	e01e      	b.n	800cc9c <ndefT5TPollerEndWriteMessage+0x68>
    }

    /* TS T5T v1.0 7.5.3.6 & 7.5.3.7: update L-Field and write Terminator TLV */
    ret = ndefT5TPollerWriteRawMessageLen(ctx, messageLen);
 800cc5e:	6839      	ldr	r1, [r7, #0]
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f7ff fc61 	bl	800c528 <ndefT5TPollerWriteRawMessageLen>
 800cc66:	4603      	mov	r3, r0
 800cc68:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800cc6a:	89fb      	ldrh	r3, [r7, #14]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d005      	beq.n	800cc7c <ndefT5TPollerEndWriteMessage+0x48>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800cc78:	89fb      	ldrh	r3, [r7, #14]
 800cc7a:	e00f      	b.n	800cc9c <ndefT5TPollerEndWriteMessage+0x68>
    }
    ctx->messageLen = messageLen;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	683a      	ldr	r2, [r7, #0]
 800cc80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state      = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d101      	bne.n	800cc92 <ndefT5TPollerEndWriteMessage+0x5e>
 800cc8e:	2201      	movs	r2, #1
 800cc90:	e000      	b.n	800cc94 <ndefT5TPollerEndWriteMessage+0x60>
 800cc92:	2202      	movs	r2, #2
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <ndefT5TPollerWriteSingleBlock>:

/*******************************************************************************/
static ReturnCode ndefT5TPollerWriteSingleBlock(ndefContext *ctx, uint16_t blockNum, const uint8_t* wrData)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b088      	sub	sp, #32
 800cca8:	af02      	add	r7, sp, #8
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	460b      	mov	r3, r1
 800ccae:	607a      	str	r2, [r7, #4]
 800ccb0:	817b      	strh	r3, [r7, #10]
    ReturnCode                ret;
    uint8_t                   flags;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d003      	beq.n	800ccc0 <ndefT5TPollerWriteSingleBlock+0x1c>
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	2b03      	cmp	r3, #3
 800ccbe:	d001      	beq.n	800ccc4 <ndefT5TPollerWriteSingleBlock+0x20>
    {
        return ERR_PARAM;
 800ccc0:	2307      	movs	r3, #7
 800ccc2:	e03e      	b.n	800cd42 <ndefT5TPollerWriteSingleBlock+0x9e>
    }

    flags = ctx->cc.t5t.specialFrame ? ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT | (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION): (uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d001      	beq.n	800ccd2 <ndefT5TPollerWriteSingleBlock+0x2e>
 800ccce:	2342      	movs	r3, #66	; 0x42
 800ccd0:	e000      	b.n	800ccd4 <ndefT5TPollerWriteSingleBlock+0x30>
 800ccd2:	2302      	movs	r3, #2
 800ccd4:	757b      	strb	r3, [r7, #21]

    if( ctx->subCtx.t5t.legacySTHighDensity )
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d00e      	beq.n	800ccfe <ndefT5TPollerWriteSingleBlock+0x5a>
    {
        ret = rfalST25xVPollerM24LRWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, blockNum, wrData, ctx->subCtx.t5t.blockLen);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800ccec:	897a      	ldrh	r2, [r7, #10]
 800ccee:	7d78      	ldrb	r0, [r7, #21]
 800ccf0:	9300      	str	r3, [sp, #0]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f00b fbb6 	bl	8018464 <rfalST25xVPollerM24LRWriteSingleBlock>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	82fb      	strh	r3, [r7, #22]
 800ccfc:	e020      	b.n	800cd40 <ndefT5TPollerWriteSingleBlock+0x9c>
    }
    else
    {
        if( blockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 800ccfe:	897b      	ldrh	r3, [r7, #10]
 800cd00:	2bff      	cmp	r3, #255	; 0xff
 800cd02:	d80f      	bhi.n	800cd24 <ndefT5TPollerWriteSingleBlock+0x80>
        {
            ret = rfalNfcvPollerWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, (uint8_t)blockNum, wrData, ctx->subCtx.t5t.blockLen);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800cd0a:	897b      	ldrh	r3, [r7, #10]
 800cd0c:	b2da      	uxtb	r2, r3
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800cd14:	7d78      	ldrb	r0, [r7, #21]
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f007 ffde 	bl	8014cda <rfalNfcvPollerWriteSingleBlock>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	82fb      	strh	r3, [r7, #22]
 800cd22:	e00d      	b.n	800cd40 <ndefT5TPollerWriteSingleBlock+0x9c>
        }
        else
        {
            ret = rfalNfcvPollerExtendedWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, blockNum, wrData, ctx->subCtx.t5t.blockLen);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800cd30:	897a      	ldrh	r2, [r7, #10]
 800cd32:	7d78      	ldrb	r0, [r7, #21]
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f008 f88e 	bl	8014e58 <rfalNfcvPollerExtendedWriteSingleBlock>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 800cd40:	8afb      	ldrh	r3, [r7, #22]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3718      	adds	r7, #24
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <ndefT5TPollerReadMultipleBlocks>:

/*******************************************************************************/
static ReturnCode ndefT5TPollerReadMultipleBlocks(ndefContext *ctx, uint16_t firstBlockNum, uint8_t numOfBlocks, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b08a      	sub	sp, #40	; 0x28
 800cd4e:	af04      	add	r7, sp, #16
 800cd50:	60f8      	str	r0, [r7, #12]
 800cd52:	607b      	str	r3, [r7, #4]
 800cd54:	460b      	mov	r3, r1
 800cd56:	817b      	strh	r3, [r7, #10]
 800cd58:	4613      	mov	r3, r2
 800cd5a:	727b      	strb	r3, [r7, #9]
    ReturnCode                ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d003      	beq.n	800cd6a <ndefT5TPollerReadMultipleBlocks+0x20>
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	2b03      	cmp	r3, #3
 800cd68:	d001      	beq.n	800cd6e <ndefT5TPollerReadMultipleBlocks+0x24>
    {
        return ERR_PARAM;
 800cd6a:	2307      	movs	r3, #7
 800cd6c:	e03f      	b.n	800cdee <ndefT5TPollerReadMultipleBlocks+0xa4>
    }

    if( ctx->subCtx.t5t.legacySTHighDensity )
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d011      	beq.n	800cd9c <ndefT5TPollerReadMultipleBlocks+0x52>
    {

        ret = rfalST25xVPollerM24LRReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800cd7e:	7a78      	ldrb	r0, [r7, #9]
 800cd80:	897a      	ldrh	r2, [r7, #10]
 800cd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd84:	9302      	str	r3, [sp, #8]
 800cd86:	8c3b      	ldrh	r3, [r7, #32]
 800cd88:	9301      	str	r3, [sp, #4]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	9300      	str	r3, [sp, #0]
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2002      	movs	r0, #2
 800cd92:	f00b fbc9 	bl	8018528 <rfalST25xVPollerM24LRReadMultipleBlocks>
 800cd96:	4603      	mov	r3, r0
 800cd98:	82fb      	strh	r3, [r7, #22]
 800cd9a:	e027      	b.n	800cdec <ndefT5TPollerReadMultipleBlocks+0xa2>
    }
    else
    {
        if( firstBlockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 800cd9c:	897b      	ldrh	r3, [r7, #10]
 800cd9e:	2bff      	cmp	r3, #255	; 0xff
 800cda0:	d812      	bhi.n	800cdc8 <ndefT5TPollerReadMultipleBlocks+0x7e>
        {
            ret = rfalNfcvPollerReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800cda8:	897b      	ldrh	r3, [r7, #10]
 800cdaa:	b2da      	uxtb	r2, r3
 800cdac:	7a78      	ldrb	r0, [r7, #9]
 800cdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb0:	9302      	str	r3, [sp, #8]
 800cdb2:	8c3b      	ldrh	r3, [r7, #32]
 800cdb4:	9301      	str	r3, [sp, #4]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2002      	movs	r0, #2
 800cdbe:	f007 ffdc 	bl	8014d7a <rfalNfcvPollerReadMultipleBlocks>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	82fb      	strh	r3, [r7, #22]
 800cdc6:	e011      	b.n	800cdec <ndefT5TPollerReadMultipleBlocks+0xa2>
        }
        else
        {
            ret = rfalNfcvPollerExtendedReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800cdce:	7a7b      	ldrb	r3, [r7, #9]
 800cdd0:	b298      	uxth	r0, r3
 800cdd2:	897a      	ldrh	r2, [r7, #10]
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd6:	9302      	str	r3, [sp, #8]
 800cdd8:	8c3b      	ldrh	r3, [r7, #32]
 800cdda:	9301      	str	r3, [sp, #4]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	9300      	str	r3, [sp, #0]
 800cde0:	4603      	mov	r3, r0
 800cde2:	2002      	movs	r0, #2
 800cde4:	f008 f894 	bl	8014f10 <rfalNfcvPollerExtendedReadMultipleBlocks>
 800cde8:	4603      	mov	r3, r0
 800cdea:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 800cdec:	8afb      	ldrh	r3, [r7, #22]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3718      	adds	r7, #24
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}

0800cdf6 <ndefT5TPollerReadSingleBlock>:

#endif /* NDEF_FEATURE_ALL */

/*******************************************************************************/
static ReturnCode ndefT5TPollerReadSingleBlock(ndefContext *ctx, uint16_t blockNum, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen)
{
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b088      	sub	sp, #32
 800cdfa:	af02      	add	r7, sp, #8
 800cdfc:	60f8      	str	r0, [r7, #12]
 800cdfe:	607a      	str	r2, [r7, #4]
 800ce00:	461a      	mov	r2, r3
 800ce02:	460b      	mov	r3, r1
 800ce04:	817b      	strh	r3, [r7, #10]
 800ce06:	4613      	mov	r3, r2
 800ce08:	813b      	strh	r3, [r7, #8]
    ReturnCode                ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d003      	beq.n	800ce18 <ndefT5TPollerReadSingleBlock+0x22>
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	2b03      	cmp	r3, #3
 800ce16:	d001      	beq.n	800ce1c <ndefT5TPollerReadSingleBlock+0x26>
    {
        return ERR_PARAM;
 800ce18:	2307      	movs	r3, #7
 800ce1a:	e035      	b.n	800ce88 <ndefT5TPollerReadSingleBlock+0x92>
    }

    if( ctx->subCtx.t5t.legacySTHighDensity )
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d00e      	beq.n	800ce44 <ndefT5TPollerReadSingleBlock+0x4e>
    {

        ret = rfalST25xVPollerM24LRReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, blockNum, rxBuf, rxBufLen, rcvLen);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ce2c:	897a      	ldrh	r2, [r7, #10]
 800ce2e:	6a3b      	ldr	r3, [r7, #32]
 800ce30:	9301      	str	r3, [sp, #4]
 800ce32:	893b      	ldrh	r3, [r7, #8]
 800ce34:	9300      	str	r3, [sp, #0]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2002      	movs	r0, #2
 800ce3a:	f00b fad8 	bl	80183ee <rfalST25xVPollerM24LRReadSingleBlock>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	82fb      	strh	r3, [r7, #22]
 800ce42:	e020      	b.n	800ce86 <ndefT5TPollerReadSingleBlock+0x90>
    }
    else
    {
        if( blockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 800ce44:	897b      	ldrh	r3, [r7, #10]
 800ce46:	2bff      	cmp	r3, #255	; 0xff
 800ce48:	d80f      	bhi.n	800ce6a <ndefT5TPollerReadSingleBlock+0x74>
        {
            ret = rfalNfcvPollerReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)blockNum, rxBuf, rxBufLen, rcvLen);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ce50:	897b      	ldrh	r3, [r7, #10]
 800ce52:	b2da      	uxtb	r2, r3
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	9301      	str	r3, [sp, #4]
 800ce58:	893b      	ldrh	r3, [r7, #8]
 800ce5a:	9300      	str	r3, [sp, #0]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2002      	movs	r0, #2
 800ce60:	f007 ff1a 	bl	8014c98 <rfalNfcvPollerReadSingleBlock>
 800ce64:	4603      	mov	r3, r0
 800ce66:	82fb      	strh	r3, [r7, #22]
 800ce68:	e00d      	b.n	800ce86 <ndefT5TPollerReadSingleBlock+0x90>
        }
        else
        {
            ret = rfalNfcvPollerExtendedReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, blockNum, rxBuf, rxBufLen, rcvLen);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ce70:	897a      	ldrh	r2, [r7, #10]
 800ce72:	6a3b      	ldr	r3, [r7, #32]
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	893b      	ldrh	r3, [r7, #8]
 800ce78:	9300      	str	r3, [sp, #0]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2002      	movs	r0, #2
 800ce7e:	f007 ffb3 	bl	8014de8 <rfalNfcvPollerExtendedReadSingleBlock>
 800ce82:	4603      	mov	r3, r0
 800ce84:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 800ce86:	8afb      	ldrh	r3, [r7, #22]
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3718      	adds	r7, #24
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <ndefT5TGetSystemInformation>:

/*******************************************************************************/
static ReturnCode ndefT5TGetSystemInformation(ndefContext *ctx, bool extended)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08e      	sub	sp, #56	; 0x38
 800ce94:	af02      	add	r7, sp, #8
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	70fb      	strb	r3, [r7, #3]
    ReturnCode                ret;
    uint8_t                   rxBuf[NDEF_T5T_SYSINFO_MAX_LEN];
    uint16_t                  rcvLen;
    uint8_t*                  resp;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d003      	beq.n	800ceaa <ndefT5TGetSystemInformation+0x1a>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	2b03      	cmp	r3, #3
 800cea8:	d001      	beq.n	800ceae <ndefT5TGetSystemInformation+0x1e>
    {
        return ERR_PARAM;
 800ceaa:	2307      	movs	r3, #7
 800ceac:	e0ff      	b.n	800d0ae <ndefT5TGetSystemInformation+0x21e>
    }

    if( extended )
 800ceae:	78fb      	ldrb	r3, [r7, #3]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d011      	beq.n	800ced8 <ndefT5TGetSystemInformation+0x48>
    {
        ret = rfalNfcvPollerExtendedGetSystemInformation((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)RFAL_NFCV_SYSINFO_REQ_ALL, rxBuf, (uint16_t)sizeof(rxBuf), &rcvLen);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ceba:	f107 0210 	add.w	r2, r7, #16
 800cebe:	f107 030e 	add.w	r3, r7, #14
 800cec2:	9301      	str	r3, [sp, #4]
 800cec4:	2316      	movs	r3, #22
 800cec6:	9300      	str	r3, [sp, #0]
 800cec8:	4613      	mov	r3, r2
 800ceca:	227f      	movs	r2, #127	; 0x7f
 800cecc:	2002      	movs	r0, #2
 800cece:	f008 f88f 	bl	8014ff0 <rfalNfcvPollerExtendedGetSystemInformation>
 800ced2:	4603      	mov	r3, r0
 800ced4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ced6:	e014      	b.n	800cf02 <ndefT5TGetSystemInformation+0x72>
    }
    else
    {
        ret = rfalNfcvPollerGetSystemInformation(ctx->subCtx.t5t.legacySTHighDensity ? ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT) : ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT), ctx->subCtx.t5t.pAddressedUid, rxBuf, (uint16_t)sizeof(rxBuf), &rcvLen);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d001      	beq.n	800cee6 <ndefT5TGetSystemInformation+0x56>
 800cee2:	200a      	movs	r0, #10
 800cee4:	e000      	b.n	800cee8 <ndefT5TGetSystemInformation+0x58>
 800cee6:	2002      	movs	r0, #2
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ceee:	f107 0210 	add.w	r2, r7, #16
 800cef2:	f107 030e 	add.w	r3, r7, #14
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	2316      	movs	r3, #22
 800cefa:	f008 f85a 	bl	8014fb2 <rfalNfcvPollerGetSystemInformation>
 800cefe:	4603      	mov	r3, r0
 800cf00:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if( ret != ERR_NONE )
 800cf02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d001      	beq.n	800cf0c <ndefT5TGetSystemInformation+0x7c>
    {
        return ret;
 800cf08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf0a:	e0d0      	b.n	800d0ae <ndefT5TGetSystemInformation+0x21e>
    }

    /* FIXME check buf rcvLen */
    resp = &rxBuf[0U];
 800cf0c:	f107 0310 	add.w	r3, r7, #16
 800cf10:	62bb      	str	r3, [r7, #40]	; 0x28
    /* skip Flags */
    resp++;
 800cf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf14:	3301      	adds	r3, #1
 800cf16:	62bb      	str	r3, [r7, #40]	; 0x28
    /* get Info flags */
    ctx->subCtx.t5t.sysInfo.infoFlags = *resp;
 800cf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1a:	781a      	ldrb	r2, [r3, #0]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    resp++;
 800cf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf24:	3301      	adds	r3, #1
 800cf26:	62bb      	str	r3, [r7, #40]	; 0x28
    if( extended && (ndefT5TSysInfoLenValue(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 800cf28:	78fb      	ldrb	r3, [r7, #3]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00a      	beq.n	800cf44 <ndefT5TGetSystemInformation+0xb4>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800cf34:	09db      	lsrs	r3, r3, #7
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	f003 0301 	and.w	r3, r3, #1
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d001      	beq.n	800cf44 <ndefT5TGetSystemInformation+0xb4>
    {
        return ERR_PROTO;
 800cf40:	230b      	movs	r3, #11
 800cf42:	e0b4      	b.n	800d0ae <ndefT5TGetSystemInformation+0x21e>
    }
    /* get UID */
    (void)ST_MEMCPY(ctx->subCtx.t5t.sysInfo.UID, resp, RFAL_NFCV_UID_LEN);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	33c0      	adds	r3, #192	; 0xc0
 800cf48:	2208      	movs	r2, #8
 800cf4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f00b ff52 	bl	8018df6 <memcpy>
    resp = &resp[RFAL_NFCV_UID_LEN];
 800cf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf54:	3308      	adds	r3, #8
 800cf56:	62bb      	str	r3, [r7, #40]	; 0x28
    if( ndefT5TSysInfoDFSIDPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800cf5e:	f003 0301 	and.w	r3, r3, #1
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d007      	beq.n	800cf76 <ndefT5TGetSystemInformation+0xe6>
    {
        ctx->subCtx.t5t.sysInfo.DFSID = *resp;
 800cf66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf68:	781a      	ldrb	r2, [r3, #0]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
        resp++;
 800cf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf72:	3301      	adds	r3, #1
 800cf74:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( ndefT5TSysInfoAFIPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800cf7c:	085b      	lsrs	r3, r3, #1
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	f003 0301 	and.w	r3, r3, #1
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d007      	beq.n	800cf98 <ndefT5TGetSystemInformation+0x108>
    {
        ctx->subCtx.t5t.sysInfo.AFI = *resp;
 800cf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8a:	781a      	ldrb	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
        resp++;
 800cf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf94:	3301      	adds	r3, #1
 800cf96:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800cf9e:	089b      	lsrs	r3, r3, #2
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	f003 0301 	and.w	r3, r3, #1
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d043      	beq.n	800d032 <ndefT5TGetSystemInformation+0x1a2>
    {
        if ( ctx->subCtx.t5t.legacySTHighDensity || extended )
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d102      	bne.n	800cfba <ndefT5TGetSystemInformation+0x12a>
 800cfb4:	78fb      	ldrb	r3, [r7, #3]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d01a      	beq.n	800cff0 <ndefT5TGetSystemInformation+0x160>
        {
            /* LRIS64K/M24LR16/M24LR64 */
            ctx->subCtx.t5t.sysInfo.numberOfBlock =  *resp;
 800cfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 800cfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc8:	3301      	adds	r3, #1
 800cfca:	62bb      	str	r3, [r7, #40]	; 0x28
            ctx->subCtx.t5t.sysInfo.numberOfBlock |= (((uint16_t)*resp) << 8U);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800cfd2:	b21a      	sxth	r2, r3
 800cfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	021b      	lsls	r3, r3, #8
 800cfda:	b21b      	sxth	r3, r3
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	b21b      	sxth	r3, r3
 800cfe0:	b29a      	uxth	r2, r3
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 800cfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfea:	3301      	adds	r3, #1
 800cfec:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfee:	e008      	b.n	800d002 <ndefT5TGetSystemInformation+0x172>
        }
        else
        {
            ctx->subCtx.t5t.sysInfo.numberOfBlock = *resp;
 800cff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 800cffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffe:	3301      	adds	r3, #1
 800d000:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        ctx->subCtx.t5t.sysInfo.blockSize = *resp;
 800d002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d004:	781a      	ldrb	r2, [r3, #0]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
        resp++;
 800d00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00e:	3301      	adds	r3, #1
 800d010:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Add 1 to get real values*/
        ctx->subCtx.t5t.sysInfo.numberOfBlock++;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800d018:	3301      	adds	r3, #1
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
        ctx->subCtx.t5t.sysInfo.blockSize++;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800d028:	3301      	adds	r3, #1
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
    }
    if( ndefT5TSysInfoICRefPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800d038:	08db      	lsrs	r3, r3, #3
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	f003 0301 	and.w	r3, r3, #1
 800d040:	2b00      	cmp	r3, #0
 800d042:	d007      	beq.n	800d054 <ndefT5TGetSystemInformation+0x1c4>
    {
        ctx->subCtx.t5t.sysInfo.ICRef = *resp;
 800d044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d046:	781a      	ldrb	r2, [r3, #0]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
        resp++;
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	3301      	adds	r3, #1
 800d052:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( extended && (ndefT5TSysInfoCmdListPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 800d054:	78fb      	ldrb	r3, [r7, #3]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d028      	beq.n	800d0ac <ndefT5TGetSystemInformation+0x21c>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800d060:	095b      	lsrs	r3, r3, #5
 800d062:	b2db      	uxtb	r3, r3
 800d064:	f003 0301 	and.w	r3, r3, #1
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d01f      	beq.n	800d0ac <ndefT5TGetSystemInformation+0x21c>
    {
        ctx->subCtx.t5t.sysInfo.supportedCmd[0U] = *resp;
 800d06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06e:	781a      	ldrb	r2, [r3, #0]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
        resp++;
 800d076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d078:	3301      	adds	r3, #1
 800d07a:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[1U] = *resp;
 800d07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07e:	781a      	ldrb	r2, [r3, #0]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
        resp++;
 800d086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d088:	3301      	adds	r3, #1
 800d08a:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[2U] = *resp;
 800d08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08e:	781a      	ldrb	r2, [r3, #0]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
        resp++;
 800d096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d098:	3301      	adds	r3, #1
 800d09a:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[3U] = *resp;
 800d09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09e:	781a      	ldrb	r2, [r3, #0]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        resp++;
 800d0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    return ERR_NONE;
 800d0ac:	2300      	movs	r3, #0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3730      	adds	r7, #48	; 0x30
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
	...

0800d0b8 <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	af00      	add	r7, sp, #0
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 800d0bc:	4b06      	ldr	r3, [pc, #24]	; (800d0d8 <rfalAnalogConfigInitialize+0x20>)
 800d0be:	4a07      	ldr	r2, [pc, #28]	; (800d0dc <rfalAnalogConfigInitialize+0x24>)
 800d0c0:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 800d0c2:	4b05      	ldr	r3, [pc, #20]	; (800d0d8 <rfalAnalogConfigInitialize+0x20>)
 800d0c4:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 800d0c8:	809a      	strh	r2, [r3, #4]
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800d0ca:	4b03      	ldr	r3, [pc, #12]	; (800d0d8 <rfalAnalogConfigInitialize+0x20>)
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 800d0d0:	bf00      	nop
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bc80      	pop	{r7}
 800d0d6:	4770      	bx	lr
 800d0d8:	20002f34 	.word	0x20002f34
 800d0dc:	0801aeb8 	.word	0x0801aeb8

0800d0e0 <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b086      	sub	sp, #24
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 800d0f2:	4b4b      	ldr	r3, [pc, #300]	; (800d220 <rfalSetAnalogConfig+0x140>)
 800d0f4:	799b      	ldrb	r3, [r3, #6]
 800d0f6:	f083 0301 	eor.w	r3, r3, #1
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d001      	beq.n	800d104 <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 800d100:	2305      	movs	r3, #5
 800d102:	e089      	b.n	800d218 <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800d104:	f107 020e 	add.w	r2, r7, #14
 800d108:	88fb      	ldrh	r3, [r7, #6]
 800d10a:	4611      	mov	r1, r2
 800d10c:	4618      	mov	r0, r3
 800d10e:	f000 f889 	bl	800d224 <rfalAnalogConfigSearch>
 800d112:	4603      	mov	r3, r0
 800d114:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800d116:	7d3b      	ldrb	r3, [r7, #20]
 800d118:	2bff      	cmp	r3, #255	; 0xff
 800d11a:	d07b      	beq.n	800d214 <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 800d11c:	4b40      	ldr	r3, [pc, #256]	; (800d220 <rfalSetAnalogConfig+0x140>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	461a      	mov	r2, r3
 800d122:	89fb      	ldrh	r3, [r7, #14]
 800d124:	4413      	add	r3, r2
 800d126:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800d128:	7d3b      	ldrb	r3, [r7, #20]
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	b29a      	uxth	r2, r3
 800d130:	89fb      	ldrh	r3, [r7, #14]
 800d132:	4413      	add	r3, r2
 800d134:	b29b      	uxth	r3, r3
 800d136:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 800d138:	4b39      	ldr	r3, [pc, #228]	; (800d220 <rfalSetAnalogConfig+0x140>)
 800d13a:	889b      	ldrh	r3, [r3, #4]
 800d13c:	3301      	adds	r3, #1
 800d13e:	89fa      	ldrh	r2, [r7, #14]
 800d140:	4293      	cmp	r3, r2
 800d142:	d201      	bcs.n	800d148 <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 800d144:	2301      	movs	r3, #1
 800d146:	e067      	b.n	800d218 <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 800d148:	2300      	movs	r3, #0
 800d14a:	757b      	strb	r3, [r7, #21]
 800d14c:	e05d      	b.n	800d20a <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 800d14e:	7d7b      	ldrb	r3, [r7, #21]
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	693a      	ldr	r2, [r7, #16]
 800d154:	4413      	add	r3, r2
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	021b      	lsls	r3, r3, #8
 800d15a:	7d7a      	ldrb	r2, [r7, #21]
 800d15c:	0092      	lsls	r2, r2, #2
 800d15e:	6939      	ldr	r1, [r7, #16]
 800d160:	440a      	add	r2, r1
 800d162:	7852      	ldrb	r2, [r2, #1]
 800d164:	4313      	orrs	r3, r2
 800d166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d026      	beq.n	800d1bc <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 800d16e:	7d7b      	ldrb	r3, [r7, #21]
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	693a      	ldr	r2, [r7, #16]
 800d174:	4413      	add	r3, r2
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	021b      	lsls	r3, r3, #8
 800d17a:	b21a      	sxth	r2, r3
 800d17c:	7d7b      	ldrb	r3, [r7, #21]
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	6939      	ldr	r1, [r7, #16]
 800d182:	440b      	add	r3, r1
 800d184:	785b      	ldrb	r3, [r3, #1]
 800d186:	b21b      	sxth	r3, r3
 800d188:	4313      	orrs	r3, r2
 800d18a:	b21b      	sxth	r3, r3
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d192:	b298      	uxth	r0, r3
 800d194:	7d7b      	ldrb	r3, [r7, #21]
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	693a      	ldr	r2, [r7, #16]
 800d19a:	4413      	add	r3, r2
 800d19c:	7899      	ldrb	r1, [r3, #2]
 800d19e:	7d7b      	ldrb	r3, [r7, #21]
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	693a      	ldr	r2, [r7, #16]
 800d1a4:	4413      	add	r3, r2
 800d1a6:	78db      	ldrb	r3, [r3, #3]
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	f00a ff12 	bl	8017fd2 <rfalChipChangeTestRegBits>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	82fb      	strh	r3, [r7, #22]
 800d1b2:	8afb      	ldrh	r3, [r7, #22]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d025      	beq.n	800d204 <rfalSetAnalogConfig+0x124>
 800d1b8:	8afb      	ldrh	r3, [r7, #22]
 800d1ba:	e02d      	b.n	800d218 <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 800d1bc:	7d7b      	ldrb	r3, [r7, #21]
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	021b      	lsls	r3, r3, #8
 800d1c8:	b21a      	sxth	r2, r3
 800d1ca:	7d7b      	ldrb	r3, [r7, #21]
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	6939      	ldr	r1, [r7, #16]
 800d1d0:	440b      	add	r3, r1
 800d1d2:	785b      	ldrb	r3, [r3, #1]
 800d1d4:	b21b      	sxth	r3, r3
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	b21b      	sxth	r3, r3
 800d1da:	b298      	uxth	r0, r3
 800d1dc:	7d7b      	ldrb	r3, [r7, #21]
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	693a      	ldr	r2, [r7, #16]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	7899      	ldrb	r1, [r3, #2]
 800d1e6:	7d7b      	ldrb	r3, [r7, #21]
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	693a      	ldr	r2, [r7, #16]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	78db      	ldrb	r3, [r3, #3]
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	f00a fed9 	bl	8017fa8 <rfalChipChangeRegBits>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	82fb      	strh	r3, [r7, #22]
 800d1fa:	8afb      	ldrh	r3, [r7, #22]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d001      	beq.n	800d204 <rfalSetAnalogConfig+0x124>
 800d200:	8afb      	ldrh	r3, [r7, #22]
 800d202:	e009      	b.n	800d218 <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 800d204:	7d7b      	ldrb	r3, [r7, #21]
 800d206:	3301      	adds	r3, #1
 800d208:	757b      	strb	r3, [r7, #21]
 800d20a:	7d7a      	ldrb	r2, [r7, #21]
 800d20c:	7d3b      	ldrb	r3, [r7, #20]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d39d      	bcc.n	800d14e <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800d212:	e777      	b.n	800d104 <rfalSetAnalogConfig+0x24>
            break;
 800d214:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 800d216:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 800d218:	4618      	mov	r0, r3
 800d21a:	3718      	adds	r7, #24
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	20002f34 	.word	0x20002f34

0800d224 <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 800d224:	b480      	push	{r7}
 800d226:	b089      	sub	sp, #36	; 0x24
 800d228:	af00      	add	r7, sp, #0
 800d22a:	4603      	mov	r3, r0
 800d22c:	6039      	str	r1, [r7, #0]
 800d22e:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 800d230:	4b2c      	ldr	r3, [pc, #176]	; (800d2e4 <rfalAnalogConfigSearch+0xc0>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	61bb      	str	r3, [r7, #24]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 800d236:	88fb      	ldrh	r3, [r7, #6]
 800d238:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800d23c:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00a      	beq.n	800d258 <rfalAnalogConfigSearch+0x34>
 800d242:	88fb      	ldrh	r3, [r7, #6]
 800d244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d24c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d250:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800d254:	b29a      	uxth	r2, r3
 800d256:	e001      	b.n	800d25c <rfalAnalogConfigSearch+0x38>
 800d258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d25c:	88fb      	ldrh	r3, [r7, #6]
 800d25e:	f003 0303 	and.w	r3, r3, #3
 800d262:	b29b      	uxth	r3, r3
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <rfalAnalogConfigSearch+0x48>
 800d268:	88fb      	ldrh	r3, [r7, #6]
 800d26a:	e000      	b.n	800d26e <rfalAnalogConfigSearch+0x4a>
 800d26c:	2303      	movs	r3, #3
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 800d26e:	4313      	orrs	r3, r2
 800d270:	82fb      	strh	r3, [r7, #22]
                       );
    
    i = *configOffset;
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	881b      	ldrh	r3, [r3, #0]
 800d276:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800d278:	e029      	b.n	800d2ce <rfalAnalogConfigSearch+0xaa>
    {
        configTbl = &currentConfigTbl[i];
 800d27a:	8bfb      	ldrh	r3, [r7, #30]
 800d27c:	69ba      	ldr	r2, [r7, #24]
 800d27e:	4413      	add	r3, r2
 800d280:	613b      	str	r3, [r7, #16]
        foundConfigId = GETU16(configTbl);
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	021b      	lsls	r3, r3, #8
 800d288:	b21a      	sxth	r2, r3
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	3301      	adds	r3, #1
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	b21b      	sxth	r3, r3
 800d292:	4313      	orrs	r3, r2
 800d294:	b21b      	sxth	r3, r3
 800d296:	81fb      	strh	r3, [r7, #14]
        if (configId == (foundConfigId & configIdMaskVal))
 800d298:	89fa      	ldrh	r2, [r7, #14]
 800d29a:	8afb      	ldrh	r3, [r7, #22]
 800d29c:	4013      	ands	r3, r2
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	88fa      	ldrh	r2, [r7, #6]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d108      	bne.n	800d2b8 <rfalAnalogConfigSearch+0x94>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800d2a6:	8bfb      	ldrh	r3, [r7, #30]
 800d2a8:	3303      	adds	r3, #3
 800d2aa:	b29a      	uxth	r2, r3
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	3302      	adds	r3, #2
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	e010      	b.n	800d2da <rfalAnalogConfigSearch+0xb6>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	3302      	adds	r3, #2
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	b29b      	uxth	r3, r3
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 800d2c4:	8bfb      	ldrh	r3, [r7, #30]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	3303      	adds	r3, #3
 800d2cc:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800d2ce:	4b05      	ldr	r3, [pc, #20]	; (800d2e4 <rfalAnalogConfigSearch+0xc0>)
 800d2d0:	889b      	ldrh	r3, [r3, #4]
 800d2d2:	8bfa      	ldrh	r2, [r7, #30]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d3d0      	bcc.n	800d27a <rfalAnalogConfigSearch+0x56>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 800d2d8:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3724      	adds	r7, #36	; 0x24
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bc80      	pop	{r7}
 800d2e2:	4770      	bx	lr
 800d2e4:	20002f34 	.word	0x20002f34

0800d2e8 <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	6039      	str	r1, [r7, #0]
 800d2f2:	80fb      	strh	r3, [r7, #6]
 800d2f4:	4613      	mov	r3, r2
 800d2f6:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 800d2f8:	88fb      	ldrh	r3, [r7, #6]
 800d2fa:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	81bb      	strh	r3, [r7, #12]
 800d300:	e00d      	b.n	800d31e <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 800d302:	89bb      	ldrh	r3, [r7, #12]
 800d304:	683a      	ldr	r2, [r7, #0]
 800d306:	4413      	add	r3, r2
 800d308:	781a      	ldrb	r2, [r3, #0]
 800d30a:	89fb      	ldrh	r3, [r7, #14]
 800d30c:	4611      	mov	r1, r2
 800d30e:	4618      	mov	r0, r3
 800d310:	f000 f80e 	bl	800d330 <rfalCrcUpdateCcitt>
 800d314:	4603      	mov	r3, r0
 800d316:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 800d318:	89bb      	ldrh	r3, [r7, #12]
 800d31a:	3301      	adds	r3, #1
 800d31c:	81bb      	strh	r3, [r7, #12]
 800d31e:	89ba      	ldrh	r2, [r7, #12]
 800d320:	88bb      	ldrh	r3, [r7, #4]
 800d322:	429a      	cmp	r2, r3
 800d324:	d3ed      	bcc.n	800d302 <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 800d326:	89fb      	ldrh	r3, [r7, #14]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3710      	adds	r7, #16
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 800d330:	b480      	push	{r7}
 800d332:	b085      	sub	sp, #20
 800d334:	af00      	add	r7, sp, #0
 800d336:	4603      	mov	r3, r0
 800d338:	460a      	mov	r2, r1
 800d33a:	80fb      	strh	r3, [r7, #6]
 800d33c:	4613      	mov	r3, r2
 800d33e:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 800d340:	88fb      	ldrh	r3, [r7, #6]
 800d342:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 800d344:	797b      	ldrb	r3, [r7, #5]
 800d346:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 800d348:	89fb      	ldrh	r3, [r7, #14]
 800d34a:	b2da      	uxtb	r2, r3
 800d34c:	7b7b      	ldrb	r3, [r7, #13]
 800d34e:	4053      	eors	r3, r2
 800d350:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 800d352:	7b7b      	ldrb	r3, [r7, #13]
 800d354:	011b      	lsls	r3, r3, #4
 800d356:	b25a      	sxtb	r2, r3
 800d358:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d35c:	4053      	eors	r3, r2
 800d35e:	b25b      	sxtb	r3, r3
 800d360:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 800d362:	89fb      	ldrh	r3, [r7, #14]
 800d364:	0a1b      	lsrs	r3, r3, #8
 800d366:	b29b      	uxth	r3, r3
 800d368:	b21a      	sxth	r2, r3
 800d36a:	7b7b      	ldrb	r3, [r7, #13]
 800d36c:	021b      	lsls	r3, r3, #8
 800d36e:	b21b      	sxth	r3, r3
 800d370:	4053      	eors	r3, r2
 800d372:	b21a      	sxth	r2, r3
 800d374:	7b7b      	ldrb	r3, [r7, #13]
 800d376:	00db      	lsls	r3, r3, #3
 800d378:	b21b      	sxth	r3, r3
 800d37a:	4053      	eors	r3, r2
 800d37c:	b21a      	sxth	r2, r3
 800d37e:	7b7b      	ldrb	r3, [r7, #13]
 800d380:	091b      	lsrs	r3, r3, #4
 800d382:	b2db      	uxtb	r3, r3
 800d384:	b21b      	sxth	r3, r3
 800d386:	4053      	eors	r3, r2
 800d388:	b21b      	sxth	r3, r3
 800d38a:	81fb      	strh	r3, [r7, #14]

    return crc;
 800d38c:	89fb      	ldrh	r3, [r7, #14]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3714      	adds	r7, #20
 800d392:	46bd      	mov	sp, r7
 800d394:	bc80      	pop	{r7}
 800d396:	4770      	bx	lr

0800d398 <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 800d3a2:	2208      	movs	r2, #8
 800d3a4:	6879      	ldr	r1, [r7, #4]
 800d3a6:	480d      	ldr	r0, [pc, #52]	; (800d3dc <iso15693PhyConfigure+0x44>)
 800d3a8:	f00b fd25 	bl	8018df6 <memcpy>
    
    if ( config->speedMode <= 3U)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	2b03      	cmp	r3, #3
 800d3b2:	d808      	bhi.n	800d3c6 <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	f1c3 0303 	rsb	r3, r3, #3
 800d3be:	b2da      	uxtb	r2, r3
 800d3c0:	4b07      	ldr	r3, [pc, #28]	; (800d3e0 <iso15693PhyConfigure+0x48>)
 800d3c2:	70da      	strb	r2, [r3, #3]
 800d3c4:	e002      	b.n	800d3cc <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 800d3c6:	4b06      	ldr	r3, [pc, #24]	; (800d3e0 <iso15693PhyConfigure+0x48>)
 800d3c8:	2203      	movs	r2, #3
 800d3ca:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	4a04      	ldr	r2, [pc, #16]	; (800d3e0 <iso15693PhyConfigure+0x48>)
 800d3d0:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	20002f3c 	.word	0x20002f3c
 800d3e0:	2000010c 	.word	0x2000010c

0800d3e4 <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 800d3e4:	b590      	push	{r4, r7, lr}
 800d3e6:	b08b      	sub	sp, #44	; 0x2c
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	4608      	mov	r0, r1
 800d3ee:	4611      	mov	r1, r2
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	807b      	strh	r3, [r7, #2]
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	707b      	strb	r3, [r7, #1]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 800d3fe:	2300      	movs	r3, #0
 800d400:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 800d402:	2300      	movs	r3, #0
 800d404:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 800d406:	787b      	ldrb	r3, [r7, #1]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d001      	beq.n	800d410 <iso15693VCDCode+0x2c>
 800d40c:	2302      	movs	r3, #2
 800d40e:	e000      	b.n	800d412 <iso15693VCDCode+0x2e>
 800d410:	2300      	movs	r3, #0
 800d412:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 800d414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d416:	2200      	movs	r2, #0
 800d418:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 800d41a:	4b94      	ldr	r3, [pc, #592]	; (800d66c <iso15693VCDCode+0x288>)
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d117      	bne.n	800d452 <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 800d422:	2321      	movs	r3, #33	; 0x21
 800d424:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 800d428:	2304      	movs	r3, #4
 800d42a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 800d42e:	4b90      	ldr	r3, [pc, #576]	; (800d670 <iso15693VCDCode+0x28c>)
 800d430:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 800d432:	887a      	ldrh	r2, [r7, #2]
 800d434:	7d7b      	ldrb	r3, [r7, #21]
 800d436:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800d438:	b29b      	uxth	r3, r3
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	3302      	adds	r3, #2
 800d440:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800d442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d444:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 800d446:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d44a:	2b04      	cmp	r3, #4
 800d44c:	d823      	bhi.n	800d496 <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 800d44e:	2301      	movs	r3, #1
 800d450:	e13a      	b.n	800d6c8 <iso15693VCDCode+0x2e4>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 800d452:	2381      	movs	r3, #129	; 0x81
 800d454:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 800d458:	2304      	movs	r3, #4
 800d45a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 800d45e:	4b85      	ldr	r3, [pc, #532]	; (800d674 <iso15693VCDCode+0x290>)
 800d460:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 800d462:	887a      	ldrh	r2, [r7, #2]
 800d464:	7d7b      	ldrb	r3, [r7, #21]
 800d466:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800d468:	b29b      	uxth	r3, r3
 800d46a:	019b      	lsls	r3, r3, #6
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	3302      	adds	r3, #2
 800d470:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800d472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d474:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 800d476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d005      	beq.n	800d48a <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 800d47e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d482:	2b3f      	cmp	r3, #63	; 0x3f
 800d484:	d807      	bhi.n	800d496 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800d486:	2301      	movs	r3, #1
 800d488:	e11e      	b.n	800d6c8 <iso15693VCDCode+0x2e4>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 800d48a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d48e:	2b40      	cmp	r3, #64	; 0x40
 800d490:	d801      	bhi.n	800d496 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800d492:	2301      	movs	r3, #1
 800d494:	e118      	b.n	800d6c8 <iso15693VCDCode+0x2e4>
            }
        }
    }

    if (length == 0U)
 800d496:	887b      	ldrh	r3, [r7, #2]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d102      	bne.n	800d4a2 <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 800d49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d49e:	2201      	movs	r2, #1
 800d4a0:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 800d4a2:	887b      	ldrh	r3, [r7, #2]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d01b      	beq.n	800d4e0 <iso15693VCDCode+0xfc>
 800d4a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4aa:	881b      	ldrh	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d117      	bne.n	800d4e0 <iso15693VCDCode+0xfc>
 800d4b0:	783b      	ldrb	r3, [r7, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d014      	beq.n	800d4e0 <iso15693VCDCode+0xfc>
 800d4b6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d4ba:	f083 0301 	eor.w	r3, r3, #1
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00d      	beq.n	800d4e0 <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	f043 0302 	orr.w	r3, r3, #2
 800d4cc:	b2da      	uxtb	r2, r3
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	f023 0301 	bic.w	r3, r3, #1
 800d4da:	b2da      	uxtb	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 800d4e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4e2:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 800d4e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d4e8:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 800d4ea:	887b      	ldrh	r3, [r7, #2]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d03b      	beq.n	800d568 <iso15693VCDCode+0x184>
 800d4f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4f2:	881b      	ldrh	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d137      	bne.n	800d568 <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 800d4f8:	69bb      	ldr	r3, [r7, #24]
 800d4fa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800d4fe:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800d500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d502:	881b      	ldrh	r3, [r3, #0]
 800d504:	3301      	adds	r3, #1
 800d506:	b29a      	uxth	r2, r3
 800d508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d50a:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800d50c:	8afb      	ldrh	r3, [r7, #22]
 800d50e:	3b01      	subs	r3, #1
 800d510:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800d512:	69bb      	ldr	r3, [r7, #24]
 800d514:	3301      	adds	r3, #1
 800d516:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 800d518:	e026      	b.n	800d568 <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 800d51a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d51c:	881b      	ldrh	r3, [r3, #0]
 800d51e:	461a      	mov	r2, r3
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4413      	add	r3, r2
 800d524:	7818      	ldrb	r0, [r3, #0]
 800d526:	f107 030e 	add.w	r3, r7, #14
 800d52a:	8afa      	ldrh	r2, [r7, #22]
 800d52c:	69fc      	ldr	r4, [r7, #28]
 800d52e:	69b9      	ldr	r1, [r7, #24]
 800d530:	47a0      	blx	r4
 800d532:	4603      	mov	r3, r0
 800d534:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800d536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d538:	881a      	ldrh	r2, [r3, #0]
 800d53a:	89fb      	ldrh	r3, [r7, #14]
 800d53c:	4413      	add	r3, r2
 800d53e:	b29a      	uxth	r2, r3
 800d540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d542:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800d544:	89fb      	ldrh	r3, [r7, #14]
 800d546:	461a      	mov	r2, r3
 800d548:	69bb      	ldr	r3, [r7, #24]
 800d54a:	4413      	add	r3, r2
 800d54c:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800d54e:	89fb      	ldrh	r3, [r7, #14]
 800d550:	8afa      	ldrh	r2, [r7, #22]
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800d556:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d105      	bne.n	800d568 <iso15693VCDCode+0x184>
            (*offset)++;
 800d55c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d55e:	881b      	ldrh	r3, [r3, #0]
 800d560:	3301      	adds	r3, #1
 800d562:	b29a      	uxth	r2, r3
 800d564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d566:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 800d568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d56a:	881b      	ldrh	r3, [r3, #0]
 800d56c:	887a      	ldrh	r2, [r7, #2]
 800d56e:	429a      	cmp	r2, r3
 800d570:	d902      	bls.n	800d578 <iso15693VCDCode+0x194>
 800d572:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d574:	2b00      	cmp	r3, #0
 800d576:	d0d0      	beq.n	800d51a <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 800d578:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d063      	beq.n	800d646 <iso15693VCDCode+0x262>
        return ERR_AGAIN;
 800d57e:	230d      	movs	r3, #13
 800d580:	e0a2      	b.n	800d6c8 <iso15693VCDCode+0x2e4>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 800d582:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d584:	2b00      	cmp	r3, #0
 800d586:	d12b      	bne.n	800d5e0 <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800d588:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d002      	beq.n	800d596 <iso15693VCDCode+0x1b2>
 800d590:	f24e 0012 	movw	r0, #57362	; 0xe012
 800d594:	e001      	b.n	800d59a <iso15693VCDCode+0x1b6>
 800d596:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d59a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d002      	beq.n	800d5a8 <iso15693VCDCode+0x1c4>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	e000      	b.n	800d5aa <iso15693VCDCode+0x1c6>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d5ae:	2a00      	cmp	r2, #0
 800d5b0:	d003      	beq.n	800d5ba <iso15693VCDCode+0x1d6>
 800d5b2:	887a      	ldrh	r2, [r7, #2]
 800d5b4:	3a01      	subs	r2, #1
 800d5b6:	b292      	uxth	r2, r2
 800d5b8:	e000      	b.n	800d5bc <iso15693VCDCode+0x1d8>
 800d5ba:	887a      	ldrh	r2, [r7, #2]
 800d5bc:	4619      	mov	r1, r3
 800d5be:	f7ff fe93 	bl	800d2e8 <rfalCrcCalculateCcitt>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800d5c6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d5ca:	f083 0301 	eor.w	r3, r3, #1
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d003      	beq.n	800d5dc <iso15693VCDCode+0x1f8>
 800d5d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5d6:	43db      	mvns	r3, r3
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	e000      	b.n	800d5de <iso15693VCDCode+0x1fa>
 800d5dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5de:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800d5e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 800d5e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5e8:	0a1b      	lsrs	r3, r3, #8
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800d5f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5f2:	881b      	ldrh	r3, [r3, #0]
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	887b      	ldrh	r3, [r7, #2]
 800d5f8:	1ad3      	subs	r3, r2, r3
 800d5fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d5fe:	4413      	add	r3, r2
 800d600:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 800d604:	f107 030c 	add.w	r3, r7, #12
 800d608:	8afa      	ldrh	r2, [r7, #22]
 800d60a:	69fc      	ldr	r4, [r7, #28]
 800d60c:	69b9      	ldr	r1, [r7, #24]
 800d60e:	47a0      	blx	r4
 800d610:	4603      	mov	r3, r0
 800d612:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800d614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d616:	881a      	ldrh	r2, [r3, #0]
 800d618:	89bb      	ldrh	r3, [r7, #12]
 800d61a:	4413      	add	r3, r2
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d620:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800d622:	89bb      	ldrh	r3, [r7, #12]
 800d624:	461a      	mov	r2, r3
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	4413      	add	r3, r2
 800d62a:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800d62c:	89bb      	ldrh	r3, [r7, #12]
 800d62e:	8afa      	ldrh	r2, [r7, #22]
 800d630:	1ad3      	subs	r3, r2, r3
 800d632:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800d634:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d636:	2b00      	cmp	r3, #0
 800d638:	d105      	bne.n	800d646 <iso15693VCDCode+0x262>
            (*offset)++;
 800d63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d63c:	881b      	ldrh	r3, [r3, #0]
 800d63e:	3301      	adds	r3, #1
 800d640:	b29a      	uxth	r2, r3
 800d642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d644:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800d646:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d109      	bne.n	800d660 <iso15693VCDCode+0x27c>
 800d64c:	787b      	ldrb	r3, [r7, #1]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d006      	beq.n	800d660 <iso15693VCDCode+0x27c>
 800d652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d654:	881b      	ldrh	r3, [r3, #0]
 800d656:	461a      	mov	r2, r3
 800d658:	887b      	ldrh	r3, [r7, #2]
 800d65a:	3302      	adds	r3, #2
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d390      	bcc.n	800d582 <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 800d660:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d662:	2b00      	cmp	r3, #0
 800d664:	d008      	beq.n	800d678 <iso15693VCDCode+0x294>
        return ERR_AGAIN;
 800d666:	230d      	movs	r3, #13
 800d668:	e02e      	b.n	800d6c8 <iso15693VCDCode+0x2e4>
 800d66a:	bf00      	nop
 800d66c:	20002f3c 	.word	0x20002f3c
 800d670:	0800d90d 	.word	0x0800d90d
 800d674:	0800d9b5 	.word	0x0800d9b5
    }

    if ((!sendCrc && (*offset == length))
 800d678:	787b      	ldrb	r3, [r7, #1]
 800d67a:	f083 0301 	eor.w	r3, r3, #1
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	2b00      	cmp	r3, #0
 800d682:	d004      	beq.n	800d68e <iso15693VCDCode+0x2aa>
 800d684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	887a      	ldrh	r2, [r7, #2]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d009      	beq.n	800d6a2 <iso15693VCDCode+0x2be>
            || (sendCrc && (*offset == (length + 2U))))
 800d68e:	787b      	ldrb	r3, [r7, #1]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d018      	beq.n	800d6c6 <iso15693VCDCode+0x2e2>
 800d694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d696:	881b      	ldrh	r3, [r3, #0]
 800d698:	461a      	mov	r2, r3
 800d69a:	887b      	ldrh	r3, [r7, #2]
 800d69c:	3302      	adds	r3, #2
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d111      	bne.n	800d6c6 <iso15693VCDCode+0x2e2>
    {
        *outputBuf = eof; 
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800d6a8:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800d6aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6ac:	881b      	ldrh	r3, [r3, #0]
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	b29a      	uxth	r2, r3
 800d6b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6b4:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800d6b6:	8afb      	ldrh	r3, [r7, #22]
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 800d6c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6c4:	e000      	b.n	800d6c8 <iso15693VCDCode+0x2e4>
        return ERR_AGAIN;
 800d6c6:	230d      	movs	r3, #13
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	372c      	adds	r7, #44	; 0x2c
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd90      	pop	{r4, r7, pc}

0800d6d0 <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b088      	sub	sp, #32
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	607a      	str	r2, [r7, #4]
 800d6da:	461a      	mov	r2, r3
 800d6dc:	460b      	mov	r3, r1
 800d6de:	817b      	strh	r3, [r7, #10]
 800d6e0:	4613      	mov	r3, r2
 800d6e2:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 800d6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 800d6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	f003 031f 	and.w	r3, r3, #31
 800d6fc:	2b17      	cmp	r3, #23
 800d6fe:	d001      	beq.n	800d704 <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 800d700:	2309      	movs	r3, #9
 800d702:	e0ff      	b.n	800d904 <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 800d704:	893b      	ldrh	r3, [r7, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d101      	bne.n	800d70e <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 800d70a:	2300      	movs	r3, #0
 800d70c:	e0fa      	b.n	800d904 <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 800d70e:	2305      	movs	r3, #5
 800d710:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 800d716:	893b      	ldrh	r3, [r7, #8]
 800d718:	461a      	mov	r2, r3
 800d71a:	2100      	movs	r1, #0
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f00b fb8e 	bl	8018e3e <memset>

    if (inBufLen == 0U)
 800d722:	897b      	ldrh	r3, [r7, #10]
 800d724:	2b00      	cmp	r3, #0
 800d726:	f040 808e 	bne.w	800d846 <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 800d72a:	2315      	movs	r3, #21
 800d72c:	e0ea      	b.n	800d904 <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 800d72e:	2300      	movs	r3, #0
 800d730:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800d732:	8bbb      	ldrh	r3, [r7, #28]
 800d734:	08db      	lsrs	r3, r3, #3
 800d736:	b29b      	uxth	r3, r3
 800d738:	461a      	mov	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	4413      	add	r3, r2
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	461a      	mov	r2, r3
 800d742:	8bbb      	ldrh	r3, [r7, #28]
 800d744:	f003 0307 	and.w	r3, r3, #7
 800d748:	fa42 f303 	asr.w	r3, r2, r3
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	f003 0301 	and.w	r3, r3, #1
 800d752:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 800d754:	8bbb      	ldrh	r3, [r7, #28]
 800d756:	3301      	adds	r3, #1
 800d758:	08db      	lsrs	r3, r3, #3
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	4413      	add	r3, r2
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	461a      	mov	r2, r3
 800d762:	8bbb      	ldrh	r3, [r7, #28]
 800d764:	3301      	adds	r3, #1
 800d766:	f003 0307 	and.w	r3, r3, #7
 800d76a:	fa42 f303 	asr.w	r3, r2, r3
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	b2db      	uxtb	r3, r3
 800d774:	f003 0302 	and.w	r3, r3, #2
 800d778:	b2da      	uxtb	r2, r3
 800d77a:	7e3b      	ldrb	r3, [r7, #24]
 800d77c:	4313      	orrs	r3, r2
 800d77e:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 800d780:	7e3b      	ldrb	r3, [r7, #24]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d102      	bne.n	800d78c <iso15693VICCDecode+0xbc>
        {
            bp++;
 800d786:	8b7b      	ldrh	r3, [r7, #26]
 800d788:	3301      	adds	r3, #1
 800d78a:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 800d78c:	7e3b      	ldrb	r3, [r7, #24]
 800d78e:	2b02      	cmp	r3, #2
 800d790:	d119      	bne.n	800d7c6 <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 800d792:	8b7b      	ldrh	r3, [r7, #26]
 800d794:	08db      	lsrs	r3, r3, #3
 800d796:	b29b      	uxth	r3, r3
 800d798:	461a      	mov	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4413      	add	r3, r2
 800d79e:	7819      	ldrb	r1, [r3, #0]
 800d7a0:	8b7b      	ldrh	r3, [r7, #26]
 800d7a2:	f003 0307 	and.w	r3, r3, #7
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	8b7b      	ldrh	r3, [r7, #26]
 800d7b0:	08db      	lsrs	r3, r3, #3
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	4403      	add	r3, r0
 800d7ba:	430a      	orrs	r2, r1
 800d7bc:	b2d2      	uxtb	r2, r2
 800d7be:	701a      	strb	r2, [r3, #0]
            bp++;
 800d7c0:	8b7b      	ldrh	r3, [r7, #26]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 800d7c6:	8b7b      	ldrh	r3, [r7, #26]
 800d7c8:	f003 0307 	and.w	r3, r3, #7
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d115      	bne.n	800d7fe <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 800d7d2:	8bbb      	ldrh	r3, [r7, #28]
 800d7d4:	08db      	lsrs	r3, r3, #3
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	461a      	mov	r2, r3
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	4413      	add	r3, r2
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d7e4:	2ba0      	cmp	r3, #160	; 0xa0
 800d7e6:	d10a      	bne.n	800d7fe <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 800d7e8:	8bbb      	ldrh	r3, [r7, #28]
 800d7ea:	08db      	lsrs	r3, r3, #3
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	2b03      	cmp	r3, #3
 800d7f8:	d101      	bne.n	800d7fe <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 800d7fe:	7e3b      	ldrb	r3, [r7, #24]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d002      	beq.n	800d80a <iso15693VICCDecode+0x13a>
 800d804:	7e3b      	ldrb	r3, [r7, #24]
 800d806:	2b03      	cmp	r3, #3
 800d808:	d10f      	bne.n	800d82a <iso15693VICCDecode+0x15a>
 800d80a:	7e7b      	ldrb	r3, [r7, #25]
 800d80c:	f083 0301 	eor.w	r3, r3, #1
 800d810:	b2db      	uxtb	r3, r3
 800d812:	2b00      	cmp	r3, #0
 800d814:	d009      	beq.n	800d82a <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 800d816:	8b7a      	ldrh	r2, [r7, #26]
 800d818:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d302      	bcc.n	800d824 <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 800d81e:	231d      	movs	r3, #29
 800d820:	83fb      	strh	r3, [r7, #30]
 800d822:	e002      	b.n	800d82a <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 800d824:	8b7b      	ldrh	r3, [r7, #26]
 800d826:	3301      	adds	r3, #1
 800d828:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 800d82a:	8b7a      	ldrh	r2, [r7, #26]
 800d82c:	893b      	ldrh	r3, [r7, #8]
 800d82e:	00db      	lsls	r3, r3, #3
 800d830:	429a      	cmp	r2, r3
 800d832:	d20f      	bcs.n	800d854 <iso15693VICCDecode+0x184>
 800d834:	8bfb      	ldrh	r3, [r7, #30]
 800d836:	2b1d      	cmp	r3, #29
 800d838:	d00c      	beq.n	800d854 <iso15693VICCDecode+0x184>
 800d83a:	7e7b      	ldrb	r3, [r7, #25]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d109      	bne.n	800d854 <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 800d840:	8bbb      	ldrh	r3, [r7, #28]
 800d842:	3302      	adds	r3, #2
 800d844:	83bb      	strh	r3, [r7, #28]
 800d846:	8bba      	ldrh	r2, [r7, #28]
 800d848:	897b      	ldrh	r3, [r7, #10]
 800d84a:	00db      	lsls	r3, r3, #3
 800d84c:	3b02      	subs	r3, #2
 800d84e:	429a      	cmp	r2, r3
 800d850:	f4ff af6d 	bcc.w	800d72e <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 800d854:	8b7b      	ldrh	r3, [r7, #26]
 800d856:	08db      	lsrs	r3, r3, #3
 800d858:	b29a      	uxth	r2, r3
 800d85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85c:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 800d85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d860:	8b7a      	ldrh	r2, [r7, #26]
 800d862:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 800d864:	8bfb      	ldrh	r3, [r7, #30]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d001      	beq.n	800d86e <iso15693VICCDecode+0x19e>
    {
        return err;
 800d86a:	8bfb      	ldrh	r3, [r7, #30]
 800d86c:	e04a      	b.n	800d904 <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 800d86e:	8b7b      	ldrh	r3, [r7, #26]
 800d870:	f003 0307 	and.w	r3, r3, #7
 800d874:	b29b      	uxth	r3, r3
 800d876:	2b00      	cmp	r3, #0
 800d878:	d001      	beq.n	800d87e <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 800d87a:	2315      	movs	r3, #21
 800d87c:	e042      	b.n	800d904 <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 800d87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d880:	881b      	ldrh	r3, [r3, #0]
 800d882:	2b02      	cmp	r3, #2
 800d884:	d93b      	bls.n	800d8fe <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 800d886:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d002      	beq.n	800d894 <iso15693VICCDecode+0x1c4>
 800d88e:	f24e 0012 	movw	r0, #57362	; 0xe012
 800d892:	e001      	b.n	800d898 <iso15693VICCDecode+0x1c8>
 800d894:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89a:	881b      	ldrh	r3, [r3, #0]
 800d89c:	3b02      	subs	r3, #2
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	6879      	ldr	r1, [r7, #4]
 800d8a4:	f7ff fd20 	bl	800d2e8 <rfalCrcCalculateCcitt>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800d8ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d8b0:	f083 0301 	eor.w	r3, r3, #1
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d003      	beq.n	800d8c2 <iso15693VICCDecode+0x1f2>
 800d8ba:	8afb      	ldrh	r3, [r7, #22]
 800d8bc:	43db      	mvns	r3, r3
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	e000      	b.n	800d8c4 <iso15693VICCDecode+0x1f4>
 800d8c2:	8afb      	ldrh	r3, [r7, #22]
 800d8c4:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800d8c6:	8afb      	ldrh	r3, [r7, #22]
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8cc:	8812      	ldrh	r2, [r2, #0]
 800d8ce:	3a02      	subs	r2, #2
 800d8d0:	6879      	ldr	r1, [r7, #4]
 800d8d2:	440a      	add	r2, r1
 800d8d4:	7812      	ldrb	r2, [r2, #0]
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d10e      	bne.n	800d8f8 <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 800d8da:	8afb      	ldrh	r3, [r7, #22]
 800d8dc:	0a1b      	lsrs	r3, r3, #8
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8e4:	8812      	ldrh	r2, [r2, #0]
 800d8e6:	3a01      	subs	r2, #1
 800d8e8:	6879      	ldr	r1, [r7, #4]
 800d8ea:	440a      	add	r2, r1
 800d8ec:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d102      	bne.n	800d8f8 <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	83fb      	strh	r3, [r7, #30]
 800d8f6:	e004      	b.n	800d902 <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 800d8f8:	2315      	movs	r3, #21
 800d8fa:	83fb      	strh	r3, [r7, #30]
 800d8fc:	e001      	b.n	800d902 <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 800d8fe:	2315      	movs	r3, #21
 800d900:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 800d902:	8bfb      	ldrh	r3, [r7, #30]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3720      	adds	r7, #32
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b089      	sub	sp, #36	; 0x24
 800d910:	af00      	add	r7, sp, #0
 800d912:	60b9      	str	r1, [r7, #8]
 800d914:	607b      	str	r3, [r7, #4]
 800d916:	4603      	mov	r3, r0
 800d918:	73fb      	strb	r3, [r7, #15]
 800d91a:	4613      	mov	r3, r2
 800d91c:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800d91e:	2300      	movs	r3, #0
 800d920:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 800d92c:	89bb      	ldrh	r3, [r7, #12]
 800d92e:	2b03      	cmp	r3, #3
 800d930:	d801      	bhi.n	800d936 <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 800d932:	2301      	movs	r3, #1
 800d934:	e038      	b.n	800d9a8 <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 800d936:	7bfb      	ldrb	r3, [r7, #15]
 800d938:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800d93a:	2300      	movs	r3, #0
 800d93c:	83bb      	strh	r3, [r7, #28]
 800d93e:	e02f      	b.n	800d9a0 <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 800d940:	7ffb      	ldrb	r3, [r7, #31]
 800d942:	f003 0303 	and.w	r3, r3, #3
 800d946:	2b03      	cmp	r3, #3
 800d948:	d81a      	bhi.n	800d980 <iso15693PhyVCDCode1Of4+0x74>
 800d94a:	a201      	add	r2, pc, #4	; (adr r2, 800d950 <iso15693PhyVCDCode1Of4+0x44>)
 800d94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d950:	0800d961 	.word	0x0800d961
 800d954:	0800d969 	.word	0x0800d969
 800d958:	0800d971 	.word	0x0800d971
 800d95c:	0800d979 	.word	0x0800d979
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	2202      	movs	r2, #2
 800d964:	701a      	strb	r2, [r3, #0]
                break;
 800d966:	e00c      	b.n	800d982 <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 800d968:	69bb      	ldr	r3, [r7, #24]
 800d96a:	2208      	movs	r2, #8
 800d96c:	701a      	strb	r2, [r3, #0]
                break;
 800d96e:	e008      	b.n	800d982 <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	2220      	movs	r2, #32
 800d974:	701a      	strb	r2, [r3, #0]
                break;
 800d976:	e004      	b.n	800d982 <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	2280      	movs	r2, #128	; 0x80
 800d97c:	701a      	strb	r2, [r3, #0]
                break;
 800d97e:	e000      	b.n	800d982 <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 800d980:	bf00      	nop
        }
        outbuf++;
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	3301      	adds	r3, #1
 800d986:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	881b      	ldrh	r3, [r3, #0]
 800d98c:	3301      	adds	r3, #1
 800d98e:	b29a      	uxth	r2, r3
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 800d994:	7ffb      	ldrb	r3, [r7, #31]
 800d996:	089b      	lsrs	r3, r3, #2
 800d998:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800d99a:	8bbb      	ldrh	r3, [r7, #28]
 800d99c:	3301      	adds	r3, #1
 800d99e:	83bb      	strh	r3, [r7, #28]
 800d9a0:	8bbb      	ldrh	r3, [r7, #28]
 800d9a2:	2b03      	cmp	r3, #3
 800d9a4:	d9cc      	bls.n	800d940 <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 800d9a6:	8afb      	ldrh	r3, [r7, #22]
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3724      	adds	r7, #36	; 0x24
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bc80      	pop	{r7}
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop

0800d9b4 <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b089      	sub	sp, #36	; 0x24
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60b9      	str	r1, [r7, #8]
 800d9bc:	607b      	str	r3, [r7, #4]
 800d9be:	4603      	mov	r3, r0
 800d9c0:	73fb      	strb	r3, [r7, #15]
 800d9c2:	4613      	mov	r3, r2
 800d9c4:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 800d9d4:	89bb      	ldrh	r3, [r7, #12]
 800d9d6:	2b3f      	cmp	r3, #63	; 0x3f
 800d9d8:	d801      	bhi.n	800d9de <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e039      	b.n	800da52 <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 800d9de:	7bfb      	ldrb	r3, [r7, #15]
 800d9e0:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	83bb      	strh	r3, [r7, #28]
 800d9e6:	e030      	b.n	800da4a <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 800d9e8:	7ffb      	ldrb	r3, [r7, #31]
 800d9ea:	2b03      	cmp	r3, #3
 800d9ec:	d81a      	bhi.n	800da24 <iso15693PhyVCDCode1Of256+0x70>
 800d9ee:	a201      	add	r2, pc, #4	; (adr r2, 800d9f4 <iso15693PhyVCDCode1Of256+0x40>)
 800d9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9f4:	0800da05 	.word	0x0800da05
 800d9f8:	0800da0d 	.word	0x0800da0d
 800d9fc:	0800da15 	.word	0x0800da15
 800da00:	0800da1d 	.word	0x0800da1d
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	2202      	movs	r2, #2
 800da08:	701a      	strb	r2, [r3, #0]
                break;
 800da0a:	e00f      	b.n	800da2c <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	2208      	movs	r2, #8
 800da10:	701a      	strb	r2, [r3, #0]
                break;
 800da12:	e00b      	b.n	800da2c <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	2220      	movs	r2, #32
 800da18:	701a      	strb	r2, [r3, #0]
                break;
 800da1a:	e007      	b.n	800da2c <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	2280      	movs	r2, #128	; 0x80
 800da20:	701a      	strb	r2, [r3, #0]
                break;
 800da22:	e003      	b.n	800da2c <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	2200      	movs	r2, #0
 800da28:	701a      	strb	r2, [r3, #0]
                break;               
 800da2a:	bf00      	nop
        }
        outbuf++;
 800da2c:	69bb      	ldr	r3, [r7, #24]
 800da2e:	3301      	adds	r3, #1
 800da30:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	881b      	ldrh	r3, [r3, #0]
 800da36:	3301      	adds	r3, #1
 800da38:	b29a      	uxth	r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 800da3e:	7ffb      	ldrb	r3, [r7, #31]
 800da40:	3b04      	subs	r3, #4
 800da42:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800da44:	8bbb      	ldrh	r3, [r7, #28]
 800da46:	3301      	adds	r3, #1
 800da48:	83bb      	strh	r3, [r7, #28]
 800da4a:	8bbb      	ldrh	r3, [r7, #28]
 800da4c:	2b3f      	cmp	r3, #63	; 0x3f
 800da4e:	d9cb      	bls.n	800d9e8 <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 800da50:	8afb      	ldrh	r3, [r7, #22]
}
 800da52:	4618      	mov	r0, r3
 800da54:	3724      	adds	r7, #36	; 0x24
 800da56:	46bd      	mov	sp, r7
 800da58:	bc80      	pop	{r7}
 800da5a:	4770      	bx	lr

0800da5c <isoDepClearCounters>:
 ******************************************************************************
 */

/*******************************************************************************/
static void isoDepClearCounters( void )
{
 800da5c:	b480      	push	{r7}
 800da5e:	af00      	add	r7, sp, #0
    gIsoDep.cntIRetrys   = 0;
 800da60:	4b06      	ldr	r3, [pc, #24]	; (800da7c <isoDepClearCounters+0x20>)
 800da62:	2200      	movs	r2, #0
 800da64:	715a      	strb	r2, [r3, #5]
    gIsoDep.cntRRetrys   = 0;
 800da66:	4b05      	ldr	r3, [pc, #20]	; (800da7c <isoDepClearCounters+0x20>)
 800da68:	2200      	movs	r2, #0
 800da6a:	719a      	strb	r2, [r3, #6]
    gIsoDep.cntSRetrys   = 0;
 800da6c:	4b03      	ldr	r3, [pc, #12]	; (800da7c <isoDepClearCounters+0x20>)
 800da6e:	2200      	movs	r2, #0
 800da70:	71da      	strb	r2, [r3, #7]
}
 800da72:	bf00      	nop
 800da74:	46bd      	mov	sp, r7
 800da76:	bc80      	pop	{r7}
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop
 800da7c:	20002f44 	.word	0x20002f44

0800da80 <isoDepTx>:

/*******************************************************************************/
static ReturnCode isoDepTx( uint8_t pcb, const uint8_t* txBuf, uint8_t *infBuf, uint16_t infLen, uint32_t fwt )
{
 800da80:	b590      	push	{r4, r7, lr}
 800da82:	b08b      	sub	sp, #44	; 0x2c
 800da84:	af04      	add	r7, sp, #16
 800da86:	60b9      	str	r1, [r7, #8]
 800da88:	607a      	str	r2, [r7, #4]
 800da8a:	461a      	mov	r2, r3
 800da8c:	4603      	mov	r3, r0
 800da8e:	73fb      	strb	r3, [r7, #15]
 800da90:	4613      	mov	r3, r2
 800da92:	81bb      	strh	r3, [r7, #12]
    uint8_t    *txBlock;
    uint16_t   txBufLen;
    uint8_t    computedPcb;

    
    txBlock         = infBuf;                      /* Point to beginning of the INF, and go backwards     */
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	617b      	str	r3, [r7, #20]
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 800da98:	4a44      	ldr	r2, [pc, #272]	; (800dbac <isoDepTx+0x12c>)
 800da9a:	7bfb      	ldrb	r3, [r7, #15]
 800da9c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    
    
    if ( infLen > 0U )
 800daa0:	89bb      	ldrh	r3, [r7, #12]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d009      	beq.n	800daba <isoDepTx+0x3a>
    {
        if ( ((uint32_t)infBuf - (uint32_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	4a3f      	ldr	r2, [pc, #252]	; (800dbac <isoDepTx+0x12c>)
 800daae:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d201      	bcs.n	800daba <isoDepTx+0x3a>
        {
            return ERR_NOMEM;
 800dab6:	2301      	movs	r3, #1
 800dab8:	e074      	b.n	800dba4 <isoDepTx+0x124>
    }
    
    
    /*******************************************************************************/
    /* Compute optional PCB bits */
    computedPcb = pcb;
 800daba:	7bfb      	ldrb	r3, [r7, #15]
 800dabc:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 800dabe:	4b3b      	ldr	r3, [pc, #236]	; (800dbac <isoDepTx+0x12c>)
 800dac0:	78db      	ldrb	r3, [r3, #3]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d108      	bne.n	800dad8 <isoDepTx+0x58>
 800dac6:	4b39      	ldr	r3, [pc, #228]	; (800dbac <isoDepTx+0x12c>)
 800dac8:	78db      	ldrb	r3, [r3, #3]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d108      	bne.n	800dae0 <isoDepTx+0x60>
 800dace:	4b37      	ldr	r3, [pc, #220]	; (800dbac <isoDepTx+0x12c>)
 800dad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d003      	beq.n	800dae0 <isoDepTx+0x60>
 800dad8:	7cfb      	ldrb	r3, [r7, #19]
 800dada:	f043 0308 	orr.w	r3, r3, #8
 800dade:	74fb      	strb	r3, [r7, #19]
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 800dae0:	4b32      	ldr	r3, [pc, #200]	; (800dbac <isoDepTx+0x12c>)
 800dae2:	791b      	ldrb	r3, [r3, #4]
 800dae4:	2bff      	cmp	r3, #255	; 0xff
 800dae6:	d003      	beq.n	800daf0 <isoDepTx+0x70>
 800dae8:	7cfb      	ldrb	r3, [r7, #19]
 800daea:	f043 0304 	orr.w	r3, r3, #4
 800daee:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.isTxChaining) && (isoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 800daf0:	4b2e      	ldr	r3, [pc, #184]	; (800dbac <isoDepTx+0x12c>)
 800daf2:	7c9b      	ldrb	r3, [r3, #18]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d008      	beq.n	800db0a <isoDepTx+0x8a>
 800daf8:	7cfb      	ldrb	r3, [r7, #19]
 800dafa:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 800dafe:	2b02      	cmp	r3, #2
 800db00:	d103      	bne.n	800db0a <isoDepTx+0x8a>
 800db02:	7cfb      	ldrb	r3, [r7, #19]
 800db04:	f043 0310 	orr.w	r3, r3, #16
 800db08:	74fb      	strb	r3, [r7, #19]

    
    /*******************************************************************************/
    /* Compute Payload on the given txBuf, start by the PCB | DID | NAD | before INF */
    
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD) 
 800db0a:	4b28      	ldr	r3, [pc, #160]	; (800dbac <isoDepTx+0x12c>)
 800db0c:	791b      	ldrb	r3, [r3, #4]
 800db0e:	2bff      	cmp	r3, #255	; 0xff
 800db10:	d006      	beq.n	800db20 <isoDepTx+0xa0>
    {
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	3b01      	subs	r3, #1
 800db16:	617b      	str	r3, [r7, #20]
 800db18:	4b24      	ldr	r3, [pc, #144]	; (800dbac <isoDepTx+0x12c>)
 800db1a:	791a      	ldrb	r2, [r3, #4]
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	701a      	strb	r2, [r3, #0]
    }
    
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 800db20:	4b22      	ldr	r3, [pc, #136]	; (800dbac <isoDepTx+0x12c>)
 800db22:	78db      	ldrb	r3, [r3, #3]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d108      	bne.n	800db3a <isoDepTx+0xba>
 800db28:	4b20      	ldr	r3, [pc, #128]	; (800dbac <isoDepTx+0x12c>)
 800db2a:	78db      	ldrb	r3, [r3, #3]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d10b      	bne.n	800db48 <isoDepTx+0xc8>
 800db30:	4b1e      	ldr	r3, [pc, #120]	; (800dbac <isoDepTx+0x12c>)
 800db32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800db36:	2b00      	cmp	r3, #0
 800db38:	d006      	beq.n	800db48 <isoDepTx+0xc8>
    {
        *(--txBlock)  = gIsoDep.did;               /* DID is optional */
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	3b01      	subs	r3, #1
 800db3e:	617b      	str	r3, [r7, #20]
 800db40:	4b1a      	ldr	r3, [pc, #104]	; (800dbac <isoDepTx+0x12c>)
 800db42:	78da      	ldrb	r2, [r3, #3]
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	701a      	strb	r2, [r3, #0]
    }
    
    *(--txBlock)      = computedPcb;               /* PCB always present */
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	3b01      	subs	r3, #1
 800db4c:	617b      	str	r3, [r7, #20]
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	7cfa      	ldrb	r2, [r7, #19]
 800db52:	701a      	strb	r2, [r3, #0]
    
    txBufLen = (infLen + (uint16_t)((uint32_t)infBuf - (uint32_t)txBlock)); /* Calculate overall buffer size */
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	1ad3      	subs	r3, r2, r3
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	89bb      	ldrh	r3, [r7, #12]
 800db5e:	4413      	add	r3, r2
 800db60:	823b      	strh	r3, [r7, #16]
    
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 800db62:	8a3a      	ldrh	r2, [r7, #16]
 800db64:	4b11      	ldr	r3, [pc, #68]	; (800dbac <isoDepTx+0x12c>)
 800db66:	8a1b      	ldrh	r3, [r3, #16]
 800db68:	3b02      	subs	r3, #2
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d901      	bls.n	800db72 <isoDepTx+0xf2>
    {
        return ERR_NOTSUPP;
 800db6e:	2318      	movs	r3, #24
 800db70:	e018      	b.n	800dba4 <isoDepTx+0x124>
    }
        
    return rfalTransceiveBlockingTx( txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 800db72:	4b0e      	ldr	r3, [pc, #56]	; (800dbac <isoDepTx+0x12c>)
 800db74:	6998      	ldr	r0, [r3, #24]
 800db76:	4b0d      	ldr	r3, [pc, #52]	; (800dbac <isoDepTx+0x12c>)
 800db78:	8bdc      	ldrh	r4, [r3, #30]
 800db7a:	4b0c      	ldr	r3, [pc, #48]	; (800dbac <isoDepTx+0x12c>)
 800db7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db7e:	4b0b      	ldr	r3, [pc, #44]	; (800dbac <isoDepTx+0x12c>)
 800db80:	785b      	ldrb	r3, [r3, #1]
 800db82:	2b01      	cmp	r3, #1
 800db84:	d001      	beq.n	800db8a <isoDepTx+0x10a>
 800db86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db88:	e001      	b.n	800db8e <isoDepTx+0x10e>
 800db8a:	f04f 33ff 	mov.w	r3, #4294967295
 800db8e:	8a39      	ldrh	r1, [r7, #16]
 800db90:	9302      	str	r3, [sp, #8]
 800db92:	2300      	movs	r3, #0
 800db94:	9301      	str	r3, [sp, #4]
 800db96:	9200      	str	r2, [sp, #0]
 800db98:	4623      	mov	r3, r4
 800db9a:	4602      	mov	r2, r0
 800db9c:	6978      	ldr	r0, [r7, #20]
 800db9e:	f008 f9b1 	bl	8015f04 <rfalTransceiveBlockingTx>
 800dba2:	4603      	mov	r3, r0
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	371c      	adds	r7, #28
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd90      	pop	{r4, r7, pc}
 800dbac:	20002f44 	.word	0x20002f44

0800dbb0 <isoDepHandleControlMsg>:

/*******************************************************************************/
static ReturnCode isoDepHandleControlMsg( rfalIsoDepControlMsg controlMsg, uint8_t param )
{
 800dbb0:	b590      	push	{r4, r7, lr}
 800dbb2:	b089      	sub	sp, #36	; 0x24
 800dbb4:	af02      	add	r7, sp, #8
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	460a      	mov	r2, r1
 800dbba:	71fb      	strb	r3, [r7, #7]
 800dbbc:	4613      	mov	r3, r2
 800dbbe:	71bb      	strb	r3, [r7, #6]
    uint8_t  pcb;   
    uint8_t  ctrlMsgBuf[ISODEP_CONTROLMSG_BUF_LEN];
    uint8_t  infLen;
    uint32_t fwtTemp;
    
    infLen  = 0;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	75bb      	strb	r3, [r7, #22]
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 800dbc4:	4b56      	ldr	r3, [pc, #344]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dbc6:	689a      	ldr	r2, [r3, #8]
 800dbc8:	4b55      	ldr	r3, [pc, #340]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	4413      	add	r3, r2
 800dbce:	613b      	str	r3, [r7, #16]
    ST_MEMSET( ctrlMsgBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 800dbd0:	f107 030c 	add.w	r3, r7, #12
 800dbd4:	2204      	movs	r2, #4
 800dbd6:	2100      	movs	r1, #0
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f00b f930 	bl	8018e3e <memset>
    
    switch( controlMsg )
 800dbde:	79fb      	ldrb	r3, [r7, #7]
 800dbe0:	2b03      	cmp	r3, #3
 800dbe2:	f200 8089 	bhi.w	800dcf8 <isoDepHandleControlMsg+0x148>
 800dbe6:	a201      	add	r2, pc, #4	; (adr r2, 800dbec <isoDepHandleControlMsg+0x3c>)
 800dbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbec:	0800dbfd 	.word	0x0800dbfd
 800dbf0:	0800dc29 	.word	0x0800dc29
 800dbf4:	0800dc55 	.word	0x0800dc55
 800dbf8:	0800dcc5 	.word	0x0800dcc5
    {
        /*******************************************************************************/
        case ISODEP_R_ACK:
            
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 800dbfc:	4b48      	ldr	r3, [pc, #288]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dbfe:	799b      	ldrb	r3, [r3, #6]
 800dc00:	1c5a      	adds	r2, r3, #1
 800dc02:	b2d1      	uxtb	r1, r2
 800dc04:	4a46      	ldr	r2, [pc, #280]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dc06:	7191      	strb	r1, [r2, #6]
 800dc08:	4a45      	ldr	r2, [pc, #276]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dc0a:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d901      	bls.n	800dc16 <isoDepHandleControlMsg+0x66>
            {
                return ERR_PROTO;
 800dc12:	230b      	movs	r3, #11
 800dc14:	e080      	b.n	800dd18 <isoDepHandleControlMsg+0x168>
            }
            
            pcb = isoDep_PCBRACK( gIsoDep.blockNumber );
 800dc16:	4b42      	ldr	r3, [pc, #264]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dc18:	789b      	ldrb	r3, [r3, #2]
 800dc1a:	f003 0301 	and.w	r3, r3, #1
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	f063 035d 	orn	r3, r3, #93	; 0x5d
 800dc24:	75fb      	strb	r3, [r7, #23]
            break;
 800dc26:	e069      	b.n	800dcfc <isoDepHandleControlMsg+0x14c>
            
        /*******************************************************************************/
        case ISODEP_R_NAK:
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 800dc28:	4b3d      	ldr	r3, [pc, #244]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dc2a:	799b      	ldrb	r3, [r3, #6]
 800dc2c:	1c5a      	adds	r2, r3, #1
 800dc2e:	b2d1      	uxtb	r1, r2
 800dc30:	4a3b      	ldr	r2, [pc, #236]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dc32:	7191      	strb	r1, [r2, #6]
 800dc34:	4a3a      	ldr	r2, [pc, #232]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dc36:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d901      	bls.n	800dc42 <isoDepHandleControlMsg+0x92>
            {
                return ERR_TIMEOUT;
 800dc3e:	2304      	movs	r3, #4
 800dc40:	e06a      	b.n	800dd18 <isoDepHandleControlMsg+0x168>
            }
            
            pcb = isoDep_PCBRNAK( gIsoDep.blockNumber );            
 800dc42:	4b37      	ldr	r3, [pc, #220]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dc44:	789b      	ldrb	r3, [r3, #2]
 800dc46:	f003 0301 	and.w	r3, r3, #1
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	f063 034d 	orn	r3, r3, #77	; 0x4d
 800dc50:	75fb      	strb	r3, [r7, #23]
            break;
 800dc52:	e053      	b.n	800dcfc <isoDepHandleControlMsg+0x14c>
            
        /*******************************************************************************/
        case ISODEP_S_WTX:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 800dc54:	4b32      	ldr	r3, [pc, #200]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dc56:	79db      	ldrb	r3, [r3, #7]
 800dc58:	1c5a      	adds	r2, r3, #1
 800dc5a:	b2d1      	uxtb	r1, r2
 800dc5c:	4a30      	ldr	r2, [pc, #192]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dc5e:	71d1      	strb	r1, [r2, #7]
 800dc60:	4a2f      	ldr	r2, [pc, #188]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dc62:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d901      	bls.n	800dc6e <isoDepHandleControlMsg+0xbe>
            {
                return ERR_PROTO;
 800dc6a:	230b      	movs	r3, #11
 800dc6c:	e054      	b.n	800dd18 <isoDepHandleControlMsg+0x168>
            }
            
            /* Check if WTXM is valid */
            if( ! isoDep_isWTXMValid(param) )
 800dc6e:	79bb      	ldrb	r3, [r7, #6]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d002      	beq.n	800dc7a <isoDepHandleControlMsg+0xca>
 800dc74:	79bb      	ldrb	r3, [r7, #6]
 800dc76:	2b3b      	cmp	r3, #59	; 0x3b
 800dc78:	d901      	bls.n	800dc7e <isoDepHandleControlMsg+0xce>
            {
                return ERR_PROTO;
 800dc7a:	230b      	movs	r3, #11
 800dc7c:	e04c      	b.n	800dd18 <isoDepHandleControlMsg+0x168>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 800dc7e:	4b28      	ldr	r3, [pc, #160]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dc80:	785b      	ldrb	r3, [r3, #1]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d111      	bne.n	800dcaa <isoDepHandleControlMsg+0xfa>
            {
                /* Calculate temp Wait Time eXtension */ 
                fwtTemp = (gIsoDep.fwt * param);
 800dc86:	4b26      	ldr	r3, [pc, #152]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	79ba      	ldrb	r2, [r7, #6]
 800dc8c:	fb02 f303 	mul.w	r3, r2, r3
 800dc90:	613b      	str	r3, [r7, #16]
                fwtTemp = MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dc98:	bf28      	it	cs
 800dc9a:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 800dc9e:	613b      	str	r3, [r7, #16]
                fwtTemp += gIsoDep.dFwt;
 800dca0:	4b1f      	ldr	r3, [pc, #124]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	693a      	ldr	r2, [r7, #16]
 800dca6:	4413      	add	r3, r2
 800dca8:	613b      	str	r3, [r7, #16]
            }
            
            pcb = ISODEP_PCB_SWTX;
 800dcaa:	23f2      	movs	r3, #242	; 0xf2
 800dcac:	75fb      	strb	r3, [r7, #23]
            ctrlMsgBuf[ RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN + infLen++] = param;
 800dcae:	7dbb      	ldrb	r3, [r7, #22]
 800dcb0:	1c5a      	adds	r2, r3, #1
 800dcb2:	75ba      	strb	r2, [r7, #22]
 800dcb4:	3302      	adds	r3, #2
 800dcb6:	f107 0218 	add.w	r2, r7, #24
 800dcba:	4413      	add	r3, r2
 800dcbc:	79ba      	ldrb	r2, [r7, #6]
 800dcbe:	f803 2c0c 	strb.w	r2, [r3, #-12]
            break;
 800dcc2:	e01b      	b.n	800dcfc <isoDepHandleControlMsg+0x14c>
            
        /*******************************************************************************/
        case ISODEP_S_DSL:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 800dcc4:	4b16      	ldr	r3, [pc, #88]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dcc6:	79db      	ldrb	r3, [r3, #7]
 800dcc8:	1c5a      	adds	r2, r3, #1
 800dcca:	b2d1      	uxtb	r1, r2
 800dccc:	4a14      	ldr	r2, [pc, #80]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dcce:	71d1      	strb	r1, [r2, #7]
 800dcd0:	4a13      	ldr	r2, [pc, #76]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dcd2:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d901      	bls.n	800dcde <isoDepHandleControlMsg+0x12e>
            {
                return ERR_PROTO;
 800dcda:	230b      	movs	r3, #11
 800dcdc:	e01c      	b.n	800dd18 <isoDepHandleControlMsg+0x168>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 800dcde:	4b10      	ldr	r3, [pc, #64]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dce0:	785b      	ldrb	r3, [r3, #1]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d105      	bne.n	800dcf2 <isoDepHandleControlMsg+0x142>
            {
                /* Digital 1.0 - 13.2.7.3 Poller must wait fwtDEACTIVATION */
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 800dce6:	f44f 338c 	mov.w	r3, #71680	; 0x11800
 800dcea:	613b      	str	r3, [r7, #16]
                gIsoDep.state = ISODEP_ST_PCD_WAIT_DSL;
 800dcec:	4b0c      	ldr	r3, [pc, #48]	; (800dd20 <isoDepHandleControlMsg+0x170>)
 800dcee:	2203      	movs	r2, #3
 800dcf0:	701a      	strb	r2, [r3, #0]
            }
            pcb = ISODEP_PCB_SDSL;
 800dcf2:	23c2      	movs	r3, #194	; 0xc2
 800dcf4:	75fb      	strb	r3, [r7, #23]
            break;
 800dcf6:	e001      	b.n	800dcfc <isoDepHandleControlMsg+0x14c>
        
        /*******************************************************************************/
        default:
            return ERR_INTERNAL;
 800dcf8:	230c      	movs	r3, #12
 800dcfa:	e00d      	b.n	800dd18 <isoDepHandleControlMsg+0x168>
    }
    
    return isoDepTx( pcb, ctrlMsgBuf, &ctrlMsgBuf[RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN], infLen, fwtTemp );
 800dcfc:	7dbb      	ldrb	r3, [r7, #22]
 800dcfe:	b29c      	uxth	r4, r3
 800dd00:	f107 030c 	add.w	r3, r7, #12
 800dd04:	1c9a      	adds	r2, r3, #2
 800dd06:	f107 010c 	add.w	r1, r7, #12
 800dd0a:	7df8      	ldrb	r0, [r7, #23]
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	4623      	mov	r3, r4
 800dd12:	f7ff feb5 	bl	800da80 <isoDepTx>
 800dd16:	4603      	mov	r3, r0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	371c      	adds	r7, #28
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd90      	pop	{r4, r7, pc}
 800dd20:	20002f44 	.word	0x20002f44

0800dd24 <rfalIsoDepInitialize>:
 */


/*******************************************************************************/
void rfalIsoDepInitialize( void )
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	af00      	add	r7, sp, #0
    gIsoDep.state        = ISODEP_ST_IDLE;
 800dd28:	4b26      	ldr	r3, [pc, #152]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	701a      	strb	r2, [r3, #0]
    gIsoDep.role         = ISODEP_ROLE_PCD;
 800dd2e:	4b25      	ldr	r3, [pc, #148]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	705a      	strb	r2, [r3, #1]
    gIsoDep.did          = RFAL_ISODEP_NO_DID;
 800dd34:	4b23      	ldr	r3, [pc, #140]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd36:	2200      	movs	r2, #0
 800dd38:	70da      	strb	r2, [r3, #3]
    gIsoDep.nad          = RFAL_ISODEP_NO_NAD;
 800dd3a:	4b22      	ldr	r3, [pc, #136]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd3c:	22ff      	movs	r2, #255	; 0xff
 800dd3e:	711a      	strb	r2, [r3, #4]
    gIsoDep.blockNumber  = 0;
 800dd40:	4b20      	ldr	r3, [pc, #128]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	709a      	strb	r2, [r3, #2]
    gIsoDep.isTxChaining = false;
 800dd46:	4b1f      	ldr	r3, [pc, #124]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd48:	2200      	movs	r2, #0
 800dd4a:	749a      	strb	r2, [r3, #18]
    gIsoDep.isRxChaining = false;
 800dd4c:	4b1d      	ldr	r3, [pc, #116]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd4e:	2200      	movs	r2, #0
 800dd50:	74da      	strb	r2, [r3, #19]
    gIsoDep.lastDID00    = false;
 800dd52:	4b1c      	ldr	r3, [pc, #112]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd54:	2200      	movs	r2, #0
 800dd56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 800dd5a:	4b1a      	ldr	r3, [pc, #104]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd5c:	2240      	movs	r2, #64	; 0x40
 800dd5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 800dd62:	4b18      	ldr	r3, [pc, #96]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd64:	2210      	movs	r2, #16
 800dd66:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx       = (uint16_t)RFAL_ISODEP_FSX_16;
 800dd68:	4b16      	ldr	r3, [pc, #88]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd6a:	2210      	movs	r2, #16
 800dd6c:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 800dd6e:	4b15      	ldr	r3, [pc, #84]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd70:	2201      	movs	r2, #1
 800dd72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    
    gIsoDep.rxLen        = NULL;
 800dd76:	4b13      	ldr	r3, [pc, #76]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd78:	2200      	movs	r2, #0
 800dd7a:	62da      	str	r2, [r3, #44]	; 0x2c
    gIsoDep.rxBuf        = NULL;
 800dd7c:	4b11      	ldr	r3, [pc, #68]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd7e:	2200      	movs	r2, #0
 800dd80:	619a      	str	r2, [r3, #24]
    
    gIsoDep.isTxPending  = false;
 800dd82:	4b10      	ldr	r3, [pc, #64]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd84:	2200      	movs	r2, #0
 800dd86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    gIsoDep.isWait4WTX   = false;
 800dd8a:	4b0e      	ldr	r3, [pc, #56]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    gIsoDep.compMode       = RFAL_COMPLIANCE_MODE_NFC;
 800dd92:	4b0c      	ldr	r3, [pc, #48]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gIsoDep.maxRetriesR    = RFAL_ISODEP_MAX_R_RETRYS;
 800dd9a:	4b0a      	ldr	r3, [pc, #40]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dd9c:	2203      	movs	r2, #3
 800dd9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    gIsoDep.maxRetriesS    = RFAL_ISODEP_MAX_S_RETRYS;
 800dda2:	4b08      	ldr	r3, [pc, #32]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800dda4:	2203      	movs	r2, #3
 800dda6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    gIsoDep.maxRetriesI    = RFAL_ISODEP_MAX_I_RETRYS;
 800ddaa:	4b06      	ldr	r3, [pc, #24]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800ddac:	2202      	movs	r2, #2
 800ddae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    gIsoDep.maxRetriesRATS = RFAL_ISODEP_RATS_RETRIES;
 800ddb2:	4b04      	ldr	r3, [pc, #16]	; (800ddc4 <rfalIsoDepInitialize+0xa0>)
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    
    isoDepClearCounters();
 800ddba:	f7ff fe4f 	bl	800da5c <isoDepClearCounters>
}
 800ddbe:	bf00      	nop
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	20002f44 	.word	0x20002f44

0800ddc8 <isoDepDataExchangePCD>:


#if RFAL_FEATURE_ISO_DEP_POLL
/*******************************************************************************/
static ReturnCode isoDepDataExchangePCD( uint16_t *outActRxLen, bool *outIsChaining )
{
 800ddc8:	b5b0      	push	{r4, r5, r7, lr}
 800ddca:	b086      	sub	sp, #24
 800ddcc:	af02      	add	r7, sp, #8
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    uint8_t    rxPCB;
    
    /* Check out parameters */
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d002      	beq.n	800ddde <isoDepDataExchangePCD+0x16>
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d101      	bne.n	800dde2 <isoDepDataExchangePCD+0x1a>
    {
        return ERR_PARAM;
 800ddde:	2307      	movs	r3, #7
 800dde0:	e294      	b.n	800e30c <isoDepDataExchangePCD+0x544>
    }    
    
    *outIsChaining = false;
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	2200      	movs	r2, #0
 800dde6:	701a      	strb	r2, [r3, #0]
        
    /* Calculate header required and check if the buffers InfPositions are suitable */    
    gIsoDep.hdrLen = RFAL_ISODEP_PCB_LEN;
 800dde8:	4bb6      	ldr	r3, [pc, #728]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800ddea:	2201      	movs	r2, #1
 800ddec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 800ddf0:	4bb4      	ldr	r3, [pc, #720]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800ddf2:	78db      	ldrb	r3, [r3, #3]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d007      	beq.n	800de08 <isoDepDataExchangePCD+0x40>
 800ddf8:	4bb2      	ldr	r3, [pc, #712]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800ddfa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ddfe:	3301      	adds	r3, #1
 800de00:	b2da      	uxtb	r2, r3
 800de02:	4bb0      	ldr	r3, [pc, #704]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800de04:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)  { gIsoDep.hdrLen  += RFAL_ISODEP_NAD_LEN;  }
 800de08:	4bae      	ldr	r3, [pc, #696]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800de0a:	791b      	ldrb	r3, [r3, #4]
 800de0c:	2bff      	cmp	r3, #255	; 0xff
 800de0e:	d007      	beq.n	800de20 <isoDepDataExchangePCD+0x58>
 800de10:	4bac      	ldr	r3, [pc, #688]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800de12:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800de16:	3301      	adds	r3, #1
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	4baa      	ldr	r3, [pc, #680]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800de1c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    
    /* check if there is enough space before the infPos to append ISO-DEP headers on rx and tx */
    if( (gIsoDep.rxBufInfPos < gIsoDep.hdrLen) || (gIsoDep.txBufInfPos < gIsoDep.hdrLen) )
 800de20:	4ba8      	ldr	r3, [pc, #672]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800de22:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800de26:	4ba7      	ldr	r3, [pc, #668]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800de28:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d307      	bcc.n	800de40 <isoDepDataExchangePCD+0x78>
 800de30:	4ba4      	ldr	r3, [pc, #656]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800de32:	f893 2020 	ldrb.w	r2, [r3, #32]
 800de36:	4ba3      	ldr	r3, [pc, #652]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800de38:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d201      	bcs.n	800de44 <isoDepDataExchangePCD+0x7c>
    {
        return ERR_PARAM;
 800de40:	2307      	movs	r3, #7
 800de42:	e263      	b.n	800e30c <isoDepDataExchangePCD+0x544>
    }
    
    /*******************************************************************************/
    /* Wait until SFGT has been fulfilled (as a PCD) */
    if(gIsoDep.SFGTTimer != 0U)
 800de44:	4b9f      	ldr	r3, [pc, #636]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800de46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00c      	beq.n	800de66 <isoDepDataExchangePCD+0x9e>
    {
        if( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) )
 800de4c:	4b9d      	ldr	r3, [pc, #628]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800de4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de50:	4618      	mov	r0, r3
 800de52:	f7f6 fa05 	bl	8004260 <timerIsExpired>
 800de56:	4603      	mov	r3, r0
 800de58:	f083 0301 	eor.w	r3, r3, #1
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d001      	beq.n	800de66 <isoDepDataExchangePCD+0x9e>
        {
            return ERR_BUSY;
 800de62:	2302      	movs	r3, #2
 800de64:	e252      	b.n	800e30c <isoDepDataExchangePCD+0x544>
        }
    }
    /* Once done, clear SFGT timer */
    gIsoDep.SFGTTimer = 0;
 800de66:	4b97      	ldr	r3, [pc, #604]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800de68:	2200      	movs	r2, #0
 800de6a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    
    /*******************************************************************************/
    switch( gIsoDep.state )
 800de6c:	4b95      	ldr	r3, [pc, #596]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	2b03      	cmp	r3, #3
 800de72:	f200 8249 	bhi.w	800e308 <isoDepDataExchangePCD+0x540>
 800de76:	a201      	add	r2, pc, #4	; (adr r2, 800de7c <isoDepDataExchangePCD+0xb4>)
 800de78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de7c:	0800de8d 	.word	0x0800de8d
 800de80:	0800de91 	.word	0x0800de91
 800de84:	0800dedf 	.word	0x0800dedf
 800de88:	0800dedf 	.word	0x0800dedf
    {
        /*******************************************************************************/
        case ISODEP_ST_IDLE:
            return ERR_NONE;
 800de8c:	2300      	movs	r3, #0
 800de8e:	e23d      	b.n	800e30c <isoDepDataExchangePCD+0x544>
        
        /*******************************************************************************/
        case ISODEP_ST_PCD_TX:
            ret = isoDepTx( isoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, (gIsoDep.fwt + gIsoDep.dFwt) );
 800de90:	4b8c      	ldr	r3, [pc, #560]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800de92:	789b      	ldrb	r3, [r3, #2]
 800de94:	f003 0301 	and.w	r3, r3, #1
 800de98:	b2db      	uxtb	r3, r3
 800de9a:	f043 0302 	orr.w	r3, r3, #2
 800de9e:	b2d8      	uxtb	r0, r3
 800dea0:	4b88      	ldr	r3, [pc, #544]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800dea2:	6959      	ldr	r1, [r3, #20]
 800dea4:	4b87      	ldr	r3, [pc, #540]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800dea6:	695b      	ldr	r3, [r3, #20]
 800dea8:	4a86      	ldr	r2, [pc, #536]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800deaa:	f892 2020 	ldrb.w	r2, [r2, #32]
 800deae:	189c      	adds	r4, r3, r2
 800deb0:	4b84      	ldr	r3, [pc, #528]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800deb2:	8b9d      	ldrh	r5, [r3, #28]
 800deb4:	4b83      	ldr	r3, [pc, #524]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800deb6:	689a      	ldr	r2, [r3, #8]
 800deb8:	4b82      	ldr	r3, [pc, #520]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	4413      	add	r3, r2
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	462b      	mov	r3, r5
 800dec2:	4622      	mov	r2, r4
 800dec4:	f7ff fddc 	bl	800da80 <isoDepTx>
 800dec8:	4603      	mov	r3, r0
 800deca:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 800decc:	89fb      	ldrh	r3, [r7, #14]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d103      	bne.n	800deda <isoDepDataExchangePCD+0x112>
            {
              case ERR_NONE:
                  gIsoDep.state = ISODEP_ST_PCD_RX;
 800ded2:	4b7c      	ldr	r3, [pc, #496]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800ded4:	2202      	movs	r2, #2
 800ded6:	701a      	strb	r2, [r3, #0]
                  break;
 800ded8:	e001      	b.n	800dede <isoDepDataExchangePCD+0x116>
              
              default:
                  return ret;
 800deda:	89fb      	ldrh	r3, [r7, #14]
 800dedc:	e216      	b.n	800e30c <isoDepDataExchangePCD+0x544>
          
        /*******************************************************************************/
        case ISODEP_ST_PCD_WAIT_DSL:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
        case ISODEP_ST_PCD_RX:
                      
            ret = rfalGetTransceiveStatus();
 800dede:	f008 f8c7 	bl	8016070 <rfalGetTransceiveStatus>
 800dee2:	4603      	mov	r3, r0
 800dee4:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 800dee6:	89fb      	ldrh	r3, [r7, #14]
 800dee8:	2b28      	cmp	r3, #40	; 0x28
 800deea:	f200 8082 	bhi.w	800dff2 <isoDepDataExchangePCD+0x22a>
 800deee:	a201      	add	r2, pc, #4	; (adr r2, 800def4 <isoDepDataExchangePCD+0x12c>)
 800def0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def4:	0800dff7 	.word	0x0800dff7
 800def8:	0800dff3 	.word	0x0800dff3
 800defc:	0800dfef 	.word	0x0800dfef
 800df00:	0800dff3 	.word	0x0800dff3
 800df04:	0800df99 	.word	0x0800df99
 800df08:	0800dff3 	.word	0x0800dff3
 800df0c:	0800dff3 	.word	0x0800dff3
 800df10:	0800dff3 	.word	0x0800dff3
 800df14:	0800dff3 	.word	0x0800dff3
 800df18:	0800df99 	.word	0x0800df99
 800df1c:	0800dff3 	.word	0x0800dff3
 800df20:	0800dff3 	.word	0x0800dff3
 800df24:	0800dff3 	.word	0x0800dff3
 800df28:	0800dff3 	.word	0x0800dff3
 800df2c:	0800dff3 	.word	0x0800dff3
 800df30:	0800dff3 	.word	0x0800dff3
 800df34:	0800dff3 	.word	0x0800dff3
 800df38:	0800dff3 	.word	0x0800dff3
 800df3c:	0800dff3 	.word	0x0800dff3
 800df40:	0800dff3 	.word	0x0800dff3
 800df44:	0800dff3 	.word	0x0800dff3
 800df48:	0800df99 	.word	0x0800df99
 800df4c:	0800dff3 	.word	0x0800dff3
 800df50:	0800dff3 	.word	0x0800dff3
 800df54:	0800dff3 	.word	0x0800dff3
 800df58:	0800dff3 	.word	0x0800dff3
 800df5c:	0800dff3 	.word	0x0800dff3
 800df60:	0800df99 	.word	0x0800df99
 800df64:	0800dff3 	.word	0x0800dff3
 800df68:	0800dff3 	.word	0x0800dff3
 800df6c:	0800dff3 	.word	0x0800dff3
 800df70:	0800dff3 	.word	0x0800dff3
 800df74:	0800dff3 	.word	0x0800dff3
 800df78:	0800dff3 	.word	0x0800dff3
 800df7c:	0800dff3 	.word	0x0800dff3
 800df80:	0800dff3 	.word	0x0800dff3
 800df84:	0800dff3 	.word	0x0800dff3
 800df88:	0800dff3 	.word	0x0800dff3
 800df8c:	0800dff3 	.word	0x0800dff3
 800df90:	0800dff3 	.word	0x0800dff3
 800df94:	0800df99 	.word	0x0800df99
                case ERR_CRC:
                case ERR_PAR:
                case ERR_FRAMING:          /* added to handle test cases scenario TC_POL_NFCB_T4AT_BI_82_x_y & TC_POL_NFCB_T4BT_BI_82_x_y */
                case ERR_INCOMPLETE_BYTE:  /* added to handle test cases scenario TC_POL_NFCB_T4AT_BI_82_x_y & TC_POL_NFCB_T4BT_BI_82_x_y  */
                    
                    if( gIsoDep.isRxChaining )
 800df98:	4b4a      	ldr	r3, [pc, #296]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800df9a:	7cdb      	ldrb	r3, [r3, #19]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d00a      	beq.n	800dfb6 <isoDepDataExchangePCD+0x1ee>
                    {   /* Rule 5 - In PICC chaining when a invalid/timeout occurs -> R-ACK */                        
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	2000      	movs	r0, #0
 800dfa4:	f7ff fe04 	bl	800dbb0 <isoDepHandleControlMsg>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	81fb      	strh	r3, [r7, #14]
 800dfac:	89fb      	ldrh	r3, [r7, #14]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d01b      	beq.n	800dfea <isoDepDataExchangePCD+0x222>
 800dfb2:	89fb      	ldrh	r3, [r7, #14]
 800dfb4:	e1aa      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                    }
                    else if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 800dfb6:	4b43      	ldr	r3, [pc, #268]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	2b03      	cmp	r3, #3
 800dfbc:	d10a      	bne.n	800dfd4 <isoDepDataExchangePCD+0x20c>
                    {   /* Rule 8 - If s-Deselect response fails MAY retransmit */
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ) );
 800dfbe:	2100      	movs	r1, #0
 800dfc0:	2003      	movs	r0, #3
 800dfc2:	f7ff fdf5 	bl	800dbb0 <isoDepHandleControlMsg>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	81fb      	strh	r3, [r7, #14]
 800dfca:	89fb      	ldrh	r3, [r7, #14]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00c      	beq.n	800dfea <isoDepDataExchangePCD+0x222>
 800dfd0:	89fb      	ldrh	r3, [r7, #14]
 800dfd2:	e19b      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                    }
                    else
                    {   /* Rule 4 - When a invalid block or timeout occurs -> R-NACK */
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	2001      	movs	r0, #1
 800dfd8:	f7ff fdea 	bl	800dbb0 <isoDepHandleControlMsg>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	81fb      	strh	r3, [r7, #14]
 800dfe0:	89fb      	ldrh	r3, [r7, #14]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d001      	beq.n	800dfea <isoDepDataExchangePCD+0x222>
 800dfe6:	89fb      	ldrh	r3, [r7, #14]
 800dfe8:	e190      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                    }
                    return ERR_BUSY;
 800dfea:	2302      	movs	r3, #2
 800dfec:	e18e      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                    
                case ERR_NONE:
                    break;
                    
                case ERR_BUSY:
                    return ERR_BUSY;  /* Debug purposes */
 800dfee:	2302      	movs	r3, #2
 800dff0:	e18c      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                    
                default:
                    return ret;
 800dff2:	89fb      	ldrh	r3, [r7, #14]
 800dff4:	e18a      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                    break;
 800dff6:	bf00      	nop
            
            /*******************************************************************************/
            /* No error, process incoming msg                                              */
            /*******************************************************************************/
            
            (*outActRxLen) = rfalConvBitsToBytes( *outActRxLen );
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	881b      	ldrh	r3, [r3, #0]
 800dffc:	3307      	adds	r3, #7
 800dffe:	08db      	lsrs	r3, r3, #3
 800e000:	b29a      	uxth	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	801a      	strh	r2, [r3, #0]
            
            
            /* Check rcvd msg length, cannot be less then the expected header */
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	881a      	ldrh	r2, [r3, #0]
 800e00a:	4b2e      	ldr	r3, [pc, #184]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800e00c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e010:	b29b      	uxth	r3, r3
 800e012:	429a      	cmp	r2, r3
 800e014:	d305      	bcc.n	800e022 <isoDepDataExchangePCD+0x25a>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	881a      	ldrh	r2, [r3, #0]
 800e01a:	4b2a      	ldr	r3, [pc, #168]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800e01c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e01e:	429a      	cmp	r2, r3
 800e020:	d301      	bcc.n	800e026 <isoDepDataExchangePCD+0x25e>
            {
                return ERR_PROTO;
 800e022:	230b      	movs	r3, #11
 800e024:	e172      	b.n	800e30c <isoDepDataExchangePCD+0x544>
            }
            
            /* Grab rcvd PCB */
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 800e026:	4b27      	ldr	r3, [pc, #156]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800e028:	699b      	ldr	r3, [r3, #24]
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	737b      	strb	r3, [r7, #13]
            
            
            /* EMVCo doesn't allow usage of for CID or NAD   EMVCo 2.6 TAble 10.2 */
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( isoDep_PCBhasDID(rxPCB) || isoDep_PCBhasNAD(rxPCB)) )
 800e02e:	4b25      	ldr	r3, [pc, #148]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800e030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e034:	2b01      	cmp	r3, #1
 800e036:	d10b      	bne.n	800e050 <isoDepDataExchangePCD+0x288>
 800e038:	7b7b      	ldrb	r3, [r7, #13]
 800e03a:	f003 0308 	and.w	r3, r3, #8
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d104      	bne.n	800e04c <isoDepDataExchangePCD+0x284>
 800e042:	7b7b      	ldrb	r3, [r7, #13]
 800e044:	f003 0304 	and.w	r3, r3, #4
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d001      	beq.n	800e050 <isoDepDataExchangePCD+0x288>
            {
                return ERR_PROTO;
 800e04c:	230b      	movs	r3, #11
 800e04e:	e15d      	b.n	800e30c <isoDepDataExchangePCD+0x544>
            }
            
            /* If we are expecting DID, check if PCB signals its presence and if device ID match*/
            if( (gIsoDep.did != RFAL_ISODEP_NO_DID) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])) )
 800e050:	4b1c      	ldr	r3, [pc, #112]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800e052:	78db      	ldrb	r3, [r3, #3]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d00e      	beq.n	800e076 <isoDepDataExchangePCD+0x2ae>
 800e058:	7b7b      	ldrb	r3, [r7, #13]
 800e05a:	f003 0308 	and.w	r3, r3, #8
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d007      	beq.n	800e072 <isoDepDataExchangePCD+0x2aa>
 800e062:	4b18      	ldr	r3, [pc, #96]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800e064:	78da      	ldrb	r2, [r3, #3]
 800e066:	4b17      	ldr	r3, [pc, #92]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800e068:	699b      	ldr	r3, [r3, #24]
 800e06a:	3301      	adds	r3, #1
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d001      	beq.n	800e076 <isoDepDataExchangePCD+0x2ae>
            {
                return ERR_PROTO;
 800e072:	230b      	movs	r3, #11
 800e074:	e14a      	b.n	800e30c <isoDepDataExchangePCD+0x544>
            
            
            /*******************************************************************************/
            /* Process S-Block                                                             */
            /*******************************************************************************/
            if( isoDep_PCBisSBlock(rxPCB) )
 800e076:	7b7b      	ldrb	r3, [r7, #13]
 800e078:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800e07c:	2bc2      	cmp	r3, #194	; 0xc2
 800e07e:	d137      	bne.n	800e0f0 <isoDepDataExchangePCD+0x328>
            {
                /* Check if is a Wait Time eXtension */
                if( isoDep_PCBisSWTX(rxPCB) )
 800e080:	7b7b      	ldrb	r3, [r7, #13]
 800e082:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800e086:	2bc2      	cmp	r3, #194	; 0xc2
 800e088:	d11e      	bne.n	800e0c8 <isoDepDataExchangePCD+0x300>
 800e08a:	7b7b      	ldrb	r3, [r7, #13]
 800e08c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e090:	2b30      	cmp	r3, #48	; 0x30
 800e092:	d119      	bne.n	800e0c8 <isoDepDataExchangePCD+0x300>
                {
                    /* Rule 3 - respond to S-block: get 1st INF byte S(STW): Power + WTXM */
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_WTX, isoDep_GetWTXM(gIsoDep.rxBuf[gIsoDep.hdrLen]) ) );                    
 800e094:	4b0b      	ldr	r3, [pc, #44]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800e096:	699b      	ldr	r3, [r3, #24]
 800e098:	4a0a      	ldr	r2, [pc, #40]	; (800e0c4 <isoDepDataExchangePCD+0x2fc>)
 800e09a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800e09e:	4413      	add	r3, r2
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	2002      	movs	r0, #2
 800e0ac:	f7ff fd80 	bl	800dbb0 <isoDepHandleControlMsg>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	81fb      	strh	r3, [r7, #14]
 800e0b4:	89fb      	ldrh	r3, [r7, #14]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d001      	beq.n	800e0be <isoDepDataExchangePCD+0x2f6>
 800e0ba:	89fb      	ldrh	r3, [r7, #14]
 800e0bc:	e126      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                    return ERR_BUSY;
 800e0be:	2302      	movs	r3, #2
 800e0c0:	e124      	b.n	800e30c <isoDepDataExchangePCD+0x544>
 800e0c2:	bf00      	nop
 800e0c4:	20002f44 	.word	0x20002f44
                }
                
                /* Check if is a deselect response */
                if( isoDep_PCBisSDeselect(rxPCB) )
 800e0c8:	7b7b      	ldrb	r3, [r7, #13]
 800e0ca:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800e0ce:	2bc2      	cmp	r3, #194	; 0xc2
 800e0d0:	d10c      	bne.n	800e0ec <isoDepDataExchangePCD+0x324>
 800e0d2:	7b7b      	ldrb	r3, [r7, #13]
 800e0d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d107      	bne.n	800e0ec <isoDepDataExchangePCD+0x324>
                {
                    if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 800e0dc:	4b8d      	ldr	r3, [pc, #564]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	2b03      	cmp	r3, #3
 800e0e2:	d103      	bne.n	800e0ec <isoDepDataExchangePCD+0x324>
                    {
                        rfalIsoDepInitialize();         /* Session finished reInit vars */
 800e0e4:	f7ff fe1e 	bl	800dd24 <rfalIsoDepInitialize>
                        return ERR_NONE;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	e10f      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                    
                    /* Deselect response not expected  */
                    /* fall through to PROTO error */
                }
                /* Unexpected S-Block */
                return ERR_PROTO;
 800e0ec:	230b      	movs	r3, #11
 800e0ee:	e10d      	b.n	800e30c <isoDepDataExchangePCD+0x544>
            }
            
            /*******************************************************************************/
            /* Process R-Block                                                             */
            /*******************************************************************************/
            else if( isoDep_PCBisRBlock(rxPCB) )
 800e0f0:	7b7b      	ldrb	r3, [r7, #13]
 800e0f2:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 800e0f6:	2ba2      	cmp	r3, #162	; 0xa2
 800e0f8:	d141      	bne.n	800e17e <isoDepDataExchangePCD+0x3b6>
            {
                if( isoDep_PCBisRACK(rxPCB) )                            /* Check if is a R-ACK */
 800e0fa:	7b7b      	ldrb	r3, [r7, #13]
 800e0fc:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 800e100:	2ba2      	cmp	r3, #162	; 0xa2
 800e102:	d13a      	bne.n	800e17a <isoDepDataExchangePCD+0x3b2>
 800e104:	7b7b      	ldrb	r3, [r7, #13]
 800e106:	f003 0310 	and.w	r3, r3, #16
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d135      	bne.n	800e17a <isoDepDataExchangePCD+0x3b2>
                {
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Expected block number  */
 800e10e:	7b7b      	ldrb	r3, [r7, #13]
 800e110:	f003 0301 	and.w	r3, r3, #1
 800e114:	4a7f      	ldr	r2, [pc, #508]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e116:	7892      	ldrb	r2, [r2, #2]
 800e118:	4293      	cmp	r3, r2
 800e11a:	d119      	bne.n	800e150 <isoDepDataExchangePCD+0x388>
                    {
                        /* Rule B - ACK with expected bn -> Increment block number */
                        gIsoDep.blockNumber = isoDep_PCBNextBN( gIsoDep.blockNumber );
 800e11c:	4b7d      	ldr	r3, [pc, #500]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e11e:	789b      	ldrb	r3, [r3, #2]
 800e120:	f003 0301 	and.w	r3, r3, #1
 800e124:	b2db      	uxtb	r3, r3
 800e126:	2b00      	cmp	r3, #0
 800e128:	bf0c      	ite	eq
 800e12a:	2301      	moveq	r3, #1
 800e12c:	2300      	movne	r3, #0
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	461a      	mov	r2, r3
 800e132:	4b78      	ldr	r3, [pc, #480]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e134:	709a      	strb	r2, [r3, #2]
                                                
                        /* R-ACK only allowed when PCD chaining */
                        if( !gIsoDep.isTxChaining )
 800e136:	4b77      	ldr	r3, [pc, #476]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e138:	7c9b      	ldrb	r3, [r3, #18]
 800e13a:	f083 0301 	eor.w	r3, r3, #1
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	2b00      	cmp	r3, #0
 800e142:	d001      	beq.n	800e148 <isoDepDataExchangePCD+0x380>
                        {
                            return ERR_PROTO;
 800e144:	230b      	movs	r3, #11
 800e146:	e0e1      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                        }
                        
                        /* Rule 7 - Chaining transaction done, continue chaining */
                        isoDepClearCounters();
 800e148:	f7ff fc88 	bl	800da5c <isoDepClearCounters>
                        return ERR_NONE;  /* This block has been transmitted */
 800e14c:	2300      	movs	r3, #0
 800e14e:	e0dd      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                    }
                    else
                    {
                        /* Rule 6 - R-ACK with wrong block number retransmit */
                        if( gIsoDep.cntIRetrys++ < gIsoDep.maxRetriesI )
 800e150:	4b70      	ldr	r3, [pc, #448]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e152:	795b      	ldrb	r3, [r3, #5]
 800e154:	1c5a      	adds	r2, r3, #1
 800e156:	b2d1      	uxtb	r1, r2
 800e158:	4a6e      	ldr	r2, [pc, #440]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e15a:	7151      	strb	r1, [r2, #5]
 800e15c:	4a6d      	ldr	r2, [pc, #436]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e15e:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800e162:	4293      	cmp	r3, r2
 800e164:	d207      	bcs.n	800e176 <isoDepDataExchangePCD+0x3ae>
                        {
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 800e166:	4b6b      	ldr	r3, [pc, #428]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e168:	2200      	movs	r2, #0
 800e16a:	719a      	strb	r2, [r3, #6]
                            gIsoDep.state = ISODEP_ST_PCD_TX;
 800e16c:	4b69      	ldr	r3, [pc, #420]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e16e:	2201      	movs	r2, #1
 800e170:	701a      	strb	r2, [r3, #0]
                            return ERR_BUSY;
 800e172:	2302      	movs	r3, #2
 800e174:	e0ca      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                        }
                        return ERR_PROTO;
 800e176:	230b      	movs	r3, #11
 800e178:	e0c8      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                    }
                }
                else  /* Unexcpected R-Block */
                {
                    return ERR_PROTO;
 800e17a:	230b      	movs	r3, #11
 800e17c:	e0c6      	b.n	800e30c <isoDepDataExchangePCD+0x544>
            }
            
            /*******************************************************************************/
            /* Process I-Block                                                             */
            /*******************************************************************************/
            else if( isoDep_PCBisIBlock(rxPCB) )
 800e17e:	7b7b      	ldrb	r3, [r7, #13]
 800e180:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 800e184:	2b02      	cmp	r3, #2
 800e186:	f040 80bd 	bne.w	800e304 <isoDepDataExchangePCD+0x53c>
            {
                /*******************************************************************************/
                /* is PICC performing chaining                                                 */
                if( isoDep_PCBisChaining(rxPCB) )
 800e18a:	7b7b      	ldrb	r3, [r7, #13]
 800e18c:	f003 0310 	and.w	r3, r3, #16
 800e190:	2b00      	cmp	r3, #0
 800e192:	d05e      	beq.n	800e252 <isoDepDataExchangePCD+0x48a>
                {
                    gIsoDep.isRxChaining = true;
 800e194:	4b5f      	ldr	r3, [pc, #380]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e196:	2201      	movs	r2, #1
 800e198:	74da      	strb	r2, [r3, #19]
                    *outIsChaining       = true;
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	2201      	movs	r2, #1
 800e19e:	701a      	strb	r2, [r3, #0]
                    
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 800e1a0:	7b7b      	ldrb	r3, [r7, #13]
 800e1a2:	f003 0301 	and.w	r3, r3, #1
 800e1a6:	4a5b      	ldr	r2, [pc, #364]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e1a8:	7892      	ldrb	r2, [r2, #2]
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d144      	bne.n	800e238 <isoDepDataExchangePCD+0x470>
                    {
                        /* Rule B - ACK with correct block number -> Increase Block number */
                        isoDep_ToggleBN( gIsoDep.blockNumber );
 800e1ae:	4b59      	ldr	r3, [pc, #356]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e1b0:	789b      	ldrb	r3, [r3, #2]
 800e1b2:	f003 0301 	and.w	r3, r3, #1
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	bf0c      	ite	eq
 800e1bc:	2301      	moveq	r3, #1
 800e1be:	2300      	movne	r3, #0
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	4b53      	ldr	r3, [pc, #332]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e1c6:	709a      	strb	r2, [r3, #2]
                        
                        isoDepClearCounters();  /* Clear counters in case R counter is already at max */
 800e1c8:	f7ff fc48 	bl	800da5c <isoDepClearCounters>
                        
                        /* Rule 2 - Send ACK */
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 800e1cc:	2100      	movs	r1, #0
 800e1ce:	2000      	movs	r0, #0
 800e1d0:	f7ff fcee 	bl	800dbb0 <isoDepHandleControlMsg>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	81fb      	strh	r3, [r7, #14]
 800e1d8:	89fb      	ldrh	r3, [r7, #14]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <isoDepDataExchangePCD+0x41a>
 800e1de:	89fb      	ldrh	r3, [r7, #14]
 800e1e0:	e094      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                        
                        /* Received I-Block with chaining, send current data to DH */
                        
                        /* remove ISO DEP header, check is necessary to move the INF data on the buffer */
                        *outActRxLen -= gIsoDep.hdrLen;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	881a      	ldrh	r2, [r3, #0]
 800e1e6:	4b4b      	ldr	r3, [pc, #300]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e1e8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	1ad3      	subs	r3, r2, r3
 800e1f0:	b29a      	uxth	r2, r3
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	801a      	strh	r2, [r3, #0]
                        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 800e1f6:	4b47      	ldr	r3, [pc, #284]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e1f8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800e1fc:	4b45      	ldr	r3, [pc, #276]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e1fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e202:	429a      	cmp	r2, r3
 800e204:	d014      	beq.n	800e230 <isoDepDataExchangePCD+0x468>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	881b      	ldrh	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d010      	beq.n	800e230 <isoDepDataExchangePCD+0x468>
                        {
                            ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 800e20e:	4b41      	ldr	r3, [pc, #260]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e210:	699b      	ldr	r3, [r3, #24]
 800e212:	4a40      	ldr	r2, [pc, #256]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e214:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800e218:	1898      	adds	r0, r3, r2
 800e21a:	4b3e      	ldr	r3, [pc, #248]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e21c:	699b      	ldr	r3, [r3, #24]
 800e21e:	4a3d      	ldr	r2, [pc, #244]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e220:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800e224:	1899      	adds	r1, r3, r2
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	881b      	ldrh	r3, [r3, #0]
 800e22a:	461a      	mov	r2, r3
 800e22c:	f00a fdee 	bl	8018e0c <memmove>
                        }
                        
                        isoDepClearCounters();
 800e230:	f7ff fc14 	bl	800da5c <isoDepClearCounters>
                        return ERR_AGAIN;       /* Send Again signalling to run again, but some chaining data has arrived */
 800e234:	230d      	movs	r3, #13
 800e236:	e069      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                    }
                    else
                    {
                        /* Rule 5 - PICC chaining invalid I-Block -> R-ACK */
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );                        
 800e238:	2100      	movs	r1, #0
 800e23a:	2000      	movs	r0, #0
 800e23c:	f7ff fcb8 	bl	800dbb0 <isoDepHandleControlMsg>
 800e240:	4603      	mov	r3, r0
 800e242:	81fb      	strh	r3, [r7, #14]
 800e244:	89fb      	ldrh	r3, [r7, #14]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d001      	beq.n	800e24e <isoDepDataExchangePCD+0x486>
 800e24a:	89fb      	ldrh	r3, [r7, #14]
 800e24c:	e05e      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                    }
                    return ERR_BUSY;
 800e24e:	2302      	movs	r3, #2
 800e250:	e05c      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                }
                
                gIsoDep.isRxChaining = false; /* clear PICC chaining flag */                
 800e252:	4b30      	ldr	r3, [pc, #192]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e254:	2200      	movs	r2, #0
 800e256:	74da      	strb	r2, [r3, #19]
                
                if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 800e258:	7b7b      	ldrb	r3, [r7, #13]
 800e25a:	f003 0301 	and.w	r3, r3, #1
 800e25e:	4a2d      	ldr	r2, [pc, #180]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e260:	7892      	ldrb	r2, [r2, #2]
 800e262:	4293      	cmp	r3, r2
 800e264:	d13a      	bne.n	800e2dc <isoDepDataExchangePCD+0x514>
                {
                    /* Rule B - I-Block with correct block number -> Increase Block number */
                    isoDep_ToggleBN( gIsoDep.blockNumber );
 800e266:	4b2b      	ldr	r3, [pc, #172]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e268:	789b      	ldrb	r3, [r3, #2]
 800e26a:	f003 0301 	and.w	r3, r3, #1
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	2b00      	cmp	r3, #0
 800e272:	bf0c      	ite	eq
 800e274:	2301      	moveq	r3, #1
 800e276:	2300      	movne	r3, #0
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	461a      	mov	r2, r3
 800e27c:	4b25      	ldr	r3, [pc, #148]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e27e:	709a      	strb	r2, [r3, #2]
                    
                    /* I-Block transaction done successfully */
                    
                    /* remove ISO DEP header, check is necessary to move the INF data on the buffer */
                    *outActRxLen -= gIsoDep.hdrLen;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	881a      	ldrh	r2, [r3, #0]
 800e284:	4b23      	ldr	r3, [pc, #140]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e286:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	1ad3      	subs	r3, r2, r3
 800e28e:	b29a      	uxth	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	801a      	strh	r2, [r3, #0]
                    if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 800e294:	4b1f      	ldr	r3, [pc, #124]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e296:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800e29a:	4b1e      	ldr	r3, [pc, #120]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e29c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d014      	beq.n	800e2ce <isoDepDataExchangePCD+0x506>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	881b      	ldrh	r3, [r3, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d010      	beq.n	800e2ce <isoDepDataExchangePCD+0x506>
                    {
                        ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 800e2ac:	4b19      	ldr	r3, [pc, #100]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e2ae:	699b      	ldr	r3, [r3, #24]
 800e2b0:	4a18      	ldr	r2, [pc, #96]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e2b2:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800e2b6:	1898      	adds	r0, r3, r2
 800e2b8:	4b16      	ldr	r3, [pc, #88]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e2ba:	699b      	ldr	r3, [r3, #24]
 800e2bc:	4a15      	ldr	r2, [pc, #84]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e2be:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800e2c2:	1899      	adds	r1, r3, r2
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	881b      	ldrh	r3, [r3, #0]
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	f00a fd9f 	bl	8018e0c <memmove>
                    }
                    
                    gIsoDep.state = ISODEP_ST_IDLE;
 800e2ce:	4b11      	ldr	r3, [pc, #68]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	701a      	strb	r2, [r3, #0]
                    isoDepClearCounters();
 800e2d4:	f7ff fbc2 	bl	800da5c <isoDepClearCounters>
                    return ERR_NONE;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	e017      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                }
                else
                {
                    if( (gIsoDep.compMode != RFAL_COMPLIANCE_MODE_ISO) )
 800e2dc:	4b0d      	ldr	r3, [pc, #52]	; (800e314 <isoDepDataExchangePCD+0x54c>)
 800e2de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2e2:	2b02      	cmp	r3, #2
 800e2e4:	d001      	beq.n	800e2ea <isoDepDataExchangePCD+0x522>
                    {
                        /* Invalid Block (not chaining) -> Raise error   Digital 1.1  15.2.6.4   EMVCo 2.6  10.3.5.4 */
                        return ERR_PROTO;
 800e2e6:	230b      	movs	r3, #11
 800e2e8:	e010      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                    }

                    /* Rule 4 - Invalid Block -> R-NAK */
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	2001      	movs	r0, #1
 800e2ee:	f7ff fc5f 	bl	800dbb0 <isoDepHandleControlMsg>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	81fb      	strh	r3, [r7, #14]
 800e2f6:	89fb      	ldrh	r3, [r7, #14]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d001      	beq.n	800e300 <isoDepDataExchangePCD+0x538>
 800e2fc:	89fb      	ldrh	r3, [r7, #14]
 800e2fe:	e005      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                    return ERR_BUSY;
 800e300:	2302      	movs	r3, #2
 800e302:	e003      	b.n	800e30c <isoDepDataExchangePCD+0x544>
                }
            }
            else /* not S/R/I - Block */
            {
                return ERR_PROTO;
 800e304:	230b      	movs	r3, #11
 800e306:	e001      	b.n	800e30c <isoDepDataExchangePCD+0x544>
            /* fall through */
          
        /*******************************************************************************/
        default:               /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            /* MISRA 16.4: no empty default (comment will suffice) */
            break;
 800e308:	bf00      	nop
    }
    
    return ERR_INTERNAL;
 800e30a:	230c      	movs	r3, #12
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3710      	adds	r7, #16
 800e310:	46bd      	mov	sp, r7
 800e312:	bdb0      	pop	{r4, r5, r7, pc}
 800e314:	20002f44 	.word	0x20002f44

0800e318 <rfalIsoDepDeselect>:

/*******************************************************************************/
ReturnCode rfalIsoDepDeselect( void )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
    bool       dummyB;
    
    /*******************************************************************************/
    /* Check if  rx parameters have been set before, otherwise use global variable *
     * To cope with a Deselect after RATS\ATTRIB without any I-Block exchanged     */
    if( (gIsoDep.rxLen == NULL) || (gIsoDep.rxBuf == NULL) )
 800e31e:	4b23      	ldr	r3, [pc, #140]	; (800e3ac <rfalIsoDepDeselect+0x94>)
 800e320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e322:	2b00      	cmp	r3, #0
 800e324:	d003      	beq.n	800e32e <rfalIsoDepDeselect+0x16>
 800e326:	4b21      	ldr	r3, [pc, #132]	; (800e3ac <rfalIsoDepDeselect+0x94>)
 800e328:	699b      	ldr	r3, [r3, #24]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d110      	bne.n	800e350 <rfalIsoDepDeselect+0x38>
    {
        /* Using local vars would be safe as rfalIsoDepInitialize will clear the   *
         * reference to local vars before exiting (no EXIT_ON_ERR),                *
         * but MISRA 18.6 3217 would be still be flagged. Using static variables   */
        gIsoDep.rxLen       = &gIsoDep.ctrlRxLen;
 800e32e:	4b1f      	ldr	r3, [pc, #124]	; (800e3ac <rfalIsoDepDeselect+0x94>)
 800e330:	4a1f      	ldr	r2, [pc, #124]	; (800e3b0 <rfalIsoDepDeselect+0x98>)
 800e332:	62da      	str	r2, [r3, #44]	; 0x2c
        gIsoDep.rxBuf       = gIsoDep.ctrlRxBuf;
 800e334:	4b1d      	ldr	r3, [pc, #116]	; (800e3ac <rfalIsoDepDeselect+0x94>)
 800e336:	4a1f      	ldr	r2, [pc, #124]	; (800e3b4 <rfalIsoDepDeselect+0x9c>)
 800e338:	619a      	str	r2, [r3, #24]
        
        gIsoDep.rxBufLen    = ISODEP_CONTROLMSG_BUF_LEN;
 800e33a:	4b1c      	ldr	r3, [pc, #112]	; (800e3ac <rfalIsoDepDeselect+0x94>)
 800e33c:	2204      	movs	r2, #4
 800e33e:	83da      	strh	r2, [r3, #30]
        gIsoDep.rxBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 800e340:	4b1a      	ldr	r3, [pc, #104]	; (800e3ac <rfalIsoDepDeselect+0x94>)
 800e342:	2202      	movs	r2, #2
 800e344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 800e348:	4b18      	ldr	r3, [pc, #96]	; (800e3ac <rfalIsoDepDeselect+0x94>)
 800e34a:	2202      	movs	r2, #2
 800e34c:	f883 2020 	strb.w	r2, [r3, #32]
    
    
    /*******************************************************************************/
    /* The Deselect process is being done blocking, Digital 1.0 - 13.2.7.1 MUST wait response and retry*/
    /* Set the maximum reruns while we will wait for a response */
    cntRerun = ISODEP_MAX_RERUNS;
 800e350:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800e354:	607b      	str	r3, [r7, #4]
    
    /* Send DSL request and run protocol until get a response, error or "timeout" */    
    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ));
 800e356:	2100      	movs	r1, #0
 800e358:	2003      	movs	r0, #3
 800e35a:	f7ff fc29 	bl	800dbb0 <isoDepHandleControlMsg>
 800e35e:	4603      	mov	r3, r0
 800e360:	807b      	strh	r3, [r7, #2]
 800e362:	887b      	ldrh	r3, [r7, #2]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d001      	beq.n	800e36c <rfalIsoDepDeselect+0x54>
 800e368:	887b      	ldrh	r3, [r7, #2]
 800e36a:	e01a      	b.n	800e3a2 <rfalIsoDepDeselect+0x8a>
    do{
        ret = isoDepDataExchangePCD( gIsoDep.rxLen, &dummyB );
 800e36c:	4b0f      	ldr	r3, [pc, #60]	; (800e3ac <rfalIsoDepDeselect+0x94>)
 800e36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e370:	1c7a      	adds	r2, r7, #1
 800e372:	4611      	mov	r1, r2
 800e374:	4618      	mov	r0, r3
 800e376:	f7ff fd27 	bl	800ddc8 <isoDepDataExchangePCD>
 800e37a:	4603      	mov	r3, r0
 800e37c:	807b      	strh	r3, [r7, #2]
        rfalWorker();
 800e37e:	f007 fe87 	bl	8016090 <rfalWorker>
    }
    while( ((cntRerun--) != 0U) && (ret == ERR_BUSY) );
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	1e5a      	subs	r2, r3, #1
 800e386:	607a      	str	r2, [r7, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d002      	beq.n	800e392 <rfalIsoDepDeselect+0x7a>
 800e38c:	887b      	ldrh	r3, [r7, #2]
 800e38e:	2b02      	cmp	r3, #2
 800e390:	d0ec      	beq.n	800e36c <rfalIsoDepDeselect+0x54>
        
    rfalIsoDepInitialize();
 800e392:	f7ff fcc7 	bl	800dd24 <rfalIsoDepInitialize>
    return ((cntRerun == 0U) ? ERR_TIMEOUT : ret);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d001      	beq.n	800e3a0 <rfalIsoDepDeselect+0x88>
 800e39c:	887b      	ldrh	r3, [r7, #2]
 800e39e:	e000      	b.n	800e3a2 <rfalIsoDepDeselect+0x8a>
 800e3a0:	2304      	movs	r3, #4
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	20002f44 	.word	0x20002f44
 800e3b0:	20002f8e 	.word	0x20002f8e
 800e3b4:	20002f89 	.word	0x20002f89

0800e3b8 <rfalIsoDepFWI2FWT>:
#endif /* RFAL_FEATURE_ISO_DEP_POLL */


/*******************************************************************************/
uint32_t rfalIsoDepFWI2FWT( uint8_t fwi )
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	4603      	mov	r3, r0
 800e3c0:	71fb      	strb	r3, [r7, #7]
    uint32_t result;
    uint8_t  tmpFWI;
    
    tmpFWI = fwi;
 800e3c2:	79fb      	ldrb	r3, [r7, #7]
 800e3c4:	73fb      	strb	r3, [r7, #15]
    
    /* RFU values -> take the default value  
     * Digital 1.0  11.6.2.17  FWI[1,14]
     * Digital 1.1  7.6.2.22   FWI[0,14]
     * EMVCo 2.6    Table A.5  FWI[0,14] */
    if( tmpFWI > ISODEP_FWI_MAX )
 800e3c6:	7bfb      	ldrb	r3, [r7, #15]
 800e3c8:	2b0e      	cmp	r3, #14
 800e3ca:	d901      	bls.n	800e3d0 <rfalIsoDepFWI2FWT+0x18>
    {
        tmpFWI = RFAL_ISODEP_FWI_DEFAULT;
 800e3cc:	2304      	movs	r3, #4
 800e3ce:	73fb      	strb	r3, [r7, #15]
    }

    /* FWT = (256 x 16/fC) x 2^FWI => 2^(FWI+12)  Digital 1.1  13.8.1 & 7.9.1 */
    
    result = ((uint32_t)1U << (tmpFWI + 12U));
 800e3d0:	7bfb      	ldrb	r3, [r7, #15]
 800e3d2:	330c      	adds	r3, #12
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800e3da:	60bb      	str	r3, [r7, #8]
    result = MIN( RFAL_ISODEP_MAX_FWT, result);  /* Maximum Frame Waiting Time must be fulfilled */
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e3e2:	bf28      	it	cs
 800e3e4:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 800e3e8:	60bb      	str	r3, [r7, #8]
    
    return result;
 800e3ea:	68bb      	ldr	r3, [r7, #8]
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3714      	adds	r7, #20
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bc80      	pop	{r7}
 800e3f4:	4770      	bx	lr
	...

0800e3f8 <rfalIsoDepFSxI2FSx>:


/*******************************************************************************/
uint16_t rfalIsoDepFSxI2FSx( uint8_t FSxI )
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b085      	sub	sp, #20
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	4603      	mov	r3, r0
 800e400:	71fb      	strb	r3, [r7, #7]
    uint16_t fsx;
    uint8_t  fsi;
    
    /* Enforce maximum FSxI/FSx allowed - NFC Forum and EMVCo differ */
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 800e402:	4b33      	ldr	r3, [pc, #204]	; (800e4d0 <rfalIsoDepFSxI2FSx+0xd8>)
 800e404:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d105      	bne.n	800e418 <rfalIsoDepFSxI2FSx+0x20>
 800e40c:	79fb      	ldrb	r3, [r7, #7]
 800e40e:	2b0c      	cmp	r3, #12
 800e410:	bf28      	it	cs
 800e412:	230c      	movcs	r3, #12
 800e414:	b2db      	uxtb	r3, r3
 800e416:	e004      	b.n	800e422 <rfalIsoDepFSxI2FSx+0x2a>
 800e418:	79fb      	ldrb	r3, [r7, #7]
 800e41a:	2b08      	cmp	r3, #8
 800e41c:	bf28      	it	cs
 800e41e:	2308      	movcs	r3, #8
 800e420:	b2db      	uxtb	r3, r3
 800e422:	737b      	strb	r3, [r7, #13]
    
    switch( fsi )
 800e424:	7b7b      	ldrb	r3, [r7, #13]
 800e426:	2b0c      	cmp	r3, #12
 800e428:	d848      	bhi.n	800e4bc <rfalIsoDepFSxI2FSx+0xc4>
 800e42a:	a201      	add	r2, pc, #4	; (adr r2, 800e430 <rfalIsoDepFSxI2FSx+0x38>)
 800e42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e430:	0800e465 	.word	0x0800e465
 800e434:	0800e46b 	.word	0x0800e46b
 800e438:	0800e471 	.word	0x0800e471
 800e43c:	0800e477 	.word	0x0800e477
 800e440:	0800e47d 	.word	0x0800e47d
 800e444:	0800e483 	.word	0x0800e483
 800e448:	0800e489 	.word	0x0800e489
 800e44c:	0800e48f 	.word	0x0800e48f
 800e450:	0800e495 	.word	0x0800e495
 800e454:	0800e49d 	.word	0x0800e49d
 800e458:	0800e4a5 	.word	0x0800e4a5
 800e45c:	0800e4ad 	.word	0x0800e4ad
 800e460:	0800e4b5 	.word	0x0800e4b5
    {
        case (uint8_t)RFAL_ISODEP_FSXI_16:           fsx = (uint16_t)RFAL_ISODEP_FSX_16;   break;
 800e464:	2310      	movs	r3, #16
 800e466:	81fb      	strh	r3, [r7, #14]
 800e468:	e02c      	b.n	800e4c4 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_24:           fsx = (uint16_t)RFAL_ISODEP_FSX_24;   break;
 800e46a:	2318      	movs	r3, #24
 800e46c:	81fb      	strh	r3, [r7, #14]
 800e46e:	e029      	b.n	800e4c4 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_32:           fsx = (uint16_t)RFAL_ISODEP_FSX_32;   break;
 800e470:	2320      	movs	r3, #32
 800e472:	81fb      	strh	r3, [r7, #14]
 800e474:	e026      	b.n	800e4c4 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_40:           fsx = (uint16_t)RFAL_ISODEP_FSX_40;   break;
 800e476:	2328      	movs	r3, #40	; 0x28
 800e478:	81fb      	strh	r3, [r7, #14]
 800e47a:	e023      	b.n	800e4c4 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_48:           fsx = (uint16_t)RFAL_ISODEP_FSX_48;   break;
 800e47c:	2330      	movs	r3, #48	; 0x30
 800e47e:	81fb      	strh	r3, [r7, #14]
 800e480:	e020      	b.n	800e4c4 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_64:           fsx = (uint16_t)RFAL_ISODEP_FSX_64;   break;
 800e482:	2340      	movs	r3, #64	; 0x40
 800e484:	81fb      	strh	r3, [r7, #14]
 800e486:	e01d      	b.n	800e4c4 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_96:           fsx = (uint16_t)RFAL_ISODEP_FSX_96;   break;
 800e488:	2360      	movs	r3, #96	; 0x60
 800e48a:	81fb      	strh	r3, [r7, #14]
 800e48c:	e01a      	b.n	800e4c4 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_128:          fsx = (uint16_t)RFAL_ISODEP_FSX_128;  break;
 800e48e:	2380      	movs	r3, #128	; 0x80
 800e490:	81fb      	strh	r3, [r7, #14]
 800e492:	e017      	b.n	800e4c4 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_256:          fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 800e494:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e498:	81fb      	strh	r3, [r7, #14]
 800e49a:	e013      	b.n	800e4c4 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_512:          fsx = (uint16_t)RFAL_ISODEP_FSX_512;  break;
 800e49c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4a0:	81fb      	strh	r3, [r7, #14]
 800e4a2:	e00f      	b.n	800e4c4 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_1024:         fsx = (uint16_t)RFAL_ISODEP_FSX_1024; break;
 800e4a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4a8:	81fb      	strh	r3, [r7, #14]
 800e4aa:	e00b      	b.n	800e4c4 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_2048:         fsx = (uint16_t)RFAL_ISODEP_FSX_2048; break;
 800e4ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4b0:	81fb      	strh	r3, [r7, #14]
 800e4b2:	e007      	b.n	800e4c4 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_4096:         fsx = (uint16_t)RFAL_ISODEP_FSX_4096; break;
 800e4b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4b8:	81fb      	strh	r3, [r7, #14]
 800e4ba:	e003      	b.n	800e4c4 <rfalIsoDepFSxI2FSx+0xcc>
        default:                                     fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 800e4bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e4c0:	81fb      	strh	r3, [r7, #14]
 800e4c2:	bf00      	nop
    }
    return fsx;
 800e4c4:	89fb      	ldrh	r3, [r7, #14]
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3714      	adds	r7, #20
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bc80      	pop	{r7}
 800e4ce:	4770      	bx	lr
 800e4d0:	20002f44 	.word	0x20002f44

0800e4d4 <rfalIsoDepGetMaxInfLen>:
#endif  /* RFAL_FEATURE_ISO_DEP_LISTEN */


/*******************************************************************************/
uint16_t rfalIsoDepGetMaxInfLen( void )
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
    /* Check whether all parameters are valid, otherwise return minimum default value */
    if( (gIsoDep.fsx < (uint16_t)RFAL_ISODEP_FSX_16) || (gIsoDep.fsx > (uint16_t)RFAL_ISODEP_FSX_4096) || (gIsoDep.hdrLen > ISODEP_HDR_MAX_LEN) )
 800e4da:	4b11      	ldr	r3, [pc, #68]	; (800e520 <rfalIsoDepGetMaxInfLen+0x4c>)
 800e4dc:	8a1b      	ldrh	r3, [r3, #16]
 800e4de:	2b0f      	cmp	r3, #15
 800e4e0:	d909      	bls.n	800e4f6 <rfalIsoDepGetMaxInfLen+0x22>
 800e4e2:	4b0f      	ldr	r3, [pc, #60]	; (800e520 <rfalIsoDepGetMaxInfLen+0x4c>)
 800e4e4:	8a1b      	ldrh	r3, [r3, #16]
 800e4e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4ea:	d804      	bhi.n	800e4f6 <rfalIsoDepGetMaxInfLen+0x22>
 800e4ec:	4b0c      	ldr	r3, [pc, #48]	; (800e520 <rfalIsoDepGetMaxInfLen+0x4c>)
 800e4ee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e4f2:	2b03      	cmp	r3, #3
 800e4f4:	d905      	bls.n	800e502 <rfalIsoDepGetMaxInfLen+0x2e>
    {
        uint16_t isodepFsx16 = (uint16_t)RFAL_ISODEP_FSX_16;  /* MISRA 10.1 */
 800e4f6:	2310      	movs	r3, #16
 800e4f8:	80fb      	strh	r3, [r7, #6]
        return (isodepFsx16 - RFAL_ISODEP_PCB_LEN - ISODEP_CRC_LEN);
 800e4fa:	88fb      	ldrh	r3, [r7, #6]
 800e4fc:	3b03      	subs	r3, #3
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	e009      	b.n	800e516 <rfalIsoDepGetMaxInfLen+0x42>
    }
    
    return (gIsoDep.fsx - gIsoDep.hdrLen - ISODEP_CRC_LEN);
 800e502:	4b07      	ldr	r3, [pc, #28]	; (800e520 <rfalIsoDepGetMaxInfLen+0x4c>)
 800e504:	8a1a      	ldrh	r2, [r3, #16]
 800e506:	4b06      	ldr	r3, [pc, #24]	; (800e520 <rfalIsoDepGetMaxInfLen+0x4c>)
 800e508:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	1ad3      	subs	r3, r2, r3
 800e510:	b29b      	uxth	r3, r3
 800e512:	3b02      	subs	r3, #2
 800e514:	b29b      	uxth	r3, r3
}
 800e516:	4618      	mov	r0, r3
 800e518:	370c      	adds	r7, #12
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bc80      	pop	{r7}
 800e51e:	4770      	bx	lr
 800e520:	20002f44 	.word	0x20002f44

0800e524 <rfalIsoDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalIsoDepStartTransceive( rfalIsoDepTxRxParam param )
{
 800e524:	b084      	sub	sp, #16
 800e526:	b580      	push	{r7, lr}
 800e528:	af00      	add	r7, sp, #0
 800e52a:	f107 0c08 	add.w	ip, r7, #8
 800e52e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    gIsoDep.txBuf        = param.txBuf->prologue;
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	461a      	mov	r2, r3
 800e536:	4b30      	ldr	r3, [pc, #192]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e538:	615a      	str	r2, [r3, #20]
    gIsoDep.txBufInfPos  = (uint8_t)((uint32_t)param.txBuf->inf - (uint32_t)param.txBuf->prologue);
 800e53a:	4b2f      	ldr	r3, [pc, #188]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e53c:	2203      	movs	r2, #3
 800e53e:	f883 2020 	strb.w	r2, [r3, #32]
    gIsoDep.txBufLen     = param.txBufLen;
 800e542:	89ba      	ldrh	r2, [r7, #12]
 800e544:	4b2c      	ldr	r3, [pc, #176]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e546:	839a      	strh	r2, [r3, #28]
    gIsoDep.isTxChaining = param.isTxChaining;
 800e548:	7bba      	ldrb	r2, [r7, #14]
 800e54a:	4b2b      	ldr	r3, [pc, #172]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e54c:	749a      	strb	r2, [r3, #18]
    
    gIsoDep.rxBuf        = param.rxBuf->prologue;
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	461a      	mov	r2, r3
 800e552:	4b29      	ldr	r3, [pc, #164]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e554:	619a      	str	r2, [r3, #24]
    gIsoDep.rxBufInfPos  = (uint8_t)((uint32_t)param.rxBuf->inf - (uint32_t)param.rxBuf->prologue);
 800e556:	4b28      	ldr	r3, [pc, #160]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e558:	2203      	movs	r2, #3
 800e55a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    gIsoDep.rxBufLen     = sizeof(rfalIsoDepBufFormat);
 800e55e:	4b26      	ldr	r3, [pc, #152]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e560:	f240 1203 	movw	r2, #259	; 0x103
 800e564:	83da      	strh	r2, [r3, #30]
    
    gIsoDep.rxLen        = param.rxLen;
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	4a23      	ldr	r2, [pc, #140]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e56a:	62d3      	str	r3, [r2, #44]	; 0x2c
    gIsoDep.rxChaining   = param.isRxChaining;
 800e56c:	69bb      	ldr	r3, [r7, #24]
 800e56e:	4a22      	ldr	r2, [pc, #136]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e570:	6313      	str	r3, [r2, #48]	; 0x30
    
    
    gIsoDep.fwt          = param.FWT;
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	4a20      	ldr	r2, [pc, #128]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e576:	6093      	str	r3, [r2, #8]
    gIsoDep.dFwt         = param.dFWT;
 800e578:	6a3b      	ldr	r3, [r7, #32]
 800e57a:	4a1f      	ldr	r2, [pc, #124]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e57c:	60d3      	str	r3, [r2, #12]
    gIsoDep.fsx          = param.FSx;
 800e57e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e580:	4b1d      	ldr	r3, [pc, #116]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e582:	821a      	strh	r2, [r3, #16]
    gIsoDep.did          = param.DID;
 800e584:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e588:	4b1b      	ldr	r3, [pc, #108]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e58a:	70da      	strb	r2, [r3, #3]
    
    /* Only change the FSx from activation if no to Keep */
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 800e58c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e58e:	2bff      	cmp	r3, #255	; 0xff
 800e590:	d001      	beq.n	800e596 <rfalIsoDepStartTransceive+0x72>
 800e592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e594:	e001      	b.n	800e59a <rfalIsoDepStartTransceive+0x76>
 800e596:	4b18      	ldr	r3, [pc, #96]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e598:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e59a:	4a17      	ldr	r2, [pc, #92]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e59c:	8453      	strh	r3, [r2, #34]	; 0x22
    
    /* Clear inner control params for next dataExchange */
    gIsoDep.isRxChaining  = false;
 800e59e:	4b16      	ldr	r3, [pc, #88]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	74da      	strb	r2, [r3, #19]
    isoDepClearCounters();
 800e5a4:	f7ff fa5a 	bl	800da5c <isoDepClearCounters>
    
    if(gIsoDep.role == ISODEP_ROLE_PICC)
 800e5a8:	4b13      	ldr	r3, [pc, #76]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e5aa:	785b      	ldrb	r3, [r3, #1]
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d119      	bne.n	800e5e4 <rfalIsoDepStartTransceive+0xc0>
    {
       if(gIsoDep.txBufLen > 0U)
 800e5b0:	4b11      	ldr	r3, [pc, #68]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e5b2:	8b9b      	ldrh	r3, [r3, #28]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d010      	beq.n	800e5da <rfalIsoDepStartTransceive+0xb6>
       {
           /* Ensure that an RTOX Ack is not being expected at moment */
           if( !gIsoDep.isWait4WTX )
 800e5b8:	4b0f      	ldr	r3, [pc, #60]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e5ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e5be:	f083 0301 	eor.w	r3, r3, #1
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d004      	beq.n	800e5d2 <rfalIsoDepStartTransceive+0xae>
           {
               gIsoDep.state = ISODEP_ST_PICC_TX;
 800e5c8:	4b0b      	ldr	r3, [pc, #44]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e5ca:	2208      	movs	r2, #8
 800e5cc:	701a      	strb	r2, [r3, #0]
               return ERR_NONE;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	e00c      	b.n	800e5ec <rfalIsoDepStartTransceive+0xc8>
           }
           else
           {
               /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
               gIsoDep.isTxPending = true;
 800e5d2:	4b09      	ldr	r3, [pc, #36]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
           }
       }
       
       /* Digital 1.1  15.2.5.1 The first block SHALL be sent by the Reader/Writer */
       gIsoDep.state = ISODEP_ST_PICC_RX;
 800e5da:	4b07      	ldr	r3, [pc, #28]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e5dc:	2206      	movs	r2, #6
 800e5de:	701a      	strb	r2, [r3, #0]
       return ERR_NONE;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	e003      	b.n	800e5ec <rfalIsoDepStartTransceive+0xc8>
    }
    
    gIsoDep.state = ISODEP_ST_PCD_TX;
 800e5e4:	4b04      	ldr	r3, [pc, #16]	; (800e5f8 <rfalIsoDepStartTransceive+0xd4>)
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 800e5ea:	2300      	movs	r3, #0
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e5f4:	b004      	add	sp, #16
 800e5f6:	4770      	bx	lr
 800e5f8:	20002f44 	.word	0x20002f44

0800e5fc <rfalIsoDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalIsoDepGetTransceiveStatus( void )
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	af00      	add	r7, sp, #0
    if( gIsoDep.role == ISODEP_ROLE_PICC)
 800e600:	4b08      	ldr	r3, [pc, #32]	; (800e624 <rfalIsoDepGetTransceiveStatus+0x28>)
 800e602:	785b      	ldrb	r3, [r3, #1]
 800e604:	2b01      	cmp	r3, #1
 800e606:	d101      	bne.n	800e60c <rfalIsoDepGetTransceiveStatus+0x10>
    {
#if RFAL_FEATURE_ISO_DEP_LISTEN
        return isoDepDataExchangePICC();
#else
        return ERR_NOTSUPP;
 800e608:	2318      	movs	r3, #24
 800e60a:	e008      	b.n	800e61e <rfalIsoDepGetTransceiveStatus+0x22>
#endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
    }
    else
    {
#if RFAL_FEATURE_ISO_DEP_POLL
        return isoDepDataExchangePCD( gIsoDep.rxLen, gIsoDep.rxChaining );
 800e60c:	4b05      	ldr	r3, [pc, #20]	; (800e624 <rfalIsoDepGetTransceiveStatus+0x28>)
 800e60e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e610:	4b04      	ldr	r3, [pc, #16]	; (800e624 <rfalIsoDepGetTransceiveStatus+0x28>)
 800e612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e614:	4619      	mov	r1, r3
 800e616:	4610      	mov	r0, r2
 800e618:	f7ff fbd6 	bl	800ddc8 <isoDepDataExchangePCD>
 800e61c:	4603      	mov	r3, r0
#else
        return ERR_NOTSUPP;
#endif /* RFAL_FEATURE_ISO_DEP_POLL */
    }
}
 800e61e:	4618      	mov	r0, r3
 800e620:	bd80      	pop	{r7, pc}
 800e622:	bf00      	nop
 800e624:	20002f44 	.word	0x20002f44

0800e628 <rfalIsoDepRATS>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepRATS( rfalIsoDepFSxI FSDI, uint8_t DID, rfalIsoDepAts *ats , uint8_t *atsLen)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b08a      	sub	sp, #40	; 0x28
 800e62c:	af04      	add	r7, sp, #16
 800e62e:	60ba      	str	r2, [r7, #8]
 800e630:	607b      	str	r3, [r7, #4]
 800e632:	4603      	mov	r3, r0
 800e634:	73fb      	strb	r3, [r7, #15]
 800e636:	460b      	mov	r3, r1
 800e638:	73bb      	strb	r3, [r7, #14]
    uint16_t       rcvLen;
    ReturnCode     ret;
    rfalIsoDepRats ratsReq;
    
    if( ats == NULL )
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d101      	bne.n	800e644 <rfalIsoDepRATS+0x1c>
    {
        return ERR_PARAM;
 800e640:	2307      	movs	r3, #7
 800e642:	e03c      	b.n	800e6be <rfalIsoDepRATS+0x96>
    }
    
    /*******************************************************************************/
    /* Compose RATS */
    ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 800e644:	23e0      	movs	r3, #224	; 0xe0
 800e646:	743b      	strb	r3, [r7, #16]
    ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 800e648:	7bfb      	ldrb	r3, [r7, #15]
 800e64a:	011b      	lsls	r3, r3, #4
 800e64c:	b2da      	uxtb	r2, r3
 800e64e:	7bbb      	ldrb	r3, [r7, #14]
 800e650:	f003 030f 	and.w	r3, r3, #15
 800e654:	b2db      	uxtb	r3, r3
 800e656:	4313      	orrs	r3, r2
 800e658:	b2db      	uxtb	r3, r3
 800e65a:	747b      	strb	r3, [r7, #17]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800e65c:	f107 0010 	add.w	r0, r7, #16
 800e660:	4b19      	ldr	r3, [pc, #100]	; (800e6c8 <rfalIsoDepRATS+0xa0>)
 800e662:	9302      	str	r3, [sp, #8]
 800e664:	2300      	movs	r3, #0
 800e666:	9301      	str	r3, [sp, #4]
 800e668:	f107 0314 	add.w	r3, r7, #20
 800e66c:	9300      	str	r3, [sp, #0]
 800e66e:	2314      	movs	r3, #20
 800e670:	68ba      	ldr	r2, [r7, #8]
 800e672:	2102      	movs	r1, #2
 800e674:	f007 fca8 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 800e678:	4603      	mov	r3, r0
 800e67a:	82fb      	strh	r3, [r7, #22]
    
    if( ret == ERR_NONE )
 800e67c:	8afb      	ldrh	r3, [r7, #22]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d115      	bne.n	800e6ae <rfalIsoDepRATS+0x86>
    {
        /* Check for valid ATS length  Digital 1.1  13.6.2.1 & 13.6.2.3 */
        if( (rcvLen < RFAL_ISODEP_ATS_MIN_LEN) || (rcvLen > RFAL_ISODEP_ATS_MAX_LEN) || (ats->TL != rcvLen) )
 800e682:	8abb      	ldrh	r3, [r7, #20]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d008      	beq.n	800e69a <rfalIsoDepRATS+0x72>
 800e688:	8abb      	ldrh	r3, [r7, #20]
 800e68a:	2b14      	cmp	r3, #20
 800e68c:	d805      	bhi.n	800e69a <rfalIsoDepRATS+0x72>
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	b29a      	uxth	r2, r3
 800e694:	8abb      	ldrh	r3, [r7, #20]
 800e696:	429a      	cmp	r2, r3
 800e698:	d001      	beq.n	800e69e <rfalIsoDepRATS+0x76>
        {
            return ERR_PROTO;
 800e69a:	230b      	movs	r3, #11
 800e69c:	e00f      	b.n	800e6be <rfalIsoDepRATS+0x96>
        }
        
        /* Assign our FSx, in case the a Deselect is send without Transceive */
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 800e69e:	7bfb      	ldrb	r3, [r7, #15]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7ff fea9 	bl	800e3f8 <rfalIsoDepFSxI2FSx>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	4b08      	ldr	r3, [pc, #32]	; (800e6cc <rfalIsoDepRATS+0xa4>)
 800e6ac:	845a      	strh	r2, [r3, #34]	; 0x22
    }
    
    /* Check and assign if ATS length was requested (length also available on TL) */
    if( atsLen != NULL )
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d003      	beq.n	800e6bc <rfalIsoDepRATS+0x94>
    {
        *atsLen = (uint8_t)rcvLen;
 800e6b4:	8abb      	ldrh	r3, [r7, #20]
 800e6b6:	b2da      	uxtb	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 800e6bc:	8afb      	ldrh	r3, [r7, #22]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3718      	adds	r7, #24
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	00046780 	.word	0x00046780
 800e6cc:	20002f44 	.word	0x20002f44

0800e6d0 <rfalIsoDepPPS>:


/*******************************************************************************/
ReturnCode rfalIsoDepPPS( uint8_t DID, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepPpsRes *ppsRes )
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b088      	sub	sp, #32
 800e6d4:	af04      	add	r7, sp, #16
 800e6d6:	603b      	str	r3, [r7, #0]
 800e6d8:	4603      	mov	r3, r0
 800e6da:	71fb      	strb	r3, [r7, #7]
 800e6dc:	460b      	mov	r3, r1
 800e6de:	71bb      	strb	r3, [r7, #6]
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	717b      	strb	r3, [r7, #5]
    uint16_t         rcvLen;
    ReturnCode       ret;
    rfalIsoDepPpsReq ppsReq;
    
    if( (ppsRes == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d008      	beq.n	800e6fc <rfalIsoDepPPS+0x2c>
 800e6ea:	79bb      	ldrb	r3, [r7, #6]
 800e6ec:	2b03      	cmp	r3, #3
 800e6ee:	d805      	bhi.n	800e6fc <rfalIsoDepPPS+0x2c>
 800e6f0:	797b      	ldrb	r3, [r7, #5]
 800e6f2:	2b03      	cmp	r3, #3
 800e6f4:	d802      	bhi.n	800e6fc <rfalIsoDepPPS+0x2c>
 800e6f6:	79fb      	ldrb	r3, [r7, #7]
 800e6f8:	2b0e      	cmp	r3, #14
 800e6fa:	d901      	bls.n	800e700 <rfalIsoDepPPS+0x30>
    {
        return ERR_PARAM;
 800e6fc:	2307      	movs	r3, #7
 800e6fe:	e033      	b.n	800e768 <rfalIsoDepPPS+0x98>
    }
    
    /*******************************************************************************/
    /* Compose PPS Request */
    ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 800e700:	79fb      	ldrb	r3, [r7, #7]
 800e702:	f003 030f 	and.w	r3, r3, #15
 800e706:	b2db      	uxtb	r3, r3
 800e708:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	723b      	strb	r3, [r7, #8]
    ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 800e710:	2311      	movs	r3, #17
 800e712:	727b      	strb	r3, [r7, #9]
    ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 800e714:	79bb      	ldrb	r3, [r7, #6]
 800e716:	009b      	lsls	r3, r3, #2
 800e718:	b25a      	sxtb	r2, r3
 800e71a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800e71e:	4313      	orrs	r3, r2
 800e720:	b25b      	sxtb	r3, r3
 800e722:	b2db      	uxtb	r3, r3
 800e724:	f003 030f 	and.w	r3, r3, #15
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	72bb      	strb	r3, [r7, #10]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800e72c:	f107 0008 	add.w	r0, r7, #8
 800e730:	4b0f      	ldr	r3, [pc, #60]	; (800e770 <rfalIsoDepPPS+0xa0>)
 800e732:	9302      	str	r3, [sp, #8]
 800e734:	2300      	movs	r3, #0
 800e736:	9301      	str	r3, [sp, #4]
 800e738:	f107 030c 	add.w	r3, r7, #12
 800e73c:	9300      	str	r3, [sp, #0]
 800e73e:	2301      	movs	r3, #1
 800e740:	683a      	ldr	r2, [r7, #0]
 800e742:	2103      	movs	r1, #3
 800e744:	f007 fc40 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 800e748:	4603      	mov	r3, r0
 800e74a:	81fb      	strh	r3, [r7, #14]
    
    if( ret == ERR_NONE )
 800e74c:	89fb      	ldrh	r3, [r7, #14]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d109      	bne.n	800e766 <rfalIsoDepPPS+0x96>
    {
        /* Check for valid PPS Response   */
        if( (rcvLen != RFAL_ISODEP_PPS_RES_LEN) || (ppsRes->PPSS != ppsReq.PPSS) )
 800e752:	89bb      	ldrh	r3, [r7, #12]
 800e754:	2b01      	cmp	r3, #1
 800e756:	d104      	bne.n	800e762 <rfalIsoDepPPS+0x92>
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	781a      	ldrb	r2, [r3, #0]
 800e75c:	7a3b      	ldrb	r3, [r7, #8]
 800e75e:	429a      	cmp	r2, r3
 800e760:	d001      	beq.n	800e766 <rfalIsoDepPPS+0x96>
        {
            return ERR_PROTO;
 800e762:	230b      	movs	r3, #11
 800e764:	e000      	b.n	800e768 <rfalIsoDepPPS+0x98>
        }
    }
    return ret;
 800e766:	89fb      	ldrh	r3, [r7, #14]
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3710      	adds	r7, #16
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	00046780 	.word	0x00046780

0800e774 <rfalIsoDepATTRIB>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepATTRIB( const uint8_t* nfcid0, uint8_t PARAM1, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepFSxI FSDI, uint8_t PARAM3, uint8_t DID, const uint8_t* HLInfo, uint8_t HLInfoLen, uint32_t fwt, rfalIsoDepAttribRes *attribRes, uint8_t *attribResLen )
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b092      	sub	sp, #72	; 0x48
 800e778:	af04      	add	r7, sp, #16
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	4608      	mov	r0, r1
 800e77e:	4611      	mov	r1, r2
 800e780:	461a      	mov	r2, r3
 800e782:	4603      	mov	r3, r0
 800e784:	70fb      	strb	r3, [r7, #3]
 800e786:	460b      	mov	r3, r1
 800e788:	70bb      	strb	r3, [r7, #2]
 800e78a:	4613      	mov	r3, r2
 800e78c:	707b      	strb	r3, [r7, #1]
    uint16_t            rcvLen;
    ReturnCode          ret;
    rfalIsoDepAttribCmd attribCmd;
    
    
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 800e78e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e790:	2b00      	cmp	r3, #0
 800e792:	d00c      	beq.n	800e7ae <rfalIsoDepATTRIB+0x3a>
 800e794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e796:	2b00      	cmp	r3, #0
 800e798:	d009      	beq.n	800e7ae <rfalIsoDepATTRIB+0x3a>
 800e79a:	78bb      	ldrb	r3, [r7, #2]
 800e79c:	2b03      	cmp	r3, #3
 800e79e:	d806      	bhi.n	800e7ae <rfalIsoDepATTRIB+0x3a>
 800e7a0:	787b      	ldrb	r3, [r7, #1]
 800e7a2:	2b03      	cmp	r3, #3
 800e7a4:	d803      	bhi.n	800e7ae <rfalIsoDepATTRIB+0x3a>
 800e7a6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e7aa:	2b0e      	cmp	r3, #14
 800e7ac:	d901      	bls.n	800e7b2 <rfalIsoDepATTRIB+0x3e>
    {
        return ERR_NONE;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	e066      	b.n	800e880 <rfalIsoDepATTRIB+0x10c>
    }
    
    /*******************************************************************************/
    /* Compose ATTRIB command */
    attribCmd.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 800e7b2:	231d      	movs	r3, #29
 800e7b4:	723b      	strb	r3, [r7, #8]
    attribCmd.Param.PARAM1 = PARAM1;
 800e7b6:	78fb      	ldrb	r3, [r7, #3]
 800e7b8:	737b      	strb	r3, [r7, #13]
    attribCmd.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 800e7ba:	78bb      	ldrb	r3, [r7, #2]
 800e7bc:	019b      	lsls	r3, r3, #6
 800e7be:	b25a      	sxtb	r2, r3
 800e7c0:	787b      	ldrb	r3, [r7, #1]
 800e7c2:	011b      	lsls	r3, r3, #4
 800e7c4:	b25b      	sxtb	r3, r3
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	b25b      	sxtb	r3, r3
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	f023 030f 	bic.w	r3, r3, #15
 800e7d0:	b2da      	uxtb	r2, r3
 800e7d2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e7d6:	f003 030f 	and.w	r3, r3, #15
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	73bb      	strb	r3, [r7, #14]
    attribCmd.Param.PARAM3 = PARAM3;
 800e7e2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800e7e6:	73fb      	strb	r3, [r7, #15]
    attribCmd.Param.PARAM4 = (DID & RFAL_ISODEP_ATTRIB_PARAM4_DID_MASK);
 800e7e8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e7ec:	f003 030f 	and.w	r3, r3, #15
 800e7f0:	b2db      	uxtb	r3, r3
 800e7f2:	743b      	strb	r3, [r7, #16]
    ST_MEMCPY(attribCmd.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f8c7 3009 	str.w	r3, [r7, #9]
    
    /* Append the Higher layer Info if provided */
    if( (HLInfo != NULL) && (HLInfoLen > 0U) )
 800e7fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d011      	beq.n	800e826 <rfalIsoDepATTRIB+0xb2>
 800e802:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800e806:	2b00      	cmp	r3, #0
 800e808:	d00d      	beq.n	800e826 <rfalIsoDepATTRIB+0xb2>
    {
        ST_MEMCPY(attribCmd.HLInfo, HLInfo, MIN(HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN) );
 800e80a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800e80e:	2b20      	cmp	r3, #32
 800e810:	bf28      	it	cs
 800e812:	2320      	movcs	r3, #32
 800e814:	b2db      	uxtb	r3, r3
 800e816:	461a      	mov	r2, r3
 800e818:	f107 0308 	add.w	r3, r7, #8
 800e81c:	3309      	adds	r3, #9
 800e81e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e820:	4618      	mov	r0, r3
 800e822:	f00a fae8 	bl	8018df6 <memcpy>
    }
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&attribCmd, (RFAL_ISODEP_ATTRIB_HDR_LEN + MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)attribRes, sizeof(rfalIsoDepAttribRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 800e826:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800e82a:	2b20      	cmp	r3, #32
 800e82c:	bf28      	it	cs
 800e82e:	2320      	movcs	r3, #32
 800e830:	b2db      	uxtb	r3, r3
 800e832:	b29b      	uxth	r3, r3
 800e834:	3309      	adds	r3, #9
 800e836:	b299      	uxth	r1, r3
 800e838:	f107 0008 	add.w	r0, r7, #8
 800e83c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e83e:	9302      	str	r3, [sp, #8]
 800e840:	2300      	movs	r3, #0
 800e842:	9301      	str	r3, [sp, #4]
 800e844:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	2321      	movs	r3, #33	; 0x21
 800e84c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e84e:	f007 fbbb 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 800e852:	4603      	mov	r3, r0
 800e854:	86fb      	strh	r3, [r7, #54]	; 0x36
       
    *attribResLen = (uint8_t)rcvLen;
 800e856:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e858:	b2da      	uxtb	r2, r3
 800e85a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e85c:	701a      	strb	r2, [r3, #0]
    
    if( ret == ERR_NONE )
 800e85e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e860:	2b00      	cmp	r3, #0
 800e862:	d10c      	bne.n	800e87e <rfalIsoDepATTRIB+0x10a>
    {
        /* Check a for valid ATTRIB Response   Digital 1.1  15.6.2.1 */
        if( (rcvLen < RFAL_ISODEP_ATTRIB_RES_HDR_LEN) || ((attribRes->mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID) )
 800e864:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e866:	2b00      	cmp	r3, #0
 800e868:	d007      	beq.n	800e87a <rfalIsoDepATTRIB+0x106>
 800e86a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	f003 020f 	and.w	r2, r3, #15
 800e872:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e876:	429a      	cmp	r2, r3
 800e878:	d001      	beq.n	800e87e <rfalIsoDepATTRIB+0x10a>
        {
           return ERR_PROTO;
 800e87a:	230b      	movs	r3, #11
 800e87c:	e000      	b.n	800e880 <rfalIsoDepATTRIB+0x10c>
        }
    }
   
   return ret;
 800e87e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800e880:	4618      	mov	r0, r3
 800e882:	3738      	adds	r7, #56	; 0x38
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <rfalIsoDepPollAHandleActivation>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepPollAHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, rfalIsoDepDevice *isoDepDev )
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	603b      	str	r3, [r7, #0]
 800e890:	4603      	mov	r3, r0
 800e892:	71fb      	strb	r3, [r7, #7]
 800e894:	460b      	mov	r3, r1
 800e896:	71bb      	strb	r3, [r7, #6]
 800e898:	4613      	mov	r3, r2
 800e89a:	717b      	strb	r3, [r7, #5]
    uint8_t          RATSretries;
    uint8_t          msgIt;
    ReturnCode       ret;
    rfalIsoDepPpsRes ppsRes;
    
    if( isoDepDev == NULL )
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d101      	bne.n	800e8a6 <rfalIsoDepPollAHandleActivation+0x1e>
    {
        return ERR_PARAM;
 800e8a2:	2307      	movs	r3, #7
 800e8a4:	e143      	b.n	800eb2e <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /* Enable EMD handling according   Digital 1.1  4.1.1.1 ; EMVCo 2.6  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 800e8a6:	2002      	movs	r0, #2
 800e8a8:	f007 f8fa 	bl	8015aa0 <rfalSetErrorHandling>
    
    RATSretries = gIsoDep.maxRetriesRATS;
 800e8ac:	4ba2      	ldr	r3, [pc, #648]	; (800eb38 <rfalIsoDepPollAHandleActivation+0x2b0>)
 800e8ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8b2:	73fb      	strb	r3, [r7, #15]
    /***************************************************************************/
    /* Send RATS                                                               */
    do
    {
        /* Digital 1.1 13.7.1.1 and ISO 14443-4 5.6.1.1 - Upon a failed RATS it may be retransmited [0,1] */
        ret = rfalIsoDepRATS( FSDI, DID, &isoDepDev->activation.A.Listener.ATS, &isoDepDev->activation.A.Listener.ATSLen );
 800e8b4:	683a      	ldr	r2, [r7, #0]
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	3314      	adds	r3, #20
 800e8ba:	79b9      	ldrb	r1, [r7, #6]
 800e8bc:	79f8      	ldrb	r0, [r7, #7]
 800e8be:	f7ff feb3 	bl	800e628 <rfalIsoDepRATS>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	81bb      	strh	r3, [r7, #12]
        
        /* EMVCo 2.6  9.6.1.1 & 9.6.1.2  If a timeout error is detected retransmit, on transmission error abort */
        if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != ERR_NONE) && (ret != ERR_TIMEOUT) )
 800e8c6:	4b9c      	ldr	r3, [pc, #624]	; (800eb38 <rfalIsoDepPollAHandleActivation+0x2b0>)
 800e8c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d105      	bne.n	800e8dc <rfalIsoDepPollAHandleActivation+0x54>
 800e8d0:	89bb      	ldrh	r3, [r7, #12]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d002      	beq.n	800e8dc <rfalIsoDepPollAHandleActivation+0x54>
 800e8d6:	89bb      	ldrh	r3, [r7, #12]
 800e8d8:	2b04      	cmp	r3, #4
 800e8da:	d10b      	bne.n	800e8f4 <rfalIsoDepPollAHandleActivation+0x6c>
        {
            break;
        }
        
        platformDelay(1);
 800e8dc:	2001      	movs	r0, #1
 800e8de:	f7f5 fd43 	bl	8004368 <HAL_Delay>
    }
    while( ((RATSretries--) != 0U) && (ret != ERR_NONE) );
 800e8e2:	7bfb      	ldrb	r3, [r7, #15]
 800e8e4:	1e5a      	subs	r2, r3, #1
 800e8e6:	73fa      	strb	r2, [r7, #15]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d004      	beq.n	800e8f6 <rfalIsoDepPollAHandleActivation+0x6e>
 800e8ec:	89bb      	ldrh	r3, [r7, #12]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d1e0      	bne.n	800e8b4 <rfalIsoDepPollAHandleActivation+0x2c>
 800e8f2:	e000      	b.n	800e8f6 <rfalIsoDepPollAHandleActivation+0x6e>
            break;
 800e8f4:	bf00      	nop
    
    
    /* Switch between NFC Forum and ISO14443-4 behaviour #595
     *   ISO14443-4  5.6.1  If RATS fails, a Deactivation sequence should be performed as defined on clause 8  
     *   Activity 1.1  9.6  Device Deactivation Activity is to be only performed when there's an active device */
    if( ret != ERR_NONE )
 800e8f6:	89bb      	ldrh	r3, [r7, #12]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d008      	beq.n	800e90e <rfalIsoDepPollAHandleActivation+0x86>
    {
        if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_ISO )
 800e8fc:	4b8e      	ldr	r3, [pc, #568]	; (800eb38 <rfalIsoDepPollAHandleActivation+0x2b0>)
 800e8fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e902:	2b02      	cmp	r3, #2
 800e904:	d101      	bne.n	800e90a <rfalIsoDepPollAHandleActivation+0x82>
        {
            rfalIsoDepDeselect();
 800e906:	f7ff fd07 	bl	800e318 <rfalIsoDepDeselect>
        }
        return ret;
 800e90a:	89bb      	ldrh	r3, [r7, #12]
 800e90c:	e10f      	b.n	800eb2e <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /*******************************************************************************/
    /* Process ATS Response                                                        */
    isoDepDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	2204      	movs	r2, #4
 800e912:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.SFGI = 0;
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	2200      	movs	r2, #0
 800e91a:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.MBL  = 0;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	2200      	movs	r2, #0
 800e920:	645a      	str	r2, [r3, #68]	; 0x44
    isoDepDev->info.DSI  = RFAL_BR_106;
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	2200      	movs	r2, #0
 800e926:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    isoDepDev->info.DRI  = RFAL_BR_106;
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    isoDepDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	2202      	movs	r2, #2
 800e936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    
    /*******************************************************************************/
    /* Check for ATS optional fields                                               */
    if( isoDepDev->activation.A.Listener.ATS.TL > RFAL_ISODEP_ATS_MIN_LEN )
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	2b01      	cmp	r3, #1
 800e940:	d973      	bls.n	800ea2a <rfalIsoDepPollAHandleActivation+0x1a2>
    {
        msgIt = RFAL_ISODEP_ATS_MIN_LEN;
 800e942:	2301      	movs	r3, #1
 800e944:	73bb      	strb	r3, [r7, #14]
        
        /* Format byte T0 is optional, if present assign FSDI */
        isoDepDev->info.FSxI = (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_FSCI_MASK);
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	785b      	ldrb	r3, [r3, #1]
 800e94a:	f003 030f 	and.w	r3, r3, #15
 800e94e:	b2da      	uxtb	r2, r3
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        /* T0 has already been processed, always the same position */
        msgIt++; 
 800e956:	7bbb      	ldrb	r3, [r7, #14]
 800e958:	3301      	adds	r3, #1
 800e95a:	73bb      	strb	r3, [r7, #14]
        
        /* Check if TA is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK) != 0U )
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	785b      	ldrb	r3, [r3, #1]
 800e960:	f003 0310 	and.w	r3, r3, #16
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00d      	beq.n	800e984 <rfalIsoDepPollAHandleActivation+0xfc>
        {
            rfalIsoDepCalcBitRate( maxBR, ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++], &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 800e968:	683a      	ldr	r2, [r7, #0]
 800e96a:	7bbb      	ldrb	r3, [r7, #14]
 800e96c:	1c59      	adds	r1, r3, #1
 800e96e:	73b9      	strb	r1, [r7, #14]
 800e970:	4413      	add	r3, r2
 800e972:	7819      	ldrb	r1, [r3, #0]
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	3349      	adds	r3, #73	; 0x49
 800e97e:	7978      	ldrb	r0, [r7, #5]
 800e980:	f000 f9f8 	bl	800ed74 <rfalIsoDepCalcBitRate>
        }
        
        /* Check if TB is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK) != 0U )
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	785b      	ldrb	r3, [r3, #1]
 800e988:	f003 0320 	and.w	r3, r3, #32
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d018      	beq.n	800e9c2 <rfalIsoDepPollAHandleActivation+0x13a>
        {
            isoDepDev->info.SFGI  = ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++];
 800e990:	683a      	ldr	r2, [r7, #0]
 800e992:	7bbb      	ldrb	r3, [r7, #14]
 800e994:	1c59      	adds	r1, r3, #1
 800e996:	73b9      	strb	r1, [r7, #14]
 800e998:	4413      	add	r3, r2
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	461a      	mov	r2, r3
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	639a      	str	r2, [r3, #56]	; 0x38
            isoDepDev->info.FWI   = (uint8_t)((isoDepDev->info.SFGI >> RFAL_ISODEP_ATS_TB_FWI_SHIFT) & RFAL_ISODEP_ATS_FWI_MASK);
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9a6:	091b      	lsrs	r3, r3, #4
 800e9a8:	b2db      	uxtb	r3, r3
 800e9aa:	f003 030f 	and.w	r3, r3, #15
 800e9ae:	b2da      	uxtb	r2, r3
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            isoDepDev->info.SFGI &= RFAL_ISODEP_ATS_TB_SFGI_MASK;
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ba:	f003 020f 	and.w	r2, r3, #15
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	639a      	str	r2, [r3, #56]	; 0x38
        }
        
        /* Check if TC is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK) != 0U )
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	785b      	ldrb	r3, [r3, #1]
 800e9c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d02d      	beq.n	800ea2a <rfalIsoDepPollAHandleActivation+0x1a2>
        {
            /* Check for Protocol features support */
            /* Advanced protocol features defined on Digital 1.0 Table 69, removed after */
            isoDepDev->info.supAdFt = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_ADV_FEAT) != 0U)  ? true : false);
 800e9ce:	683a      	ldr	r2, [r7, #0]
 800e9d0:	7bbb      	ldrb	r3, [r7, #14]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	091b      	lsrs	r3, r3, #4
 800e9d8:	f003 0301 	and.w	r3, r3, #1
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	bf14      	ite	ne
 800e9e0:	2301      	movne	r3, #1
 800e9e2:	2300      	moveq	r3, #0
 800e9e4:	b2da      	uxtb	r2, r3
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            isoDepDev->info.supDID  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_DID)      != 0U)  ? true : false);
 800e9ec:	683a      	ldr	r2, [r7, #0]
 800e9ee:	7bbb      	ldrb	r3, [r7, #14]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	085b      	lsrs	r3, r3, #1
 800e9f6:	f003 0301 	and.w	r3, r3, #1
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	bf14      	ite	ne
 800e9fe:	2301      	movne	r3, #1
 800ea00:	2300      	moveq	r3, #0
 800ea02:	b2da      	uxtb	r2, r3
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            isoDepDev->info.supNAD  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++] & RFAL_ISODEP_ATS_TC_NAD)      != 0U)  ? true : false);
 800ea0a:	683a      	ldr	r2, [r7, #0]
 800ea0c:	7bbb      	ldrb	r3, [r7, #14]
 800ea0e:	1c59      	adds	r1, r3, #1
 800ea10:	73b9      	strb	r1, [r7, #14]
 800ea12:	4413      	add	r3, r2
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	f003 0301 	and.w	r3, r3, #1
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	bf14      	ite	ne
 800ea1e:	2301      	movne	r3, #1
 800ea20:	2300      	moveq	r3, #0
 800ea22:	b2da      	uxtb	r2, r3
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        }
    }
    
    isoDepDev->info.FSx  = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7ff fce1 	bl	800e3f8 <rfalIsoDepFSxI2FSx>
 800ea36:	4603      	mov	r3, r0
 800ea38:	461a      	mov	r2, r3
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    
    isoDepDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	4618      	mov	r0, r3
 800ea48:	f000 fa36 	bl	800eeb8 <rfalIsoDepSFGI2SFGT>
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7f5 fbf3 	bl	8004244 <timerCalculateTimer>
 800ea5e:	4602      	mov	r2, r0
 800ea60:	4b35      	ldr	r3, [pc, #212]	; (800eb38 <rfalIsoDepPollAHandleActivation+0x2b0>)
 800ea62:	63da      	str	r2, [r3, #60]	; 0x3c
    
    isoDepDev->info.FWT  = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7ff fca4 	bl	800e3b8 <rfalIsoDepFWI2FWT>
 800ea70:	4602      	mov	r2, r0
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT = RFAL_ISODEP_DFWT_20;
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ea7c:	635a      	str	r2, [r3, #52]	; 0x34
    
    isoDepDev->info.DID = ( (isoDepDev->info.supDID) ? DID : RFAL_ISODEP_NO_DID);
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d001      	beq.n	800ea8c <rfalIsoDepPollAHandleActivation+0x204>
 800ea88:	79ba      	ldrb	r2, [r7, #6]
 800ea8a:	e000      	b.n	800ea8e <rfalIsoDepPollAHandleActivation+0x206>
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.NAD = RFAL_ISODEP_NO_NAD;
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	22ff      	movs	r2, #255	; 0xff
 800ea98:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    
    
    /*******************************************************************************/
    /* If higher bit rates are supported by both devices, send PPS                 */
    if( (isoDepDev->info.DSI != RFAL_BR_106) || (isoDepDev->info.DRI != RFAL_BR_106) )
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d104      	bne.n	800eab0 <rfalIsoDepPollAHandleActivation+0x228>
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d030      	beq.n	800eb12 <rfalIsoDepPollAHandleActivation+0x28a>
    {
        /* Wait until SFGT has been fulfilled */
        while( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) ) { /* MISRA 15.6: mandatory brackets */ };
 800eab0:	bf00      	nop
 800eab2:	4b21      	ldr	r3, [pc, #132]	; (800eb38 <rfalIsoDepPollAHandleActivation+0x2b0>)
 800eab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7f5 fbd2 	bl	8004260 <timerIsExpired>
 800eabc:	4603      	mov	r3, r0
 800eabe:	f083 0301 	eor.w	r3, r3, #1
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1f4      	bne.n	800eab2 <rfalIsoDepPollAHandleActivation+0x22a>
        
        ret = rfalIsoDepPPS( isoDepDev->info.DID, isoDepDev->info.DSI, isoDepDev->info.DRI, &ppsRes );
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800eada:	f107 0308 	add.w	r3, r7, #8
 800eade:	f7ff fdf7 	bl	800e6d0 <rfalIsoDepPPS>
 800eae2:	4603      	mov	r3, r0
 800eae4:	81bb      	strh	r3, [r7, #12]
        
        if( ret == ERR_NONE )
 800eae6:	89bb      	ldrh	r3, [r7, #12]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d10a      	bne.n	800eb02 <rfalIsoDepPollAHandleActivation+0x27a>
        {
            /* DSI code the divisor from PICC to PCD */
            /* DRI code the divisor from PCD to PICC */
            rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800eaf8:	4619      	mov	r1, r3
 800eafa:	4610      	mov	r0, r2
 800eafc:	f006 fd48 	bl	8015590 <rfalSetBitRate>
 800eb00:	e007      	b.n	800eb12 <rfalIsoDepPollAHandleActivation+0x28a>
        }
        else
        {
            isoDepDev->info.DSI = RFAL_BR_106;
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	2200      	movs	r2, #0
 800eb06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            isoDepDev->info.DRI = RFAL_BR_106;
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        }
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800eb18:	4b07      	ldr	r3, [pc, #28]	; (800eb38 <rfalIsoDepPollAHandleActivation+0x2b0>)
 800eb1a:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 800eb1c:	79fb      	ldrb	r3, [r7, #7]
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7ff fc6a 	bl	800e3f8 <rfalIsoDepFSxI2FSx>
 800eb24:	4603      	mov	r3, r0
 800eb26:	461a      	mov	r2, r3
 800eb28:	4b03      	ldr	r3, [pc, #12]	; (800eb38 <rfalIsoDepPollAHandleActivation+0x2b0>)
 800eb2a:	845a      	strh	r2, [r3, #34]	; 0x22
    
    return ERR_NONE;
 800eb2c:	2300      	movs	r3, #0
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3710      	adds	r7, #16
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	20002f44 	.word	0x20002f44

0800eb3c <rfalIsoDepPollBHandleActivation>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepPollBHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, uint8_t PARAM1, const rfalNfcbListenDevice *nfcbDev, const uint8_t* HLInfo, uint8_t HLInfoLen, rfalIsoDepDevice *isoDepDev )
{
 800eb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb3e:	b08d      	sub	sp, #52	; 0x34
 800eb40:	af08      	add	r7, sp, #32
 800eb42:	4604      	mov	r4, r0
 800eb44:	4608      	mov	r0, r1
 800eb46:	4611      	mov	r1, r2
 800eb48:	461a      	mov	r2, r3
 800eb4a:	4623      	mov	r3, r4
 800eb4c:	71fb      	strb	r3, [r7, #7]
 800eb4e:	4603      	mov	r3, r0
 800eb50:	71bb      	strb	r3, [r7, #6]
 800eb52:	460b      	mov	r3, r1
 800eb54:	717b      	strb	r3, [r7, #5]
 800eb56:	4613      	mov	r3, r2
 800eb58:	713b      	strb	r3, [r7, #4]
    ReturnCode ret;
    uint8_t    mbli;
    
    /***************************************************************************/
    /* Initialize ISO-DEP Device with info from SENSB_RES                      */
    isoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 800eb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5c:	7b1b      	ldrb	r3, [r3, #12]
 800eb5e:	091b      	lsrs	r3, r3, #4
 800eb60:	b2da      	uxtb	r2, r3
 800eb62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.FWT     = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 800eb68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7ff fc22 	bl	800e3b8 <rfalIsoDepFWI2FWT>
 800eb74:	4602      	mov	r2, r0
 800eb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb78:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT    = RFAL_NFCB_DFWT;
 800eb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb7c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800eb80:	635a      	str	r2, [r3, #52]	; 0x34
    isoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 800eb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb84:	7b5b      	ldrb	r3, [r3, #13]
 800eb86:	091b      	lsrs	r3, r3, #4
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	f003 020f 	and.w	r2, r3, #15
 800eb8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb90:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.SFGT    = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 800eb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f000 f98d 	bl	800eeb8 <rfalIsoDepSFGI2SFGT>
 800eb9e:	4602      	mov	r2, r0
 800eba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eba2:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 800eba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba6:	7adb      	ldrb	r3, [r3, #11]
 800eba8:	091b      	lsrs	r3, r3, #4
 800ebaa:	b2da      	uxtb	r2, r3
 800ebac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    isoDepDev->info.FSx     = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 800ebb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7ff fc1d 	bl	800e3f8 <rfalIsoDepFSxI2FSx>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebc4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    isoDepDev->info.DID     = DID;
 800ebc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebca:	79ba      	ldrb	r2, [r7, #6]
 800ebcc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 800ebd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd2:	7b1b      	ldrb	r3, [r3, #12]
 800ebd4:	f003 0301 	and.w	r3, r3, #1
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	bf14      	ite	ne
 800ebdc:	2301      	movne	r3, #1
 800ebde:	2300      	moveq	r3, #0
 800ebe0:	b2da      	uxtb	r2, r3
 800ebe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebe4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    isoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 800ebe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebea:	7b1b      	ldrb	r3, [r3, #12]
 800ebec:	085b      	lsrs	r3, r3, #1
 800ebee:	f003 0301 	and.w	r3, r3, #1
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	bf14      	ite	ne
 800ebf6:	2301      	movne	r3, #1
 800ebf8:	2300      	moveq	r3, #0
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebfe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    
    
    /* Check if DID requested is supported by PICC */
    if( (DID != RFAL_ISODEP_NO_DID) && (!isoDepDev->info.supDID) )
 800ec02:	79bb      	ldrb	r3, [r7, #6]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d009      	beq.n	800ec1c <rfalIsoDepPollBHandleActivation+0xe0>
 800ec08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec0a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ec0e:	f083 0301 	eor.w	r3, r3, #1
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d001      	beq.n	800ec1c <rfalIsoDepPollBHandleActivation+0xe0>
    {
        return ERR_PARAM;
 800ec18:	2307      	movs	r3, #7
 800ec1a:	e0a4      	b.n	800ed66 <rfalIsoDepPollBHandleActivation+0x22a>
    }
    
    /* Enable EMD handling according   Digital 2.1  4.1.1.1 ; EMVCo 3.0  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 800ec1c:	2002      	movs	r0, #2
 800ec1e:	f006 ff3f 	bl	8015aa0 <rfalSetErrorHandling>
    
    /***************************************************************************/
    /* Set FDT Poll to be used on upcoming communications                      */
    if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV )
 800ec22:	4b53      	ldr	r3, [pc, #332]	; (800ed70 <rfalIsoDepPollBHandleActivation+0x234>)
 800ec24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d104      	bne.n	800ec36 <rfalIsoDepPollBHandleActivation+0xfa>
    {
        /* Disregard Minimum TR2 returned by PICC, always use FDTb MIN   EMVCo 3.0  6.3.2.10  */
        rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 800ec2c:	f641 207c 	movw	r0, #6780	; 0x1a7c
 800ec30:	f006 ff46 	bl	8015ac0 <rfalSetFDTPoll>
 800ec34:	e00d      	b.n	800ec52 <rfalIsoDepPollBHandleActivation+0x116>
    }
    else
    {
        /* Apply minimum TR2 from SENSB_RES   Digital 2.1  7.6.2.23 */
        rfalSetFDTPoll( rfalNfcbTR2ToFDT(((nfcbDev->sensbRes.protInfo.FsciProType >>RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK)) );
 800ec36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec38:	7adb      	ldrb	r3, [r3, #11]
 800ec3a:	085b      	lsrs	r3, r3, #1
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	f003 0303 	and.w	r3, r3, #3
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	4618      	mov	r0, r3
 800ec46:	f005 f917 	bl	8013e78 <rfalNfcbTR2ToFDT>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f006 ff37 	bl	8015ac0 <rfalSetFDTPoll>
    }
    
    
    /* Calculate max Bit Rate */
    rfalIsoDepCalcBitRate( maxBR, nfcbDev->sensbRes.protInfo.BRC, &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 800ec52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec54:	7a99      	ldrb	r1, [r3, #10]
 800ec56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec58:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800ec5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec5e:	3349      	adds	r3, #73	; 0x49
 800ec60:	7978      	ldrb	r0, [r7, #5]
 800ec62:	f000 f887 	bl	800ed74 <rfalIsoDepCalcBitRate>
    
    /***************************************************************************/
    /* Send ATTRIB Command                                                     */
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800ec66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec68:	1c9d      	adds	r5, r3, #2
                           (((nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_ADC_ADV_FEATURE_MASK) != 0U) ? PARAM1 : RFAL_ISODEP_ATTRIB_REQ_PARAM1_DEFAULT),
 800ec6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6c:	7b1b      	ldrb	r3, [r3, #12]
 800ec6e:	f003 0308 	and.w	r3, r3, #8
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d001      	beq.n	800ec7a <rfalIsoDepPollBHandleActivation+0x13e>
 800ec76:	793c      	ldrb	r4, [r7, #4]
 800ec78:	e000      	b.n	800ec7c <rfalIsoDepPollBHandleActivation+0x140>
 800ec7a:	2400      	movs	r4, #0
 800ec7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec7e:	f893 6048 	ldrb.w	r6, [r3, #72]	; 0x48
 800ec82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec84:	f893 c049 	ldrb.w	ip, [r3, #73]	; 0x49
                           isoDepDev->info.DSI,
                           isoDepDev->info.DRI,
                           FSDI,
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 800ec88:	4b39      	ldr	r3, [pc, #228]	; (800ed70 <rfalIsoDepPollBHandleActivation+0x234>)
 800ec8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	d005      	beq.n	800ec9e <rfalIsoDepPollBHandleActivation+0x162>
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 800ec92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec94:	7adb      	ldrb	r3, [r3, #11]
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800ec96:	f003 0307 	and.w	r3, r3, #7
 800ec9a:	b2db      	uxtb	r3, r3
 800ec9c:	e000      	b.n	800eca0 <rfalIsoDepPollBHandleActivation+0x164>
 800ec9e:	2301      	movs	r3, #1
                           DID,
                           HLInfo,
                           HLInfoLen,
                           (isoDepDev->info.FWT + isoDepDev->info.dFWT),
 800eca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eca2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800eca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eca6:	6b52      	ldr	r2, [r2, #52]	; 0x34
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800eca8:	440a      	add	r2, r1
 800ecaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ecac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ecae:	3021      	adds	r0, #33	; 0x21
 800ecb0:	9007      	str	r0, [sp, #28]
 800ecb2:	9106      	str	r1, [sp, #24]
 800ecb4:	9205      	str	r2, [sp, #20]
 800ecb6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800ecba:	9204      	str	r2, [sp, #16]
 800ecbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecbe:	9203      	str	r2, [sp, #12]
 800ecc0:	79ba      	ldrb	r2, [r7, #6]
 800ecc2:	9202      	str	r2, [sp, #8]
 800ecc4:	9301      	str	r3, [sp, #4]
 800ecc6:	79fb      	ldrb	r3, [r7, #7]
 800ecc8:	9300      	str	r3, [sp, #0]
 800ecca:	4663      	mov	r3, ip
 800eccc:	4632      	mov	r2, r6
 800ecce:	4621      	mov	r1, r4
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	f7ff fd4f 	bl	800e774 <rfalIsoDepATTRIB>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	81fb      	strh	r3, [r7, #14]
                           &isoDepDev->activation.B.Listener.ATTRIB_RESLen
                         );
    
    /***************************************************************************/
    /* Process ATTRIB Response                                                 */
    if( ret == ERR_NONE )
 800ecda:	89fb      	ldrh	r3, [r7, #14]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d12c      	bne.n	800ed3a <rfalIsoDepPollBHandleActivation+0x1fe>
    {
        /* Digital 1.1 14.6.2.3 - Check if received DID match */
        if( (isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID )
 800ece0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ece2:	781b      	ldrb	r3, [r3, #0]
 800ece4:	f003 020f 	and.w	r2, r3, #15
 800ece8:	79bb      	ldrb	r3, [r7, #6]
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d001      	beq.n	800ecf2 <rfalIsoDepPollBHandleActivation+0x1b6>
        {
            return ERR_PROTO;
 800ecee:	230b      	movs	r3, #11
 800ecf0:	e039      	b.n	800ed66 <rfalIsoDepPollBHandleActivation+0x22a>
        }
                
        /* Retrieve MBLI and calculate new FDS/MBL (Maximum Buffer Length) */
        mbli = ((isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid >> RFAL_ISODEP_ATTRIB_RES_MBLI_SHIFT) & RFAL_ISODEP_ATTRIB_RES_MBLI_MASK);
 800ecf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	091b      	lsrs	r3, r3, #4
 800ecf8:	737b      	strb	r3, [r7, #13]
        if( mbli > 0U)
 800ecfa:	7b7b      	ldrb	r3, [r7, #13]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d008      	beq.n	800ed12 <rfalIsoDepPollBHandleActivation+0x1d6>
        {
            /* Digital 1.1  14.6.2  Calculate Maximum Buffer Length MBL = FSC x 2^(MBLI-1) */
            isoDepDev->info.MBL = (isoDepDev->info.FSx * ((uint32_t)1U<<(mbli-1U)));
 800ed00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed02:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800ed06:	461a      	mov	r2, r3
 800ed08:	7b7b      	ldrb	r3, [r7, #13]
 800ed0a:	3b01      	subs	r3, #1
 800ed0c:	409a      	lsls	r2, r3
 800ed0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed10:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* DSI code the divisor from PICC to PCD */
        /* DRI code the divisor from PCD to PICC */
        rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 800ed12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed14:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800ed18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed1a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ed1e:	4619      	mov	r1, r3
 800ed20:	4610      	mov	r0, r2
 800ed22:	f006 fc35 	bl	8015590 <rfalSetBitRate>
        {
            /* REMARK: SoF EoF TR0 and TR1 are not passed on to RF layer */
        }
        
        /* Start the SFGT timer */
        isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 800ed26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed2a:	b29b      	uxth	r3, r3
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7f5 fa89 	bl	8004244 <timerCalculateTimer>
 800ed32:	4602      	mov	r2, r0
 800ed34:	4b0e      	ldr	r3, [pc, #56]	; (800ed70 <rfalIsoDepPollBHandleActivation+0x234>)
 800ed36:	63da      	str	r2, [r3, #60]	; 0x3c
 800ed38:	e007      	b.n	800ed4a <rfalIsoDepPollBHandleActivation+0x20e>
    }
    else
    {
        isoDepDev->info.DSI = RFAL_BR_106;
 800ed3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        isoDepDev->info.DRI = RFAL_BR_106;
 800ed42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed44:	2200      	movs	r2, #0
 800ed46:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 800ed4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed4c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800ed50:	4b07      	ldr	r3, [pc, #28]	; (800ed70 <rfalIsoDepPollBHandleActivation+0x234>)
 800ed52:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 800ed54:	79fb      	ldrb	r3, [r7, #7]
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7ff fb4e 	bl	800e3f8 <rfalIsoDepFSxI2FSx>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	461a      	mov	r2, r3
 800ed60:	4b03      	ldr	r3, [pc, #12]	; (800ed70 <rfalIsoDepPollBHandleActivation+0x234>)
 800ed62:	845a      	strh	r2, [r3, #34]	; 0x22
    
    return ret;
 800ed64:	89fb      	ldrh	r3, [r7, #14]
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3714      	adds	r7, #20
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	20002f44 	.word	0x20002f44

0800ed74 <rfalIsoDepCalcBitRate>:
}


/*******************************************************************************/
static void rfalIsoDepCalcBitRate( rfalBitRate maxAllowedBR, uint8_t piccBRCapability, rfalBitRate *dsi, rfalBitRate *dri )
{
 800ed74:	b480      	push	{r7}
 800ed76:	b087      	sub	sp, #28
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	60ba      	str	r2, [r7, #8]
 800ed7c:	607b      	str	r3, [r7, #4]
 800ed7e:	4603      	mov	r3, r0
 800ed80:	73fb      	strb	r3, [r7, #15]
 800ed82:	460b      	mov	r3, r1
 800ed84:	73bb      	strb	r3, [r7, #14]
    uint8_t     dsiMask;
    int8_t      i;
    bool        bitrateFound;
    rfalBitRate curMaxBR;
    
    curMaxBR = maxAllowedBR;
 800ed86:	7bfb      	ldrb	r3, [r7, #15]
 800ed88:	757b      	strb	r3, [r7, #21]
    
    do
    {
        bitrateFound = true;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	75bb      	strb	r3, [r7, #22]
        
        (*dsi) = RFAL_BR_106;
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	2200      	movs	r2, #0
 800ed92:	701a      	strb	r2, [r3, #0]
        (*dri) = RFAL_BR_106;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	701a      	strb	r2, [r3, #0]
        
        /* Digital 1.0  5.6.2.5 & 11.6.2.14: A received RFU value of b4 = 1b MUST be interpreted as if b7 to b1 ? 0000000b (only 106 kbits/s in both direction) */
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 800ed9a:	7bbb      	ldrb	r3, [r7, #14]
 800ed9c:	f003 0308 	and.w	r3, r3, #8
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	f040 8083 	bne.w	800eeae <rfalIsoDepCalcBitRate+0x13a>
 800eda8:	7d7b      	ldrb	r3, [r7, #21]
 800edaa:	2b03      	cmp	r3, #3
 800edac:	d87f      	bhi.n	800eeae <rfalIsoDepCalcBitRate+0x13a>
            return;
        }
        
        /***************************************************************************/
        /* Determine Listen->Poll bit rate */
        dsiMask = (piccBRCapability & RFAL_ISODEP_BSI_MASK);
 800edae:	7bbb      	ldrb	r3, [r7, #14]
 800edb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800edb4:	753b      	strb	r3, [r7, #20]
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 800edb6:	2302      	movs	r3, #2
 800edb8:	75fb      	strb	r3, [r7, #23]
 800edba:	e019      	b.n	800edf0 <rfalIsoDepCalcBitRate+0x7c>
        {
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800edbc:	7d3a      	ldrb	r2, [r7, #20]
 800edbe:	7dfb      	ldrb	r3, [r7, #23]
 800edc0:	4619      	mov	r1, r3
 800edc2:	2310      	movs	r3, #16
 800edc4:	408b      	lsls	r3, r1
 800edc6:	4013      	ands	r3, r2
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00b      	beq.n	800ede4 <rfalIsoDepCalcBitRate+0x70>
 800edcc:	7dfb      	ldrb	r3, [r7, #23]
 800edce:	1c5a      	adds	r2, r3, #1
 800edd0:	7d7b      	ldrb	r3, [r7, #21]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d806      	bhi.n	800ede4 <rfalIsoDepCalcBitRate+0x70>
            {
                uint8_t newdsi = ((uint8_t) i) + 1U;
 800edd6:	7dfb      	ldrb	r3, [r7, #23]
 800edd8:	3301      	adds	r3, #1
 800edda:	74fb      	strb	r3, [r7, #19]
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	7cfa      	ldrb	r2, [r7, #19]
 800ede0:	701a      	strb	r2, [r3, #0]
                break;
 800ede2:	e009      	b.n	800edf8 <rfalIsoDepCalcBitRate+0x84>
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 800ede4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	3b01      	subs	r3, #1
 800edec:	b2db      	uxtb	r3, r3
 800edee:	75fb      	strb	r3, [r7, #23]
 800edf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	dae1      	bge.n	800edbc <rfalIsoDepCalcBitRate+0x48>
            }
        }
        
        /***************************************************************************/
        /* Determine Poll->Listen bit rate */ 
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
 800edf8:	7bbb      	ldrb	r3, [r7, #14]
 800edfa:	f003 0307 	and.w	r3, r3, #7
 800edfe:	74bb      	strb	r3, [r7, #18]
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 800ee00:	2302      	movs	r3, #2
 800ee02:	75fb      	strb	r3, [r7, #23]
 800ee04:	e018      	b.n	800ee38 <rfalIsoDepCalcBitRate+0xc4>
        {
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800ee06:	7cbb      	ldrb	r3, [r7, #18]
 800ee08:	7dfa      	ldrb	r2, [r7, #23]
 800ee0a:	40d3      	lsrs	r3, r2
 800ee0c:	f003 0301 	and.w	r3, r3, #1
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d00b      	beq.n	800ee2c <rfalIsoDepCalcBitRate+0xb8>
 800ee14:	7dfb      	ldrb	r3, [r7, #23]
 800ee16:	1c5a      	adds	r2, r3, #1
 800ee18:	7d7b      	ldrb	r3, [r7, #21]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d806      	bhi.n	800ee2c <rfalIsoDepCalcBitRate+0xb8>
            {
                uint8_t newdri = ((uint8_t) i) + 1U;
 800ee1e:	7dfb      	ldrb	r3, [r7, #23]
 800ee20:	3301      	adds	r3, #1
 800ee22:	747b      	strb	r3, [r7, #17]
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	7c7a      	ldrb	r2, [r7, #17]
 800ee28:	701a      	strb	r2, [r3, #0]
                break;
 800ee2a:	e009      	b.n	800ee40 <rfalIsoDepCalcBitRate+0xcc>
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 800ee2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee30:	b2db      	uxtb	r3, r3
 800ee32:	3b01      	subs	r3, #1
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	75fb      	strb	r3, [r7, #23]
 800ee38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	dae2      	bge.n	800ee06 <rfalIsoDepCalcBitRate+0x92>
        
        /***************************************************************************/
        /* Check if different bit rate is supported */
        
        /* Digital 1.0 Table 67: if b8=1b, then only the same bit rate divisor for both directions is supported */
        if( (piccBRCapability & RFAL_ISODEP_SAME_BITRATE_MASK) != 0U )
 800ee40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	da2a      	bge.n	800ee9e <rfalIsoDepCalcBitRate+0x12a>
        {   
            (*dsi) = MIN((*dsi), (*dri));
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	781a      	ldrb	r2, [r3, #0]
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	4293      	cmp	r3, r2
 800ee52:	bf28      	it	cs
 800ee54:	4613      	movcs	r3, r2
 800ee56:	b2da      	uxtb	r2, r3
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	701a      	strb	r2, [r3, #0]
            (*dri) = (*dsi);
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	781a      	ldrb	r2, [r3, #0]
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	701a      	strb	r2, [r3, #0]
            /* Check that the baudrate is supported */
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d018      	beq.n	800ee9e <rfalIsoDepCalcBitRate+0x12a>
 800ee6c:	7d3a      	ldrb	r2, [r7, #20]
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	3b01      	subs	r3, #1
 800ee74:	2110      	movs	r1, #16
 800ee76:	fa01 f303 	lsl.w	r3, r1, r3
 800ee7a:	4013      	ands	r3, r2
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d009      	beq.n	800ee94 <rfalIsoDepCalcBitRate+0x120>
 800ee80:	7cba      	ldrb	r2, [r7, #18]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	3b01      	subs	r3, #1
 800ee88:	fa22 f303 	lsr.w	r3, r2, r3
 800ee8c:	f003 0301 	and.w	r3, r3, #1
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d104      	bne.n	800ee9e <rfalIsoDepCalcBitRate+0x12a>
            {
                bitrateFound = false;
 800ee94:	2300      	movs	r3, #0
 800ee96:	75bb      	strb	r3, [r7, #22]
                curMaxBR     = (*dsi); /* set allowed bitrate to be lowest and determine bit rate again */
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	757b      	strb	r3, [r7, #21]
            }
        }
    } while (!(bitrateFound));
 800ee9e:	7dbb      	ldrb	r3, [r7, #22]
 800eea0:	f083 0301 	eor.w	r3, r3, #1
 800eea4:	b2db      	uxtb	r3, r3
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	f47f af6f 	bne.w	800ed8a <rfalIsoDepCalcBitRate+0x16>
 800eeac:	e000      	b.n	800eeb0 <rfalIsoDepCalcBitRate+0x13c>
            return;
 800eeae:	bf00      	nop
    
}
 800eeb0:	371c      	adds	r7, #28
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bc80      	pop	{r7}
 800eeb6:	4770      	bx	lr

0800eeb8 <rfalIsoDepSFGI2SFGT>:

/*******************************************************************************/
static uint32_t rfalIsoDepSFGI2SFGT( uint8_t sfgi )
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b085      	sub	sp, #20
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	4603      	mov	r3, r0
 800eec0:	71fb      	strb	r3, [r7, #7]
    uint32_t sfgt;
    uint8_t tmpSFGI;
    
    tmpSFGI = sfgi;
 800eec2:	79fb      	ldrb	r3, [r7, #7]
 800eec4:	72fb      	strb	r3, [r7, #11]
 
    if (tmpSFGI > ISODEP_SFGI_MAX)
 800eec6:	7afb      	ldrb	r3, [r7, #11]
 800eec8:	2b0e      	cmp	r3, #14
 800eeca:	d901      	bls.n	800eed0 <rfalIsoDepSFGI2SFGT+0x18>
    {
        tmpSFGI = ISODEP_SFGI_MIN;
 800eecc:	2300      	movs	r3, #0
 800eece:	72fb      	strb	r3, [r7, #11]
    }
        
    if (tmpSFGI != ISODEP_SFGI_MIN)
 800eed0:	7afb      	ldrb	r3, [r7, #11]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d00b      	beq.n	800eeee <rfalIsoDepSFGI2SFGT+0x36>
    {
        /* If sfgi != 0 wait SFGT + dSFGT   Digital 1.1  13.8.2.1 */
        sfgt  = isoDepCalcSGFT(sfgi) + isoDepCalcdSGFT(sfgi);
 800eed6:	79fb      	ldrb	r3, [r7, #7]
 800eed8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800eedc:	409a      	lsls	r2, r3
 800eede:	79fb      	ldrb	r3, [r7, #7]
 800eee0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800eee4:	fa01 f303 	lsl.w	r3, r1, r3
 800eee8:	4413      	add	r3, r2
 800eeea:	60fb      	str	r3, [r7, #12]
 800eeec:	e002      	b.n	800eef4 <rfalIsoDepSFGI2SFGT+0x3c>
    }
    /* Otherwise use FDTPoll min Digital  1.1  13.8.2.3*/
    else
    {
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
 800eeee:	f641 237c 	movw	r3, #6780	; 0x1a7c
 800eef2:	60fb      	str	r3, [r7, #12]
    }

    /* Convert carrier cycles to milli seconds */
    return (rfalConv1fcToMs(sfgt) + 1U);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	4a05      	ldr	r2, [pc, #20]	; (800ef0c <rfalIsoDepSFGI2SFGT+0x54>)
 800eef8:	fba2 2303 	umull	r2, r3, r2, r3
 800eefc:	0b1b      	lsrs	r3, r3, #12
 800eefe:	3301      	adds	r3, #1
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3714      	adds	r7, #20
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bc80      	pop	{r7}
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop
 800ef0c:	4d542005 	.word	0x4d542005

0800ef10 <rfalIsoDepApdu2IBLockParam>:
#endif  /* RFAL_FEATURE_ISO_DEP_POLL */
 

 /*******************************************************************************/
 static void rfalIsoDepApdu2IBLockParam( rfalIsoDepApduTxRxParam apduParam, rfalIsoDepTxRxParam *iBlockParam, uint16_t txPos, uint16_t rxPos )
{
 800ef10:	b084      	sub	sp, #16
 800ef12:	b598      	push	{r3, r4, r7, lr}
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	f107 0410 	add.w	r4, r7, #16
 800ef1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     NO_WARNING(rxPos); /* Keep this param for future use */
     
     iBlockParam->DID    = apduParam.DID;
 800ef1e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800ef22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef24:	f883 2020 	strb.w	r2, [r3, #32]
     iBlockParam->FSx    = apduParam.FSx;
 800ef28:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ef2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef2c:	83da      	strh	r2, [r3, #30]
     iBlockParam->ourFSx = apduParam.ourFSx;
 800ef2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef32:	839a      	strh	r2, [r3, #28]
     iBlockParam->FWT    = apduParam.FWT;
 800ef34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef38:	615a      	str	r2, [r3, #20]
     iBlockParam->dFWT   = apduParam.dFWT;
 800ef3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef3e:	619a      	str	r2, [r3, #24]
     
     if( (apduParam.txBufLen - txPos) > rfalIsoDepGetMaxInfLen() )
 800ef40:	8abb      	ldrh	r3, [r7, #20]
 800ef42:	461a      	mov	r2, r3
 800ef44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ef46:	1ad4      	subs	r4, r2, r3
 800ef48:	f7ff fac4 	bl	800e4d4 <rfalIsoDepGetMaxInfLen>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	429c      	cmp	r4, r3
 800ef50:	dd09      	ble.n	800ef66 <rfalIsoDepApdu2IBLockParam+0x56>
     {
         iBlockParam->isTxChaining = true;
 800ef52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef54:	2201      	movs	r2, #1
 800ef56:	719a      	strb	r2, [r3, #6]
         iBlockParam->txBufLen     = rfalIsoDepGetMaxInfLen();
 800ef58:	f7ff fabc 	bl	800e4d4 <rfalIsoDepGetMaxInfLen>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	461a      	mov	r2, r3
 800ef60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef62:	809a      	strh	r2, [r3, #4]
 800ef64:	e008      	b.n	800ef78 <rfalIsoDepApdu2IBLockParam+0x68>
     }
     else
     {
         iBlockParam->isTxChaining = false;
 800ef66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef68:	2200      	movs	r2, #0
 800ef6a:	719a      	strb	r2, [r3, #6]
         iBlockParam->txBufLen     = (apduParam.txBufLen - txPos);
 800ef6c:	8aba      	ldrh	r2, [r7, #20]
 800ef6e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ef70:	1ad3      	subs	r3, r2, r3
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef76:	809a      	strh	r2, [r3, #4]
     }
     
     /* TxBuf is moved to the beginning for every I-Block */
     iBlockParam->txBuf        = (rfalIsoDepBufFormat*)apduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800ef78:	693a      	ldr	r2, [r7, #16]
 800ef7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef7c:	601a      	str	r2, [r3, #0]
     iBlockParam->rxBuf        = apduParam.tmpBuf;                        /* Simply using the apdu buffer is not possible because of current ACK handling */
 800ef7e:	6a3a      	ldr	r2, [r7, #32]
 800ef80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef82:	609a      	str	r2, [r3, #8]
     iBlockParam->isRxChaining = &gIsoDep.isAPDURxChaining;
 800ef84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef86:	4a05      	ldr	r2, [pc, #20]	; (800ef9c <rfalIsoDepApdu2IBLockParam+0x8c>)
 800ef88:	611a      	str	r2, [r3, #16]
     iBlockParam->rxLen        = apduParam.rxLen;
 800ef8a:	69fa      	ldr	r2, [r7, #28]
 800ef8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef8e:	60da      	str	r2, [r3, #12]
}
 800ef90:	bf00      	nop
 800ef92:	46bd      	mov	sp, r7
 800ef94:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 800ef98:	b004      	add	sp, #16
 800ef9a:	4770      	bx	lr
 800ef9c:	20002fc8 	.word	0x20002fc8

0800efa0 <rfalIsoDepStartApduTransceive>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepStartApduTransceive( rfalIsoDepApduTxRxParam param )
{
 800efa0:	b084      	sub	sp, #16
 800efa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efa4:	b093      	sub	sp, #76	; 0x4c
 800efa6:	af08      	add	r7, sp, #32
 800efa8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800efac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    rfalIsoDepTxRxParam txRxParam;
    
    /* Initialize and store APDU context */
    gIsoDep.APDUParam = param;
 800efb0:	4b22      	ldr	r3, [pc, #136]	; (800f03c <rfalIsoDepStartApduTransceive+0x9c>)
 800efb2:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 800efb6:	f107 0540 	add.w	r5, r7, #64	; 0x40
 800efba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efc2:	682b      	ldr	r3, [r5, #0]
 800efc4:	6023      	str	r3, [r4, #0]
    gIsoDep.APDUTxPos = 0;
 800efc6:	4b1d      	ldr	r3, [pc, #116]	; (800f03c <rfalIsoDepStartApduTransceive+0x9c>)
 800efc8:	2200      	movs	r2, #0
 800efca:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    gIsoDep.APDURxPos = 0;
 800efce:	4b1b      	ldr	r3, [pc, #108]	; (800f03c <rfalIsoDepStartApduTransceive+0x9c>)
 800efd0:	2200      	movs	r2, #0
 800efd2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    
    /* Assign current FSx to calculate INF length */
    gIsoDep.ourFsx = param.ourFSx;
 800efd6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800efda:	4b18      	ldr	r3, [pc, #96]	; (800f03c <rfalIsoDepStartApduTransceive+0x9c>)
 800efdc:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.fsx    = param.FSx;
 800efde:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800efe2:	4b16      	ldr	r3, [pc, #88]	; (800f03c <rfalIsoDepStartApduTransceive+0x9c>)
 800efe4:	821a      	strh	r2, [r3, #16]
    
    /* Convert APDU TxRxParams to I-Block TxRxParams */
    rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 800efe6:	4b15      	ldr	r3, [pc, #84]	; (800f03c <rfalIsoDepStartApduTransceive+0x9c>)
 800efe8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800efec:	4a13      	ldr	r2, [pc, #76]	; (800f03c <rfalIsoDepStartApduTransceive+0x9c>)
 800efee:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 800eff2:	4e12      	ldr	r6, [pc, #72]	; (800f03c <rfalIsoDepStartApduTransceive+0x9c>)
 800eff4:	9207      	str	r2, [sp, #28]
 800eff6:	9306      	str	r3, [sp, #24]
 800eff8:	1d3b      	adds	r3, r7, #4
 800effa:	9305      	str	r3, [sp, #20]
 800effc:	466d      	mov	r5, sp
 800effe:	f106 046c 	add.w	r4, r6, #108	; 0x6c
 800f002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f006:	6823      	ldr	r3, [r4, #0]
 800f008:	602b      	str	r3, [r5, #0]
 800f00a:	f106 035c 	add.w	r3, r6, #92	; 0x5c
 800f00e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f010:	f7ff ff7e 	bl	800ef10 <rfalIsoDepApdu2IBLockParam>
    
    return rfalIsoDepStartTransceive( txRxParam );
 800f014:	466d      	mov	r5, sp
 800f016:	f107 0414 	add.w	r4, r7, #20
 800f01a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f01c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f01e:	6823      	ldr	r3, [r4, #0]
 800f020:	602b      	str	r3, [r5, #0]
 800f022:	1d3b      	adds	r3, r7, #4
 800f024:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f026:	f7ff fa7d 	bl	800e524 <rfalIsoDepStartTransceive>
 800f02a:	4603      	mov	r3, r0
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	372c      	adds	r7, #44	; 0x2c
 800f030:	46bd      	mov	sp, r7
 800f032:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f036:	b004      	add	sp, #16
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop
 800f03c:	20002f44 	.word	0x20002f44

0800f040 <rfalIsoDepGetApduTransceiveStatus>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepGetApduTransceiveStatus( void )
{
 800f040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f042:	b093      	sub	sp, #76	; 0x4c
 800f044:	af08      	add	r7, sp, #32
    ReturnCode          ret;
    rfalIsoDepTxRxParam txRxParam;
    
    ret = rfalIsoDepGetTransceiveStatus();
 800f046:	f7ff fad9 	bl	800e5fc <rfalIsoDepGetTransceiveStatus>
 800f04a:	4603      	mov	r3, r0
 800f04c:	84fb      	strh	r3, [r7, #38]	; 0x26
    switch( ret )
 800f04e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f050:	2b00      	cmp	r3, #0
 800f052:	d002      	beq.n	800f05a <rfalIsoDepGetApduTransceiveStatus+0x1a>
 800f054:	2b0d      	cmp	r3, #13
 800f056:	d064      	beq.n	800f122 <rfalIsoDepGetApduTransceiveStatus+0xe2>
 800f058:	e085      	b.n	800f166 <rfalIsoDepGetApduTransceiveStatus+0x126>
    {
        /*******************************************************************************/
        case ERR_NONE:
         
            /* Check if we are still doing chaining on Tx */
            if( gIsoDep.isTxChaining )
 800f05a:	4b4a      	ldr	r3, [pc, #296]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f05c:	7c9b      	ldrb	r3, [r3, #18]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d03e      	beq.n	800f0e0 <rfalIsoDepGetApduTransceiveStatus+0xa0>
            {
                /* Add already Tx bytes */
                gIsoDep.APDUTxPos += gIsoDep.txBufLen;
 800f062:	4b48      	ldr	r3, [pc, #288]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f064:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 800f068:	4b46      	ldr	r3, [pc, #280]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f06a:	8b9b      	ldrh	r3, [r3, #28]
 800f06c:	4413      	add	r3, r2
 800f06e:	b29a      	uxth	r2, r3
 800f070:	4b44      	ldr	r3, [pc, #272]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f072:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
                
                /* Convert APDU TxRxParams to I-Block TxRxParams */
                rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 800f076:	4b43      	ldr	r3, [pc, #268]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f078:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800f07c:	4a41      	ldr	r2, [pc, #260]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f07e:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 800f082:	4e40      	ldr	r6, [pc, #256]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f084:	9207      	str	r2, [sp, #28]
 800f086:	9306      	str	r3, [sp, #24]
 800f088:	463b      	mov	r3, r7
 800f08a:	9305      	str	r3, [sp, #20]
 800f08c:	466d      	mov	r5, sp
 800f08e:	f106 046c 	add.w	r4, r6, #108	; 0x6c
 800f092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f096:	6823      	ldr	r3, [r4, #0]
 800f098:	602b      	str	r3, [r5, #0]
 800f09a:	f106 035c 	add.w	r3, r6, #92	; 0x5c
 800f09e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f0a0:	f7ff ff36 	bl	800ef10 <rfalIsoDepApdu2IBLockParam>
                
                if( txRxParam.txBufLen > 0U )      /* MISRA 21.18 */
 800f0a4:	88bb      	ldrh	r3, [r7, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d00d      	beq.n	800f0c6 <rfalIsoDepGetApduTransceiveStatus+0x86>
                {
                    /* Move next I-Block to beginning of APDU Tx buffer */
                    ST_MEMCPY( gIsoDep.APDUParam.txBuf->apdu, &gIsoDep.APDUParam.txBuf->apdu[gIsoDep.APDUTxPos], txRxParam.txBufLen );
 800f0aa:	4b36      	ldr	r3, [pc, #216]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0ae:	1cd8      	adds	r0, r3, #3
 800f0b0:	4b34      	ldr	r3, [pc, #208]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0b4:	4a33      	ldr	r2, [pc, #204]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0b6:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 800f0ba:	4413      	add	r3, r2
 800f0bc:	3303      	adds	r3, #3
 800f0be:	88ba      	ldrh	r2, [r7, #4]
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	f009 fe98 	bl	8018df6 <memcpy>
                }
                
                rfalIsoDepStartTransceive( txRxParam );
 800f0c6:	466d      	mov	r5, sp
 800f0c8:	f107 0410 	add.w	r4, r7, #16
 800f0cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f0ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f0d0:	6823      	ldr	r3, [r4, #0]
 800f0d2:	602b      	str	r3, [r5, #0]
 800f0d4:	463b      	mov	r3, r7
 800f0d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f0d8:	f7ff fa24 	bl	800e524 <rfalIsoDepStartTransceive>
                return ERR_BUSY;
 800f0dc:	2302      	movs	r3, #2
 800f0de:	e04c      	b.n	800f17a <rfalIsoDepGetApduTransceiveStatus+0x13a>
            }
            
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 800f0e0:	4b28      	ldr	r3, [pc, #160]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0e4:	881b      	ldrh	r3, [r3, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d03f      	beq.n	800f16a <rfalIsoDepGetApduTransceiveStatus+0x12a>
            {
                /* Copy packet from tmp buffer to APDU buffer */
                ST_MEMCPY( &gIsoDep.APDUParam.rxBuf->apdu[gIsoDep.APDURxPos], gIsoDep.APDUParam.tmpBuf->inf, *gIsoDep.APDUParam.rxLen );
 800f0ea:	4b26      	ldr	r3, [pc, #152]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0ee:	4a25      	ldr	r2, [pc, #148]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0f0:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 800f0f4:	4413      	add	r3, r2
 800f0f6:	1cd8      	adds	r0, r3, #3
 800f0f8:	4b22      	ldr	r3, [pc, #136]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0fc:	1cd9      	adds	r1, r3, #3
 800f0fe:	4b21      	ldr	r3, [pc, #132]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f102:	881b      	ldrh	r3, [r3, #0]
 800f104:	461a      	mov	r2, r3
 800f106:	f009 fe76 	bl	8018df6 <memcpy>
                gIsoDep.APDURxPos += *gIsoDep.APDUParam.rxLen;
 800f10a:	4b1e      	ldr	r3, [pc, #120]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f10c:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800f110:	4b1c      	ldr	r3, [pc, #112]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f114:	881b      	ldrh	r3, [r3, #0]
 800f116:	4413      	add	r3, r2
 800f118:	b29a      	uxth	r2, r3
 800f11a:	4b1a      	ldr	r3, [pc, #104]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f11c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
            }
             
            /* APDU TxRx is done */
            break;
 800f120:	e023      	b.n	800f16a <rfalIsoDepGetApduTransceiveStatus+0x12a>
         
        /*******************************************************************************/
        case ERR_AGAIN:
            
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 800f122:	4b18      	ldr	r3, [pc, #96]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f126:	881b      	ldrh	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d01a      	beq.n	800f162 <rfalIsoDepGetApduTransceiveStatus+0x122>
            {
                /* Copy chained packet from tmp buffer to APDU buffer */
                ST_MEMCPY( &gIsoDep.APDUParam.rxBuf->apdu[gIsoDep.APDURxPos], gIsoDep.APDUParam.tmpBuf->inf, *gIsoDep.APDUParam.rxLen );
 800f12c:	4b15      	ldr	r3, [pc, #84]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f12e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f130:	4a14      	ldr	r2, [pc, #80]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f132:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 800f136:	4413      	add	r3, r2
 800f138:	1cd8      	adds	r0, r3, #3
 800f13a:	4b12      	ldr	r3, [pc, #72]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f13c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f13e:	1cd9      	adds	r1, r3, #3
 800f140:	4b10      	ldr	r3, [pc, #64]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f144:	881b      	ldrh	r3, [r3, #0]
 800f146:	461a      	mov	r2, r3
 800f148:	f009 fe55 	bl	8018df6 <memcpy>
                gIsoDep.APDURxPos += *gIsoDep.APDUParam.rxLen;
 800f14c:	4b0d      	ldr	r3, [pc, #52]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f14e:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800f152:	4b0c      	ldr	r3, [pc, #48]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f156:	881b      	ldrh	r3, [r3, #0]
 800f158:	4413      	add	r3, r2
 800f15a:	b29a      	uxth	r2, r3
 800f15c:	4b09      	ldr	r3, [pc, #36]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f15e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
            }
            
            /* Wait for next I-Block */
            return ERR_BUSY;
 800f162:	2302      	movs	r3, #2
 800f164:	e009      	b.n	800f17a <rfalIsoDepGetApduTransceiveStatus+0x13a>
        
        /*******************************************************************************/
        default:
            return ret;
 800f166:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f168:	e007      	b.n	800f17a <rfalIsoDepGetApduTransceiveStatus+0x13a>
            break;
 800f16a:	bf00      	nop
    }
    
    *gIsoDep.APDUParam.rxLen = gIsoDep.APDURxPos;
 800f16c:	4b05      	ldr	r3, [pc, #20]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f16e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f170:	4a04      	ldr	r2, [pc, #16]	; (800f184 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f172:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 800f176:	801a      	strh	r2, [r3, #0]
    
    return ERR_NONE;
 800f178:	2300      	movs	r3, #0
 }
 800f17a:	4618      	mov	r0, r3
 800f17c:	372c      	adds	r7, #44	; 0x2c
 800f17e:	46bd      	mov	sp, r7
 800f180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f182:	bf00      	nop
 800f184:	20002f44 	.word	0x20002f44

0800f188 <rfalNfcInitialize>:
#endif /* RFAL_FEATURE_LISTEN_MODE*/


/*******************************************************************************/
ReturnCode rfalNfcInitialize( void )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    gNfcDev.state = RFAL_NFC_STATE_NOTINIT;
 800f18e:	4b0b      	ldr	r3, [pc, #44]	; (800f1bc <rfalNfcInitialize+0x34>)
 800f190:	2200      	movs	r2, #0
 800f192:	701a      	strb	r2, [r3, #0]
    
    rfalAnalogConfigInitialize();              /* Initialize RFAL's Analog Configs */
 800f194:	f7fd ff90 	bl	800d0b8 <rfalAnalogConfigInitialize>
    EXIT_ON_ERR( err, rfalInitialize() );      /* Initialize RFAL */
 800f198:	f006 f844 	bl	8015224 <rfalInitialize>
 800f19c:	4603      	mov	r3, r0
 800f19e:	80fb      	strh	r3, [r7, #6]
 800f1a0:	88fb      	ldrh	r3, [r7, #6]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d001      	beq.n	800f1aa <rfalNfcInitialize+0x22>
 800f1a6:	88fb      	ldrh	r3, [r7, #6]
 800f1a8:	e003      	b.n	800f1b2 <rfalNfcInitialize+0x2a>

    gNfcDev.state = RFAL_NFC_STATE_IDLE;         /* Go to initialized */
 800f1aa:	4b04      	ldr	r3, [pc, #16]	; (800f1bc <rfalNfcInitialize+0x34>)
 800f1ac:	2201      	movs	r2, #1
 800f1ae:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 800f1b0:	2300      	movs	r3, #0
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3708      	adds	r7, #8
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	20002fcc 	.word	0x20002fcc

0800f1c0 <rfalNfcDiscover>:

/*******************************************************************************/
ReturnCode rfalNfcDiscover( const rfalNfcDiscoverParam *disParams )
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
    /* Check if initialization has been performed */
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 800f1c8:	4b42      	ldr	r3, [pc, #264]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	2b01      	cmp	r3, #1
 800f1ce:	d001      	beq.n	800f1d4 <rfalNfcDiscover+0x14>
    {
        return ERR_WRONG_STATE;
 800f1d0:	2321      	movs	r3, #33	; 0x21
 800f1d2:	e07a      	b.n	800f2ca <rfalNfcDiscover+0x10a>
    }
    
    /* Check valid parameters */
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d025      	beq.n	800f226 <rfalNfcDiscover+0x66>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	799b      	ldrb	r3, [r3, #6]
 800f1de:	2b05      	cmp	r3, #5
 800f1e0:	d821      	bhi.n	800f226 <rfalNfcDiscover+0x66>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	799b      	ldrb	r3, [r3, #6]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d01d      	beq.n	800f226 <rfalNfcDiscover+0x66>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	885b      	ldrh	r3, [r3, #2]
 800f1ee:	f003 0304 	and.w	r3, r3, #4
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d007      	beq.n	800f206 <rfalNfcDiscover+0x46>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	79db      	ldrb	r3, [r3, #7]
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d003      	beq.n	800f206 <rfalNfcDiscover+0x46>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	79db      	ldrb	r3, [r3, #7]
 800f202:	2b02      	cmp	r3, #2
 800f204:	d10f      	bne.n	800f226 <rfalNfcDiscover+0x66>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	885b      	ldrh	r3, [r3, #2]
 800f20a:	f003 0310 	and.w	r3, r3, #16
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d004      	beq.n	800f21c <rfalNfcDiscover+0x5c>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f218:	2b02      	cmp	r3, #2
 800f21a:	d804      	bhi.n	800f226 <rfalNfcDiscover+0x66>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f222:	2b30      	cmp	r3, #48	; 0x30
 800f224:	d901      	bls.n	800f22a <rfalNfcDiscover+0x6a>
    {
        return ERR_PARAM;
 800f226:	2307      	movs	r3, #7
 800f228:	e04f      	b.n	800f2ca <rfalNfcDiscover+0x10a>
    {
        return ERR_DISABLED;   /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
    }
    
    /* Initialize context for discovery */
    gNfcDev.activeDev       = NULL;
 800f22a:	4b2a      	ldr	r3, [pc, #168]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f22c:	2200      	movs	r2, #0
 800f22e:	609a      	str	r2, [r3, #8]
    gNfcDev.techsFound      = RFAL_NFC_TECH_NONE;
 800f230:	4b28      	ldr	r3, [pc, #160]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f232:	2200      	movs	r2, #0
 800f234:	805a      	strh	r2, [r3, #2]
    gNfcDev.devCnt          = 0;
 800f236:	4b27      	ldr	r3, [pc, #156]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f238:	2200      	movs	r2, #0
 800f23a:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
    gNfcDev.discRestart     = true;
 800f23e:	4b25      	ldr	r3, [pc, #148]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f240:	2201      	movs	r2, #1
 800f242:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
    gNfcDev.disc            = *disParams;
 800f246:	4b23      	ldr	r3, [pc, #140]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f248:	687a      	ldr	r2, [r7, #4]
 800f24a:	330c      	adds	r3, #12
 800f24c:	4611      	mov	r1, r2
 800f24e:	2284      	movs	r2, #132	; 0x84
 800f250:	4618      	mov	r0, r3
 800f252:	f009 fdd0 	bl	8018df6 <memcpy>
    
    
    /* Calculate Listen Mask */
    gNfcDev.lmMask  = 0U;
 800f256:	4b1f      	ldr	r3, [pc, #124]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f258:	2200      	movs	r2, #0
 800f25a:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_A) != 0U) ? RFAL_LM_MASK_NFCA : 0U);
 800f25e:	4b1d      	ldr	r3, [pc, #116]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f260:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800f264:	4b1b      	ldr	r3, [pc, #108]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f266:	89db      	ldrh	r3, [r3, #14]
 800f268:	089b      	lsrs	r3, r3, #2
 800f26a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f26e:	4313      	orrs	r3, r2
 800f270:	4a18      	ldr	r2, [pc, #96]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f272:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_B) != 0U) ? RFAL_LM_MASK_NFCB : 0U);
 800f276:	4b17      	ldr	r3, [pc, #92]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f278:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800f27c:	4b15      	ldr	r3, [pc, #84]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f27e:	89db      	ldrh	r3, [r3, #14]
 800f280:	089b      	lsrs	r3, r3, #2
 800f282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f286:	4313      	orrs	r3, r2
 800f288:	4a12      	ldr	r2, [pc, #72]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f28a:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_F) != 0U) ? RFAL_LM_MASK_NFCF : 0U);
 800f28e:	4b11      	ldr	r3, [pc, #68]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f290:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800f294:	4b0f      	ldr	r3, [pc, #60]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f296:	89db      	ldrh	r3, [r3, #14]
 800f298:	089b      	lsrs	r3, r3, #2
 800f29a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f29e:	4313      	orrs	r3, r2
 800f2a0:	4a0c      	ldr	r2, [pc, #48]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f2a2:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 800f2a6:	4b0b      	ldr	r3, [pc, #44]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f2a8:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800f2ac:	4b09      	ldr	r3, [pc, #36]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f2ae:	89db      	ldrh	r3, [r3, #14]
 800f2b0:	b21b      	sxth	r3, r3
 800f2b2:	109b      	asrs	r3, r3, #2
 800f2b4:	b21b      	sxth	r3, r3
 800f2b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f2ba:	4313      	orrs	r3, r2
 800f2bc:	4a05      	ldr	r2, [pc, #20]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f2be:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    {
        return ERR_NOTSUPP;
    }
#endif
    
    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;
 800f2c2:	4b04      	ldr	r3, [pc, #16]	; (800f2d4 <rfalNfcDiscover+0x114>)
 800f2c4:	2202      	movs	r2, #2
 800f2c6:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 800f2c8:	2300      	movs	r3, #0
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3708      	adds	r7, #8
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	20002fcc 	.word	0x20002fcc

0800f2d8 <rfalNfcDeactivate>:

/*******************************************************************************/
ReturnCode rfalNfcDeactivate( bool discovery )
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	4603      	mov	r3, r0
 800f2e0:	71fb      	strb	r3, [r7, #7]
    /* Check for valid state */
    if( gNfcDev.state <= RFAL_NFC_STATE_IDLE )
 800f2e2:	4b0d      	ldr	r3, [pc, #52]	; (800f318 <rfalNfcDeactivate+0x40>)
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d801      	bhi.n	800f2ee <rfalNfcDeactivate+0x16>
    {
        return ERR_WRONG_STATE;
 800f2ea:	2321      	movs	r3, #33	; 0x21
 800f2ec:	e010      	b.n	800f310 <rfalNfcDeactivate+0x38>
    }
    
    /* Check if discovery is to continue afterwards */
    if( discovery == true )
 800f2ee:	79fb      	ldrb	r3, [r7, #7]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d007      	beq.n	800f304 <rfalNfcDeactivate+0x2c>
    {
        /* If so let the state machine continue*/
        gNfcDev.discRestart = discovery;
 800f2f4:	4a08      	ldr	r2, [pc, #32]	; (800f318 <rfalNfcDeactivate+0x40>)
 800f2f6:	79fb      	ldrb	r3, [r7, #7]
 800f2f8:	f882 32f2 	strb.w	r3, [r2, #754]	; 0x2f2
        gNfcDev.state       = RFAL_NFC_STATE_DEACTIVATION;
 800f2fc:	4b06      	ldr	r3, [pc, #24]	; (800f318 <rfalNfcDeactivate+0x40>)
 800f2fe:	2222      	movs	r2, #34	; 0x22
 800f300:	701a      	strb	r2, [r3, #0]
 800f302:	e004      	b.n	800f30e <rfalNfcDeactivate+0x36>
    }
    else
    {
        /* Otherwise deactivate immediately and go to IDLE */
        rfalNfcDeactivation();
 800f304:	f001 fcba 	bl	8010c7c <rfalNfcDeactivation>
        gNfcDev.state = RFAL_NFC_STATE_IDLE;
 800f308:	4b03      	ldr	r3, [pc, #12]	; (800f318 <rfalNfcDeactivate+0x40>)
 800f30a:	2201      	movs	r2, #1
 800f30c:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 800f30e:	2300      	movs	r3, #0
}
 800f310:	4618      	mov	r0, r3
 800f312:	3708      	adds	r7, #8
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}
 800f318:	20002fcc 	.word	0x20002fcc

0800f31c <rfalNfcGetState>:
    return ERR_NONE;
}

/*******************************************************************************/
rfalNfcState rfalNfcGetState( void )
{
 800f31c:	b480      	push	{r7}
 800f31e:	af00      	add	r7, sp, #0
    return gNfcDev.state;
 800f320:	4b02      	ldr	r3, [pc, #8]	; (800f32c <rfalNfcGetState+0x10>)
 800f322:	781b      	ldrb	r3, [r3, #0]
}
 800f324:	4618      	mov	r0, r3
 800f326:	46bd      	mov	sp, r7
 800f328:	bc80      	pop	{r7}
 800f32a:	4770      	bx	lr
 800f32c:	20002fcc 	.word	0x20002fcc

0800f330 <rfalNfcGetActiveDevice>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcGetActiveDevice( rfalNfcDevice **dev )
{
 800f330:	b480      	push	{r7}
 800f332:	b083      	sub	sp, #12
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
    /* Check for valid state */
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 800f338:	4b0f      	ldr	r3, [pc, #60]	; (800f378 <rfalNfcGetActiveDevice+0x48>)
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	2b1d      	cmp	r3, #29
 800f33e:	d801      	bhi.n	800f344 <rfalNfcGetActiveDevice+0x14>
    {
        return ERR_WRONG_STATE;
 800f340:	2321      	movs	r3, #33	; 0x21
 800f342:	e014      	b.n	800f36e <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check valid parameter */
    if( dev == NULL )
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d101      	bne.n	800f34e <rfalNfcGetActiveDevice+0x1e>
    {
        return ERR_PARAM;
 800f34a:	2307      	movs	r3, #7
 800f34c:	e00f      	b.n	800f36e <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check for valid state */
    if( (gNfcDev.devCnt == 0U) || (gNfcDev.activeDev == NULL)  )
 800f34e:	4b0a      	ldr	r3, [pc, #40]	; (800f378 <rfalNfcGetActiveDevice+0x48>)
 800f350:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800f354:	2b00      	cmp	r3, #0
 800f356:	d003      	beq.n	800f360 <rfalNfcGetActiveDevice+0x30>
 800f358:	4b07      	ldr	r3, [pc, #28]	; (800f378 <rfalNfcGetActiveDevice+0x48>)
 800f35a:	689b      	ldr	r3, [r3, #8]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d101      	bne.n	800f364 <rfalNfcGetActiveDevice+0x34>
    {
        return ERR_REQUEST;
 800f360:	2305      	movs	r3, #5
 800f362:	e004      	b.n	800f36e <rfalNfcGetActiveDevice+0x3e>
    }
    
    *dev = gNfcDev.activeDev;
 800f364:	4b04      	ldr	r3, [pc, #16]	; (800f378 <rfalNfcGetActiveDevice+0x48>)
 800f366:	689a      	ldr	r2, [r3, #8]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	601a      	str	r2, [r3, #0]
    return ERR_NONE;
 800f36c:	2300      	movs	r3, #0
}
 800f36e:	4618      	mov	r0, r3
 800f370:	370c      	adds	r7, #12
 800f372:	46bd      	mov	sp, r7
 800f374:	bc80      	pop	{r7}
 800f376:	4770      	bx	lr
 800f378:	20002fcc 	.word	0x20002fcc

0800f37c <rfalNfcWorker>:

/*******************************************************************************/
void rfalNfcWorker( void )
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b086      	sub	sp, #24
 800f380:	af04      	add	r7, sp, #16
    ReturnCode err;
   
    rfalWorker();                                                                     /* Execute RFAL process  */
 800f382:	f006 fe85 	bl	8016090 <rfalWorker>
    
    switch( gNfcDev.state )
 800f386:	4bae      	ldr	r3, [pc, #696]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	2b22      	cmp	r3, #34	; 0x22
 800f38c:	f200 81b6 	bhi.w	800f6fc <rfalNfcWorker+0x380>
 800f390:	a201      	add	r2, pc, #4	; (adr r2, 800f398 <rfalNfcWorker+0x1c>)
 800f392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f396:	bf00      	nop
 800f398:	0800f6fd 	.word	0x0800f6fd
 800f39c:	0800f6fd 	.word	0x0800f6fd
 800f3a0:	0800f425 	.word	0x0800f425
 800f3a4:	0800f493 	.word	0x0800f493
 800f3a8:	0800f6fd 	.word	0x0800f6fd
 800f3ac:	0800f6fd 	.word	0x0800f6fd
 800f3b0:	0800f6fd 	.word	0x0800f6fd
 800f3b4:	0800f6fd 	.word	0x0800f6fd
 800f3b8:	0800f6fd 	.word	0x0800f6fd
 800f3bc:	0800f6fd 	.word	0x0800f6fd
 800f3c0:	0800f4c1 	.word	0x0800f4c1
 800f3c4:	0800f50d 	.word	0x0800f50d
 800f3c8:	0800f6fd 	.word	0x0800f6fd
 800f3cc:	0800f569 	.word	0x0800f569
 800f3d0:	0800f6fd 	.word	0x0800f6fd
 800f3d4:	0800f6fd 	.word	0x0800f6fd
 800f3d8:	0800f6fd 	.word	0x0800f6fd
 800f3dc:	0800f6fd 	.word	0x0800f6fd
 800f3e0:	0800f6fd 	.word	0x0800f6fd
 800f3e4:	0800f6fd 	.word	0x0800f6fd
 800f3e8:	0800f621 	.word	0x0800f621
 800f3ec:	0800f677 	.word	0x0800f677
 800f3f0:	0800f6ab 	.word	0x0800f6ab
 800f3f4:	0800f6ab 	.word	0x0800f6ab
 800f3f8:	0800f6fd 	.word	0x0800f6fd
 800f3fc:	0800f6fd 	.word	0x0800f6fd
 800f400:	0800f6fd 	.word	0x0800f6fd
 800f404:	0800f6fd 	.word	0x0800f6fd
 800f408:	0800f6fd 	.word	0x0800f6fd
 800f40c:	0800f6fd 	.word	0x0800f6fd
 800f410:	0800f6fd 	.word	0x0800f6fd
 800f414:	0800f59f 	.word	0x0800f59f
 800f418:	0800f6fd 	.word	0x0800f6fd
 800f41c:	0800f6fd 	.word	0x0800f6fd
 800f420:	0800f5f1 	.word	0x0800f5f1
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_START_DISCOVERY:
        
            /* Initialize context for discovery cycle */
            gNfcDev.devCnt      = 0;
 800f424:	4b86      	ldr	r3, [pc, #536]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f426:	2200      	movs	r2, #0
 800f428:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            gNfcDev.selDevIdx   = 0;
 800f42c:	4b84      	ldr	r3, [pc, #528]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f42e:	2200      	movs	r2, #0
 800f430:	71da      	strb	r2, [r3, #7]
            gNfcDev.techsFound  = RFAL_NFC_TECH_NONE;
 800f432:	4b83      	ldr	r3, [pc, #524]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f434:	2200      	movs	r2, #0
 800f436:	805a      	strh	r2, [r3, #2]
            gNfcDev.techs2do    = gNfcDev.disc.techs2Find;
 800f438:	4b81      	ldr	r3, [pc, #516]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f43a:	89da      	ldrh	r2, [r3, #14]
 800f43c:	4b80      	ldr	r3, [pc, #512]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f43e:	809a      	strh	r2, [r3, #4]
            gNfcDev.state       = RFAL_NFC_STATE_POLL_TECHDETECT;
 800f440:	4b7f      	ldr	r3, [pc, #508]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f442:	220a      	movs	r2, #10
 800f444:	701a      	strb	r2, [r3, #0]
        
        #if RFAL_FEATURE_WAKEUP_MODE    
            /* Check if Low power Wake-Up is to be performed */
            if( gNfcDev.disc.wakeupEnabled )
 800f446:	4b7e      	ldr	r3, [pc, #504]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f448:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	f000 8157 	beq.w	800f700 <rfalNfcWorker+0x384>
            {
                /* Initialize Low power Wake-up mode and wait */
                err = rfalWakeUpModeStart( (gNfcDev.disc.wakeupConfigDefault ? NULL : &gNfcDev.disc.wakeupConfig) );
 800f452:	4b7b      	ldr	r3, [pc, #492]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f454:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d001      	beq.n	800f460 <rfalNfcWorker+0xe4>
 800f45c:	2300      	movs	r3, #0
 800f45e:	e000      	b.n	800f462 <rfalNfcWorker+0xe6>
 800f460:	4b78      	ldr	r3, [pc, #480]	; (800f644 <rfalNfcWorker+0x2c8>)
 800f462:	4618      	mov	r0, r3
 800f464:	f008 fb60 	bl	8017b28 <rfalWakeUpModeStart>
 800f468:	4603      	mov	r3, r0
 800f46a:	80fb      	strh	r3, [r7, #6]
                if( err == ERR_NONE )
 800f46c:	88fb      	ldrh	r3, [r7, #6]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	f040 8146 	bne.w	800f700 <rfalNfcWorker+0x384>
                {
                    gNfcDev.state = RFAL_NFC_STATE_WAKEUP_MODE;
 800f474:	4b72      	ldr	r3, [pc, #456]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f476:	2203      	movs	r2, #3
 800f478:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller that WU was started */
 800f47a:	4b71      	ldr	r3, [pc, #452]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f47c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f47e:	2b00      	cmp	r3, #0
 800f480:	f000 813e 	beq.w	800f700 <rfalNfcWorker+0x384>
 800f484:	4b6e      	ldr	r3, [pc, #440]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f488:	4a6d      	ldr	r2, [pc, #436]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f48a:	7812      	ldrb	r2, [r2, #0]
 800f48c:	4610      	mov	r0, r2
 800f48e:	4798      	blx	r3
                }
            }
        #endif /* RFAL_FEATURE_WAKEUP_MODE */
            break;
 800f490:	e136      	b.n	800f700 <rfalNfcWorker+0x384>
        /*******************************************************************************/
        case RFAL_NFC_STATE_WAKEUP_MODE:
            
    #if RFAL_FEATURE_WAKEUP_MODE
            /* Check if the Wake-up mode has woke */
            if( rfalWakeUpModeHasWoke() )
 800f492:	f008 fd17 	bl	8017ec4 <rfalWakeUpModeHasWoke>
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	f000 8133 	beq.w	800f704 <rfalNfcWorker+0x388>
            {
                rfalWakeUpModeStop();                                                 /* Disable Wake-up mode           */
 800f49e:	f008 fd5f 	bl	8017f60 <rfalWakeUpModeStop>
                gNfcDev.state = RFAL_NFC_STATE_POLL_TECHDETECT;                       /* Go to Technology detection     */
 800f4a2:	4b67      	ldr	r3, [pc, #412]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f4a4:	220a      	movs	r2, #10
 800f4a6:	701a      	strb	r2, [r3, #0]
                
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller that WU has woke */
 800f4a8:	4b65      	ldr	r3, [pc, #404]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f4aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	f000 8129 	beq.w	800f704 <rfalNfcWorker+0x388>
 800f4b2:	4b63      	ldr	r3, [pc, #396]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f4b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4b6:	4a62      	ldr	r2, [pc, #392]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f4b8:	7812      	ldrb	r2, [r2, #0]
 800f4ba:	4610      	mov	r0, r2
 800f4bc:	4798      	blx	r3
            }
    #endif /* RFAL_FEATURE_WAKEUP_MODE */

            break;
 800f4be:	e121      	b.n	800f704 <rfalNfcWorker+0x388>
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_TECHDETECT:
            
            /* Start total duration timer */
            gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 800f4c0:	4b5f      	ldr	r3, [pc, #380]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f4c2:	8a1b      	ldrh	r3, [r3, #16]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7f4 febd 	bl	8004244 <timerCalculateTimer>
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	4b5c      	ldr	r3, [pc, #368]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f4ce:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
        
            err = rfalNfcPollTechDetetection();                                       /* Perform Technology Detection                         */
 800f4d2:	f000 facf 	bl	800fa74 <rfalNfcPollTechDetetection>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 800f4da:	88fb      	ldrh	r3, [r7, #6]
 800f4dc:	2b02      	cmp	r3, #2
 800f4de:	f000 8113 	beq.w	800f708 <rfalNfcWorker+0x38c>
            {
                if( ( err != ERR_NONE) || (gNfcDev.techsFound == RFAL_NFC_TECH_NONE) )/* Check if any error occurred or no techs were found   */
 800f4e2:	88fb      	ldrh	r3, [r7, #6]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d103      	bne.n	800f4f0 <rfalNfcWorker+0x174>
 800f4e8:	4b55      	ldr	r3, [pc, #340]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f4ea:	885b      	ldrh	r3, [r3, #2]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d105      	bne.n	800f4fc <rfalNfcWorker+0x180>
                {
                    rfalFieldOff();
 800f4f0:	f006 fb9c 	bl	8015c2c <rfalFieldOff>
                    gNfcDev.state = RFAL_NFC_STATE_LISTEN_TECHDETECT;                 /* Nothing found as poller, go to listener */
 800f4f4:	4b52      	ldr	r3, [pc, #328]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f4f6:	2214      	movs	r2, #20
 800f4f8:	701a      	strb	r2, [r3, #0]
                    break;
 800f4fa:	e114      	b.n	800f726 <rfalNfcWorker+0x3aa>
                }
                
                gNfcDev.techs2do = gNfcDev.techsFound;                                /* Store the found technologies for collision resolution */
 800f4fc:	4b50      	ldr	r3, [pc, #320]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f4fe:	885a      	ldrh	r2, [r3, #2]
 800f500:	4b4f      	ldr	r3, [pc, #316]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f502:	809a      	strh	r2, [r3, #4]
                gNfcDev.state    = RFAL_NFC_STATE_POLL_COLAVOIDANCE;                  /* One or more devices found, go to Collision Avoidance  */
 800f504:	4b4e      	ldr	r3, [pc, #312]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f506:	220b      	movs	r2, #11
 800f508:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f50a:	e0fd      	b.n	800f708 <rfalNfcWorker+0x38c>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_COLAVOIDANCE:
        
            err = rfalNfcPollCollResolution();                                        /* Resolve any eventual collision                       */
 800f50c:	f000 fc40 	bl	800fd90 <rfalNfcPollCollResolution>
 800f510:	4603      	mov	r3, r0
 800f512:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 800f514:	88fb      	ldrh	r3, [r7, #6]
 800f516:	2b02      	cmp	r3, #2
 800f518:	f000 80f8 	beq.w	800f70c <rfalNfcWorker+0x390>
            {
                if( (err != ERR_NONE) || (gNfcDev.devCnt == 0U) )                     /* Check if any error occurred or no devices were found */
 800f51c:	88fb      	ldrh	r3, [r7, #6]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d104      	bne.n	800f52c <rfalNfcWorker+0x1b0>
 800f522:	4b47      	ldr	r3, [pc, #284]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f524:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d103      	bne.n	800f534 <rfalNfcWorker+0x1b8>
                {
                    gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;
 800f52c:	4b44      	ldr	r3, [pc, #272]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f52e:	2222      	movs	r2, #34	; 0x22
 800f530:	701a      	strb	r2, [r3, #0]
                    break;                                                            /* Unable to retrieve any device, restart loop          */
 800f532:	e0f8      	b.n	800f726 <rfalNfcWorker+0x3aa>
                }
                
                /* Check if more than one device has been found */
                if( gNfcDev.devCnt > 1U )
 800f534:	4b42      	ldr	r3, [pc, #264]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f536:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d90d      	bls.n	800f55a <rfalNfcWorker+0x1de>
                {
                    /* If more than one device was found inform upper layer to choose which one to activate */
                    if( gNfcDev.disc.notifyCb != NULL )
 800f53e:	4b40      	ldr	r3, [pc, #256]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f542:	2b00      	cmp	r3, #0
 800f544:	d009      	beq.n	800f55a <rfalNfcWorker+0x1de>
                    {
                        gNfcDev.state = RFAL_NFC_STATE_POLL_SELECT;
 800f546:	4b3e      	ldr	r3, [pc, #248]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f548:	220c      	movs	r2, #12
 800f54a:	701a      	strb	r2, [r3, #0]
                        gNfcDev.disc.notifyCb( gNfcDev.state );
 800f54c:	4b3c      	ldr	r3, [pc, #240]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f54e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f550:	4a3b      	ldr	r2, [pc, #236]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f552:	7812      	ldrb	r2, [r2, #0]
 800f554:	4610      	mov	r0, r2
 800f556:	4798      	blx	r3
                        break;
 800f558:	e0e5      	b.n	800f726 <rfalNfcWorker+0x3aa>
                    }
                }
                
                /* If only one device or no callback has been set, activate the first device found */
                gNfcDev.selDevIdx = 0U;
 800f55a:	4b39      	ldr	r3, [pc, #228]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	71da      	strb	r2, [r3, #7]
                gNfcDev.state = RFAL_NFC_STATE_POLL_ACTIVATION;
 800f560:	4b37      	ldr	r3, [pc, #220]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f562:	220d      	movs	r2, #13
 800f564:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f566:	e0d1      	b.n	800f70c <rfalNfcWorker+0x390>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_ACTIVATION:
            
            if( rfalNfcPollActivation( gNfcDev.selDevIdx ) != ERR_NONE )              /* Activate selected device           */
 800f568:	4b35      	ldr	r3, [pc, #212]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f56a:	79db      	ldrb	r3, [r3, #7]
 800f56c:	4618      	mov	r0, r3
 800f56e:	f000 fee1 	bl	8010334 <rfalNfcPollActivation>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d003      	beq.n	800f580 <rfalNfcWorker+0x204>
            {
                gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;                          /* If Activation failed, restart loop */
 800f578:	4b31      	ldr	r3, [pc, #196]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f57a:	2222      	movs	r2, #34	; 0x22
 800f57c:	701a      	strb	r2, [r3, #0]
                break;
 800f57e:	e0d2      	b.n	800f726 <rfalNfcWorker+0x3aa>
            }
            
            gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                                 /* Device has been properly activated */
 800f580:	4b2f      	ldr	r3, [pc, #188]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f582:	221e      	movs	r2, #30
 800f584:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Inform upper layer that a device has been activated */
 800f586:	4b2e      	ldr	r3, [pc, #184]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	f000 80c0 	beq.w	800f710 <rfalNfcWorker+0x394>
 800f590:	4b2b      	ldr	r3, [pc, #172]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f594:	4a2a      	ldr	r2, [pc, #168]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f596:	7812      	ldrb	r2, [r2, #0]
 800f598:	4610      	mov	r0, r2
 800f59a:	4798      	blx	r3
            break;
 800f59c:	e0b8      	b.n	800f710 <rfalNfcWorker+0x394>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DATAEXCHANGE:

            rfalNfcDataExchangeGetStatus();                                           /* Run the internal state machine */
 800f59e:	f000 f9e9 	bl	800f974 <rfalNfcDataExchangeGetStatus>
            
            if( gNfcDev.dataExErr != ERR_BUSY )                                       /* If Dataexchange has terminated */
 800f5a2:	4b27      	ldr	r3, [pc, #156]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f5a4:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800f5a8:	2b02      	cmp	r3, #2
 800f5aa:	d00c      	beq.n	800f5c6 <rfalNfcWorker+0x24a>
            {
                gNfcDev.state = RFAL_NFC_STATE_DATAEXCHANGE_DONE;                     /* Go to done state               */
 800f5ac:	4b24      	ldr	r3, [pc, #144]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f5ae:	2221      	movs	r2, #33	; 0x21
 800f5b0:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 800f5b2:	4b23      	ldr	r3, [pc, #140]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f5b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d005      	beq.n	800f5c6 <rfalNfcWorker+0x24a>
 800f5ba:	4b21      	ldr	r3, [pc, #132]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f5bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5be:	4a20      	ldr	r2, [pc, #128]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f5c0:	7812      	ldrb	r2, [r2, #0]
 800f5c2:	4610      	mov	r0, r2
 800f5c4:	4798      	blx	r3
            }
            if( gNfcDev.dataExErr == ERR_SLEEP_REQ )                                  /* Check if Listen mode has to go to Sleep */
 800f5c6:	4b1e      	ldr	r3, [pc, #120]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f5c8:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800f5cc:	2b20      	cmp	r3, #32
 800f5ce:	f040 80a1 	bne.w	800f714 <rfalNfcWorker+0x398>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_SLEEP;                          /* Go to Listen Sleep state       */
 800f5d2:	4b1b      	ldr	r3, [pc, #108]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f5d4:	2217      	movs	r2, #23
 800f5d6:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 800f5d8:	4b19      	ldr	r3, [pc, #100]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f5da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	f000 8099 	beq.w	800f714 <rfalNfcWorker+0x398>
 800f5e2:	4b17      	ldr	r3, [pc, #92]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f5e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5e6:	4a16      	ldr	r2, [pc, #88]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f5e8:	7812      	ldrb	r2, [r2, #0]
 800f5ea:	4610      	mov	r0, r2
 800f5ec:	4798      	blx	r3
            }
            break;
 800f5ee:	e091      	b.n	800f714 <rfalNfcWorker+0x398>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DEACTIVATION:
            
            rfalNfcDeactivation();                                                    /* Deactivate current device */
 800f5f0:	f001 fb44 	bl	8010c7c <rfalNfcDeactivation>
        
            gNfcDev.state = ((gNfcDev.discRestart) ? RFAL_NFC_STATE_START_DISCOVERY : RFAL_NFC_STATE_IDLE);
 800f5f4:	4b12      	ldr	r3, [pc, #72]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f5f6:	f893 32f2 	ldrb.w	r3, [r3, #754]	; 0x2f2
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d001      	beq.n	800f602 <rfalNfcWorker+0x286>
 800f5fe:	2202      	movs	r2, #2
 800f600:	e000      	b.n	800f604 <rfalNfcWorker+0x288>
 800f602:	2201      	movs	r2, #1
 800f604:	4b0e      	ldr	r3, [pc, #56]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f606:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Notify caller             */
 800f608:	4b0d      	ldr	r3, [pc, #52]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f60a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	f000 8083 	beq.w	800f718 <rfalNfcWorker+0x39c>
 800f612:	4b0b      	ldr	r3, [pc, #44]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f616:	4a0a      	ldr	r2, [pc, #40]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f618:	7812      	ldrb	r2, [r2, #0]
 800f61a:	4610      	mov	r0, r2
 800f61c:	4798      	blx	r3
            break;
 800f61e:	e07b      	b.n	800f718 <rfalNfcWorker+0x39c>
        
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_TECHDETECT:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )
 800f620:	4b07      	ldr	r3, [pc, #28]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f622:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800f626:	4618      	mov	r0, r3
 800f628:	f7f4 fe1a 	bl	8004260 <timerIsExpired>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d00a      	beq.n	800f648 <rfalNfcWorker+0x2cc>
            {
                #if RFAL_FEATURE_LISTEN_MODE
                    rfalListenStop();
 800f632:	f008 f95d 	bl	80178f0 <rfalListenStop>
                #else
                    rfalFieldOff();
                #endif /* RFAL_FEATURE_LISTEN_MODE */
                
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 800f636:	4b02      	ldr	r3, [pc, #8]	; (800f640 <rfalNfcWorker+0x2c4>)
 800f638:	2202      	movs	r2, #2
 800f63a:	701a      	strb	r2, [r3, #0]
                break;
 800f63c:	e073      	b.n	800f726 <rfalNfcWorker+0x3aa>
 800f63e:	bf00      	nop
 800f640:	20002fcc 	.word	0x20002fcc
 800f644:	20003046 	.word	0x20003046
            }

    #if RFAL_FEATURE_LISTEN_MODE
            err = rfalListenStart( gNfcDev.lmMask, &gNfcDev.disc.lmConfigPA, NULL, &gNfcDev.disc.lmConfigPF, (uint8_t*)&gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen );
 800f648:	4b38      	ldr	r3, [pc, #224]	; (800f72c <rfalNfcWorker+0x3b0>)
 800f64a:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800f64e:	4b38      	ldr	r3, [pc, #224]	; (800f730 <rfalNfcWorker+0x3b4>)
 800f650:	9302      	str	r3, [sp, #8]
 800f652:	23ff      	movs	r3, #255	; 0xff
 800f654:	9301      	str	r3, [sp, #4]
 800f656:	4b37      	ldr	r3, [pc, #220]	; (800f734 <rfalNfcWorker+0x3b8>)
 800f658:	9300      	str	r3, [sp, #0]
 800f65a:	4b37      	ldr	r3, [pc, #220]	; (800f738 <rfalNfcWorker+0x3bc>)
 800f65c:	2200      	movs	r2, #0
 800f65e:	4937      	ldr	r1, [pc, #220]	; (800f73c <rfalNfcWorker+0x3c0>)
 800f660:	f007 ffe0 	bl	8017624 <rfalListenStart>
 800f664:	4603      	mov	r3, r0
 800f666:	80fb      	strh	r3, [r7, #6]
            if( err == ERR_NONE )
 800f668:	88fb      	ldrh	r3, [r7, #6]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d156      	bne.n	800f71c <rfalNfcWorker+0x3a0>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_COLAVOIDANCE;                   /* Wait for listen mode to be activated */
 800f66e:	4b2f      	ldr	r3, [pc, #188]	; (800f72c <rfalNfcWorker+0x3b0>)
 800f670:	2215      	movs	r2, #21
 800f672:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f674:	e052      	b.n	800f71c <rfalNfcWorker+0x3a0>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_COLAVOIDANCE:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )                           /* Check if the total duration has been reached */
 800f676:	4b2d      	ldr	r3, [pc, #180]	; (800f72c <rfalNfcWorker+0x3b0>)
 800f678:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7f4 fdef 	bl	8004260 <timerIsExpired>
 800f682:	4603      	mov	r3, r0
 800f684:	2b00      	cmp	r3, #0
 800f686:	d005      	beq.n	800f694 <rfalNfcWorker+0x318>
            {
                rfalListenStop();
 800f688:	f008 f932 	bl	80178f0 <rfalListenStop>
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 800f68c:	4b27      	ldr	r3, [pc, #156]	; (800f72c <rfalNfcWorker+0x3b0>)
 800f68e:	2202      	movs	r2, #2
 800f690:	701a      	strb	r2, [r3, #0]
                break;
 800f692:	e048      	b.n	800f726 <rfalNfcWorker+0x3aa>
            }
            
            /* Check for external field */
            if( rfalListenGetState( NULL, NULL ) >= RFAL_LM_STATE_IDLE )
 800f694:	2100      	movs	r1, #0
 800f696:	2000      	movs	r0, #0
 800f698:	f008 f956 	bl	8017948 <rfalListenGetState>
 800f69c:	4603      	mov	r3, r0
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d93e      	bls.n	800f720 <rfalNfcWorker+0x3a4>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_ACTIVATION;                     /* Wait for listen mode to be activated */
 800f6a2:	4b22      	ldr	r3, [pc, #136]	; (800f72c <rfalNfcWorker+0x3b0>)
 800f6a4:	2216      	movs	r2, #22
 800f6a6:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f6a8:	e03a      	b.n	800f720 <rfalNfcWorker+0x3a4>
        
        /*******************************************************************************/    
        case RFAL_NFC_STATE_LISTEN_ACTIVATION:
        case RFAL_NFC_STATE_LISTEN_SLEEP:
            
            err = rfalNfcListenActivation();
 800f6aa:	f001 f8ef 	bl	801088c <rfalNfcListenActivation>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )
 800f6b2:	88fb      	ldrh	r3, [r7, #6]
 800f6b4:	2b02      	cmp	r3, #2
 800f6b6:	d035      	beq.n	800f724 <rfalNfcWorker+0x3a8>
            {
                if( err == ERR_NONE )
 800f6b8:	88fb      	ldrh	r3, [r7, #6]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d118      	bne.n	800f6f0 <rfalNfcWorker+0x374>
                {
                    gNfcDev.activeDev = gNfcDev.devList;                              /* Assign the active device to be used further on */
 800f6be:	4b1b      	ldr	r3, [pc, #108]	; (800f72c <rfalNfcWorker+0x3b0>)
 800f6c0:	4a1f      	ldr	r2, [pc, #124]	; (800f740 <rfalNfcWorker+0x3c4>)
 800f6c2:	609a      	str	r2, [r3, #8]
                    gNfcDev.devCnt++;
 800f6c4:	4b19      	ldr	r3, [pc, #100]	; (800f72c <rfalNfcWorker+0x3b0>)
 800f6c6:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	b2da      	uxtb	r2, r3
 800f6ce:	4b17      	ldr	r3, [pc, #92]	; (800f72c <rfalNfcWorker+0x3b0>)
 800f6d0:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
                    
                    gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                         /* Device has been properly activated */
 800f6d4:	4b15      	ldr	r3, [pc, #84]	; (800f72c <rfalNfcWorker+0x3b0>)
 800f6d6:	221e      	movs	r2, #30
 800f6d8:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Inform upper layer that a device has been activated */
 800f6da:	4b14      	ldr	r3, [pc, #80]	; (800f72c <rfalNfcWorker+0x3b0>)
 800f6dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d020      	beq.n	800f724 <rfalNfcWorker+0x3a8>
 800f6e2:	4b12      	ldr	r3, [pc, #72]	; (800f72c <rfalNfcWorker+0x3b0>)
 800f6e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6e6:	4a11      	ldr	r2, [pc, #68]	; (800f72c <rfalNfcWorker+0x3b0>)
 800f6e8:	7812      	ldrb	r2, [r2, #0]
 800f6ea:	4610      	mov	r0, r2
 800f6ec:	4798      	blx	r3
                    rfalListenStop();
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
                }
            }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
            break;
 800f6ee:	e019      	b.n	800f724 <rfalNfcWorker+0x3a8>
                    rfalListenStop();
 800f6f0:	f008 f8fe 	bl	80178f0 <rfalListenStop>
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
 800f6f4:	4b0d      	ldr	r3, [pc, #52]	; (800f72c <rfalNfcWorker+0x3b0>)
 800f6f6:	2202      	movs	r2, #2
 800f6f8:	701a      	strb	r2, [r3, #0]
            break;
 800f6fa:	e013      	b.n	800f724 <rfalNfcWorker+0x3a8>
        /*******************************************************************************/
        case RFAL_NFC_STATE_ACTIVATED:
        case RFAL_NFC_STATE_POLL_SELECT:
        case RFAL_NFC_STATE_DATAEXCHANGE_DONE:
        default:
            return;
 800f6fc:	bf00      	nop
 800f6fe:	e012      	b.n	800f726 <rfalNfcWorker+0x3aa>
            break;
 800f700:	bf00      	nop
 800f702:	e010      	b.n	800f726 <rfalNfcWorker+0x3aa>
            break;
 800f704:	bf00      	nop
 800f706:	e00e      	b.n	800f726 <rfalNfcWorker+0x3aa>
            break;
 800f708:	bf00      	nop
 800f70a:	e00c      	b.n	800f726 <rfalNfcWorker+0x3aa>
            break;
 800f70c:	bf00      	nop
 800f70e:	e00a      	b.n	800f726 <rfalNfcWorker+0x3aa>
            break;
 800f710:	bf00      	nop
 800f712:	e008      	b.n	800f726 <rfalNfcWorker+0x3aa>
            break;
 800f714:	bf00      	nop
 800f716:	e006      	b.n	800f726 <rfalNfcWorker+0x3aa>
            break;
 800f718:	bf00      	nop
 800f71a:	e004      	b.n	800f726 <rfalNfcWorker+0x3aa>
            break;
 800f71c:	bf00      	nop
 800f71e:	e002      	b.n	800f726 <rfalNfcWorker+0x3aa>
            break;
 800f720:	bf00      	nop
 800f722:	e000      	b.n	800f726 <rfalNfcWorker+0x3aa>
            break;
 800f724:	bf00      	nop
    }
}
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	20002fcc 	.word	0x20002fcc
 800f730:	200034ca 	.word	0x200034ca
 800f734:	200033c7 	.word	0x200033c7
 800f738:	2000302a 	.word	0x2000302a
 800f73c:	2000301c 	.word	0x2000301c
 800f740:	2000305c 	.word	0x2000305c

0800f744 <rfalNfcDataExchangeStart>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeStart( uint8_t *txData, uint16_t txDataLen, uint8_t **rxData, uint16_t **rvdLen, uint32_t fwt )
{
 800f744:	b5b0      	push	{r4, r5, r7, lr}
 800f746:	b09c      	sub	sp, #112	; 0x70
 800f748:	af06      	add	r7, sp, #24
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	607a      	str	r2, [r7, #4]
 800f74e:	603b      	str	r3, [r7, #0]
 800f750:	460b      	mov	r3, r1
 800f752:	817b      	strh	r3, [r7, #10]
    rfalTransceiveContext ctx;
    
    /*******************************************************************************/
    /* The Data Exchange is divided in two different moments, the trigger/Start of *
     *  the transfer followed by the check until its completion                    */
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 800f754:	4b7e      	ldr	r3, [pc, #504]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	2b1d      	cmp	r3, #29
 800f75a:	f240 80f4 	bls.w	800f946 <rfalNfcDataExchangeStart+0x202>
 800f75e:	4b7c      	ldr	r3, [pc, #496]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f760:	689b      	ldr	r3, [r3, #8]
 800f762:	2b00      	cmp	r3, #0
 800f764:	f000 80ef 	beq.w	800f946 <rfalNfcDataExchangeStart+0x202>
        
        /*******************************************************************************/
        /* In Listen mode is the Poller that initiates the communicatation             */
        /* Assign output parameters and rfalNfcDataExchangeGetStatus will return       */
        /* incoming data from Poller/Initiator                                         */
        if( (gNfcDev.state == RFAL_NFC_STATE_ACTIVATED) && rfalNfcIsRemDevPoller( gNfcDev.activeDev->type ) )
 800f768:	4b79      	ldr	r3, [pc, #484]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	2b1e      	cmp	r3, #30
 800f76e:	d124      	bne.n	800f7ba <rfalNfcDataExchangeStart+0x76>
 800f770:	4b77      	ldr	r3, [pc, #476]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f772:	689b      	ldr	r3, [r3, #8]
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	2b09      	cmp	r3, #9
 800f778:	d91f      	bls.n	800f7ba <rfalNfcDataExchangeStart+0x76>
 800f77a:	4b75      	ldr	r3, [pc, #468]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f77c:	689b      	ldr	r3, [r3, #8]
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	2b0f      	cmp	r3, #15
 800f782:	d81a      	bhi.n	800f7ba <rfalNfcDataExchangeStart+0x76>
        {
            if( txDataLen > 0U )
 800f784:	897b      	ldrh	r3, [r7, #10]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d001      	beq.n	800f78e <rfalNfcDataExchangeStart+0x4a>
            {
                return ERR_WRONG_STATE;
 800f78a:	2321      	movs	r3, #33	; 0x21
 800f78c:	e0dc      	b.n	800f948 <rfalNfcDataExchangeStart+0x204>
            }
            
            *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	4a70      	ldr	r2, [pc, #448]	; (800f954 <rfalNfcDataExchangeStart+0x210>)
 800f792:	601a      	str	r2, [r3, #0]
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.inf : 
 800f794:	4b6e      	ldr	r3, [pc, #440]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f796:	689b      	ldr	r3, [r3, #8]
 800f798:	7f5b      	ldrb	r3, [r3, #29]
 800f79a:	2b01      	cmp	r3, #1
 800f79c:	d008      	beq.n	800f7b0 <rfalNfcDataExchangeStart+0x6c>
                                  ((gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_NFCDEP) ? gNfcDev.rxBuf.nfcDepBuf.inf : gNfcDev.rxBuf.rfBuf) );
 800f79e:	4b6c      	ldr	r3, [pc, #432]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f7a0:	689b      	ldr	r3, [r3, #8]
 800f7a2:	7f5b      	ldrb	r3, [r3, #29]
 800f7a4:	2b02      	cmp	r3, #2
 800f7a6:	d101      	bne.n	800f7ac <rfalNfcDataExchangeStart+0x68>
 800f7a8:	4b6b      	ldr	r3, [pc, #428]	; (800f958 <rfalNfcDataExchangeStart+0x214>)
 800f7aa:	e002      	b.n	800f7b2 <rfalNfcDataExchangeStart+0x6e>
 800f7ac:	4b6b      	ldr	r3, [pc, #428]	; (800f95c <rfalNfcDataExchangeStart+0x218>)
 800f7ae:	e000      	b.n	800f7b2 <rfalNfcDataExchangeStart+0x6e>
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.inf : 
 800f7b0:	4b6b      	ldr	r3, [pc, #428]	; (800f960 <rfalNfcDataExchangeStart+0x21c>)
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	6013      	str	r3, [r2, #0]
            return ERR_NONE;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	e0c6      	b.n	800f948 <rfalNfcDataExchangeStart+0x204>
        }
        
        
        /*******************************************************************************/
        switch( gNfcDev.activeDev->rfInterface )                                      /* Check which RF interface shall be used/has been activated */
 800f7ba:	4b65      	ldr	r3, [pc, #404]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f7bc:	689b      	ldr	r3, [r3, #8]
 800f7be:	7f5b      	ldrb	r3, [r3, #29]
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	d025      	beq.n	800f810 <rfalNfcDataExchangeStart+0xcc>
 800f7c4:	2b02      	cmp	r3, #2
 800f7c6:	d061      	beq.n	800f88c <rfalNfcDataExchangeStart+0x148>
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	f040 80aa 	bne.w	800f922 <rfalNfcDataExchangeStart+0x1de>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
    
                rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)txData, txDataLen, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f7d2:	897b      	ldrh	r3, [r7, #10]
 800f7d4:	00db      	lsls	r3, r3, #3
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f7da:	4b60      	ldr	r3, [pc, #384]	; (800f95c <rfalNfcDataExchangeStart+0x218>)
 800f7dc:	643b      	str	r3, [r7, #64]	; 0x40
 800f7de:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 800f7e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f7e6:	4b5b      	ldr	r3, [pc, #364]	; (800f954 <rfalNfcDataExchangeStart+0x210>)
 800f7e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f7ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f7f0:	653b      	str	r3, [r7, #80]	; 0x50
                *rxData = (uint8_t*)gNfcDev.rxBuf.rfBuf;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	4a59      	ldr	r2, [pc, #356]	; (800f95c <rfalNfcDataExchangeStart+0x218>)
 800f7f6:	601a      	str	r2, [r3, #0]
                *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	4a56      	ldr	r2, [pc, #344]	; (800f954 <rfalNfcDataExchangeStart+0x210>)
 800f7fc:	601a      	str	r2, [r3, #0]
                err = rfalStartTransceive( &ctx );
 800f7fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f802:	4618      	mov	r0, r3
 800f804:	f006 fa28 	bl	8015c58 <rfalStartTransceive>
 800f808:	4603      	mov	r3, r0
 800f80a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 800f80e:	e08c      	b.n	800f92a <rfalNfcDataExchangeStart+0x1e6>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
            {
                rfalIsoDepTxRxParam isoDepTxRx;
                
                if( txDataLen > 0U )
 800f810:	897b      	ldrh	r3, [r7, #10]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d005      	beq.n	800f822 <rfalNfcDataExchangeStart+0xde>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.isoDepBuf.inf, txData, txDataLen );
 800f816:	897b      	ldrh	r3, [r7, #10]
 800f818:	461a      	mov	r2, r3
 800f81a:	68f9      	ldr	r1, [r7, #12]
 800f81c:	4851      	ldr	r0, [pc, #324]	; (800f964 <rfalNfcDataExchangeStart+0x220>)
 800f81e:	f009 faea 	bl	8018df6 <memcpy>
                }
                
                isoDepTxRx.DID          = RFAL_ISODEP_NO_DID;
 800f822:	2300      	movs	r3, #0
 800f824:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                isoDepTxRx.ourFSx       = RFAL_ISODEP_FSX_KEEP;
 800f828:	23ff      	movs	r3, #255	; 0xff
 800f82a:	863b      	strh	r3, [r7, #48]	; 0x30
                isoDepTxRx.FSx          = gNfcDev.activeDev->proto.isoDep.info.FSx;
 800f82c:	4b48      	ldr	r3, [pc, #288]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f82e:	689b      	ldr	r3, [r3, #8]
 800f830:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f834:	867b      	strh	r3, [r7, #50]	; 0x32
                isoDepTxRx.dFWT         = gNfcDev.activeDev->proto.isoDep.info.dFWT;
 800f836:	4b46      	ldr	r3, [pc, #280]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f838:	689b      	ldr	r3, [r3, #8]
 800f83a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f83c:	62fb      	str	r3, [r7, #44]	; 0x2c
                isoDepTxRx.FWT          = gNfcDev.activeDev->proto.isoDep.info.FWT;
 800f83e:	4b44      	ldr	r3, [pc, #272]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f840:	689b      	ldr	r3, [r3, #8]
 800f842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f844:	62bb      	str	r3, [r7, #40]	; 0x28
                isoDepTxRx.txBuf        = &gNfcDev.txBuf.isoDepBuf;
 800f846:	4b48      	ldr	r3, [pc, #288]	; (800f968 <rfalNfcDataExchangeStart+0x224>)
 800f848:	617b      	str	r3, [r7, #20]
                isoDepTxRx.txBufLen     = txDataLen;
 800f84a:	897b      	ldrh	r3, [r7, #10]
 800f84c:	833b      	strh	r3, [r7, #24]
                isoDepTxRx.isTxChaining = false;
 800f84e:	2300      	movs	r3, #0
 800f850:	76bb      	strb	r3, [r7, #26]
                isoDepTxRx.rxBuf        = &gNfcDev.rxBuf.isoDepBuf;
 800f852:	4b42      	ldr	r3, [pc, #264]	; (800f95c <rfalNfcDataExchangeStart+0x218>)
 800f854:	61fb      	str	r3, [r7, #28]
                isoDepTxRx.rxLen        = &gNfcDev.rxLen;
 800f856:	4b3f      	ldr	r3, [pc, #252]	; (800f954 <rfalNfcDataExchangeStart+0x210>)
 800f858:	623b      	str	r3, [r7, #32]
                isoDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 800f85a:	4b44      	ldr	r3, [pc, #272]	; (800f96c <rfalNfcDataExchangeStart+0x228>)
 800f85c:	627b      	str	r3, [r7, #36]	; 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.isoDepBuf.inf;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	4a3f      	ldr	r2, [pc, #252]	; (800f960 <rfalNfcDataExchangeStart+0x21c>)
 800f862:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	4a3b      	ldr	r2, [pc, #236]	; (800f954 <rfalNfcDataExchangeStart+0x210>)
 800f868:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL ISO-DEP Transceive                                           */
                err = rfalIsoDepStartTransceive( isoDepTxRx );
 800f86a:	466d      	mov	r5, sp
 800f86c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800f870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f874:	6823      	ldr	r3, [r4, #0]
 800f876:	602b      	str	r3, [r5, #0]
 800f878:	f107 0314 	add.w	r3, r7, #20
 800f87c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f87e:	f7fe fe51 	bl	800e524 <rfalIsoDepStartTransceive>
 800f882:	4603      	mov	r3, r0
 800f884:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 800f888:	bf00      	nop
 800f88a:	e04e      	b.n	800f92a <rfalNfcDataExchangeStart+0x1e6>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_NFCDEP:
            {
                rfalNfcDepTxRxParam nfcDepTxRx;
                
                if( txDataLen > 0U)
 800f88c:	897b      	ldrh	r3, [r7, #10]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d005      	beq.n	800f89e <rfalNfcDataExchangeStart+0x15a>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.nfcDepBuf.inf, txData, txDataLen );
 800f892:	897b      	ldrh	r3, [r7, #10]
 800f894:	461a      	mov	r2, r3
 800f896:	68f9      	ldr	r1, [r7, #12]
 800f898:	4835      	ldr	r0, [pc, #212]	; (800f970 <rfalNfcDataExchangeStart+0x22c>)
 800f89a:	f009 faac 	bl	8018df6 <memcpy>
                }
                
                nfcDepTxRx.DID          = RFAL_NFCDEP_DID_KEEP;
 800f89e:	23ff      	movs	r3, #255	; 0xff
 800f8a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                nfcDepTxRx.FSx          = rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Target.ATR_RES.PPt ) );
 800f8a4:	4b2a      	ldr	r3, [pc, #168]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8ac:	091b      	lsrs	r3, r3, #4
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	f003 0303 	and.w	r3, r3, #3
 800f8b4:	3301      	adds	r3, #1
 800f8b6:	019b      	lsls	r3, r3, #6
 800f8b8:	2bfd      	cmp	r3, #253	; 0xfd
 800f8ba:	d80c      	bhi.n	800f8d6 <rfalNfcDataExchangeStart+0x192>
 800f8bc:	4b24      	ldr	r3, [pc, #144]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f8be:	689b      	ldr	r3, [r3, #8]
 800f8c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8c4:	091b      	lsrs	r3, r3, #4
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	f003 0303 	and.w	r3, r3, #3
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	019b      	lsls	r3, r3, #6
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	e000      	b.n	800f8d8 <rfalNfcDataExchangeStart+0x194>
 800f8d6:	23fe      	movs	r3, #254	; 0xfe
 800f8d8:	863b      	strh	r3, [r7, #48]	; 0x30
                nfcDepTxRx.dFWT         = gNfcDev.activeDev->proto.nfcDep.info.dFWT;
 800f8da:	4b1d      	ldr	r3, [pc, #116]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                nfcDepTxRx.FWT          = gNfcDev.activeDev->proto.nfcDep.info.FWT;
 800f8e2:	4b1b      	ldr	r3, [pc, #108]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f8e4:	689b      	ldr	r3, [r3, #8]
 800f8e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f8e8:	62bb      	str	r3, [r7, #40]	; 0x28
                nfcDepTxRx.txBuf        = &gNfcDev.txBuf.nfcDepBuf;
 800f8ea:	4b1f      	ldr	r3, [pc, #124]	; (800f968 <rfalNfcDataExchangeStart+0x224>)
 800f8ec:	617b      	str	r3, [r7, #20]
                nfcDepTxRx.txBufLen     = txDataLen;
 800f8ee:	897b      	ldrh	r3, [r7, #10]
 800f8f0:	833b      	strh	r3, [r7, #24]
                nfcDepTxRx.isTxChaining = false;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	76bb      	strb	r3, [r7, #26]
                nfcDepTxRx.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 800f8f6:	4b19      	ldr	r3, [pc, #100]	; (800f95c <rfalNfcDataExchangeStart+0x218>)
 800f8f8:	61fb      	str	r3, [r7, #28]
                nfcDepTxRx.rxLen        = &gNfcDev.rxLen;
 800f8fa:	4b16      	ldr	r3, [pc, #88]	; (800f954 <rfalNfcDataExchangeStart+0x210>)
 800f8fc:	623b      	str	r3, [r7, #32]
                nfcDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 800f8fe:	4b1b      	ldr	r3, [pc, #108]	; (800f96c <rfalNfcDataExchangeStart+0x228>)
 800f900:	627b      	str	r3, [r7, #36]	; 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.nfcDepBuf.inf;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	4a14      	ldr	r2, [pc, #80]	; (800f958 <rfalNfcDataExchangeStart+0x214>)
 800f906:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	4a12      	ldr	r2, [pc, #72]	; (800f954 <rfalNfcDataExchangeStart+0x210>)
 800f90c:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL NFC-DEP Transceive                                           */
                err = rfalNfcDepStartTransceive( &nfcDepTxRx );                          
 800f90e:	f107 0314 	add.w	r3, r7, #20
 800f912:	4618      	mov	r0, r3
 800f914:	f003 fb74 	bl	8013000 <rfalNfcDepStartTransceive>
 800f918:	4603      	mov	r3, r0
 800f91a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 800f91e:	bf00      	nop
 800f920:	e003      	b.n	800f92a <rfalNfcDataExchangeStart+0x1e6>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */

            /*******************************************************************************/
            default:
                err = ERR_PARAM;
 800f922:	2307      	movs	r3, #7
 800f924:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 800f928:	bf00      	nop
        }
        
        /* If a transceive has succesfully started flag Data Exchange as ongoing */
        if( err == ERR_NONE )
 800f92a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d106      	bne.n	800f940 <rfalNfcDataExchangeStart+0x1fc>
        {
            gNfcDev.dataExErr = ERR_BUSY;
 800f932:	4b07      	ldr	r3, [pc, #28]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f934:	2202      	movs	r2, #2
 800f936:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
            gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 800f93a:	4b05      	ldr	r3, [pc, #20]	; (800f950 <rfalNfcDataExchangeStart+0x20c>)
 800f93c:	221f      	movs	r2, #31
 800f93e:	701a      	strb	r2, [r3, #0]
        }
        
        return err;
 800f940:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f944:	e000      	b.n	800f948 <rfalNfcDataExchangeStart+0x204>
    }
    
    return ERR_WRONG_STATE;
 800f946:	2321      	movs	r3, #33	; 0x21
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3758      	adds	r7, #88	; 0x58
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bdb0      	pop	{r4, r5, r7, pc}
 800f950:	20002fcc 	.word	0x20002fcc
 800f954:	200034ca 	.word	0x200034ca
 800f958:	200033cc 	.word	0x200033cc
 800f95c:	200033c7 	.word	0x200033c7
 800f960:	200033ca 	.word	0x200033ca
 800f964:	200032c7 	.word	0x200032c7
 800f968:	200032c4 	.word	0x200032c4
 800f96c:	200032bf 	.word	0x200032bf
 800f970:	200032c9 	.word	0x200032c9

0800f974 <rfalNfcDataExchangeGetStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeGetStatus( void )
{
 800f974:	b580      	push	{r7, lr}
 800f976:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Check if it's the first frame received in Listen mode */
    if( gNfcDev.state == RFAL_NFC_STATE_ACTIVATED )
 800f978:	4b3b      	ldr	r3, [pc, #236]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	2b1e      	cmp	r3, #30
 800f97e:	d114      	bne.n	800f9aa <rfalNfcDataExchangeGetStatus+0x36>
    {
        /* Continue data exchange as normal */
        gNfcDev.dataExErr = ERR_BUSY;
 800f980:	4b39      	ldr	r3, [pc, #228]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800f982:	2202      	movs	r2, #2
 800f984:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
        gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 800f988:	4b37      	ldr	r3, [pc, #220]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800f98a:	221f      	movs	r2, #31
 800f98c:	701a      	strb	r2, [r3, #0]
        
        /* Check if we performing in T3T CE */
        if( (gNfcDev.activeDev->type == RFAL_NFC_POLL_TYPE_NFCF) && (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_RF) )
 800f98e:	4b36      	ldr	r3, [pc, #216]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800f990:	689b      	ldr	r3, [r3, #8]
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	2b0c      	cmp	r3, #12
 800f996:	d108      	bne.n	800f9aa <rfalNfcDataExchangeGetStatus+0x36>
 800f998:	4b33      	ldr	r3, [pc, #204]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800f99a:	689b      	ldr	r3, [r3, #8]
 800f99c:	7f5b      	ldrb	r3, [r3, #29]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d103      	bne.n	800f9aa <rfalNfcDataExchangeGetStatus+0x36>
        {
            /* The first frame has been retrieved by rfalListenMode, flag data immediately                  */
            /* Can only call rfalGetTransceiveStatus() after starting a transceive with rfalStartTransceive */
            gNfcDev.dataExErr = ERR_NONE;
 800f9a2:	4b31      	ldr	r3, [pc, #196]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
    }
    
    
    /*******************************************************************************/
    /* Check if we are in we have been placed to sleep, and return last error     */
    if( gNfcDev.state == RFAL_NFC_STATE_LISTEN_SLEEP )
 800f9aa:	4b2f      	ldr	r3, [pc, #188]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	2b17      	cmp	r3, #23
 800f9b0:	d103      	bne.n	800f9ba <rfalNfcDataExchangeGetStatus+0x46>
    {
        return gNfcDev.dataExErr;                                /* ERR_SLEEP_REQ */
 800f9b2:	4b2d      	ldr	r3, [pc, #180]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800f9b4:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800f9b8:	e054      	b.n	800fa64 <rfalNfcDataExchangeGetStatus+0xf0>
    }

    
    /*******************************************************************************/    
    /* Check if Data exchange has been started */
    if( (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE) && (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE_DONE)  )
 800f9ba:	4b2b      	ldr	r3, [pc, #172]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	2b1f      	cmp	r3, #31
 800f9c0:	d005      	beq.n	800f9ce <rfalNfcDataExchangeGetStatus+0x5a>
 800f9c2:	4b29      	ldr	r3, [pc, #164]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	2b21      	cmp	r3, #33	; 0x21
 800f9c8:	d001      	beq.n	800f9ce <rfalNfcDataExchangeGetStatus+0x5a>
    {
        return ERR_WRONG_STATE;
 800f9ca:	2321      	movs	r3, #33	; 0x21
 800f9cc:	e04a      	b.n	800fa64 <rfalNfcDataExchangeGetStatus+0xf0>
    }
    
    /* Check if Data exchange is still ongoing */
    if( gNfcDev.dataExErr == ERR_BUSY )
 800f9ce:	4b26      	ldr	r3, [pc, #152]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800f9d0:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800f9d4:	2b02      	cmp	r3, #2
 800f9d6:	d142      	bne.n	800fa5e <rfalNfcDataExchangeGetStatus+0xea>
    {
        switch( gNfcDev.activeDev->rfInterface )
 800f9d8:	4b23      	ldr	r3, [pc, #140]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800f9da:	689b      	ldr	r3, [r3, #8]
 800f9dc:	7f5b      	ldrb	r3, [r3, #29]
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d00b      	beq.n	800f9fa <rfalNfcDataExchangeGetStatus+0x86>
 800f9e2:	2b02      	cmp	r3, #2
 800f9e4:	d011      	beq.n	800fa0a <rfalNfcDataExchangeGetStatus+0x96>
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d117      	bne.n	800fa1a <rfalNfcDataExchangeGetStatus+0xa6>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
                gNfcDev.dataExErr = rfalGetTransceiveStatus();
 800f9ea:	f006 fb41 	bl	8016070 <rfalGetTransceiveStatus>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	461a      	mov	r2, r3
 800f9f2:	4b1d      	ldr	r3, [pc, #116]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800f9f4:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 800f9f8:	e014      	b.n	800fa24 <rfalNfcDataExchangeGetStatus+0xb0>
        
        #if RFAL_FEATURE_ISO_DEP
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
                gNfcDev.dataExErr = rfalIsoDepGetTransceiveStatus();
 800f9fa:	f7fe fdff 	bl	800e5fc <rfalIsoDepGetTransceiveStatus>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	461a      	mov	r2, r3
 800fa02:	4b19      	ldr	r3, [pc, #100]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800fa04:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 800fa08:	e00c      	b.n	800fa24 <rfalNfcDataExchangeGetStatus+0xb0>
        #endif /* RFAL_FEATURE_ISO_DEP */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                gNfcDev.dataExErr = rfalNfcDepGetTransceiveStatus();
 800fa0a:	f003 fb2f 	bl	801306c <rfalNfcDepGetTransceiveStatus>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	461a      	mov	r2, r3
 800fa12:	4b15      	ldr	r3, [pc, #84]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800fa14:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 800fa18:	e004      	b.n	800fa24 <rfalNfcDataExchangeGetStatus+0xb0>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            /*******************************************************************************/
            default:
                gNfcDev.dataExErr = ERR_PARAM;
 800fa1a:	4b13      	ldr	r3, [pc, #76]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800fa1c:	2207      	movs	r2, #7
 800fa1e:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 800fa22:	bf00      	nop
        
        
    #if  RFAL_FEATURE_LISTEN_MODE
        /*******************************************************************************/
        /* If a Sleep request has been received (Listen Mode) go to sleep immediately  */
        if( gNfcDev.dataExErr == ERR_SLEEP_REQ )
 800fa24:	4b10      	ldr	r3, [pc, #64]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800fa26:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800fa2a:	2b20      	cmp	r3, #32
 800fa2c:	d117      	bne.n	800fa5e <rfalNfcDataExchangeGetStatus+0xea>
        {
            EXIT_ON_ERR( gNfcDev.dataExErr, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 800fa2e:	4b0f      	ldr	r3, [pc, #60]	; (800fa6c <rfalNfcDataExchangeGetStatus+0xf8>)
 800fa30:	22ff      	movs	r2, #255	; 0xff
 800fa32:	490f      	ldr	r1, [pc, #60]	; (800fa70 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fa34:	200c      	movs	r0, #12
 800fa36:	f007 ff77 	bl	8017928 <rfalListenSleepStart>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	4b0a      	ldr	r3, [pc, #40]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800fa40:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
 800fa44:	4b08      	ldr	r3, [pc, #32]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800fa46:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d003      	beq.n	800fa56 <rfalNfcDataExchangeGetStatus+0xe2>
 800fa4e:	4b06      	ldr	r3, [pc, #24]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800fa50:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800fa54:	e006      	b.n	800fa64 <rfalNfcDataExchangeGetStatus+0xf0>
            
            /* If set Sleep was succesfull keep restore the Sleep request signal */
            gNfcDev.dataExErr = ERR_SLEEP_REQ;
 800fa56:	4b04      	ldr	r3, [pc, #16]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800fa58:	2220      	movs	r2, #32
 800fa5a:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
        }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
        
    }
    
    return gNfcDev.dataExErr;
 800fa5e:	4b02      	ldr	r3, [pc, #8]	; (800fa68 <rfalNfcDataExchangeGetStatus+0xf4>)
 800fa60:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	20002fcc 	.word	0x20002fcc
 800fa6c:	200034ca 	.word	0x200034ca
 800fa70:	200033c7 	.word	0x200033c7

0800fa74 <rfalNfcPollTechDetetection>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollTechDetetection( void )
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b08a      	sub	sp, #40	; 0x28
 800fa78:	af00      	add	r7, sp, #0
    ReturnCode           err;
    
    err = ERR_NONE;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    
    /*******************************************************************************/
    /* AP2P Technology Detection                                                   */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_AP2P) != 0U) )
 800fa7e:	4ba3      	ldr	r3, [pc, #652]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fa80:	89db      	ldrh	r3, [r3, #14]
 800fa82:	f003 0310 	and.w	r3, r3, #16
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d05a      	beq.n	800fb40 <rfalNfcPollTechDetetection+0xcc>
 800fa8a:	4ba0      	ldr	r3, [pc, #640]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fa8c:	889b      	ldrh	r3, [r3, #4]
 800fa8e:	f003 0310 	and.w	r3, r3, #16
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d054      	beq.n	800fb40 <rfalNfcPollTechDetetection+0xcc>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 800fa96:	4b9d      	ldr	r3, [pc, #628]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fa98:	889b      	ldrh	r3, [r3, #4]
 800fa9a:	f023 0310 	bic.w	r3, r3, #16
 800fa9e:	b29a      	uxth	r2, r3
 800faa0:	4b9a      	ldr	r3, [pc, #616]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800faa2:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFC_DEP
    
        EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_POLL_ACTIVE_P2P, gNfcDev.disc.ap2pBR, gNfcDev.disc.ap2pBR ) );
 800faa4:	4b99      	ldr	r3, [pc, #612]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800faa6:	f893 104f 	ldrb.w	r1, [r3, #79]	; 0x4f
 800faaa:	4b98      	ldr	r3, [pc, #608]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800faac:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800fab0:	461a      	mov	r2, r3
 800fab2:	2009      	movs	r0, #9
 800fab4:	f005 fc5a 	bl	801536c <rfalSetMode>
 800fab8:	4603      	mov	r3, r0
 800faba:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fabc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d001      	beq.n	800fac6 <rfalNfcPollTechDetetection+0x52>
 800fac2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fac4:	e15d      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
        rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800fac6:	2001      	movs	r0, #1
 800fac8:	f005 ffea 	bl	8015aa0 <rfalSetErrorHandling>
        rfalSetFDTListen( RFAL_FDT_LISTEN_AP2P_POLLER );
 800facc:	2040      	movs	r0, #64	; 0x40
 800face:	f006 f80b 	bl	8015ae8 <rfalSetFDTListen>
        rfalSetFDTPoll( RFAL_TIMING_NONE );
 800fad2:	2000      	movs	r0, #0
 800fad4:	f005 fff4 	bl	8015ac0 <rfalSetFDTPoll>
        rfalSetGT( RFAL_GT_AP2P_ADJUSTED );
 800fad8:	488d      	ldr	r0, [pc, #564]	; (800fd10 <rfalNfcPollTechDetetection+0x29c>)
 800fada:	f006 f819 	bl	8015b10 <rfalSetGT>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                     /* Turns the Field On and starts GT timer */
 800fade:	f006 f843 	bl	8015b68 <rfalFieldOnAndStartGT>
 800fae2:	4603      	mov	r3, r0
 800fae4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fae6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d001      	beq.n	800faf0 <rfalNfcPollTechDetetection+0x7c>
 800faec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800faee:	e148      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, NULL, 0 );/* Poll for NFC-A devices */
 800faf0:	2300      	movs	r3, #0
 800faf2:	2200      	movs	r2, #0
 800faf4:	2101      	movs	r1, #1
 800faf6:	4887      	ldr	r0, [pc, #540]	; (800fd14 <rfalNfcPollTechDetetection+0x2a0>)
 800faf8:	f001 f81c 	bl	8010b34 <rfalNfcNfcDepActivate>
 800fafc:	4603      	mov	r3, r0
 800fafe:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 800fb00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d118      	bne.n	800fb38 <rfalNfcPollTechDetetection+0xc4>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 800fb06:	4b81      	ldr	r3, [pc, #516]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fb08:	885b      	ldrh	r3, [r3, #2]
 800fb0a:	f043 0310 	orr.w	r3, r3, #16
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	4b7e      	ldr	r3, [pc, #504]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fb12:	805a      	strh	r2, [r3, #2]
            
            gNfcDev.devList->type        = RFAL_NFC_LISTEN_TYPE_AP2P;
 800fb14:	4b7d      	ldr	r3, [pc, #500]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fb16:	2205      	movs	r2, #5
 800fb18:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 800fb1c:	4b7b      	ldr	r3, [pc, #492]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fb1e:	2202      	movs	r2, #2
 800fb20:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
            gNfcDev.devCnt++;
 800fb24:	4b79      	ldr	r3, [pc, #484]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fb26:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800fb2a:	3301      	adds	r3, #1
 800fb2c:	b2da      	uxtb	r2, r3
 800fb2e:	4b77      	ldr	r3, [pc, #476]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fb30:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            
            return ERR_NONE;
 800fb34:	2300      	movs	r3, #0
 800fb36:	e124      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
        }
        
        rfalFieldOff();
 800fb38:	f006 f878 	bl	8015c2c <rfalFieldOff>
        return ERR_BUSY;
 800fb3c:	2302      	movs	r3, #2
 800fb3e:	e120      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-A Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )
 800fb40:	4b72      	ldr	r3, [pc, #456]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fb42:	89db      	ldrh	r3, [r3, #14]
 800fb44:	f003 0301 	and.w	r3, r3, #1
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d034      	beq.n	800fbb6 <rfalNfcPollTechDetetection+0x142>
 800fb4c:	4b6f      	ldr	r3, [pc, #444]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fb4e:	889b      	ldrh	r3, [r3, #4]
 800fb50:	f003 0301 	and.w	r3, r3, #1
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d02e      	beq.n	800fbb6 <rfalNfcPollTechDetetection+0x142>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 800fb58:	4b6c      	ldr	r3, [pc, #432]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fb5a:	889b      	ldrh	r3, [r3, #4]
 800fb5c:	f023 0301 	bic.w	r3, r3, #1
 800fb60:	b29a      	uxth	r2, r3
 800fb62:	4b6a      	ldr	r3, [pc, #424]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fb64:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCA
        {
            rfalNfcaSensRes sensRes;            
        
            EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                            /* Initialize RFAL for NFC-A */
 800fb66:	f003 fab1 	bl	80130cc <rfalNfcaPollerInitialize>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d001      	beq.n	800fb78 <rfalNfcPollTechDetetection+0x104>
 800fb74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb76:	e104      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                               /* Turns the Field On and starts GT timer */
 800fb78:	f005 fff6 	bl	8015b68 <rfalFieldOnAndStartGT>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d001      	beq.n	800fb8a <rfalNfcPollTechDetetection+0x116>
 800fb86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb88:	e0fb      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
                                                                                       
            err = rfalNfcaPollerTechnologyDetection( gNfcDev.disc.compMode, &sensRes );/* Poll for NFC-A devices */
 800fb8a:	4b60      	ldr	r3, [pc, #384]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fb8c:	7b1b      	ldrb	r3, [r3, #12]
 800fb8e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fb92:	4611      	mov	r1, r2
 800fb94:	4618      	mov	r0, r3
 800fb96:	f003 fae6 	bl	8013166 <rfalNfcaPollerTechnologyDetection>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 800fb9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d106      	bne.n	800fbb2 <rfalNfcPollTechDetetection+0x13e>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_A;
 800fba4:	4b59      	ldr	r3, [pc, #356]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fba6:	885b      	ldrh	r3, [r3, #2]
 800fba8:	f043 0301 	orr.w	r3, r3, #1
 800fbac:	b29a      	uxth	r2, r3
 800fbae:	4b57      	ldr	r3, [pc, #348]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fbb0:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 800fbb2:	2302      	movs	r3, #2
 800fbb4:	e0e5      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-B Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )
 800fbb6:	4b55      	ldr	r3, [pc, #340]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fbb8:	89db      	ldrh	r3, [r3, #14]
 800fbba:	f003 0302 	and.w	r3, r3, #2
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d035      	beq.n	800fc2e <rfalNfcPollTechDetetection+0x1ba>
 800fbc2:	4b52      	ldr	r3, [pc, #328]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fbc4:	889b      	ldrh	r3, [r3, #4]
 800fbc6:	f003 0302 	and.w	r3, r3, #2
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d02f      	beq.n	800fc2e <rfalNfcPollTechDetetection+0x1ba>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 800fbce:	4b4f      	ldr	r3, [pc, #316]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fbd0:	889b      	ldrh	r3, [r3, #4]
 800fbd2:	f023 0302 	bic.w	r3, r3, #2
 800fbd6:	b29a      	uxth	r2, r3
 800fbd8:	4b4c      	ldr	r3, [pc, #304]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fbda:	809a      	strh	r2, [r3, #4]
    #if RFAL_FEATURE_NFCB
        {
            rfalNfcbSensbRes sensbRes;
            uint8_t          sensbResLen;            
        
            EXIT_ON_ERR( err, rfalNfcbPollerInitialize() );                           /* Initialize RFAL for NFC-B */
 800fbdc:	f003 fe96 	bl	801390c <rfalNfcbPollerInitialize>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fbe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d001      	beq.n	800fbee <rfalNfcPollTechDetetection+0x17a>
 800fbea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbec:	e0c9      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* As field is already On only starts GT timer */
 800fbee:	f005 ffbb 	bl	8015b68 <rfalFieldOnAndStartGT>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fbf6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d001      	beq.n	800fc00 <rfalNfcPollTechDetetection+0x18c>
 800fbfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbfe:	e0c0      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
                                                                                                       
            err = rfalNfcbPollerTechnologyDetection( gNfcDev.disc.compMode, &sensbRes, &sensbResLen ); /* Poll for NFC-B devices */
 800fc00:	4b42      	ldr	r3, [pc, #264]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fc02:	7b1b      	ldrb	r3, [r3, #12]
 800fc04:	f107 0213 	add.w	r2, r7, #19
 800fc08:	f107 0114 	add.w	r1, r7, #20
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f003 ff8f 	bl	8013b30 <rfalNfcbPollerTechnologyDetection>
 800fc12:	4603      	mov	r3, r0
 800fc14:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 800fc16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d106      	bne.n	800fc2a <rfalNfcPollTechDetetection+0x1b6>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_B;
 800fc1c:	4b3b      	ldr	r3, [pc, #236]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fc1e:	885b      	ldrh	r3, [r3, #2]
 800fc20:	f043 0302 	orr.w	r3, r3, #2
 800fc24:	b29a      	uxth	r2, r3
 800fc26:	4b39      	ldr	r3, [pc, #228]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fc28:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 800fc2a:	2302      	movs	r3, #2
 800fc2c:	e0a9      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
    }
    
    /*******************************************************************************/
    /* Passive NFC-F Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )
 800fc2e:	4b37      	ldr	r3, [pc, #220]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fc30:	89db      	ldrh	r3, [r3, #14]
 800fc32:	f003 0304 	and.w	r3, r3, #4
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d031      	beq.n	800fc9e <rfalNfcPollTechDetetection+0x22a>
 800fc3a:	4b34      	ldr	r3, [pc, #208]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fc3c:	889b      	ldrh	r3, [r3, #4]
 800fc3e:	f003 0304 	and.w	r3, r3, #4
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d02b      	beq.n	800fc9e <rfalNfcPollTechDetetection+0x22a>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 800fc46:	4b31      	ldr	r3, [pc, #196]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fc48:	889b      	ldrh	r3, [r3, #4]
 800fc4a:	f023 0304 	bic.w	r3, r3, #4
 800fc4e:	b29a      	uxth	r2, r3
 800fc50:	4b2e      	ldr	r3, [pc, #184]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fc52:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCF
    
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ) );          /* Initialize RFAL for NFC-F */
 800fc54:	4b2d      	ldr	r3, [pc, #180]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fc56:	7cdb      	ldrb	r3, [r3, #19]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f004 fa2b 	bl	80140b4 <rfalNfcfPollerInitialize>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d001      	beq.n	800fc6c <rfalNfcPollTechDetetection+0x1f8>
 800fc68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc6a:	e08a      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 800fc6c:	f005 ff7c 	bl	8015b68 <rfalFieldOnAndStartGT>
 800fc70:	4603      	mov	r3, r0
 800fc72:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d001      	beq.n	800fc7e <rfalNfcPollTechDetetection+0x20a>
 800fc7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc7c:	e081      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
                                                                                      
        err = rfalNfcfPollerCheckPresence();                                          /* Poll for NFC-F devices */
 800fc7e:	f004 fa67 	bl	8014150 <rfalNfcfPollerCheckPresence>
 800fc82:	4603      	mov	r3, r0
 800fc84:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 800fc86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d106      	bne.n	800fc9a <rfalNfcPollTechDetetection+0x226>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_F;
 800fc8c:	4b1f      	ldr	r3, [pc, #124]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fc8e:	885b      	ldrh	r3, [r3, #2]
 800fc90:	f043 0304 	orr.w	r3, r3, #4
 800fc94:	b29a      	uxth	r2, r3
 800fc96:	4b1d      	ldr	r3, [pc, #116]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fc98:	805a      	strh	r2, [r3, #2]
        }
        
        return ERR_BUSY;
 800fc9a:	2302      	movs	r3, #2
 800fc9c:	e071      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-V Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )
 800fc9e:	4b1b      	ldr	r3, [pc, #108]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fca0:	89db      	ldrh	r3, [r3, #14]
 800fca2:	f003 0308 	and.w	r3, r3, #8
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d036      	beq.n	800fd18 <rfalNfcPollTechDetetection+0x2a4>
 800fcaa:	4b18      	ldr	r3, [pc, #96]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fcac:	889b      	ldrh	r3, [r3, #4]
 800fcae:	f003 0308 	and.w	r3, r3, #8
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d030      	beq.n	800fd18 <rfalNfcPollTechDetetection+0x2a4>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 800fcb6:	4b15      	ldr	r3, [pc, #84]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fcb8:	889b      	ldrh	r3, [r3, #4]
 800fcba:	f023 0308 	bic.w	r3, r3, #8
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	4b12      	ldr	r3, [pc, #72]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fcc2:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCV
        {
            rfalNfcvInventoryRes invRes;
        
            EXIT_ON_ERR( err, rfalNfcvPollerInitialize() );                               /* Initialize RFAL for NFC-V */
 800fcc4:	f004 fd78 	bl	80147b8 <rfalNfcvPollerInitialize>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fccc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d001      	beq.n	800fcd6 <rfalNfcPollTechDetetection+0x262>
 800fcd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcd4:	e055      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 800fcd6:	f005 ff47 	bl	8015b68 <rfalFieldOnAndStartGT>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fcde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d001      	beq.n	800fce8 <rfalNfcPollTechDetetection+0x274>
 800fce4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fce6:	e04c      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
                                                                                          
            err = rfalNfcvPollerCheckPresence( &invRes );                                 /* Poll for NFC-V devices */
 800fce8:	1d3b      	adds	r3, r7, #4
 800fcea:	4618      	mov	r0, r3
 800fcec:	f004 fd88 	bl	8014800 <rfalNfcvPollerCheckPresence>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 800fcf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d106      	bne.n	800fd08 <rfalNfcPollTechDetetection+0x294>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_V;
 800fcfa:	4b04      	ldr	r3, [pc, #16]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fcfc:	885b      	ldrh	r3, [r3, #2]
 800fcfe:	f043 0308 	orr.w	r3, r3, #8
 800fd02:	b29a      	uxth	r2, r3
 800fd04:	4b01      	ldr	r3, [pc, #4]	; (800fd0c <rfalNfcPollTechDetetection+0x298>)
 800fd06:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 800fd08:	2302      	movs	r3, #2
 800fd0a:	e03a      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
 800fd0c:	20002fcc 	.word	0x20002fcc
 800fd10:	00063510 	.word	0x00063510
 800fd14:	2000305c 	.word	0x2000305c
    
    
    /*******************************************************************************/
    /* Passive Proprietary Technology ST25TB                                       */
    /*******************************************************************************/  
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) )
 800fd18:	4b1c      	ldr	r3, [pc, #112]	; (800fd8c <rfalNfcPollTechDetetection+0x318>)
 800fd1a:	89db      	ldrh	r3, [r3, #14]
 800fd1c:	f003 0320 	and.w	r3, r3, #32
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d02d      	beq.n	800fd80 <rfalNfcPollTechDetetection+0x30c>
 800fd24:	4b19      	ldr	r3, [pc, #100]	; (800fd8c <rfalNfcPollTechDetetection+0x318>)
 800fd26:	889b      	ldrh	r3, [r3, #4]
 800fd28:	f003 0320 	and.w	r3, r3, #32
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d027      	beq.n	800fd80 <rfalNfcPollTechDetetection+0x30c>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 800fd30:	4b16      	ldr	r3, [pc, #88]	; (800fd8c <rfalNfcPollTechDetetection+0x318>)
 800fd32:	889b      	ldrh	r3, [r3, #4]
 800fd34:	f023 0320 	bic.w	r3, r3, #32
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	4b14      	ldr	r3, [pc, #80]	; (800fd8c <rfalNfcPollTechDetetection+0x318>)
 800fd3c:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_ST25TB
        
        EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                             /* Initialize RFAL for NFC-V */
 800fd3e:	f008 f9e6 	bl	801810e <rfalSt25tbPollerInitialize>
 800fd42:	4603      	mov	r3, r0
 800fd44:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fd46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d001      	beq.n	800fd50 <rfalNfcPollTechDetetection+0x2dc>
 800fd4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd4e:	e018      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 800fd50:	f005 ff0a 	bl	8015b68 <rfalFieldOnAndStartGT>
 800fd54:	4603      	mov	r3, r0
 800fd56:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fd58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d001      	beq.n	800fd62 <rfalNfcPollTechDetetection+0x2ee>
 800fd5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd60:	e00f      	b.n	800fd82 <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalSt25tbPollerCheckPresence( NULL );                                  /* Poll for ST25TB devices */
 800fd62:	2000      	movs	r0, #0
 800fd64:	f008 f9da 	bl	801811c <rfalSt25tbPollerCheckPresence>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 800fd6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d106      	bne.n	800fd80 <rfalNfcPollTechDetetection+0x30c>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_ST25TB;
 800fd72:	4b06      	ldr	r3, [pc, #24]	; (800fd8c <rfalNfcPollTechDetetection+0x318>)
 800fd74:	885b      	ldrh	r3, [r3, #2]
 800fd76:	f043 0320 	orr.w	r3, r3, #32
 800fd7a:	b29a      	uxth	r2, r3
 800fd7c:	4b03      	ldr	r3, [pc, #12]	; (800fd8c <rfalNfcPollTechDetetection+0x318>)
 800fd7e:	805a      	strh	r2, [r3, #2]
        }
        
    #endif /* RFAL_FEATURE_ST25TB */
    }
    
    return ERR_NONE;
 800fd80:	2300      	movs	r3, #0
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3728      	adds	r7, #40	; 0x28
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	20002fcc 	.word	0x20002fcc

0800fd90 <rfalNfcPollCollResolution>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollCollResolution( void )
{
 800fd90:	b5b0      	push	{r4, r5, r7, lr}
 800fd92:	b09e      	sub	sp, #120	; 0x78
 800fd94:	af00      	add	r7, sp, #0
    uint8_t    i;
    uint8_t    devCnt;
    ReturnCode err;
    
    err    = ERR_NONE;
 800fd96:	2300      	movs	r3, #0
 800fd98:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    devCnt = 0;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    i      = 0;
 800fda2:	2300      	movs	r3, #0
 800fda4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    NO_WARNING(err);
    NO_WARNING(devCnt);
    NO_WARNING(i);
    
    /* Check if device limit has been reached */
    if( gNfcDev.devCnt >= gNfcDev.disc.devLimit )
 800fda8:	4bb6      	ldr	r3, [pc, #728]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fdaa:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
 800fdae:	4bb5      	ldr	r3, [pc, #724]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fdb0:	7c9b      	ldrb	r3, [r3, #18]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d301      	bcc.n	800fdba <rfalNfcPollCollResolution+0x2a>
    {
        return ERR_NONE;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	e2b6      	b.n	8010328 <rfalNfcPollCollResolution+0x598>
    
    /*******************************************************************************/
    /* NFC-A Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCA
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )   /* If a NFC-A device was found/detected, perform Collision Resolution */
 800fdba:	4bb2      	ldr	r3, [pc, #712]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fdbc:	885b      	ldrh	r3, [r3, #2]
 800fdbe:	f003 0301 	and.w	r3, r3, #1
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	f000 8085 	beq.w	800fed2 <rfalNfcPollCollResolution+0x142>
 800fdc8:	4bae      	ldr	r3, [pc, #696]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fdca:	889b      	ldrh	r3, [r3, #4]
 800fdcc:	f003 0301 	and.w	r3, r3, #1
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d07e      	beq.n	800fed2 <rfalNfcPollCollResolution+0x142>
    {
        rfalNfcaListenDevice nfcaDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 800fdd4:	4bab      	ldr	r3, [pc, #684]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fdd6:	889b      	ldrh	r3, [r3, #4]
 800fdd8:	f023 0301 	bic.w	r3, r3, #1
 800fddc:	b29a      	uxth	r2, r3
 800fdde:	4ba9      	ldr	r3, [pc, #676]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fde0:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcaPollerInitialize());                                /* Initialize RFAL for NFC-A */
 800fde2:	f003 f973 	bl	80130cc <rfalNfcaPollerInitialize>
 800fde6:	4603      	mov	r3, r0
 800fde8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800fdec:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d002      	beq.n	800fdfa <rfalNfcPollCollResolution+0x6a>
 800fdf4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800fdf8:	e296      	b.n	8010328 <rfalNfcPollCollResolution+0x598>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 800fdfa:	f005 feb5 	bl	8015b68 <rfalFieldOnAndStartGT>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800fe04:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d002      	beq.n	800fe12 <rfalNfcPollCollResolution+0x82>
 800fe0c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800fe10:	e28a      	b.n	8010328 <rfalNfcPollCollResolution+0x598>
        
        err = rfalNfcaPollerFullCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcaDevList, &devCnt );
 800fe12:	4b9c      	ldr	r3, [pc, #624]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fe14:	7b18      	ldrb	r0, [r3, #12]
 800fe16:	4b9b      	ldr	r3, [pc, #620]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fe18:	7c9a      	ldrb	r2, [r3, #18]
 800fe1a:	4b9a      	ldr	r3, [pc, #616]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fe1c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800fe20:	1ad3      	subs	r3, r2, r3
 800fe22:	b2d9      	uxtb	r1, r3
 800fe24:	f107 0373 	add.w	r3, r7, #115	; 0x73
 800fe28:	1d3a      	adds	r2, r7, #4
 800fe2a:	f003 fb8c 	bl	8013546 <rfalNfcaPollerFullCollisionResolution>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 800fe34:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d148      	bne.n	800fece <rfalNfcPollCollResolution+0x13e>
 800fe3c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d044      	beq.n	800fece <rfalNfcPollCollResolution+0x13e>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 800fe44:	2300      	movs	r3, #0
 800fe46:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800fe4a:	e03a      	b.n	800fec2 <rfalNfcPollCollResolution+0x132>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 800fe4c:	4b8d      	ldr	r3, [pc, #564]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fe4e:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800fe52:	4619      	mov	r1, r3
 800fe54:	4a8b      	ldr	r2, [pc, #556]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fe56:	460b      	mov	r3, r1
 800fe58:	011b      	lsls	r3, r3, #4
 800fe5a:	1a5b      	subs	r3, r3, r1
 800fe5c:	00db      	lsls	r3, r3, #3
 800fe5e:	4413      	add	r3, r2
 800fe60:	3390      	adds	r3, #144	; 0x90
 800fe62:	2200      	movs	r2, #0
 800fe64:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 800fe66:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800fe6a:	4b86      	ldr	r3, [pc, #536]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fe6c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800fe70:	4618      	mov	r0, r3
 800fe72:	4984      	ldr	r1, [pc, #528]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fe74:	4603      	mov	r3, r0
 800fe76:	011b      	lsls	r3, r3, #4
 800fe78:	1a1b      	subs	r3, r3, r0
 800fe7a:	00db      	lsls	r3, r3, #3
 800fe7c:	440b      	add	r3, r1
 800fe7e:	3390      	adds	r3, #144	; 0x90
 800fe80:	2116      	movs	r1, #22
 800fe82:	fb01 f202 	mul.w	r2, r1, r2
 800fe86:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800fe8a:	440a      	add	r2, r1
 800fe8c:	3a74      	subs	r2, #116	; 0x74
 800fe8e:	3301      	adds	r3, #1
 800fe90:	6811      	ldr	r1, [r2, #0]
 800fe92:	6855      	ldr	r5, [r2, #4]
 800fe94:	6894      	ldr	r4, [r2, #8]
 800fe96:	68d0      	ldr	r0, [r2, #12]
 800fe98:	6019      	str	r1, [r3, #0]
 800fe9a:	605d      	str	r5, [r3, #4]
 800fe9c:	609c      	str	r4, [r3, #8]
 800fe9e:	60d8      	str	r0, [r3, #12]
 800fea0:	6911      	ldr	r1, [r2, #16]
 800fea2:	6119      	str	r1, [r3, #16]
 800fea4:	8a92      	ldrh	r2, [r2, #20]
 800fea6:	829a      	strh	r2, [r3, #20]
                gNfcDev.devCnt++;
 800fea8:	4b76      	ldr	r3, [pc, #472]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800feaa:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800feae:	3301      	adds	r3, #1
 800feb0:	b2da      	uxtb	r2, r3
 800feb2:	4b74      	ldr	r3, [pc, #464]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800feb4:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 800feb8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800febc:	3301      	adds	r3, #1
 800febe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800fec2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800fec6:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800feca:	429a      	cmp	r2, r3
 800fecc:	d3be      	bcc.n	800fe4c <rfalNfcPollCollResolution+0xbc>
            }
        }
        
        return ERR_BUSY;
 800fece:	2302      	movs	r3, #2
 800fed0:	e22a      	b.n	8010328 <rfalNfcPollCollResolution+0x598>
    
    /*******************************************************************************/
    /* NFC-B Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )   /* If a NFC-B device was found/detected, perform Collision Resolution */
 800fed2:	4b6c      	ldr	r3, [pc, #432]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fed4:	885b      	ldrh	r3, [r3, #2]
 800fed6:	f003 0302 	and.w	r3, r3, #2
 800feda:	2b00      	cmp	r3, #0
 800fedc:	f000 8085 	beq.w	800ffea <rfalNfcPollCollResolution+0x25a>
 800fee0:	4b68      	ldr	r3, [pc, #416]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fee2:	889b      	ldrh	r3, [r3, #4]
 800fee4:	f003 0302 	and.w	r3, r3, #2
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d07e      	beq.n	800ffea <rfalNfcPollCollResolution+0x25a>
    {
        rfalNfcbListenDevice nfcbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 800feec:	4b65      	ldr	r3, [pc, #404]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800feee:	889b      	ldrh	r3, [r3, #4]
 800fef0:	f023 0302 	bic.w	r3, r3, #2
 800fef4:	b29a      	uxth	r2, r3
 800fef6:	4b63      	ldr	r3, [pc, #396]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fef8:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcbPollerInitialize());                                /* Initialize RFAL for NFC-B */
 800fefa:	f003 fd07 	bl	801390c <rfalNfcbPollerInitialize>
 800fefe:	4603      	mov	r3, r0
 800ff00:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800ff04:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d002      	beq.n	800ff12 <rfalNfcPollCollResolution+0x182>
 800ff0c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ff10:	e20a      	b.n	8010328 <rfalNfcPollCollResolution+0x598>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 800ff12:	f005 fe29 	bl	8015b68 <rfalFieldOnAndStartGT>
 800ff16:	4603      	mov	r3, r0
 800ff18:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800ff1c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d002      	beq.n	800ff2a <rfalNfcPollCollResolution+0x19a>
 800ff24:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ff28:	e1fe      	b.n	8010328 <rfalNfcPollCollResolution+0x598>
        
        err = rfalNfcbPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcbDevList, &devCnt );
 800ff2a:	4b56      	ldr	r3, [pc, #344]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800ff2c:	7b18      	ldrb	r0, [r3, #12]
 800ff2e:	4b55      	ldr	r3, [pc, #340]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800ff30:	7c9a      	ldrb	r2, [r3, #18]
 800ff32:	4b54      	ldr	r3, [pc, #336]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800ff34:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800ff38:	1ad3      	subs	r3, r2, r3
 800ff3a:	b2d9      	uxtb	r1, r3
 800ff3c:	f107 0373 	add.w	r3, r7, #115	; 0x73
 800ff40:	1d3a      	adds	r2, r7, #4
 800ff42:	f003 fe07 	bl	8013b54 <rfalNfcbPollerCollisionResolution>
 800ff46:	4603      	mov	r3, r0
 800ff48:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 800ff4c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d148      	bne.n	800ffe6 <rfalNfcPollCollResolution+0x256>
 800ff54:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d044      	beq.n	800ffe6 <rfalNfcPollCollResolution+0x256>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ff62:	e03a      	b.n	800ffda <rfalNfcPollCollResolution+0x24a>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 800ff64:	4b47      	ldr	r3, [pc, #284]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800ff66:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800ff6a:	4619      	mov	r1, r3
 800ff6c:	4a45      	ldr	r2, [pc, #276]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800ff6e:	460b      	mov	r3, r1
 800ff70:	011b      	lsls	r3, r3, #4
 800ff72:	1a5b      	subs	r3, r3, r1
 800ff74:	00db      	lsls	r3, r3, #3
 800ff76:	4413      	add	r3, r2
 800ff78:	3390      	adds	r3, #144	; 0x90
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 800ff7e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800ff82:	4b40      	ldr	r3, [pc, #256]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800ff84:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800ff88:	4618      	mov	r0, r3
 800ff8a:	493e      	ldr	r1, [pc, #248]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	011b      	lsls	r3, r3, #4
 800ff90:	1a1b      	subs	r3, r3, r0
 800ff92:	00db      	lsls	r3, r3, #3
 800ff94:	440b      	add	r3, r1
 800ff96:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	011b      	lsls	r3, r3, #4
 800ff9e:	1a9b      	subs	r3, r3, r2
 800ffa0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800ffa4:	4413      	add	r3, r2
 800ffa6:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 800ffaa:	1c4b      	adds	r3, r1, #1
 800ffac:	6814      	ldr	r4, [r2, #0]
 800ffae:	6850      	ldr	r0, [r2, #4]
 800ffb0:	6891      	ldr	r1, [r2, #8]
 800ffb2:	601c      	str	r4, [r3, #0]
 800ffb4:	6058      	str	r0, [r3, #4]
 800ffb6:	6099      	str	r1, [r3, #8]
 800ffb8:	8991      	ldrh	r1, [r2, #12]
 800ffba:	7b92      	ldrb	r2, [r2, #14]
 800ffbc:	8199      	strh	r1, [r3, #12]
 800ffbe:	739a      	strb	r2, [r3, #14]
                gNfcDev.devCnt++;
 800ffc0:	4b30      	ldr	r3, [pc, #192]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800ffc2:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	b2da      	uxtb	r2, r3
 800ffca:	4b2e      	ldr	r3, [pc, #184]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800ffcc:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 800ffd0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ffd4:	3301      	adds	r3, #1
 800ffd6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ffda:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800ffde:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d3be      	bcc.n	800ff64 <rfalNfcPollCollResolution+0x1d4>
            }
        }
        
        return ERR_BUSY;
 800ffe6:	2302      	movs	r3, #2
 800ffe8:	e19e      	b.n	8010328 <rfalNfcPollCollResolution+0x598>
    
    /*******************************************************************************/
    /* NFC-F Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCF
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )  /* If a NFC-F device was found/detected, perform Collision Resolution */
 800ffea:	4b26      	ldr	r3, [pc, #152]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800ffec:	885b      	ldrh	r3, [r3, #2]
 800ffee:	f003 0304 	and.w	r3, r3, #4
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	f000 808f 	beq.w	8010116 <rfalNfcPollCollResolution+0x386>
 800fff8:	4b22      	ldr	r3, [pc, #136]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 800fffa:	889b      	ldrh	r3, [r3, #4]
 800fffc:	f003 0304 	and.w	r3, r3, #4
 8010000:	2b00      	cmp	r3, #0
 8010002:	f000 8088 	beq.w	8010116 <rfalNfcPollCollResolution+0x386>
    {
        rfalNfcfListenDevice nfcfDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 8010006:	4b1f      	ldr	r3, [pc, #124]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 8010008:	889b      	ldrh	r3, [r3, #4]
 801000a:	f023 0304 	bic.w	r3, r3, #4
 801000e:	b29a      	uxth	r2, r3
 8010010:	4b1c      	ldr	r3, [pc, #112]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 8010012:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ));           /* Initialize RFAL for NFC-F */
 8010014:	4b1b      	ldr	r3, [pc, #108]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 8010016:	7cdb      	ldrb	r3, [r3, #19]
 8010018:	4618      	mov	r0, r3
 801001a:	f004 f84b 	bl	80140b4 <rfalNfcfPollerInitialize>
 801001e:	4603      	mov	r3, r0
 8010020:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8010024:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8010028:	2b00      	cmp	r3, #0
 801002a:	d002      	beq.n	8010032 <rfalNfcPollCollResolution+0x2a2>
 801002c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8010030:	e17a      	b.n	8010328 <rfalNfcPollCollResolution+0x598>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8010032:	f005 fd99 	bl	8015b68 <rfalFieldOnAndStartGT>
 8010036:	4603      	mov	r3, r0
 8010038:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 801003c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8010040:	2b00      	cmp	r3, #0
 8010042:	d002      	beq.n	801004a <rfalNfcPollCollResolution+0x2ba>
 8010044:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8010048:	e16e      	b.n	8010328 <rfalNfcPollCollResolution+0x598>
        
        err = rfalNfcfPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcfDevList, &devCnt );
 801004a:	4b0e      	ldr	r3, [pc, #56]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 801004c:	7b18      	ldrb	r0, [r3, #12]
 801004e:	4b0d      	ldr	r3, [pc, #52]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 8010050:	7c9a      	ldrb	r2, [r3, #18]
 8010052:	4b0c      	ldr	r3, [pc, #48]	; (8010084 <rfalNfcPollCollResolution+0x2f4>)
 8010054:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8010058:	1ad3      	subs	r3, r2, r3
 801005a:	b2d9      	uxtb	r1, r3
 801005c:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8010060:	1d3a      	adds	r2, r7, #4
 8010062:	f004 f895 	bl	8014190 <rfalNfcfPollerCollisionResolution>
 8010066:	4603      	mov	r3, r0
 8010068:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 801006c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8010070:	2b00      	cmp	r3, #0
 8010072:	d14e      	bne.n	8010112 <rfalNfcPollCollResolution+0x382>
 8010074:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010078:	2b00      	cmp	r3, #0
 801007a:	d04a      	beq.n	8010112 <rfalNfcPollCollResolution+0x382>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 801007c:	2300      	movs	r3, #0
 801007e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8010082:	e040      	b.n	8010106 <rfalNfcPollCollResolution+0x376>
 8010084:	20002fcc 	.word	0x20002fcc
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8010088:	4ba9      	ldr	r3, [pc, #676]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 801008a:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801008e:	4619      	mov	r1, r3
 8010090:	4aa7      	ldr	r2, [pc, #668]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 8010092:	460b      	mov	r3, r1
 8010094:	011b      	lsls	r3, r3, #4
 8010096:	1a5b      	subs	r3, r3, r1
 8010098:	00db      	lsls	r3, r3, #3
 801009a:	4413      	add	r3, r2
 801009c:	3390      	adds	r3, #144	; 0x90
 801009e:	2202      	movs	r2, #2
 80100a0:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 80100a2:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80100a6:	4ba2      	ldr	r3, [pc, #648]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 80100a8:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80100ac:	4618      	mov	r0, r3
 80100ae:	49a0      	ldr	r1, [pc, #640]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 80100b0:	4603      	mov	r3, r0
 80100b2:	011b      	lsls	r3, r3, #4
 80100b4:	1a1b      	subs	r3, r3, r0
 80100b6:	00db      	lsls	r3, r3, #3
 80100b8:	440b      	add	r3, r1
 80100ba:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80100be:	4613      	mov	r3, r2
 80100c0:	00db      	lsls	r3, r3, #3
 80100c2:	4413      	add	r3, r2
 80100c4:	005b      	lsls	r3, r3, #1
 80100c6:	4413      	add	r3, r2
 80100c8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80100cc:	4413      	add	r3, r2
 80100ce:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 80100d2:	1c4b      	adds	r3, r1, #1
 80100d4:	6815      	ldr	r5, [r2, #0]
 80100d6:	6854      	ldr	r4, [r2, #4]
 80100d8:	6890      	ldr	r0, [r2, #8]
 80100da:	68d1      	ldr	r1, [r2, #12]
 80100dc:	601d      	str	r5, [r3, #0]
 80100de:	605c      	str	r4, [r3, #4]
 80100e0:	6098      	str	r0, [r3, #8]
 80100e2:	60d9      	str	r1, [r3, #12]
 80100e4:	8a11      	ldrh	r1, [r2, #16]
 80100e6:	7c92      	ldrb	r2, [r2, #18]
 80100e8:	8219      	strh	r1, [r3, #16]
 80100ea:	749a      	strb	r2, [r3, #18]
                gNfcDev.devCnt++;
 80100ec:	4b90      	ldr	r3, [pc, #576]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 80100ee:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80100f2:	3301      	adds	r3, #1
 80100f4:	b2da      	uxtb	r2, r3
 80100f6:	4b8e      	ldr	r3, [pc, #568]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 80100f8:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80100fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010100:	3301      	adds	r3, #1
 8010102:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8010106:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801010a:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 801010e:	429a      	cmp	r2, r3
 8010110:	d3ba      	bcc.n	8010088 <rfalNfcPollCollResolution+0x2f8>
            }
        }
        
        return ERR_BUSY;
 8010112:	2302      	movs	r3, #2
 8010114:	e108      	b.n	8010328 <rfalNfcPollCollResolution+0x598>
    
    /*******************************************************************************/
    /* NFC-V Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCV
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )  /* If a NFC-V device was found/detected, perform Collision Resolution */
 8010116:	4b86      	ldr	r3, [pc, #536]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 8010118:	885b      	ldrh	r3, [r3, #2]
 801011a:	f003 0308 	and.w	r3, r3, #8
 801011e:	2b00      	cmp	r3, #0
 8010120:	f000 8084 	beq.w	801022c <rfalNfcPollCollResolution+0x49c>
 8010124:	4b82      	ldr	r3, [pc, #520]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 8010126:	889b      	ldrh	r3, [r3, #4]
 8010128:	f003 0308 	and.w	r3, r3, #8
 801012c:	2b00      	cmp	r3, #0
 801012e:	d07d      	beq.n	801022c <rfalNfcPollCollResolution+0x49c>
    {
        rfalNfcvListenDevice nfcvDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 8010130:	4b7f      	ldr	r3, [pc, #508]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 8010132:	889b      	ldrh	r3, [r3, #4]
 8010134:	f023 0308 	bic.w	r3, r3, #8
 8010138:	b29a      	uxth	r2, r3
 801013a:	4b7d      	ldr	r3, [pc, #500]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 801013c:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcvPollerInitialize());                                /* Initialize RFAL for NFC-V */
 801013e:	f004 fb3b 	bl	80147b8 <rfalNfcvPollerInitialize>
 8010142:	4603      	mov	r3, r0
 8010144:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8010148:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801014c:	2b00      	cmp	r3, #0
 801014e:	d002      	beq.n	8010156 <rfalNfcPollCollResolution+0x3c6>
 8010150:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8010154:	e0e8      	b.n	8010328 <rfalNfcPollCollResolution+0x598>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8010156:	f005 fd07 	bl	8015b68 <rfalFieldOnAndStartGT>
 801015a:	4603      	mov	r3, r0
 801015c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8010160:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8010164:	2b00      	cmp	r3, #0
 8010166:	d002      	beq.n	801016e <rfalNfcPollCollResolution+0x3de>
 8010168:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801016c:	e0dc      	b.n	8010328 <rfalNfcPollCollResolution+0x598>
        
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 801016e:	4b70      	ldr	r3, [pc, #448]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 8010170:	7c9a      	ldrb	r2, [r3, #18]
 8010172:	4b6f      	ldr	r3, [pc, #444]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 8010174:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8010178:	1ad3      	subs	r3, r2, r3
 801017a:	b2d9      	uxtb	r1, r3
 801017c:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8010180:	1d3a      	adds	r2, r7, #4
 8010182:	2000      	movs	r0, #0
 8010184:	f004 fbc0 	bl	8014908 <rfalNfcvPollerCollisionResolution>
 8010188:	4603      	mov	r3, r0
 801018a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 801018e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8010192:	2b00      	cmp	r3, #0
 8010194:	d148      	bne.n	8010228 <rfalNfcPollCollResolution+0x498>
 8010196:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801019a:	2b00      	cmp	r3, #0
 801019c:	d044      	beq.n	8010228 <rfalNfcPollCollResolution+0x498>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 801019e:	2300      	movs	r3, #0
 80101a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80101a4:	e03a      	b.n	801021c <rfalNfcPollCollResolution+0x48c>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 80101a6:	4b62      	ldr	r3, [pc, #392]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 80101a8:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80101ac:	4619      	mov	r1, r3
 80101ae:	4a60      	ldr	r2, [pc, #384]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 80101b0:	460b      	mov	r3, r1
 80101b2:	011b      	lsls	r3, r3, #4
 80101b4:	1a5b      	subs	r3, r3, r1
 80101b6:	00db      	lsls	r3, r3, #3
 80101b8:	4413      	add	r3, r2
 80101ba:	3390      	adds	r3, #144	; 0x90
 80101bc:	2203      	movs	r2, #3
 80101be:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 80101c0:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80101c4:	4b5a      	ldr	r3, [pc, #360]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 80101c6:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80101ca:	4618      	mov	r0, r3
 80101cc:	4958      	ldr	r1, [pc, #352]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 80101ce:	4603      	mov	r3, r0
 80101d0:	011b      	lsls	r3, r3, #4
 80101d2:	1a1b      	subs	r3, r3, r0
 80101d4:	00db      	lsls	r3, r3, #3
 80101d6:	440b      	add	r3, r1
 80101d8:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80101dc:	4613      	mov	r3, r2
 80101de:	005b      	lsls	r3, r3, #1
 80101e0:	4413      	add	r3, r2
 80101e2:	009b      	lsls	r3, r3, #2
 80101e4:	4413      	add	r3, r2
 80101e6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80101ea:	4413      	add	r3, r2
 80101ec:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 80101f0:	1c4b      	adds	r3, r1, #1
 80101f2:	6814      	ldr	r4, [r2, #0]
 80101f4:	6850      	ldr	r0, [r2, #4]
 80101f6:	6891      	ldr	r1, [r2, #8]
 80101f8:	601c      	str	r4, [r3, #0]
 80101fa:	6058      	str	r0, [r3, #4]
 80101fc:	6099      	str	r1, [r3, #8]
 80101fe:	7b12      	ldrb	r2, [r2, #12]
 8010200:	731a      	strb	r2, [r3, #12]
                gNfcDev.devCnt++;
 8010202:	4b4b      	ldr	r3, [pc, #300]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 8010204:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8010208:	3301      	adds	r3, #1
 801020a:	b2da      	uxtb	r2, r3
 801020c:	4b48      	ldr	r3, [pc, #288]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 801020e:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8010212:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010216:	3301      	adds	r3, #1
 8010218:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801021c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010220:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8010224:	429a      	cmp	r2, r3
 8010226:	d3be      	bcc.n	80101a6 <rfalNfcPollCollResolution+0x416>
            }
        }
        
        return ERR_BUSY;
 8010228:	2302      	movs	r3, #2
 801022a:	e07d      	b.n	8010328 <rfalNfcPollCollResolution+0x598>
    
    /*******************************************************************************/
    /* ST25TB Collision Resolution                                                 */
    /*******************************************************************************/
#if RFAL_FEATURE_ST25TB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) ) /* If a ST25TB device was found/detected, perform Collision Resolution */
 801022c:	4b40      	ldr	r3, [pc, #256]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 801022e:	885b      	ldrh	r3, [r3, #2]
 8010230:	f003 0320 	and.w	r3, r3, #32
 8010234:	2b00      	cmp	r3, #0
 8010236:	d076      	beq.n	8010326 <rfalNfcPollCollResolution+0x596>
 8010238:	4b3d      	ldr	r3, [pc, #244]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 801023a:	889b      	ldrh	r3, [r3, #4]
 801023c:	f003 0320 	and.w	r3, r3, #32
 8010240:	2b00      	cmp	r3, #0
 8010242:	d070      	beq.n	8010326 <rfalNfcPollCollResolution+0x596>
    {
        rfalSt25tbListenDevice st25tbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 8010244:	4b3a      	ldr	r3, [pc, #232]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 8010246:	889b      	ldrh	r3, [r3, #4]
 8010248:	f023 0320 	bic.w	r3, r3, #32
 801024c:	b29a      	uxth	r2, r3
 801024e:	4b38      	ldr	r3, [pc, #224]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 8010250:	809a      	strh	r2, [r3, #4]
        
        rfalSt25tbPollerInitialize();                                                 /* Initialize RFAL for ST25TB */
 8010252:	f007 ff5c 	bl	801810e <rfalSt25tbPollerInitialize>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8010256:	f005 fc87 	bl	8015b68 <rfalFieldOnAndStartGT>
 801025a:	4603      	mov	r3, r0
 801025c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8010260:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8010264:	2b00      	cmp	r3, #0
 8010266:	d002      	beq.n	801026e <rfalNfcPollCollResolution+0x4de>
 8010268:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801026c:	e05c      	b.n	8010328 <rfalNfcPollCollResolution+0x598>
        
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 801026e:	4b30      	ldr	r3, [pc, #192]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 8010270:	7c9a      	ldrb	r2, [r3, #18]
 8010272:	4b2f      	ldr	r3, [pc, #188]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 8010274:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8010278:	1ad3      	subs	r3, r2, r3
 801027a:	b2db      	uxtb	r3, r3
 801027c:	f107 0273 	add.w	r2, r7, #115	; 0x73
 8010280:	1d39      	adds	r1, r7, #4
 8010282:	4618      	mov	r0, r3
 8010284:	f008 f840 	bl	8018308 <rfalSt25tbPollerCollisionResolution>
 8010288:	4603      	mov	r3, r0
 801028a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 801028e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8010292:	2b00      	cmp	r3, #0
 8010294:	d145      	bne.n	8010322 <rfalNfcPollCollResolution+0x592>
 8010296:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801029a:	2b00      	cmp	r3, #0
 801029c:	d041      	beq.n	8010322 <rfalNfcPollCollResolution+0x592>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 801029e:	2300      	movs	r3, #0
 80102a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80102a4:	e037      	b.n	8010316 <rfalNfcPollCollResolution+0x586>
            {
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 80102a6:	4b22      	ldr	r3, [pc, #136]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 80102a8:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80102ac:	4619      	mov	r1, r3
 80102ae:	4a20      	ldr	r2, [pc, #128]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 80102b0:	460b      	mov	r3, r1
 80102b2:	011b      	lsls	r3, r3, #4
 80102b4:	1a5b      	subs	r3, r3, r1
 80102b6:	00db      	lsls	r3, r3, #3
 80102b8:	4413      	add	r3, r2
 80102ba:	3390      	adds	r3, #144	; 0x90
 80102bc:	2204      	movs	r2, #4
 80102be:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 80102c0:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80102c4:	4b1a      	ldr	r3, [pc, #104]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 80102c6:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80102ca:	4618      	mov	r0, r3
 80102cc:	4918      	ldr	r1, [pc, #96]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 80102ce:	4603      	mov	r3, r0
 80102d0:	011b      	lsls	r3, r3, #4
 80102d2:	1a1b      	subs	r3, r3, r0
 80102d4:	00db      	lsls	r3, r3, #3
 80102d6:	440b      	add	r3, r1
 80102d8:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80102dc:	4613      	mov	r3, r2
 80102de:	009b      	lsls	r3, r3, #2
 80102e0:	4413      	add	r3, r2
 80102e2:	005b      	lsls	r3, r3, #1
 80102e4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80102e8:	4413      	add	r3, r2
 80102ea:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 80102ee:	1c4b      	adds	r3, r1, #1
 80102f0:	6810      	ldr	r0, [r2, #0]
 80102f2:	6851      	ldr	r1, [r2, #4]
 80102f4:	6018      	str	r0, [r3, #0]
 80102f6:	6059      	str	r1, [r3, #4]
 80102f8:	8912      	ldrh	r2, [r2, #8]
 80102fa:	811a      	strh	r2, [r3, #8]
                gNfcDev.devCnt++;
 80102fc:	4b0c      	ldr	r3, [pc, #48]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 80102fe:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8010302:	3301      	adds	r3, #1
 8010304:	b2da      	uxtb	r2, r3
 8010306:	4b0a      	ldr	r3, [pc, #40]	; (8010330 <rfalNfcPollCollResolution+0x5a0>)
 8010308:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 801030c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010310:	3301      	adds	r3, #1
 8010312:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8010316:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801031a:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 801031e:	429a      	cmp	r2, r3
 8010320:	d3c1      	bcc.n	80102a6 <rfalNfcPollCollResolution+0x516>
            }
        }
        
        return ERR_BUSY;
 8010322:	2302      	movs	r3, #2
 8010324:	e000      	b.n	8010328 <rfalNfcPollCollResolution+0x598>
    }
#endif /* RFAL_FEATURE_ST25TB */
    
    return ERR_NONE;                                                                  /* All technologies have been performed */
 8010326:	2300      	movs	r3, #0
}
 8010328:	4618      	mov	r0, r3
 801032a:	3778      	adds	r7, #120	; 0x78
 801032c:	46bd      	mov	sp, r7
 801032e:	bdb0      	pop	{r4, r5, r7, pc}
 8010330:	20002fcc 	.word	0x20002fcc

08010334 <rfalNfcPollActivation>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollActivation( uint8_t devIt )
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b08e      	sub	sp, #56	; 0x38
 8010338:	af04      	add	r7, sp, #16
 801033a:	4603      	mov	r3, r0
 801033c:	71fb      	strb	r3, [r7, #7]
    ReturnCode err;
    
    err = ERR_NONE;
 801033e:	2300      	movs	r3, #0
 8010340:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Supress warning when specific RFAL features have been disabled */
    NO_WARNING(err);
    
    if( devIt > gNfcDev.devCnt )
 8010342:	4ba3      	ldr	r3, [pc, #652]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 8010344:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8010348:	79fa      	ldrb	r2, [r7, #7]
 801034a:	429a      	cmp	r2, r3
 801034c:	d901      	bls.n	8010352 <rfalNfcPollActivation+0x1e>
    {
        return ERR_WRONG_STATE;
 801034e:	2321      	movs	r3, #33	; 0x21
 8010350:	e296      	b.n	8010880 <rfalNfcPollActivation+0x54c>
    }
    
    switch( gNfcDev.devList[devIt].type )
 8010352:	79fa      	ldrb	r2, [r7, #7]
 8010354:	499e      	ldr	r1, [pc, #632]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 8010356:	4613      	mov	r3, r2
 8010358:	011b      	lsls	r3, r3, #4
 801035a:	1a9b      	subs	r3, r3, r2
 801035c:	00db      	lsls	r3, r3, #3
 801035e:	440b      	add	r3, r1
 8010360:	3390      	adds	r3, #144	; 0x90
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	2b05      	cmp	r3, #5
 8010366:	f200 827e 	bhi.w	8010866 <rfalNfcPollActivation+0x532>
 801036a:	a201      	add	r2, pc, #4	; (adr r2, 8010370 <rfalNfcPollActivation+0x3c>)
 801036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010370:	080103c3 	.word	0x080103c3
 8010374:	080105d5 	.word	0x080105d5
 8010378:	080106c9 	.word	0x080106c9
 801037c:	080107c3 	.word	0x080107c3
 8010380:	08010815 	.word	0x08010815
 8010384:	08010389 	.word	0x08010389
        /*******************************************************************************/
    #if RFAL_FEATURE_NFC_DEP
        case RFAL_NFC_LISTEN_TYPE_AP2P:
            /* Activation has already been perfomed (ATR_REQ) */
        
            gNfcDev.devList[devIt].nfcid     = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8010388:	79f9      	ldrb	r1, [r7, #7]
 801038a:	79fa      	ldrb	r2, [r7, #7]
 801038c:	460b      	mov	r3, r1
 801038e:	011b      	lsls	r3, r3, #4
 8010390:	1a5b      	subs	r3, r3, r1
 8010392:	00db      	lsls	r3, r3, #3
 8010394:	33b0      	adds	r3, #176	; 0xb0
 8010396:	498e      	ldr	r1, [pc, #568]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 8010398:	440b      	add	r3, r1
 801039a:	1c99      	adds	r1, r3, #2
 801039c:	488c      	ldr	r0, [pc, #560]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 801039e:	4613      	mov	r3, r2
 80103a0:	011b      	lsls	r3, r3, #4
 80103a2:	1a9b      	subs	r3, r3, r2
 80103a4:	00db      	lsls	r3, r3, #3
 80103a6:	4403      	add	r3, r0
 80103a8:	33a8      	adds	r3, #168	; 0xa8
 80103aa:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen  = RFAL_NFCDEP_NFCID3_LEN;
 80103ac:	79fa      	ldrb	r2, [r7, #7]
 80103ae:	4988      	ldr	r1, [pc, #544]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 80103b0:	4613      	mov	r3, r2
 80103b2:	011b      	lsls	r3, r3, #4
 80103b4:	1a9b      	subs	r3, r3, r2
 80103b6:	00db      	lsls	r3, r3, #3
 80103b8:	440b      	add	r3, r1
 80103ba:	33ac      	adds	r3, #172	; 0xac
 80103bc:	220a      	movs	r2, #10
 80103be:	701a      	strb	r2, [r3, #0]
            break;
 80103c0:	e253      	b.n	801086a <rfalNfcPollActivation+0x536>
        /* Passive NFC-A Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCA
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            
            rfalNfcaPollerInitialize();
 80103c2:	f002 fe83 	bl	80130cc <rfalNfcaPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfca.isSleep )                             /* Check if desired device is in Sleep */
 80103c6:	79fa      	ldrb	r2, [r7, #7]
 80103c8:	4981      	ldr	r1, [pc, #516]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 80103ca:	4613      	mov	r3, r2
 80103cc:	011b      	lsls	r3, r3, #4
 80103ce:	1a9b      	subs	r3, r3, r2
 80103d0:	00db      	lsls	r3, r3, #3
 80103d2:	440b      	add	r3, r1
 80103d4:	33a6      	adds	r3, #166	; 0xa6
 80103d6:	781b      	ldrb	r3, [r3, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d02a      	beq.n	8010432 <rfalNfcPollActivation+0xfe>
            {
                rfalNfcaSensRes sensRes;
                rfalNfcaSelRes  selRes;
                
                EXIT_ON_ERR( err, rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes ) ); /* Wake up all cards  */
 80103dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80103e0:	4619      	mov	r1, r3
 80103e2:	2052      	movs	r0, #82	; 0x52
 80103e4:	f002 fe96 	bl	8013114 <rfalNfcaPollerCheckPresence>
 80103e8:	4603      	mov	r3, r0
 80103ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80103ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d001      	beq.n	80103f6 <rfalNfcPollActivation+0xc2>
 80103f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80103f4:	e244      	b.n	8010880 <rfalNfcPollActivation+0x54c>
                EXIT_ON_ERR( err, rfalNfcaPollerSelect( gNfcDev.devList[devIt].dev.nfca.nfcId1, gNfcDev.devList[devIt].dev.nfca.nfcId1Len, &selRes ) ); /* Select specific device  */
 80103f6:	79fa      	ldrb	r2, [r7, #7]
 80103f8:	4613      	mov	r3, r2
 80103fa:	011b      	lsls	r3, r3, #4
 80103fc:	1a9b      	subs	r3, r3, r2
 80103fe:	00db      	lsls	r3, r3, #3
 8010400:	3390      	adds	r3, #144	; 0x90
 8010402:	4a73      	ldr	r2, [pc, #460]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 8010404:	4413      	add	r3, r2
 8010406:	1d98      	adds	r0, r3, #6
 8010408:	79fa      	ldrb	r2, [r7, #7]
 801040a:	4971      	ldr	r1, [pc, #452]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 801040c:	4613      	mov	r3, r2
 801040e:	011b      	lsls	r3, r3, #4
 8010410:	1a9b      	subs	r3, r3, r2
 8010412:	00db      	lsls	r3, r3, #3
 8010414:	440b      	add	r3, r1
 8010416:	3395      	adds	r3, #149	; 0x95
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	f107 0220 	add.w	r2, r7, #32
 801041e:	4619      	mov	r1, r3
 8010420:	f003 f9ae 	bl	8013780 <rfalNfcaPollerSelect>
 8010424:	4603      	mov	r3, r0
 8010426:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010428:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801042a:	2b00      	cmp	r3, #0
 801042c:	d001      	beq.n	8010432 <rfalNfcPollActivation+0xfe>
 801042e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010430:	e226      	b.n	8010880 <rfalNfcPollActivation+0x54c>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.nfcId1;
 8010432:	79f9      	ldrb	r1, [r7, #7]
 8010434:	79fa      	ldrb	r2, [r7, #7]
 8010436:	460b      	mov	r3, r1
 8010438:	011b      	lsls	r3, r3, #4
 801043a:	1a5b      	subs	r3, r3, r1
 801043c:	00db      	lsls	r3, r3, #3
 801043e:	3390      	adds	r3, #144	; 0x90
 8010440:	4963      	ldr	r1, [pc, #396]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 8010442:	440b      	add	r3, r1
 8010444:	1d99      	adds	r1, r3, #6
 8010446:	4862      	ldr	r0, [pc, #392]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 8010448:	4613      	mov	r3, r2
 801044a:	011b      	lsls	r3, r3, #4
 801044c:	1a9b      	subs	r3, r3, r2
 801044e:	00db      	lsls	r3, r3, #3
 8010450:	4403      	add	r3, r0
 8010452:	33a8      	adds	r3, #168	; 0xa8
 8010454:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = gNfcDev.devList[devIt].dev.nfca.nfcId1Len;
 8010456:	79f9      	ldrb	r1, [r7, #7]
 8010458:	79fa      	ldrb	r2, [r7, #7]
 801045a:	485d      	ldr	r0, [pc, #372]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 801045c:	460b      	mov	r3, r1
 801045e:	011b      	lsls	r3, r3, #4
 8010460:	1a5b      	subs	r3, r3, r1
 8010462:	00db      	lsls	r3, r3, #3
 8010464:	4403      	add	r3, r0
 8010466:	3395      	adds	r3, #149	; 0x95
 8010468:	7818      	ldrb	r0, [r3, #0]
 801046a:	4959      	ldr	r1, [pc, #356]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 801046c:	4613      	mov	r3, r2
 801046e:	011b      	lsls	r3, r3, #4
 8010470:	1a9b      	subs	r3, r3, r2
 8010472:	00db      	lsls	r3, r3, #3
 8010474:	440b      	add	r3, r1
 8010476:	33ac      	adds	r3, #172	; 0xac
 8010478:	4602      	mov	r2, r0
 801047a:	701a      	strb	r2, [r3, #0]
            
            /*******************************************************************************/
            /* Perform protocol specific activation                                        */
            switch( gNfcDev.devList[devIt].dev.nfca.type )
 801047c:	79fa      	ldrb	r2, [r7, #7]
 801047e:	4954      	ldr	r1, [pc, #336]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 8010480:	4613      	mov	r3, r2
 8010482:	011b      	lsls	r3, r3, #4
 8010484:	1a9b      	subs	r3, r3, r2
 8010486:	00db      	lsls	r3, r3, #3
 8010488:	440b      	add	r3, r1
 801048a:	3391      	adds	r3, #145	; 0x91
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	2b20      	cmp	r3, #32
 8010490:	d03e      	beq.n	8010510 <rfalNfcPollActivation+0x1dc>
 8010492:	2b20      	cmp	r3, #32
 8010494:	dc04      	bgt.n	80104a0 <rfalNfcPollActivation+0x16c>
 8010496:	2b00      	cmp	r3, #0
 8010498:	d02f      	beq.n	80104fa <rfalNfcPollActivation+0x1c6>
 801049a:	2b01      	cmp	r3, #1
 801049c:	d005      	beq.n	80104aa <rfalNfcPollActivation+0x176>
 801049e:	e093      	b.n	80105c8 <rfalNfcPollActivation+0x294>
 80104a0:	2b40      	cmp	r3, #64	; 0x40
 80104a2:	d056      	beq.n	8010552 <rfalNfcPollActivation+0x21e>
 80104a4:	2b60      	cmp	r3, #96	; 0x60
 80104a6:	d054      	beq.n	8010552 <rfalNfcPollActivation+0x21e>
 80104a8:	e08e      	b.n	80105c8 <rfalNfcPollActivation+0x294>
                /*******************************************************************************/
                case RFAL_NFCA_T1T:
                
                    /* No further activation needed for T1T (RID already performed) */
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.ridRes.uid;
 80104aa:	79f9      	ldrb	r1, [r7, #7]
 80104ac:	79fa      	ldrb	r2, [r7, #7]
 80104ae:	460b      	mov	r3, r1
 80104b0:	011b      	lsls	r3, r3, #4
 80104b2:	1a5b      	subs	r3, r3, r1
 80104b4:	00db      	lsls	r3, r3, #3
 80104b6:	3398      	adds	r3, #152	; 0x98
 80104b8:	4945      	ldr	r1, [pc, #276]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 80104ba:	440b      	add	r3, r1
 80104bc:	f103 010a 	add.w	r1, r3, #10
 80104c0:	4843      	ldr	r0, [pc, #268]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 80104c2:	4613      	mov	r3, r2
 80104c4:	011b      	lsls	r3, r3, #4
 80104c6:	1a9b      	subs	r3, r3, r2
 80104c8:	00db      	lsls	r3, r3, #3
 80104ca:	4403      	add	r3, r0
 80104cc:	33a8      	adds	r3, #168	; 0xa8
 80104ce:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 80104d0:	79fa      	ldrb	r2, [r7, #7]
 80104d2:	493f      	ldr	r1, [pc, #252]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 80104d4:	4613      	mov	r3, r2
 80104d6:	011b      	lsls	r3, r3, #4
 80104d8:	1a9b      	subs	r3, r3, r2
 80104da:	00db      	lsls	r3, r3, #3
 80104dc:	440b      	add	r3, r1
 80104de:	33ac      	adds	r3, #172	; 0xac
 80104e0:	2204      	movs	r2, #4
 80104e2:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 80104e4:	79fa      	ldrb	r2, [r7, #7]
 80104e6:	493a      	ldr	r1, [pc, #232]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 80104e8:	4613      	mov	r3, r2
 80104ea:	011b      	lsls	r3, r3, #4
 80104ec:	1a9b      	subs	r3, r3, r2
 80104ee:	00db      	lsls	r3, r3, #3
 80104f0:	440b      	add	r3, r1
 80104f2:	33ad      	adds	r3, #173	; 0xad
 80104f4:	2200      	movs	r2, #0
 80104f6:	701a      	strb	r2, [r3, #0]
                    break;
 80104f8:	e068      	b.n	80105cc <rfalNfcPollActivation+0x298>
                
                case RFAL_NFCA_T2T:
                    
                    /* No further activation needed for a T2T */

                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 80104fa:	79fa      	ldrb	r2, [r7, #7]
 80104fc:	4934      	ldr	r1, [pc, #208]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 80104fe:	4613      	mov	r3, r2
 8010500:	011b      	lsls	r3, r3, #4
 8010502:	1a9b      	subs	r3, r3, r2
 8010504:	00db      	lsls	r3, r3, #3
 8010506:	440b      	add	r3, r1
 8010508:	33ad      	adds	r3, #173	; 0xad
 801050a:	2200      	movs	r2, #0
 801050c:	701a      	strb	r2, [r3, #0]
                    break;
 801050e:	e05d      	b.n	80105cc <rfalNfcPollActivation+0x298>
                /*******************************************************************************/
                case RFAL_NFCA_T4T:                                                   /* Device supports ISO-DEP */
                
                #if RFAL_FEATURE_ISO_DEP_POLL
                    /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported */
                    rfalIsoDepInitialize();
 8010510:	f7fd fc08 	bl	800dd24 <rfalIsoDepInitialize>
                    EXIT_ON_ERR( err, rfalIsoDepPollAHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, &gNfcDev.devList[devIt].proto.isoDep ) );
 8010514:	79fa      	ldrb	r2, [r7, #7]
 8010516:	4613      	mov	r3, r2
 8010518:	011b      	lsls	r3, r3, #4
 801051a:	1a9b      	subs	r3, r3, r2
 801051c:	00db      	lsls	r3, r3, #3
 801051e:	33b0      	adds	r3, #176	; 0xb0
 8010520:	4a2b      	ldr	r2, [pc, #172]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 8010522:	4413      	add	r3, r2
 8010524:	2202      	movs	r2, #2
 8010526:	2100      	movs	r1, #0
 8010528:	2008      	movs	r0, #8
 801052a:	f7fe f9ad 	bl	800e888 <rfalIsoDepPollAHandleActivation>
 801052e:	4603      	mov	r3, r0
 8010530:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010532:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010534:	2b00      	cmp	r3, #0
 8010536:	d001      	beq.n	801053c <rfalNfcPollActivation+0x208>
 8010538:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801053a:	e1a1      	b.n	8010880 <rfalNfcPollActivation+0x54c>
                    
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;   /* NFC-A T4T device activated */
 801053c:	79fa      	ldrb	r2, [r7, #7]
 801053e:	4924      	ldr	r1, [pc, #144]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 8010540:	4613      	mov	r3, r2
 8010542:	011b      	lsls	r3, r3, #4
 8010544:	1a9b      	subs	r3, r3, r2
 8010546:	00db      	lsls	r3, r3, #3
 8010548:	440b      	add	r3, r1
 801054a:	33ad      	adds	r3, #173	; 0xad
 801054c:	2201      	movs	r2, #1
 801054e:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No ISO-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                    break;
 8010550:	e03c      	b.n	80105cc <rfalNfcPollActivation+0x298>
                case RFAL_NFCA_T4T_NFCDEP:                                            /* Device supports both T4T and NFC-DEP */
                case RFAL_NFCA_NFCDEP:                                                /* Device supports NFC-DEP */
                
                #if RFAL_FEATURE_NFC_DEP
                    /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                    EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8010552:	79fa      	ldrb	r2, [r7, #7]
 8010554:	4613      	mov	r3, r2
 8010556:	011b      	lsls	r3, r3, #4
 8010558:	1a9b      	subs	r3, r3, r2
 801055a:	00db      	lsls	r3, r3, #3
 801055c:	3390      	adds	r3, #144	; 0x90
 801055e:	4a1c      	ldr	r2, [pc, #112]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 8010560:	1898      	adds	r0, r3, r2
 8010562:	2300      	movs	r3, #0
 8010564:	2200      	movs	r2, #0
 8010566:	2100      	movs	r1, #0
 8010568:	f000 fae4 	bl	8010b34 <rfalNfcNfcDepActivate>
 801056c:	4603      	mov	r3, r0
 801056e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010570:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010572:	2b00      	cmp	r3, #0
 8010574:	d001      	beq.n	801057a <rfalNfcPollActivation+0x246>
 8010576:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010578:	e182      	b.n	8010880 <rfalNfcPollActivation+0x54c>
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 801057a:	79f9      	ldrb	r1, [r7, #7]
 801057c:	79fa      	ldrb	r2, [r7, #7]
 801057e:	460b      	mov	r3, r1
 8010580:	011b      	lsls	r3, r3, #4
 8010582:	1a5b      	subs	r3, r3, r1
 8010584:	00db      	lsls	r3, r3, #3
 8010586:	33b0      	adds	r3, #176	; 0xb0
 8010588:	4911      	ldr	r1, [pc, #68]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 801058a:	440b      	add	r3, r1
 801058c:	1c99      	adds	r1, r3, #2
 801058e:	4810      	ldr	r0, [pc, #64]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 8010590:	4613      	mov	r3, r2
 8010592:	011b      	lsls	r3, r3, #4
 8010594:	1a9b      	subs	r3, r3, r2
 8010596:	00db      	lsls	r3, r3, #3
 8010598:	4403      	add	r3, r0
 801059a:	33a8      	adds	r3, #168	; 0xa8
 801059c:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 801059e:	79fa      	ldrb	r2, [r7, #7]
 80105a0:	490b      	ldr	r1, [pc, #44]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 80105a2:	4613      	mov	r3, r2
 80105a4:	011b      	lsls	r3, r3, #4
 80105a6:	1a9b      	subs	r3, r3, r2
 80105a8:	00db      	lsls	r3, r3, #3
 80105aa:	440b      	add	r3, r1
 80105ac:	33ac      	adds	r3, #172	; 0xac
 80105ae:	220a      	movs	r2, #10
 80105b0:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;   /* NFC-A P2P device activated */
 80105b2:	79fa      	ldrb	r2, [r7, #7]
 80105b4:	4906      	ldr	r1, [pc, #24]	; (80105d0 <rfalNfcPollActivation+0x29c>)
 80105b6:	4613      	mov	r3, r2
 80105b8:	011b      	lsls	r3, r3, #4
 80105ba:	1a9b      	subs	r3, r3, r2
 80105bc:	00db      	lsls	r3, r3, #3
 80105be:	440b      	add	r3, r1
 80105c0:	33ad      	adds	r3, #173	; 0xad
 80105c2:	2202      	movs	r2, #2
 80105c4:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No NFC-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_NFC_DEP */
                    break;
 80105c6:	e001      	b.n	80105cc <rfalNfcPollActivation+0x298>
                
                /*******************************************************************************/
                default:
                    return ERR_WRONG_STATE;
 80105c8:	2321      	movs	r3, #33	; 0x21
 80105ca:	e159      	b.n	8010880 <rfalNfcPollActivation+0x54c>
            }
            break;
 80105cc:	e14d      	b.n	801086a <rfalNfcPollActivation+0x536>
 80105ce:	bf00      	nop
 80105d0:	20002fcc 	.word	0x20002fcc
        /* Passive NFC-B Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCB
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            
            rfalNfcbPollerInitialize();
 80105d4:	f003 f99a 	bl	801390c <rfalNfcbPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfcb.isSleep )                             /* Check if desired device is in Sleep */
 80105d8:	79fa      	ldrb	r2, [r7, #7]
 80105da:	49ab      	ldr	r1, [pc, #684]	; (8010888 <rfalNfcPollActivation+0x554>)
 80105dc:	4613      	mov	r3, r2
 80105de:	011b      	lsls	r3, r3, #4
 80105e0:	1a9b      	subs	r3, r3, r2
 80105e2:	00db      	lsls	r3, r3, #3
 80105e4:	440b      	add	r3, r1
 80105e6:	339f      	adds	r3, #159	; 0x9f
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d007      	beq.n	80105fe <rfalNfcPollActivation+0x2ca>
            {
                rfalNfcbSensbRes sensbRes;
                uint8_t          sensbResLen;
                
                /* Wake up all cards. SENSB_RES may return collision but the NFCID0 is available to explicitly select NFC-B card via ATTRIB; so error will be ignored here */
                rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen );
 80105ee:	f107 030f 	add.w	r3, r7, #15
 80105f2:	f107 0210 	add.w	r2, r7, #16
 80105f6:	2100      	movs	r1, #0
 80105f8:	2008      	movs	r0, #8
 80105fa:	f003 f9b3 	bl	8013964 <rfalNfcbPollerCheckPresence>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcb.sensbRes.nfcid0;
 80105fe:	79f9      	ldrb	r1, [r7, #7]
 8010600:	79fa      	ldrb	r2, [r7, #7]
 8010602:	460b      	mov	r3, r1
 8010604:	011b      	lsls	r3, r3, #4
 8010606:	1a5b      	subs	r3, r3, r1
 8010608:	00db      	lsls	r3, r3, #3
 801060a:	3390      	adds	r3, #144	; 0x90
 801060c:	499e      	ldr	r1, [pc, #632]	; (8010888 <rfalNfcPollActivation+0x554>)
 801060e:	440b      	add	r3, r1
 8010610:	1cd9      	adds	r1, r3, #3
 8010612:	489d      	ldr	r0, [pc, #628]	; (8010888 <rfalNfcPollActivation+0x554>)
 8010614:	4613      	mov	r3, r2
 8010616:	011b      	lsls	r3, r3, #4
 8010618:	1a9b      	subs	r3, r3, r2
 801061a:	00db      	lsls	r3, r3, #3
 801061c:	4403      	add	r3, r0
 801061e:	33a8      	adds	r3, #168	; 0xa8
 8010620:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 8010622:	79fa      	ldrb	r2, [r7, #7]
 8010624:	4998      	ldr	r1, [pc, #608]	; (8010888 <rfalNfcPollActivation+0x554>)
 8010626:	4613      	mov	r3, r2
 8010628:	011b      	lsls	r3, r3, #4
 801062a:	1a9b      	subs	r3, r3, r2
 801062c:	00db      	lsls	r3, r3, #3
 801062e:	440b      	add	r3, r1
 8010630:	33ac      	adds	r3, #172	; 0xac
 8010632:	2204      	movs	r2, #4
 8010634:	701a      	strb	r2, [r3, #0]
            
        #if RFAL_FEATURE_ISO_DEP_POLL
            /* Check if device supports  ISO-DEP (ISO14443-4) */
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 8010636:	79fa      	ldrb	r2, [r7, #7]
 8010638:	4993      	ldr	r1, [pc, #588]	; (8010888 <rfalNfcPollActivation+0x554>)
 801063a:	4613      	mov	r3, r2
 801063c:	011b      	lsls	r3, r3, #4
 801063e:	1a9b      	subs	r3, r3, r2
 8010640:	00db      	lsls	r3, r3, #3
 8010642:	440b      	add	r3, r1
 8010644:	339c      	adds	r3, #156	; 0x9c
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	f003 0301 	and.w	r3, r3, #1
 801064c:	2b00      	cmp	r3, #0
 801064e:	d030      	beq.n	80106b2 <rfalNfcPollActivation+0x37e>
            {
                rfalIsoDepInitialize();
 8010650:	f7fd fb68 	bl	800dd24 <rfalIsoDepInitialize>
                /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported    */
                EXIT_ON_ERR( err, rfalIsoDepPollBHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, 0x00, &gNfcDev.devList[devIt].dev.nfcb, NULL, 0, &gNfcDev.devList[devIt].proto.isoDep ) );
 8010654:	79fa      	ldrb	r2, [r7, #7]
 8010656:	4613      	mov	r3, r2
 8010658:	011b      	lsls	r3, r3, #4
 801065a:	1a9b      	subs	r3, r3, r2
 801065c:	00db      	lsls	r3, r3, #3
 801065e:	3390      	adds	r3, #144	; 0x90
 8010660:	4a89      	ldr	r2, [pc, #548]	; (8010888 <rfalNfcPollActivation+0x554>)
 8010662:	4413      	add	r3, r2
 8010664:	1c59      	adds	r1, r3, #1
 8010666:	79fa      	ldrb	r2, [r7, #7]
 8010668:	4613      	mov	r3, r2
 801066a:	011b      	lsls	r3, r3, #4
 801066c:	1a9b      	subs	r3, r3, r2
 801066e:	00db      	lsls	r3, r3, #3
 8010670:	33b0      	adds	r3, #176	; 0xb0
 8010672:	4a85      	ldr	r2, [pc, #532]	; (8010888 <rfalNfcPollActivation+0x554>)
 8010674:	4413      	add	r3, r2
 8010676:	9303      	str	r3, [sp, #12]
 8010678:	2300      	movs	r3, #0
 801067a:	9302      	str	r3, [sp, #8]
 801067c:	2300      	movs	r3, #0
 801067e:	9301      	str	r3, [sp, #4]
 8010680:	9100      	str	r1, [sp, #0]
 8010682:	2300      	movs	r3, #0
 8010684:	2202      	movs	r2, #2
 8010686:	2100      	movs	r1, #0
 8010688:	2008      	movs	r0, #8
 801068a:	f7fe fa57 	bl	800eb3c <rfalIsoDepPollBHandleActivation>
 801068e:	4603      	mov	r3, r0
 8010690:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010692:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010694:	2b00      	cmp	r3, #0
 8010696:	d001      	beq.n	801069c <rfalNfcPollActivation+0x368>
 8010698:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801069a:	e0f1      	b.n	8010880 <rfalNfcPollActivation+0x54c>
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;       /* NFC-B T4T device activated */
 801069c:	79fa      	ldrb	r2, [r7, #7]
 801069e:	497a      	ldr	r1, [pc, #488]	; (8010888 <rfalNfcPollActivation+0x554>)
 80106a0:	4613      	mov	r3, r2
 80106a2:	011b      	lsls	r3, r3, #4
 80106a4:	1a9b      	subs	r3, r3, r2
 80106a6:	00db      	lsls	r3, r3, #3
 80106a8:	440b      	add	r3, r1
 80106aa:	33ad      	adds	r3, #173	; 0xad
 80106ac:	2201      	movs	r2, #1
 80106ae:	701a      	strb	r2, [r3, #0]
                break;
 80106b0:	e0db      	b.n	801086a <rfalNfcPollActivation+0x536>
            }
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
            
            gNfcDev.devList[devIt].rfInterface =  RFAL_NFC_INTERFACE_RF;              /* NFC-B device activated     */
 80106b2:	79fa      	ldrb	r2, [r7, #7]
 80106b4:	4974      	ldr	r1, [pc, #464]	; (8010888 <rfalNfcPollActivation+0x554>)
 80106b6:	4613      	mov	r3, r2
 80106b8:	011b      	lsls	r3, r3, #4
 80106ba:	1a9b      	subs	r3, r3, r2
 80106bc:	00db      	lsls	r3, r3, #3
 80106be:	440b      	add	r3, r1
 80106c0:	33ad      	adds	r3, #173	; 0xad
 80106c2:	2200      	movs	r2, #0
 80106c4:	701a      	strb	r2, [r3, #0]
            break;
 80106c6:	e0d0      	b.n	801086a <rfalNfcPollActivation+0x536>
        /* Passive NFC-F Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCF
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            
            rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR );
 80106c8:	4b6f      	ldr	r3, [pc, #444]	; (8010888 <rfalNfcPollActivation+0x554>)
 80106ca:	7cdb      	ldrb	r3, [r3, #19]
 80106cc:	4618      	mov	r0, r3
 80106ce:	f003 fcf1 	bl	80140b4 <rfalNfcfPollerInitialize>
        
        #if RFAL_FEATURE_NFC_DEP
            if( rfalNfcfIsNfcDepSupported( &gNfcDev.devList[devIt].dev.nfcf ) )
 80106d2:	79fa      	ldrb	r2, [r7, #7]
 80106d4:	496c      	ldr	r1, [pc, #432]	; (8010888 <rfalNfcPollActivation+0x554>)
 80106d6:	4613      	mov	r3, r2
 80106d8:	011b      	lsls	r3, r3, #4
 80106da:	1a9b      	subs	r3, r3, r2
 80106dc:	00db      	lsls	r3, r3, #3
 80106de:	440b      	add	r3, r1
 80106e0:	3393      	adds	r3, #147	; 0x93
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	2b01      	cmp	r3, #1
 80106e6:	d145      	bne.n	8010774 <rfalNfcPollActivation+0x440>
 80106e8:	79fa      	ldrb	r2, [r7, #7]
 80106ea:	4967      	ldr	r1, [pc, #412]	; (8010888 <rfalNfcPollActivation+0x554>)
 80106ec:	4613      	mov	r3, r2
 80106ee:	011b      	lsls	r3, r3, #4
 80106f0:	1a9b      	subs	r3, r3, r2
 80106f2:	00db      	lsls	r3, r3, #3
 80106f4:	440b      	add	r3, r1
 80106f6:	3394      	adds	r3, #148	; 0x94
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	2bfe      	cmp	r3, #254	; 0xfe
 80106fc:	d13a      	bne.n	8010774 <rfalNfcPollActivation+0x440>
            {
                /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 80106fe:	79fa      	ldrb	r2, [r7, #7]
 8010700:	4613      	mov	r3, r2
 8010702:	011b      	lsls	r3, r3, #4
 8010704:	1a9b      	subs	r3, r3, r2
 8010706:	00db      	lsls	r3, r3, #3
 8010708:	3390      	adds	r3, #144	; 0x90
 801070a:	4a5f      	ldr	r2, [pc, #380]	; (8010888 <rfalNfcPollActivation+0x554>)
 801070c:	1898      	adds	r0, r3, r2
 801070e:	2300      	movs	r3, #0
 8010710:	2200      	movs	r2, #0
 8010712:	2100      	movs	r1, #0
 8010714:	f000 fa0e 	bl	8010b34 <rfalNfcNfcDepActivate>
 8010718:	4603      	mov	r3, r0
 801071a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801071c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801071e:	2b00      	cmp	r3, #0
 8010720:	d001      	beq.n	8010726 <rfalNfcPollActivation+0x3f2>
 8010722:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010724:	e0ac      	b.n	8010880 <rfalNfcPollActivation+0x54c>
                
                /* Set NFCID */
                gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8010726:	79f9      	ldrb	r1, [r7, #7]
 8010728:	79fa      	ldrb	r2, [r7, #7]
 801072a:	460b      	mov	r3, r1
 801072c:	011b      	lsls	r3, r3, #4
 801072e:	1a5b      	subs	r3, r3, r1
 8010730:	00db      	lsls	r3, r3, #3
 8010732:	33b0      	adds	r3, #176	; 0xb0
 8010734:	4954      	ldr	r1, [pc, #336]	; (8010888 <rfalNfcPollActivation+0x554>)
 8010736:	440b      	add	r3, r1
 8010738:	1c99      	adds	r1, r3, #2
 801073a:	4853      	ldr	r0, [pc, #332]	; (8010888 <rfalNfcPollActivation+0x554>)
 801073c:	4613      	mov	r3, r2
 801073e:	011b      	lsls	r3, r3, #4
 8010740:	1a9b      	subs	r3, r3, r2
 8010742:	00db      	lsls	r3, r3, #3
 8010744:	4403      	add	r3, r0
 8010746:	33a8      	adds	r3, #168	; 0xa8
 8010748:	6019      	str	r1, [r3, #0]
                gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 801074a:	79fa      	ldrb	r2, [r7, #7]
 801074c:	494e      	ldr	r1, [pc, #312]	; (8010888 <rfalNfcPollActivation+0x554>)
 801074e:	4613      	mov	r3, r2
 8010750:	011b      	lsls	r3, r3, #4
 8010752:	1a9b      	subs	r3, r3, r2
 8010754:	00db      	lsls	r3, r3, #3
 8010756:	440b      	add	r3, r1
 8010758:	33ac      	adds	r3, #172	; 0xac
 801075a:	220a      	movs	r2, #10
 801075c:	701a      	strb	r2, [r3, #0]
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;       /* NFC-F P2P device activated */
 801075e:	79fa      	ldrb	r2, [r7, #7]
 8010760:	4949      	ldr	r1, [pc, #292]	; (8010888 <rfalNfcPollActivation+0x554>)
 8010762:	4613      	mov	r3, r2
 8010764:	011b      	lsls	r3, r3, #4
 8010766:	1a9b      	subs	r3, r3, r2
 8010768:	00db      	lsls	r3, r3, #3
 801076a:	440b      	add	r3, r1
 801076c:	33ad      	adds	r3, #173	; 0xad
 801076e:	2202      	movs	r2, #2
 8010770:	701a      	strb	r2, [r3, #0]
                break;
 8010772:	e07a      	b.n	801086a <rfalNfcPollActivation+0x536>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcf.sensfRes.NFCID2;
 8010774:	79f9      	ldrb	r1, [r7, #7]
 8010776:	79fa      	ldrb	r2, [r7, #7]
 8010778:	460b      	mov	r3, r1
 801077a:	011b      	lsls	r3, r3, #4
 801077c:	1a5b      	subs	r3, r3, r1
 801077e:	00db      	lsls	r3, r3, #3
 8010780:	3390      	adds	r3, #144	; 0x90
 8010782:	4941      	ldr	r1, [pc, #260]	; (8010888 <rfalNfcPollActivation+0x554>)
 8010784:	440b      	add	r3, r1
 8010786:	1cd9      	adds	r1, r3, #3
 8010788:	483f      	ldr	r0, [pc, #252]	; (8010888 <rfalNfcPollActivation+0x554>)
 801078a:	4613      	mov	r3, r2
 801078c:	011b      	lsls	r3, r3, #4
 801078e:	1a9b      	subs	r3, r3, r2
 8010790:	00db      	lsls	r3, r3, #3
 8010792:	4403      	add	r3, r0
 8010794:	33a8      	adds	r3, #168	; 0xa8
 8010796:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8010798:	79fa      	ldrb	r2, [r7, #7]
 801079a:	493b      	ldr	r1, [pc, #236]	; (8010888 <rfalNfcPollActivation+0x554>)
 801079c:	4613      	mov	r3, r2
 801079e:	011b      	lsls	r3, r3, #4
 80107a0:	1a9b      	subs	r3, r3, r2
 80107a2:	00db      	lsls	r3, r3, #3
 80107a4:	440b      	add	r3, r1
 80107a6:	33ac      	adds	r3, #172	; 0xac
 80107a8:	2208      	movs	r2, #8
 80107aa:	701a      	strb	r2, [r3, #0]
            
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-F T3T device activated */
 80107ac:	79fa      	ldrb	r2, [r7, #7]
 80107ae:	4936      	ldr	r1, [pc, #216]	; (8010888 <rfalNfcPollActivation+0x554>)
 80107b0:	4613      	mov	r3, r2
 80107b2:	011b      	lsls	r3, r3, #4
 80107b4:	1a9b      	subs	r3, r3, r2
 80107b6:	00db      	lsls	r3, r3, #3
 80107b8:	440b      	add	r3, r1
 80107ba:	33ad      	adds	r3, #173	; 0xad
 80107bc:	2200      	movs	r2, #0
 80107be:	701a      	strb	r2, [r3, #0]
            break;
 80107c0:	e053      	b.n	801086a <rfalNfcPollActivation+0x536>
        /* Passive NFC-V Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCV
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            
            rfalNfcvPollerInitialize();
 80107c2:	f003 fff9 	bl	80147b8 <rfalNfcvPollerInitialize>
            
            /* No specific activation needed for a T5T */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcv.InvRes.UID;
 80107c6:	79f9      	ldrb	r1, [r7, #7]
 80107c8:	79fa      	ldrb	r2, [r7, #7]
 80107ca:	460b      	mov	r3, r1
 80107cc:	011b      	lsls	r3, r3, #4
 80107ce:	1a5b      	subs	r3, r3, r1
 80107d0:	00db      	lsls	r3, r3, #3
 80107d2:	3390      	adds	r3, #144	; 0x90
 80107d4:	492c      	ldr	r1, [pc, #176]	; (8010888 <rfalNfcPollActivation+0x554>)
 80107d6:	440b      	add	r3, r1
 80107d8:	1cd9      	adds	r1, r3, #3
 80107da:	482b      	ldr	r0, [pc, #172]	; (8010888 <rfalNfcPollActivation+0x554>)
 80107dc:	4613      	mov	r3, r2
 80107de:	011b      	lsls	r3, r3, #4
 80107e0:	1a9b      	subs	r3, r3, r2
 80107e2:	00db      	lsls	r3, r3, #3
 80107e4:	4403      	add	r3, r0
 80107e6:	33a8      	adds	r3, #168	; 0xa8
 80107e8:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCV_UID_LEN;
 80107ea:	79fa      	ldrb	r2, [r7, #7]
 80107ec:	4926      	ldr	r1, [pc, #152]	; (8010888 <rfalNfcPollActivation+0x554>)
 80107ee:	4613      	mov	r3, r2
 80107f0:	011b      	lsls	r3, r3, #4
 80107f2:	1a9b      	subs	r3, r3, r2
 80107f4:	00db      	lsls	r3, r3, #3
 80107f6:	440b      	add	r3, r1
 80107f8:	33ac      	adds	r3, #172	; 0xac
 80107fa:	2208      	movs	r2, #8
 80107fc:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-V T5T device activated */
 80107fe:	79fa      	ldrb	r2, [r7, #7]
 8010800:	4921      	ldr	r1, [pc, #132]	; (8010888 <rfalNfcPollActivation+0x554>)
 8010802:	4613      	mov	r3, r2
 8010804:	011b      	lsls	r3, r3, #4
 8010806:	1a9b      	subs	r3, r3, r2
 8010808:	00db      	lsls	r3, r3, #3
 801080a:	440b      	add	r3, r1
 801080c:	33ad      	adds	r3, #173	; 0xad
 801080e:	2200      	movs	r2, #0
 8010810:	701a      	strb	r2, [r3, #0]
            break;
 8010812:	e02a      	b.n	801086a <rfalNfcPollActivation+0x536>
        /* Passive ST25TB Activation                                                   */
        /*******************************************************************************/
    #if RFAL_FEATURE_ST25TB
        case RFAL_NFC_LISTEN_TYPE_ST25TB:
            
            rfalSt25tbPollerInitialize();
 8010814:	f007 fc7b 	bl	801810e <rfalSt25tbPollerInitialize>
            
            /* No specific activation needed for a ST25TB */
        
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 8010818:	79f9      	ldrb	r1, [r7, #7]
 801081a:	79fa      	ldrb	r2, [r7, #7]
 801081c:	460b      	mov	r3, r1
 801081e:	011b      	lsls	r3, r3, #4
 8010820:	1a5b      	subs	r3, r3, r1
 8010822:	00db      	lsls	r3, r3, #3
 8010824:	3390      	adds	r3, #144	; 0x90
 8010826:	4918      	ldr	r1, [pc, #96]	; (8010888 <rfalNfcPollActivation+0x554>)
 8010828:	440b      	add	r3, r1
 801082a:	1c99      	adds	r1, r3, #2
 801082c:	4816      	ldr	r0, [pc, #88]	; (8010888 <rfalNfcPollActivation+0x554>)
 801082e:	4613      	mov	r3, r2
 8010830:	011b      	lsls	r3, r3, #4
 8010832:	1a9b      	subs	r3, r3, r2
 8010834:	00db      	lsls	r3, r3, #3
 8010836:	4403      	add	r3, r0
 8010838:	33a8      	adds	r3, #168	; 0xa8
 801083a:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_ST25TB_UID_LEN;
 801083c:	79fa      	ldrb	r2, [r7, #7]
 801083e:	4912      	ldr	r1, [pc, #72]	; (8010888 <rfalNfcPollActivation+0x554>)
 8010840:	4613      	mov	r3, r2
 8010842:	011b      	lsls	r3, r3, #4
 8010844:	1a9b      	subs	r3, r3, r2
 8010846:	00db      	lsls	r3, r3, #3
 8010848:	440b      	add	r3, r1
 801084a:	33ac      	adds	r3, #172	; 0xac
 801084c:	2208      	movs	r2, #8
 801084e:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* ST25TB device activated */
 8010850:	79fa      	ldrb	r2, [r7, #7]
 8010852:	490d      	ldr	r1, [pc, #52]	; (8010888 <rfalNfcPollActivation+0x554>)
 8010854:	4613      	mov	r3, r2
 8010856:	011b      	lsls	r3, r3, #4
 8010858:	1a9b      	subs	r3, r3, r2
 801085a:	00db      	lsls	r3, r3, #3
 801085c:	440b      	add	r3, r1
 801085e:	33ad      	adds	r3, #173	; 0xad
 8010860:	2200      	movs	r2, #0
 8010862:	701a      	strb	r2, [r3, #0]
            break;
 8010864:	e001      	b.n	801086a <rfalNfcPollActivation+0x536>
    #endif /* RFAL_FEATURE_ST25TB */
        
        /*******************************************************************************/
        default:
            return ERR_WRONG_STATE;
 8010866:	2321      	movs	r3, #33	; 0x21
 8010868:	e00a      	b.n	8010880 <rfalNfcPollActivation+0x54c>
    }
    
    gNfcDev.activeDev = &gNfcDev.devList[devIt];                                      /* Assign active device to be used further on */
 801086a:	79fa      	ldrb	r2, [r7, #7]
 801086c:	4613      	mov	r3, r2
 801086e:	011b      	lsls	r3, r3, #4
 8010870:	1a9b      	subs	r3, r3, r2
 8010872:	00db      	lsls	r3, r3, #3
 8010874:	3390      	adds	r3, #144	; 0x90
 8010876:	4a04      	ldr	r2, [pc, #16]	; (8010888 <rfalNfcPollActivation+0x554>)
 8010878:	4413      	add	r3, r2
 801087a:	4a03      	ldr	r2, [pc, #12]	; (8010888 <rfalNfcPollActivation+0x554>)
 801087c:	6093      	str	r3, [r2, #8]
    return ERR_NONE;
 801087e:	2300      	movs	r3, #0
}
 8010880:	4618      	mov	r0, r3
 8010882:	3728      	adds	r7, #40	; 0x28
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}
 8010888:	20002fcc 	.word	0x20002fcc

0801088c <rfalNfcListenActivation>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_LISTEN_MODE
static ReturnCode rfalNfcListenActivation( void )
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b082      	sub	sp, #8
 8010890:	af00      	add	r7, sp, #0
    uint8_t                   hdrLen;
    ReturnCode                ret;
    rfalLmState               lmSt;
    rfalBitRate               bitRate;
    
    lmSt = rfalListenGetState( &isDataRcvd, &bitRate );
 8010892:	1c7a      	adds	r2, r7, #1
 8010894:	1cbb      	adds	r3, r7, #2
 8010896:	4611      	mov	r1, r2
 8010898:	4618      	mov	r0, r3
 801089a:	f007 f855 	bl	8017948 <rfalListenGetState>
 801089e:	4603      	mov	r3, r0
 80108a0:	71fb      	strb	r3, [r7, #7]
    switch(lmSt)
 80108a2:	79fb      	ldrb	r3, [r7, #7]
 80108a4:	3b01      	subs	r3, #1
 80108a6:	2b0f      	cmp	r3, #15
 80108a8:	f200 8136 	bhi.w	8010b18 <rfalNfcListenActivation+0x28c>
 80108ac:	a201      	add	r2, pc, #4	; (adr r2, 80108b4 <rfalNfcListenActivation+0x28>)
 80108ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108b2:	bf00      	nop
 80108b4:	08010b15 	.word	0x08010b15
 80108b8:	08010a79 	.word	0x08010a79
 80108bc:	08010b11 	.word	0x08010b11
 80108c0:	08010b19 	.word	0x08010b19
 80108c4:	080109ad 	.word	0x080109ad
 80108c8:	080108f5 	.word	0x080108f5
 80108cc:	08010b19 	.word	0x08010b19
 80108d0:	08010b19 	.word	0x08010b19
 80108d4:	08010a33 	.word	0x08010a33
 80108d8:	08010a57 	.word	0x08010a57
 80108dc:	08010a57 	.word	0x08010a57
 80108e0:	08010b11 	.word	0x08010b11
 80108e4:	08010b19 	.word	0x08010b19
 80108e8:	08010b11 	.word	0x08010b11
 80108ec:	080108f5 	.word	0x080108f5
 80108f0:	08010b11 	.word	0x08010b11
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_ACTIVE_A:                                                  /* NFC-A CE activation */
        case RFAL_LM_STATE_ACTIVE_Ax:
            
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 80108f4:	78bb      	ldrb	r3, [r7, #2]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d056      	beq.n	80109a8 <rfalNfcListenActivation+0x11c>
            {
                /* Set the header length in NFC-A */
                hdrLen = (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN);
 80108fa:	2302      	movs	r3, #2
 80108fc:	70fb      	strb	r3, [r7, #3]
                
                NO_WARNING(hdrLen);  /* Supress warning if feature switch is disabled */
                
                /* Check if received data is a Sleep request */
                if( rfalNfcaListenerIsSleepReq( gNfcDev.rxBuf.rfBuf, rfalConvBitsToBytes(gNfcDev.rxLen)) )     /* Check if received data is a SLP_REQ */
 80108fe:	4b89      	ldr	r3, [pc, #548]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010900:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8010904:	3307      	adds	r3, #7
 8010906:	08db      	lsrs	r3, r3, #3
 8010908:	b29b      	uxth	r3, r3
 801090a:	4619      	mov	r1, r3
 801090c:	4886      	ldr	r0, [pc, #536]	; (8010b28 <rfalNfcListenActivation+0x29c>)
 801090e:	f002 ffc2 	bl	8013896 <rfalNfcaListenerIsSleepReq>
 8010912:	4603      	mov	r3, r0
 8010914:	2b00      	cmp	r3, #0
 8010916:	d00c      	beq.n	8010932 <rfalNfcListenActivation+0xa6>
                {
                    /* Set the Listen Mode in Sleep state */
                    EXIT_ON_ERR( ret, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 8010918:	4b84      	ldr	r3, [pc, #528]	; (8010b2c <rfalNfcListenActivation+0x2a0>)
 801091a:	22ff      	movs	r2, #255	; 0xff
 801091c:	4982      	ldr	r1, [pc, #520]	; (8010b28 <rfalNfcListenActivation+0x29c>)
 801091e:	200c      	movs	r0, #12
 8010920:	f007 f802 	bl	8017928 <rfalListenSleepStart>
 8010924:	4603      	mov	r3, r0
 8010926:	80bb      	strh	r3, [r7, #4]
 8010928:	88bb      	ldrh	r3, [r7, #4]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d03c      	beq.n	80109a8 <rfalNfcListenActivation+0x11c>
 801092e:	88bb      	ldrh	r3, [r7, #4]
 8010930:	e0f4      	b.n	8010b1c <rfalNfcListenActivation+0x290>
                }
            #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
            
            #if RFAL_FEATURE_NFC_DEP
                /* Check if received data is a valid ATR_REQ */
                else if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 8010932:	78fb      	ldrb	r3, [r7, #3]
 8010934:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8010938:	4a7a      	ldr	r2, [pc, #488]	; (8010b24 <rfalNfcListenActivation+0x298>)
 801093a:	4413      	add	r3, r2
 801093c:	1cd8      	adds	r0, r3, #3
 801093e:	4b79      	ldr	r3, [pc, #484]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010940:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8010944:	3307      	adds	r3, #7
 8010946:	08db      	lsrs	r3, r3, #3
 8010948:	b29a      	uxth	r2, r3
 801094a:	78fb      	ldrb	r3, [r7, #3]
 801094c:	b29b      	uxth	r3, r3
 801094e:	1ad3      	subs	r3, r2, r3
 8010950:	b299      	uxth	r1, r3
 8010952:	4b74      	ldr	r3, [pc, #464]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010954:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010958:	461a      	mov	r2, r3
 801095a:	f001 fd75 	bl	8012448 <rfalNfcDepIsAtrReq>
 801095e:	4603      	mov	r3, r0
 8010960:	2b00      	cmp	r3, #0
 8010962:	d01f      	beq.n	80109a4 <rfalNfcListenActivation+0x118>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCA;
 8010964:	4b6f      	ldr	r3, [pc, #444]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010966:	220a      	movs	r2, #10
 8010968:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 801096c:	78fb      	ldrb	r3, [r7, #3]
 801096e:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8010972:	4a6c      	ldr	r2, [pc, #432]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010974:	4413      	add	r3, r2
 8010976:	1cd9      	adds	r1, r3, #3
 8010978:	4b6a      	ldr	r3, [pc, #424]	; (8010b24 <rfalNfcListenActivation+0x298>)
 801097a:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 801097e:	3307      	adds	r3, #7
 8010980:	08db      	lsrs	r3, r3, #3
 8010982:	b29a      	uxth	r2, r3
 8010984:	78fb      	ldrb	r3, [r7, #3]
 8010986:	b29b      	uxth	r3, r3
 8010988:	1ad3      	subs	r3, r2, r3
 801098a:	b29b      	uxth	r3, r3
 801098c:	460a      	mov	r2, r1
 801098e:	2100      	movs	r1, #0
 8010990:	4867      	ldr	r0, [pc, #412]	; (8010b30 <rfalNfcListenActivation+0x2a4>)
 8010992:	f000 f8cf 	bl	8010b34 <rfalNfcNfcDepActivate>
 8010996:	4603      	mov	r3, r0
 8010998:	80bb      	strh	r3, [r7, #4]
 801099a:	88bb      	ldrh	r3, [r7, #4]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d003      	beq.n	80109a8 <rfalNfcListenActivation+0x11c>
 80109a0:	88bb      	ldrh	r3, [r7, #4]
 80109a2:	e0bb      	b.n	8010b1c <rfalNfcListenActivation+0x290>
                }
            #endif /* RFAL_FEATURE_NFC_DEP */
                
                else
                {
                    return ERR_PROTO;
 80109a4:	230b      	movs	r3, #11
 80109a6:	e0b9      	b.n	8010b1c <rfalNfcListenActivation+0x290>
                }
            }
            return ERR_BUSY;
 80109a8:	2302      	movs	r3, #2
 80109aa:	e0b7      	b.n	8010b1c <rfalNfcListenActivation+0x290>
    #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_F:                                                   /* NFC-F CE activation */
            
            if( isDataRcvd )                                                          /* Wait for the first received data */
 80109ac:	78bb      	ldrb	r3, [r7, #2]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d03d      	beq.n	8010a2e <rfalNfcListenActivation+0x1a2>
            {
            #if RFAL_FEATURE_NFC_DEP
                /* Set the header length in NFC-F */
                hdrLen = RFAL_NFCDEP_LEN_LEN;
 80109b2:	2301      	movs	r3, #1
 80109b4:	70fb      	strb	r3, [r7, #3]
                
                if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 80109b6:	78fb      	ldrb	r3, [r7, #3]
 80109b8:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 80109bc:	4a59      	ldr	r2, [pc, #356]	; (8010b24 <rfalNfcListenActivation+0x298>)
 80109be:	4413      	add	r3, r2
 80109c0:	1cd8      	adds	r0, r3, #3
 80109c2:	4b58      	ldr	r3, [pc, #352]	; (8010b24 <rfalNfcListenActivation+0x298>)
 80109c4:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 80109c8:	3307      	adds	r3, #7
 80109ca:	08db      	lsrs	r3, r3, #3
 80109cc:	b29a      	uxth	r2, r3
 80109ce:	78fb      	ldrb	r3, [r7, #3]
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	1ad3      	subs	r3, r2, r3
 80109d4:	b299      	uxth	r1, r3
 80109d6:	4b53      	ldr	r3, [pc, #332]	; (8010b24 <rfalNfcListenActivation+0x298>)
 80109d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80109dc:	461a      	mov	r2, r3
 80109de:	f001 fd33 	bl	8012448 <rfalNfcDepIsAtrReq>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d01f      	beq.n	8010a28 <rfalNfcListenActivation+0x19c>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCF;
 80109e8:	4b4e      	ldr	r3, [pc, #312]	; (8010b24 <rfalNfcListenActivation+0x298>)
 80109ea:	220c      	movs	r2, #12
 80109ec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 80109f0:	78fb      	ldrb	r3, [r7, #3]
 80109f2:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 80109f6:	4a4b      	ldr	r2, [pc, #300]	; (8010b24 <rfalNfcListenActivation+0x298>)
 80109f8:	4413      	add	r3, r2
 80109fa:	1cd9      	adds	r1, r3, #3
 80109fc:	4b49      	ldr	r3, [pc, #292]	; (8010b24 <rfalNfcListenActivation+0x298>)
 80109fe:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8010a02:	3307      	adds	r3, #7
 8010a04:	08db      	lsrs	r3, r3, #3
 8010a06:	b29a      	uxth	r2, r3
 8010a08:	78fb      	ldrb	r3, [r7, #3]
 8010a0a:	b29b      	uxth	r3, r3
 8010a0c:	1ad3      	subs	r3, r2, r3
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	460a      	mov	r2, r1
 8010a12:	2100      	movs	r1, #0
 8010a14:	4846      	ldr	r0, [pc, #280]	; (8010b30 <rfalNfcListenActivation+0x2a4>)
 8010a16:	f000 f88d 	bl	8010b34 <rfalNfcNfcDepActivate>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	80bb      	strh	r3, [r7, #4]
 8010a1e:	88bb      	ldrh	r3, [r7, #4]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d004      	beq.n	8010a2e <rfalNfcListenActivation+0x1a2>
 8010a24:	88bb      	ldrh	r3, [r7, #4]
 8010a26:	e079      	b.n	8010b1c <rfalNfcListenActivation+0x290>
                }
                else
            #endif /* RFAL_FEATURE_NFC_DEP */
                {
                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_3 );                    /* First data already received - set T3T CE */
 8010a28:	2009      	movs	r0, #9
 8010a2a:	f006 ffad 	bl	8017988 <rfalListenSetState>
                }
            }
            return ERR_BUSY;
 8010a2e:	2302      	movs	r3, #2
 8010a30:	e074      	b.n	8010b1c <rfalNfcListenActivation+0x290>
            
        /*******************************************************************************/
        case RFAL_LM_STATE_CARDEMU_3:                                                 /* T3T activated */
            
            gNfcDev.devList->type        = RFAL_NFC_POLL_TYPE_NFCF;
 8010a32:	4b3c      	ldr	r3, [pc, #240]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010a34:	220c      	movs	r2, #12
 8010a36:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_RF;
 8010a3a:	4b3a      	ldr	r3, [pc, #232]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
            gNfcDev.devList->nfcid       = NULL;
 8010a42:	4b38      	ldr	r3, [pc, #224]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010a44:	2200      	movs	r2, #0
 8010a46:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            gNfcDev.devList->nfcidLen    = 0;
 8010a4a:	4b36      	ldr	r3, [pc, #216]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
            
            return ERR_NONE;
 8010a52:	2300      	movs	r3, #0
 8010a54:	e062      	b.n	8010b1c <rfalNfcListenActivation+0x290>
    #if RFAL_FEATURE_NFC_DEP
        /*******************************************************************************/
        case RFAL_LM_STATE_TARGET_A:                                                  /* NFC-DEP activation */
        case RFAL_LM_STATE_TARGET_F:
            
            ret = rfalNfcDepListenGetActivationStatus();
 8010a56:	f002 fa6b 	bl	8012f30 <rfalNfcDepListenGetActivationStatus>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	80bb      	strh	r3, [r7, #4]
            if( ret == ERR_NONE )
 8010a5e:	88bb      	ldrh	r3, [r7, #4]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d107      	bne.n	8010a74 <rfalNfcListenActivation+0x1e8>
            {
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 8010a64:	4b2f      	ldr	r3, [pc, #188]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010a66:	2202      	movs	r2, #2
 8010a68:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
                gNfcDev.devList->nfcidLen    = RFAL_NFCDEP_NFCID3_LEN;
 8010a6c:	4b2d      	ldr	r3, [pc, #180]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010a6e:	220a      	movs	r2, #10
 8010a70:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
            }
            return ret;
 8010a74:	88bb      	ldrh	r3, [r7, #4]
 8010a76:	e051      	b.n	8010b1c <rfalNfcListenActivation+0x290>
    #endif /* RFAL_FEATURE_NFC_DEP */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:                                                      /* AP2P activation */
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 8010a78:	78bb      	ldrb	r3, [r7, #2]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d046      	beq.n	8010b0c <rfalNfcListenActivation+0x280>
            {
                
                if( (gNfcDev.lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )                /* Check if AP2P is enabled */
 8010a7e:	4b29      	ldr	r3, [pc, #164]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010a80:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d03f      	beq.n	8010b0c <rfalNfcListenActivation+0x280>
                {
                    
                #if RFAL_FEATURE_NFC_DEP
                    /* Calculate the header length in NFC-A or NFC-F mode*/
                    hdrLen = ( (bitRate == RFAL_BR_106) ? (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN) : RFAL_NFCDEP_LEN_LEN );
 8010a8c:	787b      	ldrb	r3, [r7, #1]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d101      	bne.n	8010a96 <rfalNfcListenActivation+0x20a>
 8010a92:	2302      	movs	r3, #2
 8010a94:	e000      	b.n	8010a98 <rfalNfcListenActivation+0x20c>
 8010a96:	2301      	movs	r3, #1
 8010a98:	70fb      	strb	r3, [r7, #3]
                    
                    if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), NULL) )
 8010a9a:	78fb      	ldrb	r3, [r7, #3]
 8010a9c:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8010aa0:	4a20      	ldr	r2, [pc, #128]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010aa2:	4413      	add	r3, r2
 8010aa4:	1cd8      	adds	r0, r3, #3
 8010aa6:	4b1f      	ldr	r3, [pc, #124]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010aa8:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8010aac:	3307      	adds	r3, #7
 8010aae:	08db      	lsrs	r3, r3, #3
 8010ab0:	b29a      	uxth	r2, r3
 8010ab2:	78fb      	ldrb	r3, [r7, #3]
 8010ab4:	b29b      	uxth	r3, r3
 8010ab6:	1ad3      	subs	r3, r2, r3
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	2200      	movs	r2, #0
 8010abc:	4619      	mov	r1, r3
 8010abe:	f001 fcc3 	bl	8012448 <rfalNfcDepIsAtrReq>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d01f      	beq.n	8010b08 <rfalNfcListenActivation+0x27c>
                    {
                        gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_AP2P;
 8010ac8:	4b16      	ldr	r3, [pc, #88]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010aca:	220f      	movs	r2, #15
 8010acc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                        EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 8010ad0:	78fb      	ldrb	r3, [r7, #3]
 8010ad2:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8010ad6:	4a13      	ldr	r2, [pc, #76]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010ad8:	4413      	add	r3, r2
 8010ada:	1cd9      	adds	r1, r3, #3
 8010adc:	4b11      	ldr	r3, [pc, #68]	; (8010b24 <rfalNfcListenActivation+0x298>)
 8010ade:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8010ae2:	3307      	adds	r3, #7
 8010ae4:	08db      	lsrs	r3, r3, #3
 8010ae6:	b29a      	uxth	r2, r3
 8010ae8:	78fb      	ldrb	r3, [r7, #3]
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	1ad3      	subs	r3, r2, r3
 8010aee:	b29b      	uxth	r3, r3
 8010af0:	460a      	mov	r2, r1
 8010af2:	2101      	movs	r1, #1
 8010af4:	480e      	ldr	r0, [pc, #56]	; (8010b30 <rfalNfcListenActivation+0x2a4>)
 8010af6:	f000 f81d 	bl	8010b34 <rfalNfcNfcDepActivate>
 8010afa:	4603      	mov	r3, r0
 8010afc:	80bb      	strh	r3, [r7, #4]
 8010afe:	88bb      	ldrh	r3, [r7, #4]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d003      	beq.n	8010b0c <rfalNfcListenActivation+0x280>
 8010b04:	88bb      	ldrh	r3, [r7, #4]
 8010b06:	e009      	b.n	8010b1c <rfalNfcListenActivation+0x290>
                    }
                    else
                #endif /* RFAL_FEATURE_NFC_DEP */
                    {
                        return ERR_PROTO;
 8010b08:	230b      	movs	r3, #11
 8010b0a:	e007      	b.n	8010b1c <rfalNfcListenActivation+0x290>
                    }
                }
            }
            return ERR_BUSY;
 8010b0c:	2302      	movs	r3, #2
 8010b0e:	e005      	b.n	8010b1c <rfalNfcListenActivation+0x290>
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_A:
        case RFAL_LM_STATE_READY_Ax:
        case RFAL_LM_STATE_SLEEP_A:
        case RFAL_LM_STATE_SLEEP_AF:
            return ERR_BUSY;
 8010b10:	2302      	movs	r3, #2
 8010b12:	e003      	b.n	8010b1c <rfalNfcListenActivation+0x290>
        
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            return ERR_LINK_LOSS;
 8010b14:	2325      	movs	r3, #37	; 0x25
 8010b16:	e001      	b.n	8010b1c <rfalNfcListenActivation+0x290>
        
        default:                                                                      /* Wait for activation */
            break;
 8010b18:	bf00      	nop
    }

    return ERR_INTERNAL;
 8010b1a:	230c      	movs	r3, #12
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	20002fcc 	.word	0x20002fcc
 8010b28:	200033c7 	.word	0x200033c7
 8010b2c:	200034ca 	.word	0x200034ca
 8010b30:	2000305c 	.word	0x2000305c

08010b34 <rfalNfcNfcDepActivate>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_NFC_DEP
static ReturnCode rfalNfcNfcDepActivate( rfalNfcDevice *device, rfalNfcDepCommMode commMode, const uint8_t *atrReq, uint16_t atrReqLen )
{
 8010b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b36:	b0a5      	sub	sp, #148	; 0x94
 8010b38:	af04      	add	r7, sp, #16
 8010b3a:	60f8      	str	r0, [r7, #12]
 8010b3c:	607a      	str	r2, [r7, #4]
 8010b3e:	461a      	mov	r2, r3
 8010b40:	460b      	mov	r3, r1
 8010b42:	72fb      	strb	r3, [r7, #11]
 8010b44:	4613      	mov	r3, r2
 8010b46:	813b      	strh	r3, [r7, #8]
    rfalNfcDepAtrParam          initParam;
    
    /* If we are in Poll mode */
    if( rfalNfcIsRemDevListener( device->type ) )
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	2b05      	cmp	r3, #5
 8010b4e:	d838      	bhi.n	8010bc2 <rfalNfcNfcDepActivate+0x8e>
    {
        /*******************************************************************************/
        /* If Passive F use the NFCID2 retrieved from SENSF                            */
        if( device->type == RFAL_NFC_LISTEN_TYPE_NFCF )
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	2b02      	cmp	r3, #2
 8010b56:	d106      	bne.n	8010b66 <rfalNfcNfcDepActivate+0x32>
        {
            initParam.nfcid    = device->dev.nfcf.sensfRes.NFCID2;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	3303      	adds	r3, #3
 8010b5c:	66fb      	str	r3, [r7, #108]	; 0x6c
            initParam.nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8010b5e:	2308      	movs	r3, #8
 8010b60:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8010b64:	e004      	b.n	8010b70 <rfalNfcNfcDepActivate+0x3c>
        }
        else
        {
            initParam.nfcid    = gNfcDev.disc.nfcid3; 
 8010b66:	4b3e      	ldr	r3, [pc, #248]	; (8010c60 <rfalNfcNfcDepActivate+0x12c>)
 8010b68:	66fb      	str	r3, [r7, #108]	; 0x6c
            initParam.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8010b6a:	230a      	movs	r3, #10
 8010b6c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        }    
        
        initParam.BS        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8010b70:	2300      	movs	r3, #0
 8010b72:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8010b76:	2300      	movs	r3, #0
 8010b78:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        initParam.NAD       = RFAL_NFCDEP_NAD_NO;
 8010b82:	2300      	movs	r3, #0
 8010b84:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        initParam.LR        = RFAL_NFCDEP_LR_254;
 8010b88:	2303      	movs	r3, #3
 8010b8a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        initParam.GB        = gNfcDev.disc.GB;
 8010b8e:	4b35      	ldr	r3, [pc, #212]	; (8010c64 <rfalNfcNfcDepActivate+0x130>)
 8010b90:	67bb      	str	r3, [r7, #120]	; 0x78
        initParam.GBLen     = gNfcDev.disc.GBLen;
 8010b92:	4b35      	ldr	r3, [pc, #212]	; (8010c68 <rfalNfcNfcDepActivate+0x134>)
 8010b94:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010b98:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
        initParam.commMode  = commMode;
 8010b9c:	7afb      	ldrb	r3, [r7, #11]
 8010b9e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        initParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8010ba2:	230e      	movs	r3, #14
 8010ba4:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
        
        rfalNfcDepInitialize();
 8010ba8:	f001 fb90 	bl	80122cc <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
        return rfalNfcDepInitiatorHandleActivation( &initParam, RFAL_BR_424, &device->proto.nfcDep );
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	f103 0220 	add.w	r2, r3, #32
 8010bb2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010bb6:	2102      	movs	r1, #2
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f001 ff3d 	bl	8012a38 <rfalNfcDepInitiatorHandleActivation>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	e04a      	b.n	8010c58 <rfalNfcNfcDepActivate+0x124>
    }
    
    /* If we are in Listen mode */
#if RFAL_FEATURE_LISTEN_MODE
    else if( rfalNfcIsRemDevPoller( device->type ) )
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	781b      	ldrb	r3, [r3, #0]
 8010bc6:	2b09      	cmp	r3, #9
 8010bc8:	d945      	bls.n	8010c56 <rfalNfcNfcDepActivate+0x122>
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	781b      	ldrb	r3, [r3, #0]
 8010bce:	2b0f      	cmp	r3, #15
 8010bd0:	d841      	bhi.n	8010c56 <rfalNfcNfcDepActivate+0x122>
    {
        rfalNfcDepListenActvParam   actvParams;
        rfalNfcDepTargetParam       targetParam;
        
        ST_MEMCPY(targetParam.nfcid3, (uint8_t*)gNfcDev.disc.nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 8010bd2:	4b25      	ldr	r3, [pc, #148]	; (8010c68 <rfalNfcNfcDepActivate+0x134>)
 8010bd4:	f107 0215 	add.w	r2, r7, #21
 8010bd8:	3314      	adds	r3, #20
 8010bda:	cb03      	ldmia	r3!, {r0, r1}
 8010bdc:	6010      	str	r0, [r2, #0]
 8010bde:	6051      	str	r1, [r2, #4]
 8010be0:	881b      	ldrh	r3, [r3, #0]
 8010be2:	8113      	strh	r3, [r2, #8]
        targetParam.bst       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8010be4:	2300      	movs	r3, #0
 8010be6:	77fb      	strb	r3, [r7, #31]
        targetParam.brt       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8010be8:	2300      	movs	r3, #0
 8010bea:	f887 3020 	strb.w	r3, [r7, #32]
        targetParam.to        = RFAL_NFCDEP_WT_TRG_MAX;
 8010bee:	230e      	movs	r3, #14
 8010bf0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        targetParam.ppt       = rfalNfcDepLR2PP(RFAL_NFCDEP_LR_254);
 8010bf4:	2330      	movs	r3, #48	; 0x30
 8010bf6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        targetParam.GBtLen    = 0;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        targetParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8010c00:	230e      	movs	r3, #14
 8010c02:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
        targetParam.commMode  = commMode;
 8010c06:	7afb      	ldrb	r3, [r7, #11]
 8010c08:	753b      	strb	r3, [r7, #20]
            
        
        /* Set activation buffer (including header) for NFC-DEP */
        actvParams.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 8010c0a:	4b18      	ldr	r3, [pc, #96]	; (8010c6c <rfalNfcNfcDepActivate+0x138>)
 8010c0c:	65bb      	str	r3, [r7, #88]	; 0x58
        actvParams.rxLen        = &gNfcDev.rxLen;
 8010c0e:	4b18      	ldr	r3, [pc, #96]	; (8010c70 <rfalNfcNfcDepActivate+0x13c>)
 8010c10:	65fb      	str	r3, [r7, #92]	; 0x5c
        actvParams.isRxChaining = &gNfcDev.isRxChaining;
 8010c12:	4b18      	ldr	r3, [pc, #96]	; (8010c74 <rfalNfcNfcDepActivate+0x140>)
 8010c14:	663b      	str	r3, [r7, #96]	; 0x60
        actvParams.nfcDepDev    = &gNfcDev.devList->proto.nfcDep;
 8010c16:	4b18      	ldr	r3, [pc, #96]	; (8010c78 <rfalNfcNfcDepActivate+0x144>)
 8010c18:	667b      	str	r3, [r7, #100]	; 0x64

        rfalListenSetState( ((device->type == RFAL_NFC_POLL_TYPE_NFCA) ? RFAL_LM_STATE_TARGET_A : RFAL_LM_STATE_TARGET_F) );
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	2b0a      	cmp	r3, #10
 8010c20:	d101      	bne.n	8010c26 <rfalNfcNfcDepActivate+0xf2>
 8010c22:	230a      	movs	r3, #10
 8010c24:	e000      	b.n	8010c28 <rfalNfcNfcDepActivate+0xf4>
 8010c26:	230b      	movs	r3, #11
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f006 fead 	bl	8017988 <rfalListenSetState>
        
        rfalNfcDepInitialize();
 8010c2e:	f001 fb4d 	bl	80122cc <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: send ATR_RES and handle activation */
        return rfalNfcDepListenStartActivation( &targetParam, atrReq, atrReqLen, actvParams );
 8010c32:	893e      	ldrh	r6, [r7, #8]
 8010c34:	f107 0514 	add.w	r5, r7, #20
 8010c38:	466c      	mov	r4, sp
 8010c3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010c3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010c42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c48:	4632      	mov	r2, r6
 8010c4a:	6879      	ldr	r1, [r7, #4]
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	f002 f85d 	bl	8012d0c <rfalNfcDepListenStartActivation>
 8010c52:	4603      	mov	r3, r0
 8010c54:	e000      	b.n	8010c58 <rfalNfcNfcDepActivate+0x124>
    }
#endif  /* RFAL_FEATURE_LISTEN_MODE */
    
    else
    {
        return ERR_INTERNAL;
 8010c56:	230c      	movs	r3, #12
    }
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	3784      	adds	r7, #132	; 0x84
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c60:	20002fe0 	.word	0x20002fe0
 8010c64:	20002fea 	.word	0x20002fea
 8010c68:	20002fcc 	.word	0x20002fcc
 8010c6c:	200033c7 	.word	0x200033c7
 8010c70:	200034ca 	.word	0x200034ca
 8010c74:	200032bf 	.word	0x200032bf
 8010c78:	2000307c 	.word	0x2000307c

08010c7c <rfalNfcDeactivation>:
 * \return  ERR_XXXX  : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcDeactivation( void )
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	af00      	add	r7, sp, #0
    /* Check if a device has been activated */
    if( gNfcDev.activeDev != NULL )
 8010c80:	4b11      	ldr	r3, [pc, #68]	; (8010cc8 <rfalNfcDeactivation+0x4c>)
 8010c82:	689b      	ldr	r3, [r3, #8]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d011      	beq.n	8010cac <rfalNfcDeactivation+0x30>
    {
        switch( gNfcDev.activeDev->rfInterface )
 8010c88:	4b0f      	ldr	r3, [pc, #60]	; (8010cc8 <rfalNfcDeactivation+0x4c>)
 8010c8a:	689b      	ldr	r3, [r3, #8]
 8010c8c:	7f5b      	ldrb	r3, [r3, #29]
 8010c8e:	2b01      	cmp	r3, #1
 8010c90:	d004      	beq.n	8010c9c <rfalNfcDeactivation+0x20>
 8010c92:	2b02      	cmp	r3, #2
 8010c94:	d005      	beq.n	8010ca2 <rfalNfcDeactivation+0x26>
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d00a      	beq.n	8010cb0 <rfalNfcDeactivation+0x34>
 8010c9a:	e005      	b.n	8010ca8 <rfalNfcDeactivation+0x2c>
                break;                                                                /* No specific deactivation to be performed */
            
            /*******************************************************************************/
        #if RFAL_FEATURE_ISO_DEP_POLL
            case RFAL_NFC_INTERFACE_ISODEP:
                rfalIsoDepDeselect();                                                 /* Send a Deselect to device */
 8010c9c:	f7fd fb3c 	bl	800e318 <rfalIsoDepDeselect>
                break;
 8010ca0:	e007      	b.n	8010cb2 <rfalNfcDeactivation+0x36>
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                rfalNfcDepRLS();                                                      /* Send a Release to device */
 8010ca2:	f001 fe5d 	bl	8012960 <rfalNfcDepRLS>
                break;
 8010ca6:	e004      	b.n	8010cb2 <rfalNfcDeactivation+0x36>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            default:
                return ERR_REQUEST;
 8010ca8:	2305      	movs	r3, #5
 8010caa:	e00a      	b.n	8010cc2 <rfalNfcDeactivation+0x46>
        }
    }
 8010cac:	bf00      	nop
 8010cae:	e000      	b.n	8010cb2 <rfalNfcDeactivation+0x36>
                break;                                                                /* No specific deactivation to be performed */
 8010cb0:	bf00      	nop
    
    #if RFAL_FEATURE_WAKEUP_MODE
        rfalWakeUpModeStop();
 8010cb2:	f007 f955 	bl	8017f60 <rfalWakeUpModeStop>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
    
    #if RFAL_FEATURE_LISTEN_MODE
        rfalListenStop();
 8010cb6:	f006 fe1b 	bl	80178f0 <rfalListenStop>
    #else
        rfalFieldOff();
    #endif
    
    gNfcDev.activeDev = NULL;
 8010cba:	4b03      	ldr	r3, [pc, #12]	; (8010cc8 <rfalNfcDeactivation+0x4c>)
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	609a      	str	r2, [r3, #8]
    return ERR_NONE;
 8010cc0:	2300      	movs	r3, #0
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	bf00      	nop
 8010cc8:	20002fcc 	.word	0x20002fcc

08010ccc <nfcipDxIsSupported>:
/*******************************************************************************/


/*******************************************************************************/
static bool nfcipDxIsSupported( uint8_t Dx, uint8_t BRx, uint8_t BSx )
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b085      	sub	sp, #20
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	71fb      	strb	r3, [r7, #7]
 8010cd6:	460b      	mov	r3, r1
 8010cd8:	71bb      	strb	r3, [r7, #6]
 8010cda:	4613      	mov	r3, r2
 8010cdc:	717b      	strb	r3, [r7, #5]
	uint8_t Bx;
	
	/* Take the min of the possible bit rates, we'll use one for both directions */
	Bx = MIN(BRx, BSx);
 8010cde:	797a      	ldrb	r2, [r7, #5]
 8010ce0:	79bb      	ldrb	r3, [r7, #6]
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	bf28      	it	cs
 8010ce6:	4613      	movcs	r3, r2
 8010ce8:	73fb      	strb	r3, [r7, #15]
	
	/* Lower bit rates must be supported for P2P */
	if( (Dx <= (uint8_t)RFAL_NFCDEP_Dx_04_424) )
 8010cea:	79fb      	ldrb	r3, [r7, #7]
 8010cec:	2b02      	cmp	r3, #2
 8010cee:	d801      	bhi.n	8010cf4 <nfcipDxIsSupported+0x28>
	{
		return true;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	e008      	b.n	8010d06 <nfcipDxIsSupported+0x3a>
	}
	
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 8010cf4:	79fb      	ldrb	r3, [r7, #7]
 8010cf6:	2b03      	cmp	r3, #3
 8010cf8:	d104      	bne.n	8010d04 <nfcipDxIsSupported+0x38>
 8010cfa:	7bfb      	ldrb	r3, [r7, #15]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d001      	beq.n	8010d04 <nfcipDxIsSupported+0x38>
	{
		return true;
 8010d00:	2301      	movs	r3, #1
 8010d02:	e000      	b.n	8010d06 <nfcipDxIsSupported+0x3a>
	}

	return false;
 8010d04:	2300      	movs	r3, #0
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3714      	adds	r7, #20
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bc80      	pop	{r7}
 8010d0e:	4770      	bx	lr

08010d10 <nfcipTxRx>:


/*******************************************************************************/
static ReturnCode nfcipTxRx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint32_t fwt, uint8_t* paylBuf, uint8_t paylBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rxActLen )
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b088      	sub	sp, #32
 8010d14:	af02      	add	r7, sp, #8
 8010d16:	60b9      	str	r1, [r7, #8]
 8010d18:	607a      	str	r2, [r7, #4]
 8010d1a:	603b      	str	r3, [r7, #0]
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	73fb      	strb	r3, [r7, #15]
    ReturnCode ret;
    
    if( (cmd == NFCIP_CMD_DEP_REQ) || (cmd == NFCIP_CMD_DEP_RES) ) /* this method cannot be used for DEPs */
 8010d20:	7bfb      	ldrb	r3, [r7, #15]
 8010d22:	2b06      	cmp	r3, #6
 8010d24:	d002      	beq.n	8010d2c <nfcipTxRx+0x1c>
 8010d26:	7bfb      	ldrb	r3, [r7, #15]
 8010d28:	2b07      	cmp	r3, #7
 8010d2a:	d101      	bne.n	8010d30 <nfcipTxRx+0x20>
    {
        return ERR_PARAM;
 8010d2c:	2307      	movs	r3, #7
 8010d2e:	e030      	b.n	8010d92 <nfcipTxRx+0x82>
    }
    
    /* Assign the global params for this TxRx */
    gNfcip.rxBuf       = rxBuf;
 8010d30:	4a1a      	ldr	r2, [pc, #104]	; (8010d9c <nfcipTxRx+0x8c>)
 8010d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d34:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen    = rxBufLen;
 8010d36:	4a19      	ldr	r2, [pc, #100]	; (8010d9c <nfcipTxRx+0x8c>)
 8010d38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010d3a:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    gNfcip.rxRcvdLen   = rxActLen;
 8010d3e:	4a17      	ldr	r2, [pc, #92]	; (8010d9c <nfcipTxRx+0x8c>)
 8010d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d42:	66d3      	str	r3, [r2, #108]	; 0x6c
    
    
    /*******************************************************************************/
	/* Transmission                                                                */
	/*******************************************************************************/
    if(txBuf != NULL)                                              /* if nothing to Tx, just do Rx */               
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d013      	beq.n	8010d72 <nfcipTxRx+0x62>
    {
        EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 8010d4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	7bf8      	ldrb	r0, [r7, #15]
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	9301      	str	r3, [sp, #4]
 8010d56:	2300      	movs	r3, #0
 8010d58:	9300      	str	r3, [sp, #0]
 8010d5a:	4613      	mov	r3, r2
 8010d5c:	683a      	ldr	r2, [r7, #0]
 8010d5e:	68b9      	ldr	r1, [r7, #8]
 8010d60:	f000 ffb4 	bl	8011ccc <nfcipTx>
 8010d64:	4603      	mov	r3, r0
 8010d66:	82fb      	strh	r3, [r7, #22]
 8010d68:	8afb      	ldrh	r3, [r7, #22]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d001      	beq.n	8010d72 <nfcipTxRx+0x62>
 8010d6e:	8afb      	ldrh	r3, [r7, #22]
 8010d70:	e00f      	b.n	8010d92 <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/
	/* Reception                                                                   */
	/*******************************************************************************/
    ret = nfcipDataRx( true );
 8010d72:	2001      	movs	r0, #1
 8010d74:	f001 ff86 	bl	8012c84 <nfcipDataRx>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8010d7c:	8afb      	ldrh	r3, [r7, #22]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d001      	beq.n	8010d86 <nfcipTxRx+0x76>
    {
        return ret;
 8010d82:	8afb      	ldrh	r3, [r7, #22]
 8010d84:	e005      	b.n	8010d92 <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/    
    *rxActLen = *rxBuf;                                      		/* Use LEN byte instead due to with/without CRC modes */
 8010d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	b29a      	uxth	r2, r3
 8010d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d8e:	801a      	strh	r2, [r3, #0]
    return ERR_NONE;                                         		/* Tx and Rx completed successfully                   */
 8010d90:	2300      	movs	r3, #0
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3718      	adds	r7, #24
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
 8010d9a:	bf00      	nop
 8010d9c:	200034cc 	.word	0x200034cc

08010da0 <nfcipDEPControlMsg>:


/*******************************************************************************/
static ReturnCode nfcipDEPControlMsg( uint8_t pfb, uint8_t RTOX  )
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b08c      	sub	sp, #48	; 0x30
 8010da4:	af02      	add	r7, sp, #8
 8010da6:	4603      	mov	r3, r0
 8010da8:	460a      	mov	r2, r1
 8010daa:	71fb      	strb	r3, [r7, #7]
 8010dac:	4613      	mov	r3, r2
 8010dae:	71bb      	strb	r3, [r7, #6]


    /*******************************************************************************/
    /* Calculate Cmd and fwt to be used                                            */
    /*******************************************************************************/
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8010db0:	4b2a      	ldr	r3, [pc, #168]	; (8010e5c <nfcipDEPControlMsg+0xbc>)
 8010db2:	781b      	ldrb	r3, [r3, #0]
 8010db4:	2b01      	cmp	r3, #1
 8010db6:	d101      	bne.n	8010dbc <nfcipDEPControlMsg+0x1c>
 8010db8:	2307      	movs	r3, #7
 8010dba:	e000      	b.n	8010dbe <nfcipDEPControlMsg+0x1e>
 8010dbc:	2306      	movs	r3, #6
 8010dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 8010dc2:	4b26      	ldr	r3, [pc, #152]	; (8010e5c <nfcipDEPControlMsg+0xbc>)
 8010dc4:	781b      	ldrb	r3, [r3, #0]
 8010dc6:	2b01      	cmp	r3, #1
 8010dc8:	d018      	beq.n	8010dfc <nfcipDEPControlMsg+0x5c>
 8010dca:	79fb      	ldrb	r3, [r7, #7]
 8010dcc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8010dd0:	2b80      	cmp	r3, #128	; 0x80
 8010dd2:	d10d      	bne.n	8010df0 <nfcipDEPControlMsg+0x50>
 8010dd4:	79fb      	ldrb	r3, [r7, #7]
 8010dd6:	f003 0310 	and.w	r3, r3, #16
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d008      	beq.n	8010df0 <nfcipDEPControlMsg+0x50>
 8010dde:	79bb      	ldrb	r3, [r7, #6]
 8010de0:	4a1e      	ldr	r2, [pc, #120]	; (8010e5c <nfcipDEPControlMsg+0xbc>)
 8010de2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010de4:	fb02 f203 	mul.w	r2, r2, r3
 8010de8:	4b1c      	ldr	r3, [pc, #112]	; (8010e5c <nfcipDEPControlMsg+0xbc>)
 8010dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010dec:	4413      	add	r3, r2
 8010dee:	e007      	b.n	8010e00 <nfcipDEPControlMsg+0x60>
 8010df0:	4b1a      	ldr	r3, [pc, #104]	; (8010e5c <nfcipDEPControlMsg+0xbc>)
 8010df2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010df4:	4b19      	ldr	r3, [pc, #100]	; (8010e5c <nfcipDEPControlMsg+0xbc>)
 8010df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010df8:	4413      	add	r3, r2
 8010dfa:	e001      	b.n	8010e00 <nfcipDEPControlMsg+0x60>
 8010dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8010e00:	623b      	str	r3, [r7, #32]
    
    if( nfcip_PFBisSTO( pfb ) )
 8010e02:	79fb      	ldrb	r3, [r7, #7]
 8010e04:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8010e08:	2b80      	cmp	r3, #128	; 0x80
 8010e0a:	d116      	bne.n	8010e3a <nfcipDEPControlMsg+0x9a>
 8010e0c:	79fb      	ldrb	r3, [r7, #7]
 8010e0e:	f003 0310 	and.w	r3, r3, #16
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d011      	beq.n	8010e3a <nfcipDEPControlMsg+0x9a>
    {
        ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN] = RTOX;
 8010e16:	79bb      	ldrb	r3, [r7, #6]
 8010e18:	747b      	strb	r3, [r7, #17]
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 8010e1a:	f107 030c 	add.w	r3, r7, #12
 8010e1e:	1d5a      	adds	r2, r3, #5
 8010e20:	f107 010c 	add.w	r1, r7, #12
 8010e24:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8010e28:	6a3b      	ldr	r3, [r7, #32]
 8010e2a:	9301      	str	r3, [sp, #4]
 8010e2c:	79fb      	ldrb	r3, [r7, #7]
 8010e2e:	9300      	str	r3, [sp, #0]
 8010e30:	2301      	movs	r3, #1
 8010e32:	f000 ff4b 	bl	8011ccc <nfcipTx>
 8010e36:	4603      	mov	r3, r0
 8010e38:	e00c      	b.n	8010e54 <nfcipDEPControlMsg+0xb4>
    }
    else
    {
        return nfcipTx( depCmd, ctrlMsg, NULL, 0, pfb, fwt );
 8010e3a:	f107 010c 	add.w	r1, r7, #12
 8010e3e:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8010e42:	6a3b      	ldr	r3, [r7, #32]
 8010e44:	9301      	str	r3, [sp, #4]
 8010e46:	79fb      	ldrb	r3, [r7, #7]
 8010e48:	9300      	str	r3, [sp, #0]
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	f000 ff3d 	bl	8011ccc <nfcipTx>
 8010e52:	4603      	mov	r3, r0
    }
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3728      	adds	r7, #40	; 0x28
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}
 8010e5c:	200034cc 	.word	0x200034cc

08010e60 <nfcipClearCounters>:

/*******************************************************************************/
static void nfcipClearCounters( void )
{
 8010e60:	b480      	push	{r7}
 8010e62:	af00      	add	r7, sp, #0
    gNfcip.cntATNRetrys  = 0;
 8010e64:	4b0b      	ldr	r3, [pc, #44]	; (8010e94 <nfcipClearCounters+0x34>)
 8010e66:	2200      	movs	r2, #0
 8010e68:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    gNfcip.cntNACKRetrys = 0;
 8010e6c:	4b09      	ldr	r3, [pc, #36]	; (8010e94 <nfcipClearCounters+0x34>)
 8010e6e:	2200      	movs	r2, #0
 8010e70:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    gNfcip.cntTORetrys   = 0;
 8010e74:	4b07      	ldr	r3, [pc, #28]	; (8010e94 <nfcipClearCounters+0x34>)
 8010e76:	2200      	movs	r2, #0
 8010e78:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    gNfcip.cntTxRetrys   = 0;
 8010e7c:	4b05      	ldr	r3, [pc, #20]	; (8010e94 <nfcipClearCounters+0x34>)
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    gNfcip.cntRTOXRetrys = 0;
 8010e84:	4b03      	ldr	r3, [pc, #12]	; (8010e94 <nfcipClearCounters+0x34>)
 8010e86:	2200      	movs	r2, #0
 8010e88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8010e8c:	bf00      	nop
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bc80      	pop	{r7}
 8010e92:	4770      	bx	lr
 8010e94:	200034cc 	.word	0x200034cc

08010e98 <nfcipInitiatorHandleDEP>:

/*******************************************************************************/
static ReturnCode nfcipInitiatorHandleDEP( ReturnCode rxRes, uint16_t rxLen, uint16_t *outActRxLen, bool *outIsChaining )
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b086      	sub	sp, #24
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	60ba      	str	r2, [r7, #8]
 8010ea0:	607b      	str	r3, [r7, #4]
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	81fb      	strh	r3, [r7, #14]
 8010ea6:	460b      	mov	r3, r1
 8010ea8:	81bb      	strh	r3, [r7, #12]
    uint8_t    rxMsgIt;
    uint8_t    rxPFB;
    uint8_t    rxRTOX;
    uint8_t    optHdrLen;
    
    ret        = ERR_INTERNAL;
 8010eaa:	230c      	movs	r3, #12
 8010eac:	82fb      	strh	r3, [r7, #22]
    rxMsgIt    = 0;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	757b      	strb	r3, [r7, #21]
    optHdrLen  = 0;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	753b      	strb	r3, [r7, #20]
    
    *outActRxLen    = 0;
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	2200      	movs	r2, #0
 8010eba:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 8010ec2:	89fb      	ldrh	r3, [r7, #14]
 8010ec4:	2b1d      	cmp	r3, #29
 8010ec6:	f200 80c6 	bhi.w	8011056 <nfcipInitiatorHandleDEP+0x1be>
 8010eca:	a201      	add	r2, pc, #4	; (adr r2, 8010ed0 <nfcipInitiatorHandleDEP+0x38>)
 8010ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ed0:	0801105b 	.word	0x0801105b
 8010ed4:	08011057 	.word	0x08011057
 8010ed8:	08011053 	.word	0x08011053
 8010edc:	08011057 	.word	0x08011057
 8010ee0:	08010f49 	.word	0x08010f49
 8010ee4:	08011057 	.word	0x08011057
 8010ee8:	08011057 	.word	0x08011057
 8010eec:	08011057 	.word	0x08011057
 8010ef0:	08011057 	.word	0x08011057
 8010ef4:	0801100f 	.word	0x0801100f
 8010ef8:	08011057 	.word	0x08011057
 8010efc:	08011057 	.word	0x08011057
 8010f00:	08011057 	.word	0x08011057
 8010f04:	08011057 	.word	0x08011057
 8010f08:	08011057 	.word	0x08011057
 8010f0c:	08011057 	.word	0x08011057
 8010f10:	08011057 	.word	0x08011057
 8010f14:	08011057 	.word	0x08011057
 8010f18:	08011057 	.word	0x08011057
 8010f1c:	08011057 	.word	0x08011057
 8010f20:	08011057 	.word	0x08011057
 8010f24:	0801100f 	.word	0x0801100f
 8010f28:	08011057 	.word	0x08011057
 8010f2c:	08011057 	.word	0x08011057
 8010f30:	08011057 	.word	0x08011057
 8010f34:	08011057 	.word	0x08011057
 8010f38:	08011057 	.word	0x08011057
 8010f3c:	0801100f 	.word	0x0801100f
 8010f40:	08011057 	.word	0x08011057
 8010f44:	0801100f 	.word	0x0801100f
        case ERR_TIMEOUT:
            
            nfcipLogI( " NFCIP(I) TIMEOUT  TORetrys:%d \r\n", gNfcip.cntTORetrys );
            
            /* Digital 1.0 14.15.5.6 - If nTO >= Max raise protocol error */
            if( gNfcip.cntTORetrys++ >= NFCIP_MAX_TO_RETRYS )
 8010f48:	4bac      	ldr	r3, [pc, #688]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8010f4a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8010f4e:	1c5a      	adds	r2, r3, #1
 8010f50:	b2d1      	uxtb	r1, r2
 8010f52:	4aaa      	ldr	r2, [pc, #680]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8010f54:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
 8010f58:	2b02      	cmp	r3, #2
 8010f5a:	d901      	bls.n	8010f60 <nfcipInitiatorHandleDEP+0xc8>
            {
                return ERR_PROTO;
 8010f5c:	230b      	movs	r3, #11
 8010f5e:	e264      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
             * will be done #54. 
             * This is used to address the issue some devices that havea big TO. 
             * Normally LLCP layer has timeout already, and NFCIP layer is still
             * running error handling, retrying ATN/NACKs                                  */
            /*******************************************************************************/
            if( nfcipIsDeactivationPending() )
 8010f60:	4ba6      	ldr	r3, [pc, #664]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8010f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d008      	beq.n	8010f7c <nfcipInitiatorHandleDEP+0xe4>
 8010f6a:	4ba4      	ldr	r3, [pc, #656]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8010f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f70:	4798      	blx	r3
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d001      	beq.n	8010f7c <nfcipInitiatorHandleDEP+0xe4>
            {
                nfcipLogI( " skipping error recovery due deactivation pending \r\n");
                return ERR_TIMEOUT;
 8010f78:	2304      	movs	r3, #4
 8010f7a:	e256      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.0 14.15.5.6 1)  If last PDU was NACK */
            if( nfcip_PFBisRNACK(gNfcip.lastPFB) )
 8010f7c:	4b9f      	ldr	r3, [pc, #636]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8010f7e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010f82:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8010f86:	2b40      	cmp	r3, #64	; 0x40
 8010f88:	d128      	bne.n	8010fdc <nfcipInitiatorHandleDEP+0x144>
 8010f8a:	4b9c      	ldr	r3, [pc, #624]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8010f8c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010f90:	f003 0310 	and.w	r3, r3, #16
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d021      	beq.n	8010fdc <nfcipInitiatorHandleDEP+0x144>
            {
                /* Digital 1.0 14.15.5.6 2)  if NACKs failed raise protocol error  */
                if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 8010f98:	4b98      	ldr	r3, [pc, #608]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8010f9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010f9e:	1c5a      	adds	r2, r3, #1
 8010fa0:	b2d1      	uxtb	r1, r2
 8010fa2:	4a96      	ldr	r2, [pc, #600]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8010fa4:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 8010fa8:	2b02      	cmp	r3, #2
 8010faa:	d901      	bls.n	8010fb0 <nfcipInitiatorHandleDEP+0x118>
                {
                    return ERR_PROTO;
 8010fac:	230b      	movs	r3, #11
 8010fae:	e23c      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
                }
                
                /* Send NACK */
                nfcipLogI( " NFCIP(I) Sending NACK retry: %d \r\n", gNfcip.cntNACKRetrys );
                EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 8010fb0:	4b92      	ldr	r3, [pc, #584]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8010fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010fb6:	f003 0303 	and.w	r3, r3, #3
 8010fba:	b2db      	uxtb	r3, r3
 8010fbc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8010fc0:	b2db      	uxtb	r3, r3
 8010fc2:	2100      	movs	r1, #0
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7ff feeb 	bl	8010da0 <nfcipDEPControlMsg>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	82fb      	strh	r3, [r7, #22]
 8010fce:	8afb      	ldrh	r3, [r7, #22]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d001      	beq.n	8010fd8 <nfcipInitiatorHandleDEP+0x140>
 8010fd4:	8afb      	ldrh	r3, [r7, #22]
 8010fd6:	e228      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
                return ERR_BUSY;
 8010fd8:	2302      	movs	r3, #2
 8010fda:	e226      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            }
            
            nfcipLogI( " NFCIP(I) Checking if to send ATN  ATNRetrys: %d \r\n", gNfcip.cntATNRetrys );
            
            /* Digital 1.0 14.15.5.6 3)  Otherwise send ATN */                            
            if( gNfcip.cntATNRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 8010fdc:	4b87      	ldr	r3, [pc, #540]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8010fde:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8010fe2:	1c5a      	adds	r2, r3, #1
 8010fe4:	b2d1      	uxtb	r1, r2
 8010fe6:	4a85      	ldr	r2, [pc, #532]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8010fe8:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
 8010fec:	2b02      	cmp	r3, #2
 8010fee:	d901      	bls.n	8010ff4 <nfcipInitiatorHandleDEP+0x15c>
            {
                return ERR_PROTO;
 8010ff0:	230b      	movs	r3, #11
 8010ff2:	e21a      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send ATN */
            nfcipLogI( " NFCIP(I) Sending ATN \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 8010ff4:	2100      	movs	r1, #0
 8010ff6:	2080      	movs	r0, #128	; 0x80
 8010ff8:	f7ff fed2 	bl	8010da0 <nfcipDEPControlMsg>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	82fb      	strh	r3, [r7, #22]
 8011000:	8afb      	ldrh	r3, [r7, #22]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d001      	beq.n	801100a <nfcipInitiatorHandleDEP+0x172>
 8011006:	8afb      	ldrh	r3, [r7, #22]
 8011008:	e20f      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 801100a:	2302      	movs	r3, #2
 801100c:	e20d      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
                }
#endif /* 0 */
            }

            /* Digital 1.1 16.12.5.4  if NACKs failed raise Transmission error  */
            if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 801100e:	4b7b      	ldr	r3, [pc, #492]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8011010:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011014:	1c5a      	adds	r2, r3, #1
 8011016:	b2d1      	uxtb	r1, r2
 8011018:	4a78      	ldr	r2, [pc, #480]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 801101a:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 801101e:	2b02      	cmp	r3, #2
 8011020:	d901      	bls.n	8011026 <nfcipInitiatorHandleDEP+0x18e>
            {
                return ERR_FRAMING;
 8011022:	2309      	movs	r3, #9
 8011024:	e201      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send NACK */
            nfcipLogI( " NFCIP(I) Sending NACK  \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 8011026:	4b75      	ldr	r3, [pc, #468]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8011028:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801102c:	f003 0303 	and.w	r3, r3, #3
 8011030:	b2db      	uxtb	r3, r3
 8011032:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8011036:	b2db      	uxtb	r3, r3
 8011038:	2100      	movs	r1, #0
 801103a:	4618      	mov	r0, r3
 801103c:	f7ff feb0 	bl	8010da0 <nfcipDEPControlMsg>
 8011040:	4603      	mov	r3, r0
 8011042:	82fb      	strh	r3, [r7, #22]
 8011044:	8afb      	ldrh	r3, [r7, #22]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d001      	beq.n	801104e <nfcipInitiatorHandleDEP+0x1b6>
 801104a:	8afb      	ldrh	r3, [r7, #22]
 801104c:	e1ed      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 801104e:	2302      	movs	r3, #2
 8011050:	e1eb      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            
        case ERR_NONE:
            break;
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 8011052:	2302      	movs	r3, #2
 8011054:	e1e9      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            
        default:
            nfcipLogW( " NFCIP(I) Error: %d \r\n", rxRes );
            return rxRes;
 8011056:	89fb      	ldrh	r3, [r7, #14]
 8011058:	e1e7      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            break;
 801105a:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 801105c:	4b67      	ldr	r3, [pc, #412]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 801105e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011060:	7d7b      	ldrb	r3, [r7, #21]
 8011062:	1c59      	adds	r1, r3, #1
 8011064:	7579      	strb	r1, [r7, #21]
 8011066:	4413      	add	r3, r2
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	74fb      	strb	r3, [r7, #19]
    
    nfcipLogD( " NFCIP(I) rx OK: %d bytes \r\n", nfcDepLen );
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_RES )
 801106c:	4b63      	ldr	r3, [pc, #396]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 801106e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011070:	7d7b      	ldrb	r3, [r7, #21]
 8011072:	1c59      	adds	r1, r3, #1
 8011074:	7579      	strb	r1, [r7, #21]
 8011076:	4413      	add	r3, r2
 8011078:	781b      	ldrb	r3, [r3, #0]
 801107a:	2bd5      	cmp	r3, #213	; 0xd5
 801107c:	d001      	beq.n	8011082 <nfcipInitiatorHandleDEP+0x1ea>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_RES );
        return ERR_PROTO;
 801107e:	230b      	movs	r3, #11
 8011080:	e1d3      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
    }
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DEP_RES )
 8011082:	4b5e      	ldr	r3, [pc, #376]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8011084:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011086:	7d7b      	ldrb	r3, [r7, #21]
 8011088:	1c59      	adds	r1, r3, #1
 801108a:	7579      	strb	r1, [r7, #21]
 801108c:	4413      	add	r3, r2
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	2b07      	cmp	r3, #7
 8011092:	d001      	beq.n	8011098 <nfcipInitiatorHandleDEP+0x200>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_CMD_DEP_RES );
        return ERR_PROTO;
 8011094:	230b      	movs	r3, #11
 8011096:	e1c8      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
    }
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];
 8011098:	4b58      	ldr	r3, [pc, #352]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 801109a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801109c:	7d7b      	ldrb	r3, [r7, #21]
 801109e:	1c59      	adds	r1, r3, #1
 80110a0:	7579      	strb	r1, [r7, #21]
 80110a2:	4413      	add	r3, r2
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	74bb      	strb	r3, [r7, #18]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 80110a8:	7cbb      	ldrb	r3, [r7, #18]
 80110aa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80110ae:	2b80      	cmp	r3, #128	; 0x80
 80110b0:	d00b      	beq.n	80110ca <nfcipInitiatorHandleDEP+0x232>
 80110b2:	7cbb      	ldrb	r3, [r7, #18]
 80110b4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80110b8:	2b40      	cmp	r3, #64	; 0x40
 80110ba:	d006      	beq.n	80110ca <nfcipInitiatorHandleDEP+0x232>
 80110bc:	7cbb      	ldrb	r3, [r7, #18]
 80110be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d001      	beq.n	80110ca <nfcipInitiatorHandleDEP+0x232>
    {
        return ERR_PROTO;
 80110c6:	230b      	movs	r3, #11
 80110c8:	e1af      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
    }
        
    /*******************************************************************************/
    /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 80110ca:	4b4c      	ldr	r3, [pc, #304]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 80110cc:	78db      	ldrb	r3, [r3, #3]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d015      	beq.n	80110fe <nfcipInitiatorHandleDEP+0x266>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 80110d2:	4b4a      	ldr	r3, [pc, #296]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 80110d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80110d6:	7d7b      	ldrb	r3, [r7, #21]
 80110d8:	1c59      	adds	r1, r3, #1
 80110da:	7579      	strb	r1, [r7, #21]
 80110dc:	4413      	add	r3, r2
 80110de:	781a      	ldrb	r2, [r3, #0]
 80110e0:	4b46      	ldr	r3, [pc, #280]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 80110e2:	78db      	ldrb	r3, [r3, #3]
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d104      	bne.n	80110f2 <nfcipInitiatorHandleDEP+0x25a>
 80110e8:	7cbb      	ldrb	r3, [r7, #18]
 80110ea:	f003 0304 	and.w	r3, r3, #4
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d101      	bne.n	80110f6 <nfcipInitiatorHandleDEP+0x25e>
        {
            return ERR_PROTO;
 80110f2:	230b      	movs	r3, #11
 80110f4:	e199      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 80110f6:	7d3b      	ldrb	r3, [r7, #20]
 80110f8:	3301      	adds	r3, #1
 80110fa:	753b      	strb	r3, [r7, #20]
 80110fc:	e006      	b.n	801110c <nfcipInitiatorHandleDEP+0x274>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv */
 80110fe:	7cbb      	ldrb	r3, [r7, #18]
 8011100:	f003 0304 	and.w	r3, r3, #4
 8011104:	2b00      	cmp	r3, #0
 8011106:	d001      	beq.n	801110c <nfcipInitiatorHandleDEP+0x274>
    {
        return ERR_PROTO;
 8011108:	230b      	movs	r3, #11
 801110a:	e18e      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
        /* MISRA 15.7 - Empty else */
    }
    
    /*******************************************************************************/
    /* Digital 1.0 14.6.2.8 & 14.6.3.11 NAD must not be used  */
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 801110c:	4b3b      	ldr	r3, [pc, #236]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 801110e:	791b      	ldrb	r3, [r3, #4]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d015      	beq.n	8011140 <nfcipInitiatorHandleDEP+0x2a8>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.nad) || !nfcip_PFBhasNAD( rxPFB ) )
 8011114:	4b39      	ldr	r3, [pc, #228]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8011116:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011118:	7d7b      	ldrb	r3, [r7, #21]
 801111a:	1c59      	adds	r1, r3, #1
 801111c:	7579      	strb	r1, [r7, #21]
 801111e:	4413      	add	r3, r2
 8011120:	781a      	ldrb	r2, [r3, #0]
 8011122:	4b36      	ldr	r3, [pc, #216]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8011124:	791b      	ldrb	r3, [r3, #4]
 8011126:	429a      	cmp	r2, r3
 8011128:	d104      	bne.n	8011134 <nfcipInitiatorHandleDEP+0x29c>
 801112a:	7cbb      	ldrb	r3, [r7, #18]
 801112c:	f003 0308 	and.w	r3, r3, #8
 8011130:	2b00      	cmp	r3, #0
 8011132:	d101      	bne.n	8011138 <nfcipInitiatorHandleDEP+0x2a0>
        {
            return ERR_PROTO;
 8011134:	230b      	movs	r3, #11
 8011136:	e178      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
        }        
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8011138:	7d3b      	ldrb	r3, [r7, #20]
 801113a:	3301      	adds	r3, #1
 801113c:	753b      	strb	r3, [r7, #20]
 801113e:	e006      	b.n	801114e <nfcipInitiatorHandleDEP+0x2b6>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 8011140:	7cbb      	ldrb	r3, [r7, #18]
 8011142:	f003 0308 	and.w	r3, r3, #8
 8011146:	2b00      	cmp	r3, #0
 8011148:	d001      	beq.n	801114e <nfcipInitiatorHandleDEP+0x2b6>
    {
        return ERR_PROTO;
 801114a:	230b      	movs	r3, #11
 801114c:	e16d      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
    }
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 801114e:	7cbb      	ldrb	r3, [r7, #18]
 8011150:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011154:	2b40      	cmp	r3, #64	; 0x40
 8011156:	d153      	bne.n	8011200 <nfcipInitiatorHandleDEP+0x368>
    {
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 8011158:	7cbb      	ldrb	r3, [r7, #18]
 801115a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801115e:	2b40      	cmp	r3, #64	; 0x40
 8011160:	d14a      	bne.n	80111f8 <nfcipInitiatorHandleDEP+0x360>
 8011162:	7cbb      	ldrb	r3, [r7, #18]
 8011164:	f003 0310 	and.w	r3, r3, #16
 8011168:	2b00      	cmp	r3, #0
 801116a:	d145      	bne.n	80111f8 <nfcipInitiatorHandleDEP+0x360>
        {
            nfcipLogI( " NFCIP(I) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 801116c:	4b23      	ldr	r3, [pc, #140]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 801116e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011172:	461a      	mov	r2, r3
 8011174:	7cbb      	ldrb	r3, [r7, #18]
 8011176:	f003 0303 	and.w	r3, r3, #3
 801117a:	429a      	cmp	r2, r3
 801117c:	d11c      	bne.n	80111b8 <nfcipInitiatorHandleDEP+0x320>
            {
                /* 14.12.3.3 R-ACK with correct PNI -> Increment */
                gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 801117e:	4b1f      	ldr	r3, [pc, #124]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8011180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011184:	3301      	adds	r3, #1
 8011186:	b2db      	uxtb	r3, r3
 8011188:	f003 0303 	and.w	r3, r3, #3
 801118c:	b2da      	uxtb	r2, r3
 801118e:	4b1b      	ldr	r3, [pc, #108]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8011190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                                
                /* R-ACK while not performing chaining -> Protocol error*/
                if( !gNfcip.isTxChaining )
 8011194:	4b19      	ldr	r3, [pc, #100]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 8011196:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 801119a:	f083 0301 	eor.w	r3, r3, #1
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d001      	beq.n	80111a8 <nfcipInitiatorHandleDEP+0x310>
                {
                    return ERR_PROTO;
 80111a4:	230b      	movs	r3, #11
 80111a6:	e140      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipClearCounters();
 80111a8:	f7ff fe5a 	bl	8010e60 <nfcipClearCounters>
                gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 80111ac:	4b13      	ldr	r3, [pc, #76]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 80111ae:	2204      	movs	r2, #4
 80111b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_NONE;                            /* This block has been transmitted */
 80111b4:	2300      	movs	r3, #0
 80111b6:	e138      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            }
            else  /* Digital 1.0 14.12.4.5 ACK with wrong PNI Initiator may retransmit */
            {
                if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 80111b8:	4b10      	ldr	r3, [pc, #64]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 80111ba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80111be:	1c5a      	adds	r2, r3, #1
 80111c0:	b2d1      	uxtb	r1, r2
 80111c2:	4a0e      	ldr	r2, [pc, #56]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 80111c4:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 80111c8:	2b02      	cmp	r3, #2
 80111ca:	d901      	bls.n	80111d0 <nfcipInitiatorHandleDEP+0x338>
                {
                    return ERR_PROTO;
 80111cc:	230b      	movs	r3, #11
 80111ce:	e12c      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
                /* Extended the MAY in Digital 1.0 14.12.4.5 to only reTransmit if the ACK
                 * is for the previous DEP, otherwise raise Protocol immediately 
                 * If the PNI difference is more than 1 it is worthless to reTransmit 3x
                 * and after raise the error                                              */
                
                if( nfcip_PNIDec( gNfcip.pni ) ==  nfcip_PBF_PNI( rxPFB ) )
 80111d0:	4b0a      	ldr	r3, [pc, #40]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 80111d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80111d6:	3b01      	subs	r3, #1
 80111d8:	b2da      	uxtb	r2, r3
 80111da:	7cbb      	ldrb	r3, [r7, #18]
 80111dc:	4053      	eors	r3, r2
 80111de:	b2db      	uxtb	r3, r3
 80111e0:	f003 0303 	and.w	r3, r3, #3
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d105      	bne.n	80111f4 <nfcipInitiatorHandleDEP+0x35c>
                {
                    /* ReTransmit */
                    nfcipLogI( " NFCIP(I) Rcvd ACK prev PNI -> reTx \r\n" );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 80111e8:	4b04      	ldr	r3, [pc, #16]	; (80111fc <nfcipInitiatorHandleDEP+0x364>)
 80111ea:	2205      	movs	r2, #5
 80111ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 80111f0:	2302      	movs	r3, #2
 80111f2:	e11a      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipLogI( " NFCIP(I) Rcvd ACK unexpected far PNI -> Error \r\n" );
                return ERR_PROTO;
 80111f4:	230b      	movs	r3, #11
 80111f6:	e118      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            }
        }
        else /* Digital 1.0 - 14.12.5.2 Target must never send NACK  */
        {            
            return ERR_PROTO;
 80111f8:	230b      	movs	r3, #11
 80111fa:	e116      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
 80111fc:	200034cc 	.word	0x200034cc
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )                                
 8011200:	7cbb      	ldrb	r3, [r7, #18]
 8011202:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011206:	2b80      	cmp	r3, #128	; 0x80
 8011208:	f040 8094 	bne.w	8011334 <nfcipInitiatorHandleDEP+0x49c>
    {
        nfcipLogI( " NFCIP(I) Rcvd S-PDU  \r\n" );
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisSATN( rxPFB ) )                         /* If is a S-ATN        */
 801120c:	7cbb      	ldrb	r3, [r7, #18]
 801120e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011212:	2b80      	cmp	r3, #128	; 0x80
 8011214:	d146      	bne.n	80112a4 <nfcipInitiatorHandleDEP+0x40c>
 8011216:	7cbb      	ldrb	r3, [r7, #18]
 8011218:	f003 0310 	and.w	r3, r3, #16
 801121c:	2b00      	cmp	r3, #0
 801121e:	d141      	bne.n	80112a4 <nfcipInitiatorHandleDEP+0x40c>
        {
            nfcipLogI( " NFCIP(I) Rcvd ATN  \r\n" );
            if( nfcip_PFBisSATN( gNfcip.lastPFB ) )            /* Check if is expected */
 8011220:	4b84      	ldr	r3, [pc, #528]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 8011222:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011226:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801122a:	2b80      	cmp	r3, #128	; 0x80
 801122c:	d138      	bne.n	80112a0 <nfcipInitiatorHandleDEP+0x408>
 801122e:	4b81      	ldr	r3, [pc, #516]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 8011230:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011234:	f003 0310 	and.w	r3, r3, #16
 8011238:	2b00      	cmp	r3, #0
 801123a:	d131      	bne.n	80112a0 <nfcipInitiatorHandleDEP+0x408>
            {  
                gNfcip.cntATNRetrys = 0;                       /* Clear ATN counter    */
 801123c:	4b7d      	ldr	r3, [pc, #500]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 801123e:	2200      	movs	r2, #0
 8011240:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                
                /* Although spec is not clear NFC Forum Digital test is expecting to
                 * retransmit upon receiving ATN_RES */
                if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 8011244:	4b7b      	ldr	r3, [pc, #492]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 8011246:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801124a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801124e:	2b80      	cmp	r3, #128	; 0x80
 8011250:	d114      	bne.n	801127c <nfcipInitiatorHandleDEP+0x3e4>
 8011252:	4b78      	ldr	r3, [pc, #480]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 8011254:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8011258:	f003 0310 	and.w	r3, r3, #16
 801125c:	2b00      	cmp	r3, #0
 801125e:	d00d      	beq.n	801127c <nfcipInitiatorHandleDEP+0x3e4>
                {
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx RTOX_RES \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 8011260:	4b74      	ldr	r3, [pc, #464]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 8011262:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011266:	4619      	mov	r1, r3
 8011268:	2090      	movs	r0, #144	; 0x90
 801126a:	f7ff fd99 	bl	8010da0 <nfcipDEPControlMsg>
 801126e:	4603      	mov	r3, r0
 8011270:	82fb      	strh	r3, [r7, #22]
 8011272:	8afb      	ldrh	r3, [r7, #22]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d011      	beq.n	801129c <nfcipInitiatorHandleDEP+0x404>
 8011278:	8afb      	ldrh	r3, [r7, #22]
 801127a:	e0d6      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
                }
                else
                {
                    /* ReTransmit ? */
                    if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 801127c:	4b6d      	ldr	r3, [pc, #436]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 801127e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8011282:	1c5a      	adds	r2, r3, #1
 8011284:	b2d1      	uxtb	r1, r2
 8011286:	4a6b      	ldr	r2, [pc, #428]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 8011288:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 801128c:	2b02      	cmp	r3, #2
 801128e:	d901      	bls.n	8011294 <nfcipInitiatorHandleDEP+0x3fc>
                    {
                        return ERR_PROTO;
 8011290:	230b      	movs	r3, #11
 8011292:	e0ca      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
                    }
                    
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx  PNI: %d \r\n", gNfcip.pni );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8011294:	4b67      	ldr	r3, [pc, #412]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 8011296:	2205      	movs	r2, #5
 8011298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 801129c:	2302      	movs	r3, #2
 801129e:	e0c4      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            }
            else                                               /* Digital 1.0  14.12.4.4 & 14.12.4.8 */
            {
                return ERR_PROTO;
 80112a0:	230b      	movs	r3, #11
 80112a2:	e0c2      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            }
        }
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 80112a4:	7cbb      	ldrb	r3, [r7, #18]
 80112a6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80112aa:	2b80      	cmp	r3, #128	; 0x80
 80112ac:	d140      	bne.n	8011330 <nfcipInitiatorHandleDEP+0x498>
 80112ae:	7cbb      	ldrb	r3, [r7, #18]
 80112b0:	f003 0310 	and.w	r3, r3, #16
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d03b      	beq.n	8011330 <nfcipInitiatorHandleDEP+0x498>
        {
            nfcipLogI( " NFCIP(I) Rcvd TO  \r\n" );
            
            rxRTOX = gNfcip.rxBuf[rxMsgIt++];
 80112b8:	4b5e      	ldr	r3, [pc, #376]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 80112ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80112bc:	7d7b      	ldrb	r3, [r7, #21]
 80112be:	1c59      	adds	r1, r3, #1
 80112c0:	7579      	strb	r1, [r7, #21]
 80112c2:	4413      	add	r3, r2
 80112c4:	781b      	ldrb	r3, [r3, #0]
 80112c6:	747b      	strb	r3, [r7, #17]
            
            /* Digital 1.1 16.12.4.3 - Initiator MAY stop accepting subsequent RTOX Req   *
             *                       - RTOX request to an ATN -> Protocol error           */
            if( (gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 80112c8:	4b5a      	ldr	r3, [pc, #360]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 80112ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80112ce:	1c5a      	adds	r2, r3, #1
 80112d0:	b2d1      	uxtb	r1, r2
 80112d2:	4a58      	ldr	r2, [pc, #352]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 80112d4:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 80112d8:	2b03      	cmp	r3, #3
 80112da:	d80d      	bhi.n	80112f8 <nfcipInitiatorHandleDEP+0x460>
 80112dc:	4b55      	ldr	r3, [pc, #340]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 80112de:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80112e2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80112e6:	2b80      	cmp	r3, #128	; 0x80
 80112e8:	d108      	bne.n	80112fc <nfcipInitiatorHandleDEP+0x464>
 80112ea:	4b52      	ldr	r3, [pc, #328]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 80112ec:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80112f0:	f003 0310 	and.w	r3, r3, #16
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d101      	bne.n	80112fc <nfcipInitiatorHandleDEP+0x464>
            {
                return ERR_PROTO;
 80112f8:	230b      	movs	r3, #11
 80112fa:	e096      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.1 16.8.4.1 RTOX must be between [1,59] */
            if( (rxRTOX < NFCIP_INIT_MIN_RTOX) || (rxRTOX > NFCIP_INIT_MAX_RTOX) )
 80112fc:	7c7b      	ldrb	r3, [r7, #17]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d002      	beq.n	8011308 <nfcipInitiatorHandleDEP+0x470>
 8011302:	7c7b      	ldrb	r3, [r7, #17]
 8011304:	2b3b      	cmp	r3, #59	; 0x3b
 8011306:	d901      	bls.n	801130c <nfcipInitiatorHandleDEP+0x474>
            {
                return ERR_PROTO;
 8011308:	230b      	movs	r3, #11
 801130a:	e08e      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            }
            
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), rxRTOX ) );
 801130c:	7c7b      	ldrb	r3, [r7, #17]
 801130e:	4619      	mov	r1, r3
 8011310:	2090      	movs	r0, #144	; 0x90
 8011312:	f7ff fd45 	bl	8010da0 <nfcipDEPControlMsg>
 8011316:	4603      	mov	r3, r0
 8011318:	82fb      	strh	r3, [r7, #22]
 801131a:	8afb      	ldrh	r3, [r7, #22]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d001      	beq.n	8011324 <nfcipInitiatorHandleDEP+0x48c>
 8011320:	8afb      	ldrh	r3, [r7, #22]
 8011322:	e082      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            gNfcip.lastRTOX = rxRTOX;
 8011324:	4a43      	ldr	r2, [pc, #268]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 8011326:	7c7b      	ldrb	r3, [r7, #17]
 8011328:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            
            return ERR_BUSY;
 801132c:	2302      	movs	r3, #2
 801132e:	e07c      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            /* Unexpected S-PDU */
            return ERR_PROTO;                       /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
 8011330:	230b      	movs	r3, #11
 8011332:	e07a      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 8011334:	7cbb      	ldrb	r3, [r7, #18]
 8011336:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801133a:	2b00      	cmp	r3, #0
 801133c:	d174      	bne.n	8011428 <nfcipInitiatorHandleDEP+0x590>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 801133e:	4b3d      	ldr	r3, [pc, #244]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 8011340:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011344:	461a      	mov	r2, r3
 8011346:	7cbb      	ldrb	r3, [r7, #18]
 8011348:	f003 0303 	and.w	r3, r3, #3
 801134c:	429a      	cmp	r2, r3
 801134e:	d001      	beq.n	8011354 <nfcipInitiatorHandleDEP+0x4bc>
        {
            nfcipLogI( " NFCIP(I) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni  , nfcip_PBF_PNI( rxPFB ) );
            return ERR_PROTO;
 8011350:	230b      	movs	r3, #11
 8011352:	e06a      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
        }
        
        nfcipLogD( " NFCIP(I) Rcvd IPDU OK    PNI: %d \r\n", gNfcip.pni );
        
        /* 14.12.3.3 I-PDU with correct PNI -> Increment */
        gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8011354:	4b37      	ldr	r3, [pc, #220]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 8011356:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801135a:	3301      	adds	r3, #1
 801135c:	b2db      	uxtb	r3, r3
 801135e:	f003 0303 	and.w	r3, r3, #3
 8011362:	b2da      	uxtb	r2, r3
 8011364:	4b33      	ldr	r3, [pc, #204]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 8011366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
        
        /* Successful data Exchange */
        nfcipClearCounters();
 801136a:	f7ff fd79 	bl	8010e60 <nfcipClearCounters>
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 801136e:	7cfb      	ldrb	r3, [r7, #19]
 8011370:	b29a      	uxth	r2, r3
 8011372:	7d3b      	ldrb	r3, [r7, #20]
 8011374:	b29b      	uxth	r3, r3
 8011376:	1ad3      	subs	r3, r2, r3
 8011378:	b29b      	uxth	r3, r3
 801137a:	3b04      	subs	r3, #4
 801137c:	b29a      	uxth	r2, r3
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	801a      	strh	r2, [r3, #0]
        
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 8011382:	4b2c      	ldr	r3, [pc, #176]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 8011384:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8011388:	461a      	mov	r2, r3
 801138a:	7d3b      	ldrb	r3, [r7, #20]
 801138c:	3304      	adds	r3, #4
 801138e:	429a      	cmp	r2, r3
 8011390:	d013      	beq.n	80113ba <nfcipInitiatorHandleDEP+0x522>
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	881b      	ldrh	r3, [r3, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00f      	beq.n	80113ba <nfcipInitiatorHandleDEP+0x522>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 801139a:	4b26      	ldr	r3, [pc, #152]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 801139c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801139e:	4a25      	ldr	r2, [pc, #148]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 80113a0:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 80113a4:	1898      	adds	r0, r3, r2
 80113a6:	4b23      	ldr	r3, [pc, #140]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 80113a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80113aa:	7d3b      	ldrb	r3, [r7, #20]
 80113ac:	3304      	adds	r3, #4
 80113ae:	18d1      	adds	r1, r2, r3
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	881b      	ldrh	r3, [r3, #0]
 80113b4:	461a      	mov	r2, r3
 80113b6:	f007 fd29 	bl	8018e0c <memmove>
        }

        /*******************************************************************************/
        /* Check if target is indicating chaining MI                                   */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 80113ba:	7cbb      	ldrb	r3, [r7, #18]
 80113bc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d127      	bne.n	8011414 <nfcipInitiatorHandleDEP+0x57c>
 80113c4:	7cbb      	ldrb	r3, [r7, #18]
 80113c6:	f003 0310 	and.w	r3, r3, #16
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d022      	beq.n	8011414 <nfcipInitiatorHandleDEP+0x57c>
        {
            gNfcip.isRxChaining = true;
 80113ce:	4b19      	ldr	r3, [pc, #100]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 80113d0:	2201      	movs	r2, #1
 80113d2:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2201      	movs	r2, #1
 80113da:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(I) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 80113dc:	4b15      	ldr	r3, [pc, #84]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 80113de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80113e2:	f003 0303 	and.w	r3, r3, #3
 80113e6:	b2db      	uxtb	r3, r3
 80113e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113ec:	b2d8      	uxtb	r0, r3
 80113ee:	4b11      	ldr	r3, [pc, #68]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 80113f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80113f2:	7d7b      	ldrb	r3, [r7, #21]
 80113f4:	1c59      	adds	r1, r3, #1
 80113f6:	7579      	strb	r1, [r7, #21]
 80113f8:	4413      	add	r3, r2
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	4619      	mov	r1, r3
 80113fe:	f7ff fccf 	bl	8010da0 <nfcipDEPControlMsg>
 8011402:	4603      	mov	r3, r0
 8011404:	82fb      	strh	r3, [r7, #22]
 8011406:	8afb      	ldrh	r3, [r7, #22]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d001      	beq.n	8011410 <nfcipInitiatorHandleDEP+0x578>
 801140c:	8afb      	ldrh	r3, [r7, #22]
 801140e:	e00c      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 8011410:	230d      	movs	r3, #13
 8011412:	e00a      	b.n	801142a <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            gNfcip.isRxChaining = false;
 8011414:	4b07      	ldr	r3, [pc, #28]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 8011416:	2200      	movs	r2, #0
 8011418:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            gNfcip.state        = NFCIP_ST_INIT_DEP_IDLE;
 801141c:	4b05      	ldr	r3, [pc, #20]	; (8011434 <nfcipInitiatorHandleDEP+0x59c>)
 801141e:	2204      	movs	r2, #4
 8011420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            ret = ERR_NONE;    /* Data exchange done */
 8011424:	2300      	movs	r3, #0
 8011426:	82fb      	strh	r3, [r7, #22]
        }
    }
    return ret;
 8011428:	8afb      	ldrh	r3, [r7, #22]
}
 801142a:	4618      	mov	r0, r3
 801142c:	3718      	adds	r7, #24
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
 8011432:	bf00      	nop
 8011434:	200034cc 	.word	0x200034cc

08011438 <nfcipTargetHandleRX>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleRX( ReturnCode rxRes, uint16_t *outActRxLen, bool *outIsChaining )
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b08c      	sub	sp, #48	; 0x30
 801143c:	af04      	add	r7, sp, #16
 801143e:	4603      	mov	r3, r0
 8011440:	60b9      	str	r1, [r7, #8]
 8011442:	607a      	str	r2, [r7, #4]
 8011444:	81fb      	strh	r3, [r7, #14]
    uint8_t    rxPFB;
    uint8_t    optHdrLen;
    uint8_t    resBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_TARGET_RES_MAX];
        
    
    ret        = ERR_INTERNAL;
 8011446:	230c      	movs	r3, #12
 8011448:	83fb      	strh	r3, [r7, #30]
    rxMsgIt    = 0;
 801144a:	2300      	movs	r3, #0
 801144c:	777b      	strb	r3, [r7, #29]
    optHdrLen  = 0;
 801144e:	2300      	movs	r3, #0
 8011450:	773b      	strb	r3, [r7, #28]
    
    *outActRxLen    = 0;
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	2200      	movs	r2, #0
 8011456:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2200      	movs	r2, #0
 801145c:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 801145e:	89fb      	ldrh	r3, [r7, #14]
 8011460:	2b02      	cmp	r3, #2
 8011462:	d007      	beq.n	8011474 <nfcipTargetHandleRX+0x3c>
 8011464:	2b25      	cmp	r3, #37	; 0x25
 8011466:	d002      	beq.n	801146e <nfcipTargetHandleRX+0x36>
 8011468:	2b00      	cmp	r3, #0
 801146a:	d01c      	beq.n	80114a6 <nfcipTargetHandleRX+0x6e>
 801146c:	e005      	b.n	801147a <nfcipTargetHandleRX+0x42>
        case ERR_NONE:
            break;
            
        case ERR_LINK_LOSS:
            nfcipLogW( " NFCIP(T) Error: %d \r\n", rxRes );
            return rxRes;
 801146e:	89fb      	ldrh	r3, [r7, #14]
 8011470:	f000 bc23 	b.w	8011cba <nfcipTargetHandleRX+0x882>
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 8011474:	2302      	movs	r3, #2
 8011476:	f000 bc20 	b.w	8011cba <nfcipTargetHandleRX+0x882>
             * The Target MUST always stay in receive mode when a                          *
             * Transmission Error or a Protocol Error occurs.                              *
             *                                                                             *
             * Do not push Transmission/Protocol Errors to upper layer in Listen Mode #766 */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 801147a:	4ba1      	ldr	r3, [pc, #644]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 801147c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 801147e:	4ba0      	ldr	r3, [pc, #640]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 8011480:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 8011484:	4b9e      	ldr	r3, [pc, #632]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 8011486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011488:	f04f 32ff 	mov.w	r2, #4294967295
 801148c:	9202      	str	r2, [sp, #8]
 801148e:	2204      	movs	r2, #4
 8011490:	9201      	str	r2, [sp, #4]
 8011492:	9300      	str	r3, [sp, #0]
 8011494:	4603      	mov	r3, r0
 8011496:	460a      	mov	r2, r1
 8011498:	2100      	movs	r1, #0
 801149a:	2000      	movs	r0, #0
 801149c:	f004 fd32 	bl	8015f04 <rfalTransceiveBlockingTx>
            return ERR_BUSY;
 80114a0:	2302      	movs	r3, #2
 80114a2:	f000 bc0a 	b.w	8011cba <nfcipTargetHandleRX+0x882>
            break;
 80114a6:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 80114a8:	4b95      	ldr	r3, [pc, #596]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80114aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80114ac:	7f7b      	ldrb	r3, [r7, #29]
 80114ae:	1c59      	adds	r1, r3, #1
 80114b0:	7779      	strb	r1, [r7, #29]
 80114b2:	4413      	add	r3, r2
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	76fb      	strb	r3, [r7, #27]
        
    nfcipLogD( " NFCIP(T) rx OK: %d bytes \r\n", nfcDepLen );
    
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_REQ )
 80114b8:	4b91      	ldr	r3, [pc, #580]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80114ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80114bc:	7f7b      	ldrb	r3, [r7, #29]
 80114be:	1c59      	adds	r1, r3, #1
 80114c0:	7779      	strb	r1, [r7, #29]
 80114c2:	4413      	add	r3, r2
 80114c4:	781b      	ldrb	r3, [r3, #0]
 80114c6:	2bd4      	cmp	r3, #212	; 0xd4
 80114c8:	d014      	beq.n	80114f4 <nfcipTargetHandleRX+0xbc>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80114ca:	4b8d      	ldr	r3, [pc, #564]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80114cc:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80114ce:	4b8c      	ldr	r3, [pc, #560]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80114d0:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 80114d4:	4b8a      	ldr	r3, [pc, #552]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80114d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114d8:	f04f 32ff 	mov.w	r2, #4294967295
 80114dc:	9202      	str	r2, [sp, #8]
 80114de:	2204      	movs	r2, #4
 80114e0:	9201      	str	r2, [sp, #4]
 80114e2:	9300      	str	r3, [sp, #0]
 80114e4:	4603      	mov	r3, r0
 80114e6:	460a      	mov	r2, r1
 80114e8:	2100      	movs	r1, #0
 80114ea:	2000      	movs	r0, #0
 80114ec:	f004 fd0a 	bl	8015f04 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore bad request */
 80114f0:	2302      	movs	r3, #2
 80114f2:	e3e2      	b.n	8011cba <nfcipTargetHandleRX+0x882>
    
    
    /*******************************************************************************/
    /* Check whether target rcvd a normal DEP or deactivation request              */
    /*******************************************************************************/
    switch( gNfcip.rxBuf[rxMsgIt++] )
 80114f4:	4b82      	ldr	r3, [pc, #520]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80114f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80114f8:	7f7b      	ldrb	r3, [r7, #29]
 80114fa:	1c59      	adds	r1, r3, #1
 80114fc:	7779      	strb	r1, [r7, #29]
 80114fe:	4413      	add	r3, r2
 8011500:	781b      	ldrb	r3, [r3, #0]
 8011502:	2b08      	cmp	r3, #8
 8011504:	d004      	beq.n	8011510 <nfcipTargetHandleRX+0xd8>
 8011506:	2b0a      	cmp	r3, #10
 8011508:	d02f      	beq.n	801156a <nfcipTargetHandleRX+0x132>
 801150a:	2b06      	cmp	r3, #6
 801150c:	d06f      	beq.n	80115ee <nfcipTargetHandleRX+0x1b6>
 801150e:	e059      	b.n	80115c4 <nfcipTargetHandleRX+0x18c>
            
            nfcipLogI( " NFCIP(T) rx DSL \r\n" );
            
            /* Digital 1.0  14.9.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.9.1.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 8011510:	4b7b      	ldr	r3, [pc, #492]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 8011512:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011514:	7f7b      	ldrb	r3, [r7, #29]
 8011516:	1c59      	adds	r1, r3, #1
 8011518:	7779      	strb	r1, [r7, #29]
 801151a:	4413      	add	r3, r2
 801151c:	781a      	ldrb	r2, [r3, #0]
 801151e:	4b78      	ldr	r3, [pc, #480]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 8011520:	78db      	ldrb	r3, [r3, #3]
 8011522:	429a      	cmp	r2, r3
 8011524:	d102      	bne.n	801152c <nfcipTargetHandleRX+0xf4>
 8011526:	7efb      	ldrb	r3, [r7, #27]
 8011528:	2b04      	cmp	r3, #4
 801152a:	d003      	beq.n	8011534 <nfcipTargetHandleRX+0xfc>
 801152c:	4b74      	ldr	r3, [pc, #464]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 801152e:	78db      	ldrb	r3, [r3, #3]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d106      	bne.n	8011542 <nfcipTargetHandleRX+0x10a>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 8011534:	4b72      	ldr	r3, [pc, #456]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 8011536:	78db      	ldrb	r3, [r3, #3]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d104      	bne.n	8011546 <nfcipTargetHandleRX+0x10e>
 801153c:	7efb      	ldrb	r3, [r7, #27]
 801153e:	2b03      	cmp	r3, #3
 8011540:	d001      	beq.n	8011546 <nfcipTargetHandleRX+0x10e>
               )
            {
                nfcipLogI( " NFCIP(T) DSL wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 8011542:	2302      	movs	r3, #2
 8011544:	e3b9      	b.n	8011cba <nfcipTargetHandleRX+0x882>
            }
            
            nfcipTx( NFCIP_CMD_DSL_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 8011546:	f107 0114 	add.w	r1, r7, #20
 801154a:	f04f 33ff 	mov.w	r3, #4294967295
 801154e:	9301      	str	r3, [sp, #4]
 8011550:	2300      	movs	r3, #0
 8011552:	9300      	str	r3, [sp, #0]
 8011554:	2300      	movs	r3, #0
 8011556:	2200      	movs	r2, #0
 8011558:	2009      	movs	r0, #9
 801155a:	f000 fbb7 	bl	8011ccc <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_SLEEP;
 801155e:	4b68      	ldr	r3, [pc, #416]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 8011560:	2210      	movs	r2, #16
 8011562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_SLEEP_REQ;
 8011566:	2320      	movs	r3, #32
 8011568:	e3a7      	b.n	8011cba <nfcipTargetHandleRX+0x882>
            
            nfcipLogI( " NFCIP(T) rx RLS \r\n" );
            
            /* Digital 1.0  14.10.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.10.2.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 801156a:	4b65      	ldr	r3, [pc, #404]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 801156c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801156e:	7f7b      	ldrb	r3, [r7, #29]
 8011570:	1c59      	adds	r1, r3, #1
 8011572:	7779      	strb	r1, [r7, #29]
 8011574:	4413      	add	r3, r2
 8011576:	781a      	ldrb	r2, [r3, #0]
 8011578:	4b61      	ldr	r3, [pc, #388]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 801157a:	78db      	ldrb	r3, [r3, #3]
 801157c:	429a      	cmp	r2, r3
 801157e:	d102      	bne.n	8011586 <nfcipTargetHandleRX+0x14e>
 8011580:	7efb      	ldrb	r3, [r7, #27]
 8011582:	2b04      	cmp	r3, #4
 8011584:	d003      	beq.n	801158e <nfcipTargetHandleRX+0x156>
 8011586:	4b5e      	ldr	r3, [pc, #376]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 8011588:	78db      	ldrb	r3, [r3, #3]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d106      	bne.n	801159c <nfcipTargetHandleRX+0x164>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen > RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 801158e:	4b5c      	ldr	r3, [pc, #368]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 8011590:	78db      	ldrb	r3, [r3, #3]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d104      	bne.n	80115a0 <nfcipTargetHandleRX+0x168>
 8011596:	7efb      	ldrb	r3, [r7, #27]
 8011598:	2b03      	cmp	r3, #3
 801159a:	d901      	bls.n	80115a0 <nfcipTargetHandleRX+0x168>
               )
            {
                nfcipLogI( " NFCIP(T) RLS wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 801159c:	2302      	movs	r3, #2
 801159e:	e38c      	b.n	8011cba <nfcipTargetHandleRX+0x882>
            }
                
            nfcipTx( NFCIP_CMD_RLS_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 80115a0:	f107 0114 	add.w	r1, r7, #20
 80115a4:	f04f 33ff 	mov.w	r3, #4294967295
 80115a8:	9301      	str	r3, [sp, #4]
 80115aa:	2300      	movs	r3, #0
 80115ac:	9300      	str	r3, [sp, #0]
 80115ae:	2300      	movs	r3, #0
 80115b0:	2200      	movs	r2, #0
 80115b2:	200b      	movs	r0, #11
 80115b4:	f000 fb8a 	bl	8011ccc <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;
 80115b8:	4b51      	ldr	r3, [pc, #324]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80115ba:	220c      	movs	r2, #12
 80115bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_RELEASE_REQ;
 80115c0:	231f      	movs	r3, #31
 80115c2:	e37a      	b.n	8011cba <nfcipTargetHandleRX+0x882>
        default:
            
            /* Don't go to NFCIP_ST_TARG_DEP_IDLE state as it needs to ignore this    *
             * invalid frame, and keep waiting for more frames                        */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80115c4:	4b4e      	ldr	r3, [pc, #312]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80115c6:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80115c8:	4b4d      	ldr	r3, [pc, #308]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80115ca:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 80115ce:	4b4c      	ldr	r3, [pc, #304]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80115d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115d2:	f04f 32ff 	mov.w	r2, #4294967295
 80115d6:	9202      	str	r2, [sp, #8]
 80115d8:	2204      	movs	r2, #4
 80115da:	9201      	str	r2, [sp, #4]
 80115dc:	9300      	str	r3, [sp, #0]
 80115de:	4603      	mov	r3, r0
 80115e0:	460a      	mov	r2, r1
 80115e2:	2100      	movs	r1, #0
 80115e4:	2000      	movs	r0, #0
 80115e6:	f004 fc8d 	bl	8015f04 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad frame */
 80115ea:	2302      	movs	r3, #2
 80115ec:	e365      	b.n	8011cba <nfcipTargetHandleRX+0x882>
            break;                                /* Continue to normal DEP processing */
 80115ee:	bf00      	nop
    }
    
    /*******************************************************************************/
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];                    /* Store rcvd PFB  */
 80115f0:	4b43      	ldr	r3, [pc, #268]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80115f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80115f4:	7f7b      	ldrb	r3, [r7, #29]
 80115f6:	1c59      	adds	r1, r3, #1
 80115f8:	7779      	strb	r1, [r7, #29]
 80115fa:	4413      	add	r3, r2
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	76bb      	strb	r3, [r7, #26]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 8011600:	7ebb      	ldrb	r3, [r7, #26]
 8011602:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011606:	2b80      	cmp	r3, #128	; 0x80
 8011608:	d01e      	beq.n	8011648 <nfcipTargetHandleRX+0x210>
 801160a:	7ebb      	ldrb	r3, [r7, #26]
 801160c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011610:	2b40      	cmp	r3, #64	; 0x40
 8011612:	d019      	beq.n	8011648 <nfcipTargetHandleRX+0x210>
 8011614:	7ebb      	ldrb	r3, [r7, #26]
 8011616:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801161a:	2b00      	cmp	r3, #0
 801161c:	d014      	beq.n	8011648 <nfcipTargetHandleRX+0x210>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 801161e:	4b38      	ldr	r3, [pc, #224]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 8011620:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8011622:	4b37      	ldr	r3, [pc, #220]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 8011624:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 8011628:	4b35      	ldr	r3, [pc, #212]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 801162a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801162c:	f04f 32ff 	mov.w	r2, #4294967295
 8011630:	9202      	str	r2, [sp, #8]
 8011632:	2204      	movs	r2, #4
 8011634:	9201      	str	r2, [sp, #4]
 8011636:	9300      	str	r3, [sp, #0]
 8011638:	4603      	mov	r3, r0
 801163a:	460a      	mov	r2, r1
 801163c:	2100      	movs	r1, #0
 801163e:	2000      	movs	r0, #0
 8011640:	f004 fc60 	bl	8015f04 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore invalid PFB  */
 8011644:	2302      	movs	r3, #2
 8011646:	e338      	b.n	8011cba <nfcipTargetHandleRX+0x882>
    }
    
    /*******************************************************************************/   
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8011648:	4b2d      	ldr	r3, [pc, #180]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 801164a:	78db      	ldrb	r3, [r3, #3]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d03d      	beq.n	80116cc <nfcipTargetHandleRX+0x294>
    {
        if( !nfcip_PFBhasDID( rxPFB ) )
 8011650:	7ebb      	ldrb	r3, [r7, #26]
 8011652:	f003 0304 	and.w	r3, r3, #4
 8011656:	2b00      	cmp	r3, #0
 8011658:	d114      	bne.n	8011684 <nfcipTargetHandleRX+0x24c>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 801165a:	4b29      	ldr	r3, [pc, #164]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 801165c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 801165e:	4b28      	ldr	r3, [pc, #160]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 8011660:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 8011664:	4b26      	ldr	r3, [pc, #152]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 8011666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011668:	f04f 32ff 	mov.w	r2, #4294967295
 801166c:	9202      	str	r2, [sp, #8]
 801166e:	2204      	movs	r2, #4
 8011670:	9201      	str	r2, [sp, #4]
 8011672:	9300      	str	r3, [sp, #0]
 8011674:	4603      	mov	r3, r0
 8011676:	460a      	mov	r2, r1
 8011678:	2100      	movs	r1, #0
 801167a:	2000      	movs	r0, #0
 801167c:	f004 fc42 	bl	8015f04 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 8011680:	2302      	movs	r3, #2
 8011682:	e31a      	b.n	8011cba <nfcipTargetHandleRX+0x882>
        }
        if( gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did ) /* MISRA 13.5 */
 8011684:	4b1e      	ldr	r3, [pc, #120]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 8011686:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011688:	7f7b      	ldrb	r3, [r7, #29]
 801168a:	1c59      	adds	r1, r3, #1
 801168c:	7779      	strb	r1, [r7, #29]
 801168e:	4413      	add	r3, r2
 8011690:	781a      	ldrb	r2, [r3, #0]
 8011692:	4b1b      	ldr	r3, [pc, #108]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 8011694:	78db      	ldrb	r3, [r3, #3]
 8011696:	429a      	cmp	r2, r3
 8011698:	d014      	beq.n	80116c4 <nfcipTargetHandleRX+0x28c>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 801169a:	4b19      	ldr	r3, [pc, #100]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 801169c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 801169e:	4b18      	ldr	r3, [pc, #96]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80116a0:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 80116a4:	4b16      	ldr	r3, [pc, #88]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80116a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116a8:	f04f 32ff 	mov.w	r2, #4294967295
 80116ac:	9202      	str	r2, [sp, #8]
 80116ae:	2204      	movs	r2, #4
 80116b0:	9201      	str	r2, [sp, #4]
 80116b2:	9300      	str	r3, [sp, #0]
 80116b4:	4603      	mov	r3, r0
 80116b6:	460a      	mov	r2, r1
 80116b8:	2100      	movs	r1, #0
 80116ba:	2000      	movs	r0, #0
 80116bc:	f004 fc22 	bl	8015f04 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 80116c0:	2302      	movs	r3, #2
 80116c2:	e2fa      	b.n	8011cba <nfcipTargetHandleRX+0x882>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 80116c4:	7f3b      	ldrb	r3, [r7, #28]
 80116c6:	3301      	adds	r3, #1
 80116c8:	773b      	strb	r3, [r7, #28]
 80116ca:	e01b      	b.n	8011704 <nfcipTargetHandleRX+0x2cc>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv     */
 80116cc:	7ebb      	ldrb	r3, [r7, #26]
 80116ce:	f003 0304 	and.w	r3, r3, #4
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d016      	beq.n	8011704 <nfcipTargetHandleRX+0x2cc>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80116d6:	4b0a      	ldr	r3, [pc, #40]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80116d8:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80116da:	4b09      	ldr	r3, [pc, #36]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80116dc:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 80116e0:	4b07      	ldr	r3, [pc, #28]	; (8011700 <nfcipTargetHandleRX+0x2c8>)
 80116e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116e4:	f04f 32ff 	mov.w	r2, #4294967295
 80116e8:	9202      	str	r2, [sp, #8]
 80116ea:	2204      	movs	r2, #4
 80116ec:	9201      	str	r2, [sp, #4]
 80116ee:	9300      	str	r3, [sp, #0]
 80116f0:	4603      	mov	r3, r0
 80116f2:	460a      	mov	r2, r1
 80116f4:	2100      	movs	r1, #0
 80116f6:	2000      	movs	r0, #0
 80116f8:	f004 fc04 	bl	8015f04 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore unexpected DID  */
 80116fc:	2302      	movs	r3, #2
 80116fe:	e2dc      	b.n	8011cba <nfcipTargetHandleRX+0x882>
 8011700:	200034cc 	.word	0x200034cc
        /* MISRA 15.7 - Empty else */
    }
                                  
        
    /*******************************************************************************/
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 8011704:	4bb5      	ldr	r3, [pc, #724]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 8011706:	791b      	ldrb	r3, [r3, #4]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d028      	beq.n	801175e <nfcipTargetHandleRX+0x326>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 801170c:	4bb3      	ldr	r3, [pc, #716]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 801170e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011710:	7f7b      	ldrb	r3, [r7, #29]
 8011712:	1c59      	adds	r1, r3, #1
 8011714:	7779      	strb	r1, [r7, #29]
 8011716:	4413      	add	r3, r2
 8011718:	781a      	ldrb	r2, [r3, #0]
 801171a:	4bb0      	ldr	r3, [pc, #704]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 801171c:	78db      	ldrb	r3, [r3, #3]
 801171e:	429a      	cmp	r2, r3
 8011720:	d104      	bne.n	801172c <nfcipTargetHandleRX+0x2f4>
 8011722:	7ebb      	ldrb	r3, [r7, #26]
 8011724:	f003 0304 	and.w	r3, r3, #4
 8011728:	2b00      	cmp	r3, #0
 801172a:	d114      	bne.n	8011756 <nfcipTargetHandleRX+0x31e>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 801172c:	4bab      	ldr	r3, [pc, #684]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 801172e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8011730:	4baa      	ldr	r3, [pc, #680]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 8011732:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 8011736:	4ba9      	ldr	r3, [pc, #676]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 8011738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801173a:	f04f 32ff 	mov.w	r2, #4294967295
 801173e:	9202      	str	r2, [sp, #8]
 8011740:	2204      	movs	r2, #4
 8011742:	9201      	str	r2, [sp, #4]
 8011744:	9300      	str	r3, [sp, #0]
 8011746:	4603      	mov	r3, r0
 8011748:	460a      	mov	r2, r1
 801174a:	2100      	movs	r1, #0
 801174c:	2000      	movs	r0, #0
 801174e:	f004 fbd9 	bl	8015f04 <rfalTransceiveBlockingTx>
            return ERR_BUSY;                            /* ERR_PROTO - Ignore bad/missing DID  */
 8011752:	2302      	movs	r3, #2
 8011754:	e2b1      	b.n	8011cba <nfcipTargetHandleRX+0x882>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8011756:	7f3b      	ldrb	r3, [r7, #28]
 8011758:	3301      	adds	r3, #1
 801175a:	773b      	strb	r3, [r7, #28]
 801175c:	e019      	b.n	8011792 <nfcipTargetHandleRX+0x35a>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 801175e:	7ebb      	ldrb	r3, [r7, #26]
 8011760:	f003 0308 	and.w	r3, r3, #8
 8011764:	2b00      	cmp	r3, #0
 8011766:	d014      	beq.n	8011792 <nfcipTargetHandleRX+0x35a>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011768:	4b9c      	ldr	r3, [pc, #624]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 801176a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 801176c:	4b9b      	ldr	r3, [pc, #620]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 801176e:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 8011772:	4b9a      	ldr	r3, [pc, #616]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 8011774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011776:	f04f 32ff 	mov.w	r2, #4294967295
 801177a:	9202      	str	r2, [sp, #8]
 801177c:	2204      	movs	r2, #4
 801177e:	9201      	str	r2, [sp, #4]
 8011780:	9300      	str	r3, [sp, #0]
 8011782:	4603      	mov	r3, r0
 8011784:	460a      	mov	r2, r1
 8011786:	2100      	movs	r1, #0
 8011788:	2000      	movs	r0, #0
 801178a:	f004 fbbb 	bl	8015f04 <rfalTransceiveBlockingTx>
        return ERR_BUSY;                                /* ERR_PROTO - Ignore unexpected NAD  */
 801178e:	2302      	movs	r3, #2
 8011790:	e293      	b.n	8011cba <nfcipTargetHandleRX+0x882>
    
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 8011792:	7ebb      	ldrb	r3, [r7, #26]
 8011794:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011798:	2b40      	cmp	r3, #64	; 0x40
 801179a:	f040 80c7 	bne.w	801192c <nfcipTargetHandleRX+0x4f4>
    {
        nfcipLogD( " NFCIP(T) Rcvd R-PDU  \r\n" );
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 801179e:	7ebb      	ldrb	r3, [r7, #26]
 80117a0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80117a4:	2b40      	cmp	r3, #64	; 0x40
 80117a6:	f040 8084 	bne.w	80118b2 <nfcipTargetHandleRX+0x47a>
 80117aa:	7ebb      	ldrb	r3, [r7, #26]
 80117ac:	f003 0310 	and.w	r3, r3, #16
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d17e      	bne.n	80118b2 <nfcipTargetHandleRX+0x47a>
        {
            nfcipLogI( " NFCIP(T) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 80117b4:	4b89      	ldr	r3, [pc, #548]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 80117b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80117ba:	461a      	mov	r2, r3
 80117bc:	7ebb      	ldrb	r3, [r7, #26]
 80117be:	f003 0303 	and.w	r3, r3, #3
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d14a      	bne.n	801185c <nfcipTargetHandleRX+0x424>
            {
                /* R-ACK while not performing chaining -> Protocol error */
                if( !gNfcip.isTxChaining )
 80117c6:	4b85      	ldr	r3, [pc, #532]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 80117c8:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80117cc:	f083 0301 	eor.w	r3, r3, #1
 80117d0:	b2db      	uxtb	r3, r3
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d014      	beq.n	8011800 <nfcipTargetHandleRX+0x3c8>
                {
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80117d6:	4b81      	ldr	r3, [pc, #516]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 80117d8:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80117da:	4b80      	ldr	r3, [pc, #512]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 80117dc:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 80117e0:	4b7e      	ldr	r3, [pc, #504]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 80117e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117e4:	f04f 32ff 	mov.w	r2, #4294967295
 80117e8:	9202      	str	r2, [sp, #8]
 80117ea:	2204      	movs	r2, #4
 80117ec:	9201      	str	r2, [sp, #4]
 80117ee:	9300      	str	r3, [sp, #0]
 80117f0:	4603      	mov	r3, r0
 80117f2:	460a      	mov	r2, r1
 80117f4:	2100      	movs	r1, #0
 80117f6:	2000      	movs	r0, #0
 80117f8:	f004 fb84 	bl	8015f04 <rfalTransceiveBlockingTx>
                    return ERR_BUSY;                    /* ERR_PROTO - Ignore unexpected ACK  */
 80117fc:	2302      	movs	r3, #2
 80117fe:	e25c      	b.n	8011cba <nfcipTargetHandleRX+0x882>
                }
                
                /* This block has been transmitted and acknowledged, perform RTOX until next data is provided  */
                
                /* Digital 1.1  16.12.4.7 - If ACK rcvd continue with chaining or an RTOX */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 8011800:	4b76      	ldr	r3, [pc, #472]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 8011802:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011806:	f003 030f 	and.w	r3, r3, #15
 801180a:	330c      	adds	r3, #12
 801180c:	2201      	movs	r2, #1
 801180e:	fa02 f303 	lsl.w	r3, r2, r3
 8011812:	4a73      	ldr	r2, [pc, #460]	; (80119e0 <nfcipTargetHandleRX+0x5a8>)
 8011814:	fba2 2303 	umull	r2, r3, r2, r3
 8011818:	0b1b      	lsrs	r3, r3, #12
 801181a:	b29a      	uxth	r2, r3
 801181c:	4b6f      	ldr	r3, [pc, #444]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 801181e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011822:	f003 030f 	and.w	r3, r3, #15
 8011826:	330c      	adds	r3, #12
 8011828:	2101      	movs	r1, #1
 801182a:	fa01 f303 	lsl.w	r3, r1, r3
 801182e:	496c      	ldr	r1, [pc, #432]	; (80119e0 <nfcipTargetHandleRX+0x5a8>)
 8011830:	fba1 1303 	umull	r1, r3, r1, r3
 8011834:	0b1b      	lsrs	r3, r3, #12
 8011836:	3301      	adds	r3, #1
 8011838:	08db      	lsrs	r3, r3, #3
 801183a:	b29b      	uxth	r3, r3
 801183c:	1ad3      	subs	r3, r2, r3
 801183e:	b29b      	uxth	r3, r3
 8011840:	3301      	adds	r3, #1
 8011842:	b29b      	uxth	r3, r3
 8011844:	4618      	mov	r0, r3
 8011846:	f7f2 fcfd 	bl	8004244 <timerCalculateTimer>
 801184a:	4602      	mov	r2, r0
 801184c:	4b63      	ldr	r3, [pc, #396]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 801184e:	67da      	str	r2, [r3, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8011850:	4b62      	ldr	r3, [pc, #392]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 8011852:	220e      	movs	r2, #14
 8011854:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_NONE;                        /* This block has been transmitted */
 8011858:	2300      	movs	r3, #0
 801185a:	e22e      	b.n	8011cba <nfcipTargetHandleRX+0x882>
            }
            
            /* Digital 1.0 14.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            else if( nfcip_PFBisSATN( gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) )    
 801185c:	4b5f      	ldr	r3, [pc, #380]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 801185e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011862:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011866:	2b80      	cmp	r3, #128	; 0x80
 8011868:	d15f      	bne.n	801192a <nfcipTargetHandleRX+0x4f2>
 801186a:	4b5c      	ldr	r3, [pc, #368]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 801186c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011870:	f003 0310 	and.w	r3, r3, #16
 8011874:	2b00      	cmp	r3, #0
 8011876:	d158      	bne.n	801192a <nfcipTargetHandleRX+0x4f2>
 8011878:	4b58      	ldr	r3, [pc, #352]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 801187a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801187e:	3b01      	subs	r3, #1
 8011880:	b2da      	uxtb	r2, r3
 8011882:	7ebb      	ldrb	r3, [r7, #26]
 8011884:	4053      	eors	r3, r2
 8011886:	b2db      	uxtb	r3, r3
 8011888:	f003 0303 	and.w	r3, r3, #3
 801188c:	2b00      	cmp	r3, #0
 801188e:	d14c      	bne.n	801192a <nfcipTargetHandleRX+0x4f2>
            {   
                nfcipLogI( " NFCIP(T) wrong PNI, last was ATN reTx  \r\n" );
                /* Spec says to leave current PNI as is, but will be Inc after Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec( gNfcip.pni );
 8011890:	4b52      	ldr	r3, [pc, #328]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 8011892:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011896:	3b01      	subs	r3, #1
 8011898:	b2db      	uxtb	r3, r3
 801189a:	f003 0303 	and.w	r3, r3, #3
 801189e:	b2da      	uxtb	r2, r3
 80118a0:	4b4e      	ldr	r3, [pc, #312]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 80118a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 80118a6:	4b4d      	ldr	r3, [pc, #308]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 80118a8:	220f      	movs	r2, #15
 80118aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_BUSY;
 80118ae:	2302      	movs	r3, #2
 80118b0:	e203      	b.n	8011cba <nfcipTargetHandleRX+0x882>
        }
        /*******************************************************************************/
        /* R NACK                                                                      */
        /*******************************************************************************/
        /* ISO 18092 12.6.1.3.3 When rcv NACK if PNI = prev PNI sent ->  reTx          */
        else if( nfcip_PFBisRNACK( rxPFB ) && (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB ) ) )
 80118b2:	7ebb      	ldrb	r3, [r7, #26]
 80118b4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80118b8:	2b40      	cmp	r3, #64	; 0x40
 80118ba:	d121      	bne.n	8011900 <nfcipTargetHandleRX+0x4c8>
 80118bc:	7ebb      	ldrb	r3, [r7, #26]
 80118be:	f003 0310 	and.w	r3, r3, #16
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d01c      	beq.n	8011900 <nfcipTargetHandleRX+0x4c8>
 80118c6:	4b45      	ldr	r3, [pc, #276]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 80118c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80118cc:	3b01      	subs	r3, #1
 80118ce:	b2da      	uxtb	r2, r3
 80118d0:	7ebb      	ldrb	r3, [r7, #26]
 80118d2:	4053      	eors	r3, r2
 80118d4:	b2db      	uxtb	r3, r3
 80118d6:	f003 0303 	and.w	r3, r3, #3
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d110      	bne.n	8011900 <nfcipTargetHandleRX+0x4c8>
        {
            nfcipLogI( " NFCIP(T) Rcvd NACK  \r\n" );
            
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 80118de:	4b3f      	ldr	r3, [pc, #252]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 80118e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80118e4:	3b01      	subs	r3, #1
 80118e6:	b2db      	uxtb	r3, r3
 80118e8:	f003 0303 	and.w	r3, r3, #3
 80118ec:	b2da      	uxtb	r2, r3
 80118ee:	4b3b      	ldr	r3, [pc, #236]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 80118f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 80118f4:	4b39      	ldr	r3, [pc, #228]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 80118f6:	220f      	movs	r2, #15
 80118f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 80118fc:	2302      	movs	r3, #2
 80118fe:	e1dc      	b.n	8011cba <nfcipTargetHandleRX+0x882>
        }
        else
        {        
            nfcipLogI( " NFCIP(T) Unexpected R-PDU \r\n" );
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011900:	4b36      	ldr	r3, [pc, #216]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 8011902:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8011904:	4b35      	ldr	r3, [pc, #212]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 8011906:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 801190a:	4b34      	ldr	r3, [pc, #208]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 801190c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801190e:	f04f 32ff 	mov.w	r2, #4294967295
 8011912:	9202      	str	r2, [sp, #8]
 8011914:	2204      	movs	r2, #4
 8011916:	9201      	str	r2, [sp, #4]
 8011918:	9300      	str	r3, [sp, #0]
 801191a:	4603      	mov	r3, r0
 801191c:	460a      	mov	r2, r1
 801191e:	2100      	movs	r1, #0
 8011920:	2000      	movs	r0, #0
 8011922:	f004 faef 	bl	8015f04 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected R-PDU  */
 8011926:	2302      	movs	r3, #2
 8011928:	e1c7      	b.n	8011cba <nfcipTargetHandleRX+0x882>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 801192a:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )
 801192c:	7ebb      	ldrb	r3, [r7, #26]
 801192e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011932:	2b80      	cmp	r3, #128	; 0x80
 8011934:	f040 80af 	bne.w	8011a96 <nfcipTargetHandleRX+0x65e>
        
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        /* ISO 18092 12.6.3 Attention                                                  */
        if( nfcip_PFBisSATN( rxPFB ) )                         /*    If is a S-ATN     */
 8011938:	7ebb      	ldrb	r3, [r7, #26]
 801193a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801193e:	2b80      	cmp	r3, #128	; 0x80
 8011940:	d111      	bne.n	8011966 <nfcipTargetHandleRX+0x52e>
 8011942:	7ebb      	ldrb	r3, [r7, #26]
 8011944:	f003 0310 	and.w	r3, r3, #16
 8011948:	2b00      	cmp	r3, #0
 801194a:	d10c      	bne.n	8011966 <nfcipTargetHandleRX+0x52e>
        {            
            nfcipLogI( " NFCIP(T) Rcvd ATN  curPNI: %d \r\n", gNfcip.pni );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 801194c:	2100      	movs	r1, #0
 801194e:	2080      	movs	r0, #128	; 0x80
 8011950:	f7ff fa26 	bl	8010da0 <nfcipDEPControlMsg>
 8011954:	4603      	mov	r3, r0
 8011956:	83fb      	strh	r3, [r7, #30]
 8011958:	8bfb      	ldrh	r3, [r7, #30]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d001      	beq.n	8011962 <nfcipTargetHandleRX+0x52a>
 801195e:	8bfb      	ldrh	r3, [r7, #30]
 8011960:	e1ab      	b.n	8011cba <nfcipTargetHandleRX+0x882>
            return ERR_BUSY;
 8011962:	2302      	movs	r3, #2
 8011964:	e1a9      	b.n	8011cba <nfcipTargetHandleRX+0x882>
        }
        
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 8011966:	7ebb      	ldrb	r3, [r7, #26]
 8011968:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801196c:	2b80      	cmp	r3, #128	; 0x80
 801196e:	d17c      	bne.n	8011a6a <nfcipTargetHandleRX+0x632>
 8011970:	7ebb      	ldrb	r3, [r7, #26]
 8011972:	f003 0310 	and.w	r3, r3, #16
 8011976:	2b00      	cmp	r3, #0
 8011978:	d077      	beq.n	8011a6a <nfcipTargetHandleRX+0x632>
        {
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 801197a:	4b18      	ldr	r3, [pc, #96]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 801197c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8011980:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011984:	2b80      	cmp	r3, #128	; 0x80
 8011986:	f040 8085 	bne.w	8011a94 <nfcipTargetHandleRX+0x65c>
 801198a:	4b14      	ldr	r3, [pc, #80]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 801198c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8011990:	f003 0310 	and.w	r3, r3, #16
 8011994:	2b00      	cmp	r3, #0
 8011996:	d07d      	beq.n	8011a94 <nfcipTargetHandleRX+0x65c>
            {
                nfcipLogI( " NFCIP(T) Rcvd TO  \r\n" );
                
                /* Digital 1.1  16.8.4.6  RTOX value in RES different that in REQ -> Protocol Error */
                if( gNfcip.lastRTOX != gNfcip.rxBuf[rxMsgIt++] )
 8011998:	4b10      	ldr	r3, [pc, #64]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 801199a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 801199e:	4b0f      	ldr	r3, [pc, #60]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 80119a0:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80119a2:	7f7b      	ldrb	r3, [r7, #29]
 80119a4:	1c58      	adds	r0, r3, #1
 80119a6:	7778      	strb	r0, [r7, #29]
 80119a8:	440b      	add	r3, r1
 80119aa:	781b      	ldrb	r3, [r3, #0]
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d019      	beq.n	80119e4 <nfcipTargetHandleRX+0x5ac>
                {
                    nfcipLogI( " NFCIP(T) Mismatched RTOX value \r\n" );
                    
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80119b0:	4b0a      	ldr	r3, [pc, #40]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 80119b2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80119b4:	4b09      	ldr	r3, [pc, #36]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 80119b6:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 80119ba:	4b08      	ldr	r3, [pc, #32]	; (80119dc <nfcipTargetHandleRX+0x5a4>)
 80119bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119be:	f04f 32ff 	mov.w	r2, #4294967295
 80119c2:	9202      	str	r2, [sp, #8]
 80119c4:	2204      	movs	r2, #4
 80119c6:	9201      	str	r2, [sp, #4]
 80119c8:	9300      	str	r3, [sp, #0]
 80119ca:	4603      	mov	r3, r0
 80119cc:	460a      	mov	r2, r1
 80119ce:	2100      	movs	r1, #0
 80119d0:	2000      	movs	r0, #0
 80119d2:	f004 fa97 	bl	8015f04 <rfalTransceiveBlockingTx>
                    return ERR_BUSY; /* ERR_PROTO - Ignore unexpected RTOX value  */
 80119d6:	2302      	movs	r3, #2
 80119d8:	e16f      	b.n	8011cba <nfcipTargetHandleRX+0x882>
 80119da:	bf00      	nop
 80119dc:	200034cc 	.word	0x200034cc
 80119e0:	4d542005 	.word	0x4d542005
                }
                
                /* Clear waiting for RTOX Ack Flag */
                gNfcip.isWait4RTOX = false;
 80119e4:	4bb7      	ldr	r3, [pc, #732]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 80119e6:	2200      	movs	r2, #0
 80119e8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                
                /* Check if a Tx is already pending */
                if( gNfcip.isTxPending )
 80119ec:	4bb5      	ldr	r3, [pc, #724]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 80119ee:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d005      	beq.n	8011a02 <nfcipTargetHandleRX+0x5ca>
                {
                    nfcipLogW( " NFCIP(T) Tx pending, go immediately to TX \r\n" );
                    
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 80119f6:	4bb3      	ldr	r3, [pc, #716]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 80119f8:	220f      	movs	r2, #15
 80119fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 80119fe:	2302      	movs	r3, #2
 8011a00:	e15b      	b.n	8011cba <nfcipTargetHandleRX+0x882>
                }
                
                /* Start RTOX timer and change to check state  */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 8011a02:	4bb0      	ldr	r3, [pc, #704]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011a04:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011a08:	461a      	mov	r2, r3
 8011a0a:	4bae      	ldr	r3, [pc, #696]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a10:	f003 030f 	and.w	r3, r3, #15
 8011a14:	330c      	adds	r3, #12
 8011a16:	fa02 f303 	lsl.w	r3, r2, r3
 8011a1a:	4aab      	ldr	r2, [pc, #684]	; (8011cc8 <nfcipTargetHandleRX+0x890>)
 8011a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8011a20:	0b1b      	lsrs	r3, r3, #12
 8011a22:	b29a      	uxth	r2, r3
 8011a24:	4ba7      	ldr	r3, [pc, #668]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011a26:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	4ba5      	ldr	r3, [pc, #660]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011a2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a32:	f003 030f 	and.w	r3, r3, #15
 8011a36:	330c      	adds	r3, #12
 8011a38:	fa01 f303 	lsl.w	r3, r1, r3
 8011a3c:	49a2      	ldr	r1, [pc, #648]	; (8011cc8 <nfcipTargetHandleRX+0x890>)
 8011a3e:	fba1 1303 	umull	r1, r3, r1, r3
 8011a42:	0b1b      	lsrs	r3, r3, #12
 8011a44:	3301      	adds	r3, #1
 8011a46:	08db      	lsrs	r3, r3, #3
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	1ad3      	subs	r3, r2, r3
 8011a4c:	b29b      	uxth	r3, r3
 8011a4e:	3301      	adds	r3, #1
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7f2 fbf6 	bl	8004244 <timerCalculateTimer>
 8011a58:	4602      	mov	r2, r0
 8011a5a:	4b9a      	ldr	r3, [pc, #616]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011a5c:	67da      	str	r2, [r3, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8011a5e:	4b99      	ldr	r3, [pc, #612]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011a60:	220e      	movs	r2, #14
 8011a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_BUSY;
 8011a66:	2302      	movs	r3, #2
 8011a68:	e127      	b.n	8011cba <nfcipTargetHandleRX+0x882>
        else
        {
            /* Unexpected S-PDU */
            nfcipLogI( " NFCIP(T) Unexpected S-PDU \r\n" );         /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011a6a:	4b96      	ldr	r3, [pc, #600]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011a6c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8011a6e:	4b95      	ldr	r3, [pc, #596]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011a70:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 8011a74:	4b93      	ldr	r3, [pc, #588]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a78:	f04f 32ff 	mov.w	r2, #4294967295
 8011a7c:	9202      	str	r2, [sp, #8]
 8011a7e:	2204      	movs	r2, #4
 8011a80:	9201      	str	r2, [sp, #4]
 8011a82:	9300      	str	r3, [sp, #0]
 8011a84:	4603      	mov	r3, r0
 8011a86:	460a      	mov	r2, r1
 8011a88:	2100      	movs	r1, #0
 8011a8a:	2000      	movs	r0, #0
 8011a8c:	f004 fa3a 	bl	8015f04 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected S-PDU  */
 8011a90:	2302      	movs	r3, #2
 8011a92:	e112      	b.n	8011cba <nfcipTargetHandleRX+0x882>
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 8011a94:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 8011a96:	7ebb      	ldrb	r3, [r7, #26]
 8011a98:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	f040 810b 	bne.w	8011cb8 <nfcipTargetHandleRX+0x880>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 8011aa2:	4b88      	ldr	r3, [pc, #544]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011aa8:	461a      	mov	r2, r3
 8011aaa:	7ebb      	ldrb	r3, [r7, #26]
 8011aac:	f003 0303 	and.w	r3, r3, #3
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d06f      	beq.n	8011b94 <nfcipTargetHandleRX+0x75c>
        {
            nfcipLogI( " NFCIP(T) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni, nfcip_PBF_PNI( rxPFB ) );
            
            /* Digital 1.1 16.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            if( nfcip_PFBisSATN(gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) ) 
 8011ab4:	4b83      	ldr	r3, [pc, #524]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011ab6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011aba:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011abe:	2b80      	cmp	r3, #128	; 0x80
 8011ac0:	d153      	bne.n	8011b6a <nfcipTargetHandleRX+0x732>
 8011ac2:	4b80      	ldr	r3, [pc, #512]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011ac4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011ac8:	f003 0310 	and.w	r3, r3, #16
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d14c      	bne.n	8011b6a <nfcipTargetHandleRX+0x732>
 8011ad0:	4b7c      	ldr	r3, [pc, #496]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011ad2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011ad6:	3b01      	subs	r3, #1
 8011ad8:	b2da      	uxtb	r2, r3
 8011ada:	7ebb      	ldrb	r3, [r7, #26]
 8011adc:	4053      	eors	r3, r2
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	f003 0303 	and.w	r3, r3, #3
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d140      	bne.n	8011b6a <nfcipTargetHandleRX+0x732>
            {
                /* Spec says to leave current PNI as is, but will be Inc after Data Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec(gNfcip.pni);
 8011ae8:	4b76      	ldr	r3, [pc, #472]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011aea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011aee:	3b01      	subs	r3, #1
 8011af0:	b2db      	uxtb	r3, r3
 8011af2:	f003 0303 	and.w	r3, r3, #3
 8011af6:	b2da      	uxtb	r2, r3
 8011af8:	4b72      	ldr	r3, [pc, #456]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011afa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                if( nfcip_PFBisIMI( rxPFB ) )
 8011afe:	7ebb      	ldrb	r3, [r7, #26]
 8011b00:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d12a      	bne.n	8011b5e <nfcipTargetHandleRX+0x726>
 8011b08:	7ebb      	ldrb	r3, [r7, #26]
 8011b0a:	f003 0310 	and.w	r3, r3, #16
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d025      	beq.n	8011b5e <nfcipTargetHandleRX+0x726>
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before && chaining -> send ACK  \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8011b12:	4b6c      	ldr	r3, [pc, #432]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011b18:	f003 0303 	and.w	r3, r3, #3
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b22:	b2d8      	uxtb	r0, r3
 8011b24:	4b67      	ldr	r3, [pc, #412]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011b26:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011b28:	7f7b      	ldrb	r3, [r7, #29]
 8011b2a:	1c59      	adds	r1, r3, #1
 8011b2c:	7779      	strb	r1, [r7, #29]
 8011b2e:	4413      	add	r3, r2
 8011b30:	781b      	ldrb	r3, [r3, #0]
 8011b32:	4619      	mov	r1, r3
 8011b34:	f7ff f934 	bl	8010da0 <nfcipDEPControlMsg>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	83fb      	strh	r3, [r7, #30]
 8011b3c:	8bfb      	ldrh	r3, [r7, #30]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d001      	beq.n	8011b46 <nfcipTargetHandleRX+0x70e>
 8011b42:	8bfb      	ldrh	r3, [r7, #30]
 8011b44:	e0b9      	b.n	8011cba <nfcipTargetHandleRX+0x882>
                    
                    /* Digital 1.1 16.12.3.4 (...) leave the current PNI unchanged afterwards */
                    gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8011b46:	4b5f      	ldr	r3, [pc, #380]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	b2db      	uxtb	r3, r3
 8011b50:	f003 0303 	and.w	r3, r3, #3
 8011b54:	b2da      	uxtb	r2, r3
 8011b56:	4b5b      	ldr	r3, [pc, #364]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8011b5c:	e003      	b.n	8011b66 <nfcipTargetHandleRX+0x72e>
                }
                else
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before -> reTx last I-PDU  \r\n" );
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8011b5e:	4b59      	ldr	r3, [pc, #356]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011b60:	220f      	movs	r2, #15
 8011b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 8011b66:	2302      	movs	r3, #2
 8011b68:	e0a7      	b.n	8011cba <nfcipTargetHandleRX+0x882>
            }
                        
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011b6a:	4b56      	ldr	r3, [pc, #344]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011b6c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8011b6e:	4b55      	ldr	r3, [pc, #340]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011b70:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 8011b74:	4b53      	ldr	r3, [pc, #332]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b78:	f04f 32ff 	mov.w	r2, #4294967295
 8011b7c:	9202      	str	r2, [sp, #8]
 8011b7e:	2204      	movs	r2, #4
 8011b80:	9201      	str	r2, [sp, #4]
 8011b82:	9300      	str	r3, [sp, #0]
 8011b84:	4603      	mov	r3, r0
 8011b86:	460a      	mov	r2, r1
 8011b88:	2100      	movs	r1, #0
 8011b8a:	2000      	movs	r0, #0
 8011b8c:	f004 f9ba 	bl	8015f04 <rfalTransceiveBlockingTx>
            return ERR_BUSY;            /* ERR_PROTO - Ignore bad PNI value  */
 8011b90:	2302      	movs	r3, #2
 8011b92:	e092      	b.n	8011cba <nfcipTargetHandleRX+0x882>
        nfcipLogD( " NFCIP(T) Rcvd IPDU OK PNI: %d  \r\n", gNfcip.pni );
        
        /*******************************************************************************/
        /* Successful data exchange                                                    */
        /*******************************************************************************/
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 8011b94:	7efb      	ldrb	r3, [r7, #27]
 8011b96:	b29a      	uxth	r2, r3
 8011b98:	7f3b      	ldrb	r3, [r7, #28]
 8011b9a:	b29b      	uxth	r3, r3
 8011b9c:	1ad3      	subs	r3, r2, r3
 8011b9e:	b29b      	uxth	r3, r3
 8011ba0:	3b04      	subs	r3, #4
 8011ba2:	b29a      	uxth	r2, r3
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	801a      	strh	r2, [r3, #0]
        
        nfcipClearCounters();
 8011ba8:	f7ff f95a 	bl	8010e60 <nfcipClearCounters>

        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 8011bac:	4b45      	ldr	r3, [pc, #276]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011bae:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8011bb2:	461a      	mov	r2, r3
 8011bb4:	7f3b      	ldrb	r3, [r7, #28]
 8011bb6:	3304      	adds	r3, #4
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d013      	beq.n	8011be4 <nfcipTargetHandleRX+0x7ac>
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	881b      	ldrh	r3, [r3, #0]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d00f      	beq.n	8011be4 <nfcipTargetHandleRX+0x7ac>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 8011bc4:	4b3f      	ldr	r3, [pc, #252]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011bc8:	4a3e      	ldr	r2, [pc, #248]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011bca:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 8011bce:	1898      	adds	r0, r3, r2
 8011bd0:	4b3c      	ldr	r3, [pc, #240]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011bd2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011bd4:	7f3b      	ldrb	r3, [r7, #28]
 8011bd6:	3304      	adds	r3, #4
 8011bd8:	18d1      	adds	r1, r2, r3
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	881b      	ldrh	r3, [r3, #0]
 8011bde:	461a      	mov	r2, r3
 8011be0:	f007 f914 	bl	8018e0c <memmove>
        
        
        /*******************************************************************************/
        /* Check if Initiator is indicating chaining MI                                */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 8011be4:	7ebb      	ldrb	r3, [r7, #26]
 8011be6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d132      	bne.n	8011c54 <nfcipTargetHandleRX+0x81c>
 8011bee:	7ebb      	ldrb	r3, [r7, #26]
 8011bf0:	f003 0310 	and.w	r3, r3, #16
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d02d      	beq.n	8011c54 <nfcipTargetHandleRX+0x81c>
        {
            gNfcip.isRxChaining = true;
 8011bf8:	4b32      	ldr	r3, [pc, #200]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011bfa:	2201      	movs	r2, #1
 8011bfc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2201      	movs	r2, #1
 8011c04:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(T) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8011c06:	4b2f      	ldr	r3, [pc, #188]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011c0c:	f003 0303 	and.w	r3, r3, #3
 8011c10:	b2db      	uxtb	r3, r3
 8011c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c16:	b2d8      	uxtb	r0, r3
 8011c18:	4b2a      	ldr	r3, [pc, #168]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011c1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011c1c:	7f7b      	ldrb	r3, [r7, #29]
 8011c1e:	1c59      	adds	r1, r3, #1
 8011c20:	7779      	strb	r1, [r7, #29]
 8011c22:	4413      	add	r3, r2
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	4619      	mov	r1, r3
 8011c28:	f7ff f8ba 	bl	8010da0 <nfcipDEPControlMsg>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	83fb      	strh	r3, [r7, #30]
 8011c30:	8bfb      	ldrh	r3, [r7, #30]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d001      	beq.n	8011c3a <nfcipTargetHandleRX+0x802>
 8011c36:	8bfb      	ldrh	r3, [r7, #30]
 8011c38:	e03f      	b.n	8011cba <nfcipTargetHandleRX+0x882>
            
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8011c3a:	4b22      	ldr	r3, [pc, #136]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011c40:	3301      	adds	r3, #1
 8011c42:	b2db      	uxtb	r3, r3
 8011c44:	f003 0303 	and.w	r3, r3, #3
 8011c48:	b2da      	uxtb	r2, r3
 8011c4a:	4b1e      	ldr	r3, [pc, #120]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 8011c50:	230d      	movs	r3, #13
 8011c52:	e032      	b.n	8011cba <nfcipTargetHandleRX+0x882>
            }
            
            /*******************************************************************************/
            /* Reception done, send to DH and start RTOX timer                             */
            /*******************************************************************************/
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 8011c54:	4b1b      	ldr	r3, [pc, #108]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011c56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c5a:	f003 030f 	and.w	r3, r3, #15
 8011c5e:	330c      	adds	r3, #12
 8011c60:	2201      	movs	r2, #1
 8011c62:	fa02 f303 	lsl.w	r3, r2, r3
 8011c66:	4a18      	ldr	r2, [pc, #96]	; (8011cc8 <nfcipTargetHandleRX+0x890>)
 8011c68:	fba2 2303 	umull	r2, r3, r2, r3
 8011c6c:	0b1b      	lsrs	r3, r3, #12
 8011c6e:	b29a      	uxth	r2, r3
 8011c70:	4b14      	ldr	r3, [pc, #80]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c76:	f003 030f 	and.w	r3, r3, #15
 8011c7a:	330c      	adds	r3, #12
 8011c7c:	2101      	movs	r1, #1
 8011c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8011c82:	4911      	ldr	r1, [pc, #68]	; (8011cc8 <nfcipTargetHandleRX+0x890>)
 8011c84:	fba1 1303 	umull	r1, r3, r1, r3
 8011c88:	0b1b      	lsrs	r3, r3, #12
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	08db      	lsrs	r3, r3, #3
 8011c8e:	b29b      	uxth	r3, r3
 8011c90:	1ad3      	subs	r3, r2, r3
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	3301      	adds	r3, #1
 8011c96:	b29b      	uxth	r3, r3
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7f2 fad3 	bl	8004244 <timerCalculateTimer>
 8011c9e:	4602      	mov	r2, r0
 8011ca0:	4b08      	ldr	r3, [pc, #32]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011ca2:	67da      	str	r2, [r3, #124]	; 0x7c
            gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8011ca4:	4b07      	ldr	r3, [pc, #28]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011ca6:	220e      	movs	r2, #14
 8011ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            gNfcip.isRxChaining = false;
 8011cac:	4b05      	ldr	r3, [pc, #20]	; (8011cc4 <nfcipTargetHandleRX+0x88c>)
 8011cae:	2200      	movs	r2, #0
 8011cb0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            ret = ERR_NONE;                            /* Data exchange done */
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	83fb      	strh	r3, [r7, #30]
        }
    }
    return ret;
 8011cb8:	8bfb      	ldrh	r3, [r7, #30]
}
 8011cba:	4618      	mov	r0, r3
 8011cbc:	3720      	adds	r7, #32
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}
 8011cc2:	bf00      	nop
 8011cc4:	200034cc 	.word	0x200034cc
 8011cc8:	4d542005 	.word	0x4d542005

08011ccc <nfcipTx>:


/*******************************************************************************/
static ReturnCode nfcipTx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint8_t *paylBuf, uint16_t paylLen, uint8_t pfbData, uint32_t fwt )
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b088      	sub	sp, #32
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	60b9      	str	r1, [r7, #8]
 8011cd4:	607a      	str	r2, [r7, #4]
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	4603      	mov	r3, r0
 8011cda:	73fb      	strb	r3, [r7, #15]
 8011cdc:	4613      	mov	r3, r2
 8011cde:	81bb      	strh	r3, [r7, #12]
    uint8_t *txBlock;
    uint8_t *payloadBuf;
    uint8_t  pfb;
    
   
    if( txBuf == NULL )
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d101      	bne.n	8011cea <nfcipTx+0x1e>
    {
        return ERR_PARAM;
 8011ce6:	2307      	movs	r3, #7
 8011ce8:	e177      	b.n	8011fda <nfcipTx+0x30e>
    }
    

    payloadBuf = paylBuf;                                               /* MISRA 17.8: Use intermediate variable */
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	617b      	str	r3, [r7, #20]
    
    if( (paylLen == 0U) || (payloadBuf == NULL) )
 8011cee:	89bb      	ldrh	r3, [r7, #12]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d002      	beq.n	8011cfa <nfcipTx+0x2e>
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d102      	bne.n	8011d00 <nfcipTx+0x34>
    {
        payloadBuf = (uint8_t*) &txBuf[RFAL_NFCDEP_DEPREQ_HEADER_LEN];  /* If not a DEP (no Data) ensure enough space for header */
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	3305      	adds	r3, #5
 8011cfe:	617b      	str	r3, [r7, #20]
    }
    
    
    txBufIt  = 0;
 8011d00:	2300      	movs	r3, #0
 8011d02:	83fb      	strh	r3, [r7, #30]
    pfb      = pfbData;                                                 /* MISRA 17.8: Use intermediate variable */
 8011d04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d08:	74fb      	strb	r3, [r7, #19]
    
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 8011d0a:	697b      	ldr	r3, [r7, #20]
 8011d0c:	61bb      	str	r3, [r7, #24]
        
    
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 8011d0e:	4aac      	ldr	r2, [pc, #688]	; (8011fc0 <nfcipTx+0x2f4>)
 8011d10:	7bfb      	ldrb	r3, [r7, #15]
 8011d12:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
    gNfcip.lastPFB = NFCIP_PFB_INVALID;                                 /* Reset last pfb sent    */
 8011d16:	4baa      	ldr	r3, [pc, #680]	; (8011fc0 <nfcipTx+0x2f4>)
 8011d18:	22ff      	movs	r2, #255	; 0xff
 8011d1a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    
    /*******************************************************************************/
    /* Compute outgoing NFCIP message                                              */
    /*******************************************************************************/
    switch( cmd )
 8011d1e:	7bfb      	ldrb	r3, [r7, #15]
 8011d20:	2b0b      	cmp	r3, #11
 8011d22:	f200 8120 	bhi.w	8011f66 <nfcipTx+0x29a>
 8011d26:	a201      	add	r2, pc, #4	; (adr r2, 8011d2c <nfcipTx+0x60>)
 8011d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d2c:	08011d5d 	.word	0x08011d5d
 8011d30:	08011d5d 	.word	0x08011d5d
 8011d34:	08011e51 	.word	0x08011e51
 8011d38:	08011e87 	.word	0x08011e87
 8011d3c:	08011e87 	.word	0x08011e87
 8011d40:	08011e87 	.word	0x08011e87
 8011d44:	08011eaf 	.word	0x08011eaf
 8011d48:	08011eaf 	.word	0x08011eaf
 8011d4c:	08011e97 	.word	0x08011e97
 8011d50:	08011e97 	.word	0x08011e97
 8011d54:	08011e97 	.word	0x08011e97
 8011d58:	08011e97 	.word	0x08011e97
    {
        /*******************************************************************************/
        case NFCIP_CMD_ATR_RES:
        case NFCIP_CMD_ATR_REQ:
            
            rfalNfcDepSetNFCID( payloadBuf, gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );    /* NFCID */
 8011d5c:	220a      	movs	r2, #10
 8011d5e:	2100      	movs	r1, #0
 8011d60:	6978      	ldr	r0, [r7, #20]
 8011d62:	f007 f86c 	bl	8018e3e <memset>
 8011d66:	4b96      	ldr	r3, [pc, #600]	; (8011fc0 <nfcipTx+0x2f4>)
 8011d68:	7c5b      	ldrb	r3, [r3, #17]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d006      	beq.n	8011d7c <nfcipTx+0xb0>
 8011d6e:	4b94      	ldr	r3, [pc, #592]	; (8011fc0 <nfcipTx+0x2f4>)
 8011d70:	7c5b      	ldrb	r3, [r3, #17]
 8011d72:	461a      	mov	r2, r3
 8011d74:	4993      	ldr	r1, [pc, #588]	; (8011fc4 <nfcipTx+0x2f8>)
 8011d76:	6978      	ldr	r0, [r7, #20]
 8011d78:	f007 f83d 	bl	8018df6 <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 8011d7c:	8bfb      	ldrh	r3, [r7, #30]
 8011d7e:	330a      	adds	r3, #10
 8011d80:	83fb      	strh	r3, [r7, #30]
            
            payloadBuf[txBufIt++] = gNfcip.cfg.did;                                     /* DID   */
 8011d82:	8bfb      	ldrh	r3, [r7, #30]
 8011d84:	1c5a      	adds	r2, r3, #1
 8011d86:	83fa      	strh	r2, [r7, #30]
 8011d88:	461a      	mov	r2, r3
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	4413      	add	r3, r2
 8011d8e:	4a8c      	ldr	r2, [pc, #560]	; (8011fc0 <nfcipTx+0x2f4>)
 8011d90:	78d2      	ldrb	r2, [r2, #3]
 8011d92:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.bs;                                      /* BS    */
 8011d94:	8bfb      	ldrh	r3, [r7, #30]
 8011d96:	1c5a      	adds	r2, r3, #1
 8011d98:	83fa      	strh	r2, [r7, #30]
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	4413      	add	r3, r2
 8011da0:	4a87      	ldr	r2, [pc, #540]	; (8011fc0 <nfcipTx+0x2f4>)
 8011da2:	7952      	ldrb	r2, [r2, #5]
 8011da4:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.br;                                      /* BR    */
 8011da6:	8bfb      	ldrh	r3, [r7, #30]
 8011da8:	1c5a      	adds	r2, r3, #1
 8011daa:	83fa      	strh	r2, [r7, #30]
 8011dac:	461a      	mov	r2, r3
 8011dae:	697b      	ldr	r3, [r7, #20]
 8011db0:	4413      	add	r3, r2
 8011db2:	4a83      	ldr	r2, [pc, #524]	; (8011fc0 <nfcipTx+0x2f4>)
 8011db4:	7992      	ldrb	r2, [r2, #6]
 8011db6:	701a      	strb	r2, [r3, #0]
            
            if( cmd == NFCIP_CMD_ATR_RES )
 8011db8:	7bfb      	ldrb	r3, [r7, #15]
 8011dba:	2b01      	cmp	r3, #1
 8011dbc:	d109      	bne.n	8011dd2 <nfcipTx+0x106>
            {
                payloadBuf[txBufIt++] = gNfcip.cfg.to;                                  /* ATR_RES[ TO ] */
 8011dbe:	8bfb      	ldrh	r3, [r7, #30]
 8011dc0:	1c5a      	adds	r2, r3, #1
 8011dc2:	83fa      	strh	r2, [r7, #30]
 8011dc4:	461a      	mov	r2, r3
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	4413      	add	r3, r2
 8011dca:	4a7d      	ldr	r2, [pc, #500]	; (8011fc0 <nfcipTx+0x2f4>)
 8011dcc:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8011dd0:	701a      	strb	r2, [r3, #0]
            }
                                    
            if( gNfcip.cfg.gbLen > 0U)
 8011dd2:	4b7b      	ldr	r3, [pc, #492]	; (8011fc0 <nfcipTx+0x2f4>)
 8011dd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d023      	beq.n	8011e24 <nfcipTx+0x158>
            {
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 8011ddc:	4b78      	ldr	r3, [pc, #480]	; (8011fc0 <nfcipTx+0x2f4>)
 8011dde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011de2:	011b      	lsls	r3, r3, #4
 8011de4:	b2db      	uxtb	r3, r3
 8011de6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011dea:	b2da      	uxtb	r2, r3
 8011dec:	8bfb      	ldrh	r3, [r7, #30]
 8011dee:	1c59      	adds	r1, r3, #1
 8011df0:	83f9      	strh	r1, [r7, #30]
 8011df2:	4619      	mov	r1, r3
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	440b      	add	r3, r1
 8011df8:	f042 0202 	orr.w	r2, r2, #2
 8011dfc:	b2d2      	uxtb	r2, r2
 8011dfe:	701a      	strb	r2, [r3, #0]
                ST_MEMCPY( &payloadBuf[txBufIt], gNfcip.cfg.gb, gNfcip.cfg.gbLen );     /* set General Bytes */
 8011e00:	8bfb      	ldrh	r3, [r7, #30]
 8011e02:	697a      	ldr	r2, [r7, #20]
 8011e04:	18d0      	adds	r0, r2, r3
 8011e06:	4b6e      	ldr	r3, [pc, #440]	; (8011fc0 <nfcipTx+0x2f4>)
 8011e08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011e0c:	461a      	mov	r2, r3
 8011e0e:	496e      	ldr	r1, [pc, #440]	; (8011fc8 <nfcipTx+0x2fc>)
 8011e10:	f006 fff1 	bl	8018df6 <memcpy>
                txBufIt += gNfcip.cfg.gbLen;
 8011e14:	4b6a      	ldr	r3, [pc, #424]	; (8011fc0 <nfcipTx+0x2f4>)
 8011e16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011e1a:	b29a      	uxth	r2, r3
 8011e1c:	8bfb      	ldrh	r3, [r7, #30]
 8011e1e:	4413      	add	r3, r2
 8011e20:	83fb      	strh	r3, [r7, #30]
 8011e22:	e00e      	b.n	8011e42 <nfcipTx+0x176>
            }
            else
            {
                payloadBuf[txBufIt++] = rfalNfcDepLR2PP( gNfcip.cfg.lr );               /* PP without GB     */
 8011e24:	4b66      	ldr	r3, [pc, #408]	; (8011fc0 <nfcipTx+0x2f4>)
 8011e26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011e2a:	011b      	lsls	r3, r3, #4
 8011e2c:	b2da      	uxtb	r2, r3
 8011e2e:	8bfb      	ldrh	r3, [r7, #30]
 8011e30:	1c59      	adds	r1, r3, #1
 8011e32:	83f9      	strh	r1, [r7, #30]
 8011e34:	4619      	mov	r1, r3
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	440b      	add	r3, r1
 8011e3a:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8011e3e:	b2d2      	uxtb	r2, r2
 8011e40:	701a      	strb	r2, [r3, #0]
            }
            
            if( (txBufIt + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN) > RFAL_NFCDEP_ATRREQ_MAX_LEN )   /* Check max ATR length (ATR_REQ = ATR_RES)*/
 8011e42:	8bfb      	ldrh	r3, [r7, #30]
 8011e44:	3302      	adds	r3, #2
 8011e46:	2b40      	cmp	r3, #64	; 0x40
 8011e48:	f240 808f 	bls.w	8011f6a <nfcipTx+0x29e>
            {
                return ERR_PARAM;
 8011e4c:	2307      	movs	r3, #7
 8011e4e:	e0c4      	b.n	8011fda <nfcipTx+0x30e>
            break;
            
        /*******************************************************************************/
        case NFCIP_CMD_WUP_REQ:                               /* ISO 18092 - 12.5.2.1 */
            
            rfalNfcDepSetNFCID( (payloadBuf), gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );   /* NFCID */
 8011e50:	220a      	movs	r2, #10
 8011e52:	2100      	movs	r1, #0
 8011e54:	6978      	ldr	r0, [r7, #20]
 8011e56:	f006 fff2 	bl	8018e3e <memset>
 8011e5a:	4b59      	ldr	r3, [pc, #356]	; (8011fc0 <nfcipTx+0x2f4>)
 8011e5c:	7c5b      	ldrb	r3, [r3, #17]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d006      	beq.n	8011e70 <nfcipTx+0x1a4>
 8011e62:	4b57      	ldr	r3, [pc, #348]	; (8011fc0 <nfcipTx+0x2f4>)
 8011e64:	7c5b      	ldrb	r3, [r3, #17]
 8011e66:	461a      	mov	r2, r3
 8011e68:	4956      	ldr	r1, [pc, #344]	; (8011fc4 <nfcipTx+0x2f8>)
 8011e6a:	6978      	ldr	r0, [r7, #20]
 8011e6c:	f006 ffc3 	bl	8018df6 <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 8011e70:	8bfb      	ldrh	r3, [r7, #30]
 8011e72:	330a      	adds	r3, #10
 8011e74:	83fb      	strh	r3, [r7, #30]
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 8011e76:	69bb      	ldr	r3, [r7, #24]
 8011e78:	3b01      	subs	r3, #1
 8011e7a:	61bb      	str	r3, [r7, #24]
 8011e7c:	4b50      	ldr	r3, [pc, #320]	; (8011fc0 <nfcipTx+0x2f4>)
 8011e7e:	78da      	ldrb	r2, [r3, #3]
 8011e80:	69bb      	ldr	r3, [r7, #24]
 8011e82:	701a      	strb	r2, [r3, #0]
            break;
 8011e84:	e076      	b.n	8011f74 <nfcipTx+0x2a8>
        /*******************************************************************************/
        case NFCIP_CMD_WUP_RES:                               /* ISO 18092 - 12.5.2.2 */
        case NFCIP_CMD_PSL_REQ:
        case NFCIP_CMD_PSL_RES:
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 8011e86:	69bb      	ldr	r3, [r7, #24]
 8011e88:	3b01      	subs	r3, #1
 8011e8a:	61bb      	str	r3, [r7, #24]
 8011e8c:	4b4c      	ldr	r3, [pc, #304]	; (8011fc0 <nfcipTx+0x2f4>)
 8011e8e:	78da      	ldrb	r2, [r3, #3]
 8011e90:	69bb      	ldr	r3, [r7, #24]
 8011e92:	701a      	strb	r2, [r3, #0]
            break;
 8011e94:	e06e      	b.n	8011f74 <nfcipTx+0x2a8>
        case NFCIP_CMD_RLS_RES:
        case NFCIP_CMD_DSL_REQ:
        case NFCIP_CMD_DSL_RES:
            
            /* Digital 1.0 - 14.8.1.1 & 14.9.1.1 & 14.10.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 8011e96:	4b4a      	ldr	r3, [pc, #296]	; (8011fc0 <nfcipTx+0x2f4>)
 8011e98:	78db      	ldrb	r3, [r3, #3]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d067      	beq.n	8011f6e <nfcipTx+0x2a2>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8011e9e:	69bb      	ldr	r3, [r7, #24]
 8011ea0:	3b01      	subs	r3, #1
 8011ea2:	61bb      	str	r3, [r7, #24]
 8011ea4:	4b46      	ldr	r3, [pc, #280]	; (8011fc0 <nfcipTx+0x2f4>)
 8011ea6:	78da      	ldrb	r2, [r3, #3]
 8011ea8:	69bb      	ldr	r3, [r7, #24]
 8011eaa:	701a      	strb	r2, [r3, #0]
            }
            break;
 8011eac:	e05f      	b.n	8011f6e <nfcipTx+0x2a2>
        /*******************************************************************************/
        case NFCIP_CMD_DEP_REQ:
        case NFCIP_CMD_DEP_RES:
            
            /* Compute optional PFB bits */
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 8011eae:	4b44      	ldr	r3, [pc, #272]	; (8011fc0 <nfcipTx+0x2f4>)
 8011eb0:	78db      	ldrb	r3, [r3, #3]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d003      	beq.n	8011ebe <nfcipTx+0x1f2>
 8011eb6:	7cfb      	ldrb	r3, [r7, #19]
 8011eb8:	f043 0304 	orr.w	r3, r3, #4
 8011ebc:	74fb      	strb	r3, [r7, #19]
            if (gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO)                {   pfb |= NFCIP_PFB_NAD_BIT;       }
 8011ebe:	4b40      	ldr	r3, [pc, #256]	; (8011fc0 <nfcipTx+0x2f4>)
 8011ec0:	791b      	ldrb	r3, [r3, #4]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d003      	beq.n	8011ece <nfcipTx+0x202>
 8011ec6:	7cfb      	ldrb	r3, [r7, #19]
 8011ec8:	f043 0308 	orr.w	r3, r3, #8
 8011ecc:	74fb      	strb	r3, [r7, #19]
            if ((gNfcip.isTxChaining) && (nfcip_PFBisIPDU(pfb)) )    {   pfb |= NFCIP_PFB_MI_BIT;        }
 8011ece:	4b3c      	ldr	r3, [pc, #240]	; (8011fc0 <nfcipTx+0x2f4>)
 8011ed0:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d008      	beq.n	8011eea <nfcipTx+0x21e>
 8011ed8:	7cfb      	ldrb	r3, [r7, #19]
 8011eda:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d103      	bne.n	8011eea <nfcipTx+0x21e>
 8011ee2:	7cfb      	ldrb	r3, [r7, #19]
 8011ee4:	f043 0310 	orr.w	r3, r3, #16
 8011ee8:	74fb      	strb	r3, [r7, #19]
            
            /* Store PFB for future handling */
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 8011eea:	4a35      	ldr	r2, [pc, #212]	; (8011fc0 <nfcipTx+0x2f4>)
 8011eec:	7cfb      	ldrb	r3, [r7, #19]
 8011eee:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            
            if( !nfcip_PFBisSATN(pfb) )
 8011ef2:	7cfb      	ldrb	r3, [r7, #19]
 8011ef4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011ef8:	2b80      	cmp	r3, #128	; 0x80
 8011efa:	d104      	bne.n	8011f06 <nfcipTx+0x23a>
 8011efc:	7cfb      	ldrb	r3, [r7, #19]
 8011efe:	f003 0310 	and.w	r3, r3, #16
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d003      	beq.n	8011f0e <nfcipTx+0x242>
            {
                gNfcip.lastPFBnATN   = pfb;                                              /* store last PFB different then ATN */
 8011f06:	4a2e      	ldr	r2, [pc, #184]	; (8011fc0 <nfcipTx+0x2f4>)
 8011f08:	7cfb      	ldrb	r3, [r7, #19]
 8011f0a:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            }
            
            
            /* Add NAD if it is to be supported */
            if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO )      
 8011f0e:	4b2c      	ldr	r3, [pc, #176]	; (8011fc0 <nfcipTx+0x2f4>)
 8011f10:	791b      	ldrb	r3, [r3, #4]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d006      	beq.n	8011f24 <nfcipTx+0x258>
            {
                *(--txBlock) = gNfcip.cfg.nad;                                           /* NAD   */
 8011f16:	69bb      	ldr	r3, [r7, #24]
 8011f18:	3b01      	subs	r3, #1
 8011f1a:	61bb      	str	r3, [r7, #24]
 8011f1c:	4b28      	ldr	r3, [pc, #160]	; (8011fc0 <nfcipTx+0x2f4>)
 8011f1e:	791a      	ldrb	r2, [r3, #4]
 8011f20:	69bb      	ldr	r3, [r7, #24]
 8011f22:	701a      	strb	r2, [r3, #0]
            }
            
            /* Digital 1.0 - 14.8.1.1 & 14.8.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 8011f24:	4b26      	ldr	r3, [pc, #152]	; (8011fc0 <nfcipTx+0x2f4>)
 8011f26:	78db      	ldrb	r3, [r3, #3]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d006      	beq.n	8011f3a <nfcipTx+0x26e>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8011f2c:	69bb      	ldr	r3, [r7, #24]
 8011f2e:	3b01      	subs	r3, #1
 8011f30:	61bb      	str	r3, [r7, #24]
 8011f32:	4b23      	ldr	r3, [pc, #140]	; (8011fc0 <nfcipTx+0x2f4>)
 8011f34:	78da      	ldrb	r2, [r3, #3]
 8011f36:	69bb      	ldr	r3, [r7, #24]
 8011f38:	701a      	strb	r2, [r3, #0]
            }
            
            *(--txBlock) = pfb;                                                          /* PFB */
 8011f3a:	69bb      	ldr	r3, [r7, #24]
 8011f3c:	3b01      	subs	r3, #1
 8011f3e:	61bb      	str	r3, [r7, #24]
 8011f40:	69bb      	ldr	r3, [r7, #24]
 8011f42:	7cfa      	ldrb	r2, [r7, #19]
 8011f44:	701a      	strb	r2, [r3, #0]
                        
            
            /* NCI 1.0 - Check if Empty frames are allowed */
            if( (paylLen == 0U) && nfcipIsEmptyDEPDisabled(gNfcip.cfg.oper) && nfcip_PFBisIPDU(pfb) )
 8011f46:	89bb      	ldrh	r3, [r7, #12]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d112      	bne.n	8011f72 <nfcipTx+0x2a6>
 8011f4c:	4b1c      	ldr	r3, [pc, #112]	; (8011fc0 <nfcipTx+0x2f4>)
 8011f4e:	789b      	ldrb	r3, [r3, #2]
 8011f50:	f003 0304 	and.w	r3, r3, #4
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d00c      	beq.n	8011f72 <nfcipTx+0x2a6>
 8011f58:	7cfb      	ldrb	r3, [r7, #19]
 8011f5a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d107      	bne.n	8011f72 <nfcipTx+0x2a6>
            {
                return ERR_PARAM;
 8011f62:	2307      	movs	r3, #7
 8011f64:	e039      	b.n	8011fda <nfcipTx+0x30e>
            }
            break;

        /*******************************************************************************/
        default:
            return ERR_PARAM;
 8011f66:	2307      	movs	r3, #7
 8011f68:	e037      	b.n	8011fda <nfcipTx+0x30e>
            break;
 8011f6a:	bf00      	nop
 8011f6c:	e002      	b.n	8011f74 <nfcipTx+0x2a8>
            break;
 8011f6e:	bf00      	nop
 8011f70:	e000      	b.n	8011f74 <nfcipTx+0x2a8>
            break;
 8011f72:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Prepend Header                                                              */
    /*******************************************************************************/    
    *(--txBlock) = (uint8_t)cmd;                                                         /* CMD     */
 8011f74:	69bb      	ldr	r3, [r7, #24]
 8011f76:	3b01      	subs	r3, #1
 8011f78:	61bb      	str	r3, [r7, #24]
 8011f7a:	69bb      	ldr	r3, [r7, #24]
 8011f7c:	7bfa      	ldrb	r2, [r7, #15]
 8011f7e:	701a      	strb	r2, [r3, #0]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 8011f80:	7bfb      	ldrb	r3, [r7, #15]
 8011f82:	f003 0301 	and.w	r3, r3, #1
 8011f86:	b2db      	uxtb	r3, r3
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d101      	bne.n	8011f90 <nfcipTx+0x2c4>
 8011f8c:	22d4      	movs	r2, #212	; 0xd4
 8011f8e:	e000      	b.n	8011f92 <nfcipTx+0x2c6>
 8011f90:	22d5      	movs	r2, #213	; 0xd5
 8011f92:	69bb      	ldr	r3, [r7, #24]
 8011f94:	3b01      	subs	r3, #1
 8011f96:	61bb      	str	r3, [r7, #24]
 8011f98:	69bb      	ldr	r3, [r7, #24]
 8011f9a:	701a      	strb	r2, [r3, #0]
        
    
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 8011f9c:	697a      	ldr	r2, [r7, #20]
 8011f9e:	69bb      	ldr	r3, [r7, #24]
 8011fa0:	1ad3      	subs	r3, r2, r3
 8011fa2:	b29a      	uxth	r2, r3
 8011fa4:	89bb      	ldrh	r3, [r7, #12]
 8011fa6:	4413      	add	r3, r2
 8011fa8:	b29a      	uxth	r2, r3
 8011faa:	8bfb      	ldrh	r3, [r7, #30]
 8011fac:	4413      	add	r3, r2
 8011fae:	83fb      	strh	r3, [r7, #30]
    
    
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8011fb0:	4b03      	ldr	r3, [pc, #12]	; (8011fc0 <nfcipTx+0x2f4>)
 8011fb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011fb6:	8bfa      	ldrh	r2, [r7, #30]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d907      	bls.n	8011fcc <nfcipTx+0x300>
    {
        return ERR_NOTSUPP;
 8011fbc:	2318      	movs	r3, #24
 8011fbe:	e00c      	b.n	8011fda <nfcipTx+0x30e>
 8011fc0:	200034cc 	.word	0x200034cc
 8011fc4:	200034d3 	.word	0x200034d3
 8011fc8:	200034de 	.word	0x200034de
    }
        
    /*******************************************************************************/
    return nfcipDataTx( txBlock, txBufIt, fwt );
 8011fcc:	8bfb      	ldrh	r3, [r7, #30]
 8011fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	69b8      	ldr	r0, [r7, #24]
 8011fd4:	f000 fe36 	bl	8012c44 <nfcipDataTx>
 8011fd8:	4603      	mov	r3, r0
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3720      	adds	r7, #32
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}
 8011fe2:	bf00      	nop

08011fe4 <nfcipConfig>:
 ******************************************************************************
 */

/*******************************************************************************/
static void nfcipConfig( const rfalNfcDepConfigs * cfg )
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
    if (cfg == NULL) 
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d034      	beq.n	801205c <nfcipConfig+0x78>
    {
        return;
    }
    
    ST_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 8011ff2:	2250      	movs	r2, #80	; 0x50
 8011ff4:	6879      	ldr	r1, [r7, #4]
 8011ff6:	481b      	ldr	r0, [pc, #108]	; (8012064 <nfcipConfig+0x80>)
 8011ff8:	f006 fefd 	bl	8018df6 <memcpy>
    
    gNfcip.cfg.to   = MIN( RFAL_NFCDEP_WT_TRG_MAX, gNfcip.cfg.to);   /* Ensure proper WT value           */
 8011ffc:	4b19      	ldr	r3, [pc, #100]	; (8012064 <nfcipConfig+0x80>)
 8011ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012002:	2b0e      	cmp	r3, #14
 8012004:	bf28      	it	cs
 8012006:	230e      	movcs	r3, #14
 8012008:	b2da      	uxtb	r2, r3
 801200a:	4b16      	ldr	r3, [pc, #88]	; (8012064 <nfcipConfig+0x80>)
 801200c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gNfcip.cfg.did  = nfcip_DIDMax( gNfcip.cfg.did );                /* Ensure proper DID value          */
 8012010:	4b14      	ldr	r3, [pc, #80]	; (8012064 <nfcipConfig+0x80>)
 8012012:	78db      	ldrb	r3, [r3, #3]
 8012014:	2b0e      	cmp	r3, #14
 8012016:	bf28      	it	cs
 8012018:	230e      	movcs	r3, #14
 801201a:	b2da      	uxtb	r2, r3
 801201c:	4b11      	ldr	r3, [pc, #68]	; (8012064 <nfcipConfig+0x80>)
 801201e:	70da      	strb	r2, [r3, #3]
    gNfcip.fsc      = rfalNfcDepLR2FS( gNfcip.cfg.lr );              /* Calculate FSC based on given LR  */
 8012020:	4b10      	ldr	r3, [pc, #64]	; (8012064 <nfcipConfig+0x80>)
 8012022:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012026:	3301      	adds	r3, #1
 8012028:	019b      	lsls	r3, r3, #6
 801202a:	2bfd      	cmp	r3, #253	; 0xfd
 801202c:	d807      	bhi.n	801203e <nfcipConfig+0x5a>
 801202e:	4b0d      	ldr	r3, [pc, #52]	; (8012064 <nfcipConfig+0x80>)
 8012030:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012034:	3301      	adds	r3, #1
 8012036:	b29b      	uxth	r3, r3
 8012038:	019b      	lsls	r3, r3, #6
 801203a:	b29b      	uxth	r3, r3
 801203c:	e000      	b.n	8012040 <nfcipConfig+0x5c>
 801203e:	23fe      	movs	r3, #254	; 0xfe
 8012040:	4a08      	ldr	r2, [pc, #32]	; (8012064 <nfcipConfig+0x80>)
 8012042:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.state = ( ( gNfcip.cfg.role ==  RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_ST_TARG_WAIT_ATR : NFCIP_ST_INIT_IDLE );
 8012046:	4b07      	ldr	r3, [pc, #28]	; (8012064 <nfcipConfig+0x80>)
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	2b01      	cmp	r3, #1
 801204c:	d101      	bne.n	8012052 <nfcipConfig+0x6e>
 801204e:	220a      	movs	r2, #10
 8012050:	e000      	b.n	8012054 <nfcipConfig+0x70>
 8012052:	2201      	movs	r2, #1
 8012054:	4b03      	ldr	r3, [pc, #12]	; (8012064 <nfcipConfig+0x80>)
 8012056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 801205a:	e000      	b.n	801205e <nfcipConfig+0x7a>
        return;
 801205c:	bf00      	nop
}
 801205e:	3708      	adds	r7, #8
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}
 8012064:	200034cc 	.word	0x200034cc

08012068 <nfcipRun>:


/*******************************************************************************/
static ReturnCode nfcipRun( uint16_t *outActRxLen, bool *outIsChaining  )
{
 8012068:	b5b0      	push	{r4, r5, r7, lr}
 801206a:	b086      	sub	sp, #24
 801206c:	af02      	add	r7, sp, #8
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    
    ret = ERR_SYNTAX;
 8012072:	2314      	movs	r3, #20
 8012074:	81fb      	strh	r3, [r7, #14]
    
    nfcipLogD( " NFCIP Run() state: %d \r\n", gNfcip.state );
    
    switch( gNfcip.state )
 8012076:	4b94      	ldr	r3, [pc, #592]	; (80122c8 <nfcipRun+0x260>)
 8012078:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801207c:	2b10      	cmp	r3, #16
 801207e:	f200 8118 	bhi.w	80122b2 <nfcipRun+0x24a>
 8012082:	a201      	add	r2, pc, #4	; (adr r2, 8012088 <nfcipRun+0x20>)
 8012084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012088:	080120cd 	.word	0x080120cd
 801208c:	080122b3 	.word	0x080122b3
 8012090:	080122b3 	.word	0x080122b3
 8012094:	080122b3 	.word	0x080122b3
 8012098:	080120cd 	.word	0x080120cd
 801209c:	080120d1 	.word	0x080120d1
 80120a0:	0801212d 	.word	0x0801212d
 80120a4:	080122b3 	.word	0x080122b3
 80120a8:	080122b3 	.word	0x080122b3
 80120ac:	080122b3 	.word	0x080122b3
 80120b0:	080122b3 	.word	0x080122b3
 80120b4:	080122b3 	.word	0x080122b3
 80120b8:	080120cd 	.word	0x080120cd
 80120bc:	08012279 	.word	0x08012279
 80120c0:	08012155 	.word	0x08012155
 80120c4:	080121ff 	.word	0x080121ff
 80120c8:	080120cd 	.word	0x080120cd
        /*******************************************************************************/
        case NFCIP_ST_IDLE:
        case NFCIP_ST_INIT_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_SLEEP:
            return ERR_NONE;
 80120cc:	2300      	movs	r3, #0
 80120ce:	e0f6      	b.n	80122be <nfcipRun+0x256>
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_TX:
            
            nfcipLogD( " NFCIP(I) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_REQ, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) );
 80120d0:	4b7d      	ldr	r3, [pc, #500]	; (80122c8 <nfcipRun+0x260>)
 80120d2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80120d4:	4b7c      	ldr	r3, [pc, #496]	; (80122c8 <nfcipRun+0x260>)
 80120d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80120d8:	4a7b      	ldr	r2, [pc, #492]	; (80122c8 <nfcipRun+0x260>)
 80120da:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 80120de:	189c      	adds	r4, r3, r2
 80120e0:	4b79      	ldr	r3, [pc, #484]	; (80122c8 <nfcipRun+0x260>)
 80120e2:	f8b3 5068 	ldrh.w	r5, [r3, #104]	; 0x68
 80120e6:	4b78      	ldr	r3, [pc, #480]	; (80122c8 <nfcipRun+0x260>)
 80120e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80120ec:	f003 0303 	and.w	r3, r3, #3
 80120f0:	b2db      	uxtb	r3, r3
 80120f2:	4a75      	ldr	r2, [pc, #468]	; (80122c8 <nfcipRun+0x260>)
 80120f4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80120f6:	4a74      	ldr	r2, [pc, #464]	; (80122c8 <nfcipRun+0x260>)
 80120f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80120fa:	440a      	add	r2, r1
 80120fc:	9201      	str	r2, [sp, #4]
 80120fe:	9300      	str	r3, [sp, #0]
 8012100:	462b      	mov	r3, r5
 8012102:	4622      	mov	r2, r4
 8012104:	4601      	mov	r1, r0
 8012106:	2006      	movs	r0, #6
 8012108:	f7ff fde0 	bl	8011ccc <nfcipTx>
 801210c:	4603      	mov	r3, r0
 801210e:	81fb      	strh	r3, [r7, #14]
                        
            switch( ret )
 8012110:	89fb      	ldrh	r3, [r7, #14]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d005      	beq.n	8012122 <nfcipRun+0xba>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 8012116:	4b6c      	ldr	r3, [pc, #432]	; (80122c8 <nfcipRun+0x260>)
 8012118:	2204      	movs	r2, #4
 801211a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  return ret;
 801211e:	89fb      	ldrh	r3, [r7, #14]
 8012120:	e0cd      	b.n	80122be <nfcipRun+0x256>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_INIT_DEP_RX;
 8012122:	4b69      	ldr	r3, [pc, #420]	; (80122c8 <nfcipRun+0x260>)
 8012124:	2206      	movs	r2, #6
 8012126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  break;
 801212a:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_RX:          /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */

            ret = nfcipDataRx( false );
 801212c:	2000      	movs	r0, #0
 801212e:	f000 fda9 	bl	8012c84 <nfcipDataRx>
 8012132:	4603      	mov	r3, r0
 8012134:	81fb      	strh	r3, [r7, #14]
            
            if( ret != ERR_BUSY )
 8012136:	89fb      	ldrh	r3, [r7, #14]
 8012138:	2b02      	cmp	r3, #2
 801213a:	f000 80bc 	beq.w	80122b6 <nfcipRun+0x24e>
            {
                ret = nfcipInitiatorHandleDEP( ret, *gNfcip.rxRcvdLen, outActRxLen, outIsChaining );
 801213e:	4b62      	ldr	r3, [pc, #392]	; (80122c8 <nfcipRun+0x260>)
 8012140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012142:	8819      	ldrh	r1, [r3, #0]
 8012144:	89f8      	ldrh	r0, [r7, #14]
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	687a      	ldr	r2, [r7, #4]
 801214a:	f7fe fea5 	bl	8010e98 <nfcipInitiatorHandleDEP>
 801214e:	4603      	mov	r3, r0
 8012150:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 8012152:	e0b0      	b.n	80122b6 <nfcipRun+0x24e>
            
        /*******************************************************************************/    
        case NFCIP_ST_TARG_DEP_RTOX:
            
            if( !nfcipTimerisExpired( gNfcip.RTOXTimer ) )                    /* Do nothing until RTOX timer has expired */
 8012154:	4b5c      	ldr	r3, [pc, #368]	; (80122c8 <nfcipRun+0x260>)
 8012156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012158:	4618      	mov	r0, r3
 801215a:	f7f2 f881 	bl	8004260 <timerIsExpired>
 801215e:	4603      	mov	r3, r0
 8012160:	f083 0301 	eor.w	r3, r3, #1
 8012164:	b2db      	uxtb	r3, r3
 8012166:	2b00      	cmp	r3, #0
 8012168:	d001      	beq.n	801216e <nfcipRun+0x106>
            {
                return ERR_BUSY;
 801216a:	2302      	movs	r3, #2
 801216c:	e0a7      	b.n	80122be <nfcipRun+0x256>
            }
            
            /* If we cannot send a RTOX raise a Timeout error so that we do not   
             * hold the field On forever in AP2P                                  */
            if( nfcipIsRTOXReqDisabled(gNfcip.cfg.oper) )
 801216e:	4b56      	ldr	r3, [pc, #344]	; (80122c8 <nfcipRun+0x260>)
 8012170:	789b      	ldrb	r3, [r3, #2]
 8012172:	f003 0301 	and.w	r3, r3, #1
 8012176:	2b00      	cmp	r3, #0
 8012178:	d001      	beq.n	801217e <nfcipRun+0x116>
            {
                /* We should reEnable Rx, and measure time between our field Off to 
                 * either report link loss or recover               #287          */
                nfcipLogI( " NFCIP(T) RTOX not sent due to config, NOT reenabling Rx \r\n" );
                return ERR_TIMEOUT;
 801217a:	2304      	movs	r3, #4
 801217c:	e09f      	b.n	80122be <nfcipRun+0x256>
            } 

            if( gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS )              /* Check maximum consecutive RTOX requests */
 801217e:	4b52      	ldr	r3, [pc, #328]	; (80122c8 <nfcipRun+0x260>)
 8012180:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012184:	1c5a      	adds	r2, r3, #1
 8012186:	b2d1      	uxtb	r1, r2
 8012188:	4a4f      	ldr	r2, [pc, #316]	; (80122c8 <nfcipRun+0x260>)
 801218a:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 801218e:	2b03      	cmp	r3, #3
 8012190:	d901      	bls.n	8012196 <nfcipRun+0x12e>
            {
                return ERR_PROTO;
 8012192:	230b      	movs	r3, #11
 8012194:	e093      	b.n	80122be <nfcipRun+0x256>
            }
            
            nfcipLogI( " NFCIP(T) RTOX sent \r\n" );
            
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 8012196:	4b4c      	ldr	r3, [pc, #304]	; (80122c8 <nfcipRun+0x260>)
 8012198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801219c:	f003 030f 	and.w	r3, r3, #15
 80121a0:	330c      	adds	r3, #12
 80121a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80121a6:	fa22 f303 	lsr.w	r3, r2, r3
 80121aa:	2b3a      	cmp	r3, #58	; 0x3a
 80121ac:	d80b      	bhi.n	80121c6 <nfcipRun+0x15e>
 80121ae:	4b46      	ldr	r3, [pc, #280]	; (80122c8 <nfcipRun+0x260>)
 80121b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80121b4:	f003 030f 	and.w	r3, r3, #15
 80121b8:	330c      	adds	r3, #12
 80121ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80121be:	fa22 f303 	lsr.w	r3, r2, r3
 80121c2:	b2db      	uxtb	r3, r3
 80121c4:	e000      	b.n	80121c8 <nfcipRun+0x160>
 80121c6:	233b      	movs	r3, #59	; 0x3b
 80121c8:	4a3f      	ldr	r2, [pc, #252]	; (80122c8 <nfcipRun+0x260>)
 80121ca:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 80121ce:	4b3e      	ldr	r3, [pc, #248]	; (80122c8 <nfcipRun+0x260>)
 80121d0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80121d4:	4619      	mov	r1, r3
 80121d6:	2090      	movs	r0, #144	; 0x90
 80121d8:	f7fe fde2 	bl	8010da0 <nfcipDEPControlMsg>
 80121dc:	4603      	mov	r3, r0
 80121de:	81fb      	strh	r3, [r7, #14]
 80121e0:	89fb      	ldrh	r3, [r7, #14]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d001      	beq.n	80121ea <nfcipRun+0x182>
 80121e6:	89fb      	ldrh	r3, [r7, #14]
 80121e8:	e069      	b.n	80122be <nfcipRun+0x256>
            
            /* Set waiting for RTOX Ack Flag */
            gNfcip.isWait4RTOX = true;
 80121ea:	4b37      	ldr	r3, [pc, #220]	; (80122c8 <nfcipRun+0x260>)
 80121ec:	2201      	movs	r2, #1
 80121ee:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            gNfcip.state = NFCIP_ST_TARG_DEP_RX;                              /* Go back to Rx to process RTOX ack       */
 80121f2:	4b35      	ldr	r3, [pc, #212]	; (80122c8 <nfcipRun+0x260>)
 80121f4:	220d      	movs	r2, #13
 80121f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 80121fa:	2302      	movs	r3, #2
 80121fc:	e05f      	b.n	80122be <nfcipRun+0x256>
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_TX:
            
            nfcipLogD( " NFCIP(T) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_RES, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), NFCIP_NO_FWT );
 80121fe:	4b32      	ldr	r3, [pc, #200]	; (80122c8 <nfcipRun+0x260>)
 8012200:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8012202:	4b31      	ldr	r3, [pc, #196]	; (80122c8 <nfcipRun+0x260>)
 8012204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012206:	4a30      	ldr	r2, [pc, #192]	; (80122c8 <nfcipRun+0x260>)
 8012208:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 801220c:	1898      	adds	r0, r3, r2
 801220e:	4b2e      	ldr	r3, [pc, #184]	; (80122c8 <nfcipRun+0x260>)
 8012210:	f8b3 4068 	ldrh.w	r4, [r3, #104]	; 0x68
 8012214:	4b2c      	ldr	r3, [pc, #176]	; (80122c8 <nfcipRun+0x260>)
 8012216:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801221a:	f003 0303 	and.w	r3, r3, #3
 801221e:	b2db      	uxtb	r3, r3
 8012220:	f04f 32ff 	mov.w	r2, #4294967295
 8012224:	9201      	str	r2, [sp, #4]
 8012226:	9300      	str	r3, [sp, #0]
 8012228:	4623      	mov	r3, r4
 801222a:	4602      	mov	r2, r0
 801222c:	2007      	movs	r0, #7
 801222e:	f7ff fd4d 	bl	8011ccc <nfcipTx>
 8012232:	4603      	mov	r3, r0
 8012234:	81fb      	strh	r3, [r7, #14]
            
            /* Clear flags */
            gNfcip.isTxPending = false;
 8012236:	4b24      	ldr	r3, [pc, #144]	; (80122c8 <nfcipRun+0x260>)
 8012238:	2200      	movs	r2, #0
 801223a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            gNfcip.isWait4RTOX = false;
 801223e:	4b22      	ldr	r3, [pc, #136]	; (80122c8 <nfcipRun+0x260>)
 8012240:	2200      	movs	r2, #0
 8012242:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            /* Digital 1.0 14.12.3.4 Increment the current PNI after Tx */
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8012246:	4b20      	ldr	r3, [pc, #128]	; (80122c8 <nfcipRun+0x260>)
 8012248:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801224c:	3301      	adds	r3, #1
 801224e:	b2db      	uxtb	r3, r3
 8012250:	f003 0303 	and.w	r3, r3, #3
 8012254:	b2da      	uxtb	r2, r3
 8012256:	4b1c      	ldr	r3, [pc, #112]	; (80122c8 <nfcipRun+0x260>)
 8012258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            switch( ret )
 801225c:	89fb      	ldrh	r3, [r7, #14]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d005      	beq.n	801226e <nfcipRun+0x206>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;                      /* Upon Tx error, goto IDLE state */
 8012262:	4b19      	ldr	r3, [pc, #100]	; (80122c8 <nfcipRun+0x260>)
 8012264:	220c      	movs	r2, #12
 8012266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  return ret;
 801226a:	89fb      	ldrh	r3, [r7, #14]
 801226c:	e027      	b.n	80122be <nfcipRun+0x256>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_TARG_DEP_RX;                        /* All OK, goto Rx state          */
 801226e:	4b16      	ldr	r3, [pc, #88]	; (80122c8 <nfcipRun+0x260>)
 8012270:	220d      	movs	r2, #13
 8012272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  break;
 8012276:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_RX:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( gNfcip.isReqPending )    /* if already has Data should be from a DEP from nfcipTargetHandleActivation()  */
 8012278:	4b13      	ldr	r3, [pc, #76]	; (80122c8 <nfcipRun+0x260>)
 801227a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801227e:	2b00      	cmp	r3, #0
 8012280:	d006      	beq.n	8012290 <nfcipRun+0x228>
            {
                nfcipLogD( " NFCIP(T) Skipping Rx Using DEP from Activation \r\n" );
                
                gNfcip.isReqPending = false;
 8012282:	4b11      	ldr	r3, [pc, #68]	; (80122c8 <nfcipRun+0x260>)
 8012284:	2200      	movs	r2, #0
 8012286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
                ret = ERR_NONE;
 801228a:	2300      	movs	r3, #0
 801228c:	81fb      	strh	r3, [r7, #14]
 801228e:	e004      	b.n	801229a <nfcipRun+0x232>
            }
            else
            {
                ret = nfcipDataRx( false );
 8012290:	2000      	movs	r0, #0
 8012292:	f000 fcf7 	bl	8012c84 <nfcipDataRx>
 8012296:	4603      	mov	r3, r0
 8012298:	81fb      	strh	r3, [r7, #14]
            }
            
            if( ret != ERR_BUSY )
 801229a:	89fb      	ldrh	r3, [r7, #14]
 801229c:	2b02      	cmp	r3, #2
 801229e:	d00c      	beq.n	80122ba <nfcipRun+0x252>
            {
                ret = nfcipTargetHandleRX( ret, outActRxLen, outIsChaining );
 80122a0:	89fb      	ldrh	r3, [r7, #14]
 80122a2:	683a      	ldr	r2, [r7, #0]
 80122a4:	6879      	ldr	r1, [r7, #4]
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7ff f8c6 	bl	8011438 <nfcipTargetHandleRX>
 80122ac:	4603      	mov	r3, r0
 80122ae:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 80122b0:	e003      	b.n	80122ba <nfcipRun+0x252>
            
        /*******************************************************************************/
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 80122b2:	bf00      	nop
 80122b4:	e002      	b.n	80122bc <nfcipRun+0x254>
            break;
 80122b6:	bf00      	nop
 80122b8:	e000      	b.n	80122bc <nfcipRun+0x254>
            break;
 80122ba:	bf00      	nop
    }
    return ret;
 80122bc:	89fb      	ldrh	r3, [r7, #14]
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3710      	adds	r7, #16
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bdb0      	pop	{r4, r5, r7, pc}
 80122c6:	bf00      	nop
 80122c8:	200034cc 	.word	0x200034cc

080122cc <rfalNfcDepInitialize>:
}


/*******************************************************************************/
void rfalNfcDepInitialize( void )
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	af00      	add	r7, sp, #0
    nfcipLogD( " NFCIP Ini() \r\n" );
	
    gNfcip.state          = NFCIP_ST_IDLE;
 80122d0:	4b28      	ldr	r3, [pc, #160]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 80122d2:	2200      	movs	r2, #0
 80122d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    gNfcip.isDeactivating = NULL;
 80122d8:	4b26      	ldr	r3, [pc, #152]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 80122da:	2200      	movs	r2, #0
 80122dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    
    gNfcip.isTxPending    = false;
 80122e0:	4b24      	ldr	r3, [pc, #144]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 80122e2:	2200      	movs	r2, #0
 80122e4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    gNfcip.isWait4RTOX    = false;
 80122e8:	4b22      	ldr	r3, [pc, #136]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 80122ea:	2200      	movs	r2, #0
 80122ec:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    gNfcip.isReqPending   = false;
 80122f0:	4b20      	ldr	r3, [pc, #128]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 80122f2:	2200      	movs	r2, #0
 80122f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    
            
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 80122f8:	4b1e      	ldr	r3, [pc, #120]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 80122fa:	2202      	movs	r2, #2
 80122fc:	709a      	strb	r2, [r3, #2]
    
    gNfcip.cfg.did   = RFAL_NFCDEP_DID_NO;
 80122fe:	4b1d      	ldr	r3, [pc, #116]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 8012300:	2200      	movs	r2, #0
 8012302:	70da      	strb	r2, [r3, #3]
    gNfcip.cfg.nad   = RFAL_NFCDEP_NAD_NO;
 8012304:	4b1b      	ldr	r3, [pc, #108]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 8012306:	2200      	movs	r2, #0
 8012308:	711a      	strb	r2, [r3, #4]
    
    gNfcip.cfg.br    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 801230a:	4b1a      	ldr	r3, [pc, #104]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 801230c:	2200      	movs	r2, #0
 801230e:	719a      	strb	r2, [r3, #6]
    gNfcip.cfg.bs    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8012310:	4b18      	ldr	r3, [pc, #96]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 8012312:	2200      	movs	r2, #0
 8012314:	715a      	strb	r2, [r3, #5]
    
    gNfcip.cfg.lr    = RFAL_NFCDEP_LR_254;
 8012316:	4b17      	ldr	r3, [pc, #92]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 8012318:	2203      	movs	r2, #3
 801231a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 801231e:	4b15      	ldr	r3, [pc, #84]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 8012320:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012324:	3301      	adds	r3, #1
 8012326:	019b      	lsls	r3, r3, #6
 8012328:	2bfd      	cmp	r3, #253	; 0xfd
 801232a:	d807      	bhi.n	801233c <rfalNfcDepInitialize+0x70>
 801232c:	4b11      	ldr	r3, [pc, #68]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 801232e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012332:	3301      	adds	r3, #1
 8012334:	b29b      	uxth	r3, r3
 8012336:	019b      	lsls	r3, r3, #6
 8012338:	b29b      	uxth	r3, r3
 801233a:	e000      	b.n	801233e <rfalNfcDepInitialize+0x72>
 801233c:	23fe      	movs	r3, #254	; 0xfe
 801233e:	4a0d      	ldr	r2, [pc, #52]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 8012340:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.cfg.gbLen = 0;    
 8012344:	4b0b      	ldr	r3, [pc, #44]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 8012346:	2200      	movs	r2, #0
 8012348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    
    gNfcip.cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 801234c:	4b09      	ldr	r3, [pc, #36]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 801234e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012352:	649a      	str	r2, [r3, #72]	; 0x48
    gNfcip.cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 8012354:	4b07      	ldr	r3, [pc, #28]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 8012356:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801235a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    gNfcip.pni       = 0;    
 801235c:	4b05      	ldr	r3, [pc, #20]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 801235e:	2200      	movs	r2, #0
 8012360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    gNfcip.RTOXTimer = 0;
 8012364:	4b03      	ldr	r3, [pc, #12]	; (8012374 <rfalNfcDepInitialize+0xa8>)
 8012366:	2200      	movs	r2, #0
 8012368:	67da      	str	r2, [r3, #124]	; 0x7c

    nfcipClearCounters();
 801236a:	f7fe fd79 	bl	8010e60 <nfcipClearCounters>
}
 801236e:	bf00      	nop
 8012370:	bd80      	pop	{r7, pc}
 8012372:	bf00      	nop
 8012374:	200034cc 	.word	0x200034cc

08012378 <nfcipSetDEPParams>:


/*******************************************************************************/
static void nfcipSetDEPParams( rfalNfcDepDEPParams *DEPParams )
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
    nfcipLogD( " NFCIP SetDEP() txLen: %d \r\n", DEPParams->txBufLen );
	
    gNfcip.isTxChaining = DEPParams->txChaining;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	7ada      	ldrb	r2, [r3, #11]
 8012384:	4b2f      	ldr	r3, [pc, #188]	; (8012444 <nfcipSetDEPParams+0xcc>)
 8012386:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    gNfcip.txBuf        = DEPParams->txBuf;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	685b      	ldr	r3, [r3, #4]
 801238e:	4a2d      	ldr	r2, [pc, #180]	; (8012444 <nfcipSetDEPParams+0xcc>)
 8012390:	6613      	str	r3, [r2, #96]	; 0x60
    gNfcip.rxBuf        = DEPParams->rxBuf;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	68db      	ldr	r3, [r3, #12]
 8012396:	4a2b      	ldr	r2, [pc, #172]	; (8012444 <nfcipSetDEPParams+0xcc>)
 8012398:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.txBufLen     = DEPParams->txBufLen;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	891a      	ldrh	r2, [r3, #8]
 801239e:	4b29      	ldr	r3, [pc, #164]	; (8012444 <nfcipSetDEPParams+0xcc>)
 80123a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    gNfcip.rxBufLen     = DEPParams->rxBufLen;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	8a1a      	ldrh	r2, [r3, #16]
 80123a8:	4b26      	ldr	r3, [pc, #152]	; (8012444 <nfcipSetDEPParams+0xcc>)
 80123aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	7a9a      	ldrb	r2, [r3, #10]
 80123b2:	4b24      	ldr	r3, [pc, #144]	; (8012444 <nfcipSetDEPParams+0xcc>)
 80123b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    gNfcip.rxBufPaylPos = DEPParams->rxBufPaylPos;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	7c9a      	ldrb	r2, [r3, #18]
 80123bc:	4b21      	ldr	r3, [pc, #132]	; (8012444 <nfcipSetDEPParams+0xcc>)
 80123be:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    
    if( DEPParams->did != RFAL_NFCDEP_DID_KEEP )
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	781b      	ldrb	r3, [r3, #0]
 80123c6:	2bff      	cmp	r3, #255	; 0xff
 80123c8:	d007      	beq.n	80123da <nfcipSetDEPParams+0x62>
    {
        gNfcip.cfg.did  = nfcip_DIDMax( DEPParams->did );
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	781b      	ldrb	r3, [r3, #0]
 80123ce:	2b0e      	cmp	r3, #14
 80123d0:	bf28      	it	cs
 80123d2:	230e      	movcs	r3, #14
 80123d4:	b2da      	uxtb	r2, r3
 80123d6:	4b1b      	ldr	r3, [pc, #108]	; (8012444 <nfcipSetDEPParams+0xcc>)
 80123d8:	70da      	strb	r2, [r3, #3]
    }
    
    gNfcip.cfg.fwt      = DEPParams->fwt;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	695b      	ldr	r3, [r3, #20]
 80123de:	4a19      	ldr	r2, [pc, #100]	; (8012444 <nfcipSetDEPParams+0xcc>)
 80123e0:	6493      	str	r3, [r2, #72]	; 0x48
    gNfcip.cfg.dFwt     = DEPParams->dFwt;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	699b      	ldr	r3, [r3, #24]
 80123e6:	4a17      	ldr	r2, [pc, #92]	; (8012444 <nfcipSetDEPParams+0xcc>)
 80123e8:	64d3      	str	r3, [r2, #76]	; 0x4c
    gNfcip.fsc          = DEPParams->fsc;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	8b9a      	ldrh	r2, [r3, #28]
 80123ee:	4b15      	ldr	r3, [pc, #84]	; (8012444 <nfcipSetDEPParams+0xcc>)
 80123f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    
    
    
    if(gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET)
 80123f4:	4b13      	ldr	r3, [pc, #76]	; (8012444 <nfcipSetDEPParams+0xcc>)
 80123f6:	781b      	ldrb	r3, [r3, #0]
 80123f8:	2b01      	cmp	r3, #1
 80123fa:	d119      	bne.n	8012430 <nfcipSetDEPParams+0xb8>
    {
        /* If there's any data to be sent go for Tx */
        if(DEPParams->txBufLen > 0U)
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	891b      	ldrh	r3, [r3, #8]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d010      	beq.n	8012426 <nfcipSetDEPParams+0xae>
        {
            /* Ensure that an RTOX Ack is not being expected at moment */
            if( !gNfcip.isWait4RTOX )
 8012404:	4b0f      	ldr	r3, [pc, #60]	; (8012444 <nfcipSetDEPParams+0xcc>)
 8012406:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 801240a:	f083 0301 	eor.w	r3, r3, #1
 801240e:	b2db      	uxtb	r3, r3
 8012410:	2b00      	cmp	r3, #0
 8012412:	d004      	beq.n	801241e <nfcipSetDEPParams+0xa6>
            {
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8012414:	4b0b      	ldr	r3, [pc, #44]	; (8012444 <nfcipSetDEPParams+0xcc>)
 8012416:	220f      	movs	r2, #15
 8012418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return;
 801241c:	e00e      	b.n	801243c <nfcipSetDEPParams+0xc4>
            }
            else
            {
                /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
                gNfcip.isTxPending = true;
 801241e:	4b09      	ldr	r3, [pc, #36]	; (8012444 <nfcipSetDEPParams+0xcc>)
 8012420:	2201      	movs	r2, #1
 8012422:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                nfcipLogW( " NFCIP(T) Waiting RTOX, queueing outgoing DEP Block \r\n" );                
            }
        }    
    
        /*Digital 1.0  14.12.4.1 In target mode the first PDU MUST be sent by the Initiator */
        gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 8012426:	4b07      	ldr	r3, [pc, #28]	; (8012444 <nfcipSetDEPParams+0xcc>)
 8012428:	220d      	movs	r2, #13
 801242a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return;
 801242e:	e005      	b.n	801243c <nfcipSetDEPParams+0xc4>
    }

    /* New data TxRx request clear previous error counters for consecutive TxRx without reseting communication/protocol layer*/
    nfcipClearCounters();
 8012430:	f7fe fd16 	bl	8010e60 <nfcipClearCounters>
    
    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8012434:	4b03      	ldr	r3, [pc, #12]	; (8012444 <nfcipSetDEPParams+0xcc>)
 8012436:	2205      	movs	r2, #5
 8012438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 801243c:	3708      	adds	r7, #8
 801243e:	46bd      	mov	sp, r7
 8012440:	bd80      	pop	{r7, pc}
 8012442:	bf00      	nop
 8012444:	200034cc 	.word	0x200034cc

08012448 <rfalNfcDepIsAtrReq>:
}


/*******************************************************************************/
bool rfalNfcDepIsAtrReq( const uint8_t* buf, uint16_t bufLen, uint8_t* nfcid3 )
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b086      	sub	sp, #24
 801244c:	af00      	add	r7, sp, #0
 801244e:	60f8      	str	r0, [r7, #12]
 8012450:	460b      	mov	r3, r1
 8012452:	607a      	str	r2, [r7, #4]
 8012454:	817b      	strh	r3, [r7, #10]
    uint8_t msgIt;
    
    msgIt = 0;
 8012456:	2300      	movs	r3, #0
 8012458:	75fb      	strb	r3, [r7, #23]
    
    if ( (bufLen < RFAL_NFCDEP_ATRREQ_MIN_LEN) || (bufLen > RFAL_NFCDEP_ATRREQ_MAX_LEN) )
 801245a:	897b      	ldrh	r3, [r7, #10]
 801245c:	2b0f      	cmp	r3, #15
 801245e:	d902      	bls.n	8012466 <rfalNfcDepIsAtrReq+0x1e>
 8012460:	897b      	ldrh	r3, [r7, #10]
 8012462:	2b40      	cmp	r3, #64	; 0x40
 8012464:	d901      	bls.n	801246a <rfalNfcDepIsAtrReq+0x22>
    {
        return false;
 8012466:	2300      	movs	r3, #0
 8012468:	e020      	b.n	80124ac <rfalNfcDepIsAtrReq+0x64>
    }
    
    if ( buf[msgIt++] != NFCIP_REQ )
 801246a:	7dfb      	ldrb	r3, [r7, #23]
 801246c:	1c5a      	adds	r2, r3, #1
 801246e:	75fa      	strb	r2, [r7, #23]
 8012470:	461a      	mov	r2, r3
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	4413      	add	r3, r2
 8012476:	781b      	ldrb	r3, [r3, #0]
 8012478:	2bd4      	cmp	r3, #212	; 0xd4
 801247a:	d001      	beq.n	8012480 <rfalNfcDepIsAtrReq+0x38>
    {
        return false;
 801247c:	2300      	movs	r3, #0
 801247e:	e015      	b.n	80124ac <rfalNfcDepIsAtrReq+0x64>
    }
    
    if( buf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_REQ )
 8012480:	7dfb      	ldrb	r3, [r7, #23]
 8012482:	1c5a      	adds	r2, r3, #1
 8012484:	75fa      	strb	r2, [r7, #23]
 8012486:	461a      	mov	r2, r3
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	4413      	add	r3, r2
 801248c:	781b      	ldrb	r3, [r3, #0]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d001      	beq.n	8012496 <rfalNfcDepIsAtrReq+0x4e>
    {
        return false;
 8012492:	2300      	movs	r3, #0
 8012494:	e00a      	b.n	80124ac <rfalNfcDepIsAtrReq+0x64>
    }
    
    /* Output NFID3 if requested */
    if( nfcid3 != NULL )
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d006      	beq.n	80124aa <rfalNfcDepIsAtrReq+0x62>
    {
        ST_MEMCPY( nfcid3, &buf[RFAL_NFCDEP_ATR_REQ_NFCID3_POS], RFAL_NFCDEP_NFCID3_LEN );
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	3302      	adds	r3, #2
 80124a0:	220a      	movs	r2, #10
 80124a2:	4619      	mov	r1, r3
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f006 fca6 	bl	8018df6 <memcpy>
    }
     
    return true;
 80124aa:	2301      	movs	r3, #1
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3718      	adds	r7, #24
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <nfcipTargetHandleActivation>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleActivation( rfalNfcDepDevice *nfcDepDev, uint8_t *outBRS )
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b088      	sub	sp, #32
 80124b8:	af02      	add	r7, sp, #8
 80124ba:	6078      	str	r0, [r7, #4]
 80124bc:	6039      	str	r1, [r7, #0]
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_PSLRES_LEN];
    
    /*******************************************************************************/
    /*  Check if we are in correct state                                           */
    /*******************************************************************************/
    if( gNfcip.state != NFCIP_ST_TARG_WAIT_ACTV )
 80124be:	4b79      	ldr	r3, [pc, #484]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 80124c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80124c4:	2b0b      	cmp	r3, #11
 80124c6:	d001      	beq.n	80124cc <nfcipTargetHandleActivation+0x18>
    {
        return ERR_WRONG_STATE;
 80124c8:	2321      	movs	r3, #33	; 0x21
 80124ca:	e0e6      	b.n	801269a <nfcipTargetHandleActivation+0x1e6>
    
    
    /*******************************************************************************/
    /*  Check required parameters                                                  */
    /*******************************************************************************/
    if( outBRS == NULL )
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d101      	bne.n	80124d6 <nfcipTargetHandleActivation+0x22>
    {
        return ERR_PARAM;
 80124d2:	2307      	movs	r3, #7
 80124d4:	e0e1      	b.n	801269a <nfcipTargetHandleActivation+0x1e6>
    }
    
    /*******************************************************************************/
    /*  Wait and process incoming cmd (PSL / DEP)                                  */
    /*******************************************************************************/        
    ret = nfcipDataRx( false );
 80124d6:	2000      	movs	r0, #0
 80124d8:	f000 fbd4 	bl	8012c84 <nfcipDataRx>
 80124dc:	4603      	mov	r3, r0
 80124de:	82fb      	strh	r3, [r7, #22]

    if( ret != ERR_NONE )
 80124e0:	8afb      	ldrh	r3, [r7, #22]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d001      	beq.n	80124ea <nfcipTargetHandleActivation+0x36>
    {
        return ret;
 80124e6:	8afb      	ldrh	r3, [r7, #22]
 80124e8:	e0d7      	b.n	801269a <nfcipTargetHandleActivation+0x1e6>
    }
    
    msgIt   = 0;
 80124ea:	2300      	movs	r3, #0
 80124ec:	757b      	strb	r3, [r7, #21]
    *outBRS = RFAL_NFCDEP_BRS_MAINTAIN;                   /* set out BRS to be maintained */
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	22c0      	movs	r2, #192	; 0xc0
 80124f2:	701a      	strb	r2, [r3, #0]
 
    msgIt++;                                              /* Skip LEN byte                */
 80124f4:	7d7b      	ldrb	r3, [r7, #21]
 80124f6:	3301      	adds	r3, #1
 80124f8:	757b      	strb	r3, [r7, #21]
    
    if ( gNfcip.rxBuf[msgIt++] != NFCIP_REQ )
 80124fa:	4b6a      	ldr	r3, [pc, #424]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 80124fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80124fe:	7d7b      	ldrb	r3, [r7, #21]
 8012500:	1c59      	adds	r1, r3, #1
 8012502:	7579      	strb	r1, [r7, #21]
 8012504:	4413      	add	r3, r2
 8012506:	781b      	ldrb	r3, [r3, #0]
 8012508:	2bd4      	cmp	r3, #212	; 0xd4
 801250a:	d001      	beq.n	8012510 <nfcipTargetHandleActivation+0x5c>
    {
        return ERR_PROTO;
 801250c:	230b      	movs	r3, #11
 801250e:	e0c4      	b.n	801269a <nfcipTargetHandleActivation+0x1e6>
    }
    
    if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_PSL_REQ )
 8012510:	4b64      	ldr	r3, [pc, #400]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 8012512:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012514:	7d7b      	ldrb	r3, [r7, #21]
 8012516:	4413      	add	r3, r2
 8012518:	781b      	ldrb	r3, [r3, #0]
 801251a:	2b04      	cmp	r3, #4
 801251c:	f040 8082 	bne.w	8012624 <nfcipTargetHandleActivation+0x170>
    {
        msgIt++;
 8012520:	7d7b      	ldrb	r3, [r7, #21]
 8012522:	3301      	adds	r3, #1
 8012524:	757b      	strb	r3, [r7, #21]
        
        if( gNfcip.rxBuf[msgIt++] != gNfcip.cfg.did )     /* Checking DID                 */
 8012526:	4b5f      	ldr	r3, [pc, #380]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 8012528:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801252a:	7d7b      	ldrb	r3, [r7, #21]
 801252c:	1c59      	adds	r1, r3, #1
 801252e:	7579      	strb	r1, [r7, #21]
 8012530:	4413      	add	r3, r2
 8012532:	781a      	ldrb	r2, [r3, #0]
 8012534:	4b5b      	ldr	r3, [pc, #364]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 8012536:	78db      	ldrb	r3, [r3, #3]
 8012538:	429a      	cmp	r2, r3
 801253a:	d001      	beq.n	8012540 <nfcipTargetHandleActivation+0x8c>
        {
            return ERR_PROTO;
 801253c:	230b      	movs	r3, #11
 801253e:	e0ac      	b.n	801269a <nfcipTargetHandleActivation+0x1e6>
        }
        
        nfcipLogI( " NFCIP(T) PSL REQ rcvd \r\n" );
        
        *outBRS = gNfcip.rxBuf[msgIt++];                  /* assign output BRS value      */
 8012540:	4b58      	ldr	r3, [pc, #352]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 8012542:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012544:	7d7b      	ldrb	r3, [r7, #21]
 8012546:	1c59      	adds	r1, r3, #1
 8012548:	7579      	strb	r1, [r7, #21]
 801254a:	4413      	add	r3, r2
 801254c:	781a      	ldrb	r2, [r3, #0]
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	701a      	strb	r2, [r3, #0]
        
        /* Store FSL(LR) and update current config */
        gNfcip.cfg.lr = (gNfcip.rxBuf[msgIt++] & RFAL_NFCDEP_LR_VAL_MASK);
 8012552:	4b54      	ldr	r3, [pc, #336]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 8012554:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012556:	7d7b      	ldrb	r3, [r7, #21]
 8012558:	1c59      	adds	r1, r3, #1
 801255a:	7579      	strb	r1, [r7, #21]
 801255c:	4413      	add	r3, r2
 801255e:	781b      	ldrb	r3, [r3, #0]
 8012560:	f003 0303 	and.w	r3, r3, #3
 8012564:	b2da      	uxtb	r2, r3
 8012566:	4b4f      	ldr	r3, [pc, #316]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 8012568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        gNfcip.fsc    = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 801256c:	4b4d      	ldr	r3, [pc, #308]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 801256e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012572:	3301      	adds	r3, #1
 8012574:	019b      	lsls	r3, r3, #6
 8012576:	2bfd      	cmp	r3, #253	; 0xfd
 8012578:	d807      	bhi.n	801258a <nfcipTargetHandleActivation+0xd6>
 801257a:	4b4a      	ldr	r3, [pc, #296]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 801257c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012580:	3301      	adds	r3, #1
 8012582:	b29b      	uxth	r3, r3
 8012584:	019b      	lsls	r3, r3, #6
 8012586:	b29b      	uxth	r3, r3
 8012588:	e000      	b.n	801258c <nfcipTargetHandleActivation+0xd8>
 801258a:	23fe      	movs	r3, #254	; 0xfe
 801258c:	4a45      	ldr	r2, [pc, #276]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 801258e:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
        
        /*******************************************************************************/
        /* Update NFC-DDE Device info */
        if( nfcDepDev != NULL )
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d032      	beq.n	80125fe <nfcipTargetHandleActivation+0x14a>
        {
            /* Update Bitrate info */
            /* PRQA S 4342 2 # MISRA 10.5 - Layout of enum rfalBitRate and definition of rfalNfcDepBRS2DSI guarantee no invalid enum values to be created */
            nfcDepDev->info.DSI = (rfalBitRate)rfalNfcDepBRS2DSI( *outBRS );   /* DSI codes the bit rate from Initiator to Target */
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	781b      	ldrb	r3, [r3, #0]
 801259c:	08db      	lsrs	r3, r3, #3
 801259e:	b2db      	uxtb	r3, r3
 80125a0:	f003 0307 	and.w	r3, r3, #7
 80125a4:	b2da      	uxtb	r2, r3
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            nfcDepDev->info.DRI = (rfalBitRate)rfalNfcDepBRS2DRI( *outBRS );   /* DRI codes the bit rate from Target to Initiator */
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	f003 0307 	and.w	r3, r3, #7
 80125b4:	b2da      	uxtb	r2, r3
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            
            /* Update Length Reduction and Frame Size */
            nfcDepDev->info.LR = gNfcip.cfg.lr;
 80125bc:	4b39      	ldr	r3, [pc, #228]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 80125be:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            nfcDepDev->info.FS = gNfcip.fsc;
 80125c8:	4b36      	ldr	r3, [pc, #216]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 80125ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            
            /* Update PPi byte */
            nfcDepDev->activation.Initiator.ATR_REQ.PPi &= ~RFAL_NFCDEP_PP_LR_MASK;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	7bdb      	ldrb	r3, [r3, #15]
 80125d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80125dc:	b2da      	uxtb	r2, r3
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	73da      	strb	r2, [r3, #15]
            nfcDepDev->activation.Initiator.ATR_REQ.PPi |= rfalNfcDepLR2PP( gNfcip.cfg.lr );
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	7bda      	ldrb	r2, [r3, #15]
 80125e6:	4b2f      	ldr	r3, [pc, #188]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 80125e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80125ec:	011b      	lsls	r3, r3, #4
 80125ee:	b2db      	uxtb	r3, r3
 80125f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80125f4:	b2db      	uxtb	r3, r3
 80125f6:	4313      	orrs	r3, r2
 80125f8:	b2da      	uxtb	r2, r3
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	73da      	strb	r2, [r3, #15]
        }
        
        EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_PSL_RES, txBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 80125fe:	f107 010c 	add.w	r1, r7, #12
 8012602:	f04f 33ff 	mov.w	r3, #4294967295
 8012606:	9301      	str	r3, [sp, #4]
 8012608:	2300      	movs	r3, #0
 801260a:	9300      	str	r3, [sp, #0]
 801260c:	2300      	movs	r3, #0
 801260e:	2200      	movs	r2, #0
 8012610:	2005      	movs	r0, #5
 8012612:	f7ff fb5b 	bl	8011ccc <nfcipTx>
 8012616:	4603      	mov	r3, r0
 8012618:	82fb      	strh	r3, [r7, #22]
 801261a:	8afb      	ldrh	r3, [r7, #22]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d037      	beq.n	8012690 <nfcipTargetHandleActivation+0x1dc>
 8012620:	8afb      	ldrh	r3, [r7, #22]
 8012622:	e03a      	b.n	801269a <nfcipTargetHandleActivation+0x1e6>
    }
    else
    {
        if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_DEP_REQ )
 8012624:	4b1f      	ldr	r3, [pc, #124]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 8012626:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012628:	7d7b      	ldrb	r3, [r7, #21]
 801262a:	4413      	add	r3, r2
 801262c:	781b      	ldrb	r3, [r3, #0]
 801262e:	2b06      	cmp	r3, #6
 8012630:	d12a      	bne.n	8012688 <nfcipTargetHandleActivation+0x1d4>
        {
            msgIt++;
 8012632:	7d7b      	ldrb	r3, [r7, #21]
 8012634:	3301      	adds	r3, #1
 8012636:	757b      	strb	r3, [r7, #21]
                    
            /*******************************************************************************/
            /* Digital 1.0 14.12.3.1 PNI must be initialized to 0 */
            if( nfcip_PBF_PNI( gNfcip.rxBuf[msgIt] ) != 0U )
 8012638:	4b1a      	ldr	r3, [pc, #104]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 801263a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801263c:	7d7b      	ldrb	r3, [r7, #21]
 801263e:	4413      	add	r3, r2
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	f003 0303 	and.w	r3, r3, #3
 8012646:	2b00      	cmp	r3, #0
 8012648:	d001      	beq.n	801264e <nfcipTargetHandleActivation+0x19a>
            {
                return ERR_PROTO;
 801264a:	230b      	movs	r3, #11
 801264c:	e025      	b.n	801269a <nfcipTargetHandleActivation+0x1e6>
            }
            
            /*******************************************************************************/
            /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
            if( nfcip_PFBhasDID( gNfcip.rxBuf[ msgIt] ) ) 
 801264e:	4b15      	ldr	r3, [pc, #84]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 8012650:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012652:	7d7b      	ldrb	r3, [r7, #21]
 8012654:	4413      	add	r3, r2
 8012656:	781b      	ldrb	r3, [r3, #0]
 8012658:	f003 0304 	and.w	r3, r3, #4
 801265c:	2b00      	cmp	r3, #0
 801265e:	d00d      	beq.n	801267c <nfcipTargetHandleActivation+0x1c8>
            {
                if( gNfcip.rxBuf[++msgIt] != gNfcip.cfg.did )
 8012660:	4b10      	ldr	r3, [pc, #64]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 8012662:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012664:	7d7b      	ldrb	r3, [r7, #21]
 8012666:	3301      	adds	r3, #1
 8012668:	757b      	strb	r3, [r7, #21]
 801266a:	7d7b      	ldrb	r3, [r7, #21]
 801266c:	4413      	add	r3, r2
 801266e:	781a      	ldrb	r2, [r3, #0]
 8012670:	4b0c      	ldr	r3, [pc, #48]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 8012672:	78db      	ldrb	r3, [r3, #3]
 8012674:	429a      	cmp	r2, r3
 8012676:	d007      	beq.n	8012688 <nfcipTargetHandleActivation+0x1d4>
                {
                    return ERR_PROTO;
 8012678:	230b      	movs	r3, #11
 801267a:	e00e      	b.n	801269a <nfcipTargetHandleActivation+0x1e6>
                }
            }
            else if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )          /* DID expected but not rcv */
 801267c:	4b09      	ldr	r3, [pc, #36]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 801267e:	78db      	ldrb	r3, [r3, #3]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d001      	beq.n	8012688 <nfcipTargetHandleActivation+0x1d4>
            {
                return ERR_PROTO;
 8012684:	230b      	movs	r3, #11
 8012686:	e008      	b.n	801269a <nfcipTargetHandleActivation+0x1e6>
                /* MISRA 15.7 - Empty else */
            }
        }
        
        /* Signal Request pending to be digested on normal Handling (DEP_REQ, DSL_REQ, RLS_REQ) */
        gNfcip.isReqPending = true;
 8012688:	4b06      	ldr	r3, [pc, #24]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 801268a:	2201      	movs	r2, #1
 801268c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    }
    
    gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 8012690:	4b04      	ldr	r3, [pc, #16]	; (80126a4 <nfcipTargetHandleActivation+0x1f0>)
 8012692:	220d      	movs	r2, #13
 8012694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return ERR_NONE;
 8012698:	2300      	movs	r3, #0
}
 801269a:	4618      	mov	r0, r3
 801269c:	3718      	adds	r7, #24
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd80      	pop	{r7, pc}
 80126a2:	bf00      	nop
 80126a4:	200034cc 	.word	0x200034cc

080126a8 <rfalNfcDepATR>:


/*******************************************************************************/
ReturnCode rfalNfcDepATR( const rfalNfcDepAtrParam* param, rfalNfcDepAtrRes *atrRes, uint8_t* atrResLen )
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b0c0      	sub	sp, #256	; 0x100
 80126ac:	af04      	add	r7, sp, #16
 80126ae:	60f8      	str	r0, [r7, #12]
 80126b0:	60b9      	str	r1, [r7, #8]
 80126b2:	607a      	str	r2, [r7, #4]
    uint8_t           msgIt;
    uint8_t           txBuf[RFAL_NFCDEP_ATRREQ_MAX_LEN];
    uint8_t           rxBuf[NFCIP_ATRRES_BUF_LEN];
    
    
    if( (param == NULL) || (atrRes == NULL) || (atrResLen == NULL) )
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d005      	beq.n	80126c6 <rfalNfcDepATR+0x1e>
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d002      	beq.n	80126c6 <rfalNfcDepATR+0x1e>
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d101      	bne.n	80126ca <rfalNfcDepATR+0x22>
    {
        return ERR_PARAM;
 80126c6:	2307      	movs	r3, #7
 80126c8:	e0be      	b.n	8012848 <rfalNfcDepATR+0x1a0>
    
    /*******************************************************************************/
    /* Configure NFC-DEP layer                                                     */
    /*******************************************************************************/
    
    cfg.did  = param->DID;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	7a5b      	ldrb	r3, [r3, #9]
 80126ce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    cfg.nad  = param->NAD;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	7a9b      	ldrb	r3, [r3, #10]
 80126d6:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
    cfg.fwt  = RFAL_NFCDEP_MAX_FWT;
 80126da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80126de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    cfg.dFwt = RFAL_NFCDEP_MAX_FWT;
 80126e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80126e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    cfg.br   = param->BR;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	7b1b      	ldrb	r3, [r3, #12]
 80126ee:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    cfg.bs   = param->BS;
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	7adb      	ldrb	r3, [r3, #11]
 80126f6:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    cfg.lr   = param->LR;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	7b5b      	ldrb	r3, [r3, #13]
 80126fe:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    cfg.to   = RFAL_NFCDEP_WT_TRG_MAX;            /* Not used in Initiator mode */
 8012702:	230e      	movs	r3, #14
 8012704:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
    
    
    cfg.gbLen = param->GBLen;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	7d1b      	ldrb	r3, [r3, #20]
 801270c:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    if( cfg.gbLen > 0U )                          /* MISRA 21.18 */
 8012710:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8012714:	2b00      	cmp	r3, #0
 8012716:	d00a      	beq.n	801272e <rfalNfcDepATR+0x86>
    {
        ST_MEMCPY( cfg.gb, param->GB, cfg.gbLen );
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	6919      	ldr	r1, [r3, #16]
 801271c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8012720:	461a      	mov	r2, r3
 8012722:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012726:	3312      	adds	r3, #18
 8012728:	4618      	mov	r0, r3
 801272a:	f006 fb64 	bl	8018df6 <memcpy>
    }
    
    cfg.nfcidLen = param->nfcidLen;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	7a1b      	ldrb	r3, [r3, #8]
 8012732:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
    if( cfg.nfcidLen > 0U )                       /* MISRA 21.18 */
 8012736:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 801273a:	2b00      	cmp	r3, #0
 801273c:	d00a      	beq.n	8012754 <rfalNfcDepATR+0xac>
    {
        ST_MEMCPY( cfg.nfcid, param->nfcid, cfg.nfcidLen );
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	6859      	ldr	r1, [r3, #4]
 8012742:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8012746:	461a      	mov	r2, r3
 8012748:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801274c:	3307      	adds	r3, #7
 801274e:	4618      	mov	r0, r3
 8012750:	f006 fb51 	bl	8018df6 <memcpy>
    }
    
    cfg.role     = RFAL_NFCDEP_ROLE_INITIATOR;
 8012754:	2300      	movs	r3, #0
 8012756:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
    cfg.oper     = param->operParam;
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	785b      	ldrb	r3, [r3, #1]
 801275e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    cfg.commMode = param->commMode;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

    rfalNfcDepInitialize();
 801276a:	f7ff fdaf 	bl	80122cc <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 801276e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012772:	4618      	mov	r0, r3
 8012774:	f7ff fc36 	bl	8011fe4 <nfcipConfig>
    
    /*******************************************************************************/
    /* Send ATR_REQ                                                                */
    /*******************************************************************************/
    
    EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 8012778:	4b35      	ldr	r3, [pc, #212]	; (8012850 <rfalNfcDepATR+0x1a8>)
 801277a:	785b      	ldrb	r3, [r3, #1]
 801277c:	2b01      	cmp	r3, #1
 801277e:	d101      	bne.n	8012784 <rfalNfcDepATR+0xdc>
 8012780:	4a34      	ldr	r2, [pc, #208]	; (8012854 <rfalNfcDepATR+0x1ac>)
 8012782:	e000      	b.n	8012786 <rfalNfcDepATR+0xde>
 8012784:	4a34      	ldr	r2, [pc, #208]	; (8012858 <rfalNfcDepATR+0x1b0>)
 8012786:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801278a:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 801278e:	9303      	str	r3, [sp, #12]
 8012790:	2341      	movs	r3, #65	; 0x41
 8012792:	9302      	str	r3, [sp, #8]
 8012794:	f107 0314 	add.w	r3, r7, #20
 8012798:	9301      	str	r3, [sp, #4]
 801279a:	2300      	movs	r3, #0
 801279c:	9300      	str	r3, [sp, #0]
 801279e:	2300      	movs	r3, #0
 80127a0:	2000      	movs	r0, #0
 80127a2:	f7fe fab5 	bl	8010d10 <nfcipTxRx>
 80127a6:	4603      	mov	r3, r0
 80127a8:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 80127ac:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d002      	beq.n	80127ba <rfalNfcDepATR+0x112>
 80127b4:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80127b8:	e046      	b.n	8012848 <rfalNfcDepATR+0x1a0>
    
    
    /*******************************************************************************/
    /* ATR sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 80127ba:	2300      	movs	r3, #0
 80127bc:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 80127c0:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 80127c4:	1c5a      	adds	r2, r3, #1
 80127c6:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 80127ca:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80127ce:	4413      	add	r3, r2
 80127d0:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 80127d4:	b29b      	uxth	r3, r3
 80127d6:	3b01      	subs	r3, #1
 80127d8:	b29b      	uxth	r3, r3
 80127da:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 80127de:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80127e2:	2b10      	cmp	r3, #16
 80127e4:	d903      	bls.n	80127ee <rfalNfcDepATR+0x146>
 80127e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80127ea:	2b40      	cmp	r3, #64	; 0x40
 80127ec:	d901      	bls.n	80127f2 <rfalNfcDepATR+0x14a>
    {
        return ERR_PROTO;
 80127ee:	230b      	movs	r3, #11
 80127f0:	e02a      	b.n	8012848 <rfalNfcDepATR+0x1a0>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                                                   /* Checking if is a response*/
 80127f2:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 80127f6:	1c5a      	adds	r2, r3, #1
 80127f8:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 80127fc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8012800:	4413      	add	r3, r2
 8012802:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8012806:	2bd5      	cmp	r3, #213	; 0xd5
 8012808:	d001      	beq.n	801280e <rfalNfcDepATR+0x166>
    {
        return ERR_PROTO;
 801280a:	230b      	movs	r3, #11
 801280c:	e01c      	b.n	8012848 <rfalNfcDepATR+0x1a0>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_RES )                                  /* Checking if is a ATR RES */
 801280e:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8012812:	1c5a      	adds	r2, r3, #1
 8012814:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 8012818:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801281c:	4413      	add	r3, r2
 801281e:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8012822:	2b01      	cmp	r3, #1
 8012824:	d001      	beq.n	801282a <rfalNfcDepATR+0x182>
    {
        return ERR_PROTO;
 8012826:	230b      	movs	r3, #11
 8012828:	e00e      	b.n	8012848 <rfalNfcDepATR+0x1a0>
    }
    
    ST_MEMCPY( (uint8_t*)atrRes, (rxBuf + RFAL_NFCDEP_LEN_LEN), rxLen );
 801282a:	f107 0314 	add.w	r3, r7, #20
 801282e:	3301      	adds	r3, #1
 8012830:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8012834:	4619      	mov	r1, r3
 8012836:	68b8      	ldr	r0, [r7, #8]
 8012838:	f006 fadd 	bl	8018df6 <memcpy>
    *atrResLen = (uint8_t)rxLen;
 801283c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8012840:	b2da      	uxtb	r2, r3
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8012846:	2300      	movs	r3, #0
}
 8012848:	4618      	mov	r0, r3
 801284a:	37f0      	adds	r7, #240	; 0xf0
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}
 8012850:	200034cc 	.word	0x200034cc
 8012854:	00200201 	.word	0x00200201
 8012858:	01000201 	.word	0x01000201

0801285c <rfalNfcDepPSL>:


/*******************************************************************************/
ReturnCode rfalNfcDepPSL( uint8_t BRS, uint8_t FSL )
{
 801285c:	b590      	push	{r4, r7, lr}
 801285e:	b08b      	sub	sp, #44	; 0x2c
 8012860:	af04      	add	r7, sp, #16
 8012862:	4603      	mov	r3, r0
 8012864:	460a      	mov	r2, r1
 8012866:	71fb      	strb	r3, [r7, #7]
 8012868:	4613      	mov	r3, r2
 801286a:	71bb      	strb	r3, [r7, #6]
    uint16_t   rxLen;
    uint8_t    msgIt;
    uint8_t    txBuf[NFCIP_PSLREQ_LEN + NFCIP_PSLPAY_LEN];
    uint8_t    rxBuf[NFCIP_PSLRES_LEN];
    
    msgIt = NFCIP_PSLREQ_LEN;
 801286c:	2304      	movs	r3, #4
 801286e:	75fb      	strb	r3, [r7, #23]
    
    txBuf[msgIt++] = BRS;
 8012870:	7dfb      	ldrb	r3, [r7, #23]
 8012872:	1c5a      	adds	r2, r3, #1
 8012874:	75fa      	strb	r2, [r7, #23]
 8012876:	f107 0218 	add.w	r2, r7, #24
 801287a:	4413      	add	r3, r2
 801287c:	79fa      	ldrb	r2, [r7, #7]
 801287e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    txBuf[msgIt++] = FSL;
 8012882:	7dfb      	ldrb	r3, [r7, #23]
 8012884:	1c5a      	adds	r2, r3, #1
 8012886:	75fa      	strb	r2, [r7, #23]
 8012888:	f107 0218 	add.w	r2, r7, #24
 801288c:	4413      	add	r3, r2
 801288e:	79ba      	ldrb	r2, [r7, #6]
 8012890:	f803 2c0c 	strb.w	r2, [r3, #-12]
    
    /*******************************************************************************/
    /* Send PSL REQ and wait for response                                          */
    /*******************************************************************************/
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, nfcipRWTActivation(), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 8012894:	4b2f      	ldr	r3, [pc, #188]	; (8012954 <rfalNfcDepPSL+0xf8>)
 8012896:	785b      	ldrb	r3, [r3, #1]
 8012898:	2b01      	cmp	r3, #1
 801289a:	d101      	bne.n	80128a0 <rfalNfcDepPSL+0x44>
 801289c:	482e      	ldr	r0, [pc, #184]	; (8012958 <rfalNfcDepPSL+0xfc>)
 801289e:	e000      	b.n	80128a2 <rfalNfcDepPSL+0x46>
 80128a0:	482e      	ldr	r0, [pc, #184]	; (801295c <rfalNfcDepPSL+0x100>)
 80128a2:	7dfb      	ldrb	r3, [r7, #23]
 80128a4:	3b04      	subs	r3, #4
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	f107 020c 	add.w	r2, r7, #12
 80128ac:	1d14      	adds	r4, r2, #4
 80128ae:	f107 010c 	add.w	r1, r7, #12
 80128b2:	f107 0212 	add.w	r2, r7, #18
 80128b6:	9203      	str	r2, [sp, #12]
 80128b8:	2204      	movs	r2, #4
 80128ba:	9202      	str	r2, [sp, #8]
 80128bc:	f107 0208 	add.w	r2, r7, #8
 80128c0:	9201      	str	r2, [sp, #4]
 80128c2:	9300      	str	r3, [sp, #0]
 80128c4:	4623      	mov	r3, r4
 80128c6:	4602      	mov	r2, r0
 80128c8:	2004      	movs	r0, #4
 80128ca:	f7fe fa21 	bl	8010d10 <nfcipTxRx>
 80128ce:	4603      	mov	r3, r0
 80128d0:	82bb      	strh	r3, [r7, #20]
 80128d2:	8abb      	ldrh	r3, [r7, #20]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d001      	beq.n	80128dc <rfalNfcDepPSL+0x80>
 80128d8:	8abb      	ldrh	r3, [r7, #20]
 80128da:	e037      	b.n	801294c <rfalNfcDepPSL+0xf0>
    
    
    /*******************************************************************************/
    /* PSL sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 80128dc:	2300      	movs	r3, #0
 80128de:	75fb      	strb	r3, [r7, #23]
    rxLen = (uint16_t)(rxBuf[msgIt++]);                /* use LEN byte                   */
 80128e0:	7dfb      	ldrb	r3, [r7, #23]
 80128e2:	1c5a      	adds	r2, r3, #1
 80128e4:	75fa      	strb	r2, [r7, #23]
 80128e6:	f107 0218 	add.w	r2, r7, #24
 80128ea:	4413      	add	r3, r2
 80128ec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80128f0:	b29b      	uxth	r3, r3
 80128f2:	827b      	strh	r3, [r7, #18]
        
    if( rxLen < NFCIP_PSLRES_LEN )                     /* Checking length: LEN + RLS_RES */
 80128f4:	8a7b      	ldrh	r3, [r7, #18]
 80128f6:	2b03      	cmp	r3, #3
 80128f8:	d801      	bhi.n	80128fe <rfalNfcDepPSL+0xa2>
    {
        return ERR_PROTO;
 80128fa:	230b      	movs	r3, #11
 80128fc:	e026      	b.n	801294c <rfalNfcDepPSL+0xf0>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                  /* Checking if is a response      */
 80128fe:	7dfb      	ldrb	r3, [r7, #23]
 8012900:	1c5a      	adds	r2, r3, #1
 8012902:	75fa      	strb	r2, [r7, #23]
 8012904:	f107 0218 	add.w	r2, r7, #24
 8012908:	4413      	add	r3, r2
 801290a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 801290e:	2bd5      	cmp	r3, #213	; 0xd5
 8012910:	d001      	beq.n	8012916 <rfalNfcDepPSL+0xba>
    {
        return ERR_PROTO;
 8012912:	230b      	movs	r3, #11
 8012914:	e01a      	b.n	801294c <rfalNfcDepPSL+0xf0>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_PSL_RES ) /* Checking if is a PSL RES       */
 8012916:	7dfb      	ldrb	r3, [r7, #23]
 8012918:	1c5a      	adds	r2, r3, #1
 801291a:	75fa      	strb	r2, [r7, #23]
 801291c:	f107 0218 	add.w	r2, r7, #24
 8012920:	4413      	add	r3, r2
 8012922:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8012926:	2b05      	cmp	r3, #5
 8012928:	d001      	beq.n	801292e <rfalNfcDepPSL+0xd2>
    {
        return ERR_PROTO;
 801292a:	230b      	movs	r3, #11
 801292c:	e00e      	b.n	801294c <rfalNfcDepPSL+0xf0>
    }
    
    if( rxBuf[msgIt++] != gNfcip.cfg.did )             /* Checking DID                   */
 801292e:	7dfb      	ldrb	r3, [r7, #23]
 8012930:	1c5a      	adds	r2, r3, #1
 8012932:	75fa      	strb	r2, [r7, #23]
 8012934:	f107 0218 	add.w	r2, r7, #24
 8012938:	4413      	add	r3, r2
 801293a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 801293e:	4b05      	ldr	r3, [pc, #20]	; (8012954 <rfalNfcDepPSL+0xf8>)
 8012940:	78db      	ldrb	r3, [r3, #3]
 8012942:	429a      	cmp	r2, r3
 8012944:	d001      	beq.n	801294a <rfalNfcDepPSL+0xee>
    {
        return ERR_PROTO;
 8012946:	230b      	movs	r3, #11
 8012948:	e000      	b.n	801294c <rfalNfcDepPSL+0xf0>
    }
    
    return ERR_NONE;
 801294a:	2300      	movs	r3, #0
}
 801294c:	4618      	mov	r0, r3
 801294e:	371c      	adds	r7, #28
 8012950:	46bd      	mov	sp, r7
 8012952:	bd90      	pop	{r4, r7, pc}
 8012954:	200034cc 	.word	0x200034cc
 8012958:	00200201 	.word	0x00200201
 801295c:	01000201 	.word	0x01000201

08012960 <rfalNfcDepRLS>:
}


/*******************************************************************************/
ReturnCode rfalNfcDepRLS( void )
{   
 8012960:	b580      	push	{r7, lr}
 8012962:	b08a      	sub	sp, #40	; 0x28
 8012964:	af04      	add	r7, sp, #16
    ReturnCode ret;
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_RLSREQ_LEN];
    uint8_t    rxBuf[NFCIP_RLSRES_LEN];    
    uint8_t    rxMsgIt;
    uint16_t   rxLen = 0;
 8012966:	2300      	movs	r3, #0
 8012968:	80fb      	strh	r3, [r7, #6]
    
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 801296a:	4b30      	ldr	r3, [pc, #192]	; (8012a2c <rfalNfcDepRLS+0xcc>)
 801296c:	781b      	ldrb	r3, [r3, #0]
 801296e:	2b01      	cmp	r3, #1
 8012970:	d101      	bne.n	8012976 <rfalNfcDepRLS+0x16>
    {
        return ERR_NONE;
 8012972:	2300      	movs	r3, #0
 8012974:	e055      	b.n	8012a22 <rfalNfcDepRLS+0xc2>
    }
        
    /* Repeating a RLS REQ is optional, not doing it */
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_RLS_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, RFAL_NFCDEP_ATRRES_MAX_LEN, &rxLen  ) );
 8012976:	4b2d      	ldr	r3, [pc, #180]	; (8012a2c <rfalNfcDepRLS+0xcc>)
 8012978:	785b      	ldrb	r3, [r3, #1]
 801297a:	2b01      	cmp	r3, #1
 801297c:	d101      	bne.n	8012982 <rfalNfcDepRLS+0x22>
 801297e:	4a2c      	ldr	r2, [pc, #176]	; (8012a30 <rfalNfcDepRLS+0xd0>)
 8012980:	e000      	b.n	8012984 <rfalNfcDepRLS+0x24>
 8012982:	4a2c      	ldr	r2, [pc, #176]	; (8012a34 <rfalNfcDepRLS+0xd4>)
 8012984:	f107 010c 	add.w	r1, r7, #12
 8012988:	1dbb      	adds	r3, r7, #6
 801298a:	9303      	str	r3, [sp, #12]
 801298c:	2340      	movs	r3, #64	; 0x40
 801298e:	9302      	str	r3, [sp, #8]
 8012990:	f107 0308 	add.w	r3, r7, #8
 8012994:	9301      	str	r3, [sp, #4]
 8012996:	2300      	movs	r3, #0
 8012998:	9300      	str	r3, [sp, #0]
 801299a:	2300      	movs	r3, #0
 801299c:	200a      	movs	r0, #10
 801299e:	f7fe f9b7 	bl	8010d10 <nfcipTxRx>
 80129a2:	4603      	mov	r3, r0
 80129a4:	82fb      	strh	r3, [r7, #22]
 80129a6:	8afb      	ldrh	r3, [r7, #22]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d001      	beq.n	80129b0 <rfalNfcDepRLS+0x50>
 80129ac:	8afb      	ldrh	r3, [r7, #22]
 80129ae:	e038      	b.n	8012a22 <rfalNfcDepRLS+0xc2>
    
    /*******************************************************************************/
    rxMsgIt = 0;
 80129b0:	2300      	movs	r3, #0
 80129b2:	757b      	strb	r3, [r7, #21]
       
    if( rxBuf[rxMsgIt++] < NFCIP_RLSRES_MIN )             /* Checking length: LEN + RLS_RES */
 80129b4:	7d7b      	ldrb	r3, [r7, #21]
 80129b6:	1c5a      	adds	r2, r3, #1
 80129b8:	757a      	strb	r2, [r7, #21]
 80129ba:	f107 0218 	add.w	r2, r7, #24
 80129be:	4413      	add	r3, r2
 80129c0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80129c4:	2b02      	cmp	r3, #2
 80129c6:	d801      	bhi.n	80129cc <rfalNfcDepRLS+0x6c>
    {
        return ERR_PROTO;
 80129c8:	230b      	movs	r3, #11
 80129ca:	e02a      	b.n	8012a22 <rfalNfcDepRLS+0xc2>
    }
        
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 80129cc:	7d7b      	ldrb	r3, [r7, #21]
 80129ce:	1c5a      	adds	r2, r3, #1
 80129d0:	757a      	strb	r2, [r7, #21]
 80129d2:	f107 0218 	add.w	r2, r7, #24
 80129d6:	4413      	add	r3, r2
 80129d8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80129dc:	2bd5      	cmp	r3, #213	; 0xd5
 80129de:	d001      	beq.n	80129e4 <rfalNfcDepRLS+0x84>
    {
        return ERR_PROTO;
 80129e0:	230b      	movs	r3, #11
 80129e2:	e01e      	b.n	8012a22 <rfalNfcDepRLS+0xc2>
    }
    
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_RLS_RES )  /* Checking if is RLS RES         */
 80129e4:	7d7b      	ldrb	r3, [r7, #21]
 80129e6:	1c5a      	adds	r2, r3, #1
 80129e8:	757a      	strb	r2, [r7, #21]
 80129ea:	f107 0218 	add.w	r2, r7, #24
 80129ee:	4413      	add	r3, r2
 80129f0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80129f4:	2b0b      	cmp	r3, #11
 80129f6:	d001      	beq.n	80129fc <rfalNfcDepRLS+0x9c>
    {
        return ERR_PROTO;
 80129f8:	230b      	movs	r3, #11
 80129fa:	e012      	b.n	8012a22 <rfalNfcDepRLS+0xc2>
    }
     
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 80129fc:	4b0b      	ldr	r3, [pc, #44]	; (8012a2c <rfalNfcDepRLS+0xcc>)
 80129fe:	78db      	ldrb	r3, [r3, #3]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d00d      	beq.n	8012a20 <rfalNfcDepRLS+0xc0>
    {
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 8012a04:	7d7b      	ldrb	r3, [r7, #21]
 8012a06:	1c5a      	adds	r2, r3, #1
 8012a08:	757a      	strb	r2, [r7, #21]
 8012a0a:	f107 0218 	add.w	r2, r7, #24
 8012a0e:	4413      	add	r3, r2
 8012a10:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8012a14:	4b05      	ldr	r3, [pc, #20]	; (8012a2c <rfalNfcDepRLS+0xcc>)
 8012a16:	78db      	ldrb	r3, [r3, #3]
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d001      	beq.n	8012a20 <rfalNfcDepRLS+0xc0>
        {
            return ERR_PROTO;
 8012a1c:	230b      	movs	r3, #11
 8012a1e:	e000      	b.n	8012a22 <rfalNfcDepRLS+0xc2>
        }
    }
    
    return ERR_NONE;
 8012a20:	2300      	movs	r3, #0
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3718      	adds	r7, #24
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}
 8012a2a:	bf00      	nop
 8012a2c:	200034cc 	.word	0x200034cc
 8012a30:	00200201 	.word	0x00200201
 8012a34:	01000201 	.word	0x01000201

08012a38 <rfalNfcDepInitiatorHandleActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepInitiatorHandleActivation( rfalNfcDepAtrParam* param, rfalBitRate desiredBR, rfalNfcDepDevice* nfcDepDev )
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b086      	sub	sp, #24
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	60f8      	str	r0, [r7, #12]
 8012a40:	460b      	mov	r3, r1
 8012a42:	607a      	str	r2, [r7, #4]
 8012a44:	72fb      	strb	r3, [r7, #11]
    uint8_t    maxRetyrs;
    uint8_t    PSL_BRS;
    uint8_t    PSL_FSL;
    bool       sendPSL;
    
    if( (param == NULL) || (nfcDepDev == NULL) )
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d002      	beq.n	8012a52 <rfalNfcDepInitiatorHandleActivation+0x1a>
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d101      	bne.n	8012a56 <rfalNfcDepInitiatorHandleActivation+0x1e>
    {
        return ERR_PARAM;
 8012a52:	2307      	movs	r3, #7
 8012a54:	e0da      	b.n	8012c0c <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    param->NAD = RFAL_NFCDEP_NAD_NO;          /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	2200      	movs	r2, #0
 8012a5a:	729a      	strb	r2, [r3, #10]
    maxRetyrs  = NFCIP_ATR_RETRY_MAX;
 8012a5c:	2302      	movs	r3, #2
 8012a5e:	75fb      	strb	r3, [r7, #23]
    /*******************************************************************************/
    /* Send ATR REQ and wait for response                                          */
    /*******************************************************************************/
    do{  /* Upon transmission error ATR REQ should be retried */
        
         ret = rfalNfcDepATR( param, &nfcDepDev->activation.Target.ATR_RES, &nfcDepDev->activation.Target.ATR_RESLen );
 8012a60:	6879      	ldr	r1, [r7, #4]
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	3341      	adds	r3, #65	; 0x41
 8012a66:	461a      	mov	r2, r3
 8012a68:	68f8      	ldr	r0, [r7, #12]
 8012a6a:	f7ff fe1d 	bl	80126a8 <rfalNfcDepATR>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	827b      	strh	r3, [r7, #18]
         
         if( nfcipIsTransmissionError(ret) )
 8012a72:	8a7b      	ldrh	r3, [r7, #18]
 8012a74:	2b15      	cmp	r3, #21
 8012a76:	d005      	beq.n	8012a84 <rfalNfcDepInitiatorHandleActivation+0x4c>
 8012a78:	8a7b      	ldrh	r3, [r7, #18]
 8012a7a:	2b09      	cmp	r3, #9
 8012a7c:	d002      	beq.n	8012a84 <rfalNfcDepInitiatorHandleActivation+0x4c>
 8012a7e:	8a7b      	ldrh	r3, [r7, #18]
 8012a80:	2b1b      	cmp	r3, #27
 8012a82:	d105      	bne.n	8012a90 <rfalNfcDepInitiatorHandleActivation+0x58>
         {
             continue;
         }
         break;
    }
    while( (maxRetyrs--) != 0U );
 8012a84:	7dfb      	ldrb	r3, [r7, #23]
 8012a86:	1e5a      	subs	r2, r3, #1
 8012a88:	75fa      	strb	r2, [r7, #23]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d1e8      	bne.n	8012a60 <rfalNfcDepInitiatorHandleActivation+0x28>
 8012a8e:	e000      	b.n	8012a92 <rfalNfcDepInitiatorHandleActivation+0x5a>
         break;
 8012a90:	bf00      	nop
    
    if( ret != ERR_NONE )
 8012a92:	8a7b      	ldrh	r3, [r7, #18]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d001      	beq.n	8012a9c <rfalNfcDepInitiatorHandleActivation+0x64>
    {
        return ret;
 8012a98:	8a7b      	ldrh	r3, [r7, #18]
 8012a9a:	e0b7      	b.n	8012c0c <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    /*******************************************************************************/
    /* Compute NFC-DEP device with ATR_RES                                         */
    /*******************************************************************************/
    nfcDepDev->info.GBLen = (nfcDepDev->activation.Target.ATR_RESLen - RFAL_NFCDEP_ATRRES_MIN_LEN);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012aa2:	3b11      	subs	r3, #17
 8012aa4:	b2da      	uxtb	r2, r3
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    nfcDepDev->info.DID   = nfcDepDev->activation.Target.ATR_RES.DID;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	7b1a      	ldrb	r2, [r3, #12]
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                                      /* Digital 1.1  16.6.3.11 Initiator SHALL ignore b1 of PPt */
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	7c1b      	ldrb	r3, [r3, #16]
 8012ac2:	091b      	lsrs	r3, r3, #4
 8012ac4:	b2db      	uxtb	r3, r3
 8012ac6:	f003 0303 	and.w	r3, r3, #3
 8012aca:	b2da      	uxtb	r2, r3
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012ad8:	3301      	adds	r3, #1
 8012ada:	019b      	lsls	r3, r3, #6
 8012adc:	2bfd      	cmp	r3, #253	; 0xfd
 8012ade:	d807      	bhi.n	8012af0 <rfalNfcDepInitiatorHandleActivation+0xb8>
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012ae6:	3301      	adds	r3, #1
 8012ae8:	b29b      	uxth	r3, r3
 8012aea:	019b      	lsls	r3, r3, #6
 8012aec:	b29a      	uxth	r2, r3
 8012aee:	e000      	b.n	8012af2 <rfalNfcDepInitiatorHandleActivation+0xba>
 8012af0:	22fe      	movs	r2, #254	; 0xfe
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    nfcDepDev->info.WT    = (nfcDepDev->activation.Target.ATR_RES.TO & RFAL_NFCDEP_WT_MASK);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	7bdb      	ldrb	r3, [r3, #15]
 8012afc:	f003 030f 	and.w	r3, r3, #15
 8012b00:	b2da      	uxtb	r2, r3
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    nfcDepDev->info.FWT   = rfalNfcDepCalculateRWT( nfcDepDev->info.WT );
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f000 f882 	bl	8012c18 <rfalNfcDepCalculateRWT>
 8012b14:	4602      	mov	r2, r0
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	649a      	str	r2, [r3, #72]	; 0x48
    nfcDepDev->info.dFWT  = RFAL_NFCDEP_WT_DELTA;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	220c      	movs	r2, #12
 8012b1e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	3355      	adds	r3, #85	; 0x55
 8012b2a:	4619      	mov	r1, r3
 8012b2c:	4610      	mov	r0, r2
 8012b2e:	f002 ff91 	bl	8015a54 <rfalGetBitRate>
    
    
    /*******************************************************************************/
    /* Check if a PSL needs to be sent                                                */
    /*******************************************************************************/
    sendPSL = false;
 8012b32:	2300      	movs	r3, #0
 8012b34:	757b      	strb	r3, [r7, #21]
    PSL_BRS = rfalNfcDepDx2BRS( nfcDepDev->info.DSI );  /* Set current bit rate divisor on both directions  */
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012b3c:	00db      	lsls	r3, r3, #3
 8012b3e:	b2db      	uxtb	r3, r3
 8012b40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012b44:	b2da      	uxtb	r2, r3
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012b4c:	f003 0307 	and.w	r3, r3, #7
 8012b50:	b2db      	uxtb	r3, r3
 8012b52:	4313      	orrs	r3, r2
 8012b54:	75bb      	strb	r3, [r7, #22]
    PSL_FSL = nfcDepDev->info.LR;                       /* Set current Frame Size                           */
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012b5c:	747b      	strb	r3, [r7, #17]
    
    
    /*******************************************************************************/
    /* Check Baud rates                                                            */
    /*******************************************************************************/
    if( nfcDepDev->info.DSI != desiredBR )    /* if desired BR is different    */
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012b64:	7afa      	ldrb	r2, [r7, #11]
 8012b66:	429a      	cmp	r2, r3
 8012b68:	d018      	beq.n	8012b9c <rfalNfcDepInitiatorHandleActivation+0x164>
    {
       /* || (target->brt != RFAL_NFCDEP_Bx_NO_HIGH_BR) || (target->bst != RFAL_NFCDEP_Bx_NO_HIGH_BR)  */  /* if target supports higher BR, must send PSL? */
        if( nfcipDxIsSupported( (uint8_t)desiredBR, nfcDepDev->activation.Target.ATR_RES.BRt, nfcDepDev->activation.Target.ATR_RES.BSt ) )  /* if desired BR is supported     */    /* MISRA 13.5 */
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	7b99      	ldrb	r1, [r3, #14]
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	7b5a      	ldrb	r2, [r3, #13]
 8012b72:	7afb      	ldrb	r3, [r7, #11]
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7fe f8a9 	bl	8010ccc <nfcipDxIsSupported>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d00d      	beq.n	8012b9c <rfalNfcDepInitiatorHandleActivation+0x164>
        {
            sendPSL = true;
 8012b80:	2301      	movs	r3, #1
 8012b82:	757b      	strb	r3, [r7, #21]
            PSL_BRS = rfalNfcDepDx2BRS( desiredBR );
 8012b84:	7afb      	ldrb	r3, [r7, #11]
 8012b86:	00db      	lsls	r3, r3, #3
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012b8e:	b2da      	uxtb	r2, r3
 8012b90:	7afb      	ldrb	r3, [r7, #11]
 8012b92:	f003 0307 	and.w	r3, r3, #7
 8012b96:	b2db      	uxtb	r3, r3
 8012b98:	4313      	orrs	r3, r2
 8012b9a:	75bb      	strb	r3, [r7, #22]
        }
    }

    
    /*******************************************************************************/
    if( sendPSL )
 8012b9c:	7d7b      	ldrb	r3, [r7, #21]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d033      	beq.n	8012c0a <rfalNfcDepInitiatorHandleActivation+0x1d2>
    {
        /*******************************************************************************/
        /* Send PSL REQ and wait for response                                          */
        /*******************************************************************************/
        EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 8012ba2:	7c7a      	ldrb	r2, [r7, #17]
 8012ba4:	7dbb      	ldrb	r3, [r7, #22]
 8012ba6:	4611      	mov	r1, r2
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f7ff fe57 	bl	801285c <rfalNfcDepPSL>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	827b      	strh	r3, [r7, #18]
 8012bb2:	8a7b      	ldrh	r3, [r7, #18]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d001      	beq.n	8012bbc <rfalNfcDepInitiatorHandleActivation+0x184>
 8012bb8:	8a7b      	ldrh	r3, [r7, #18]
 8012bba:	e027      	b.n	8012c0c <rfalNfcDepInitiatorHandleActivation+0x1d4>
        
        /* Check if bit rate has been changed */
        if( nfcDepDev->info.DSI != desiredBR )
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012bc2:	7afa      	ldrb	r2, [r7, #11]
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d01e      	beq.n	8012c06 <rfalNfcDepInitiatorHandleActivation+0x1ce>
        {
            /* Check if device was in Passive NFC-A and went to higher bit rates, use NFC-F */
            if( (nfcDepDev->info.DSI == RFAL_BR_106) && (gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_PASSIVE) )
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d107      	bne.n	8012be2 <rfalNfcDepInitiatorHandleActivation+0x1aa>
 8012bd2:	4b10      	ldr	r3, [pc, #64]	; (8012c14 <rfalNfcDepInitiatorHandleActivation+0x1dc>)
 8012bd4:	785b      	ldrb	r3, [r3, #1]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d103      	bne.n	8012be2 <rfalNfcDepInitiatorHandleActivation+0x1aa>
            {
                
            #if RFAL_FEATURE_NFCF 
                /* If Passive initialize NFC-F module */
                rfalNfcfPollerInitialize( desiredBR );
 8012bda:	7afb      	ldrb	r3, [r7, #11]
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f001 fa69 	bl	80140b4 <rfalNfcfPollerInitialize>
                return ERR_NOTSUPP;
            #endif /* RFAL_FEATURE_NFCF */
                
            }
            
            nfcDepDev->info.DRI  = desiredBR;  /* DSI Bit Rate coding from Initiator  to Target  */
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	7afa      	ldrb	r2, [r7, #11]
 8012be6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            nfcDepDev->info.DSI  = desiredBR;  /* DRI Bit Rate coding from Target to Initiator   */
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	7afa      	ldrb	r2, [r7, #11]
 8012bee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8012bfe:	4619      	mov	r1, r3
 8012c00:	4610      	mov	r0, r2
 8012c02:	f002 fcc5 	bl	8015590 <rfalSetBitRate>
        }
        
        
        return ERR_NONE;   /* PSL has been sent    */
 8012c06:	2300      	movs	r3, #0
 8012c08:	e000      	b.n	8012c0c <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    return ERR_NONE;       /* No PSL has been sent */
 8012c0a:	2300      	movs	r3, #0
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3718      	adds	r7, #24
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	200034cc 	.word	0x200034cc

08012c18 <rfalNfcDepCalculateRWT>:


/*******************************************************************************/
uint32_t rfalNfcDepCalculateRWT( uint8_t wt )
{
 8012c18:	b480      	push	{r7}
 8012c1a:	b085      	sub	sp, #20
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	4603      	mov	r3, r0
 8012c20:	71fb      	strb	r3, [r7, #7]
    /* Digital 1.0  14.6.3.8  &  Digital 1.1  16.6.3.9     */
    /* Digital 1.1  16.6.3.9 treat all RFU values as WT=14 */
    uint8_t responseWaitTime = MIN( RFAL_NFCDEP_WT_INI_MAX, wt );
 8012c22:	79fb      	ldrb	r3, [r7, #7]
 8012c24:	2b0e      	cmp	r3, #14
 8012c26:	bf28      	it	cs
 8012c28:	230e      	movcs	r3, #14
 8012c2a:	73fb      	strb	r3, [r7, #15]
        
    return (uint32_t)rfalNfcDepWT2RWT(responseWaitTime);
 8012c2c:	7bfb      	ldrb	r3, [r7, #15]
 8012c2e:	f003 030f 	and.w	r3, r3, #15
 8012c32:	330c      	adds	r3, #12
 8012c34:	2201      	movs	r2, #1
 8012c36:	fa02 f303 	lsl.w	r3, r2, r3
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3714      	adds	r7, #20
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bc80      	pop	{r7}
 8012c42:	4770      	bx	lr

08012c44 <nfcipDataTx>:



/*******************************************************************************/
static ReturnCode nfcipDataTx( uint8_t* txBuf, uint16_t txBufLen, uint32_t fwt )
{
 8012c44:	b590      	push	{r4, r7, lr}
 8012c46:	b089      	sub	sp, #36	; 0x24
 8012c48:	af04      	add	r7, sp, #16
 8012c4a:	60f8      	str	r0, [r7, #12]
 8012c4c:	460b      	mov	r3, r1
 8012c4e:	607a      	str	r2, [r7, #4]
 8012c50:	817b      	strh	r3, [r7, #10]
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 8012c52:	4b0b      	ldr	r3, [pc, #44]	; (8012c80 <nfcipDataTx+0x3c>)
 8012c54:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8012c56:	4b0a      	ldr	r3, [pc, #40]	; (8012c80 <nfcipDataTx+0x3c>)
 8012c58:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 8012c5c:	4b08      	ldr	r3, [pc, #32]	; (8012c80 <nfcipDataTx+0x3c>)
 8012c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c60:	8979      	ldrh	r1, [r7, #10]
 8012c62:	687a      	ldr	r2, [r7, #4]
 8012c64:	9202      	str	r2, [sp, #8]
 8012c66:	2204      	movs	r2, #4
 8012c68:	9201      	str	r2, [sp, #4]
 8012c6a:	9300      	str	r3, [sp, #0]
 8012c6c:	4623      	mov	r3, r4
 8012c6e:	4602      	mov	r2, r0
 8012c70:	68f8      	ldr	r0, [r7, #12]
 8012c72:	f003 f947 	bl	8015f04 <rfalTransceiveBlockingTx>
 8012c76:	4603      	mov	r3, r0
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3714      	adds	r7, #20
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd90      	pop	{r4, r7, pc}
 8012c80:	200034cc 	.word	0x200034cc

08012c84 <nfcipDataRx>:


/*******************************************************************************/
static ReturnCode nfcipDataRx( bool blocking )
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b084      	sub	sp, #16
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    /* Perform Rx either blocking or non-blocking */
    if( blocking )
 8012c8e:	79fb      	ldrb	r3, [r7, #7]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d004      	beq.n	8012c9e <nfcipDataRx+0x1a>
    {
        ret = rfalTransceiveBlockingRx();
 8012c94:	f003 f982 	bl	8015f9c <rfalTransceiveBlockingRx>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	81fb      	strh	r3, [r7, #14]
 8012c9c:	e003      	b.n	8012ca6 <nfcipDataRx+0x22>
    }
    else
    {
        ret = rfalGetTransceiveStatus();
 8012c9e:	f003 f9e7 	bl	8016070 <rfalGetTransceiveStatus>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	81fb      	strh	r3, [r7, #14]
    }
    
    if( ret != ERR_BUSY )
 8012ca6:	89fb      	ldrh	r3, [r7, #14]
 8012ca8:	2b02      	cmp	r3, #2
 8012caa:	d028      	beq.n	8012cfe <nfcipDataRx+0x7a>
    {
        if( gNfcip.rxRcvdLen != NULL )
 8012cac:	4b16      	ldr	r3, [pc, #88]	; (8012d08 <nfcipDataRx+0x84>)
 8012cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d024      	beq.n	8012cfe <nfcipDataRx+0x7a>
        {
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 8012cb4:	4b14      	ldr	r3, [pc, #80]	; (8012d08 <nfcipDataRx+0x84>)
 8012cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cb8:	881b      	ldrh	r3, [r3, #0]
 8012cba:	3307      	adds	r3, #7
 8012cbc:	08da      	lsrs	r2, r3, #3
 8012cbe:	4b12      	ldr	r3, [pc, #72]	; (8012d08 <nfcipDataRx+0x84>)
 8012cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cc2:	b292      	uxth	r2, r2
 8012cc4:	801a      	strh	r2, [r3, #0]
                        
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 8012cc6:	89fb      	ldrh	r3, [r7, #14]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d118      	bne.n	8012cfe <nfcipDataRx+0x7a>
 8012ccc:	4b0e      	ldr	r3, [pc, #56]	; (8012d08 <nfcipDataRx+0x84>)
 8012cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d014      	beq.n	8012cfe <nfcipDataRx+0x7a>
            {
                /* Digital 1.1  16.4.1.3 - Length byte LEN SHALL have a value between 3 and 255 -> otherwise treat as Transmission Error *
                 *                       - Ensure that actual received and frame length do match, otherwise treat as Transmission error  */
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 8012cd4:	4b0c      	ldr	r3, [pc, #48]	; (8012d08 <nfcipDataRx+0x84>)
 8012cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cd8:	881a      	ldrh	r2, [r3, #0]
 8012cda:	4b0b      	ldr	r3, [pc, #44]	; (8012d08 <nfcipDataRx+0x84>)
 8012cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	d109      	bne.n	8012cfa <nfcipDataRx+0x76>
 8012ce6:	4b08      	ldr	r3, [pc, #32]	; (8012d08 <nfcipDataRx+0x84>)
 8012ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cea:	881b      	ldrh	r3, [r3, #0]
 8012cec:	2b02      	cmp	r3, #2
 8012cee:	d904      	bls.n	8012cfa <nfcipDataRx+0x76>
 8012cf0:	4b05      	ldr	r3, [pc, #20]	; (8012d08 <nfcipDataRx+0x84>)
 8012cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cf4:	881b      	ldrh	r3, [r3, #0]
 8012cf6:	2bff      	cmp	r3, #255	; 0xff
 8012cf8:	d901      	bls.n	8012cfe <nfcipDataRx+0x7a>
                {
                    return ERR_FRAMING;
 8012cfa:	2309      	movs	r3, #9
 8012cfc:	e000      	b.n	8012d00 <nfcipDataRx+0x7c>
                }
            }
        }
    }
    
    return ret;
 8012cfe:	89fb      	ldrh	r3, [r7, #14]
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	3710      	adds	r7, #16
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}
 8012d08:	200034cc 	.word	0x200034cc

08012d0c <rfalNfcDepListenStartActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenStartActivation( const rfalNfcDepTargetParam *param, const uint8_t *atrReq, uint16_t atrReqLength, rfalNfcDepListenActvParam rxParam )
{
 8012d0c:	b082      	sub	sp, #8
 8012d0e:	b580      	push	{r7, lr}
 8012d10:	b09c      	sub	sp, #112	; 0x70
 8012d12:	af02      	add	r7, sp, #8
 8012d14:	60f8      	str	r0, [r7, #12]
 8012d16:	60b9      	str	r1, [r7, #8]
 8012d18:	677b      	str	r3, [r7, #116]	; 0x74
 8012d1a:	4613      	mov	r3, r2
 8012d1c:	80fb      	strh	r3, [r7, #6]
    ReturnCode        ret;
    rfalNfcDepConfigs cfg;
    
    
    if( (param == NULL) || (atrReq == NULL) || (rxParam.rxLen == NULL) )
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d005      	beq.n	8012d30 <rfalNfcDepListenStartActivation+0x24>
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d002      	beq.n	8012d30 <rfalNfcDepListenStartActivation+0x24>
 8012d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d101      	bne.n	8012d34 <rfalNfcDepListenStartActivation+0x28>
    {
        return ERR_PARAM;
 8012d30:	2307      	movs	r3, #7
 8012d32:	e0f4      	b.n	8012f1e <rfalNfcDepListenStartActivation+0x212>
    }
    
    
    /*******************************************************************************/
    /*  Check whether is a valid ATR_REQ Compute NFC-DEP device                    */
    if( !rfalNfcDepIsAtrReq( atrReq, atrReqLength, NULL ) )
 8012d34:	88fb      	ldrh	r3, [r7, #6]
 8012d36:	2200      	movs	r2, #0
 8012d38:	4619      	mov	r1, r3
 8012d3a:	68b8      	ldr	r0, [r7, #8]
 8012d3c:	f7ff fb84 	bl	8012448 <rfalNfcDepIsAtrReq>
 8012d40:	4603      	mov	r3, r0
 8012d42:	f083 0301 	eor.w	r3, r3, #1
 8012d46:	b2db      	uxtb	r3, r3
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d001      	beq.n	8012d50 <rfalNfcDepListenStartActivation+0x44>
    {
        return ERR_PARAM;
 8012d4c:	2307      	movs	r3, #7
 8012d4e:	e0e6      	b.n	8012f1e <rfalNfcDepListenStartActivation+0x212>
    }
    
    rxParam.nfcDepDev->activation.Initiator.ATR_REQLen = (uint8_t)atrReqLength;                   /* nfcipIsAtrReq() is already checking Min and Max buffer lengths */ 
 8012d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d54:	88fa      	ldrh	r2, [r7, #6]
 8012d56:	b2d2      	uxtb	r2, r2
 8012d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if( atrReqLength > 0U )                                                                       /* MISRA 21.18 */
 8012d5c:	88fb      	ldrh	r3, [r7, #6]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d007      	beq.n	8012d72 <rfalNfcDepListenStartActivation+0x66>
    {
        ST_MEMCPY( (uint8_t*)&rxParam.nfcDepDev->activation.Initiator.ATR_REQ, atrReq, atrReqLength );
 8012d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d66:	4618      	mov	r0, r3
 8012d68:	88fb      	ldrh	r3, [r7, #6]
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	68b9      	ldr	r1, [r7, #8]
 8012d6e:	f006 f842 	bl	8018df6 <memcpy>
    }        
    
    rxParam.nfcDepDev->info.GBLen = (uint8_t)(atrReqLength - RFAL_NFCDEP_ATRREQ_MIN_LEN);
 8012d72:	88fb      	ldrh	r3, [r7, #6]
 8012d74:	b2da      	uxtb	r2, r3
 8012d76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d7a:	3a10      	subs	r2, #16
 8012d7c:	b2d2      	uxtb	r2, r2
 8012d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    rxParam.nfcDepDev->info.DID   = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 8012d82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012d86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d8a:	7b12      	ldrb	r2, [r2, #12]
 8012d8c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    rxParam.nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                        /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 8012d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d94:	2200      	movs	r2, #0
 8012d96:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    rxParam.nfcDepDev->info.LR    = rfalNfcDepPP2LR( rxParam.nfcDepDev->activation.Initiator.ATR_REQ.PPi );
 8012d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d9e:	7bdb      	ldrb	r3, [r3, #15]
 8012da0:	091b      	lsrs	r3, r3, #4
 8012da2:	b2da      	uxtb	r2, r3
 8012da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012da8:	f002 0203 	and.w	r2, r2, #3
 8012dac:	b2d2      	uxtb	r2, r2
 8012dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    rxParam.nfcDepDev->info.FS    = rfalNfcDepLR2FS( rxParam.nfcDepDev->info.LR );
 8012db2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012db6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012dba:	3301      	adds	r3, #1
 8012dbc:	019b      	lsls	r3, r3, #6
 8012dbe:	2bfd      	cmp	r3, #253	; 0xfd
 8012dc0:	d808      	bhi.n	8012dd4 <rfalNfcDepListenStartActivation+0xc8>
 8012dc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012dca:	3301      	adds	r3, #1
 8012dcc:	b29b      	uxth	r3, r3
 8012dce:	019b      	lsls	r3, r3, #6
 8012dd0:	b29a      	uxth	r2, r3
 8012dd2:	e000      	b.n	8012dd6 <rfalNfcDepListenStartActivation+0xca>
 8012dd4:	22fe      	movs	r2, #254	; 0xfe
 8012dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012dda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    rxParam.nfcDepDev->info.WT    = 0;
 8012dde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012de2:	2200      	movs	r2, #0
 8012de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    rxParam.nfcDepDev->info.FWT   = NFCIP_NO_FWT;
 8012de8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012dec:	f04f 32ff 	mov.w	r2, #4294967295
 8012df0:	649a      	str	r2, [r3, #72]	; 0x48
    rxParam.nfcDepDev->info.dFWT  = NFCIP_NO_FWT;
 8012df2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012df6:	f04f 32ff 	mov.w	r2, #4294967295
 8012dfa:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &rxParam.nfcDepDev->info.DSI, &rxParam.nfcDepDev->info.DRI );
 8012dfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012e00:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8012e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012e08:	3355      	adds	r3, #85	; 0x55
 8012e0a:	4619      	mov	r1, r3
 8012e0c:	4610      	mov	r0, r2
 8012e0e:	f002 fe21 	bl	8015a54 <rfalGetBitRate>
    
    
    /* Store Device Info location, updated upon a PSL  */
    gNfcip.nfcDepDev = rxParam.nfcDepDev;
 8012e12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012e16:	4a45      	ldr	r2, [pc, #276]	; (8012f2c <rfalNfcDepListenStartActivation+0x220>)
 8012e18:	6793      	str	r3, [r2, #120]	; 0x78
    
    
    /*******************************************************************************/
    cfg.did = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 8012e1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012e1e:	7b1b      	ldrb	r3, [r3, #12]
 8012e20:	75fb      	strb	r3, [r7, #23]
    cfg.nad = RFAL_NFCDEP_NAD_NO;
 8012e22:	2300      	movs	r3, #0
 8012e24:	763b      	strb	r3, [r7, #24]
    
    cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 8012e26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 8012e2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012e30:	663b      	str	r3, [r7, #96]	; 0x60

    cfg.br = param->brt;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	7b1b      	ldrb	r3, [r3, #12]
 8012e36:	76bb      	strb	r3, [r7, #26]
    cfg.bs = param->bst;
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	7adb      	ldrb	r3, [r3, #11]
 8012e3c:	767b      	strb	r3, [r7, #25]
    
    cfg.lr = rfalNfcDepPP2LR(param->ppt);
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	7b9b      	ldrb	r3, [r3, #14]
 8012e42:	091b      	lsrs	r3, r3, #4
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	f003 0303 	and.w	r3, r3, #3
 8012e4a:	b2db      	uxtb	r3, r3
 8012e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    cfg.gbLen = param->GBtLen;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012e56:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    if( cfg.gbLen > 0U )          /* MISRA 21.18 */
 8012e5a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d00b      	beq.n	8012e7a <rfalNfcDepListenStartActivation+0x16e>
    {
        ST_MEMCPY(cfg.gb, param->GBt, cfg.gbLen);
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	f103 010f 	add.w	r1, r3, #15
 8012e68:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012e6c:	461a      	mov	r2, r3
 8012e6e:	f107 0314 	add.w	r3, r7, #20
 8012e72:	3312      	adds	r3, #18
 8012e74:	4618      	mov	r0, r3
 8012e76:	f005 ffbe 	bl	8018df6 <memcpy>
    }
    
    cfg.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8012e7a:	230a      	movs	r3, #10
 8012e7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    ST_MEMCPY(cfg.nfcid, param->nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	1c5a      	adds	r2, r3, #1
 8012e84:	f107 031b 	add.w	r3, r7, #27
 8012e88:	6810      	ldr	r0, [r2, #0]
 8012e8a:	6851      	ldr	r1, [r2, #4]
 8012e8c:	6018      	str	r0, [r3, #0]
 8012e8e:	6059      	str	r1, [r3, #4]
 8012e90:	8912      	ldrh	r2, [r2, #8]
 8012e92:	811a      	strh	r2, [r3, #8]

    cfg.to = param->to;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	7b5b      	ldrb	r3, [r3, #13]
 8012e98:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
    
    cfg.role     = RFAL_NFCDEP_ROLE_TARGET;
 8012e9c:	2301      	movs	r3, #1
 8012e9e:	753b      	strb	r3, [r7, #20]
    cfg.oper     = param->operParam;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012ea6:	75bb      	strb	r3, [r7, #22]
    cfg.commMode = param->commMode;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	781b      	ldrb	r3, [r3, #0]
 8012eac:	757b      	strb	r3, [r7, #21]

    rfalNfcDepInitialize();
 8012eae:	f7ff fa0d 	bl	80122cc <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 8012eb2:	f107 0314 	add.w	r3, r7, #20
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7ff f894 	bl	8011fe4 <nfcipConfig>
        
    
    /*******************************************************************************/
    /*  Reply with ATR RES to Initiator                                            */
    /*******************************************************************************/
    gNfcip.rxBuf        = (uint8_t*)rxParam.rxBuf;
 8012ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ebe:	4a1b      	ldr	r2, [pc, #108]	; (8012f2c <rfalNfcDepListenStartActivation+0x220>)
 8012ec0:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 8012ec2:	4b1a      	ldr	r3, [pc, #104]	; (8012f2c <rfalNfcDepListenStartActivation+0x220>)
 8012ec4:	f240 1203 	movw	r2, #259	; 0x103
 8012ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    gNfcip.rxRcvdLen    = rxParam.rxLen;
 8012ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ece:	4a17      	ldr	r2, [pc, #92]	; (8012f2c <rfalNfcDepListenStartActivation+0x220>)
 8012ed0:	66d3      	str	r3, [r2, #108]	; 0x6c
    gNfcip.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 8012ed2:	4b16      	ldr	r3, [pc, #88]	; (8012f2c <rfalNfcDepListenStartActivation+0x220>)
 8012ed4:	2205      	movs	r2, #5
 8012ed6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    gNfcip.isChaining   = rxParam.isRxChaining;
 8012eda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012edc:	4a13      	ldr	r2, [pc, #76]	; (8012f2c <rfalNfcDepListenStartActivation+0x220>)
 8012ede:	6753      	str	r3, [r2, #116]	; 0x74
    gNfcip.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 8012ee0:	4b12      	ldr	r3, [pc, #72]	; (8012f2c <rfalNfcDepListenStartActivation+0x220>)
 8012ee2:	2205      	movs	r2, #5
 8012ee4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
   
    EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_ATR_RES, (uint8_t*) gNfcip.rxBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 8012ee8:	4b10      	ldr	r3, [pc, #64]	; (8012f2c <rfalNfcDepListenStartActivation+0x220>)
 8012eea:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8012eec:	f04f 33ff 	mov.w	r3, #4294967295
 8012ef0:	9301      	str	r3, [sp, #4]
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	9300      	str	r3, [sp, #0]
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	2200      	movs	r2, #0
 8012efa:	2001      	movs	r0, #1
 8012efc:	f7fe fee6 	bl	8011ccc <nfcipTx>
 8012f00:	4603      	mov	r3, r0
 8012f02:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8012f06:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d002      	beq.n	8012f14 <rfalNfcDepListenStartActivation+0x208>
 8012f0e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8012f12:	e004      	b.n	8012f1e <rfalNfcDepListenStartActivation+0x212>
    
    gNfcip.state = NFCIP_ST_TARG_WAIT_ACTV;
 8012f14:	4b05      	ldr	r3, [pc, #20]	; (8012f2c <rfalNfcDepListenStartActivation+0x220>)
 8012f16:	220b      	movs	r2, #11
 8012f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    return ERR_NONE;
 8012f1c:	2300      	movs	r3, #0
}
 8012f1e:	4618      	mov	r0, r3
 8012f20:	3768      	adds	r7, #104	; 0x68
 8012f22:	46bd      	mov	sp, r7
 8012f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012f28:	b002      	add	sp, #8
 8012f2a:	4770      	bx	lr
 8012f2c:	200034cc 	.word	0x200034cc

08012f30 <rfalNfcDepListenGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenGetActivationStatus( void )
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b086      	sub	sp, #24
 8012f34:	af04      	add	r7, sp, #16
    ReturnCode err;
    uint8_t    BRS;
    
    BRS = RFAL_NFCDEP_BRS_MAINTAIN;
 8012f36:	23c0      	movs	r3, #192	; 0xc0
 8012f38:	717b      	strb	r3, [r7, #5]
    
    err = nfcipTargetHandleActivation( gNfcip.nfcDepDev, &BRS );
 8012f3a:	4b30      	ldr	r3, [pc, #192]	; (8012ffc <rfalNfcDepListenGetActivationStatus+0xcc>)
 8012f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f3e:	1d7a      	adds	r2, r7, #5
 8012f40:	4611      	mov	r1, r2
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7ff fab6 	bl	80124b4 <nfcipTargetHandleActivation>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	80fb      	strh	r3, [r7, #6]
    
    switch (err)
 8012f4c:	88fb      	ldrh	r3, [r7, #6]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d002      	beq.n	8012f58 <rfalNfcDepListenGetActivationStatus+0x28>
 8012f52:	2b02      	cmp	r3, #2
 8012f54:	d049      	beq.n	8012fea <rfalNfcDepListenGetActivationStatus+0xba>
 8012f56:	e034      	b.n	8012fc2 <rfalNfcDepListenGetActivationStatus+0x92>
    {
        case ERR_NONE:
            
            if( BRS != RFAL_NFCDEP_BRS_MAINTAIN )
 8012f58:	797b      	ldrb	r3, [r7, #5]
 8012f5a:	2bc0      	cmp	r3, #192	; 0xc0
 8012f5c:	d047      	beq.n	8012fee <rfalNfcDepListenGetActivationStatus+0xbe>
            {
                /* DSI codes the bit rate from Initiator to Target */
                /* DRI codes the bit rate from Target to Initiator */
                
                if( gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_ACTIVE )
 8012f5e:	4b27      	ldr	r3, [pc, #156]	; (8012ffc <rfalNfcDepListenGetActivationStatus+0xcc>)
 8012f60:	785b      	ldrb	r3, [r3, #1]
 8012f62:	2b01      	cmp	r3, #1
 8012f64:	d112      	bne.n	8012f8c <rfalNfcDepListenGetActivationStatus+0x5c>
                {
                    EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_LISTEN_ACTIVE_P2P, gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 8012f66:	4b25      	ldr	r3, [pc, #148]	; (8012ffc <rfalNfcDepListenGetActivationStatus+0xcc>)
 8012f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f6a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 8012f6e:	4b23      	ldr	r3, [pc, #140]	; (8012ffc <rfalNfcDepListenGetActivationStatus+0xcc>)
 8012f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f72:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012f76:	461a      	mov	r2, r3
 8012f78:	200d      	movs	r0, #13
 8012f7a:	f002 f9f7 	bl	801536c <rfalSetMode>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	80fb      	strh	r3, [r7, #6]
 8012f82:	88fb      	ldrh	r3, [r7, #6]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d032      	beq.n	8012fee <rfalNfcDepListenGetActivationStatus+0xbe>
 8012f88:	88fb      	ldrh	r3, [r7, #6]
 8012f8a:	e032      	b.n	8012ff2 <rfalNfcDepListenGetActivationStatus+0xc2>
                }
                else
                {
                    EXIT_ON_ERR( err, rfalSetMode( ((RFAL_BR_106 == gNfcip.nfcDepDev->info.DRI) ? RFAL_MODE_LISTEN_NFCA : RFAL_MODE_LISTEN_NFCF), gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 8012f8c:	4b1b      	ldr	r3, [pc, #108]	; (8012ffc <rfalNfcDepListenGetActivationStatus+0xcc>)
 8012f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f90:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d101      	bne.n	8012f9c <rfalNfcDepListenGetActivationStatus+0x6c>
 8012f98:	200a      	movs	r0, #10
 8012f9a:	e000      	b.n	8012f9e <rfalNfcDepListenGetActivationStatus+0x6e>
 8012f9c:	200c      	movs	r0, #12
 8012f9e:	4b17      	ldr	r3, [pc, #92]	; (8012ffc <rfalNfcDepListenGetActivationStatus+0xcc>)
 8012fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012fa2:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 8012fa6:	4b15      	ldr	r3, [pc, #84]	; (8012ffc <rfalNfcDepListenGetActivationStatus+0xcc>)
 8012fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012faa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012fae:	461a      	mov	r2, r3
 8012fb0:	f002 f9dc 	bl	801536c <rfalSetMode>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	80fb      	strh	r3, [r7, #6]
 8012fb8:	88fb      	ldrh	r3, [r7, #6]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d017      	beq.n	8012fee <rfalNfcDepListenGetActivationStatus+0xbe>
 8012fbe:	88fb      	ldrh	r3, [r7, #6]
 8012fc0:	e017      	b.n	8012ff2 <rfalNfcDepListenGetActivationStatus+0xc2>
            break;
            
        case ERR_PROTO:
        default:
            // re-enable receiving of data
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8012fc2:	4b0e      	ldr	r3, [pc, #56]	; (8012ffc <rfalNfcDepListenGetActivationStatus+0xcc>)
 8012fc4:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8012fc6:	4b0d      	ldr	r3, [pc, #52]	; (8012ffc <rfalNfcDepListenGetActivationStatus+0xcc>)
 8012fc8:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 8012fcc:	4b0b      	ldr	r3, [pc, #44]	; (8012ffc <rfalNfcDepListenGetActivationStatus+0xcc>)
 8012fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8012fd4:	9202      	str	r2, [sp, #8]
 8012fd6:	2204      	movs	r2, #4
 8012fd8:	9201      	str	r2, [sp, #4]
 8012fda:	9300      	str	r3, [sp, #0]
 8012fdc:	4603      	mov	r3, r0
 8012fde:	460a      	mov	r2, r1
 8012fe0:	2100      	movs	r1, #0
 8012fe2:	2000      	movs	r0, #0
 8012fe4:	f002 ff8e 	bl	8015f04 <rfalTransceiveBlockingTx>
            break;
 8012fe8:	e002      	b.n	8012ff0 <rfalNfcDepListenGetActivationStatus+0xc0>
            break;
 8012fea:	bf00      	nop
 8012fec:	e000      	b.n	8012ff0 <rfalNfcDepListenGetActivationStatus+0xc0>
            break;
 8012fee:	bf00      	nop
    } // if (no err)
    
    return err;
 8012ff0:	88fb      	ldrh	r3, [r7, #6]
}
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	3708      	adds	r7, #8
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	200034cc 	.word	0x200034cc

08013000 <rfalNfcDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalNfcDepStartTransceive( rfalNfcDepTxRxParam *param )
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b08a      	sub	sp, #40	; 0x28
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
    rfalNfcDepDEPParams nfcDepParams;
    
    nfcDepParams.txBuf        = (uint8_t *)param->txBuf;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	60fb      	str	r3, [r7, #12]
    nfcDepParams.txBufLen     = param->txBufLen;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	889b      	ldrh	r3, [r3, #4]
 8013012:	823b      	strh	r3, [r7, #16]
    nfcDepParams.txChaining   = param->isTxChaining;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	799b      	ldrb	r3, [r3, #6]
 8013018:	74fb      	strb	r3, [r7, #19]
    nfcDepParams.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;  /* position in txBuf where actual outgoing data is located */
 801301a:	2305      	movs	r3, #5
 801301c:	74bb      	strb	r3, [r7, #18]
    nfcDepParams.did          = RFAL_NFCDEP_DID_KEEP;
 801301e:	23ff      	movs	r3, #255	; 0xff
 8013020:	723b      	strb	r3, [r7, #8]
    nfcDepParams.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 8013022:	2305      	movs	r3, #5
 8013024:	76bb      	strb	r3, [r7, #26]
    nfcDepParams.rxBuf        = (uint8_t *)param->rxBuf;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	689b      	ldr	r3, [r3, #8]
 801302a:	617b      	str	r3, [r7, #20]
    nfcDepParams.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 801302c:	f240 1303 	movw	r3, #259	; 0x103
 8013030:	833b      	strh	r3, [r7, #24]
    nfcDepParams.fsc          = param->FSx;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	8b9b      	ldrh	r3, [r3, #28]
 8013036:	84bb      	strh	r3, [r7, #36]	; 0x24
    nfcDepParams.fwt          = param->FWT;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	695b      	ldr	r3, [r3, #20]
 801303c:	61fb      	str	r3, [r7, #28]
    nfcDepParams.dFwt         = param->dFWT;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	699b      	ldr	r3, [r3, #24]
 8013042:	623b      	str	r3, [r7, #32]

    gNfcip.rxRcvdLen          = param->rxLen;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	68db      	ldr	r3, [r3, #12]
 8013048:	4a07      	ldr	r2, [pc, #28]	; (8013068 <rfalNfcDepStartTransceive+0x68>)
 801304a:	66d3      	str	r3, [r2, #108]	; 0x6c
    gNfcip.isChaining         = param->isRxChaining;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	691b      	ldr	r3, [r3, #16]
 8013050:	4a05      	ldr	r2, [pc, #20]	; (8013068 <rfalNfcDepStartTransceive+0x68>)
 8013052:	6753      	str	r3, [r2, #116]	; 0x74

    nfcipSetDEPParams(&nfcDepParams);
 8013054:	f107 0308 	add.w	r3, r7, #8
 8013058:	4618      	mov	r0, r3
 801305a:	f7ff f98d 	bl	8012378 <nfcipSetDEPParams>
    
    return ERR_NONE;
 801305e:	2300      	movs	r3, #0
}
 8013060:	4618      	mov	r0, r3
 8013062:	3728      	adds	r7, #40	; 0x28
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}
 8013068:	200034cc 	.word	0x200034cc

0801306c <rfalNfcDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepGetTransceiveStatus( void )
{
 801306c:	b580      	push	{r7, lr}
 801306e:	af00      	add	r7, sp, #0
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 8013070:	4b05      	ldr	r3, [pc, #20]	; (8013088 <rfalNfcDepGetTransceiveStatus+0x1c>)
 8013072:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013074:	4b04      	ldr	r3, [pc, #16]	; (8013088 <rfalNfcDepGetTransceiveStatus+0x1c>)
 8013076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013078:	4619      	mov	r1, r3
 801307a:	4610      	mov	r0, r2
 801307c:	f7fe fff4 	bl	8012068 <nfcipRun>
 8013080:	4603      	mov	r3, r0
}
 8013082:	4618      	mov	r0, r3
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	200034cc 	.word	0x200034cc

0801308c <rfalNfcaCalculateBcc>:
 * LOCAL FUNCTIONS
 ******************************************************************************
 */

static uint8_t rfalNfcaCalculateBcc( const uint8_t* buf, uint8_t bufLen )
{
 801308c:	b480      	push	{r7}
 801308e:	b085      	sub	sp, #20
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	460b      	mov	r3, r1
 8013096:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint8_t BCC;
    
    BCC = 0;
 8013098:	2300      	movs	r3, #0
 801309a:	73bb      	strb	r3, [r7, #14]
    
    /* BCC is XOR over first 4 bytes of the SDD_RES  Digital 1.1 6.7.2 */
    for(i = 0; i < bufLen; i++)
 801309c:	2300      	movs	r3, #0
 801309e:	73fb      	strb	r3, [r7, #15]
 80130a0:	e009      	b.n	80130b6 <rfalNfcaCalculateBcc+0x2a>
    {
        BCC ^= buf[i];
 80130a2:	7bfb      	ldrb	r3, [r7, #15]
 80130a4:	687a      	ldr	r2, [r7, #4]
 80130a6:	4413      	add	r3, r2
 80130a8:	781a      	ldrb	r2, [r3, #0]
 80130aa:	7bbb      	ldrb	r3, [r7, #14]
 80130ac:	4053      	eors	r3, r2
 80130ae:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < bufLen; i++)
 80130b0:	7bfb      	ldrb	r3, [r7, #15]
 80130b2:	3301      	adds	r3, #1
 80130b4:	73fb      	strb	r3, [r7, #15]
 80130b6:	7bfa      	ldrb	r2, [r7, #15]
 80130b8:	78fb      	ldrb	r3, [r7, #3]
 80130ba:	429a      	cmp	r2, r3
 80130bc:	d3f1      	bcc.n	80130a2 <rfalNfcaCalculateBcc+0x16>
    }
    
    return BCC;
 80130be:	7bbb      	ldrb	r3, [r7, #14]
}
 80130c0:	4618      	mov	r0, r3
 80130c2:	3714      	adds	r7, #20
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bc80      	pop	{r7}
 80130c8:	4770      	bx	lr
	...

080130cc <rfalNfcaPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcaPollerInitialize( void )
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b082      	sub	sp, #8
 80130d0:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 80130d2:	2200      	movs	r2, #0
 80130d4:	2100      	movs	r1, #0
 80130d6:	2001      	movs	r0, #1
 80130d8:	f002 f948 	bl	801536c <rfalSetMode>
 80130dc:	4603      	mov	r3, r0
 80130de:	80fb      	strh	r3, [r7, #6]
 80130e0:	88fb      	ldrh	r3, [r7, #6]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d001      	beq.n	80130ea <rfalNfcaPollerInitialize+0x1e>
 80130e6:	88fb      	ldrh	r3, [r7, #6]
 80130e8:	e00e      	b.n	8013108 <rfalNfcaPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 80130ea:	2001      	movs	r0, #1
 80130ec:	f002 fcd8 	bl	8015aa0 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCA );
 80130f0:	4807      	ldr	r0, [pc, #28]	; (8013110 <rfalNfcaPollerInitialize+0x44>)
 80130f2:	f002 fd0d 	bl	8015b10 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );
 80130f6:	f240 4094 	movw	r0, #1172	; 0x494
 80130fa:	f002 fcf5 	bl	8015ae8 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_POLLER );
 80130fe:	f641 207c 	movw	r0, #6780	; 0x1a7c
 8013102:	f002 fcdd 	bl	8015ac0 <rfalSetFDTPoll>
    
    return ERR_NONE;
 8013106:	2300      	movs	r3, #0
}
 8013108:	4618      	mov	r0, r3
 801310a:	3708      	adds	r7, #8
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}
 8013110:	000108d8 	.word	0x000108d8

08013114 <rfalNfcaPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerCheckPresence( rfal14443AShortFrameCmd cmd, rfalNfcaSensRes *sensRes )
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b086      	sub	sp, #24
 8013118:	af02      	add	r7, sp, #8
 801311a:	4603      	mov	r3, r0
 801311c:	6039      	str	r1, [r7, #0]
 801311e:	71fb      	strb	r3, [r7, #7]
    uint16_t   rcvLen;
    
    /* Digital 1.1 6.10.1.3  For Commands ALL_REQ, SENS_REQ, SDD_REQ, and SEL_REQ, the NFC Forum Device      *
     *              MUST treat receipt of a Listen Frame at a time after FDT(Listen, min) as a Timeour Error */
    
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 8013120:	f107 020c 	add.w	r2, r7, #12
 8013124:	79f8      	ldrb	r0, [r7, #7]
 8013126:	f240 6354 	movw	r3, #1620	; 0x654
 801312a:	9300      	str	r3, [sp, #0]
 801312c:	4613      	mov	r3, r2
 801312e:	2210      	movs	r2, #16
 8013130:	6839      	ldr	r1, [r7, #0]
 8013132:	f003 fee9 	bl	8016f08 <rfalISO14443ATransceiveShortFrame>
 8013136:	4603      	mov	r3, r0
 8013138:	81fb      	strh	r3, [r7, #14]
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || (ret == ERR_NOMEM) || (ret == ERR_FRAMING) || (ret == ERR_PAR) )
 801313a:	89fb      	ldrh	r3, [r7, #14]
 801313c:	2b1d      	cmp	r3, #29
 801313e:	d00b      	beq.n	8013158 <rfalNfcaPollerCheckPresence+0x44>
 8013140:	89fb      	ldrh	r3, [r7, #14]
 8013142:	2b15      	cmp	r3, #21
 8013144:	d008      	beq.n	8013158 <rfalNfcaPollerCheckPresence+0x44>
 8013146:	89fb      	ldrh	r3, [r7, #14]
 8013148:	2b01      	cmp	r3, #1
 801314a:	d005      	beq.n	8013158 <rfalNfcaPollerCheckPresence+0x44>
 801314c:	89fb      	ldrh	r3, [r7, #14]
 801314e:	2b09      	cmp	r3, #9
 8013150:	d002      	beq.n	8013158 <rfalNfcaPollerCheckPresence+0x44>
 8013152:	89fb      	ldrh	r3, [r7, #14]
 8013154:	2b1b      	cmp	r3, #27
 8013156:	d101      	bne.n	801315c <rfalNfcaPollerCheckPresence+0x48>
    {
       ret = ERR_NONE;
 8013158:	2300      	movs	r3, #0
 801315a:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 801315c:	89fb      	ldrh	r3, [r7, #14]
}
 801315e:	4618      	mov	r0, r3
 8013160:	3710      	adds	r7, #16
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <rfalNfcaPollerTechnologyDetection>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcaSensRes *sensRes )
{
 8013166:	b580      	push	{r7, lr}
 8013168:	b084      	sub	sp, #16
 801316a:	af00      	add	r7, sp, #0
 801316c:	4603      	mov	r3, r0
 801316e:	6039      	str	r1, [r7, #0]
 8013170:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes ) );
 8013172:	79fb      	ldrb	r3, [r7, #7]
 8013174:	2b01      	cmp	r3, #1
 8013176:	d101      	bne.n	801317c <rfalNfcaPollerTechnologyDetection+0x16>
 8013178:	2352      	movs	r3, #82	; 0x52
 801317a:	e000      	b.n	801317e <rfalNfcaPollerTechnologyDetection+0x18>
 801317c:	2326      	movs	r3, #38	; 0x26
 801317e:	6839      	ldr	r1, [r7, #0]
 8013180:	4618      	mov	r0, r3
 8013182:	f7ff ffc7 	bl	8013114 <rfalNfcaPollerCheckPresence>
 8013186:	4603      	mov	r3, r0
 8013188:	81fb      	strh	r3, [r7, #14]
 801318a:	89fb      	ldrh	r3, [r7, #14]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d001      	beq.n	8013194 <rfalNfcaPollerTechnologyDetection+0x2e>
 8013190:	89fb      	ldrh	r3, [r7, #14]
 8013192:	e005      	b.n	80131a0 <rfalNfcaPollerTechnologyDetection+0x3a>
    
    /* Send SLP_REQ as  Activity 1.1  9.2.3.6 and EMVCo 2.6  9.2.1.3 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO)
 8013194:	79fb      	ldrb	r3, [r7, #7]
 8013196:	2b02      	cmp	r3, #2
 8013198:	d001      	beq.n	801319e <rfalNfcaPollerTechnologyDetection+0x38>
    {
        rfalNfcaPollerSleep();
 801319a:	f000 fb63 	bl	8013864 <rfalNfcaPollerSleep>
    }
    return ERR_NONE;
 801319e:	2300      	movs	r3, #0
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	3710      	adds	r7, #16
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}

080131a8 <rfalNfcaPollerSingleCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcaPollerSingleCollisionResolution( uint8_t devLimit, bool *collPending, rfalNfcaSelRes *selRes, uint8_t *nfcId1, uint8_t *nfcId1Len )
{
 80131a8:	b590      	push	{r4, r7, lr}
 80131aa:	b08f      	sub	sp, #60	; 0x3c
 80131ac:	af04      	add	r7, sp, #16
 80131ae:	60b9      	str	r1, [r7, #8]
 80131b0:	607a      	str	r2, [r7, #4]
 80131b2:	603b      	str	r3, [r7, #0]
 80131b4:	4603      	mov	r3, r0
 80131b6:	73fb      	strb	r3, [r7, #15]
    ReturnCode      ret;
    rfalNfcaSelReq  selReq;
    uint16_t        bytesRx;
    uint8_t         bytesTxRx;
    uint8_t         bitsTxRx;
    bool            doBacktrack = false;
 80131b8:	2300      	movs	r3, #0
 80131ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t         backtrackCnt = 3;
 80131be:	2303      	movs	r3, #3
 80131c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    
    /* Check parameters */
    if( (collPending == NULL) || (selRes == NULL) || (nfcId1 == NULL) || (nfcId1Len == NULL) )
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d008      	beq.n	80131dc <rfalNfcaPollerSingleCollisionResolution+0x34>
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d005      	beq.n	80131dc <rfalNfcaPollerSingleCollisionResolution+0x34>
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d002      	beq.n	80131dc <rfalNfcaPollerSingleCollisionResolution+0x34>
 80131d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d101      	bne.n	80131e0 <rfalNfcaPollerSingleCollisionResolution+0x38>
    {
        return ERR_PARAM;
 80131dc:	2307      	movs	r3, #7
 80131de:	e1ae      	b.n	801353e <rfalNfcaPollerSingleCollisionResolution+0x396>
    }
    
    /* Initialize output parameters */
    *collPending = false;  /* Activity 1.1  9.3.4.6 */
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	2200      	movs	r2, #0
 80131e4:	701a      	strb	r2, [r3, #0]
    *nfcId1Len   = 0;
 80131e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e8:	2200      	movs	r2, #0
 80131ea:	701a      	strb	r2, [r3, #0]
    ST_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 80131ec:	220a      	movs	r2, #10
 80131ee:	2100      	movs	r1, #0
 80131f0:	6838      	ldr	r0, [r7, #0]
 80131f2:	f005 fe24 	bl	8018e3e <memset>
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.3.4 */
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 80131f6:	2300      	movs	r3, #0
 80131f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80131fc:	e199      	b.n	8013532 <rfalNfcaPollerSingleCollisionResolution+0x38a>
    {
        /* Initialize the SDD_REQ to send for the new cascade level */
        ST_MEMSET( (uint8_t*)&selReq, 0x00, sizeof(rfalNfcaSelReq) );
 80131fe:	f107 0318 	add.w	r3, r7, #24
 8013202:	2207      	movs	r2, #7
 8013204:	2100      	movs	r1, #0
 8013206:	4618      	mov	r0, r3
 8013208:	f005 fe19 	bl	8018e3e <memset>
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 801320c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013210:	005b      	lsls	r3, r3, #1
 8013212:	b2db      	uxtb	r3, r3
 8013214:	3b6d      	subs	r3, #109	; 0x6d
 8013216:	b2db      	uxtb	r3, r3
 8013218:	763b      	strb	r3, [r7, #24]
    
        bytesTxRx    = RFAL_NFCA_SDD_REQ_LEN;
 801321a:	2302      	movs	r3, #2
 801321c:	757b      	strb	r3, [r7, #21]
        bitsTxRx     = 0;
 801321e:	2300      	movs	r3, #0
 8013220:	753b      	strb	r3, [r7, #20]
        
        /*******************************************************************************/
        /* Go through Collision loop */
        do
        {
            uint8_t         collBit = 1; /* standards mandate or recommend collision bit to be set to One. */
 8013222:	2301      	movs	r3, #1
 8013224:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            /* Calculate SEL_PAR with the bytes/bits to be sent */
            selReq.selPar = rfalNfcaSelPar(bytesTxRx, bitsTxRx);
 8013228:	7d7b      	ldrb	r3, [r7, #21]
 801322a:	011b      	lsls	r3, r3, #4
 801322c:	b2da      	uxtb	r2, r3
 801322e:	7d3b      	ldrb	r3, [r7, #20]
 8013230:	f003 030f 	and.w	r3, r3, #15
 8013234:	b2db      	uxtb	r3, r3
 8013236:	4313      	orrs	r3, r2
 8013238:	b2db      	uxtb	r3, r3
 801323a:	767b      	strb	r3, [r7, #25]
    
            /* Send SDD_REQ (Anticollision frame) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
            rfalNfcaTxRetry( ret, rfalISO14443ATransceiveAnticollisionFrame( (uint8_t*)&selReq, &bytesTxRx, &bitsTxRx, &bytesRx, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 801323c:	7bfb      	ldrb	r3, [r7, #15]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d101      	bne.n	8013246 <rfalNfcaPollerSingleCollisionResolution+0x9e>
 8013242:	2302      	movs	r3, #2
 8013244:	e000      	b.n	8013248 <rfalNfcaPollerSingleCollisionResolution+0xa0>
 8013246:	2300      	movs	r3, #0
 8013248:	f887 3020 	strb.w	r3, [r7, #32]
 801324c:	f107 0416 	add.w	r4, r7, #22
 8013250:	f107 0214 	add.w	r2, r7, #20
 8013254:	f107 0115 	add.w	r1, r7, #21
 8013258:	f107 0018 	add.w	r0, r7, #24
 801325c:	f240 6354 	movw	r3, #1620	; 0x654
 8013260:	9300      	str	r3, [sp, #0]
 8013262:	4623      	mov	r3, r4
 8013264:	f003 ff4c 	bl	8017100 <rfalISO14443ATransceiveAnticollisionFrame>
 8013268:	4603      	mov	r3, r0
 801326a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801326c:	7bfb      	ldrb	r3, [r7, #15]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d102      	bne.n	8013278 <rfalNfcaPollerSingleCollisionResolution+0xd0>
 8013272:	2005      	movs	r0, #5
 8013274:	f7f1 f878 	bl	8004368 <HAL_Delay>
 8013278:	f897 3020 	ldrb.w	r3, [r7, #32]
 801327c:	1e5a      	subs	r2, r3, #1
 801327e:	f887 2020 	strb.w	r2, [r7, #32]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d002      	beq.n	801328c <rfalNfcaPollerSingleCollisionResolution+0xe4>
 8013286:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013288:	2b04      	cmp	r3, #4
 801328a:	d0df      	beq.n	801324c <rfalNfcaPollerSingleCollisionResolution+0xa4>
            
            bytesRx = rfalConvBitsToBytes(bytesRx);
 801328c:	8afb      	ldrh	r3, [r7, #22]
 801328e:	3307      	adds	r3, #7
 8013290:	08db      	lsrs	r3, r3, #3
 8013292:	b29b      	uxth	r3, r3
 8013294:	82fb      	strh	r3, [r7, #22]
            
            if ((ret == ERR_TIMEOUT) 
 8013296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013298:	2b04      	cmp	r3, #4
 801329a:	d146      	bne.n	801332a <rfalNfcaPollerSingleCollisionResolution+0x182>
                && (backtrackCnt != 0U) && !doBacktrack
 801329c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d042      	beq.n	801332a <rfalNfcaPollerSingleCollisionResolution+0x182>
 80132a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80132a8:	f083 0301 	eor.w	r3, r3, #1
 80132ac:	b2db      	uxtb	r3, r3
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d03b      	beq.n	801332a <rfalNfcaPollerSingleCollisionResolution+0x182>
                && !((RFAL_NFCA_SDD_REQ_LEN==bytesTxRx) && (0U==bitsTxRx)))
 80132b2:	7d7b      	ldrb	r3, [r7, #21]
 80132b4:	2b02      	cmp	r3, #2
 80132b6:	d102      	bne.n	80132be <rfalNfcaPollerSingleCollisionResolution+0x116>
 80132b8:	7d3b      	ldrb	r3, [r7, #20]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d035      	beq.n	801332a <rfalNfcaPollerSingleCollisionResolution+0x182>
                 * collisions of a weaker tag go unnoticed. If then a later 
                 * collision is recognized and the strong tag has a 0 at the 
                 * collision position then no tag will respond. Catch this 
                 * corner case and then try with the bit being sent as zero. */
                rfalNfcaSensRes sensRes;
                ret = ERR_RF_COLLISION;
 80132be:	231d      	movs	r3, #29
 80132c0:	84bb      	strh	r3, [r7, #36]	; 0x24
                rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &sensRes );
 80132c2:	f107 0310 	add.w	r3, r7, #16
 80132c6:	4619      	mov	r1, r3
 80132c8:	2026      	movs	r0, #38	; 0x26
 80132ca:	f7ff ff23 	bl	8013114 <rfalNfcaPollerCheckPresence>
                /* Algorithm below does a post-increment, decrement to go back to current position */
                if (0U == bitsTxRx)
 80132ce:	7d3b      	ldrb	r3, [r7, #20]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d106      	bne.n	80132e2 <rfalNfcaPollerSingleCollisionResolution+0x13a>
                {
                    bitsTxRx = 7;
 80132d4:	2307      	movs	r3, #7
 80132d6:	753b      	strb	r3, [r7, #20]
                    bytesTxRx--;
 80132d8:	7d7b      	ldrb	r3, [r7, #21]
 80132da:	3b01      	subs	r3, #1
 80132dc:	b2db      	uxtb	r3, r3
 80132de:	757b      	strb	r3, [r7, #21]
 80132e0:	e003      	b.n	80132ea <rfalNfcaPollerSingleCollisionResolution+0x142>
                }
                else
                {
                    bitsTxRx--;
 80132e2:	7d3b      	ldrb	r3, [r7, #20]
 80132e4:	3b01      	subs	r3, #1
 80132e6:	b2db      	uxtb	r3, r3
 80132e8:	753b      	strb	r3, [r7, #20]
                }
                collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) );
 80132ea:	7d7b      	ldrb	r3, [r7, #21]
 80132ec:	461a      	mov	r2, r3
 80132ee:	f107 0318 	add.w	r3, r7, #24
 80132f2:	4413      	add	r3, r2
 80132f4:	781a      	ldrb	r2, [r3, #0]
 80132f6:	7d3b      	ldrb	r3, [r7, #20]
 80132f8:	4619      	mov	r1, r3
 80132fa:	2301      	movs	r3, #1
 80132fc:	408b      	lsls	r3, r1
 80132fe:	b2db      	uxtb	r3, r3
 8013300:	4013      	ands	r3, r2
 8013302:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                collBit = (uint8_t)((0U==collBit)?1U:0U); // invert the collision bit
 8013306:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801330a:	2b00      	cmp	r3, #0
 801330c:	d101      	bne.n	8013312 <rfalNfcaPollerSingleCollisionResolution+0x16a>
 801330e:	2301      	movs	r3, #1
 8013310:	e000      	b.n	8013314 <rfalNfcaPollerSingleCollisionResolution+0x16c>
 8013312:	2300      	movs	r3, #0
 8013314:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                doBacktrack = true;
 8013318:	2301      	movs	r3, #1
 801331a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                backtrackCnt--;
 801331e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013322:	3b01      	subs	r3, #1
 8013324:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            { 
 8013328:	e002      	b.n	8013330 <rfalNfcaPollerSingleCollisionResolution+0x188>
            }
            else
            {
                doBacktrack = false;
 801332a:	2300      	movs	r3, #0
 801332c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            if( ret == ERR_RF_COLLISION )
 8013330:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013332:	2b1d      	cmp	r3, #29
 8013334:	d17e      	bne.n	8013434 <rfalNfcaPollerSingleCollisionResolution+0x28c>
            {
                /* Check received length */
                if( (bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 8013336:	7d7b      	ldrb	r3, [r7, #21]
 8013338:	461a      	mov	r2, r3
 801333a:	7d3b      	ldrb	r3, [r7, #20]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d001      	beq.n	8013344 <rfalNfcaPollerSingleCollisionResolution+0x19c>
 8013340:	2301      	movs	r3, #1
 8013342:	e000      	b.n	8013346 <rfalNfcaPollerSingleCollisionResolution+0x19e>
 8013344:	2300      	movs	r3, #0
 8013346:	4413      	add	r3, r2
 8013348:	2b07      	cmp	r3, #7
 801334a:	d901      	bls.n	8013350 <rfalNfcaPollerSingleCollisionResolution+0x1a8>
                {
                    return ERR_PROTO;
 801334c:	230b      	movs	r3, #11
 801334e:	e0f6      	b.n	801353e <rfalNfcaPollerSingleCollisionResolution+0x396>
                }

                if( ((bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN)) && (backtrackCnt != 0U) )
 8013350:	7d7b      	ldrb	r3, [r7, #21]
 8013352:	461a      	mov	r2, r3
 8013354:	7d3b      	ldrb	r3, [r7, #20]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d001      	beq.n	801335e <rfalNfcaPollerSingleCollisionResolution+0x1b6>
 801335a:	2301      	movs	r3, #1
 801335c:	e000      	b.n	8013360 <rfalNfcaPollerSingleCollisionResolution+0x1b8>
 801335e:	2300      	movs	r3, #0
 8013360:	4413      	add	r3, r2
 8013362:	2b06      	cmp	r3, #6
 8013364:	d91a      	bls.n	801339c <rfalNfcaPollerSingleCollisionResolution+0x1f4>
 8013366:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801336a:	2b00      	cmp	r3, #0
 801336c:	d016      	beq.n	801339c <rfalNfcaPollerSingleCollisionResolution+0x1f4>
                { /* Collision in BCC: Anticollide only UID part */
                    backtrackCnt--;
 801336e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013372:	3b01      	subs	r3, #1
 8013374:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                    bytesTxRx = RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN - 1U;
 8013378:	2305      	movs	r3, #5
 801337a:	757b      	strb	r3, [r7, #21]
                    bitsTxRx = 7;
 801337c:	2307      	movs	r3, #7
 801337e:	753b      	strb	r3, [r7, #20]
                    collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 8013380:	7d7b      	ldrb	r3, [r7, #21]
 8013382:	461a      	mov	r2, r3
 8013384:	f107 0318 	add.w	r3, r7, #24
 8013388:	4413      	add	r3, r2
 801338a:	781a      	ldrb	r2, [r3, #0]
 801338c:	7d3b      	ldrb	r3, [r7, #20]
 801338e:	4619      	mov	r1, r3
 8013390:	2301      	movs	r3, #1
 8013392:	408b      	lsls	r3, r1
 8013394:	b2db      	uxtb	r3, r3
 8013396:	4013      	ands	r3, r2
 8013398:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                }
                
                if( (devLimit == 0U) && !(*collPending) )
 801339c:	7bfb      	ldrb	r3, [r7, #15]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d10b      	bne.n	80133ba <rfalNfcaPollerSingleCollisionResolution+0x212>
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	781b      	ldrb	r3, [r3, #0]
 80133a6:	f083 0301 	eor.w	r3, r3, #1
 80133aa:	b2db      	uxtb	r3, r3
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d004      	beq.n	80133ba <rfalNfcaPollerSingleCollisionResolution+0x212>
                {   
                    /* Activity 1.0 & 1.1  9.3.4.12: If CON_DEVICES_LIMIT has a value of 0, then 
                     * NFC Forum Device is configured to perform collision detection only       */
                    *collPending = true;
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	2201      	movs	r2, #1
 80133b4:	701a      	strb	r2, [r3, #0]
                    return ERR_IGNORE;
 80133b6:	2312      	movs	r3, #18
 80133b8:	e0c1      	b.n	801353e <rfalNfcaPollerSingleCollisionResolution+0x396>
                }
                
                *collPending = true;
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	2201      	movs	r2, #1
 80133be:	701a      	strb	r2, [r3, #0]
                
                /* Set and select the collision bit, with the number of bytes/bits successfully TxRx */
                if (collBit != 0U)
 80133c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d013      	beq.n	80133f0 <rfalNfcaPollerSingleCollisionResolution+0x248>
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] | (1U << bitsTxRx));   /* MISRA 10.3 */
 80133c8:	7d7b      	ldrb	r3, [r7, #21]
 80133ca:	461a      	mov	r2, r3
 80133cc:	f107 0318 	add.w	r3, r7, #24
 80133d0:	4413      	add	r3, r2
 80133d2:	7819      	ldrb	r1, [r3, #0]
 80133d4:	7d3b      	ldrb	r3, [r7, #20]
 80133d6:	461a      	mov	r2, r3
 80133d8:	2301      	movs	r3, #1
 80133da:	4093      	lsls	r3, r2
 80133dc:	b2da      	uxtb	r2, r3
 80133de:	7d7b      	ldrb	r3, [r7, #21]
 80133e0:	4618      	mov	r0, r3
 80133e2:	f107 0318 	add.w	r3, r7, #24
 80133e6:	4403      	add	r3, r0
 80133e8:	430a      	orrs	r2, r1
 80133ea:	b2d2      	uxtb	r2, r2
 80133ec:	701a      	strb	r2, [r3, #0]
 80133ee:	e014      	b.n	801341a <rfalNfcaPollerSingleCollisionResolution+0x272>
                }
                else
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] & ~(1U << bitsTxRx));  /* MISRA 10.3 */
 80133f0:	7d7b      	ldrb	r3, [r7, #21]
 80133f2:	461a      	mov	r2, r3
 80133f4:	f107 0318 	add.w	r3, r7, #24
 80133f8:	4413      	add	r3, r2
 80133fa:	7819      	ldrb	r1, [r3, #0]
 80133fc:	7d3b      	ldrb	r3, [r7, #20]
 80133fe:	461a      	mov	r2, r3
 8013400:	2301      	movs	r3, #1
 8013402:	4093      	lsls	r3, r2
 8013404:	b2db      	uxtb	r3, r3
 8013406:	43db      	mvns	r3, r3
 8013408:	b2da      	uxtb	r2, r3
 801340a:	7d7b      	ldrb	r3, [r7, #21]
 801340c:	4618      	mov	r0, r3
 801340e:	f107 0318 	add.w	r3, r7, #24
 8013412:	4403      	add	r3, r0
 8013414:	400a      	ands	r2, r1
 8013416:	b2d2      	uxtb	r2, r2
 8013418:	701a      	strb	r2, [r3, #0]
                }

                bitsTxRx++;
 801341a:	7d3b      	ldrb	r3, [r7, #20]
 801341c:	3301      	adds	r3, #1
 801341e:	b2db      	uxtb	r3, r3
 8013420:	753b      	strb	r3, [r7, #20]
                
                /* Check if number of bits form a byte */
                if( bitsTxRx == RFAL_BITS_IN_BYTE )
 8013422:	7d3b      	ldrb	r3, [r7, #20]
 8013424:	2b08      	cmp	r3, #8
 8013426:	d105      	bne.n	8013434 <rfalNfcaPollerSingleCollisionResolution+0x28c>
                {
                    bitsTxRx = 0;
 8013428:	2300      	movs	r3, #0
 801342a:	753b      	strb	r3, [r7, #20]
                    bytesTxRx++;
 801342c:	7d7b      	ldrb	r3, [r7, #21]
 801342e:	3301      	adds	r3, #1
 8013430:	b2db      	uxtb	r3, r3
 8013432:	757b      	strb	r3, [r7, #21]
                }
            }
        }while (ret == ERR_RF_COLLISION);
 8013434:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013436:	2b1d      	cmp	r3, #29
 8013438:	f43f aef3 	beq.w	8013222 <rfalNfcaPollerSingleCollisionResolution+0x7a>
        
        
        /*******************************************************************************/
        /* Check if Collision loop has failed */
        if( ret != ERR_NONE )
 801343c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801343e:	2b00      	cmp	r3, #0
 8013440:	d001      	beq.n	8013446 <rfalNfcaPollerSingleCollisionResolution+0x29e>
        {
            return ret;
 8013442:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013444:	e07b      	b.n	801353e <rfalNfcaPollerSingleCollisionResolution+0x396>
        }
        
        
        /* If collisions are to be reported check whether the response is complete */
        if( (devLimit == 0U) && (bytesRx != sizeof(rfalNfcaSddRes)) )
 8013446:	7bfb      	ldrb	r3, [r7, #15]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d104      	bne.n	8013456 <rfalNfcaPollerSingleCollisionResolution+0x2ae>
 801344c:	8afb      	ldrh	r3, [r7, #22]
 801344e:	2b05      	cmp	r3, #5
 8013450:	d001      	beq.n	8013456 <rfalNfcaPollerSingleCollisionResolution+0x2ae>
        {
            return ERR_PROTO;
 8013452:	230b      	movs	r3, #11
 8013454:	e073      	b.n	801353e <rfalNfcaPollerSingleCollisionResolution+0x396>
        }
        
        /* Check if the received BCC match */
        if( selReq.bcc != rfalNfcaCalculateBcc( selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 8013456:	7fbc      	ldrb	r4, [r7, #30]
 8013458:	f107 0318 	add.w	r3, r7, #24
 801345c:	3302      	adds	r3, #2
 801345e:	2104      	movs	r1, #4
 8013460:	4618      	mov	r0, r3
 8013462:	f7ff fe13 	bl	801308c <rfalNfcaCalculateBcc>
 8013466:	4603      	mov	r3, r0
 8013468:	429c      	cmp	r4, r3
 801346a:	d001      	beq.n	8013470 <rfalNfcaPollerSingleCollisionResolution+0x2c8>
        {
            return ERR_PROTO;
 801346c:	230b      	movs	r3, #11
 801346e:	e066      	b.n	801353e <rfalNfcaPollerSingleCollisionResolution+0x396>
        }
        
        /*******************************************************************************/
        /* Anticollision OK, Select this Cascade Level */
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 8013470:	2370      	movs	r3, #112	; 0x70
 8013472:	767b      	strb	r3, [r7, #25]
        
        /* Send SEL_REQ (Select command) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
        rfalNfcaTxRetry( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &bytesRx, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 8013474:	7bfb      	ldrb	r3, [r7, #15]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d101      	bne.n	801347e <rfalNfcaPollerSingleCollisionResolution+0x2d6>
 801347a:	2302      	movs	r3, #2
 801347c:	e000      	b.n	8013480 <rfalNfcaPollerSingleCollisionResolution+0x2d8>
 801347e:	2300      	movs	r3, #0
 8013480:	77fb      	strb	r3, [r7, #31]
 8013482:	f107 0018 	add.w	r0, r7, #24
 8013486:	f240 6354 	movw	r3, #1620	; 0x654
 801348a:	9302      	str	r3, [sp, #8]
 801348c:	2300      	movs	r3, #0
 801348e:	9301      	str	r3, [sp, #4]
 8013490:	f107 0316 	add.w	r3, r7, #22
 8013494:	9300      	str	r3, [sp, #0]
 8013496:	2301      	movs	r3, #1
 8013498:	687a      	ldr	r2, [r7, #4]
 801349a:	2107      	movs	r1, #7
 801349c:	f002 fd94 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 80134a0:	4603      	mov	r3, r0
 80134a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80134a4:	7bfb      	ldrb	r3, [r7, #15]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d102      	bne.n	80134b0 <rfalNfcaPollerSingleCollisionResolution+0x308>
 80134aa:	2005      	movs	r0, #5
 80134ac:	f7f0 ff5c 	bl	8004368 <HAL_Delay>
 80134b0:	7ffb      	ldrb	r3, [r7, #31]
 80134b2:	1e5a      	subs	r2, r3, #1
 80134b4:	77fa      	strb	r2, [r7, #31]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d002      	beq.n	80134c0 <rfalNfcaPollerSingleCollisionResolution+0x318>
 80134ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134bc:	2b04      	cmp	r3, #4
 80134be:	d0e0      	beq.n	8013482 <rfalNfcaPollerSingleCollisionResolution+0x2da>
        
        if( ret != ERR_NONE )
 80134c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d001      	beq.n	80134ca <rfalNfcaPollerSingleCollisionResolution+0x322>
        {
            return ret;
 80134c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134c8:	e039      	b.n	801353e <rfalNfcaPollerSingleCollisionResolution+0x396>
        }

        
        /* Ensure proper response length */
        if( bytesRx != sizeof(rfalNfcaSelRes) )
 80134ca:	8afb      	ldrh	r3, [r7, #22]
 80134cc:	2b01      	cmp	r3, #1
 80134ce:	d001      	beq.n	80134d4 <rfalNfcaPollerSingleCollisionResolution+0x32c>
        {
            return ERR_PROTO;
 80134d0:	230b      	movs	r3, #11
 80134d2:	e034      	b.n	801353e <rfalNfcaPollerSingleCollisionResolution+0x396>
        }
        
        /*******************************************************************************/
        /* Check cascade byte, if cascade tag then go next cascade level */
        if( (ret == ERR_NONE) && (*selReq.nfcid1 == RFAL_NFCA_SDD_CT) )
 80134d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d11b      	bne.n	8013512 <rfalNfcaPollerSingleCollisionResolution+0x36a>
 80134da:	7ebb      	ldrb	r3, [r7, #26]
 80134dc:	2b88      	cmp	r3, #136	; 0x88
 80134de:	d118      	bne.n	8013512 <rfalNfcaPollerSingleCollisionResolution+0x36a>
        {
            /* Cascade Tag present, store nfcid1 bytes (excluding cascade tag) and continue for next CL */
            ST_MEMCPY( &nfcId1[*nfcId1Len], &((uint8_t*)&selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 80134e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	461a      	mov	r2, r3
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	1898      	adds	r0, r3, r2
 80134ea:	f107 0318 	add.w	r3, r7, #24
 80134ee:	3302      	adds	r3, #2
 80134f0:	3301      	adds	r3, #1
 80134f2:	2203      	movs	r2, #3
 80134f4:	4619      	mov	r1, r3
 80134f6:	f005 fc7e 	bl	8018df6 <memcpy>
            *nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 80134fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134fc:	781b      	ldrb	r3, [r3, #0]
 80134fe:	3303      	adds	r3, #3
 8013500:	b2da      	uxtb	r2, r3
 8013502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013504:	701a      	strb	r2, [r3, #0]
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8013506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801350a:	3301      	adds	r3, #1
 801350c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013510:	e00f      	b.n	8013532 <rfalNfcaPollerSingleCollisionResolution+0x38a>
        }
        else
        {
            /* UID Selection complete, Stop Cascade Level loop */
            ST_MEMCPY( &nfcId1[*nfcId1Len], (uint8_t*)&selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN );
 8013512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013514:	781b      	ldrb	r3, [r3, #0]
 8013516:	461a      	mov	r2, r3
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	4413      	add	r3, r2
 801351c:	f8d7 201a 	ldr.w	r2, [r7, #26]
 8013520:	601a      	str	r2, [r3, #0]
            *nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
 8013522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013524:	781b      	ldrb	r3, [r3, #0]
 8013526:	3304      	adds	r3, #4
 8013528:	b2da      	uxtb	r2, r3
 801352a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801352c:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 801352e:	2300      	movs	r3, #0
 8013530:	e005      	b.n	801353e <rfalNfcaPollerSingleCollisionResolution+0x396>
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8013532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013536:	2b02      	cmp	r3, #2
 8013538:	f67f ae61 	bls.w	80131fe <rfalNfcaPollerSingleCollisionResolution+0x56>
        }
    }
    return ERR_INTERNAL;
 801353c:	230c      	movs	r3, #12
}
 801353e:	4618      	mov	r0, r3
 8013540:	372c      	adds	r7, #44	; 0x2c
 8013542:	46bd      	mov	sp, r7
 8013544:	bd90      	pop	{r4, r7, pc}

08013546 <rfalNfcaPollerFullCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerFullCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcaListenDevice *nfcaDevList, uint8_t *devCnt )
{
 8013546:	b5b0      	push	{r4, r5, r7, lr}
 8013548:	b08a      	sub	sp, #40	; 0x28
 801354a:	af02      	add	r7, sp, #8
 801354c:	60ba      	str	r2, [r7, #8]
 801354e:	607b      	str	r3, [r7, #4]
 8013550:	4603      	mov	r3, r0
 8013552:	73fb      	strb	r3, [r7, #15]
 8013554:	460b      	mov	r3, r1
 8013556:	73bb      	strb	r3, [r7, #14]
    ReturnCode      ret;
    bool            collPending;
    rfalNfcaSensRes sensRes;
    uint16_t        rcvLen;
    
    if( (nfcaDevList == NULL) || (devCnt == NULL) )
 8013558:	68bb      	ldr	r3, [r7, #8]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d002      	beq.n	8013564 <rfalNfcaPollerFullCollisionResolution+0x1e>
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d101      	bne.n	8013568 <rfalNfcaPollerFullCollisionResolution+0x22>
    {
        return ERR_PARAM;
 8013564:	2307      	movs	r3, #7
 8013566:	e106      	b.n	8013776 <rfalNfcaPollerFullCollisionResolution+0x230>
    }
    
    *devCnt = 0;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2200      	movs	r2, #0
 801356c:	701a      	strb	r2, [r3, #0]
    ret     = ERR_NONE;
 801356e:	2300      	movs	r3, #0
 8013570:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Send ALL_REQ before Anticollision if a Sleep was sent before  Activity 1.1  9.3.4.1 and EMVco 2.6  9.3.2.1 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 8013572:	7bfb      	ldrb	r3, [r7, #15]
 8013574:	2b02      	cmp	r3, #2
 8013576:	d029      	beq.n	80135cc <rfalNfcaPollerFullCollisionResolution+0x86>
    {
        ret = rfalISO14443ATransceiveShortFrame( RFAL_14443A_SHORTFRAME_CMD_WUPA, (uint8_t*)&nfcaDevList->sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 8013578:	68bb      	ldr	r3, [r7, #8]
 801357a:	1c59      	adds	r1, r3, #1
 801357c:	f107 0216 	add.w	r2, r7, #22
 8013580:	f240 6354 	movw	r3, #1620	; 0x654
 8013584:	9300      	str	r3, [sp, #0]
 8013586:	4613      	mov	r3, r2
 8013588:	2210      	movs	r2, #16
 801358a:	2052      	movs	r0, #82	; 0x52
 801358c:	f003 fcbc 	bl	8016f08 <rfalISO14443ATransceiveShortFrame>
 8013590:	4603      	mov	r3, r0
 8013592:	83fb      	strh	r3, [r7, #30]
        if(ret != ERR_NONE)
 8013594:	8bfb      	ldrh	r3, [r7, #30]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d010      	beq.n	80135bc <rfalNfcaPollerFullCollisionResolution+0x76>
        {
            if( (compMode == RFAL_COMPLIANCE_MODE_EMV) || ((ret != ERR_RF_COLLISION) && (ret != ERR_CRC) && (ret != ERR_FRAMING) && (ret != ERR_PAR)) )
 801359a:	7bfb      	ldrb	r3, [r7, #15]
 801359c:	2b01      	cmp	r3, #1
 801359e:	d00b      	beq.n	80135b8 <rfalNfcaPollerFullCollisionResolution+0x72>
 80135a0:	8bfb      	ldrh	r3, [r7, #30]
 80135a2:	2b1d      	cmp	r3, #29
 80135a4:	d00a      	beq.n	80135bc <rfalNfcaPollerFullCollisionResolution+0x76>
 80135a6:	8bfb      	ldrh	r3, [r7, #30]
 80135a8:	2b15      	cmp	r3, #21
 80135aa:	d007      	beq.n	80135bc <rfalNfcaPollerFullCollisionResolution+0x76>
 80135ac:	8bfb      	ldrh	r3, [r7, #30]
 80135ae:	2b09      	cmp	r3, #9
 80135b0:	d004      	beq.n	80135bc <rfalNfcaPollerFullCollisionResolution+0x76>
 80135b2:	8bfb      	ldrh	r3, [r7, #30]
 80135b4:	2b1b      	cmp	r3, #27
 80135b6:	d001      	beq.n	80135bc <rfalNfcaPollerFullCollisionResolution+0x76>
            {
                return ret;
 80135b8:	8bfb      	ldrh	r3, [r7, #30]
 80135ba:	e0dc      	b.n	8013776 <rfalNfcaPollerFullCollisionResolution+0x230>
            }
        }
        
        /* Check proper SENS_RES/ATQA size */
        if( (ret == ERR_NONE) && (rfalConvBytesToBits(sizeof(rfalNfcaSensRes)) != rcvLen) )
 80135bc:	8bfb      	ldrh	r3, [r7, #30]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d104      	bne.n	80135cc <rfalNfcaPollerFullCollisionResolution+0x86>
 80135c2:	8afb      	ldrh	r3, [r7, #22]
 80135c4:	2b10      	cmp	r3, #16
 80135c6:	d001      	beq.n	80135cc <rfalNfcaPollerFullCollisionResolution+0x86>
        {
            return ERR_PROTO;
 80135c8:	230b      	movs	r3, #11
 80135ca:	e0d4      	b.n	8013776 <rfalNfcaPollerFullCollisionResolution+0x230>
    #if RFAL_FEATURE_T1T
    /*******************************************************************************/
    /* Only check for T1T if previous SENS_RES was received without a transmission  *
     * error. When collisions occur bits in the SENS_RES may look like a T1T        */
    /* If T1T Anticollision is not supported  Activity 1.1  9.3.4.3 */
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	789b      	ldrb	r3, [r3, #2]
 80135d0:	f003 030f 	and.w	r3, r3, #15
 80135d4:	2b0c      	cmp	r3, #12
 80135d6:	d12a      	bne.n	801362e <rfalNfcaPollerFullCollisionResolution+0xe8>
 80135d8:	7bbb      	ldrb	r3, [r7, #14]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d027      	beq.n	801362e <rfalNfcaPollerFullCollisionResolution+0xe8>
 80135de:	8bfb      	ldrh	r3, [r7, #30]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d124      	bne.n	801362e <rfalNfcaPollerFullCollisionResolution+0xe8>
 80135e4:	7bfb      	ldrb	r3, [r7, #15]
 80135e6:	2b01      	cmp	r3, #1
 80135e8:	d021      	beq.n	801362e <rfalNfcaPollerFullCollisionResolution+0xe8>
    {
        /* RID_REQ shall be performed with rfalT1TPollerRid()    Activity 1.1  9.3.4.24 */
        rfalT1TPollerInitialize();
 80135ea:	f004 ffe4 	bl	80185b6 <rfalT1TPollerInitialize>
        EXIT_ON_ERR( ret, rfalT1TPollerRid( &nfcaDevList->ridRes ) );
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	330f      	adds	r3, #15
 80135f2:	4618      	mov	r0, r3
 80135f4:	f005 f801 	bl	80185fa <rfalT1TPollerRid>
 80135f8:	4603      	mov	r3, r0
 80135fa:	83fb      	strh	r3, [r7, #30]
 80135fc:	8bfb      	ldrh	r3, [r7, #30]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d001      	beq.n	8013606 <rfalNfcaPollerFullCollisionResolution+0xc0>
 8013602:	8bfb      	ldrh	r3, [r7, #30]
 8013604:	e0b7      	b.n	8013776 <rfalNfcaPollerFullCollisionResolution+0x230>
        
        /* T1T doesn't support Anticollision */
        *devCnt = 1;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2201      	movs	r2, #1
 801360a:	701a      	strb	r2, [r3, #0]
        nfcaDevList->isSleep   = false;
 801360c:	68bb      	ldr	r3, [r7, #8]
 801360e:	2200      	movs	r2, #0
 8013610:	755a      	strb	r2, [r3, #21]
        nfcaDevList->type      = RFAL_NFCA_T1T;
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	2201      	movs	r2, #1
 8013616:	701a      	strb	r2, [r3, #0]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 8013618:	68bb      	ldr	r3, [r7, #8]
 801361a:	2204      	movs	r2, #4
 801361c:	711a      	strb	r2, [r3, #4]
        ST_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	3305      	adds	r3, #5
 8013622:	68ba      	ldr	r2, [r7, #8]
 8013624:	3211      	adds	r2, #17
 8013626:	6812      	ldr	r2, [r2, #0]
 8013628:	601a      	str	r2, [r3, #0]
        
        return ERR_NONE;
 801362a:	2300      	movs	r3, #0
 801362c:	e0a3      	b.n	8013776 <rfalNfcaPollerFullCollisionResolution+0x230>
    }    
    #endif /* RFAL_FEATURE_T1T */
    
    /*******************************************************************************/
    /* Store the SENS_RES from Technology Detection or from WUPA */ 
    sensRes = nfcaDevList->sensRes;
 801362e:	68ba      	ldr	r2, [r7, #8]
 8013630:	f107 0318 	add.w	r3, r7, #24
 8013634:	3201      	adds	r2, #1
 8013636:	8812      	ldrh	r2, [r2, #0]
 8013638:	801a      	strh	r2, [r3, #0]
    
    if( devLimit > 0U )  /* MISRA 21.18 */
 801363a:	7bbb      	ldrb	r3, [r7, #14]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d008      	beq.n	8013652 <rfalNfcaPollerFullCollisionResolution+0x10c>
    {
        ST_MEMSET( nfcaDevList, 0x00, (sizeof(rfalNfcaListenDevice) * devLimit) );
 8013640:	7bbb      	ldrb	r3, [r7, #14]
 8013642:	2216      	movs	r2, #22
 8013644:	fb02 f303 	mul.w	r3, r2, r3
 8013648:	461a      	mov	r2, r3
 801364a:	2100      	movs	r1, #0
 801364c:	68b8      	ldr	r0, [r7, #8]
 801364e:	f005 fbf6 	bl	8018e3e <memset>
    }
    
    /* Restore the prev SENS_RES, assuming that the SENS_RES received is from first device
     * When only one device is detected it's not woken up then we'll have no SENS_RES (ATQA) */
    nfcaDevList->sensRes = sensRes;
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	3301      	adds	r3, #1
 8013656:	f107 0218 	add.w	r2, r7, #24
 801365a:	8812      	ldrh	r2, [r2, #0]
 801365c:	801a      	strh	r2, [r3, #0]
    /*******************************************************************************/
    do
    {
        uint8_t newDeviceType;
        
        EXIT_ON_ERR( ret, rfalNfcaPollerSingleCollisionResolution( devLimit, &collPending, &nfcaDevList[*devCnt].selRes, (uint8_t*)&nfcaDevList[*devCnt].nfcId1, (uint8_t*)&nfcaDevList[*devCnt].nfcId1Len ) );
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	781b      	ldrb	r3, [r3, #0]
 8013662:	461a      	mov	r2, r3
 8013664:	2316      	movs	r3, #22
 8013666:	fb03 f302 	mul.w	r3, r3, r2
 801366a:	68ba      	ldr	r2, [r7, #8]
 801366c:	4413      	add	r3, r2
 801366e:	1cdc      	adds	r4, r3, #3
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	461a      	mov	r2, r3
 8013676:	2316      	movs	r3, #22
 8013678:	fb03 f302 	mul.w	r3, r3, r2
 801367c:	68ba      	ldr	r2, [r7, #8]
 801367e:	4413      	add	r3, r2
 8013680:	1d5d      	adds	r5, r3, #5
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	781b      	ldrb	r3, [r3, #0]
 8013686:	461a      	mov	r2, r3
 8013688:	2316      	movs	r3, #22
 801368a:	fb03 f302 	mul.w	r3, r3, r2
 801368e:	68ba      	ldr	r2, [r7, #8]
 8013690:	4413      	add	r3, r2
 8013692:	3304      	adds	r3, #4
 8013694:	f107 011c 	add.w	r1, r7, #28
 8013698:	7bb8      	ldrb	r0, [r7, #14]
 801369a:	9300      	str	r3, [sp, #0]
 801369c:	462b      	mov	r3, r5
 801369e:	4622      	mov	r2, r4
 80136a0:	f7ff fd82 	bl	80131a8 <rfalNfcaPollerSingleCollisionResolution>
 80136a4:	4603      	mov	r3, r0
 80136a6:	83fb      	strh	r3, [r7, #30]
 80136a8:	8bfb      	ldrh	r3, [r7, #30]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d001      	beq.n	80136b2 <rfalNfcaPollerFullCollisionResolution+0x16c>
 80136ae:	8bfb      	ldrh	r3, [r7, #30]
 80136b0:	e061      	b.n	8013776 <rfalNfcaPollerFullCollisionResolution+0x230>
        
        /* Assign Listen Device */
        newDeviceType = ((uint8_t)nfcaDevList[*devCnt].selRes.sak) & RFAL_NFCA_SEL_RES_CONF_MASK;  /* MISRA 10.8 */
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	781b      	ldrb	r3, [r3, #0]
 80136b6:	461a      	mov	r2, r3
 80136b8:	2316      	movs	r3, #22
 80136ba:	fb03 f302 	mul.w	r3, r3, r2
 80136be:	68ba      	ldr	r2, [r7, #8]
 80136c0:	4413      	add	r3, r2
 80136c2:	78db      	ldrb	r3, [r3, #3]
 80136c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80136c8:	777b      	strb	r3, [r7, #29]
        /* PRQA S 4342 1 # MISRA 10.5 - Guaranteed that no invalid enum values are created: see guard_eq_RFAL_NFCA_T2T, .... */
        nfcaDevList[*devCnt].type    = (rfalNfcaListenDeviceType) (newDeviceType);
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	781b      	ldrb	r3, [r3, #0]
 80136ce:	461a      	mov	r2, r3
 80136d0:	2316      	movs	r3, #22
 80136d2:	fb03 f302 	mul.w	r3, r3, r2
 80136d6:	68ba      	ldr	r2, [r7, #8]
 80136d8:	4413      	add	r3, r2
 80136da:	7f7a      	ldrb	r2, [r7, #29]
 80136dc:	701a      	strb	r2, [r3, #0]
        nfcaDevList[*devCnt].isSleep = false;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	781b      	ldrb	r3, [r3, #0]
 80136e2:	461a      	mov	r2, r3
 80136e4:	2316      	movs	r3, #22
 80136e6:	fb03 f302 	mul.w	r3, r3, r2
 80136ea:	68ba      	ldr	r2, [r7, #8]
 80136ec:	4413      	add	r3, r2
 80136ee:	2200      	movs	r2, #0
 80136f0:	755a      	strb	r2, [r3, #21]
        (*devCnt)++;
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	781b      	ldrb	r3, [r3, #0]
 80136f6:	3301      	adds	r3, #1
 80136f8:	b2da      	uxtb	r2, r3
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	701a      	strb	r2, [r3, #0]

        
        /* If a collision was detected and device counter is lower than limit  Activity 1.1  9.3.4.21 */
        if( (*devCnt < devLimit) && ((collPending) || (compMode != RFAL_COMPLIANCE_MODE_ISO) ) )
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	7bba      	ldrb	r2, [r7, #14]
 8013704:	429a      	cmp	r2, r3
 8013706:	d92a      	bls.n	801375e <rfalNfcaPollerFullCollisionResolution+0x218>
 8013708:	7f3b      	ldrb	r3, [r7, #28]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d102      	bne.n	8013714 <rfalNfcaPollerFullCollisionResolution+0x1ce>
 801370e:	7bfb      	ldrb	r3, [r7, #15]
 8013710:	2b02      	cmp	r3, #2
 8013712:	d024      	beq.n	801375e <rfalNfcaPollerFullCollisionResolution+0x218>
        {
            /* Put this device to Sleep  Activity 1.1  9.3.4.22 */
            rfalNfcaPollerSleep();
 8013714:	f000 f8a6 	bl	8013864 <rfalNfcaPollerSleep>
            nfcaDevList[(*devCnt - 1U)].isSleep = true;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	461a      	mov	r2, r3
 801371e:	2316      	movs	r3, #22
 8013720:	fb03 f302 	mul.w	r3, r3, r2
 8013724:	3b16      	subs	r3, #22
 8013726:	68ba      	ldr	r2, [r7, #8]
 8013728:	4413      	add	r3, r2
 801372a:	2201      	movs	r2, #1
 801372c:	755a      	strb	r2, [r3, #21]
            
            
            /* Send a new SENS_REQ to check for other cards  Activity 1.1  9.3.4.23 */
            ret = rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &nfcaDevList[*devCnt].sensRes );
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	781b      	ldrb	r3, [r3, #0]
 8013732:	461a      	mov	r2, r3
 8013734:	2316      	movs	r3, #22
 8013736:	fb03 f302 	mul.w	r3, r3, r2
 801373a:	68ba      	ldr	r2, [r7, #8]
 801373c:	4413      	add	r3, r2
 801373e:	3301      	adds	r3, #1
 8013740:	4619      	mov	r1, r3
 8013742:	2026      	movs	r0, #38	; 0x26
 8013744:	f7ff fce6 	bl	8013114 <rfalNfcaPollerCheckPresence>
 8013748:	4603      	mov	r3, r0
 801374a:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 801374c:	8bfb      	ldrh	r3, [r7, #30]
 801374e:	2b04      	cmp	r3, #4
 8013750:	d102      	bne.n	8013758 <rfalNfcaPollerFullCollisionResolution+0x212>
            {
                /* No more devices found, exit */
                collPending = false;
 8013752:	2300      	movs	r3, #0
 8013754:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 8013756:	e004      	b.n	8013762 <rfalNfcaPollerFullCollisionResolution+0x21c>
            }
            else
            {
                /* Another device found, continue loop */
                collPending = true;
 8013758:	2301      	movs	r3, #1
 801375a:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 801375c:	e001      	b.n	8013762 <rfalNfcaPollerFullCollisionResolution+0x21c>
            }
        }
        else
        {
            /* Exit loop */
            collPending = false;
 801375e:	2300      	movs	r3, #0
 8013760:	773b      	strb	r3, [r7, #28]
        }
    }while( (*devCnt < devLimit) && (collPending) );
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	781b      	ldrb	r3, [r3, #0]
 8013766:	7bba      	ldrb	r2, [r7, #14]
 8013768:	429a      	cmp	r2, r3
 801376a:	d903      	bls.n	8013774 <rfalNfcaPollerFullCollisionResolution+0x22e>
 801376c:	7f3b      	ldrb	r3, [r7, #28]
 801376e:	2b00      	cmp	r3, #0
 8013770:	f47f af75 	bne.w	801365e <rfalNfcaPollerFullCollisionResolution+0x118>
    
    return ERR_NONE;
 8013774:	2300      	movs	r3, #0
}
 8013776:	4618      	mov	r0, r3
 8013778:	3720      	adds	r7, #32
 801377a:	46bd      	mov	sp, r7
 801377c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013780 <rfalNfcaPollerSelect>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSelect( const uint8_t *nfcid1, uint8_t nfcidLen, rfalNfcaSelRes *selRes )
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b08c      	sub	sp, #48	; 0x30
 8013784:	af04      	add	r7, sp, #16
 8013786:	60f8      	str	r0, [r7, #12]
 8013788:	460b      	mov	r3, r1
 801378a:	607a      	str	r2, [r7, #4]
 801378c:	72fb      	strb	r3, [r7, #11]
    uint8_t        nfcidOffset;
    uint16_t       rxLen;
    ReturnCode     ret;
    rfalNfcaSelReq selReq;
    
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d005      	beq.n	80137a0 <rfalNfcaPollerSelect+0x20>
 8013794:	7afb      	ldrb	r3, [r7, #11]
 8013796:	2b0a      	cmp	r3, #10
 8013798:	d802      	bhi.n	80137a0 <rfalNfcaPollerSelect+0x20>
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d101      	bne.n	80137a4 <rfalNfcaPollerSelect+0x24>
    {
        return ERR_PARAM;
 80137a0:	2307      	movs	r3, #7
 80137a2:	e058      	b.n	8013856 <rfalNfcaPollerSelect+0xd6>
    }
    
    
    /* Calculate Cascate Level */
    cl          = rfalNfcaNfcidLen2CL( nfcidLen );
 80137a4:	7afb      	ldrb	r3, [r7, #11]
 80137a6:	4a2e      	ldr	r2, [pc, #184]	; (8013860 <rfalNfcaPollerSelect+0xe0>)
 80137a8:	fba2 2303 	umull	r2, r3, r2, r3
 80137ac:	089b      	lsrs	r3, r3, #2
 80137ae:	777b      	strb	r3, [r7, #29]
    nfcidOffset = 0;
 80137b0:	2300      	movs	r3, #0
 80137b2:	77bb      	strb	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.4.4 */
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 80137b4:	2300      	movs	r3, #0
 80137b6:	77fb      	strb	r3, [r7, #31]
 80137b8:	e048      	b.n	801384c <rfalNfcaPollerSelect+0xcc>
    {
        /* Assign SEL_CMD according to the CLn and SEL_PAR*/
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 80137ba:	7ffb      	ldrb	r3, [r7, #31]
 80137bc:	005b      	lsls	r3, r3, #1
 80137be:	b2db      	uxtb	r3, r3
 80137c0:	3b6d      	subs	r3, #109	; 0x6d
 80137c2:	b2db      	uxtb	r3, r3
 80137c4:	743b      	strb	r3, [r7, #16]
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 80137c6:	2370      	movs	r3, #112	; 0x70
 80137c8:	747b      	strb	r3, [r7, #17]
        
        /* Compute NFCID/Data on the SEL_REQ command   Digital 1.1  Table 18 */
        if( cl != i )
 80137ca:	7f7a      	ldrb	r2, [r7, #29]
 80137cc:	7ffb      	ldrb	r3, [r7, #31]
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d00f      	beq.n	80137f2 <rfalNfcaPollerSelect+0x72>
        {
            *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 80137d2:	2388      	movs	r3, #136	; 0x88
 80137d4:	74bb      	strb	r3, [r7, #18]
            ST_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &nfcid1[nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 80137d6:	7fbb      	ldrb	r3, [r7, #30]
 80137d8:	68fa      	ldr	r2, [r7, #12]
 80137da:	18d1      	adds	r1, r2, r3
 80137dc:	f107 0310 	add.w	r3, r7, #16
 80137e0:	3303      	adds	r3, #3
 80137e2:	2203      	movs	r2, #3
 80137e4:	4618      	mov	r0, r3
 80137e6:	f005 fb06 	bl	8018df6 <memcpy>
            nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 80137ea:	7fbb      	ldrb	r3, [r7, #30]
 80137ec:	3303      	adds	r3, #3
 80137ee:	77bb      	strb	r3, [r7, #30]
 80137f0:	e005      	b.n	80137fe <rfalNfcaPollerSelect+0x7e>
        }
        else
        {
            ST_MEMCPY( selReq.nfcid1, &nfcid1[nfcidOffset], RFAL_NFCA_CASCADE_1_UID_LEN );
 80137f2:	7fbb      	ldrb	r3, [r7, #30]
 80137f4:	68fa      	ldr	r2, [r7, #12]
 80137f6:	4413      	add	r3, r2
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	f8c7 3012 	str.w	r3, [r7, #18]
        }
        
        /* Calculate nfcid's BCC */
        selReq.bcc = rfalNfcaCalculateBcc( (uint8_t*)&selReq.nfcid1, sizeof(selReq.nfcid1) );
 80137fe:	f107 0310 	add.w	r3, r7, #16
 8013802:	3302      	adds	r3, #2
 8013804:	2104      	movs	r1, #4
 8013806:	4618      	mov	r0, r3
 8013808:	f7ff fc40 	bl	801308c <rfalNfcaCalculateBcc>
 801380c:	4603      	mov	r3, r0
 801380e:	75bb      	strb	r3, [r7, #22]
        
        /*******************************************************************************/
        /* Send SEL_REQ  */
        EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 8013810:	f107 0010 	add.w	r0, r7, #16
 8013814:	f240 6354 	movw	r3, #1620	; 0x654
 8013818:	9302      	str	r3, [sp, #8]
 801381a:	2300      	movs	r3, #0
 801381c:	9301      	str	r3, [sp, #4]
 801381e:	f107 0318 	add.w	r3, r7, #24
 8013822:	9300      	str	r3, [sp, #0]
 8013824:	2301      	movs	r3, #1
 8013826:	687a      	ldr	r2, [r7, #4]
 8013828:	2107      	movs	r1, #7
 801382a:	f002 fbcd 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 801382e:	4603      	mov	r3, r0
 8013830:	837b      	strh	r3, [r7, #26]
 8013832:	8b7b      	ldrh	r3, [r7, #26]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d001      	beq.n	801383c <rfalNfcaPollerSelect+0xbc>
 8013838:	8b7b      	ldrh	r3, [r7, #26]
 801383a:	e00c      	b.n	8013856 <rfalNfcaPollerSelect+0xd6>
        
        /* Ensure proper response length */
        if( rxLen != sizeof(rfalNfcaSelRes) )
 801383c:	8b3b      	ldrh	r3, [r7, #24]
 801383e:	2b01      	cmp	r3, #1
 8013840:	d001      	beq.n	8013846 <rfalNfcaPollerSelect+0xc6>
        {
            return ERR_PROTO;
 8013842:	230b      	movs	r3, #11
 8013844:	e007      	b.n	8013856 <rfalNfcaPollerSelect+0xd6>
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 8013846:	7ffb      	ldrb	r3, [r7, #31]
 8013848:	3301      	adds	r3, #1
 801384a:	77fb      	strb	r3, [r7, #31]
 801384c:	7ffa      	ldrb	r2, [r7, #31]
 801384e:	7f7b      	ldrb	r3, [r7, #29]
 8013850:	429a      	cmp	r2, r3
 8013852:	d9b2      	bls.n	80137ba <rfalNfcaPollerSelect+0x3a>
        }
    }
    
    /* REMARK: Could check if NFCID1 is complete */
    
    return ERR_NONE;
 8013854:	2300      	movs	r3, #0
}
 8013856:	4618      	mov	r0, r3
 8013858:	3720      	adds	r7, #32
 801385a:	46bd      	mov	sp, r7
 801385c:	bd80      	pop	{r7, pc}
 801385e:	bf00      	nop
 8013860:	cccccccd 	.word	0xcccccccd

08013864 <rfalNfcaPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSleep( void )
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b086      	sub	sp, #24
 8013868:	af04      	add	r7, sp, #16
    rfalNfcaSlpReq slpReq;
    uint8_t        rxBuf;    /* dummy buffer, just to perform Rx */
    
    slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 801386a:	2350      	movs	r3, #80	; 0x50
 801386c:	713b      	strb	r3, [r7, #4]
    slpReq.frame[RFAL_NFCA_SLP_BYTE2_POS] = RFAL_NFCA_SLP_BYTE2;
 801386e:	2300      	movs	r3, #0
 8013870:	717b      	strb	r3, [r7, #5]
    
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 8013872:	1cfa      	adds	r2, r7, #3
 8013874:	1d38      	adds	r0, r7, #4
 8013876:	f243 43f8 	movw	r3, #13560	; 0x34f8
 801387a:	9302      	str	r3, [sp, #8]
 801387c:	2300      	movs	r3, #0
 801387e:	9301      	str	r3, [sp, #4]
 8013880:	2300      	movs	r3, #0
 8013882:	9300      	str	r3, [sp, #0]
 8013884:	2301      	movs	r3, #1
 8013886:	2102      	movs	r1, #2
 8013888:	f002 fb9e 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
    /* ISO14443-3 6.4.3  HLTA - If PICC responds with any modulation during 1 ms this response shall be interpreted as not acknowledge 
       Digital 2.0  6.9.2.1 & EMVCo 3.0  5.6.2.1 - consider the HLTA command always acknowledged
       No check to be compliant with NFC and EMVCo, and to improve interoprability (Kovio RFID Tag)
    */
    
    return ERR_NONE;
 801388c:	2300      	movs	r3, #0
}
 801388e:	4618      	mov	r0, r3
 8013890:	3708      	adds	r7, #8
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}

08013896 <rfalNfcaListenerIsSleepReq>:


/*******************************************************************************/
bool rfalNfcaListenerIsSleepReq( const uint8_t *buf, uint16_t bufLen )
{
 8013896:	b480      	push	{r7}
 8013898:	b083      	sub	sp, #12
 801389a:	af00      	add	r7, sp, #0
 801389c:	6078      	str	r0, [r7, #4]
 801389e:	460b      	mov	r3, r1
 80138a0:	807b      	strh	r3, [r7, #2]
    /* Check if length and payload match */
    if( (bufLen != sizeof(rfalNfcaSlpReq)) || (buf[RFAL_NFCA_SLP_CMD_POS] != RFAL_NFCA_SLP_CMD) || (buf[RFAL_NFCA_SLP_BYTE2_POS] != RFAL_NFCA_SLP_BYTE2) )
 80138a2:	887b      	ldrh	r3, [r7, #2]
 80138a4:	2b02      	cmp	r3, #2
 80138a6:	d108      	bne.n	80138ba <rfalNfcaListenerIsSleepReq+0x24>
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	781b      	ldrb	r3, [r3, #0]
 80138ac:	2b50      	cmp	r3, #80	; 0x50
 80138ae:	d104      	bne.n	80138ba <rfalNfcaListenerIsSleepReq+0x24>
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	3301      	adds	r3, #1
 80138b4:	781b      	ldrb	r3, [r3, #0]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d001      	beq.n	80138be <rfalNfcaListenerIsSleepReq+0x28>
    {
        return false;
 80138ba:	2300      	movs	r3, #0
 80138bc:	e000      	b.n	80138c0 <rfalNfcaListenerIsSleepReq+0x2a>
    }
    
    return true;
 80138be:	2301      	movs	r3, #1
}
 80138c0:	4618      	mov	r0, r3
 80138c2:	370c      	adds	r7, #12
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bc80      	pop	{r7}
 80138c8:	4770      	bx	lr

080138ca <rfalNfcbCheckSensbRes>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcbCheckSensbRes( const rfalNfcbSensbRes *sensbRes, uint8_t sensbResLen )
{
 80138ca:	b480      	push	{r7}
 80138cc:	b083      	sub	sp, #12
 80138ce:	af00      	add	r7, sp, #0
 80138d0:	6078      	str	r0, [r7, #4]
 80138d2:	460b      	mov	r3, r1
 80138d4:	70fb      	strb	r3, [r7, #3]
    /* Check response length */
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 80138d6:	78fb      	ldrb	r3, [r7, #3]
 80138d8:	2b0c      	cmp	r3, #12
 80138da:	d004      	beq.n	80138e6 <rfalNfcbCheckSensbRes+0x1c>
 80138dc:	78fb      	ldrb	r3, [r7, #3]
 80138de:	2b0d      	cmp	r3, #13
 80138e0:	d001      	beq.n	80138e6 <rfalNfcbCheckSensbRes+0x1c>
    {
        return ERR_PROTO;
 80138e2:	230b      	movs	r3, #11
 80138e4:	e00c      	b.n	8013900 <rfalNfcbCheckSensbRes+0x36>
    }
    
    /* Check SENSB_RES and Protocol Type   Digital 1.1 7.6.2.19 */
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	7a9b      	ldrb	r3, [r3, #10]
 80138ea:	f003 0308 	and.w	r3, r3, #8
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d103      	bne.n	80138fa <rfalNfcbCheckSensbRes+0x30>
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	781b      	ldrb	r3, [r3, #0]
 80138f6:	2b50      	cmp	r3, #80	; 0x50
 80138f8:	d001      	beq.n	80138fe <rfalNfcbCheckSensbRes+0x34>
    {
        return ERR_PROTO;
 80138fa:	230b      	movs	r3, #11
 80138fc:	e000      	b.n	8013900 <rfalNfcbCheckSensbRes+0x36>
    }
    return ERR_NONE;
 80138fe:	2300      	movs	r3, #0
}
 8013900:	4618      	mov	r0, r3
 8013902:	370c      	adds	r7, #12
 8013904:	46bd      	mov	sp, r7
 8013906:	bc80      	pop	{r7}
 8013908:	4770      	bx	lr
	...

0801390c <rfalNfcbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcbPollerInitialize( void )
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b082      	sub	sp, #8
 8013910:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 8013912:	2200      	movs	r2, #0
 8013914:	2100      	movs	r1, #0
 8013916:	2003      	movs	r0, #3
 8013918:	f001 fd28 	bl	801536c <rfalSetMode>
 801391c:	4603      	mov	r3, r0
 801391e:	80fb      	strh	r3, [r7, #6]
 8013920:	88fb      	ldrh	r3, [r7, #6]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d001      	beq.n	801392a <rfalNfcbPollerInitialize+0x1e>
 8013926:	88fb      	ldrh	r3, [r7, #6]
 8013928:	e014      	b.n	8013954 <rfalNfcbPollerInitialize+0x48>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 801392a:	2001      	movs	r0, #1
 801392c:	f002 f8b8 	bl	8015aa0 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCB );
 8013930:	480a      	ldr	r0, [pc, #40]	; (801395c <rfalNfcbPollerInitialize+0x50>)
 8013932:	f002 f8ed 	bl	8015b10 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCB_POLLER );
 8013936:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 801393a:	f002 f8d5 	bl	8015ae8 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 801393e:	f641 207c 	movw	r0, #6780	; 0x1a7c
 8013942:	f002 f8bd 	bl	8015ac0 <rfalSetFDTPoll>
    
    gRfalNfcb.AFI    = RFAL_NFCB_AFI;
 8013946:	4b06      	ldr	r3, [pc, #24]	; (8013960 <rfalNfcbPollerInitialize+0x54>)
 8013948:	2200      	movs	r2, #0
 801394a:	701a      	strb	r2, [r3, #0]
    gRfalNfcb.PARAM  = RFAL_NFCB_PARAM;
 801394c:	4b04      	ldr	r3, [pc, #16]	; (8013960 <rfalNfcbPollerInitialize+0x54>)
 801394e:	2200      	movs	r2, #0
 8013950:	705a      	strb	r2, [r3, #1]
    
    return ERR_NONE;
 8013952:	2300      	movs	r3, #0
}
 8013954:	4618      	mov	r0, r3
 8013956:	3708      	adds	r7, #8
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}
 801395c:	000108d8 	.word	0x000108d8
 8013960:	20003554 	.word	0x20003554

08013964 <rfalNfcbPollerCheckPresence>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b08a      	sub	sp, #40	; 0x28
 8013968:	af04      	add	r7, sp, #16
 801396a:	60ba      	str	r2, [r7, #8]
 801396c:	607b      	str	r3, [r7, #4]
 801396e:	4603      	mov	r3, r0
 8013970:	73fb      	strb	r3, [r7, #15]
 8013972:	460b      	mov	r3, r1
 8013974:	73bb      	strb	r3, [r7, #14]
    ReturnCode       ret;
    rfalNfcbSensbReq sensbReq;
    

    /* Check if the command requested and given the slot number are valid */
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 8013976:	7bfb      	ldrb	r3, [r7, #15]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d002      	beq.n	8013982 <rfalNfcbPollerCheckPresence+0x1e>
 801397c:	7bfb      	ldrb	r3, [r7, #15]
 801397e:	2b08      	cmp	r3, #8
 8013980:	d108      	bne.n	8013994 <rfalNfcbPollerCheckPresence+0x30>
 8013982:	7bbb      	ldrb	r3, [r7, #14]
 8013984:	2b04      	cmp	r3, #4
 8013986:	d805      	bhi.n	8013994 <rfalNfcbPollerCheckPresence+0x30>
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d002      	beq.n	8013994 <rfalNfcbPollerCheckPresence+0x30>
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d101      	bne.n	8013998 <rfalNfcbPollerCheckPresence+0x34>
    {
        return ERR_PARAM;
 8013994:	2307      	movs	r3, #7
 8013996:	e044      	b.n	8013a22 <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    *sensbResLen = 0;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2200      	movs	r2, #0
 801399c:	701a      	strb	r2, [r3, #0]
    ST_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 801399e:	220d      	movs	r2, #13
 80139a0:	2100      	movs	r1, #0
 80139a2:	68b8      	ldr	r0, [r7, #8]
 80139a4:	f005 fa4b 	bl	8018e3e <memset>
    
    /* Compute SENSB_REQ */
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 80139a8:	2305      	movs	r3, #5
 80139aa:	743b      	strb	r3, [r7, #16]
    sensbReq.AFI   = gRfalNfcb.AFI;
 80139ac:	4b1f      	ldr	r3, [pc, #124]	; (8013a2c <rfalNfcbPollerCheckPresence+0xc8>)
 80139ae:	781b      	ldrb	r3, [r3, #0]
 80139b0:	747b      	strb	r3, [r7, #17]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 80139b2:	4b1e      	ldr	r3, [pc, #120]	; (8013a2c <rfalNfcbPollerCheckPresence+0xc8>)
 80139b4:	785b      	ldrb	r3, [r3, #1]
 80139b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80139ba:	b2da      	uxtb	r2, r3
 80139bc:	7bfb      	ldrb	r3, [r7, #15]
 80139be:	4313      	orrs	r3, r2
 80139c0:	b2da      	uxtb	r2, r3
 80139c2:	7bbb      	ldrb	r3, [r7, #14]
 80139c4:	4313      	orrs	r3, r2
 80139c6:	b2db      	uxtb	r3, r3
 80139c8:	74bb      	strb	r3, [r7, #18]
    
    /* Send SENSB_REQ and disable AGC to detect collisions */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 80139ca:	f107 0010 	add.w	r0, r7, #16
 80139ce:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80139d2:	9302      	str	r3, [sp, #8]
 80139d4:	2300      	movs	r3, #0
 80139d6:	9301      	str	r3, [sp, #4]
 80139d8:	f107 0314 	add.w	r3, r7, #20
 80139dc:	9300      	str	r3, [sp, #0]
 80139de:	230d      	movs	r3, #13
 80139e0:	68ba      	ldr	r2, [r7, #8]
 80139e2:	2103      	movs	r1, #3
 80139e4:	f002 faf0 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 80139e8:	4603      	mov	r3, r0
 80139ea:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 80139ec:	8abb      	ldrh	r3, [r7, #20]
 80139ee:	b2da      	uxtb	r2, r3
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	701a      	strb	r2, [r3, #0]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 80139f4:	8afb      	ldrh	r3, [r7, #22]
 80139f6:	2b15      	cmp	r3, #21
 80139f8:	d002      	beq.n	8013a00 <rfalNfcbPollerCheckPresence+0x9c>
 80139fa:	8afb      	ldrh	r3, [r7, #22]
 80139fc:	2b09      	cmp	r3, #9
 80139fe:	d104      	bne.n	8013a0a <rfalNfcbPollerCheckPresence+0xa6>
    {
        /* Invalidate received frame as an error was detected (CollisionResolution checks if valid) */
        *sensbResLen = 0;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2200      	movs	r2, #0
 8013a04:	701a      	strb	r2, [r3, #0]
        return ERR_NONE;
 8013a06:	2300      	movs	r3, #0
 8013a08:	e00b      	b.n	8013a22 <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    if( ret == ERR_NONE )
 8013a0a:	8afb      	ldrh	r3, [r7, #22]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d107      	bne.n	8013a20 <rfalNfcbPollerCheckPresence+0xbc>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	781b      	ldrb	r3, [r3, #0]
 8013a14:	4619      	mov	r1, r3
 8013a16:	68b8      	ldr	r0, [r7, #8]
 8013a18:	f7ff ff57 	bl	80138ca <rfalNfcbCheckSensbRes>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	e000      	b.n	8013a22 <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    return ret;
 8013a20:	8afb      	ldrh	r3, [r7, #22]
}
 8013a22:	4618      	mov	r0, r3
 8013a24:	3718      	adds	r7, #24
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}
 8013a2a:	bf00      	nop
 8013a2c:	20003554 	.word	0x20003554

08013a30 <rfalNfcbPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSleep( const uint8_t* nfcid0 )
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b08a      	sub	sp, #40	; 0x28
 8013a34:	af04      	add	r7, sp, #16
 8013a36:	6078      	str	r0, [r7, #4]
    uint16_t        rxLen;
    ReturnCode      ret;
    rfalNfcbSlpbReq slpbReq;
    rfalNfcbSlpbRes slpbRes;
    
    if( nfcid0 == NULL )
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d101      	bne.n	8013a42 <rfalNfcbPollerSleep+0x12>
    {
        return ERR_PARAM;
 8013a3e:	2307      	movs	r3, #7
 8013a40:	e024      	b.n	8013a8c <rfalNfcbPollerSleep+0x5c>
    }
    
    /* Compute SLPB_REQ */
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 8013a42:	2350      	movs	r3, #80	; 0x50
 8013a44:	733b      	strb	r3, [r7, #12]
    ST_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	f8c7 300d 	str.w	r3, [r7, #13]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 8013a4e:	f107 0208 	add.w	r2, r7, #8
 8013a52:	f107 000c 	add.w	r0, r7, #12
 8013a56:	4b0f      	ldr	r3, [pc, #60]	; (8013a94 <rfalNfcbPollerSleep+0x64>)
 8013a58:	9302      	str	r3, [sp, #8]
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	9301      	str	r3, [sp, #4]
 8013a5e:	f107 0314 	add.w	r3, r7, #20
 8013a62:	9300      	str	r3, [sp, #0]
 8013a64:	2301      	movs	r3, #1
 8013a66:	2105      	movs	r1, #5
 8013a68:	f002 faae 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	82fb      	strh	r3, [r7, #22]
 8013a70:	8afb      	ldrh	r3, [r7, #22]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d001      	beq.n	8013a7a <rfalNfcbPollerSleep+0x4a>
 8013a76:	8afb      	ldrh	r3, [r7, #22]
 8013a78:	e008      	b.n	8013a8c <rfalNfcbPollerSleep+0x5c>
    
    /* Check SLPB_RES */
    if( (rxLen != sizeof(rfalNfcbSlpbRes)) || (slpbRes.cmd != (uint8_t)RFAL_NFCB_CMD_SLPB_RES) )
 8013a7a:	8abb      	ldrh	r3, [r7, #20]
 8013a7c:	2b01      	cmp	r3, #1
 8013a7e:	d102      	bne.n	8013a86 <rfalNfcbPollerSleep+0x56>
 8013a80:	7a3b      	ldrb	r3, [r7, #8]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d001      	beq.n	8013a8a <rfalNfcbPollerSleep+0x5a>
    {
        return ERR_PROTO;
 8013a86:	230b      	movs	r3, #11
 8013a88:	e000      	b.n	8013a8c <rfalNfcbPollerSleep+0x5c>
    }
    return ERR_NONE;
 8013a8a:	2300      	movs	r3, #0
}
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	3718      	adds	r7, #24
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd80      	pop	{r7, pc}
 8013a94:	0003a278 	.word	0x0003a278

08013a98 <rfalNfcbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlotMarker( uint8_t slotCode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b08a      	sub	sp, #40	; 0x28
 8013a9c:	af04      	add	r7, sp, #16
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	60b9      	str	r1, [r7, #8]
 8013aa2:	607a      	str	r2, [r7, #4]
 8013aa4:	73fb      	strb	r3, [r7, #15]
    ReturnCode         ret;
    rfalNfcbSlotMarker slotMarker;
    uint16_t           rxLen;
    
    /* Check parameters */
    if( (sensbRes == NULL) || (sensbResLen == NULL)    || 
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d008      	beq.n	8013abe <rfalNfcbPollerSlotMarker+0x26>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d005      	beq.n	8013abe <rfalNfcbPollerSlotMarker+0x26>
 8013ab2:	7bfb      	ldrb	r3, [r7, #15]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d002      	beq.n	8013abe <rfalNfcbPollerSlotMarker+0x26>
        (slotCode < RFAL_NFCB_SLOTMARKER_SLOTCODE_MIN) || 
 8013ab8:	7bfb      	ldrb	r3, [r7, #15]
 8013aba:	2b10      	cmp	r3, #16
 8013abc:	d901      	bls.n	8013ac2 <rfalNfcbPollerSlotMarker+0x2a>
        (slotCode > RFAL_NFCB_SLOTMARKER_SLOTCODE_MAX)   )
    {
        return ERR_PARAM;
 8013abe:	2307      	movs	r3, #7
 8013ac0:	e02f      	b.n	8013b22 <rfalNfcbPollerSlotMarker+0x8a>
    }
    /* Compose and send SLOT_MARKER with disabled AGC to detect collisions  */
    slotMarker.APn = ((slotCode << RFAL_NFCB_SLOT_MARKER_SC_SHIFT) | (uint8_t)RFAL_NFCB_CMD_SENSB_REQ);
 8013ac2:	7bfb      	ldrb	r3, [r7, #15]
 8013ac4:	011b      	lsls	r3, r3, #4
 8013ac6:	b25b      	sxtb	r3, r3
 8013ac8:	f043 0305 	orr.w	r3, r3, #5
 8013acc:	b25b      	sxtb	r3, r3
 8013ace:	b2db      	uxtb	r3, r3
 8013ad0:	753b      	strb	r3, [r7, #20]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, sizeof(rfalNfcbSlotMarker), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT );
 8013ad2:	f107 0014 	add.w	r0, r7, #20
 8013ad6:	4b15      	ldr	r3, [pc, #84]	; (8013b2c <rfalNfcbPollerSlotMarker+0x94>)
 8013ad8:	9302      	str	r3, [sp, #8]
 8013ada:	2300      	movs	r3, #0
 8013adc:	9301      	str	r3, [sp, #4]
 8013ade:	f107 0312 	add.w	r3, r7, #18
 8013ae2:	9300      	str	r3, [sp, #0]
 8013ae4:	230d      	movs	r3, #13
 8013ae6:	68ba      	ldr	r2, [r7, #8]
 8013ae8:	2101      	movs	r1, #1
 8013aea:	f002 fa6d 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 8013aee:	4603      	mov	r3, r0
 8013af0:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 8013af2:	8a7b      	ldrh	r3, [r7, #18]
 8013af4:	b2da      	uxtb	r2, r3
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	701a      	strb	r2, [r3, #0]
    
    /* Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8013afa:	8afb      	ldrh	r3, [r7, #22]
 8013afc:	2b15      	cmp	r3, #21
 8013afe:	d002      	beq.n	8013b06 <rfalNfcbPollerSlotMarker+0x6e>
 8013b00:	8afb      	ldrh	r3, [r7, #22]
 8013b02:	2b09      	cmp	r3, #9
 8013b04:	d101      	bne.n	8013b0a <rfalNfcbPollerSlotMarker+0x72>
    {
        return ERR_RF_COLLISION;
 8013b06:	231d      	movs	r3, #29
 8013b08:	e00b      	b.n	8013b22 <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    if( ret == ERR_NONE )
 8013b0a:	8afb      	ldrh	r3, [r7, #22]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d107      	bne.n	8013b20 <rfalNfcbPollerSlotMarker+0x88>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	781b      	ldrb	r3, [r3, #0]
 8013b14:	4619      	mov	r1, r3
 8013b16:	68b8      	ldr	r0, [r7, #8]
 8013b18:	f7ff fed7 	bl	80138ca <rfalNfcbCheckSensbRes>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	e000      	b.n	8013b22 <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    return ret;
 8013b20:	8afb      	ldrh	r3, [r7, #22]
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	3718      	adds	r7, #24
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}
 8013b2a:	bf00      	nop
 8013b2c:	0003a278 	.word	0x0003a278

08013b30 <rfalNfcbPollerTechnologyDetection>:


ReturnCode rfalNfcbPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b084      	sub	sp, #16
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	4603      	mov	r3, r0
 8013b38:	60b9      	str	r1, [r7, #8]
 8013b3a:	607a      	str	r2, [r7, #4]
 8013b3c:	73fb      	strb	r3, [r7, #15]
    NO_WARNING(compMode);
    
    return rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	68ba      	ldr	r2, [r7, #8]
 8013b42:	2100      	movs	r1, #0
 8013b44:	2000      	movs	r0, #0
 8013b46:	f7ff ff0d 	bl	8013964 <rfalNfcbPollerCheckPresence>
 8013b4a:	4603      	mov	r3, r0
}
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	3710      	adds	r7, #16
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}

08013b54 <rfalNfcbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt )
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b08a      	sub	sp, #40	; 0x28
 8013b58:	af04      	add	r7, sp, #16
 8013b5a:	60ba      	str	r2, [r7, #8]
 8013b5c:	607b      	str	r3, [r7, #4]
 8013b5e:	4603      	mov	r3, r0
 8013b60:	73fb      	strb	r3, [r7, #15]
 8013b62:	460b      	mov	r3, r1
 8013b64:	73bb      	strb	r3, [r7, #14]
    bool colPending; /* dummy */
    return rfalNfcbPollerSlottedCollisionResolution( compMode, devLimit, RFAL_NFCB_SLOT_NUM_1, RFAL_NFCB_SLOT_NUM_16, nfcbDevList, devCnt, &colPending );
 8013b66:	7bb9      	ldrb	r1, [r7, #14]
 8013b68:	7bf8      	ldrb	r0, [r7, #15]
 8013b6a:	f107 0317 	add.w	r3, r7, #23
 8013b6e:	9302      	str	r3, [sp, #8]
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	9301      	str	r3, [sp, #4]
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	9300      	str	r3, [sp, #0]
 8013b78:	2304      	movs	r3, #4
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	f000 f805 	bl	8013b8a <rfalNfcbPollerSlottedCollisionResolution>
 8013b80:	4603      	mov	r3, r0
}
 8013b82:	4618      	mov	r0, r3
 8013b84:	3718      	adds	r7, #24
 8013b86:	46bd      	mov	sp, r7
 8013b88:	bd80      	pop	{r7, pc}

08013b8a <rfalNfcbPollerSlottedCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlottedCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbSlots initSlots, rfalNfcbSlots endSlots, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt, bool *colPending )
{
 8013b8a:	b590      	push	{r4, r7, lr}
 8013b8c:	b085      	sub	sp, #20
 8013b8e:	af00      	add	r7, sp, #0
 8013b90:	4604      	mov	r4, r0
 8013b92:	4608      	mov	r0, r1
 8013b94:	4611      	mov	r1, r2
 8013b96:	461a      	mov	r2, r3
 8013b98:	4623      	mov	r3, r4
 8013b9a:	71fb      	strb	r3, [r7, #7]
 8013b9c:	4603      	mov	r3, r0
 8013b9e:	71bb      	strb	r3, [r7, #6]
 8013ba0:	460b      	mov	r3, r1
 8013ba2:	717b      	strb	r3, [r7, #5]
 8013ba4:	4613      	mov	r3, r2
 8013ba6:	713b      	strb	r3, [r7, #4]
        uint8_t       slotCode;
        uint8_t       curDevCnt;
        
        
        /* Check parameters. In ISO | Activity 1.0 mode the initial slots must be 1 as continuation of Technology Detection */
        if( (nfcbDevList == NULL) || (devCnt == NULL)  || (colPending == NULL) || (initSlots > RFAL_NFCB_SLOT_NUM_16) || 
 8013ba8:	6a3b      	ldr	r3, [r7, #32]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d011      	beq.n	8013bd2 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 8013bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d00e      	beq.n	8013bd2 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 8013bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d00b      	beq.n	8013bd2 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 8013bba:	797b      	ldrb	r3, [r7, #5]
 8013bbc:	2b04      	cmp	r3, #4
 8013bbe:	d808      	bhi.n	8013bd2 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 8013bc0:	793b      	ldrb	r3, [r7, #4]
 8013bc2:	2b04      	cmp	r3, #4
 8013bc4:	d805      	bhi.n	8013bd2 <rfalNfcbPollerSlottedCollisionResolution+0x48>
            (endSlots > RFAL_NFCB_SLOT_NUM_16) || ((compMode == RFAL_COMPLIANCE_MODE_ISO) && (initSlots != RFAL_NFCB_SLOT_NUM_1)) )
 8013bc6:	79fb      	ldrb	r3, [r7, #7]
 8013bc8:	2b02      	cmp	r3, #2
 8013bca:	d104      	bne.n	8013bd6 <rfalNfcbPollerSlottedCollisionResolution+0x4c>
 8013bcc:	797b      	ldrb	r3, [r7, #5]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d001      	beq.n	8013bd6 <rfalNfcbPollerSlottedCollisionResolution+0x4c>
        {
            return ERR_PARAM;
 8013bd2:	2307      	movs	r3, #7
 8013bd4:	e14c      	b.n	8013e70 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        /* Initialise as no error in case Activity 1.0 where the previous SENSB_RES from technology detection should be used */
        ret         = ERR_NONE;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	81fb      	strh	r3, [r7, #14]
        *devCnt     = 0;
 8013bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bdc:	2200      	movs	r2, #0
 8013bde:	701a      	strb	r2, [r3, #0]
        curDevCnt   = 0;
 8013be0:	2300      	movs	r3, #0
 8013be2:	72fb      	strb	r3, [r7, #11]
        *colPending = false;
 8013be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be6:	2200      	movs	r2, #0
 8013be8:	701a      	strb	r2, [r3, #0]
           
        
        /* Send ALLB_REQ   Activity 1.1   9.3.5.2 and 9.3.5.3  (Symbol 1 and 2) */
        if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 8013bea:	79fb      	ldrb	r3, [r7, #7]
 8013bec:	2b02      	cmp	r3, #2
 8013bee:	d010      	beq.n	8013c12 <rfalNfcbPollerSlottedCollisionResolution+0x88>
        {
           ret =  rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, initSlots, &nfcbDevList->sensbRes, &nfcbDevList->sensbResLen );
 8013bf0:	6a3b      	ldr	r3, [r7, #32]
 8013bf2:	1c5a      	adds	r2, r3, #1
 8013bf4:	6a3b      	ldr	r3, [r7, #32]
 8013bf6:	7979      	ldrb	r1, [r7, #5]
 8013bf8:	2008      	movs	r0, #8
 8013bfa:	f7ff feb3 	bl	8013964 <rfalNfcbPollerCheckPresence>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	81fb      	strh	r3, [r7, #14]
           if( (ret != ERR_NONE) && (initSlots == RFAL_NFCB_SLOT_NUM_1) )
 8013c02:	89fb      	ldrh	r3, [r7, #14]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d004      	beq.n	8013c12 <rfalNfcbPollerSlottedCollisionResolution+0x88>
 8013c08:	797b      	ldrb	r3, [r7, #5]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d101      	bne.n	8013c12 <rfalNfcbPollerSlottedCollisionResolution+0x88>
           {
               return ret;
 8013c0e:	89fb      	ldrh	r3, [r7, #14]
 8013c10:	e12e      	b.n	8013e70 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
           }
        }

        
        /* Check if there was a transmission error on WUPB  EMVCo 2.6  9.3.3.1 */
        if( (compMode == RFAL_COMPLIANCE_MODE_EMV) && (nfcbDevList->sensbResLen == 0U) )
 8013c12:	79fb      	ldrb	r3, [r7, #7]
 8013c14:	2b01      	cmp	r3, #1
 8013c16:	d105      	bne.n	8013c24 <rfalNfcbPollerSlottedCollisionResolution+0x9a>
 8013c18:	6a3b      	ldr	r3, [r7, #32]
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d101      	bne.n	8013c24 <rfalNfcbPollerSlottedCollisionResolution+0x9a>
        {
            return ERR_FRAMING;
 8013c20:	2309      	movs	r3, #9
 8013c22:	e125      	b.n	8013e70 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 8013c24:	797b      	ldrb	r3, [r7, #5]
 8013c26:	737b      	strb	r3, [r7, #13]
 8013c28:	e11c      	b.n	8013e64 <rfalNfcbPollerSlottedCollisionResolution+0x2da>
        {
            do {
                /* Activity 1.1  9.3.5.23  -  Symbol 22 */
                if( (compMode == RFAL_COMPLIANCE_MODE_NFC) && (curDevCnt != 0U) )
 8013c2a:	79fb      	ldrb	r3, [r7, #7]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d11a      	bne.n	8013c66 <rfalNfcbPollerSlottedCollisionResolution+0xdc>
 8013c30:	7afb      	ldrb	r3, [r7, #11]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d017      	beq.n	8013c66 <rfalNfcbPollerSlottedCollisionResolution+0xdc>
                {
                    rfalNfcbPollerSleep( nfcbDevList[(*devCnt-1U)].sensbRes.nfcid0 );
 8013c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c38:	781b      	ldrb	r3, [r3, #0]
 8013c3a:	461a      	mov	r2, r3
 8013c3c:	4613      	mov	r3, r2
 8013c3e:	011b      	lsls	r3, r3, #4
 8013c40:	1a9b      	subs	r3, r3, r2
 8013c42:	3b0f      	subs	r3, #15
 8013c44:	6a3a      	ldr	r2, [r7, #32]
 8013c46:	4413      	add	r3, r2
 8013c48:	3302      	adds	r3, #2
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f7ff fef0 	bl	8013a30 <rfalNfcbPollerSleep>
                    nfcbDevList[(*devCnt-1U)].isSleep = true;
 8013c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c52:	781b      	ldrb	r3, [r3, #0]
 8013c54:	461a      	mov	r2, r3
 8013c56:	4613      	mov	r3, r2
 8013c58:	011b      	lsls	r3, r3, #4
 8013c5a:	1a9b      	subs	r3, r3, r2
 8013c5c:	3b0f      	subs	r3, #15
 8013c5e:	6a3a      	ldr	r2, [r7, #32]
 8013c60:	4413      	add	r3, r2
 8013c62:	2201      	movs	r2, #1
 8013c64:	739a      	strb	r2, [r3, #14]
                }
                
                /* Send SENSB_REQ with number of slots if not the first Activity 1.1  9.3.5.24  -  Symbol 23 */
                if( (slotsNum != (uint8_t)initSlots) || *colPending )
 8013c66:	7b7a      	ldrb	r2, [r7, #13]
 8013c68:	797b      	ldrb	r3, [r7, #5]
 8013c6a:	429a      	cmp	r2, r3
 8013c6c:	d103      	bne.n	8013c76 <rfalNfcbPollerSlottedCollisionResolution+0xec>
 8013c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c70:	781b      	ldrb	r3, [r3, #0]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d017      	beq.n	8013ca6 <rfalNfcbPollerSlottedCollisionResolution+0x11c>
                {
                    /* PRQA S 4342 1 # MISRA 10.5 - Layout of rfalNfcbSlots and above loop guarantee that no invalid enum values are created. */
                    ret = rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, (rfalNfcbSlots)slotsNum, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 8013c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c78:	781b      	ldrb	r3, [r3, #0]
 8013c7a:	461a      	mov	r2, r3
 8013c7c:	4613      	mov	r3, r2
 8013c7e:	011b      	lsls	r3, r3, #4
 8013c80:	1a9b      	subs	r3, r3, r2
 8013c82:	6a3a      	ldr	r2, [r7, #32]
 8013c84:	4413      	add	r3, r2
 8013c86:	1c58      	adds	r0, r3, #1
 8013c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c8a:	781b      	ldrb	r3, [r3, #0]
 8013c8c:	461a      	mov	r2, r3
 8013c8e:	4613      	mov	r3, r2
 8013c90:	011b      	lsls	r3, r3, #4
 8013c92:	1a9b      	subs	r3, r3, r2
 8013c94:	6a3a      	ldr	r2, [r7, #32]
 8013c96:	4413      	add	r3, r2
 8013c98:	7b79      	ldrb	r1, [r7, #13]
 8013c9a:	4602      	mov	r2, r0
 8013c9c:	2000      	movs	r0, #0
 8013c9e:	f7ff fe61 	bl	8013964 <rfalNfcbPollerCheckPresence>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	81fb      	strh	r3, [r7, #14]
                }
                
                /* Activity 1.1  9.3.5.6  -  Symbol 5 */
                slotCode    = 0;
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	733b      	strb	r3, [r7, #12]
                curDevCnt   = 0;
 8013caa:	2300      	movs	r3, #0
 8013cac:	72fb      	strb	r3, [r7, #11]
                *colPending = false;
 8013cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	701a      	strb	r2, [r3, #0]

                do{
                    /* Activity 1.1  9.3.5.26  -  Symbol 25 */
                    if( slotCode != 0U )
 8013cb4:	7b3b      	ldrb	r3, [r7, #12]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d017      	beq.n	8013cea <rfalNfcbPollerSlottedCollisionResolution+0x160>
                    {
                        ret = rfalNfcbPollerSlotMarker( slotCode, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 8013cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cbc:	781b      	ldrb	r3, [r3, #0]
 8013cbe:	461a      	mov	r2, r3
 8013cc0:	4613      	mov	r3, r2
 8013cc2:	011b      	lsls	r3, r3, #4
 8013cc4:	1a9b      	subs	r3, r3, r2
 8013cc6:	6a3a      	ldr	r2, [r7, #32]
 8013cc8:	4413      	add	r3, r2
 8013cca:	1c59      	adds	r1, r3, #1
 8013ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	461a      	mov	r2, r3
 8013cd2:	4613      	mov	r3, r2
 8013cd4:	011b      	lsls	r3, r3, #4
 8013cd6:	1a9b      	subs	r3, r3, r2
 8013cd8:	6a3a      	ldr	r2, [r7, #32]
 8013cda:	4413      	add	r3, r2
 8013cdc:	461a      	mov	r2, r3
 8013cde:	7b3b      	ldrb	r3, [r7, #12]
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7ff fed9 	bl	8013a98 <rfalNfcbPollerSlotMarker>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	81fb      	strh	r3, [r7, #14]
                    }
                    
                    /* Activity 1.1  9.3.5.7 and 9.3.5.8  -  Symbol 6 */
                    if( ret != ERR_TIMEOUT )
 8013cea:	89fb      	ldrh	r3, [r7, #14]
 8013cec:	2b04      	cmp	r3, #4
 8013cee:	f000 809d 	beq.w	8013e2c <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                    {
                        /* Activity 1.1  9.3.5.8  -  Symbol 7 */
                        if( (rfalNfcbCheckSensbRes( &nfcbDevList[*devCnt].sensbRes, nfcbDevList[*devCnt].sensbResLen) == ERR_NONE) && (ret == ERR_NONE) )
 8013cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf4:	781b      	ldrb	r3, [r3, #0]
 8013cf6:	461a      	mov	r2, r3
 8013cf8:	4613      	mov	r3, r2
 8013cfa:	011b      	lsls	r3, r3, #4
 8013cfc:	1a9b      	subs	r3, r3, r2
 8013cfe:	6a3a      	ldr	r2, [r7, #32]
 8013d00:	4413      	add	r3, r2
 8013d02:	1c58      	adds	r0, r3, #1
 8013d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d06:	781b      	ldrb	r3, [r3, #0]
 8013d08:	461a      	mov	r2, r3
 8013d0a:	4613      	mov	r3, r2
 8013d0c:	011b      	lsls	r3, r3, #4
 8013d0e:	1a9b      	subs	r3, r3, r2
 8013d10:	6a3a      	ldr	r2, [r7, #32]
 8013d12:	4413      	add	r3, r2
 8013d14:	781b      	ldrb	r3, [r3, #0]
 8013d16:	4619      	mov	r1, r3
 8013d18:	f7ff fdd7 	bl	80138ca <rfalNfcbCheckSensbRes>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d177      	bne.n	8013e12 <rfalNfcbPollerSlottedCollisionResolution+0x288>
 8013d22:	89fb      	ldrh	r3, [r7, #14]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d174      	bne.n	8013e12 <rfalNfcbPollerSlottedCollisionResolution+0x288>
                        {
                            nfcbDevList[*devCnt].isSleep = false;
 8013d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d2a:	781b      	ldrb	r3, [r3, #0]
 8013d2c:	461a      	mov	r2, r3
 8013d2e:	4613      	mov	r3, r2
 8013d30:	011b      	lsls	r3, r3, #4
 8013d32:	1a9b      	subs	r3, r3, r2
 8013d34:	6a3a      	ldr	r2, [r7, #32]
 8013d36:	4413      	add	r3, r2
 8013d38:	2200      	movs	r2, #0
 8013d3a:	739a      	strb	r2, [r3, #14]
                            
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 8013d3c:	79fb      	ldrb	r3, [r7, #7]
 8013d3e:	2b01      	cmp	r3, #1
 8013d40:	d107      	bne.n	8013d52 <rfalNfcbPollerSlottedCollisionResolution+0x1c8>
                            {
                                (*devCnt)++;
 8013d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d44:	781b      	ldrb	r3, [r3, #0]
 8013d46:	3301      	adds	r3, #1
 8013d48:	b2da      	uxtb	r2, r3
 8013d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d4c:	701a      	strb	r2, [r3, #0]
                                return ret;
 8013d4e:	89fb      	ldrh	r3, [r7, #14]
 8013d50:	e08e      	b.n	8013e70 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_ISO )
 8013d52:	79fb      	ldrb	r3, [r7, #7]
 8013d54:	2b02      	cmp	r3, #2
 8013d56:	d12b      	bne.n	8013db0 <rfalNfcbPollerSlottedCollisionResolution+0x226>
                            {
                                /* Activity 1.0  9.3.5.8  -  Symbol 7 */
                                (*devCnt)++;
 8013d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d5a:	781b      	ldrb	r3, [r3, #0]
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	b2da      	uxtb	r2, r3
 8013d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d62:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 8013d64:	7afb      	ldrb	r3, [r7, #11]
 8013d66:	3301      	adds	r3, #1
 8013d68:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.0  9.3.5.10  -  Symbol 9 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8013d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d6c:	781b      	ldrb	r3, [r3, #0]
 8013d6e:	79ba      	ldrb	r2, [r7, #6]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d902      	bls.n	8013d7a <rfalNfcbPollerSlottedCollisionResolution+0x1f0>
 8013d74:	7b7b      	ldrb	r3, [r7, #13]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d101      	bne.n	8013d7e <rfalNfcbPollerSlottedCollisionResolution+0x1f4>
                                {
                                    return ret;
 8013d7a:	89fb      	ldrh	r3, [r7, #14]
 8013d7c:	e078      	b.n	8013e70 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                                }

                                /* Activity 1.0  9.3.5.11  -  Symbol 10 */
                                rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 8013d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	461a      	mov	r2, r3
 8013d84:	4613      	mov	r3, r2
 8013d86:	011b      	lsls	r3, r3, #4
 8013d88:	1a9b      	subs	r3, r3, r2
 8013d8a:	3b0f      	subs	r3, #15
 8013d8c:	6a3a      	ldr	r2, [r7, #32]
 8013d8e:	4413      	add	r3, r2
 8013d90:	3302      	adds	r3, #2
 8013d92:	4618      	mov	r0, r3
 8013d94:	f7ff fe4c 	bl	8013a30 <rfalNfcbPollerSleep>
                                nfcbDevList[*devCnt-1U].isSleep =  true;
 8013d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9a:	781b      	ldrb	r3, [r3, #0]
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	4613      	mov	r3, r2
 8013da0:	011b      	lsls	r3, r3, #4
 8013da2:	1a9b      	subs	r3, r3, r2
 8013da4:	3b0f      	subs	r3, #15
 8013da6:	6a3a      	ldr	r2, [r7, #32]
 8013da8:	4413      	add	r3, r2
 8013daa:	2201      	movs	r2, #1
 8013dac:	739a      	strb	r2, [r3, #14]
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 8013dae:	e03c      	b.n	8013e2a <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 8013db0:	79fb      	ldrb	r3, [r7, #7]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d139      	bne.n	8013e2a <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            {
                                /* Activity 1.1  9.3.5.10 and 9.3.5.11  -  Symbol 9 and Symbol 11*/
                                if(curDevCnt != 0U)
 8013db6:	7afb      	ldrb	r3, [r7, #11]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d017      	beq.n	8013dec <rfalNfcbPollerSlottedCollisionResolution+0x262>
                                {
                                    rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 8013dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dbe:	781b      	ldrb	r3, [r3, #0]
 8013dc0:	461a      	mov	r2, r3
 8013dc2:	4613      	mov	r3, r2
 8013dc4:	011b      	lsls	r3, r3, #4
 8013dc6:	1a9b      	subs	r3, r3, r2
 8013dc8:	3b0f      	subs	r3, #15
 8013dca:	6a3a      	ldr	r2, [r7, #32]
 8013dcc:	4413      	add	r3, r2
 8013dce:	3302      	adds	r3, #2
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f7ff fe2d 	bl	8013a30 <rfalNfcbPollerSleep>
                                    nfcbDevList[*devCnt-1U].isSleep = true;
 8013dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd8:	781b      	ldrb	r3, [r3, #0]
 8013dda:	461a      	mov	r2, r3
 8013ddc:	4613      	mov	r3, r2
 8013dde:	011b      	lsls	r3, r3, #4
 8013de0:	1a9b      	subs	r3, r3, r2
 8013de2:	3b0f      	subs	r3, #15
 8013de4:	6a3a      	ldr	r2, [r7, #32]
 8013de6:	4413      	add	r3, r2
 8013de8:	2201      	movs	r2, #1
 8013dea:	739a      	strb	r2, [r3, #14]
                                }
                                
                                /* Activity 1.1  9.3.5.12  -  Symbol 11 */
                                (*devCnt)++;
 8013dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dee:	781b      	ldrb	r3, [r3, #0]
 8013df0:	3301      	adds	r3, #1
 8013df2:	b2da      	uxtb	r2, r3
 8013df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df6:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 8013df8:	7afb      	ldrb	r3, [r7, #11]
 8013dfa:	3301      	adds	r3, #1
 8013dfc:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.1  9.3.5.6  -  Symbol 13 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8013dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e00:	781b      	ldrb	r3, [r3, #0]
 8013e02:	79ba      	ldrb	r2, [r7, #6]
 8013e04:	429a      	cmp	r2, r3
 8013e06:	d902      	bls.n	8013e0e <rfalNfcbPollerSlottedCollisionResolution+0x284>
 8013e08:	7b7b      	ldrb	r3, [r7, #13]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d10d      	bne.n	8013e2a <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                                {
                                    return ret;
 8013e0e:	89fb      	ldrh	r3, [r7, #14]
 8013e10:	e02e      	b.n	8013e70 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                        }
                        else
                        {
                            /* If deviceLimit is set to 0 the NFC Forum Device is configured to perform collision detection only  Activity 1.0 and 1.1  9.3.5.5  - Symbol 4 */
                            if( (devLimit == 0U) && (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8013e12:	79bb      	ldrb	r3, [r7, #6]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d104      	bne.n	8013e22 <rfalNfcbPollerSlottedCollisionResolution+0x298>
 8013e18:	7b7b      	ldrb	r3, [r7, #13]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d101      	bne.n	8013e22 <rfalNfcbPollerSlottedCollisionResolution+0x298>
                            {
                                return ERR_RF_COLLISION;
 8013e1e:	231d      	movs	r3, #29
 8013e20:	e026      	b.n	8013e70 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            
                            /* Activity 1.1  9.3.5.9  -  Symbol 8 */
                            *colPending = true;
 8013e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e24:	2201      	movs	r2, #1
 8013e26:	701a      	strb	r2, [r3, #0]
 8013e28:	e000      	b.n	8013e2c <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 8013e2a:	bf00      	nop
                        }
                    }
                    
                    /* Activity 1.1  9.3.5.15  -  Symbol 14 */
                    slotCode++;
 8013e2c:	7b3b      	ldrb	r3, [r7, #12]
 8013e2e:	3301      	adds	r3, #1
 8013e30:	733b      	strb	r3, [r7, #12]
                }
                while( slotCode < rfalNfcbNI2NumberOfSlots(slotsNum) );
 8013e32:	7b7b      	ldrb	r3, [r7, #13]
 8013e34:	2201      	movs	r2, #1
 8013e36:	fa02 f303 	lsl.w	r3, r2, r3
 8013e3a:	b2db      	uxtb	r3, r3
 8013e3c:	7b3a      	ldrb	r2, [r7, #12]
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	f4ff af38 	bcc.w	8013cb4 <rfalNfcbPollerSlottedCollisionResolution+0x12a>
                
                /* Activity 1.1  9.3.5.17  -  Symbol 16 */
                if( !(*colPending) )
 8013e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e46:	781b      	ldrb	r3, [r3, #0]
 8013e48:	f083 0301 	eor.w	r3, r3, #1
 8013e4c:	b2db      	uxtb	r3, r3
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d001      	beq.n	8013e56 <rfalNfcbPollerSlottedCollisionResolution+0x2cc>
                {
                    return ERR_NONE;
 8013e52:	2300      	movs	r3, #0
 8013e54:	e00c      	b.n	8013e70 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                }
            
            /* Activity 1.1  9.3.5.18  -  Symbol 17 */
            } while (curDevCnt != 0U);     /* If a collision is detected and card(s) were found on this loop keep the same number of available slots */
 8013e56:	7afb      	ldrb	r3, [r7, #11]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	f47f aee6 	bne.w	8013c2a <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 8013e5e:	7b7b      	ldrb	r3, [r7, #13]
 8013e60:	3301      	adds	r3, #1
 8013e62:	737b      	strb	r3, [r7, #13]
 8013e64:	7b7a      	ldrb	r2, [r7, #13]
 8013e66:	793b      	ldrb	r3, [r7, #4]
 8013e68:	429a      	cmp	r2, r3
 8013e6a:	f67f aede 	bls.w	8013c2a <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        }
        
        return ERR_NONE;
 8013e6e:	2300      	movs	r3, #0
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	3714      	adds	r7, #20
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd90      	pop	{r4, r7, pc}

08013e78 <rfalNfcbTR2ToFDT>:


/*******************************************************************************/
uint32_t rfalNfcbTR2ToFDT( uint8_t tr2Code )
{
 8013e78:	b480      	push	{r7}
 8013e7a:	b085      	sub	sp, #20
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	4603      	mov	r3, r0
 8013e80:	71fb      	strb	r3, [r7, #7]
    /*******************************************************************************/
    /* MISRA 8.9 An object should be defined at block scope if its identifier only appears in a single function */
    /*! TR2 Table according to Digital 1.1 Table 33 */
    const uint16_t rfalNfcbTr2Table[] = { 1792, 3328, 5376, 9472 };
 8013e82:	4a0a      	ldr	r2, [pc, #40]	; (8013eac <rfalNfcbTR2ToFDT+0x34>)
 8013e84:	f107 0308 	add.w	r3, r7, #8
 8013e88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013e8c:	e883 0003 	stmia.w	r3, {r0, r1}
    /*******************************************************************************/

    return rfalNfcbTr2Table[ (tr2Code & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK) ];
 8013e90:	79fb      	ldrb	r3, [r7, #7]
 8013e92:	f003 0303 	and.w	r3, r3, #3
 8013e96:	005b      	lsls	r3, r3, #1
 8013e98:	f107 0210 	add.w	r2, r7, #16
 8013e9c:	4413      	add	r3, r2
 8013e9e:	f833 3c08 	ldrh.w	r3, [r3, #-8]
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3714      	adds	r7, #20
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bc80      	pop	{r7}
 8013eaa:	4770      	bx	lr
 8013eac:	0801a944 	.word	0x0801a944

08013eb0 <rfalNfcfComputeValidSENF>:
******************************************************************************
*/

/*******************************************************************************/
static void rfalNfcfComputeValidSENF( rfalNfcfListenDevice *outDevInfo, uint8_t *curDevIdx, uint8_t devLimit, bool overwrite, bool *nfcDepFound )
{
 8013eb0:	b5b0      	push	{r4, r5, r7, lr}
 8013eb2:	b08c      	sub	sp, #48	; 0x30
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	60f8      	str	r0, [r7, #12]
 8013eb8:	60b9      	str	r1, [r7, #8]
 8013eba:	4611      	mov	r1, r2
 8013ebc:	461a      	mov	r2, r3
 8013ebe:	460b      	mov	r3, r1
 8013ec0:	71fb      	strb	r3, [r7, #7]
 8013ec2:	4613      	mov	r3, r2
 8013ec4:	71bb      	strb	r3, [r7, #6]
    
    
    /*******************************************************************************/
    /* Go through all responses check if valid and duplicates                      */
    /*******************************************************************************/
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 8013ec6:	e0e5      	b.n	8014094 <rfalNfcfComputeValidSENF+0x1e4>
    {
        duplicate = false;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        gRfalNfcfGreedyF.pollFound--;
 8013ece:	4b78      	ldr	r3, [pc, #480]	; (80140b0 <rfalNfcfComputeValidSENF+0x200>)
 8013ed0:	781b      	ldrb	r3, [r3, #0]
 8013ed2:	3b01      	subs	r3, #1
 8013ed4:	b2da      	uxtb	r2, r3
 8013ed6:	4b76      	ldr	r3, [pc, #472]	; (80140b0 <rfalNfcfComputeValidSENF+0x200>)
 8013ed8:	701a      	strb	r2, [r3, #0]
        
        /* MISRA 11.3 - Cannot point directly into different object type, use local copy */
        ST_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gRfalNfcfGreedyF.POLL_F[gRfalNfcfGreedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 8013eda:	4b75      	ldr	r3, [pc, #468]	; (80140b0 <rfalNfcfComputeValidSENF+0x200>)
 8013edc:	781b      	ldrb	r3, [r3, #0]
 8013ede:	461a      	mov	r2, r3
 8013ee0:	4613      	mov	r3, r2
 8013ee2:	009b      	lsls	r3, r3, #2
 8013ee4:	4413      	add	r3, r2
 8013ee6:	009b      	lsls	r3, r3, #2
 8013ee8:	4a71      	ldr	r2, [pc, #452]	; (80140b0 <rfalNfcfComputeValidSENF+0x200>)
 8013eea:	4413      	add	r3, r2
 8013eec:	3302      	adds	r3, #2
 8013eee:	f107 0414 	add.w	r4, r7, #20
 8013ef2:	461d      	mov	r5, r3
 8013ef4:	6828      	ldr	r0, [r5, #0]
 8013ef6:	6869      	ldr	r1, [r5, #4]
 8013ef8:	68aa      	ldr	r2, [r5, #8]
 8013efa:	68eb      	ldr	r3, [r5, #12]
 8013efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013efe:	8a2b      	ldrh	r3, [r5, #16]
 8013f00:	7caa      	ldrb	r2, [r5, #18]
 8013f02:	8023      	strh	r3, [r4, #0]
 8013f04:	4613      	mov	r3, r2
 8013f06:	70a3      	strb	r3, [r4, #2]
        
        
        /* Point to received SENSF_RES */
        sensfBuf = &sensfCopy;
 8013f08:	f107 0314 	add.w	r3, r7, #20
 8013f0c:	62bb      	str	r3, [r7, #40]	; 0x28
        
        
        /* Check for devices that are already in device list */
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 8013f0e:	2300      	movs	r3, #0
 8013f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013f14:	e01b      	b.n	8013f4e <rfalNfcfComputeValidSENF+0x9e>
        {
            if( ST_BYTECMP( sensfBuf->SENSF_RES.NFCID2, outDevInfo[tmpIdx].sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) == 0 )
 8013f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f18:	1c98      	adds	r0, r3, #2
 8013f1a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013f1e:	4613      	mov	r3, r2
 8013f20:	00db      	lsls	r3, r3, #3
 8013f22:	4413      	add	r3, r2
 8013f24:	005b      	lsls	r3, r3, #1
 8013f26:	4413      	add	r3, r2
 8013f28:	68fa      	ldr	r2, [r7, #12]
 8013f2a:	4413      	add	r3, r2
 8013f2c:	3302      	adds	r3, #2
 8013f2e:	2208      	movs	r2, #8
 8013f30:	4619      	mov	r1, r3
 8013f32:	f004 ff51 	bl	8018dd8 <memcmp>
 8013f36:	4603      	mov	r3, r0
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d103      	bne.n	8013f44 <rfalNfcfComputeValidSENF+0x94>
            {
                duplicate = true;
 8013f3c:	2301      	movs	r3, #1
 8013f3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 8013f42:	e00a      	b.n	8013f5a <rfalNfcfComputeValidSENF+0xaa>
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 8013f44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f48:	3301      	adds	r3, #1
 8013f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	781b      	ldrb	r3, [r3, #0]
 8013f52:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013f56:	429a      	cmp	r2, r3
 8013f58:	d3dd      	bcc.n	8013f16 <rfalNfcfComputeValidSENF+0x66>
            }
        }
        
        /* If is a duplicate skip this (and not to overwrite)*/        
        if(duplicate && !overwrite)
 8013f5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d006      	beq.n	8013f70 <rfalNfcfComputeValidSENF+0xc0>
 8013f62:	79bb      	ldrb	r3, [r7, #6]
 8013f64:	f083 0301 	eor.w	r3, r3, #1
 8013f68:	b2db      	uxtb	r3, r3
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d000      	beq.n	8013f70 <rfalNfcfComputeValidSENF+0xc0>
        {
            continue;
 8013f6e:	e091      	b.n	8014094 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if response length is OK */
        if( (( sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) < RFAL_NFCF_SENSF_RES_LEN_MIN) || ((sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) > RFAL_NFCF_SENSF_RES_LEN_MAX) )
 8013f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f72:	781b      	ldrb	r3, [r3, #0]
 8013f74:	3b02      	subs	r3, #2
 8013f76:	2b0f      	cmp	r3, #15
 8013f78:	f240 808c 	bls.w	8014094 <rfalNfcfComputeValidSENF+0x1e4>
 8013f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f7e:	781b      	ldrb	r3, [r3, #0]
 8013f80:	3b02      	subs	r3, #2
 8013f82:	2b12      	cmp	r3, #18
 8013f84:	d900      	bls.n	8013f88 <rfalNfcfComputeValidSENF+0xd8>
        {
            continue;
 8013f86:	e085      	b.n	8014094 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if the response is a SENSF_RES / Polling response */
        if( sensfBuf->SENSF_RES.CMD != (uint8_t)RFAL_NFCF_CMD_POLLING_RES )
 8013f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f8a:	785b      	ldrb	r3, [r3, #1]
 8013f8c:	2b01      	cmp	r3, #1
 8013f8e:	d000      	beq.n	8013f92 <rfalNfcfComputeValidSENF+0xe2>
        {
            continue;
 8013f90:	e080      	b.n	8014094 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if is an overwrite request or new device*/
        if(duplicate && overwrite)
 8013f92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d02a      	beq.n	8013ff0 <rfalNfcfComputeValidSENF+0x140>
 8013f9a:	79bb      	ldrb	r3, [r7, #6]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d027      	beq.n	8013ff0 <rfalNfcfComputeValidSENF+0x140>
        {
            /* overwrite deviceInfo/GRE_SENSF_RES with SENSF_RES */
            outDevInfo[tmpIdx].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 8013fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fa2:	7819      	ldrb	r1, [r3, #0]
 8013fa4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013fa8:	4613      	mov	r3, r2
 8013faa:	00db      	lsls	r3, r3, #3
 8013fac:	4413      	add	r3, r2
 8013fae:	005b      	lsls	r3, r3, #1
 8013fb0:	4413      	add	r3, r2
 8013fb2:	68fa      	ldr	r2, [r7, #12]
 8013fb4:	4413      	add	r3, r2
 8013fb6:	1e4a      	subs	r2, r1, #1
 8013fb8:	b2d2      	uxtb	r2, r2
 8013fba:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[tmpIdx].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[tmpIdx].sensfResLen );
 8013fbc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013fc0:	4613      	mov	r3, r2
 8013fc2:	00db      	lsls	r3, r3, #3
 8013fc4:	4413      	add	r3, r2
 8013fc6:	005b      	lsls	r3, r3, #1
 8013fc8:	4413      	add	r3, r2
 8013fca:	68fa      	ldr	r2, [r7, #12]
 8013fcc:	4413      	add	r3, r2
 8013fce:	1c58      	adds	r0, r3, #1
 8013fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fd2:	1c59      	adds	r1, r3, #1
 8013fd4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013fd8:	4613      	mov	r3, r2
 8013fda:	00db      	lsls	r3, r3, #3
 8013fdc:	4413      	add	r3, r2
 8013fde:	005b      	lsls	r3, r3, #1
 8013fe0:	4413      	add	r3, r2
 8013fe2:	68fa      	ldr	r2, [r7, #12]
 8013fe4:	4413      	add	r3, r2
 8013fe6:	781b      	ldrb	r3, [r3, #0]
 8013fe8:	461a      	mov	r2, r3
 8013fea:	f004 ff04 	bl	8018df6 <memcpy>
            continue;
 8013fee:	e051      	b.n	8014094 <rfalNfcfComputeValidSENF+0x1e4>
        }
        else
        {
            /* fill deviceInfo/GRE_SENSF_RES with new SENSF_RES */
            outDevInfo[(*curDevIdx)].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 8013ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff2:	7819      	ldrb	r1, [r3, #0]
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	781b      	ldrb	r3, [r3, #0]
 8013ff8:	461a      	mov	r2, r3
 8013ffa:	4613      	mov	r3, r2
 8013ffc:	00db      	lsls	r3, r3, #3
 8013ffe:	4413      	add	r3, r2
 8014000:	005b      	lsls	r3, r3, #1
 8014002:	4413      	add	r3, r2
 8014004:	68fa      	ldr	r2, [r7, #12]
 8014006:	4413      	add	r3, r2
 8014008:	1e4a      	subs	r2, r1, #1
 801400a:	b2d2      	uxtb	r2, r2
 801400c:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[(*curDevIdx)].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[(*curDevIdx)].sensfResLen );            
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	781b      	ldrb	r3, [r3, #0]
 8014012:	461a      	mov	r2, r3
 8014014:	4613      	mov	r3, r2
 8014016:	00db      	lsls	r3, r3, #3
 8014018:	4413      	add	r3, r2
 801401a:	005b      	lsls	r3, r3, #1
 801401c:	4413      	add	r3, r2
 801401e:	68fa      	ldr	r2, [r7, #12]
 8014020:	4413      	add	r3, r2
 8014022:	1c58      	adds	r0, r3, #1
 8014024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014026:	1c59      	adds	r1, r3, #1
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	781b      	ldrb	r3, [r3, #0]
 801402c:	461a      	mov	r2, r3
 801402e:	4613      	mov	r3, r2
 8014030:	00db      	lsls	r3, r3, #3
 8014032:	4413      	add	r3, r2
 8014034:	005b      	lsls	r3, r3, #1
 8014036:	4413      	add	r3, r2
 8014038:	68fa      	ldr	r2, [r7, #12]
 801403a:	4413      	add	r3, r2
 801403c:	781b      	ldrb	r3, [r3, #0]
 801403e:	461a      	mov	r2, r3
 8014040:	f004 fed9 	bl	8018df6 <memcpy>
        }
        
        /* Check if this device supports NFC-DEP and signal it (ACTIVITY 1.1   9.3.6.63) */        
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	781b      	ldrb	r3, [r3, #0]
 8014048:	461a      	mov	r2, r3
 801404a:	4613      	mov	r3, r2
 801404c:	00db      	lsls	r3, r3, #3
 801404e:	4413      	add	r3, r2
 8014050:	005b      	lsls	r3, r3, #1
 8014052:	4413      	add	r3, r2
 8014054:	68fa      	ldr	r2, [r7, #12]
 8014056:	4413      	add	r3, r2
 8014058:	789b      	ldrb	r3, [r3, #2]
 801405a:	2b01      	cmp	r3, #1
 801405c:	d10e      	bne.n	801407c <rfalNfcfComputeValidSENF+0x1cc>
 801405e:	68bb      	ldr	r3, [r7, #8]
 8014060:	781b      	ldrb	r3, [r3, #0]
 8014062:	461a      	mov	r2, r3
 8014064:	4613      	mov	r3, r2
 8014066:	00db      	lsls	r3, r3, #3
 8014068:	4413      	add	r3, r2
 801406a:	005b      	lsls	r3, r3, #1
 801406c:	4413      	add	r3, r2
 801406e:	68fa      	ldr	r2, [r7, #12]
 8014070:	4413      	add	r3, r2
 8014072:	78db      	ldrb	r3, [r3, #3]
 8014074:	2bfe      	cmp	r3, #254	; 0xfe
 8014076:	d101      	bne.n	801407c <rfalNfcfComputeValidSENF+0x1cc>
 8014078:	2301      	movs	r3, #1
 801407a:	e000      	b.n	801407e <rfalNfcfComputeValidSENF+0x1ce>
 801407c:	2300      	movs	r3, #0
 801407e:	f003 0301 	and.w	r3, r3, #1
 8014082:	b2da      	uxtb	r2, r3
 8014084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014086:	701a      	strb	r2, [r3, #0]
                
        (*curDevIdx)++;
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	3301      	adds	r3, #1
 801408e:	b2da      	uxtb	r2, r3
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	701a      	strb	r2, [r3, #0]
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 8014094:	4b06      	ldr	r3, [pc, #24]	; (80140b0 <rfalNfcfComputeValidSENF+0x200>)
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d005      	beq.n	80140a8 <rfalNfcfComputeValidSENF+0x1f8>
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	781b      	ldrb	r3, [r3, #0]
 80140a0:	79fa      	ldrb	r2, [r7, #7]
 80140a2:	429a      	cmp	r2, r3
 80140a4:	f63f af10 	bhi.w	8013ec8 <rfalNfcfComputeValidSENF+0x18>
    }
}
 80140a8:	bf00      	nop
 80140aa:	3730      	adds	r7, #48	; 0x30
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bdb0      	pop	{r4, r5, r7, pc}
 80140b0:	20003558 	.word	0x20003558

080140b4 <rfalNfcfPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcfPollerInitialize( rfalBitRate bitRate )
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b084      	sub	sp, #16
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	4603      	mov	r3, r0
 80140bc:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 80140be:	79fb      	ldrb	r3, [r7, #7]
 80140c0:	2b01      	cmp	r3, #1
 80140c2:	d004      	beq.n	80140ce <rfalNfcfPollerInitialize+0x1a>
 80140c4:	79fb      	ldrb	r3, [r7, #7]
 80140c6:	2b02      	cmp	r3, #2
 80140c8:	d001      	beq.n	80140ce <rfalNfcfPollerInitialize+0x1a>
    {
        return ERR_PARAM;
 80140ca:	2307      	movs	r3, #7
 80140cc:	e01b      	b.n	8014106 <rfalNfcfPollerInitialize+0x52>
    }
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCF, bitRate, bitRate ) );
 80140ce:	79fa      	ldrb	r2, [r7, #7]
 80140d0:	79fb      	ldrb	r3, [r7, #7]
 80140d2:	4619      	mov	r1, r3
 80140d4:	2006      	movs	r0, #6
 80140d6:	f001 f949 	bl	801536c <rfalSetMode>
 80140da:	4603      	mov	r3, r0
 80140dc:	81fb      	strh	r3, [r7, #14]
 80140de:	89fb      	ldrh	r3, [r7, #14]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d001      	beq.n	80140e8 <rfalNfcfPollerInitialize+0x34>
 80140e4:	89fb      	ldrh	r3, [r7, #14]
 80140e6:	e00e      	b.n	8014106 <rfalNfcfPollerInitialize+0x52>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 80140e8:	2001      	movs	r0, #1
 80140ea:	f001 fcd9 	bl	8015aa0 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCF );
 80140ee:	4808      	ldr	r0, [pc, #32]	; (8014110 <rfalNfcfPollerInitialize+0x5c>)
 80140f0:	f001 fd0e 	bl	8015b10 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCF_POLLER );
 80140f4:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 80140f8:	f001 fcf6 	bl	8015ae8 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCF_POLLER );
 80140fc:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 8014100:	f001 fcde 	bl	8015ac0 <rfalSetFDTPoll>
    
    return ERR_NONE;
 8014104:	2300      	movs	r3, #0
}
 8014106:	4618      	mov	r0, r3
 8014108:	3710      	adds	r7, #16
 801410a:	46bd      	mov	sp, r7
 801410c:	bd80      	pop	{r7, pc}
 801410e:	bf00      	nop
 8014110:	00042360 	.word	0x00042360

08014114 <rfalNfcfPollerPoll>:



/*******************************************************************************/
ReturnCode rfalNfcfPollerPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes *cardList, uint8_t *devCnt, uint8_t *collisions )
{
 8014114:	b590      	push	{r4, r7, lr}
 8014116:	b087      	sub	sp, #28
 8014118:	af04      	add	r7, sp, #16
 801411a:	603b      	str	r3, [r7, #0]
 801411c:	4603      	mov	r3, r0
 801411e:	71fb      	strb	r3, [r7, #7]
 8014120:	460b      	mov	r3, r1
 8014122:	80bb      	strh	r3, [r7, #4]
 8014124:	4613      	mov	r3, r2
 8014126:	71bb      	strb	r3, [r7, #6]
    return rfalFeliCaPoll( slots, sysCode, reqCode, cardList, rfalNfcfSlots2CardNum(slots), devCnt, collisions );
 8014128:	79fb      	ldrb	r3, [r7, #7]
 801412a:	3301      	adds	r3, #1
 801412c:	b2db      	uxtb	r3, r3
 801412e:	79bc      	ldrb	r4, [r7, #6]
 8014130:	88b9      	ldrh	r1, [r7, #4]
 8014132:	79f8      	ldrb	r0, [r7, #7]
 8014134:	69fa      	ldr	r2, [r7, #28]
 8014136:	9202      	str	r2, [sp, #8]
 8014138:	69ba      	ldr	r2, [r7, #24]
 801413a:	9201      	str	r2, [sp, #4]
 801413c:	9300      	str	r3, [sp, #0]
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	4622      	mov	r2, r4
 8014142:	f003 f975 	bl	8017430 <rfalFeliCaPoll>
 8014146:	4603      	mov	r3, r0
}
 8014148:	4618      	mov	r0, r3
 801414a:	370c      	adds	r7, #12
 801414c:	46bd      	mov	sp, r7
 801414e:	bd90      	pop	{r4, r7, pc}

08014150 <rfalNfcfPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheckPresence( void )
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b084      	sub	sp, #16
 8014154:	af04      	add	r7, sp, #16
    gRfalNfcfGreedyF.pollFound     = 0;
 8014156:	4b0b      	ldr	r3, [pc, #44]	; (8014184 <rfalNfcfPollerCheckPresence+0x34>)
 8014158:	2200      	movs	r2, #0
 801415a:	701a      	strb	r2, [r3, #0]
    gRfalNfcfGreedyF.pollCollision = 0;
 801415c:	4b09      	ldr	r3, [pc, #36]	; (8014184 <rfalNfcfPollerCheckPresence+0x34>)
 801415e:	2200      	movs	r2, #0
 8014160:	705a      	strb	r2, [r3, #1]
        
    /* ACTIVITY 1.0 & 1.1 - 9.2.3.17 SENSF_REQ  must be with number of slots equal to 4
     *                                SC must be 0xFFFF
     *                                RC must be 0x00 (No system code info required) */
    return rfalFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 8014162:	4b09      	ldr	r3, [pc, #36]	; (8014188 <rfalNfcfPollerCheckPresence+0x38>)
 8014164:	9302      	str	r3, [sp, #8]
 8014166:	4b07      	ldr	r3, [pc, #28]	; (8014184 <rfalNfcfPollerCheckPresence+0x34>)
 8014168:	9301      	str	r3, [sp, #4]
 801416a:	2304      	movs	r3, #4
 801416c:	9300      	str	r3, [sp, #0]
 801416e:	4b07      	ldr	r3, [pc, #28]	; (801418c <rfalNfcfPollerCheckPresence+0x3c>)
 8014170:	2200      	movs	r2, #0
 8014172:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014176:	2003      	movs	r0, #3
 8014178:	f003 f95a 	bl	8017430 <rfalFeliCaPoll>
 801417c:	4603      	mov	r3, r0
}
 801417e:	4618      	mov	r0, r3
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}
 8014184:	20003558 	.word	0x20003558
 8014188:	20003559 	.word	0x20003559
 801418c:	2000355a 	.word	0x2000355a

08014190 <rfalNfcfPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcfListenDevice *nfcfDevList, uint8_t *devCnt )
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b088      	sub	sp, #32
 8014194:	af02      	add	r7, sp, #8
 8014196:	60ba      	str	r2, [r7, #8]
 8014198:	607b      	str	r3, [r7, #4]
 801419a:	4603      	mov	r3, r0
 801419c:	73fb      	strb	r3, [r7, #15]
 801419e:	460b      	mov	r3, r1
 80141a0:	73bb      	strb	r3, [r7, #14]
    ReturnCode  ret;
    bool        nfcDepFound;
    
    if( (nfcfDevList == NULL) || (devCnt == NULL) )
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d002      	beq.n	80141ae <rfalNfcfPollerCollisionResolution+0x1e>
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d101      	bne.n	80141b2 <rfalNfcfPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 80141ae:	2307      	movs	r3, #7
 80141b0:	e053      	b.n	801425a <rfalNfcfPollerCollisionResolution+0xca>
    }
            
    *devCnt      = 0;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	2200      	movs	r2, #0
 80141b6:	701a      	strb	r2, [r3, #0]
    nfcDepFound  = false;
 80141b8:	2300      	movs	r3, #0
 80141ba:	757b      	strb	r3, [r7, #21]
    /* ACTIVITY 1.1 - 9.3.63.59 Populate GRE_SENSF_RES with data from GRE_POLL_F               */
    /*                                                                                         */
    /* CON_DEVICES_LIMIT = 0 Just check if devices from Tech Detection exceeds -> always true  */
    /* Allow the number of slots open on Technology Detection                                  */
    /*******************************************************************************************/
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &nfcDepFound );
 80141bc:	7bbb      	ldrb	r3, [r7, #14]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d001      	beq.n	80141c6 <rfalNfcfPollerCollisionResolution+0x36>
 80141c2:	7bba      	ldrb	r2, [r7, #14]
 80141c4:	e000      	b.n	80141c8 <rfalNfcfPollerCollisionResolution+0x38>
 80141c6:	2204      	movs	r2, #4
 80141c8:	f107 0315 	add.w	r3, r7, #21
 80141cc:	9300      	str	r3, [sp, #0]
 80141ce:	2300      	movs	r3, #0
 80141d0:	6879      	ldr	r1, [r7, #4]
 80141d2:	68b8      	ldr	r0, [r7, #8]
 80141d4:	f7ff fe6c 	bl	8013eb0 <rfalNfcfComputeValidSENF>
    /*******************************************************************************/
    /* ACTIVITY 1.0 - 9.3.6.4                                                      */
    /* ACTIVITY 1.1 - 9.3.63.60 Check if devices found are lower than the limit    */
    /* and send a SENSF_REQ if so                                                  */
    /*******************************************************************************/
    if( *devCnt < devLimit )
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	781b      	ldrb	r3, [r3, #0]
 80141dc:	7bba      	ldrb	r2, [r7, #14]
 80141de:	429a      	cmp	r2, r3
 80141e0:	d93a      	bls.n	8014258 <rfalNfcfPollerCollisionResolution+0xc8>
    {
        /* ACTIVITY 1.0 - 9.3.6.5  Copy valid SENSF_RES and then to remove it
         * ACTIVITY 1.1 - 9.3.6.65 Copy and filter duplicates                                           
         * For now, due to some devices keep generating different nfcid2, we use 1.0  
         * Phones detected: Samsung Galaxy Nexus,Samsung Galaxy S3,Samsung Nexus S */
        *devCnt = 0;
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	2200      	movs	r2, #0
 80141e6:	701a      	strb	r2, [r3, #0]
        
        ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 80141e8:	4b1e      	ldr	r3, [pc, #120]	; (8014264 <rfalNfcfPollerCollisionResolution+0xd4>)
 80141ea:	9301      	str	r3, [sp, #4]
 80141ec:	4b1e      	ldr	r3, [pc, #120]	; (8014268 <rfalNfcfPollerCollisionResolution+0xd8>)
 80141ee:	9300      	str	r3, [sp, #0]
 80141f0:	4b1e      	ldr	r3, [pc, #120]	; (801426c <rfalNfcfPollerCollisionResolution+0xdc>)
 80141f2:	2200      	movs	r2, #0
 80141f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80141f8:	200f      	movs	r0, #15
 80141fa:	f7ff ff8b 	bl	8014114 <rfalNfcfPollerPoll>
 80141fe:	4603      	mov	r3, r0
 8014200:	82fb      	strh	r3, [r7, #22]
        if( ret == ERR_NONE )
 8014202:	8afb      	ldrh	r3, [r7, #22]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d108      	bne.n	801421a <rfalNfcfPollerCollisionResolution+0x8a>
        {
            rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, false, &nfcDepFound );
 8014208:	7bba      	ldrb	r2, [r7, #14]
 801420a:	f107 0315 	add.w	r3, r7, #21
 801420e:	9300      	str	r3, [sp, #0]
 8014210:	2300      	movs	r3, #0
 8014212:	6879      	ldr	r1, [r7, #4]
 8014214:	68b8      	ldr	r0, [r7, #8]
 8014216:	f7ff fe4b 	bl	8013eb0 <rfalNfcfComputeValidSENF>
        }
      
      /*******************************************************************************/
      /* ACTIVITY 1.1 -  9.3.6.63 Check if any device supports NFC DEP               */
      /*******************************************************************************/
      if( nfcDepFound && (compMode == RFAL_COMPLIANCE_MODE_NFC) )
 801421a:	7d7b      	ldrb	r3, [r7, #21]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d01b      	beq.n	8014258 <rfalNfcfPollerCollisionResolution+0xc8>
 8014220:	7bfb      	ldrb	r3, [r7, #15]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d118      	bne.n	8014258 <rfalNfcfPollerCollisionResolution+0xc8>
      {
          ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_SYSTEM_CODE, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 8014226:	4b0f      	ldr	r3, [pc, #60]	; (8014264 <rfalNfcfPollerCollisionResolution+0xd4>)
 8014228:	9301      	str	r3, [sp, #4]
 801422a:	4b0f      	ldr	r3, [pc, #60]	; (8014268 <rfalNfcfPollerCollisionResolution+0xd8>)
 801422c:	9300      	str	r3, [sp, #0]
 801422e:	4b0f      	ldr	r3, [pc, #60]	; (801426c <rfalNfcfPollerCollisionResolution+0xdc>)
 8014230:	2201      	movs	r2, #1
 8014232:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014236:	200f      	movs	r0, #15
 8014238:	f7ff ff6c 	bl	8014114 <rfalNfcfPollerPoll>
 801423c:	4603      	mov	r3, r0
 801423e:	82fb      	strh	r3, [r7, #22]
          if( ret == ERR_NONE )
 8014240:	8afb      	ldrh	r3, [r7, #22]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d108      	bne.n	8014258 <rfalNfcfPollerCollisionResolution+0xc8>
          {
              rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, true, &nfcDepFound );
 8014246:	7bba      	ldrb	r2, [r7, #14]
 8014248:	f107 0315 	add.w	r3, r7, #21
 801424c:	9300      	str	r3, [sp, #0]
 801424e:	2301      	movs	r3, #1
 8014250:	6879      	ldr	r1, [r7, #4]
 8014252:	68b8      	ldr	r0, [r7, #8]
 8014254:	f7ff fe2c 	bl	8013eb0 <rfalNfcfComputeValidSENF>
          }
      }
    }
    
    return ERR_NONE;
 8014258:	2300      	movs	r3, #0
}
 801425a:	4618      	mov	r0, r3
 801425c:	3718      	adds	r7, #24
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}
 8014262:	bf00      	nop
 8014264:	20003559 	.word	0x20003559
 8014268:	20003558 	.word	0x20003558
 801426c:	2000355a 	.word	0x2000355a

08014270 <rfalNfcfPollerCheck>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheck( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvdLen )
{
 8014270:	b580      	push	{r7, lr}
 8014272:	b0a0      	sub	sp, #128	; 0x80
 8014274:	af04      	add	r7, sp, #16
 8014276:	60f8      	str	r0, [r7, #12]
 8014278:	60b9      	str	r1, [r7, #8]
 801427a:	607a      	str	r2, [r7, #4]
 801427c:	807b      	strh	r3, [r7, #2]
    uint8_t    i;
    ReturnCode ret;
    uint8_t    *checkRes;
    
    /* Check parameters */
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d018      	beq.n	80142b6 <rfalNfcfPollerCheck+0x46>
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d015      	beq.n	80142b6 <rfalNfcfPollerCheck+0x46>
 801428a:	68bb      	ldr	r3, [r7, #8]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d012      	beq.n	80142b6 <rfalNfcfPollerCheck+0x46>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 8014290:	68bb      	ldr	r3, [r7, #8]
 8014292:	7a1b      	ldrb	r3, [r3, #8]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 8014294:	2b00      	cmp	r3, #0
 8014296:	d00e      	beq.n	80142b6 <rfalNfcfPollerCheck+0x46>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 8014298:	68bb      	ldr	r3, [r7, #8]
 801429a:	7a1b      	ldrb	r3, [r3, #8]
 801429c:	2b0f      	cmp	r3, #15
 801429e:	d80a      	bhi.n	80142b6 <rfalNfcfPollerCheck+0x46>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 80142a0:	68bb      	ldr	r3, [r7, #8]
 80142a2:	781b      	ldrb	r3, [r3, #0]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d006      	beq.n	80142b6 <rfalNfcfPollerCheck+0x46>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	781b      	ldrb	r3, [r3, #0]
 80142ac:	2b0f      	cmp	r3, #15
 80142ae:	d802      	bhi.n	80142b6 <rfalNfcfPollerCheck+0x46>
 80142b0:	887b      	ldrh	r3, [r7, #2]
 80142b2:	2b0b      	cmp	r3, #11
 80142b4:	d801      	bhi.n	80142ba <rfalNfcfPollerCheck+0x4a>
        (rxBufLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECK_RES_MIN_LEN))                      )
    {
        return ERR_PARAM;
 80142b6:	2307      	movs	r3, #7
 80142b8:	e117      	b.n	80144ea <rfalNfcfPollerCheck+0x27a>
    }
    
    msgIt = 0;
 80142ba:	2300      	movs	r3, #0
 80142bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    
    /*******************************************************************************/
    /* Compose CHECK command/request                                               */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION;                               /* Command Code    */
 80142c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80142c4:	1c5a      	adds	r2, r3, #1
 80142c6:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 80142ca:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80142ce:	4413      	add	r3, r2
 80142d0:	2206      	movs	r2, #6
 80142d2:	f803 2c60 	strb.w	r2, [r3, #-96]
    
    ST_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 80142d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80142da:	f107 0210 	add.w	r2, r7, #16
 80142de:	4413      	add	r3, r2
 80142e0:	2208      	movs	r2, #8
 80142e2:	68f9      	ldr	r1, [r7, #12]
 80142e4:	4618      	mov	r0, r3
 80142e6:	f004 fd86 	bl	8018df6 <memcpy>
    msgIt += RFAL_NFCF_NFCID2_LEN;
 80142ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80142ee:	3308      	adds	r3, #8
 80142f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 80142f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80142f8:	1c5a      	adds	r2, r3, #1
 80142fa:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 80142fe:	4619      	mov	r1, r3
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	781a      	ldrb	r2, [r3, #0]
 8014304:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014308:	440b      	add	r3, r1
 801430a:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numServ; i++)
 801430e:	2300      	movs	r3, #0
 8014310:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8014314:	e02a      	b.n	801436c <rfalNfcfPollerCheck+0xfc>
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8014316:	68bb      	ldr	r3, [r7, #8]
 8014318:	685a      	ldr	r2, [r3, #4]
 801431a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 801431e:	005b      	lsls	r3, r3, #1
 8014320:	4413      	add	r3, r2
 8014322:	881a      	ldrh	r2, [r3, #0]
 8014324:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014328:	1c59      	adds	r1, r3, #1
 801432a:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 801432e:	b2d2      	uxtb	r2, r2
 8014330:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8014334:	440b      	add	r3, r1
 8014336:	f803 2c60 	strb.w	r2, [r3, #-96]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	685a      	ldr	r2, [r3, #4]
 801433e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8014342:	005b      	lsls	r3, r3, #1
 8014344:	4413      	add	r3, r2
 8014346:	881b      	ldrh	r3, [r3, #0]
 8014348:	0a1b      	lsrs	r3, r3, #8
 801434a:	b29a      	uxth	r2, r3
 801434c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014350:	1c59      	adds	r1, r3, #1
 8014352:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8014356:	b2d2      	uxtb	r2, r2
 8014358:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801435c:	440b      	add	r3, r1
 801435e:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numServ; i++)
 8014362:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8014366:	3301      	adds	r3, #1
 8014368:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 801436c:	68bb      	ldr	r3, [r7, #8]
 801436e:	781b      	ldrb	r3, [r3, #0]
 8014370:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8014374:	429a      	cmp	r2, r3
 8014376:	d3ce      	bcc.n	8014316 <rfalNfcfPollerCheck+0xa6>
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 8014378:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801437c:	1c5a      	adds	r2, r3, #1
 801437e:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8014382:	4619      	mov	r1, r3
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	7a1a      	ldrb	r2, [r3, #8]
 8014388:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801438c:	440b      	add	r3, r1
 801438e:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numBlock; i++)
 8014392:	2300      	movs	r3, #0
 8014394:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8014398:	e058      	b.n	801444c <rfalNfcfPollerCheck+0x1dc>
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	68da      	ldr	r2, [r3, #12]
 801439e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80143a2:	009b      	lsls	r3, r3, #2
 80143a4:	441a      	add	r2, r3
 80143a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80143aa:	1c59      	adds	r1, r3, #1
 80143ac:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 80143b0:	7812      	ldrb	r2, [r2, #0]
 80143b2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80143b6:	440b      	add	r3, r1
 80143b8:	f803 2c60 	strb.w	r2, [r3, #-96]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 80143bc:	68bb      	ldr	r3, [r7, #8]
 80143be:	68da      	ldr	r2, [r3, #12]
 80143c0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80143c4:	009b      	lsls	r3, r3, #2
 80143c6:	4413      	add	r3, r2
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	b25b      	sxtb	r3, r3
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	da12      	bge.n	80143f6 <rfalNfcfPollerCheck+0x186>
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	68da      	ldr	r2, [r3, #12]
 80143d4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80143d8:	009b      	lsls	r3, r3, #2
 80143da:	4413      	add	r3, r2
 80143dc:	885a      	ldrh	r2, [r3, #2]
 80143de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80143e2:	1c59      	adds	r1, r3, #1
 80143e4:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 80143e8:	b2d2      	uxtb	r2, r2
 80143ea:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80143ee:	440b      	add	r3, r1
 80143f0:	f803 2c60 	strb.w	r2, [r3, #-96]
 80143f4:	e025      	b.n	8014442 <rfalNfcfPollerCheck+0x1d2>
        }
        else
        {
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 80143f6:	68bb      	ldr	r3, [r7, #8]
 80143f8:	68da      	ldr	r2, [r3, #12]
 80143fa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	4413      	add	r3, r2
 8014402:	885a      	ldrh	r2, [r3, #2]
 8014404:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014408:	1c59      	adds	r1, r3, #1
 801440a:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 801440e:	b2d2      	uxtb	r2, r2
 8014410:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8014414:	440b      	add	r3, r1
 8014416:	f803 2c60 	strb.w	r2, [r3, #-96]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 801441a:	68bb      	ldr	r3, [r7, #8]
 801441c:	68da      	ldr	r2, [r3, #12]
 801441e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8014422:	009b      	lsls	r3, r3, #2
 8014424:	4413      	add	r3, r2
 8014426:	885b      	ldrh	r3, [r3, #2]
 8014428:	0a1b      	lsrs	r3, r3, #8
 801442a:	b29a      	uxth	r2, r3
 801442c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014430:	1c59      	adds	r1, r3, #1
 8014432:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8014436:	b2d2      	uxtb	r2, r2
 8014438:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801443c:	440b      	add	r3, r1
 801443e:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numBlock; i++)
 8014442:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8014446:	3301      	adds	r3, #1
 8014448:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	7a1b      	ldrb	r3, [r3, #8]
 8014450:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8014454:	429a      	cmp	r2, r3
 8014456:	d3a0      	bcc.n	801439a <rfalNfcfPollerCheck+0x12a>
        }
    }
    
    /*******************************************************************************/
    /* Transceive CHECK command/request                                            */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 8014458:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801445c:	b299      	uxth	r1, r3
 801445e:	887a      	ldrh	r2, [r7, #2]
 8014460:	f107 0010 	add.w	r0, r7, #16
 8014464:	4b23      	ldr	r3, [pc, #140]	; (80144f4 <rfalNfcfPollerCheck+0x284>)
 8014466:	9302      	str	r3, [sp, #8]
 8014468:	2300      	movs	r3, #0
 801446a:	9301      	str	r3, [sp, #4]
 801446c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801446e:	9300      	str	r3, [sp, #0]
 8014470:	4613      	mov	r3, r2
 8014472:	687a      	ldr	r2, [r7, #4]
 8014474:	f001 fda8 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 8014478:	4603      	mov	r3, r0
 801447a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    
    if( ret == ERR_NONE )
 801447e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8014482:	2b00      	cmp	r3, #0
 8014484:	d12f      	bne.n	80144e6 <rfalNfcfPollerCheck+0x276>
    {
        /* Skip LEN byte */
        checkRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	3301      	adds	r3, #1
 801448a:	66bb      	str	r3, [r7, #104]	; 0x68
        
        /* Check response length */
        if( *rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS) )
 801448c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801448e:	881b      	ldrh	r3, [r3, #0]
 8014490:	2b0a      	cmp	r3, #10
 8014492:	d803      	bhi.n	801449c <rfalNfcfPollerCheck+0x22c>
        {
            ret = ERR_PROTO;
 8014494:	230b      	movs	r3, #11
 8014496:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 801449a:	e024      	b.n	80144e6 <rfalNfcfPollerCheck+0x276>
        }
        /* Check for a valid response */
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 801449c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801449e:	781b      	ldrb	r3, [r3, #0]
 80144a0:	2b07      	cmp	r3, #7
 80144a2:	d109      	bne.n	80144b8 <rfalNfcfPollerCheck+0x248>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 80144a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80144a6:	3309      	adds	r3, #9
 80144a8:	781b      	ldrb	r3, [r3, #0]
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d104      	bne.n	80144b8 <rfalNfcfPollerCheck+0x248>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST2_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)        )
 80144ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80144b0:	330a      	adds	r3, #10
 80144b2:	781b      	ldrb	r3, [r3, #0]
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d003      	beq.n	80144c0 <rfalNfcfPollerCheck+0x250>
        {
            ret = ERR_REQUEST;
 80144b8:	2305      	movs	r3, #5
 80144ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80144be:	e012      	b.n	80144e6 <rfalNfcfPollerCheck+0x276>
        }
        /* CHECK succesfull, remove header */
        else
        {
            (*rcvdLen) -= (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_NOB_POS);
 80144c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80144c2:	881b      	ldrh	r3, [r3, #0]
 80144c4:	3b0c      	subs	r3, #12
 80144c6:	b29a      	uxth	r2, r3
 80144c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80144ca:	801a      	strh	r2, [r3, #0]
            
            if( *rcvdLen > 0U )
 80144cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80144ce:	881b      	ldrh	r3, [r3, #0]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d008      	beq.n	80144e6 <rfalNfcfPollerCheck+0x276>
            {
                ST_MEMMOVE( rxBuf, &checkRes[RFAL_NFCF_CHECKUPDATE_RES_NOB_POS], (*rcvdLen) );
 80144d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80144d6:	f103 010b 	add.w	r1, r3, #11
 80144da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80144dc:	881b      	ldrh	r3, [r3, #0]
 80144de:	461a      	mov	r2, r3
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f004 fc93 	bl	8018e0c <memmove>
            }
        }
    }
    
    return ret;
 80144e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	3770      	adds	r7, #112	; 0x70
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}
 80144f2:	bf00      	nop
 80144f4:	02000010 	.word	0x02000010

080144f8 <rfalNfcfPollerUpdate>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerUpdate( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock,  uint8_t *txBuf, uint16_t txBufLen, const uint8_t *blockData, uint8_t *rxBuf, uint16_t rxBufLen )
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b08c      	sub	sp, #48	; 0x30
 80144fc:	af04      	add	r7, sp, #16
 80144fe:	60f8      	str	r0, [r7, #12]
 8014500:	60b9      	str	r1, [r7, #8]
 8014502:	607a      	str	r2, [r7, #4]
 8014504:	807b      	strh	r3, [r7, #2]
    uint16_t   auxLen;
    uint8_t    *updateRes;
    ReturnCode ret;

    /* Check parameters */
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL) || (txBuf == NULL)         ||
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d01b      	beq.n	8014544 <rfalNfcfPollerUpdate+0x4c>
 801450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801450e:	2b00      	cmp	r3, #0
 8014510:	d018      	beq.n	8014544 <rfalNfcfPollerUpdate+0x4c>
 8014512:	68bb      	ldr	r3, [r7, #8]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d015      	beq.n	8014544 <rfalNfcfPollerUpdate+0x4c>
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d012      	beq.n	8014544 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	7a1b      	ldrb	r3, [r3, #8]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL) || (txBuf == NULL)         ||
 8014522:	2b00      	cmp	r3, #0
 8014524:	d00e      	beq.n	8014544 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	7a1b      	ldrb	r3, [r3, #8]
 801452a:	2b0d      	cmp	r3, #13
 801452c:	d80a      	bhi.n	8014544 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numServ == 0U)   || (servBlock->numServ > RFAL_NFCF_UPDATE_REQ_MAX_SERV)  ||
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	781b      	ldrb	r3, [r3, #0]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 8014532:	2b00      	cmp	r3, #0
 8014534:	d006      	beq.n	8014544 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numServ == 0U)   || (servBlock->numServ > RFAL_NFCF_UPDATE_REQ_MAX_SERV)  ||
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	781b      	ldrb	r3, [r3, #0]
 801453a:	2b0f      	cmp	r3, #15
 801453c:	d802      	bhi.n	8014544 <rfalNfcfPollerUpdate+0x4c>
 801453e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014540:	2b0b      	cmp	r3, #11
 8014542:	d801      	bhi.n	8014548 <rfalNfcfPollerUpdate+0x50>
        (rxBufLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_UPDATE_RES_MIN_LEN))                      )
    {
        return ERR_PARAM;
 8014544:	2307      	movs	r3, #7
 8014546:	e0f2      	b.n	801472e <rfalNfcfPollerUpdate+0x236>
    }
    
    /* Calculate required txBuffer lenth */
    auxLen = (uint16_t)( RFAL_NFCF_CMD_LEN + RFAL_NFCF_NFCID2_LEN + ( servBlock->numServ * sizeof(rfalNfcfServ) ) + 
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	b29a      	uxth	r2, r3
              (servBlock->numBlock * sizeof(rfalNfcfBlockListElem)) + (uint16_t)((uint16_t)servBlock->numBlock * RFAL_NFCF_BLOCK_LEN) );
 801454e:	68bb      	ldr	r3, [r7, #8]
 8014550:	7a1b      	ldrb	r3, [r3, #8]
 8014552:	b29b      	uxth	r3, r3
 8014554:	4619      	mov	r1, r3
 8014556:	0089      	lsls	r1, r1, #2
 8014558:	440b      	add	r3, r1
 801455a:	005b      	lsls	r3, r3, #1
 801455c:	b29b      	uxth	r3, r3
 801455e:	4413      	add	r3, r2
 8014560:	b29b      	uxth	r3, r3
 8014562:	005b      	lsls	r3, r3, #1
 8014564:	b29b      	uxth	r3, r3
    auxLen = (uint16_t)( RFAL_NFCF_CMD_LEN + RFAL_NFCF_NFCID2_LEN + ( servBlock->numServ * sizeof(rfalNfcfServ) ) + 
 8014566:	3309      	adds	r3, #9
 8014568:	833b      	strh	r3, [r7, #24]
    
    /* Check whether the provided buffer is sufficient for this request */
    if( txBufLen < auxLen )
 801456a:	887a      	ldrh	r2, [r7, #2]
 801456c:	8b3b      	ldrh	r3, [r7, #24]
 801456e:	429a      	cmp	r2, r3
 8014570:	d201      	bcs.n	8014576 <rfalNfcfPollerUpdate+0x7e>
    {
        return ERR_PARAM;
 8014572:	2307      	movs	r3, #7
 8014574:	e0db      	b.n	801472e <rfalNfcfPollerUpdate+0x236>
    }
        
    msgIt = 0;
 8014576:	2300      	movs	r3, #0
 8014578:	83bb      	strh	r3, [r7, #28]
    
    /*******************************************************************************/
    /* Compose UPDATE command/request                                              */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION;                              /* Command Code    */
 801457a:	8bbb      	ldrh	r3, [r7, #28]
 801457c:	1c5a      	adds	r2, r3, #1
 801457e:	83ba      	strh	r2, [r7, #28]
 8014580:	461a      	mov	r2, r3
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	4413      	add	r3, r2
 8014586:	2208      	movs	r2, #8
 8014588:	701a      	strb	r2, [r3, #0]
    
    ST_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 801458a:	8bbb      	ldrh	r3, [r7, #28]
 801458c:	687a      	ldr	r2, [r7, #4]
 801458e:	4413      	add	r3, r2
 8014590:	2208      	movs	r2, #8
 8014592:	68f9      	ldr	r1, [r7, #12]
 8014594:	4618      	mov	r0, r3
 8014596:	f004 fc2e 	bl	8018df6 <memcpy>
    msgIt += RFAL_NFCF_NFCID2_LEN;
 801459a:	8bbb      	ldrh	r3, [r7, #28]
 801459c:	3308      	adds	r3, #8
 801459e:	83bb      	strh	r3, [r7, #28]
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 80145a0:	8bbb      	ldrh	r3, [r7, #28]
 80145a2:	1c5a      	adds	r2, r3, #1
 80145a4:	83ba      	strh	r2, [r7, #28]
 80145a6:	461a      	mov	r2, r3
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	4413      	add	r3, r2
 80145ac:	68ba      	ldr	r2, [r7, #8]
 80145ae:	7812      	ldrb	r2, [r2, #0]
 80145b0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 80145b2:	2300      	movs	r3, #0
 80145b4:	77fb      	strb	r3, [r7, #31]
 80145b6:	e020      	b.n	80145fa <rfalNfcfPollerUpdate+0x102>
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	685a      	ldr	r2, [r3, #4]
 80145bc:	7ffb      	ldrb	r3, [r7, #31]
 80145be:	005b      	lsls	r3, r3, #1
 80145c0:	4413      	add	r3, r2
 80145c2:	881a      	ldrh	r2, [r3, #0]
 80145c4:	8bbb      	ldrh	r3, [r7, #28]
 80145c6:	1c59      	adds	r1, r3, #1
 80145c8:	83b9      	strh	r1, [r7, #28]
 80145ca:	4619      	mov	r1, r3
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	440b      	add	r3, r1
 80145d0:	b2d2      	uxtb	r2, r2
 80145d2:	701a      	strb	r2, [r3, #0]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 80145d4:	68bb      	ldr	r3, [r7, #8]
 80145d6:	685a      	ldr	r2, [r3, #4]
 80145d8:	7ffb      	ldrb	r3, [r7, #31]
 80145da:	005b      	lsls	r3, r3, #1
 80145dc:	4413      	add	r3, r2
 80145de:	881b      	ldrh	r3, [r3, #0]
 80145e0:	0a1b      	lsrs	r3, r3, #8
 80145e2:	b29a      	uxth	r2, r3
 80145e4:	8bbb      	ldrh	r3, [r7, #28]
 80145e6:	1c59      	adds	r1, r3, #1
 80145e8:	83b9      	strh	r1, [r7, #28]
 80145ea:	4619      	mov	r1, r3
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	440b      	add	r3, r1
 80145f0:	b2d2      	uxtb	r2, r2
 80145f2:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 80145f4:	7ffb      	ldrb	r3, [r7, #31]
 80145f6:	3301      	adds	r3, #1
 80145f8:	77fb      	strb	r3, [r7, #31]
 80145fa:	68bb      	ldr	r3, [r7, #8]
 80145fc:	781b      	ldrb	r3, [r3, #0]
 80145fe:	7ffa      	ldrb	r2, [r7, #31]
 8014600:	429a      	cmp	r2, r3
 8014602:	d3d9      	bcc.n	80145b8 <rfalNfcfPollerUpdate+0xc0>
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 8014604:	8bbb      	ldrh	r3, [r7, #28]
 8014606:	1c5a      	adds	r2, r3, #1
 8014608:	83ba      	strh	r2, [r7, #28]
 801460a:	461a      	mov	r2, r3
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	4413      	add	r3, r2
 8014610:	68ba      	ldr	r2, [r7, #8]
 8014612:	7a12      	ldrb	r2, [r2, #8]
 8014614:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numBlock; i++)
 8014616:	2300      	movs	r3, #0
 8014618:	77fb      	strb	r3, [r7, #31]
 801461a:	e045      	b.n	80146a8 <rfalNfcfPollerUpdate+0x1b0>
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	68da      	ldr	r2, [r3, #12]
 8014620:	7ffb      	ldrb	r3, [r7, #31]
 8014622:	009b      	lsls	r3, r3, #2
 8014624:	441a      	add	r2, r3
 8014626:	8bbb      	ldrh	r3, [r7, #28]
 8014628:	1c59      	adds	r1, r3, #1
 801462a:	83b9      	strh	r1, [r7, #28]
 801462c:	4619      	mov	r1, r3
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	440b      	add	r3, r1
 8014632:	7812      	ldrb	r2, [r2, #0]
 8014634:	701a      	strb	r2, [r3, #0]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	68da      	ldr	r2, [r3, #12]
 801463a:	7ffb      	ldrb	r3, [r7, #31]
 801463c:	009b      	lsls	r3, r3, #2
 801463e:	4413      	add	r3, r2
 8014640:	781b      	ldrb	r3, [r3, #0]
 8014642:	b25b      	sxtb	r3, r3
 8014644:	2b00      	cmp	r3, #0
 8014646:	da0e      	bge.n	8014666 <rfalNfcfPollerUpdate+0x16e>
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	68da      	ldr	r2, [r3, #12]
 801464c:	7ffb      	ldrb	r3, [r7, #31]
 801464e:	009b      	lsls	r3, r3, #2
 8014650:	4413      	add	r3, r2
 8014652:	885a      	ldrh	r2, [r3, #2]
 8014654:	8bbb      	ldrh	r3, [r7, #28]
 8014656:	1c59      	adds	r1, r3, #1
 8014658:	83b9      	strh	r1, [r7, #28]
 801465a:	4619      	mov	r1, r3
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	440b      	add	r3, r1
 8014660:	b2d2      	uxtb	r2, r2
 8014662:	701a      	strb	r2, [r3, #0]
 8014664:	e01d      	b.n	80146a2 <rfalNfcfPollerUpdate+0x1aa>
        }
        else
        {
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	68da      	ldr	r2, [r3, #12]
 801466a:	7ffb      	ldrb	r3, [r7, #31]
 801466c:	009b      	lsls	r3, r3, #2
 801466e:	4413      	add	r3, r2
 8014670:	885a      	ldrh	r2, [r3, #2]
 8014672:	8bbb      	ldrh	r3, [r7, #28]
 8014674:	1c59      	adds	r1, r3, #1
 8014676:	83b9      	strh	r1, [r7, #28]
 8014678:	4619      	mov	r1, r3
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	440b      	add	r3, r1
 801467e:	b2d2      	uxtb	r2, r2
 8014680:	701a      	strb	r2, [r3, #0]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	68da      	ldr	r2, [r3, #12]
 8014686:	7ffb      	ldrb	r3, [r7, #31]
 8014688:	009b      	lsls	r3, r3, #2
 801468a:	4413      	add	r3, r2
 801468c:	885b      	ldrh	r3, [r3, #2]
 801468e:	0a1b      	lsrs	r3, r3, #8
 8014690:	b29a      	uxth	r2, r3
 8014692:	8bbb      	ldrh	r3, [r7, #28]
 8014694:	1c59      	adds	r1, r3, #1
 8014696:	83b9      	strh	r1, [r7, #28]
 8014698:	4619      	mov	r1, r3
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	440b      	add	r3, r1
 801469e:	b2d2      	uxtb	r2, r2
 80146a0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numBlock; i++)
 80146a2:	7ffb      	ldrb	r3, [r7, #31]
 80146a4:	3301      	adds	r3, #1
 80146a6:	77fb      	strb	r3, [r7, #31]
 80146a8:	68bb      	ldr	r3, [r7, #8]
 80146aa:	7a1b      	ldrb	r3, [r3, #8]
 80146ac:	7ffa      	ldrb	r2, [r7, #31]
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d3b4      	bcc.n	801461c <rfalNfcfPollerUpdate+0x124>
        }
    }
    
    auxLen = ((uint16_t)servBlock->numBlock * RFAL_NFCF_BLOCK_LEN);
 80146b2:	68bb      	ldr	r3, [r7, #8]
 80146b4:	7a1b      	ldrb	r3, [r3, #8]
 80146b6:	b29b      	uxth	r3, r3
 80146b8:	011b      	lsls	r3, r3, #4
 80146ba:	833b      	strh	r3, [r7, #24]
    ST_MEMCPY( &txBuf[msgIt], blockData, auxLen );                                        /* Block Data      */
 80146bc:	8bbb      	ldrh	r3, [r7, #28]
 80146be:	687a      	ldr	r2, [r7, #4]
 80146c0:	4413      	add	r3, r2
 80146c2:	8b3a      	ldrh	r2, [r7, #24]
 80146c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80146c6:	4618      	mov	r0, r3
 80146c8:	f004 fb95 	bl	8018df6 <memcpy>
    msgIt += auxLen;
 80146cc:	8bba      	ldrh	r2, [r7, #28]
 80146ce:	8b3b      	ldrh	r3, [r7, #24]
 80146d0:	4413      	add	r3, r2
 80146d2:	83bb      	strh	r3, [r7, #28]
    
    
    /*******************************************************************************/
    /* Transceive UPDATE command/request                                           */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 80146d4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80146d6:	8bb9      	ldrh	r1, [r7, #28]
 80146d8:	4b17      	ldr	r3, [pc, #92]	; (8014738 <rfalNfcfPollerUpdate+0x240>)
 80146da:	9302      	str	r3, [sp, #8]
 80146dc:	2300      	movs	r3, #0
 80146de:	9301      	str	r3, [sp, #4]
 80146e0:	f107 0312 	add.w	r3, r7, #18
 80146e4:	9300      	str	r3, [sp, #0]
 80146e6:	4613      	mov	r3, r2
 80146e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f001 fc6c 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 80146f0:	4603      	mov	r3, r0
 80146f2:	837b      	strh	r3, [r7, #26]
    
    if( ret == ERR_NONE )
 80146f4:	8b7b      	ldrh	r3, [r7, #26]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d118      	bne.n	801472c <rfalNfcfPollerUpdate+0x234>
    {
        /* Skip LEN byte */
        updateRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
 80146fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146fc:	3301      	adds	r3, #1
 80146fe:	617b      	str	r3, [r7, #20]
        
        /* Check response length */
        if( rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS) )
 8014700:	8a7b      	ldrh	r3, [r7, #18]
 8014702:	2b0a      	cmp	r3, #10
 8014704:	d802      	bhi.n	801470c <rfalNfcfPollerUpdate+0x214>
        {
            ret = ERR_PROTO;
 8014706:	230b      	movs	r3, #11
 8014708:	837b      	strh	r3, [r7, #26]
 801470a:	e00f      	b.n	801472c <rfalNfcfPollerUpdate+0x234>
        }
        /* Check for a valid response */
        else if( (updateRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION_RES) ||
 801470c:	697b      	ldr	r3, [r7, #20]
 801470e:	781b      	ldrb	r3, [r3, #0]
 8014710:	2b09      	cmp	r3, #9
 8014712:	d109      	bne.n	8014728 <rfalNfcfPollerUpdate+0x230>
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)       ||
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	3309      	adds	r3, #9
 8014718:	781b      	ldrb	r3, [r3, #0]
        else if( (updateRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION_RES) ||
 801471a:	2b00      	cmp	r3, #0
 801471c:	d104      	bne.n	8014728 <rfalNfcfPollerUpdate+0x230>
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST2_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)         )
 801471e:	697b      	ldr	r3, [r7, #20]
 8014720:	330a      	adds	r3, #10
 8014722:	781b      	ldrb	r3, [r3, #0]
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)       ||
 8014724:	2b00      	cmp	r3, #0
 8014726:	d001      	beq.n	801472c <rfalNfcfPollerUpdate+0x234>
        {
            ret = ERR_REQUEST;
 8014728:	2305      	movs	r3, #5
 801472a:	837b      	strh	r3, [r7, #26]
        {
            /* MISRA 15.7 - Empty else */
        }
    }
    
    return ret;
 801472c:	8b7b      	ldrh	r3, [r7, #26]
}
 801472e:	4618      	mov	r0, r3
 8014730:	3720      	adds	r7, #32
 8014732:	46bd      	mov	sp, r7
 8014734:	bd80      	pop	{r7, pc}
 8014736:	bf00      	nop
 8014738:	02000010 	.word	0x02000010

0801473c <rfalNfcvParseError>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcvParseError( uint8_t err )
{
 801473c:	b480      	push	{r7}
 801473e:	b083      	sub	sp, #12
 8014740:	af00      	add	r7, sp, #0
 8014742:	4603      	mov	r3, r0
 8014744:	71fb      	strb	r3, [r7, #7]
    switch(err)
 8014746:	79fb      	ldrb	r3, [r7, #7]
 8014748:	3b01      	subs	r3, #1
 801474a:	2b12      	cmp	r3, #18
 801474c:	d82e      	bhi.n	80147ac <rfalNfcvParseError+0x70>
 801474e:	a201      	add	r2, pc, #4	; (adr r2, 8014754 <rfalNfcvParseError+0x18>)
 8014750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014754:	080147a1 	.word	0x080147a1
 8014758:	080147a5 	.word	0x080147a5
 801475c:	080147a1 	.word	0x080147a1
 8014760:	080147ad 	.word	0x080147ad
 8014764:	080147ad 	.word	0x080147ad
 8014768:	080147ad 	.word	0x080147ad
 801476c:	080147ad 	.word	0x080147ad
 8014770:	080147ad 	.word	0x080147ad
 8014774:	080147ad 	.word	0x080147ad
 8014778:	080147ad 	.word	0x080147ad
 801477c:	080147ad 	.word	0x080147ad
 8014780:	080147ad 	.word	0x080147ad
 8014784:	080147ad 	.word	0x080147ad
 8014788:	080147ad 	.word	0x080147ad
 801478c:	080147ad 	.word	0x080147ad
 8014790:	080147ad 	.word	0x080147ad
 8014794:	080147ad 	.word	0x080147ad
 8014798:	080147ad 	.word	0x080147ad
 801479c:	080147a9 	.word	0x080147a9
    {
        case RFAL_NFCV_ERROR_CMD_NOT_SUPPORTED:
        case RFAL_NFCV_ERROR_OPTION_NOT_SUPPORTED:
            return ERR_NOTSUPP;
 80147a0:	2318      	movs	r3, #24
 80147a2:	e004      	b.n	80147ae <rfalNfcvParseError+0x72>
            
        case RFAL_NFCV_ERROR_CMD_NOT_RECOGNIZED:
            return ERR_PROTO;
 80147a4:	230b      	movs	r3, #11
 80147a6:	e002      	b.n	80147ae <rfalNfcvParseError+0x72>
            
        case RFAL_NFCV_ERROR_WRITE_FAILED:
            return ERR_WRITE;
 80147a8:	2319      	movs	r3, #25
 80147aa:	e000      	b.n	80147ae <rfalNfcvParseError+0x72>
            
        default:
            return ERR_REQUEST;
 80147ac:	2305      	movs	r3, #5
    }
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	370c      	adds	r7, #12
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bc80      	pop	{r7}
 80147b6:	4770      	bx	lr

080147b8 <rfalNfcvPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcvPollerInitialize( void )
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b082      	sub	sp, #8
 80147bc:	af00      	add	r7, sp, #0
    ReturnCode ret;
            
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 80147be:	22ec      	movs	r2, #236	; 0xec
 80147c0:	21ec      	movs	r1, #236	; 0xec
 80147c2:	2007      	movs	r0, #7
 80147c4:	f000 fdd2 	bl	801536c <rfalSetMode>
 80147c8:	4603      	mov	r3, r0
 80147ca:	80fb      	strh	r3, [r7, #6]
 80147cc:	88fb      	ldrh	r3, [r7, #6]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d001      	beq.n	80147d6 <rfalNfcvPollerInitialize+0x1e>
 80147d2:	88fb      	ldrh	r3, [r7, #6]
 80147d4:	e00e      	b.n	80147f4 <rfalNfcvPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 80147d6:	2001      	movs	r0, #1
 80147d8:	f001 f962 	bl	8015aa0 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCV );
 80147dc:	4807      	ldr	r0, [pc, #28]	; (80147fc <rfalNfcvPollerInitialize+0x44>)
 80147de:	f001 f997 	bl	8015b10 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCV_POLLER );
 80147e2:	f241 00d6 	movw	r0, #4310	; 0x10d6
 80147e6:	f001 f97f 	bl	8015ae8 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 80147ea:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 80147ee:	f001 f967 	bl	8015ac0 <rfalSetFDTPoll>
    
    return ERR_NONE;
 80147f2:	2300      	movs	r3, #0
}
 80147f4:	4618      	mov	r0, r3
 80147f6:	3708      	adds	r7, #8
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bd80      	pop	{r7, pc}
 80147fc:	000108d8 	.word	0x000108d8

08014800 <rfalNfcvPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCheckPresence( rfalNfcvInventoryRes *invRes )
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b086      	sub	sp, #24
 8014804:	af02      	add	r7, sp, #8
 8014806:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    
    /* INVENTORY_REQ with 1 slot and no Mask   Activity 2.0 (Candidate) 9.2.3.32 */
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 8014808:	2300      	movs	r3, #0
 801480a:	9300      	str	r3, [sp, #0]
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2200      	movs	r2, #0
 8014810:	2100      	movs	r1, #0
 8014812:	2020      	movs	r0, #32
 8014814:	f000 f815 	bl	8014842 <rfalNfcvPollerInventory>
 8014818:	4603      	mov	r3, r0
 801481a:	81fb      	strh	r3, [r7, #14]
    
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || 
 801481c:	89fb      	ldrh	r3, [r7, #14]
 801481e:	2b1d      	cmp	r3, #29
 8014820:	d008      	beq.n	8014834 <rfalNfcvPollerCheckPresence+0x34>
 8014822:	89fb      	ldrh	r3, [r7, #14]
 8014824:	2b15      	cmp	r3, #21
 8014826:	d005      	beq.n	8014834 <rfalNfcvPollerCheckPresence+0x34>
 8014828:	89fb      	ldrh	r3, [r7, #14]
 801482a:	2b09      	cmp	r3, #9
 801482c:	d002      	beq.n	8014834 <rfalNfcvPollerCheckPresence+0x34>
        (ret == ERR_FRAMING)      || (ret == ERR_PROTO)  )
 801482e:	89fb      	ldrh	r3, [r7, #14]
 8014830:	2b0b      	cmp	r3, #11
 8014832:	d101      	bne.n	8014838 <rfalNfcvPollerCheckPresence+0x38>
    {
        ret = ERR_NONE;
 8014834:	2300      	movs	r3, #0
 8014836:	81fb      	strh	r3, [r7, #14]
    }
    
    return ret;
 8014838:	89fb      	ldrh	r3, [r7, #14]
}
 801483a:	4618      	mov	r0, r3
 801483c:	3710      	adds	r7, #16
 801483e:	46bd      	mov	sp, r7
 8014840:	bd80      	pop	{r7, pc}

08014842 <rfalNfcvPollerInventory>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerInventory( rfalNfcvNumSlots nSlots, uint8_t maskLen, const uint8_t *maskVal, rfalNfcvInventoryRes *invRes, uint16_t* rcvdLen )
{
 8014842:	b580      	push	{r7, lr}
 8014844:	b08c      	sub	sp, #48	; 0x30
 8014846:	af02      	add	r7, sp, #8
 8014848:	60ba      	str	r2, [r7, #8]
 801484a:	607b      	str	r3, [r7, #4]
 801484c:	4603      	mov	r3, r0
 801484e:	73fb      	strb	r3, [r7, #15]
 8014850:	460b      	mov	r3, r1
 8014852:	73bb      	strb	r3, [r7, #14]
    ReturnCode           ret;
    rfalNfcvInventoryReq invReq;
    uint16_t             rxLen;
    
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d102      	bne.n	8014860 <rfalNfcvPollerInventory+0x1e>
 801485a:	7bbb      	ldrb	r3, [r7, #14]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d102      	bne.n	8014866 <rfalNfcvPollerInventory+0x24>
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d101      	bne.n	801486a <rfalNfcvPollerInventory+0x28>
    {
        return ERR_PARAM;
 8014866:	2307      	movs	r3, #7
 8014868:	e04a      	b.n	8014900 <rfalNfcvPollerInventory+0xbe>
    }
    
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 801486a:	7bfb      	ldrb	r3, [r7, #15]
 801486c:	f043 0306 	orr.w	r3, r3, #6
 8014870:	b2db      	uxtb	r3, r3
 8014872:	763b      	strb	r3, [r7, #24]
    invReq.CMD      = RFAL_NFCV_CMD_INVENTORY;
 8014874:	2301      	movs	r3, #1
 8014876:	767b      	strb	r3, [r7, #25]
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 8014878:	7bbb      	ldrb	r3, [r7, #14]
 801487a:	7bfa      	ldrb	r2, [r7, #15]
 801487c:	2a20      	cmp	r2, #32
 801487e:	d101      	bne.n	8014884 <rfalNfcvPollerInventory+0x42>
 8014880:	2240      	movs	r2, #64	; 0x40
 8014882:	e000      	b.n	8014886 <rfalNfcvPollerInventory+0x44>
 8014884:	223c      	movs	r2, #60	; 0x3c
 8014886:	429a      	cmp	r2, r3
 8014888:	d806      	bhi.n	8014898 <rfalNfcvPollerInventory+0x56>
 801488a:	7bfb      	ldrb	r3, [r7, #15]
 801488c:	2b20      	cmp	r3, #32
 801488e:	d101      	bne.n	8014894 <rfalNfcvPollerInventory+0x52>
 8014890:	2340      	movs	r3, #64	; 0x40
 8014892:	e002      	b.n	801489a <rfalNfcvPollerInventory+0x58>
 8014894:	233c      	movs	r3, #60	; 0x3c
 8014896:	e000      	b.n	801489a <rfalNfcvPollerInventory+0x58>
 8014898:	7bbb      	ldrb	r3, [r7, #14]
 801489a:	76bb      	strb	r3, [r7, #26]
    
    if( rfalConvBitsToBytes(invReq.MASK_LEN) > 0U )  /* MISRA 21.18 */
 801489c:	7ebb      	ldrb	r3, [r7, #26]
 801489e:	3307      	adds	r3, #7
 80148a0:	08db      	lsrs	r3, r3, #3
 80148a2:	b29b      	uxth	r3, r3
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d00b      	beq.n	80148c0 <rfalNfcvPollerInventory+0x7e>
    {
        ST_MEMCPY( invReq.MASK_VALUE, maskVal, rfalConvBitsToBytes(invReq.MASK_LEN) );
 80148a8:	7ebb      	ldrb	r3, [r7, #26]
 80148aa:	3307      	adds	r3, #7
 80148ac:	08db      	lsrs	r3, r3, #3
 80148ae:	b29b      	uxth	r3, r3
 80148b0:	461a      	mov	r2, r3
 80148b2:	f107 0318 	add.w	r3, r7, #24
 80148b6:	3303      	adds	r3, #3
 80148b8:	68b9      	ldr	r1, [r7, #8]
 80148ba:	4618      	mov	r0, r3
 80148bc:	f004 fa9b 	bl	8018df6 <memcpy>
    }
    
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 80148c0:	7ebb      	ldrb	r3, [r7, #26]
 80148c2:	3307      	adds	r3, #7
 80148c4:	08db      	lsrs	r3, r3, #3
 80148c6:	b2db      	uxtb	r3, r3
 80148c8:	3303      	adds	r3, #3
 80148ca:	b2d9      	uxtb	r1, r3
 80148cc:	f107 0018 	add.w	r0, r7, #24
 80148d0:	f107 0316 	add.w	r3, r7, #22
 80148d4:	9300      	str	r3, [sp, #0]
 80148d6:	230c      	movs	r3, #12
 80148d8:	687a      	ldr	r2, [r7, #4]
 80148da:	f002 fd09 	bl	80172f0 <rfalISO15693TransceiveAnticollisionFrame>
 80148de:	4603      	mov	r3, r0
 80148e0:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Check for optional output parameter */
    if( rcvdLen != NULL )
 80148e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d002      	beq.n	80148ee <rfalNfcvPollerInventory+0xac>
    {
        *rcvdLen = rxLen;
 80148e8:	8afa      	ldrh	r2, [r7, #22]
 80148ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ec:	801a      	strh	r2, [r3, #0]
    }
    
    if( ret == ERR_NONE )
 80148ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d104      	bne.n	80148fe <rfalNfcvPollerInventory+0xbc>
    {
        if( rxLen != rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 80148f4:	8afb      	ldrh	r3, [r7, #22]
 80148f6:	2b60      	cmp	r3, #96	; 0x60
 80148f8:	d001      	beq.n	80148fe <rfalNfcvPollerInventory+0xbc>
        {
            return ERR_PROTO;
 80148fa:	230b      	movs	r3, #11
 80148fc:	e000      	b.n	8014900 <rfalNfcvPollerInventory+0xbe>
        }
    }
    
    return ret;
 80148fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8014900:	4618      	mov	r0, r3
 8014902:	3728      	adds	r7, #40	; 0x28
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}

08014908 <rfalNfcvPollerCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcvListenDevice *nfcvDevList, uint8_t *devCnt )
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b0ae      	sub	sp, #184	; 0xb8
 801490c:	af02      	add	r7, sp, #8
 801490e:	60ba      	str	r2, [r7, #8]
 8014910:	607b      	str	r3, [r7, #4]
 8014912:	4603      	mov	r3, r0
 8014914:	73fb      	strb	r3, [r7, #15]
 8014916:	460b      	mov	r3, r1
 8014918:	73bb      	strb	r3, [r7, #14]
    uint8_t           colPos;
    bool              colPending;
    rfalNfcvCollision colFound[RFAL_NFCV_MAX_COLL_SUPPORTED];
    
    
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d002      	beq.n	8014926 <rfalNfcvPollerCollisionResolution+0x1e>
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d101      	bne.n	801492a <rfalNfcvPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 8014926:	2307      	movs	r3, #7
 8014928:	e190      	b.n	8014c4c <rfalNfcvPollerCollisionResolution+0x344>
    }

    /* Initialize parameters */
    *devCnt = 0;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	2200      	movs	r2, #0
 801492e:	701a      	strb	r2, [r3, #0]
    colIt         = 0;
 8014930:	2300      	movs	r3, #0
 8014932:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    colCnt        = 0;
 8014936:	2300      	movs	r3, #0
 8014938:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    colPending    = false;
 801493c:	2300      	movs	r3, #0
 801493e:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
    ST_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 8014942:	f107 0314 	add.w	r3, r7, #20
 8014946:	2290      	movs	r2, #144	; 0x90
 8014948:	2100      	movs	r1, #0
 801494a:	4618      	mov	r0, r3
 801494c:	f004 fa77 	bl	8018e3e <memset>

    if( devLimit > 0U )       /* MISRA 21.18 */
 8014950:	7bbb      	ldrb	r3, [r7, #14]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d00a      	beq.n	801496c <rfalNfcvPollerCollisionResolution+0x64>
    {
        ST_MEMSET(nfcvDevList, 0x00, (sizeof(rfalNfcvListenDevice)*devLimit) );
 8014956:	7bba      	ldrb	r2, [r7, #14]
 8014958:	4613      	mov	r3, r2
 801495a:	005b      	lsls	r3, r3, #1
 801495c:	4413      	add	r3, r2
 801495e:	009b      	lsls	r3, r3, #2
 8014960:	4413      	add	r3, r2
 8014962:	461a      	mov	r2, r3
 8014964:	2100      	movs	r1, #0
 8014966:	68b8      	ldr	r0, [r7, #8]
 8014968:	f004 fa69 	bl	8018e3e <memset>
    }

    NO_WARNING(colPending);   /* colPending is not exposed externally, in future it might become exposed/ouput parameter */

    if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 801496c:	7bfb      	ldrb	r3, [r7, #15]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d12c      	bne.n	80149cc <rfalNfcvPollerCollisionResolution+0xc4>
    {
        /* Send INVENTORY_REQ with one slot   Activity 2.0  9.3.7.1  (Symbol 0)  */
        ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, &nfcvDevList->InvRes, NULL );
 8014972:	68ba      	ldr	r2, [r7, #8]
 8014974:	2300      	movs	r3, #0
 8014976:	9300      	str	r3, [sp, #0]
 8014978:	4613      	mov	r3, r2
 801497a:	2200      	movs	r2, #0
 801497c:	2100      	movs	r1, #0
 801497e:	2020      	movs	r0, #32
 8014980:	f7ff ff5f 	bl	8014842 <rfalNfcvPollerInventory>
 8014984:	4603      	mov	r3, r0
 8014986:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

        if( ret == ERR_TIMEOUT )  /* Exit if no device found     Activity 2.0  9.3.7.2 (Symbol 1)  */
 801498a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801498e:	2b04      	cmp	r3, #4
 8014990:	d101      	bne.n	8014996 <rfalNfcvPollerCollisionResolution+0x8e>
        {
            return ERR_NONE;
 8014992:	2300      	movs	r3, #0
 8014994:	e15a      	b.n	8014c4c <rfalNfcvPollerCollisionResolution+0x344>
        }
        if( ret == ERR_NONE )     /* Device found without transmission error/collision    Activity 2.0  9.3.7.3 (Symbol 2)  */
 8014996:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801499a:	2b00      	cmp	r3, #0
 801499c:	d107      	bne.n	80149ae <rfalNfcvPollerCollisionResolution+0xa6>
        {
            (*devCnt)++;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	781b      	ldrb	r3, [r3, #0]
 80149a2:	3301      	adds	r3, #1
 80149a4:	b2da      	uxtb	r2, r3
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 80149aa:	2300      	movs	r3, #0
 80149ac:	e14e      	b.n	8014c4c <rfalNfcvPollerCollisionResolution+0x344>
        }

        /* A Collision has been identified  Activity 2.0  9.3.7.2  (Symbol 3) */
        colPending = true;
 80149ae:	2301      	movs	r3, #1
 80149b0:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 80149b4:	2301      	movs	r3, #1
 80149b6:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

        /* Check if the Collision Resolution is set to perform only Collision detection   Activity 2.0  9.3.7.5 (Symbol 4)*/
        if( devLimit == 0U )
 80149ba:	7bbb      	ldrb	r3, [r7, #14]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d101      	bne.n	80149c4 <rfalNfcvPollerCollisionResolution+0xbc>
        {
            return ERR_RF_COLLISION;
 80149c0:	231d      	movs	r3, #29
 80149c2:	e143      	b.n	8014c4c <rfalNfcvPollerCollisionResolution+0x344>
        }

        platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 80149c4:	2004      	movs	r0, #4
 80149c6:	f7ef fccf 	bl	8004368 <HAL_Delay>
 80149ca:	e005      	b.n	80149d8 <rfalNfcvPollerCollisionResolution+0xd0>
        /*******************************************************************************/
    }
    else
    { 
        /* Advance to 16 slots below without mask. Will give a good chance to identify multiple cards */
        colPending = true;
 80149cc:	2301      	movs	r3, #1
 80149ce:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 80149d2:	2301      	movs	r3, #1
 80149d4:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    
    /* Execute until all collisions are resolved Activity 2.0  9.3.7.16  (Symbol 17) */
    do
    {
        /* Activity 2.0  9.3.7.5  (Symbol 6) */
        colPending = false;
 80149d8:	2300      	movs	r3, #0
 80149da:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        slotNum    = 0;
 80149de:	2300      	movs	r3, #0
 80149e0:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
        
        do
        {
            if( slotNum == 0U )
 80149e4:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d12a      	bne.n	8014a42 <rfalNfcvPollerCollisionResolution+0x13a>
            {
                /* Send INVENTORY_REQ with 16 slots   Activity 2.0  9.3.7.7  (Symbol 8) */
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 80149ec:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 80149f0:	4613      	mov	r3, r2
 80149f2:	00db      	lsls	r3, r3, #3
 80149f4:	4413      	add	r3, r2
 80149f6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80149fa:	4413      	add	r3, r2
 80149fc:	3b9c      	subs	r3, #156	; 0x9c
 80149fe:	7818      	ldrb	r0, [r3, #0]
 8014a00:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8014a04:	f107 0114 	add.w	r1, r7, #20
 8014a08:	4613      	mov	r3, r2
 8014a0a:	00db      	lsls	r3, r3, #3
 8014a0c:	4413      	add	r3, r2
 8014a0e:	440b      	add	r3, r1
 8014a10:	1c59      	adds	r1, r3, #1
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	781b      	ldrb	r3, [r3, #0]
 8014a16:	461a      	mov	r2, r3
 8014a18:	4613      	mov	r3, r2
 8014a1a:	005b      	lsls	r3, r3, #1
 8014a1c:	4413      	add	r3, r2
 8014a1e:	009b      	lsls	r3, r3, #2
 8014a20:	4413      	add	r3, r2
 8014a22:	68ba      	ldr	r2, [r7, #8]
 8014a24:	4413      	add	r3, r2
 8014a26:	461a      	mov	r2, r3
 8014a28:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 8014a2c:	9300      	str	r3, [sp, #0]
 8014a2e:	4613      	mov	r3, r2
 8014a30:	460a      	mov	r2, r1
 8014a32:	4601      	mov	r1, r0
 8014a34:	2000      	movs	r0, #0
 8014a36:	f7ff ff04 	bl	8014842 <rfalNfcvPollerInventory>
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8014a40:	e013      	b.n	8014a6a <rfalNfcvPollerCollisionResolution+0x162>
            }
            else
            {
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	781b      	ldrb	r3, [r3, #0]
 8014a46:	461a      	mov	r2, r3
 8014a48:	4613      	mov	r3, r2
 8014a4a:	005b      	lsls	r3, r3, #1
 8014a4c:	4413      	add	r3, r2
 8014a4e:	009b      	lsls	r3, r3, #2
 8014a50:	4413      	add	r3, r2
 8014a52:	68ba      	ldr	r2, [r7, #8]
 8014a54:	4413      	add	r3, r2
 8014a56:	4618      	mov	r0, r3
 8014a58:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 8014a5c:	461a      	mov	r2, r3
 8014a5e:	210c      	movs	r1, #12
 8014a60:	f002 fca6 	bl	80173b0 <rfalISO15693TransceiveEOFAnticollision>
 8014a64:	4603      	mov	r3, r0
 8014a66:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            }
            slotNum++;
 8014a6a:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8014a6e:	3301      	adds	r3, #1
 8014a70:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
            
            /*******************************************************************************/
            if( ret != ERR_TIMEOUT )
 8014a74:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8014a78:	2b04      	cmp	r3, #4
 8014a7a:	f000 80cb 	beq.w	8014c14 <rfalNfcvPollerCollisionResolution+0x30c>
            {
                if( rcvdLen < rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 8014a7e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8014a82:	2b5f      	cmp	r3, #95	; 0x5f
 8014a84:	d802      	bhi.n	8014a8c <rfalNfcvPollerCollisionResolution+0x184>
                { /* If only a partial frame was received make sure the FDT_V_INVENT_NORES is fulfilled */
                    platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 8014a86:	2004      	movs	r0, #4
 8014a88:	f7ef fc6e 	bl	8004368 <HAL_Delay>
                }

                if( ret == ERR_NONE )
 8014a8c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d10b      	bne.n	8014aac <rfalNfcvPollerCollisionResolution+0x1a4>
                {
                    /* Check if the device found is already on the list and its response is a valid INVENTORY_RES */
                    if( rcvdLen == rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 8014a94:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8014a98:	2b60      	cmp	r3, #96	; 0x60
 8014a9a:	f040 80be 	bne.w	8014c1a <rfalNfcvPollerCollisionResolution+0x312>
                    {
                        /* Activity 2.0  9.3.7.15  (Symbol 11) */
                        (*devCnt)++;
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	781b      	ldrb	r3, [r3, #0]
 8014aa2:	3301      	adds	r3, #1
 8014aa4:	b2da      	uxtb	r2, r3
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	701a      	strb	r2, [r3, #0]
 8014aaa:	e0b6      	b.n	8014c1a <rfalNfcvPollerCollisionResolution+0x312>
                    }
                }
                else /* Treat everything else as collision */
                {
                    /* Activity 2.0  9.3.7.15  (Symbol 16) */
                    colPending = true;
 8014aac:	2301      	movs	r3, #1
 8014aae:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    

                    /*******************************************************************************/
                    /* Ensure that this collision still fits on the container */
                    if( colCnt < RFAL_NFCV_MAX_COLL_SUPPORTED )
 8014ab2:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8014ab6:	2b0f      	cmp	r3, #15
 8014ab8:	f200 80af 	bhi.w	8014c1a <rfalNfcvPollerCollisionResolution+0x312>
                    {
                        /* Store this collision on the container to be resolved later */
                        /* Activity 2.0  9.3.7.15  (Symbol 16): add the collision information
                         * (MASK_VAL + SN) to the list containing the collision information */
                        ST_MEMCPY(colFound[colCnt].maskVal, colFound[colIt].maskVal, RFAL_NFCV_UID_LEN);
 8014abc:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8014ac0:	f107 0114 	add.w	r1, r7, #20
 8014ac4:	4613      	mov	r3, r2
 8014ac6:	00db      	lsls	r3, r3, #3
 8014ac8:	4413      	add	r3, r2
 8014aca:	440b      	add	r3, r1
 8014acc:	1c58      	adds	r0, r3, #1
 8014ace:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8014ad2:	f107 0114 	add.w	r1, r7, #20
 8014ad6:	4613      	mov	r3, r2
 8014ad8:	00db      	lsls	r3, r3, #3
 8014ada:	4413      	add	r3, r2
 8014adc:	440b      	add	r3, r1
 8014ade:	3301      	adds	r3, #1
 8014ae0:	2208      	movs	r2, #8
 8014ae2:	4619      	mov	r1, r3
 8014ae4:	f004 f987 	bl	8018df6 <memcpy>
                        colPos = colFound[colIt].maskLen;
 8014ae8:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8014aec:	4613      	mov	r3, r2
 8014aee:	00db      	lsls	r3, r3, #3
 8014af0:	4413      	add	r3, r2
 8014af2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8014af6:	4413      	add	r3, r2
 8014af8:	3b9c      	subs	r3, #156	; 0x9c
 8014afa:	781b      	ldrb	r3, [r3, #0]
 8014afc:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 8014b00:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8014b04:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8014b08:	08db      	lsrs	r3, r3, #3
 8014b0a:	b2d8      	uxtb	r0, r3
 8014b0c:	4601      	mov	r1, r0
 8014b0e:	4613      	mov	r3, r2
 8014b10:	00db      	lsls	r3, r3, #3
 8014b12:	4413      	add	r3, r2
 8014b14:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8014b18:	4413      	add	r3, r2
 8014b1a:	440b      	add	r3, r1
 8014b1c:	3b9b      	subs	r3, #155	; 0x9b
 8014b1e:	7819      	ldrb	r1, [r3, #0]
 8014b20:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8014b24:	f003 0307 	and.w	r3, r3, #7
 8014b28:	2201      	movs	r2, #1
 8014b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8014b2e:	b2db      	uxtb	r3, r3
 8014b30:	3b01      	subs	r3, #1
 8014b32:	b2db      	uxtb	r3, r3
 8014b34:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8014b38:	400b      	ands	r3, r1
 8014b3a:	b2d9      	uxtb	r1, r3
 8014b3c:	4613      	mov	r3, r2
 8014b3e:	00db      	lsls	r3, r3, #3
 8014b40:	4413      	add	r3, r2
 8014b42:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8014b46:	4413      	add	r3, r2
 8014b48:	4403      	add	r3, r0
 8014b4a:	3b9b      	subs	r3, #155	; 0x9b
 8014b4c:	460a      	mov	r2, r1
 8014b4e:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 8014b50:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8014b54:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8014b58:	08db      	lsrs	r3, r3, #3
 8014b5a:	b2d8      	uxtb	r0, r3
 8014b5c:	4601      	mov	r1, r0
 8014b5e:	4613      	mov	r3, r2
 8014b60:	00db      	lsls	r3, r3, #3
 8014b62:	4413      	add	r3, r2
 8014b64:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8014b68:	4413      	add	r3, r2
 8014b6a:	440b      	add	r3, r1
 8014b6c:	3b9b      	subs	r3, #155	; 0x9b
 8014b6e:	7819      	ldrb	r1, [r3, #0]
 8014b70:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8014b74:	1e5a      	subs	r2, r3, #1
 8014b76:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8014b7a:	f003 0307 	and.w	r3, r3, #7
 8014b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8014b82:	b2db      	uxtb	r3, r3
 8014b84:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8014b88:	430b      	orrs	r3, r1
 8014b8a:	b2d9      	uxtb	r1, r3
 8014b8c:	4613      	mov	r3, r2
 8014b8e:	00db      	lsls	r3, r3, #3
 8014b90:	4413      	add	r3, r2
 8014b92:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8014b96:	4413      	add	r3, r2
 8014b98:	4403      	add	r3, r0
 8014b9a:	3b9b      	subs	r3, #155	; 0x9b
 8014b9c:	460a      	mov	r2, r1
 8014b9e:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[((colPos/RFAL_BITS_IN_BYTE)+1U)]  = (uint8_t)((slotNum-1U) >> (RFAL_BITS_IN_BYTE - (colPos % RFAL_BITS_IN_BYTE)));
 8014ba0:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8014ba4:	1e5a      	subs	r2, r3, #1
 8014ba6:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8014baa:	f003 0307 	and.w	r3, r3, #7
 8014bae:	f1c3 0308 	rsb	r3, r3, #8
 8014bb2:	fa22 f003 	lsr.w	r0, r2, r3
 8014bb6:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8014bba:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8014bbe:	08db      	lsrs	r3, r3, #3
 8014bc0:	b2db      	uxtb	r3, r3
 8014bc2:	1c59      	adds	r1, r3, #1
 8014bc4:	b2c0      	uxtb	r0, r0
 8014bc6:	4613      	mov	r3, r2
 8014bc8:	00db      	lsls	r3, r3, #3
 8014bca:	4413      	add	r3, r2
 8014bcc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8014bd0:	4413      	add	r3, r2
 8014bd2:	440b      	add	r3, r1
 8014bd4:	3b9b      	subs	r3, #155	; 0x9b
 8014bd6:	4602      	mov	r2, r0
 8014bd8:	701a      	strb	r2, [r3, #0]

                        colFound[colCnt].maskLen = (colFound[colIt].maskLen + 4U);
 8014bda:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8014bde:	4613      	mov	r3, r2
 8014be0:	00db      	lsls	r3, r3, #3
 8014be2:	4413      	add	r3, r2
 8014be4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8014be8:	4413      	add	r3, r2
 8014bea:	3b9c      	subs	r3, #156	; 0x9c
 8014bec:	781b      	ldrb	r3, [r3, #0]
 8014bee:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8014bf2:	3304      	adds	r3, #4
 8014bf4:	b2d9      	uxtb	r1, r3
 8014bf6:	4613      	mov	r3, r2
 8014bf8:	00db      	lsls	r3, r3, #3
 8014bfa:	4413      	add	r3, r2
 8014bfc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8014c00:	4413      	add	r3, r2
 8014c02:	3b9c      	subs	r3, #156	; 0x9c
 8014c04:	460a      	mov	r2, r1
 8014c06:	701a      	strb	r2, [r3, #0]

                        colCnt++;
 8014c08:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8014c0c:	3301      	adds	r3, #1
 8014c0e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8014c12:	e002      	b.n	8014c1a <rfalNfcvPollerCollisionResolution+0x312>
                }
            }
            else 
            { 
                /* Timeout */
                platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 8014c14:	2004      	movs	r0, #4
 8014c16:	f7ef fba7 	bl	8004368 <HAL_Delay>
            }
            
            /* Check if devices found have reached device limit   Activity 2.0  9.3.7.15  (Symbol 16) */
            if( *devCnt >= devLimit )
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	781b      	ldrb	r3, [r3, #0]
 8014c1e:	7bba      	ldrb	r2, [r7, #14]
 8014c20:	429a      	cmp	r2, r3
 8014c22:	d801      	bhi.n	8014c28 <rfalNfcvPollerCollisionResolution+0x320>
            {
                return ERR_NONE;
 8014c24:	2300      	movs	r3, #0
 8014c26:	e011      	b.n	8014c4c <rfalNfcvPollerCollisionResolution+0x344>
            }
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
 8014c28:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8014c2c:	2b0f      	cmp	r3, #15
 8014c2e:	f67f aed9 	bls.w	80149e4 <rfalNfcvPollerCollisionResolution+0xdc>
        colIt++;
 8014c32:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8014c36:	3301      	adds	r3, #1
 8014c38:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    } while( colIt < colCnt );                     /* Collisions found loop */
 8014c3c:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8014c40:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8014c44:	429a      	cmp	r2, r3
 8014c46:	f4ff aec7 	bcc.w	80149d8 <rfalNfcvPollerCollisionResolution+0xd0>
    
    return ERR_NONE;
 8014c4a:	2300      	movs	r3, #0
}
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	37b0      	adds	r7, #176	; 0xb0
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}

08014c54 <rfalNfcvPollerSelect>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerSelect( uint8_t flags, const uint8_t* uid )
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b094      	sub	sp, #80	; 0x50
 8014c58:	af06      	add	r7, sp, #24
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	6039      	str	r1, [r7, #0]
 8014c5e:	71fb      	strb	r3, [r7, #7]
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    if( uid == NULL )
 8014c60:	683b      	ldr	r3, [r7, #0]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d101      	bne.n	8014c6a <rfalNfcvPollerSelect+0x16>
    {
        return ERR_PARAM;
 8014c66:	2307      	movs	r3, #7
 8014c68:	e012      	b.n	8014c90 <rfalNfcvPollerSelect+0x3c>
    }
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_SELECT, flags, RFAL_NFCV_PARAM_SKIP, uid, NULL, 0U, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 8014c6a:	79f9      	ldrb	r1, [r7, #7]
 8014c6c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8014c70:	9304      	str	r3, [sp, #16]
 8014c72:	232a      	movs	r3, #42	; 0x2a
 8014c74:	9303      	str	r3, [sp, #12]
 8014c76:	f107 030c 	add.w	r3, r7, #12
 8014c7a:	9302      	str	r3, [sp, #8]
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	9301      	str	r3, [sp, #4]
 8014c80:	2300      	movs	r3, #0
 8014c82:	9300      	str	r3, [sp, #0]
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	2200      	movs	r2, #0
 8014c88:	2025      	movs	r0, #37	; 0x25
 8014c8a:	f000 f9cf 	bl	801502c <rfalNfcvPollerTransceiveReq>
 8014c8e:	4603      	mov	r3, r0
}
 8014c90:	4618      	mov	r0, r3
 8014c92:	3738      	adds	r7, #56	; 0x38
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}

08014c98 <rfalNfcvPollerReadSingleBlock>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerReadSingleBlock( uint8_t flags, const uint8_t* uid, uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b08c      	sub	sp, #48	; 0x30
 8014c9c:	af06      	add	r7, sp, #24
 8014c9e:	60b9      	str	r1, [r7, #8]
 8014ca0:	607b      	str	r3, [r7, #4]
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	73fb      	strb	r3, [r7, #15]
 8014ca6:	4613      	mov	r3, r2
 8014ca8:	73bb      	strb	r3, [r7, #14]
    uint8_t bn;

    bn = blockNum;
 8014caa:	7bbb      	ldrb	r3, [r7, #14]
 8014cac:	75fb      	strb	r3, [r7, #23]

    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), rxBuf, rxBufLen, rcvLen );
 8014cae:	7bf9      	ldrb	r1, [r7, #15]
 8014cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb2:	9304      	str	r3, [sp, #16]
 8014cb4:	8c3b      	ldrh	r3, [r7, #32]
 8014cb6:	9303      	str	r3, [sp, #12]
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	9302      	str	r3, [sp, #8]
 8014cbc:	2301      	movs	r3, #1
 8014cbe:	9301      	str	r3, [sp, #4]
 8014cc0:	f107 0317 	add.w	r3, r7, #23
 8014cc4:	9300      	str	r3, [sp, #0]
 8014cc6:	68bb      	ldr	r3, [r7, #8]
 8014cc8:	2200      	movs	r2, #0
 8014cca:	2020      	movs	r0, #32
 8014ccc:	f000 f9ae 	bl	801502c <rfalNfcvPollerTransceiveReq>
 8014cd0:	4603      	mov	r3, r0
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	3718      	adds	r7, #24
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}

08014cda <rfalNfcvPollerWriteSingleBlock>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint8_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 8014cda:	b580      	push	{r7, lr}
 8014cdc:	b09e      	sub	sp, #120	; 0x78
 8014cde:	af06      	add	r7, sp, #24
 8014ce0:	60b9      	str	r1, [r7, #8]
 8014ce2:	607b      	str	r3, [r7, #4]
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	73fb      	strb	r3, [r7, #15]
 8014ce8:	4613      	mov	r3, r2
 8014cea:	73bb      	strb	r3, [r7, #14]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) || (wrData == NULL) )
 8014cec:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d006      	beq.n	8014d02 <rfalNfcvPollerWriteSingleBlock+0x28>
 8014cf4:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014cf8:	2b20      	cmp	r3, #32
 8014cfa:	d802      	bhi.n	8014d02 <rfalNfcvPollerWriteSingleBlock+0x28>
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d101      	bne.n	8014d06 <rfalNfcvPollerWriteSingleBlock+0x2c>
    {
        return ERR_PARAM;
 8014d02:	2307      	movs	r3, #7
 8014d04:	e035      	b.n	8014d72 <rfalNfcvPollerWriteSingleBlock+0x98>
    }
    
    dataLen = 0U;
 8014d06:	2300      	movs	r3, #0
 8014d08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = blockNum;                    /* Set Block Number (8 bits)  */
 8014d0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d10:	1c5a      	adds	r2, r3, #1
 8014d12:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8014d16:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8014d1a:	4413      	add	r3, r2
 8014d1c:	7bba      	ldrb	r2, [r7, #14]
 8014d1e:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen ); /* Append Block data to write */
 8014d22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d26:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8014d2a:	4413      	add	r3, r2
 8014d2c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8014d30:	6879      	ldr	r1, [r7, #4]
 8014d32:	4618      	mov	r0, r3
 8014d34:	f004 f85f 	bl	8018df6 <memcpy>
    dataLen += blockLen;
 8014d38:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8014d3c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014d40:	4413      	add	r3, r2
 8014d42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 8014d46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d4a:	b29b      	uxth	r3, r3
 8014d4c:	7bf9      	ldrb	r1, [r7, #15]
 8014d4e:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 8014d52:	9204      	str	r2, [sp, #16]
 8014d54:	222a      	movs	r2, #42	; 0x2a
 8014d56:	9203      	str	r2, [sp, #12]
 8014d58:	f107 0210 	add.w	r2, r7, #16
 8014d5c:	9202      	str	r2, [sp, #8]
 8014d5e:	9301      	str	r3, [sp, #4]
 8014d60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014d64:	9300      	str	r3, [sp, #0]
 8014d66:	68bb      	ldr	r3, [r7, #8]
 8014d68:	2200      	movs	r2, #0
 8014d6a:	2021      	movs	r0, #33	; 0x21
 8014d6c:	f000 f95e 	bl	801502c <rfalNfcvPollerTransceiveReq>
 8014d70:	4603      	mov	r3, r0
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3760      	adds	r7, #96	; 0x60
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}

08014d7a <rfalNfcvPollerReadMultipleBlocks>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_LOCK_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint8_t firstBlockNum, uint8_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8014d7a:	b580      	push	{r7, lr}
 8014d7c:	b08a      	sub	sp, #40	; 0x28
 8014d7e:	af06      	add	r7, sp, #24
 8014d80:	6039      	str	r1, [r7, #0]
 8014d82:	4611      	mov	r1, r2
 8014d84:	461a      	mov	r2, r3
 8014d86:	4603      	mov	r3, r0
 8014d88:	71fb      	strb	r3, [r7, #7]
 8014d8a:	460b      	mov	r3, r1
 8014d8c:	71bb      	strb	r3, [r7, #6]
 8014d8e:	4613      	mov	r3, r2
 8014d90:	717b      	strb	r3, [r7, #5]
    uint8_t            data[(RFAL_NFCV_BLOCKNUM_LEN + RFAL_NFCV_BLOCKNUM_LEN)];
    uint8_t            dataLen;
    
    dataLen = 0U;
 8014d92:	2300      	movs	r3, #0
 8014d94:	73fb      	strb	r3, [r7, #15]
    
    /* Compute Request Data */
    data[dataLen++] = firstBlockNum;                    /* Set first Block Number       */
 8014d96:	7bfb      	ldrb	r3, [r7, #15]
 8014d98:	1c5a      	adds	r2, r3, #1
 8014d9a:	73fa      	strb	r2, [r7, #15]
 8014d9c:	f107 0210 	add.w	r2, r7, #16
 8014da0:	4413      	add	r3, r2
 8014da2:	79ba      	ldrb	r2, [r7, #6]
 8014da4:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = numOfBlocks;                      /* Set number of blocks to read */
 8014da8:	7bfb      	ldrb	r3, [r7, #15]
 8014daa:	1c5a      	adds	r2, r3, #1
 8014dac:	73fa      	strb	r2, [r7, #15]
 8014dae:	f107 0210 	add.w	r2, r7, #16
 8014db2:	4413      	add	r3, r2
 8014db4:	797a      	ldrb	r2, [r7, #5]
 8014db6:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_MULTIPLE_BLOCKS, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8014dba:	7bfb      	ldrb	r3, [r7, #15]
 8014dbc:	b29b      	uxth	r3, r3
 8014dbe:	79f9      	ldrb	r1, [r7, #7]
 8014dc0:	6a3a      	ldr	r2, [r7, #32]
 8014dc2:	9204      	str	r2, [sp, #16]
 8014dc4:	8bba      	ldrh	r2, [r7, #28]
 8014dc6:	9203      	str	r2, [sp, #12]
 8014dc8:	69ba      	ldr	r2, [r7, #24]
 8014dca:	9202      	str	r2, [sp, #8]
 8014dcc:	9301      	str	r3, [sp, #4]
 8014dce:	f107 030c 	add.w	r3, r7, #12
 8014dd2:	9300      	str	r3, [sp, #0]
 8014dd4:	683b      	ldr	r3, [r7, #0]
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	2023      	movs	r0, #35	; 0x23
 8014dda:	f000 f927 	bl	801502c <rfalNfcvPollerTransceiveReq>
 8014dde:	4603      	mov	r3, r0
}
 8014de0:	4618      	mov	r0, r3
 8014de2:	3710      	adds	r7, #16
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bd80      	pop	{r7, pc}

08014de8 <rfalNfcvPollerExtendedReadSingleBlock>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedReadSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b08c      	sub	sp, #48	; 0x30
 8014dec:	af06      	add	r7, sp, #24
 8014dee:	60b9      	str	r1, [r7, #8]
 8014df0:	607b      	str	r3, [r7, #4]
 8014df2:	4603      	mov	r3, r0
 8014df4:	73fb      	strb	r3, [r7, #15]
 8014df6:	4613      	mov	r3, r2
 8014df8:	81bb      	strh	r3, [r7, #12]
    uint8_t data[RFAL_NFCV_BLOCKNUM_EXTENDED_LEN];
    uint8_t dataLen;
        
    dataLen = 0U;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum; /* TS T5T 1.0 BNo is considered as a multi-byte field. TS T5T 1.0 5.1.1.13 multi-byte field follows [DIGITAL]. [DIGITAL] 9.3.1 A multiple byte field is transmitted LSB first. */
 8014dfe:	7dfb      	ldrb	r3, [r7, #23]
 8014e00:	1c5a      	adds	r2, r3, #1
 8014e02:	75fa      	strb	r2, [r7, #23]
 8014e04:	89ba      	ldrh	r2, [r7, #12]
 8014e06:	b2d2      	uxtb	r2, r2
 8014e08:	f107 0118 	add.w	r1, r7, #24
 8014e0c:	440b      	add	r3, r1
 8014e0e:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = (uint8_t)((blockNum >> 8U) & 0xFFU);
 8014e12:	89bb      	ldrh	r3, [r7, #12]
 8014e14:	0a1b      	lsrs	r3, r3, #8
 8014e16:	b29a      	uxth	r2, r3
 8014e18:	7dfb      	ldrb	r3, [r7, #23]
 8014e1a:	1c59      	adds	r1, r3, #1
 8014e1c:	75f9      	strb	r1, [r7, #23]
 8014e1e:	b2d2      	uxtb	r2, r2
 8014e20:	f107 0118 	add.w	r1, r7, #24
 8014e24:	440b      	add	r3, r1
 8014e26:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8014e2a:	7dfb      	ldrb	r3, [r7, #23]
 8014e2c:	b29b      	uxth	r3, r3
 8014e2e:	7bf9      	ldrb	r1, [r7, #15]
 8014e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e32:	9204      	str	r2, [sp, #16]
 8014e34:	8c3a      	ldrh	r2, [r7, #32]
 8014e36:	9203      	str	r2, [sp, #12]
 8014e38:	687a      	ldr	r2, [r7, #4]
 8014e3a:	9202      	str	r2, [sp, #8]
 8014e3c:	9301      	str	r3, [sp, #4]
 8014e3e:	f107 0314 	add.w	r3, r7, #20
 8014e42:	9300      	str	r3, [sp, #0]
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	2200      	movs	r2, #0
 8014e48:	2030      	movs	r0, #48	; 0x30
 8014e4a:	f000 f8ef 	bl	801502c <rfalNfcvPollerTransceiveReq>
 8014e4e:	4603      	mov	r3, r0
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3718      	adds	r7, #24
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}

08014e58 <rfalNfcvPollerExtendedWriteSingleBlock>:


/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b09e      	sub	sp, #120	; 0x78
 8014e5c:	af06      	add	r7, sp, #24
 8014e5e:	60b9      	str	r1, [r7, #8]
 8014e60:	607b      	str	r3, [r7, #4]
 8014e62:	4603      	mov	r3, r0
 8014e64:	73fb      	strb	r3, [r7, #15]
 8014e66:	4613      	mov	r3, r2
 8014e68:	81bb      	strh	r3, [r7, #12]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) )
 8014e6a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d003      	beq.n	8014e7a <rfalNfcvPollerExtendedWriteSingleBlock+0x22>
 8014e72:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014e76:	2b20      	cmp	r3, #32
 8014e78:	d901      	bls.n	8014e7e <rfalNfcvPollerExtendedWriteSingleBlock+0x26>
    {
        return ERR_PARAM;
 8014e7a:	2307      	movs	r3, #7
 8014e7c:	e044      	b.n	8014f08 <rfalNfcvPollerExtendedWriteSingleBlock+0xb0>
    }
    
    dataLen = 0U;
 8014e7e:	2300      	movs	r3, #0
 8014e80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;                    /* TS T5T 1.0 BNo is considered as a multi-byte field. TS T5T 1.0 5.1.1.13 multi-byte field follows [DIGITAL]. [DIGITAL] 9.3.1 A multiple byte field is transmitted LSB first. */
 8014e84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e88:	1c5a      	adds	r2, r3, #1
 8014e8a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8014e8e:	89ba      	ldrh	r2, [r7, #12]
 8014e90:	b2d2      	uxtb	r2, r2
 8014e92:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014e96:	440b      	add	r3, r1
 8014e98:	f803 2c24 	strb.w	r2, [r3, #-36]
    data[dataLen++] = (uint8_t)((blockNum >> 8U) & 0xFFU);
 8014e9c:	89bb      	ldrh	r3, [r7, #12]
 8014e9e:	0a1b      	lsrs	r3, r3, #8
 8014ea0:	b29a      	uxth	r2, r3
 8014ea2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ea6:	1c59      	adds	r1, r3, #1
 8014ea8:	f887 105f 	strb.w	r1, [r7, #95]	; 0x5f
 8014eac:	b2d2      	uxtb	r2, r2
 8014eae:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014eb2:	440b      	add	r3, r1
 8014eb4:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen );         /* Append Block data to write */
 8014eb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ebc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8014ec0:	4413      	add	r3, r2
 8014ec2:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8014ec6:	6879      	ldr	r1, [r7, #4]
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f003 ff94 	bl	8018df6 <memcpy>
    dataLen += blockLen;
 8014ece:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8014ed2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014ed6:	4413      	add	r3, r2
 8014ed8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_WRITE_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 8014edc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ee0:	b29b      	uxth	r3, r3
 8014ee2:	7bf9      	ldrb	r1, [r7, #15]
 8014ee4:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 8014ee8:	9204      	str	r2, [sp, #16]
 8014eea:	222a      	movs	r2, #42	; 0x2a
 8014eec:	9203      	str	r2, [sp, #12]
 8014eee:	f107 0210 	add.w	r2, r7, #16
 8014ef2:	9202      	str	r2, [sp, #8]
 8014ef4:	9301      	str	r3, [sp, #4]
 8014ef6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014efa:	9300      	str	r3, [sp, #0]
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	2200      	movs	r2, #0
 8014f00:	2031      	movs	r0, #49	; 0x31
 8014f02:	f000 f893 	bl	801502c <rfalNfcvPollerTransceiveReq>
 8014f06:	4603      	mov	r3, r0
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	3760      	adds	r7, #96	; 0x60
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}

08014f10 <rfalNfcvPollerExtendedReadMultipleBlocks>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_LOCK_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint16_t firstBlockNum, uint16_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b08c      	sub	sp, #48	; 0x30
 8014f14:	af06      	add	r7, sp, #24
 8014f16:	60b9      	str	r1, [r7, #8]
 8014f18:	4611      	mov	r1, r2
 8014f1a:	461a      	mov	r2, r3
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	73fb      	strb	r3, [r7, #15]
 8014f20:	460b      	mov	r3, r1
 8014f22:	81bb      	strh	r3, [r7, #12]
 8014f24:	4613      	mov	r3, r2
 8014f26:	80fb      	strh	r3, [r7, #6]
    uint8_t data[(RFAL_NFCV_BLOCKNUM_EXTENDED_LEN + RFAL_NFCV_BLOCKNUM_EXTENDED_LEN)];
    uint8_t dataLen;
        
    dataLen = 0U;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)((firstBlockNum >> 0U) & 0xFFU);
 8014f2c:	7dfb      	ldrb	r3, [r7, #23]
 8014f2e:	1c5a      	adds	r2, r3, #1
 8014f30:	75fa      	strb	r2, [r7, #23]
 8014f32:	89ba      	ldrh	r2, [r7, #12]
 8014f34:	b2d2      	uxtb	r2, r2
 8014f36:	f107 0118 	add.w	r1, r7, #24
 8014f3a:	440b      	add	r3, r1
 8014f3c:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((firstBlockNum >> 8U) & 0xFFU);
 8014f40:	89bb      	ldrh	r3, [r7, #12]
 8014f42:	0a1b      	lsrs	r3, r3, #8
 8014f44:	b29a      	uxth	r2, r3
 8014f46:	7dfb      	ldrb	r3, [r7, #23]
 8014f48:	1c59      	adds	r1, r3, #1
 8014f4a:	75f9      	strb	r1, [r7, #23]
 8014f4c:	b2d2      	uxtb	r2, r2
 8014f4e:	f107 0118 	add.w	r1, r7, #24
 8014f52:	440b      	add	r3, r1
 8014f54:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((numOfBlocks >> 0U) & 0xFFU);
 8014f58:	7dfb      	ldrb	r3, [r7, #23]
 8014f5a:	1c5a      	adds	r2, r3, #1
 8014f5c:	75fa      	strb	r2, [r7, #23]
 8014f5e:	88fa      	ldrh	r2, [r7, #6]
 8014f60:	b2d2      	uxtb	r2, r2
 8014f62:	f107 0118 	add.w	r1, r7, #24
 8014f66:	440b      	add	r3, r1
 8014f68:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((numOfBlocks >> 8U) & 0xFFU);
 8014f6c:	88fb      	ldrh	r3, [r7, #6]
 8014f6e:	0a1b      	lsrs	r3, r3, #8
 8014f70:	b29a      	uxth	r2, r3
 8014f72:	7dfb      	ldrb	r3, [r7, #23]
 8014f74:	1c59      	adds	r1, r3, #1
 8014f76:	75f9      	strb	r1, [r7, #23]
 8014f78:	b2d2      	uxtb	r2, r2
 8014f7a:	f107 0118 	add.w	r1, r7, #24
 8014f7e:	440b      	add	r3, r1
 8014f80:	f803 2c08 	strb.w	r2, [r3, #-8]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_READ_MULTIPLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8014f84:	7dfb      	ldrb	r3, [r7, #23]
 8014f86:	b29b      	uxth	r3, r3
 8014f88:	7bf9      	ldrb	r1, [r7, #15]
 8014f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014f8c:	9204      	str	r2, [sp, #16]
 8014f8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014f90:	9203      	str	r2, [sp, #12]
 8014f92:	6a3a      	ldr	r2, [r7, #32]
 8014f94:	9202      	str	r2, [sp, #8]
 8014f96:	9301      	str	r3, [sp, #4]
 8014f98:	f107 0310 	add.w	r3, r7, #16
 8014f9c:	9300      	str	r3, [sp, #0]
 8014f9e:	68bb      	ldr	r3, [r7, #8]
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	2033      	movs	r0, #51	; 0x33
 8014fa4:	f000 f842 	bl	801502c <rfalNfcvPollerTransceiveReq>
 8014fa8:	4603      	mov	r3, r0
}
 8014faa:	4618      	mov	r0, r3
 8014fac:	3718      	adds	r7, #24
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	bd80      	pop	{r7, pc}

08014fb2 <rfalNfcvPollerGetSystemInformation>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerGetSystemInformation( uint8_t flags, const uint8_t* uid, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8014fb2:	b580      	push	{r7, lr}
 8014fb4:	b08a      	sub	sp, #40	; 0x28
 8014fb6:	af06      	add	r7, sp, #24
 8014fb8:	60b9      	str	r1, [r7, #8]
 8014fba:	607a      	str	r2, [r7, #4]
 8014fbc:	461a      	mov	r2, r3
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	73fb      	strb	r3, [r7, #15]
 8014fc2:	4613      	mov	r3, r2
 8014fc4:	81bb      	strh	r3, [r7, #12]
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_GET_SYS_INFO, flags, RFAL_NFCV_PARAM_SKIP, uid, NULL, 0U, rxBuf, rxBufLen, rcvLen );
 8014fc6:	7bf9      	ldrb	r1, [r7, #15]
 8014fc8:	69bb      	ldr	r3, [r7, #24]
 8014fca:	9304      	str	r3, [sp, #16]
 8014fcc:	89bb      	ldrh	r3, [r7, #12]
 8014fce:	9303      	str	r3, [sp, #12]
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	9302      	str	r3, [sp, #8]
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	9301      	str	r3, [sp, #4]
 8014fd8:	2300      	movs	r3, #0
 8014fda:	9300      	str	r3, [sp, #0]
 8014fdc:	68bb      	ldr	r3, [r7, #8]
 8014fde:	2200      	movs	r2, #0
 8014fe0:	202b      	movs	r0, #43	; 0x2b
 8014fe2:	f000 f823 	bl	801502c <rfalNfcvPollerTransceiveReq>
 8014fe6:	4603      	mov	r3, r0
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3710      	adds	r7, #16
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}

08014ff0 <rfalNfcvPollerExtendedGetSystemInformation>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedGetSystemInformation( uint8_t flags, const uint8_t* uid, uint8_t requestField, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b08a      	sub	sp, #40	; 0x28
 8014ff4:	af06      	add	r7, sp, #24
 8014ff6:	60b9      	str	r1, [r7, #8]
 8014ff8:	607b      	str	r3, [r7, #4]
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	73fb      	strb	r3, [r7, #15]
 8014ffe:	4613      	mov	r3, r2
 8015000:	73bb      	strb	r3, [r7, #14]
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_GET_SYS_INFO, flags, requestField, uid, NULL, 0U, rxBuf, rxBufLen, rcvLen ); 
 8015002:	7bba      	ldrb	r2, [r7, #14]
 8015004:	7bf9      	ldrb	r1, [r7, #15]
 8015006:	69fb      	ldr	r3, [r7, #28]
 8015008:	9304      	str	r3, [sp, #16]
 801500a:	8b3b      	ldrh	r3, [r7, #24]
 801500c:	9303      	str	r3, [sp, #12]
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	9302      	str	r3, [sp, #8]
 8015012:	2300      	movs	r3, #0
 8015014:	9301      	str	r3, [sp, #4]
 8015016:	2300      	movs	r3, #0
 8015018:	9300      	str	r3, [sp, #0]
 801501a:	68bb      	ldr	r3, [r7, #8]
 801501c:	203b      	movs	r0, #59	; 0x3b
 801501e:	f000 f805 	bl	801502c <rfalNfcvPollerTransceiveReq>
 8015022:	4603      	mov	r3, r0
}
 8015024:	4618      	mov	r0, r3
 8015026:	3710      	adds	r7, #16
 8015028:	46bd      	mov	sp, r7
 801502a:	bd80      	pop	{r7, pc}

0801502c <rfalNfcvPollerTransceiveReq>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerTransceiveReq( uint8_t cmd, uint8_t flags, uint8_t param, const uint8_t* uid, const uint8_t *data, uint16_t dataLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b094      	sub	sp, #80	; 0x50
 8015030:	af04      	add	r7, sp, #16
 8015032:	603b      	str	r3, [r7, #0]
 8015034:	4603      	mov	r3, r0
 8015036:	71fb      	strb	r3, [r7, #7]
 8015038:	460b      	mov	r3, r1
 801503a:	71bb      	strb	r3, [r7, #6]
 801503c:	4613      	mov	r3, r2
 801503e:	717b      	strb	r3, [r7, #5]
    rfalNfcvGenericReq req;
    uint8_t            msgIt;
    rfalBitRate        rxBR;
    bool               fastMode;
    
    msgIt    = 0;
 8015040:	2300      	movs	r3, #0
 8015042:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    fastMode = false;
 8015046:	2300      	movs	r3, #0
 8015048:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 801504c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801504e:	2b00      	cmp	r3, #0
 8015050:	d013      	beq.n	801507a <rfalNfcvPollerTransceiveReq+0x4e>
 8015052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015054:	2b00      	cmp	r3, #0
 8015056:	d010      	beq.n	801507a <rfalNfcvPollerTransceiveReq+0x4e>
 8015058:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801505c:	2b00      	cmp	r3, #0
 801505e:	d002      	beq.n	8015066 <rfalNfcvPollerTransceiveReq+0x3a>
 8015060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015062:	2b00      	cmp	r3, #0
 8015064:	d009      	beq.n	801507a <rfalNfcvPollerTransceiveReq+0x4e>
        (dataLen > ((uid != NULL) ? RFAL_NFCV_MAX_GEN_DATA_LEN : (RFAL_NFCV_MAX_GEN_DATA_LEN - RFAL_NFCV_UID_LEN)))  )
 8015066:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801506a:	683a      	ldr	r2, [r7, #0]
 801506c:	2a00      	cmp	r2, #0
 801506e:	d001      	beq.n	8015074 <rfalNfcvPollerTransceiveReq+0x48>
 8015070:	2229      	movs	r2, #41	; 0x29
 8015072:	e000      	b.n	8015076 <rfalNfcvPollerTransceiveReq+0x4a>
 8015074:	2221      	movs	r2, #33	; 0x21
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 8015076:	429a      	cmp	r2, r3
 8015078:	d201      	bcs.n	801507e <rfalNfcvPollerTransceiveReq+0x52>
    {
        return ERR_PARAM;
 801507a:	2307      	movs	r3, #7
 801507c:	e0cb      	b.n	8015216 <rfalNfcvPollerTransceiveReq+0x1ea>
    }
    
    
    /* Check if the command is an ST's Fast command */
    if( (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_SINGLE_BLOCK)    || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_SINGLE_BLOCK)    || 
 801507e:	79fb      	ldrb	r3, [r7, #7]
 8015080:	2bc0      	cmp	r3, #192	; 0xc0
 8015082:	d017      	beq.n	80150b4 <rfalNfcvPollerTransceiveReq+0x88>
 8015084:	79fb      	ldrb	r3, [r7, #7]
 8015086:	2bc4      	cmp	r3, #196	; 0xc4
 8015088:	d014      	beq.n	80150b4 <rfalNfcvPollerTransceiveReq+0x88>
 801508a:	79fb      	ldrb	r3, [r7, #7]
 801508c:	2bc3      	cmp	r3, #195	; 0xc3
 801508e:	d011      	beq.n	80150b4 <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MULTIPLE_BLOCKS) || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_MULTIPLE_BLOCKS) ||
 8015090:	79fb      	ldrb	r3, [r7, #7]
 8015092:	2bc5      	cmp	r3, #197	; 0xc5
 8015094:	d00e      	beq.n	80150b4 <rfalNfcvPollerTransceiveReq+0x88>
 8015096:	79fb      	ldrb	r3, [r7, #7]
 8015098:	2bca      	cmp	r3, #202	; 0xca
 801509a:	d00b      	beq.n	80150b4 <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_MESSAGE)        || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE_LENGTH)           ||
 801509c:	79fb      	ldrb	r3, [r7, #7]
 801509e:	2bcb      	cmp	r3, #203	; 0xcb
 80150a0:	d008      	beq.n	80150b4 <rfalNfcvPollerTransceiveReq+0x88>
 80150a2:	79fb      	ldrb	r3, [r7, #7]
 80150a4:	2bcc      	cmp	r3, #204	; 0xcc
 80150a6:	d005      	beq.n	80150b4 <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE)         || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_DYN_CONFIGURATION)        ||               
 80150a8:	79fb      	ldrb	r3, [r7, #7]
 80150aa:	2bcd      	cmp	r3, #205	; 0xcd
 80150ac:	d002      	beq.n	80150b4 <rfalNfcvPollerTransceiveReq+0x88>
 80150ae:	79fb      	ldrb	r3, [r7, #7]
 80150b0:	2bce      	cmp	r3, #206	; 0xce
 80150b2:	d10c      	bne.n	80150ce <rfalNfcvPollerTransceiveReq+0xa2>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_DYN_CONFIGURATION) )
    {
        /* Store current Rx bit rate and move to fast mode */
        rfalGetBitRate( NULL, &rxBR );
 80150b4:	f107 030f 	add.w	r3, r7, #15
 80150b8:	4619      	mov	r1, r3
 80150ba:	2000      	movs	r0, #0
 80150bc:	f000 fcca 	bl	8015a54 <rfalGetBitRate>
        rfalSetBitRate( RFAL_BR_KEEP, RFAL_BR_52p97 );
 80150c0:	21eb      	movs	r1, #235	; 0xeb
 80150c2:	20ff      	movs	r0, #255	; 0xff
 80150c4:	f000 fa64 	bl	8015590 <rfalSetBitRate>
        
        fastMode = true;
 80150c8:	2301      	movs	r3, #1
 80150ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    }
    
    
    /* Compute Request Command */
    req.REQ_FLAG  = (uint8_t)(flags & (~((uint32_t)RFAL_NFCV_REQ_FLAG_ADDRESS) & ~((uint32_t)RFAL_NFCV_REQ_FLAG_SELECT)));
 80150ce:	79bb      	ldrb	r3, [r7, #6]
 80150d0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80150d4:	b2db      	uxtb	r3, r3
 80150d6:	743b      	strb	r3, [r7, #16]
    req.CMD       = cmd;
 80150d8:	79fb      	ldrb	r3, [r7, #7]
 80150da:	747b      	strb	r3, [r7, #17]
    
    /* Prepend parameter on ceratin proprietary requests: IC Manuf, Parameters */
    if( param != RFAL_NFCV_PARAM_SKIP )
 80150dc:	797b      	ldrb	r3, [r7, #5]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d00a      	beq.n	80150f8 <rfalNfcvPollerTransceiveReq+0xcc>
    {
        req.payload.data[msgIt++] = param;
 80150e2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80150e6:	1c5a      	adds	r2, r3, #1
 80150e8:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 80150ec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80150f0:	4413      	add	r3, r2
 80150f2:	797a      	ldrb	r2, [r7, #5]
 80150f4:	f803 2c2e 	strb.w	r2, [r3, #-46]
    }
    
    /* Check if request is to be sent in Addressed or Selected mode */
    if( uid != NULL )
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d015      	beq.n	801512a <rfalNfcvPollerTransceiveReq+0xfe>
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_ADDRESS;
 80150fe:	7c3b      	ldrb	r3, [r7, #16]
 8015100:	f043 0320 	orr.w	r3, r3, #32
 8015104:	b2db      	uxtb	r3, r3
 8015106:	743b      	strb	r3, [r7, #16]
        ST_MEMCPY( &req.payload.data[msgIt], uid, RFAL_NFCV_UID_LEN );
 8015108:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801510c:	f107 0210 	add.w	r2, r7, #16
 8015110:	4413      	add	r3, r2
 8015112:	3302      	adds	r3, #2
 8015114:	2208      	movs	r2, #8
 8015116:	6839      	ldr	r1, [r7, #0]
 8015118:	4618      	mov	r0, r3
 801511a:	f003 fe6c 	bl	8018df6 <memcpy>
        msgIt += RFAL_NFCV_UID_LEN;
 801511e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8015122:	3308      	adds	r3, #8
 8015124:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8015128:	e004      	b.n	8015134 <rfalNfcvPollerTransceiveReq+0x108>
    }
    else
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_SELECT;
 801512a:	7c3b      	ldrb	r3, [r7, #16]
 801512c:	f043 0310 	orr.w	r3, r3, #16
 8015130:	b2db      	uxtb	r3, r3
 8015132:	743b      	strb	r3, [r7, #16]
    }
    
    if( dataLen > 0U )
 8015134:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8015138:	2b00      	cmp	r3, #0
 801513a:	d013      	beq.n	8015164 <rfalNfcvPollerTransceiveReq+0x138>
    {
        ST_MEMCPY( &req.payload.data[msgIt], data, dataLen);
 801513c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8015140:	f107 0210 	add.w	r2, r7, #16
 8015144:	4413      	add	r3, r2
 8015146:	3302      	adds	r3, #2
 8015148:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 801514c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801514e:	4618      	mov	r0, r3
 8015150:	f003 fe51 	bl	8018df6 <memcpy>
        msgIt += (uint8_t)dataLen;
 8015154:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8015158:	b2da      	uxtb	r2, r3
 801515a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801515e:	4413      	add	r3, r2
 8015160:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    }
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, (RFAL_CMD_LEN + RFAL_NFCV_FLAG_LEN +(uint16_t)msgIt), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_MAX );
 8015164:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8015168:	b29b      	uxth	r3, r3
 801516a:	3302      	adds	r3, #2
 801516c:	b299      	uxth	r1, r3
 801516e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8015172:	f107 0010 	add.w	r0, r7, #16
 8015176:	4b2a      	ldr	r3, [pc, #168]	; (8015220 <rfalNfcvPollerTransceiveReq+0x1f4>)
 8015178:	9302      	str	r3, [sp, #8]
 801517a:	2300      	movs	r3, #0
 801517c:	9301      	str	r3, [sp, #4]
 801517e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015180:	9300      	str	r3, [sp, #0]
 8015182:	4613      	mov	r3, r2
 8015184:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015186:	f000 ff1f 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 801518a:	4603      	mov	r3, r0
 801518c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    
    /* If the Option Flag is set in certain commands an EOF needs to be sent after 20ms to retrieve the VICC response      ISO15693-3 2009  10.4.2 & 10.4.3 & 10.4.5 */
    if( ((flags & (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION) != 0U) && ((cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_MULTIPLE_BLOCKS)        ||
 801518e:	79bb      	ldrb	r3, [r7, #6]
 8015190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015194:	2b00      	cmp	r3, #0
 8015196:	d01b      	beq.n	80151d0 <rfalNfcvPollerTransceiveReq+0x1a4>
 8015198:	79fb      	ldrb	r3, [r7, #7]
 801519a:	2b21      	cmp	r3, #33	; 0x21
 801519c:	d00e      	beq.n	80151bc <rfalNfcvPollerTransceiveReq+0x190>
 801519e:	79fb      	ldrb	r3, [r7, #7]
 80151a0:	2b24      	cmp	r3, #36	; 0x24
 80151a2:	d00b      	beq.n	80151bc <rfalNfcvPollerTransceiveReq+0x190>
 80151a4:	79fb      	ldrb	r3, [r7, #7]
 80151a6:	2b22      	cmp	r3, #34	; 0x22
 80151a8:	d008      	beq.n	80151bc <rfalNfcvPollerTransceiveReq+0x190>
                                                        (cmd == (uint8_t)RFAL_NFCV_CMD_LOCK_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_WRITE_SINGLE_BLOCK)                   ||
 80151aa:	79fb      	ldrb	r3, [r7, #7]
 80151ac:	2b31      	cmp	r3, #49	; 0x31
 80151ae:	d005      	beq.n	80151bc <rfalNfcvPollerTransceiveReq+0x190>
 80151b0:	79fb      	ldrb	r3, [r7, #7]
 80151b2:	2b32      	cmp	r3, #50	; 0x32
 80151b4:	d002      	beq.n	80151bc <rfalNfcvPollerTransceiveReq+0x190>
                                                        (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_LOCK_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_WRITE_MULTIPLE_BLOCK))  )
 80151b6:	79fb      	ldrb	r3, [r7, #7]
 80151b8:	2b34      	cmp	r3, #52	; 0x34
 80151ba:	d109      	bne.n	80151d0 <rfalNfcvPollerTransceiveReq+0x1a4>
    {
        ret = rfalISO15693TransceiveEOF( rxBuf, (uint8_t)rxBufLen, rcvLen );
 80151bc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80151c0:	b2db      	uxtb	r3, r3
 80151c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80151c4:	4619      	mov	r1, r3
 80151c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80151c8:	f002 f908 	bl	80173dc <rfalISO15693TransceiveEOF>
 80151cc:	4603      	mov	r3, r0
 80151ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
    }

    /* Restore Rx BitRate */
    if( fastMode )
 80151d0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d004      	beq.n	80151e2 <rfalNfcvPollerTransceiveReq+0x1b6>
    {
        rfalSetBitRate( RFAL_BR_KEEP, rxBR );
 80151d8:	7bfb      	ldrb	r3, [r7, #15]
 80151da:	4619      	mov	r1, r3
 80151dc:	20ff      	movs	r0, #255	; 0xff
 80151de:	f000 f9d7 	bl	8015590 <rfalSetBitRate>
    }
    
    if( ret != ERR_NONE )
 80151e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d001      	beq.n	80151ec <rfalNfcvPollerTransceiveReq+0x1c0>
    {
        return ret;
 80151e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80151ea:	e014      	b.n	8015216 <rfalNfcvPollerTransceiveReq+0x1ea>
    }
    
    /* Check if the response minimum length has been received */
    if( (*rcvLen) < (uint8_t)RFAL_NFCV_FLAG_LEN )
 80151ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80151ee:	881b      	ldrh	r3, [r3, #0]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d101      	bne.n	80151f8 <rfalNfcvPollerTransceiveReq+0x1cc>
    {
        return ERR_PROTO;
 80151f4:	230b      	movs	r3, #11
 80151f6:	e00e      	b.n	8015216 <rfalNfcvPollerTransceiveReq+0x1ea>
    }
    
    /* Check if an error has been signalled */
    if( (rxBuf[RFAL_NFCV_FLAG_POS] & (uint8_t)RFAL_NFCV_RES_FLAG_ERROR) != 0U )
 80151f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151fa:	781b      	ldrb	r3, [r3, #0]
 80151fc:	f003 0301 	and.w	r3, r3, #1
 8015200:	2b00      	cmp	r3, #0
 8015202:	d007      	beq.n	8015214 <rfalNfcvPollerTransceiveReq+0x1e8>
    {
        return rfalNfcvParseError( rxBuf[RFAL_NFCV_DATASTART_POS] );
 8015204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015206:	3301      	adds	r3, #1
 8015208:	781b      	ldrb	r3, [r3, #0]
 801520a:	4618      	mov	r0, r3
 801520c:	f7ff fa96 	bl	801473c <rfalNfcvParseError>
 8015210:	4603      	mov	r3, r0
 8015212:	e000      	b.n	8015216 <rfalNfcvPollerTransceiveReq+0x1ea>
    }
    
    return ERR_NONE;
 8015214:	2300      	movs	r3, #0
}
 8015216:	4618      	mov	r0, r3
 8015218:	3740      	adds	r7, #64	; 0x40
 801521a:	46bd      	mov	sp, r7
 801521c:	bd80      	pop	{r7, pc}
 801521e:	bf00      	nop
 8015220:	00042360 	.word	0x00042360

08015224 <rfalInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 8015224:	b580      	push	{r7, lr}
 8015226:	af00      	add	r7, sp, #0
    st25r3911InitInterrupts();
 8015228:	f7ee fe6c 	bl	8003f04 <st25r3911InitInterrupts>
    
    /* Initialize chip */
    st25r3911Initialize();
 801522c:	f7ed ff54 	bl	80030d8 <st25r3911Initialize>

    /* Check expected chip: ST25R3911 */
    if( !st25r3911CheckChipID( NULL ) )
 8015230:	2000      	movs	r0, #0
 8015232:	f7ee f911 	bl	8003458 <st25r3911CheckChipID>
 8015236:	4603      	mov	r3, r0
 8015238:	f083 0301 	eor.w	r3, r3, #1
 801523c:	b2db      	uxtb	r3, r3
 801523e:	2b00      	cmp	r3, #0
 8015240:	d001      	beq.n	8015246 <rfalInitialize+0x22>
    {
        return ERR_HW_MISMATCH;
 8015242:	2324      	movs	r3, #36	; 0x24
 8015244:	e052      	b.n	80152ec <rfalInitialize+0xc8>
    }

    /* Disable any previous observation mode */
    rfalST25R3911ObsModeDisable();
 8015246:	2100      	movs	r1, #0
 8015248:	2001      	movs	r0, #1
 801524a:	f7ee fbcb 	bl	80039e4 <st25r3911WriteTestRegister>

    /*******************************************************************************/
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 801524e:	2000      	movs	r0, #0
 8015250:	f7f7 ff46 	bl	800d0e0 <rfalSetAnalogConfig>

    /*******************************************************************************/
    /* Set FIFO Water Levels to be used */
    st25r3911ChangeRegisterBits( ST25R3911_REG_IO_CONF1, (ST25R3911_REG_IO_CONF1_fifo_lt | ST25R3911_REG_IO_CONF1_fifo_lr), (ST25R3911_REG_IO_CONF1_fifo_lt_32bytes | ST25R3911_REG_IO_CONF1_fifo_lr_64bytes) );
 8015254:	2200      	movs	r2, #0
 8015256:	2130      	movs	r1, #48	; 0x30
 8015258:	2000      	movs	r0, #0
 801525a:	f7ee fc92 	bl	8003b82 <st25r3911ChangeRegisterBits>

    /* Always have CRC in FIFO upon reception  */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_crc_2_fifo );
 801525e:	2140      	movs	r1, #64	; 0x40
 8015260:	2009      	movs	r0, #9
 8015262:	f7ee fc70 	bl	8003b46 <st25r3911SetRegisterBits>

    /* Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8015266:	2110      	movs	r1, #16
 8015268:	2009      	movs	r0, #9
 801526a:	f7ee fc6c 	bl	8003b46 <st25r3911SetRegisterBits>

    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 801526e:	f001 fdff 	bl	8016e70 <rfalFIFOStatusClear>

    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 8015272:	4b1f      	ldr	r3, [pc, #124]	; (80152f0 <rfalInitialize+0xcc>)
 8015274:	2201      	movs	r2, #1
 8015276:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 8015278:	4b1d      	ldr	r3, [pc, #116]	; (80152f0 <rfalInitialize+0xcc>)
 801527a:	2200      	movs	r2, #0
 801527c:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 801527e:	4b1c      	ldr	r3, [pc, #112]	; (80152f0 <rfalInitialize+0xcc>)
 8015280:	2200      	movs	r2, #0
 8015282:	711a      	strb	r2, [r3, #4]

    /* Set RFAL default configs */
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 8015284:	4b1a      	ldr	r3, [pc, #104]	; (80152f0 <rfalInitialize+0xcc>)
 8015286:	2200      	movs	r2, #0
 8015288:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 801528a:	4b19      	ldr	r3, [pc, #100]	; (80152f0 <rfalInitialize+0xcc>)
 801528c:	2200      	movs	r2, #0
 801528e:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 8015290:	4b17      	ldr	r3, [pc, #92]	; (80152f0 <rfalInitialize+0xcc>)
 8015292:	2200      	movs	r2, #0
 8015294:	71da      	strb	r2, [r3, #7]

    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 8015296:	4b16      	ldr	r3, [pc, #88]	; (80152f0 <rfalInitialize+0xcc>)
 8015298:	2200      	movs	r2, #0
 801529a:	755a      	strb	r2, [r3, #21]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 801529c:	4b14      	ldr	r3, [pc, #80]	; (80152f0 <rfalInitialize+0xcc>)
 801529e:	2200      	movs	r2, #0
 80152a0:	751a      	strb	r2, [r3, #20]

    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 80152a2:	4b13      	ldr	r3, [pc, #76]	; (80152f0 <rfalInitialize+0xcc>)
 80152a4:	2200      	movs	r2, #0
 80152a6:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 80152a8:	4b11      	ldr	r3, [pc, #68]	; (80152f0 <rfalInitialize+0xcc>)
 80152aa:	2200      	movs	r2, #0
 80152ac:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 80152ae:	4b10      	ldr	r3, [pc, #64]	; (80152f0 <rfalInitialize+0xcc>)
 80152b0:	2200      	movs	r2, #0
 80152b2:	609a      	str	r2, [r3, #8]

    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 80152b4:	4b0e      	ldr	r3, [pc, #56]	; (80152f0 <rfalInitialize+0xcc>)
 80152b6:	2200      	movs	r2, #0
 80152b8:	641a      	str	r2, [r3, #64]	; 0x40

    gRFAL.callbacks.preTxRx  = NULL;
 80152ba:	4b0d      	ldr	r3, [pc, #52]	; (80152f0 <rfalInitialize+0xcc>)
 80152bc:	2200      	movs	r2, #0
 80152be:	64da      	str	r2, [r3, #76]	; 0x4c
    gRFAL.callbacks.postTxRx = NULL;
 80152c0:	4b0b      	ldr	r3, [pc, #44]	; (80152f0 <rfalInitialize+0xcc>)
 80152c2:	2200      	movs	r2, #0
 80152c4:	651a      	str	r2, [r3, #80]	; 0x50

#if RFAL_FEATURE_NFCV
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 80152c6:	4b0a      	ldr	r3, [pc, #40]	; (80152f0 <rfalInitialize+0xcc>)
 80152c8:	2200      	movs	r2, #0
 80152ca:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
#endif /* RFAL_FEATURE_NFCV */

#if RFAL_FEATURE_LISTEN_MODE
    /* Initialize Listen Mode */
    gRFAL.Lm.state           = RFAL_LM_STATE_NOT_INIT;
 80152ce:	4b08      	ldr	r3, [pc, #32]	; (80152f0 <rfalInitialize+0xcc>)
 80152d0:	2200      	movs	r2, #0
 80152d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    gRFAL.Lm.brDetected      = RFAL_BR_KEEP;
 80152d6:	4b06      	ldr	r3, [pc, #24]	; (80152f0 <rfalInitialize+0xcc>)
 80152d8:	22ff      	movs	r2, #255	; 0xff
 80152da:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
#endif /* RFAL_FEATURE_LISTEN_MODE */

#if RFAL_FEATURE_WAKEUP_MODE
    /* Initialize Wake-Up Mode */
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 80152de:	4b04      	ldr	r3, [pc, #16]	; (80152f0 <rfalInitialize+0xcc>)
 80152e0:	2200      	movs	r2, #0
 80152e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68


    /*******************************************************************************/
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 80152e6:	f000 f805 	bl	80152f4 <rfalCalibrate>
    
    return ERR_NONE;
 80152ea:	2300      	movs	r3, #0
}
 80152ec:	4618      	mov	r0, r3
 80152ee:	bd80      	pop	{r7, pc}
 80152f0:	2000369c 	.word	0x2000369c

080152f4 <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 80152fa:	4b1b      	ldr	r3, [pc, #108]	; (8015368 <rfalCalibrate+0x74>)
 80152fc:	781b      	ldrb	r3, [r3, #0]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d101      	bne.n	8015306 <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 8015302:	2321      	movs	r3, #33	; 0x21
 8015304:	e02b      	b.n	801535e <rfalCalibrate+0x6a>
    /*******************************************************************************/
    /* Perform ST25R3911 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )       
 8015306:	2200      	movs	r2, #0
 8015308:	2180      	movs	r1, #128	; 0x80
 801530a:	202a      	movs	r0, #42	; 0x2a
 801530c:	f7ee f884 	bl	8003418 <st25r3911CheckReg>
 8015310:	4603      	mov	r3, r0
 8015312:	2b00      	cmp	r3, #0
 8015314:	d003      	beq.n	801531e <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3911AdjustRegulators( &resValue );
 8015316:	1dbb      	adds	r3, r7, #6
 8015318:	4618      	mov	r0, r3
 801531a:	f7ed ff0b 	bl	8003134 <st25r3911AdjustRegulators>
    }
    
    /* Automatic Antenna calibration only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_ANT_CAL_CONTROL, ST25R3911_REG_ANT_CAL_CONTROL_trim_s, 0x00 ) )
 801531e:	2200      	movs	r2, #0
 8015320:	2180      	movs	r1, #128	; 0x80
 8015322:	2021      	movs	r0, #33	; 0x21
 8015324:	f7ee f878 	bl	8003418 <st25r3911CheckReg>
 8015328:	4603      	mov	r3, r0
 801532a:	2b00      	cmp	r3, #0
 801532c:	d010      	beq.n	8015350 <rfalCalibrate+0x5c>
    {
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );
 801532e:	1dbb      	adds	r3, r7, #6
 8015330:	4618      	mov	r0, r3
 8015332:	f7ed ff80 	bl	8003236 <st25r3911CalibrateAntenna>
      
        /*******************************************************************************/
        /* REMARK: Silicon workaround ST25R3911 Errata #1.5                            */
        /* Always run the command Calibrate Antenna twice                              */
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );                
 8015336:	1dbb      	adds	r3, r7, #6
 8015338:	4618      	mov	r0, r3
 801533a:	f7ed ff7c 	bl	8003236 <st25r3911CalibrateAntenna>
    {
        /* If no antenna calibration is performed there is no need to perform second regulator adjustment again */
        return ERR_NONE; 
    }
    
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 801533e:	2200      	movs	r2, #0
 8015340:	2180      	movs	r1, #128	; 0x80
 8015342:	202a      	movs	r0, #42	; 0x2a
 8015344:	f7ee f868 	bl	8003418 <st25r3911CheckReg>
 8015348:	4603      	mov	r3, r0
 801534a:	2b00      	cmp	r3, #0
 801534c:	d006      	beq.n	801535c <rfalCalibrate+0x68>
 801534e:	e001      	b.n	8015354 <rfalCalibrate+0x60>
        return ERR_NONE; 
 8015350:	2300      	movs	r3, #0
 8015352:	e004      	b.n	801535e <rfalCalibrate+0x6a>
    {
        /* Adjust the regulators again with the Antenna calibrated */
        st25r3911AdjustRegulators( &resValue );
 8015354:	1dbb      	adds	r3, r7, #6
 8015356:	4618      	mov	r0, r3
 8015358:	f7ed feec 	bl	8003134 <st25r3911AdjustRegulators>
    }
    
    return ERR_NONE;
 801535c:	2300      	movs	r3, #0
}
 801535e:	4618      	mov	r0, r3
 8015360:	3708      	adds	r7, #8
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}
 8015366:	bf00      	nop
 8015368:	2000369c 	.word	0x2000369c

0801536c <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b082      	sub	sp, #8
 8015370:	af00      	add	r7, sp, #0
 8015372:	4603      	mov	r3, r0
 8015374:	71fb      	strb	r3, [r7, #7]
 8015376:	460b      	mov	r3, r1
 8015378:	71bb      	strb	r3, [r7, #6]
 801537a:	4613      	mov	r3, r2
 801537c:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 801537e:	4b83      	ldr	r3, [pc, #524]	; (801558c <rfalSetMode+0x220>)
 8015380:	781b      	ldrb	r3, [r3, #0]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d101      	bne.n	801538a <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 8015386:	2321      	movs	r3, #33	; 0x21
 8015388:	e0fb      	b.n	8015582 <rfalSetMode+0x216>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 801538a:	79bb      	ldrb	r3, [r7, #6]
 801538c:	2bff      	cmp	r3, #255	; 0xff
 801538e:	d002      	beq.n	8015396 <rfalSetMode+0x2a>
 8015390:	797b      	ldrb	r3, [r7, #5]
 8015392:	2bff      	cmp	r3, #255	; 0xff
 8015394:	d101      	bne.n	801539a <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 8015396:	2307      	movs	r3, #7
 8015398:	e0f3      	b.n	8015582 <rfalSetMode+0x216>
    }
   
    switch( mode )
 801539a:	79fb      	ldrb	r3, [r7, #7]
 801539c:	3b01      	subs	r3, #1
 801539e:	2b0c      	cmp	r3, #12
 80153a0:	f200 80db 	bhi.w	801555a <rfalSetMode+0x1ee>
 80153a4:	a201      	add	r2, pc, #4	; (adr r2, 80153ac <rfalSetMode+0x40>)
 80153a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153aa:	bf00      	nop
 80153ac:	080153e1 	.word	0x080153e1
 80153b0:	08015403 	.word	0x08015403
 80153b4:	08015425 	.word	0x08015425
 80153b8:	0801545b 	.word	0x0801545b
 80153bc:	08015491 	.word	0x08015491
 80153c0:	080154c7 	.word	0x080154c7
 80153c4:	080154e9 	.word	0x080154e9
 80153c8:	080154e9 	.word	0x080154e9
 80153cc:	08015503 	.word	0x08015503
 80153d0:	08015557 	.word	0x08015557
 80153d4:	08015557 	.word	0x08015557
 80153d8:	08015557 	.word	0x08015557
 80153dc:	0801552d 	.word	0x0801552d
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 80153e0:	2104      	movs	r1, #4
 80153e2:	2002      	movs	r0, #2
 80153e4:	f7ee fb8c 	bl	8003b00 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443a);
 80153e8:	2108      	movs	r1, #8
 80153ea:	2003      	movs	r0, #3
 80153ec:	f7ee fb3e 	bl	8003a6c <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80153f0:	f240 1001 	movw	r0, #257	; 0x101
 80153f4:	f7f7 fe74 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80153f8:	f44f 7081 	mov.w	r0, #258	; 0x102
 80153fc:	f7f7 fe70 	bl	800d0e0 <rfalSetAnalogConfig>
            break;
 8015400:	e0ad      	b.n	801555e <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8015402:	2104      	movs	r1, #4
 8015404:	2002      	movs	r0, #2
 8015406:	f7ee fb7b 	bl	8003b00 <st25r3911ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_topaz );
 801540a:	2120      	movs	r1, #32
 801540c:	2003      	movs	r0, #3
 801540e:	f7ee fb2d 	bl	8003a6c <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8015412:	f240 1001 	movw	r0, #257	; 0x101
 8015416:	f7f7 fe63 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 801541a:	f44f 7081 	mov.w	r0, #258	; 0x102
 801541e:	f7f7 fe5f 	bl	800d0e0 <rfalSetAnalogConfig>
            break;
 8015422:	e09c      	b.n	801555e <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8015424:	2104      	movs	r1, #4
 8015426:	2002      	movs	r0, #2
 8015428:	f7ee fb6a 	bl	8003b00 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 801542c:	2110      	movs	r1, #16
 801542e:	2003      	movs	r0, #3
 8015430:	f7ee fb1c 	bl	8003a6c <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 8015434:	2200      	movs	r2, #0
 8015436:	21fc      	movs	r1, #252	; 0xfc
 8015438:	2006      	movs	r0, #6
 801543a:	f7ee fba2 	bl	8003b82 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 801543e:	2200      	movs	r2, #0
 8015440:	21f8      	movs	r1, #248	; 0xf8
 8015442:	2007      	movs	r0, #7
 8015444:	f7ee fb9d 	bl	8003b82 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_eof_12_10to11etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8015448:	f240 2001 	movw	r0, #513	; 0x201
 801544c:	f7f7 fe48 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8015450:	f240 2002 	movw	r0, #514	; 0x202
 8015454:	f7f7 fe44 	bl	800d0e0 <rfalSetAnalogConfig>
            break;
 8015458:	e081      	b.n	801555e <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 801545a:	2104      	movs	r1, #4
 801545c:	2002      	movs	r0, #2
 801545e:	f7ee fb4f 	bl	8003b00 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 8015462:	2110      	movs	r1, #16
 8015464:	2003      	movs	r0, #3
 8015466:	f7ee fb01 	bl	8003a6c <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 801546a:	2200      	movs	r2, #0
 801546c:	21fc      	movs	r1, #252	; 0xfc
 801546e:	2006      	movs	r0, #6
 8015470:	f7ee fb87 	bl	8003b82 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 8015474:	2228      	movs	r2, #40	; 0x28
 8015476:	21f8      	movs	r1, #248	; 0xf8
 8015478:	2007      	movs	r0, #7
 801547a:	f7ee fb82 	bl	8003b82 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_eof_12_10to12etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 801547e:	f240 2001 	movw	r0, #513	; 0x201
 8015482:	f7f7 fe2d 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8015486:	f240 2002 	movw	r0, #514	; 0x202
 801548a:	f7f7 fe29 	bl	800d0e0 <rfalSetAnalogConfig>
            break;
 801548e:	e066      	b.n	801555e <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_CTS:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8015490:	2104      	movs	r1, #4
 8015492:	2002      	movs	r0, #2
 8015494:	f7ee fb34 	bl	8003b00 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 8015498:	2110      	movs	r1, #16
 801549a:	2003      	movs	r0, #3
 801549c:	f7ee fae6 	bl	8003a6c <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 80154a0:	2200      	movs	r2, #0
 80154a2:	21fc      	movs	r1, #252	; 0xfc
 80154a4:	2006      	movs	r0, #6
 80154a6:	f7ee fb6c 	bl	8003b82 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, clear SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 80154aa:	2230      	movs	r2, #48	; 0x30
 80154ac:	21f8      	movs	r1, #248	; 0xf8
 80154ae:	2007      	movs	r0, #7
 80154b0:	f7ee fb67 	bl	8003b82 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80154b4:	f240 2001 	movw	r0, #513	; 0x201
 80154b8:	f7f7 fe12 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80154bc:	f240 2002 	movw	r0, #514	; 0x202
 80154c0:	f7f7 fe0e 	bl	800d0e0 <rfalSetAnalogConfig>
            break;
 80154c4:	e04b      	b.n	801555e <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 80154c6:	2104      	movs	r1, #4
 80154c8:	2002      	movs	r0, #2
 80154ca:	f7ee fb19 	bl	8003b00 <st25r3911ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_felica );
 80154ce:	2118      	movs	r1, #24
 80154d0:	2003      	movs	r0, #3
 80154d2:	f7ee facb 	bl	8003a6c <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80154d6:	f240 4001 	movw	r0, #1025	; 0x401
 80154da:	f7f7 fe01 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80154de:	f240 4002 	movw	r0, #1026	; 0x402
 80154e2:	f7f7 fdfd 	bl	800d0e0 <rfalSetAnalogConfig>
            break;
 80154e6:	e03a      	b.n	801555e <rfalSetMode+0x1f2>
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCV:
        case RFAL_MODE_POLL_PICOPASS:
        
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 80154e8:	2104      	movs	r1, #4
 80154ea:	2002      	movs	r0, #2
 80154ec:	f7ee fb08 	bl	8003b00 <st25r3911ClrRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80154f0:	f241 0001 	movw	r0, #4097	; 0x1001
 80154f4:	f7f7 fdf4 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80154f8:	f241 0002 	movw	r0, #4098	; 0x1002
 80154fc:	f7f7 fdf0 	bl	800d0e0 <rfalSetAnalogConfig>
            break;
 8015500:	e02d      	b.n	801555e <rfalSetMode+0x1f2>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_nfc | ST25R3911_REG_MODE_nfc_ar) );
 8015502:	2101      	movs	r1, #1
 8015504:	2003      	movs	r0, #3
 8015506:	f7ee fab1 	bl	8003a6c <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 801550a:	2160      	movs	r1, #96	; 0x60
 801550c:	2040      	movs	r0, #64	; 0x40
 801550e:	f7ed ff4f 	bl	80033b0 <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8015512:	2110      	movs	r1, #16
 8015514:	2009      	movs	r0, #9
 8015516:	f7ee fb16 	bl	8003b46 <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 801551a:	f640 0001 	movw	r0, #2049	; 0x801
 801551e:	f7f7 fddf 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8015522:	f640 0002 	movw	r0, #2050	; 0x802
 8015526:	f7f7 fddb 	bl	800d0e0 <rfalSetAnalogConfig>
            break;
 801552a:	e018      	b.n	801555e <rfalSetMode+0x1f2>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_targ | ST25R3911_REG_MODE_om_nfcip1_normal_mode | ST25R3911_REG_MODE_nfc_ar) );
 801552c:	2189      	movs	r1, #137	; 0x89
 801552e:	2003      	movs	r0, #3
 8015530:	f7ee fa9c 	bl	8003a6c <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 8015534:	2160      	movs	r1, #96	; 0x60
 8015536:	2040      	movs	r0, #64	; 0x40
 8015538:	f7ed ff3a 	bl	80033b0 <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 801553c:	2110      	movs	r1, #16
 801553e:	2009      	movs	r0, #9
 8015540:	f7ee fb01 	bl	8003b46 <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8015544:	f648 0001 	movw	r0, #34817	; 0x8801
 8015548:	f7f7 fdca 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 801554c:	f648 0002 	movw	r0, #34818	; 0x8802
 8015550:	f7f7 fdc6 	bl	800d0e0 <rfalSetAnalogConfig>
            break;
 8015554:	e003      	b.n	801555e <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
            return ERR_NOTSUPP;
 8015556:	2318      	movs	r3, #24
 8015558:	e013      	b.n	8015582 <rfalSetMode+0x216>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 801555a:	230f      	movs	r3, #15
 801555c:	e011      	b.n	8015582 <rfalSetMode+0x216>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 801555e:	4b0b      	ldr	r3, [pc, #44]	; (801558c <rfalSetMode+0x220>)
 8015560:	781b      	ldrb	r3, [r3, #0]
 8015562:	2b02      	cmp	r3, #2
 8015564:	bf38      	it	cc
 8015566:	2302      	movcc	r3, #2
 8015568:	b2da      	uxtb	r2, r3
 801556a:	4b08      	ldr	r3, [pc, #32]	; (801558c <rfalSetMode+0x220>)
 801556c:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 801556e:	4a07      	ldr	r2, [pc, #28]	; (801558c <rfalSetMode+0x220>)
 8015570:	79fb      	ldrb	r3, [r7, #7]
 8015572:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 8015574:	797a      	ldrb	r2, [r7, #5]
 8015576:	79bb      	ldrb	r3, [r7, #6]
 8015578:	4611      	mov	r1, r2
 801557a:	4618      	mov	r0, r3
 801557c:	f000 f808 	bl	8015590 <rfalSetBitRate>
 8015580:	4603      	mov	r3, r0
}
 8015582:	4618      	mov	r0, r3
 8015584:	3708      	adds	r7, #8
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}
 801558a:	bf00      	nop
 801558c:	2000369c 	.word	0x2000369c

08015590 <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 8015590:	b580      	push	{r7, lr}
 8015592:	b088      	sub	sp, #32
 8015594:	af00      	add	r7, sp, #0
 8015596:	4603      	mov	r3, r0
 8015598:	460a      	mov	r2, r1
 801559a:	71fb      	strb	r3, [r7, #7]
 801559c:	4613      	mov	r3, r2
 801559e:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 80155a0:	4ba0      	ldr	r3, [pc, #640]	; (8015824 <rfalSetBitRate+0x294>)
 80155a2:	781b      	ldrb	r3, [r3, #0]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d101      	bne.n	80155ac <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 80155a8:	2321      	movs	r3, #33	; 0x21
 80155aa:	e248      	b.n	8015a3e <rfalSetBitRate+0x4ae>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 80155ac:	79fb      	ldrb	r3, [r7, #7]
 80155ae:	2bff      	cmp	r3, #255	; 0xff
 80155b0:	d102      	bne.n	80155b8 <rfalSetBitRate+0x28>
 80155b2:	4b9c      	ldr	r3, [pc, #624]	; (8015824 <rfalSetBitRate+0x294>)
 80155b4:	789b      	ldrb	r3, [r3, #2]
 80155b6:	e000      	b.n	80155ba <rfalSetBitRate+0x2a>
 80155b8:	79fb      	ldrb	r3, [r7, #7]
 80155ba:	4a9a      	ldr	r2, [pc, #616]	; (8015824 <rfalSetBitRate+0x294>)
 80155bc:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 80155be:	79bb      	ldrb	r3, [r7, #6]
 80155c0:	2bff      	cmp	r3, #255	; 0xff
 80155c2:	d102      	bne.n	80155ca <rfalSetBitRate+0x3a>
 80155c4:	4b97      	ldr	r3, [pc, #604]	; (8015824 <rfalSetBitRate+0x294>)
 80155c6:	78db      	ldrb	r3, [r3, #3]
 80155c8:	e000      	b.n	80155cc <rfalSetBitRate+0x3c>
 80155ca:	79bb      	ldrb	r3, [r7, #6]
 80155cc:	4a95      	ldr	r2, [pc, #596]	; (8015824 <rfalSetBitRate+0x294>)
 80155ce:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 80155d0:	4b94      	ldr	r3, [pc, #592]	; (8015824 <rfalSetBitRate+0x294>)
 80155d2:	785b      	ldrb	r3, [r3, #1]
 80155d4:	2b07      	cmp	r3, #7
 80155d6:	d012      	beq.n	80155fe <rfalSetBitRate+0x6e>
 80155d8:	4b92      	ldr	r3, [pc, #584]	; (8015824 <rfalSetBitRate+0x294>)
 80155da:	785b      	ldrb	r3, [r3, #1]
 80155dc:	2b08      	cmp	r3, #8
 80155de:	d00e      	beq.n	80155fe <rfalSetBitRate+0x6e>
    {
        EXIT_ON_ERR( ret, st25r3911SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 80155e0:	4b90      	ldr	r3, [pc, #576]	; (8015824 <rfalSetBitRate+0x294>)
 80155e2:	789a      	ldrb	r2, [r3, #2]
 80155e4:	4b8f      	ldr	r3, [pc, #572]	; (8015824 <rfalSetBitRate+0x294>)
 80155e6:	78db      	ldrb	r3, [r3, #3]
 80155e8:	4619      	mov	r1, r3
 80155ea:	4610      	mov	r0, r2
 80155ec:	f7ed fe5e 	bl	80032ac <st25r3911SetBitrate>
 80155f0:	4603      	mov	r3, r0
 80155f2:	83fb      	strh	r3, [r7, #30]
 80155f4:	8bfb      	ldrh	r3, [r7, #30]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d001      	beq.n	80155fe <rfalSetBitRate+0x6e>
 80155fa:	8bfb      	ldrh	r3, [r7, #30]
 80155fc:	e21f      	b.n	8015a3e <rfalSetBitRate+0x4ae>
    }
    
    
    switch( gRFAL.mode )
 80155fe:	4b89      	ldr	r3, [pc, #548]	; (8015824 <rfalSetBitRate+0x294>)
 8015600:	785b      	ldrb	r3, [r3, #1]
 8015602:	2b0d      	cmp	r3, #13
 8015604:	f200 8218 	bhi.w	8015a38 <rfalSetBitRate+0x4a8>
 8015608:	a201      	add	r2, pc, #4	; (adr r2, 8015610 <rfalSetBitRate+0x80>)
 801560a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801560e:	bf00      	nop
 8015610:	08015a35 	.word	0x08015a35
 8015614:	08015649 	.word	0x08015649
 8015618:	08015649 	.word	0x08015649
 801561c:	080156d1 	.word	0x080156d1
 8015620:	080156d1 	.word	0x080156d1
 8015624:	080156d1 	.word	0x080156d1
 8015628:	08015761 	.word	0x08015761
 801562c:	080157f1 	.word	0x080157f1
 8015630:	080157f1 	.word	0x080157f1
 8015634:	08015925 	.word	0x08015925
 8015638:	08015a35 	.word	0x08015a35
 801563c:	08015a35 	.word	0x08015a35
 8015640:	08015a35 	.word	0x08015a35
 8015644:	080159b5 	.word	0x080159b5
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8015648:	2008      	movs	r0, #8
 801564a:	f7f7 fd49 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 801564e:	4b75      	ldr	r3, [pc, #468]	; (8015824 <rfalSetBitRate+0x294>)
 8015650:	789b      	ldrb	r3, [r3, #2]
 8015652:	2bea      	cmp	r3, #234	; 0xea
 8015654:	d90c      	bls.n	8015670 <rfalSetBitRate+0xe0>
 8015656:	4b73      	ldr	r3, [pc, #460]	; (8015824 <rfalSetBitRate+0x294>)
 8015658:	789b      	ldrb	r3, [r3, #2]
 801565a:	b29b      	uxth	r3, r3
 801565c:	011b      	lsls	r3, r3, #4
 801565e:	b29b      	uxth	r3, r3
 8015660:	b2db      	uxtb	r3, r3
 8015662:	b29b      	uxth	r3, r3
 8015664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015668:	f043 0301 	orr.w	r3, r3, #1
 801566c:	b29b      	uxth	r3, r3
 801566e:	e00d      	b.n	801568c <rfalSetBitRate+0xfc>
 8015670:	4b6c      	ldr	r3, [pc, #432]	; (8015824 <rfalSetBitRate+0x294>)
 8015672:	789b      	ldrb	r3, [r3, #2]
 8015674:	b29b      	uxth	r3, r3
 8015676:	3301      	adds	r3, #1
 8015678:	b29b      	uxth	r3, r3
 801567a:	011b      	lsls	r3, r3, #4
 801567c:	b29b      	uxth	r3, r3
 801567e:	b2db      	uxtb	r3, r3
 8015680:	b29b      	uxth	r3, r3
 8015682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015686:	f043 0301 	orr.w	r3, r3, #1
 801568a:	b29b      	uxth	r3, r3
 801568c:	4618      	mov	r0, r3
 801568e:	f7f7 fd27 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8015692:	4b64      	ldr	r3, [pc, #400]	; (8015824 <rfalSetBitRate+0x294>)
 8015694:	78db      	ldrb	r3, [r3, #3]
 8015696:	2bea      	cmp	r3, #234	; 0xea
 8015698:	d90a      	bls.n	80156b0 <rfalSetBitRate+0x120>
 801569a:	4b62      	ldr	r3, [pc, #392]	; (8015824 <rfalSetBitRate+0x294>)
 801569c:	78db      	ldrb	r3, [r3, #3]
 801569e:	b29b      	uxth	r3, r3
 80156a0:	011b      	lsls	r3, r3, #4
 80156a2:	b29b      	uxth	r3, r3
 80156a4:	b2db      	uxtb	r3, r3
 80156a6:	b29b      	uxth	r3, r3
 80156a8:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80156ac:	b29b      	uxth	r3, r3
 80156ae:	e00b      	b.n	80156c8 <rfalSetBitRate+0x138>
 80156b0:	4b5c      	ldr	r3, [pc, #368]	; (8015824 <rfalSetBitRate+0x294>)
 80156b2:	78db      	ldrb	r3, [r3, #3]
 80156b4:	b29b      	uxth	r3, r3
 80156b6:	3301      	adds	r3, #1
 80156b8:	b29b      	uxth	r3, r3
 80156ba:	011b      	lsls	r3, r3, #4
 80156bc:	b29b      	uxth	r3, r3
 80156be:	b2db      	uxtb	r3, r3
 80156c0:	b29b      	uxth	r3, r3
 80156c2:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80156c6:	b29b      	uxth	r3, r3
 80156c8:	4618      	mov	r0, r3
 80156ca:	f7f7 fd09 	bl	800d0e0 <rfalSetAnalogConfig>
            break;
 80156ce:	e1b5      	b.n	8015a3c <rfalSetBitRate+0x4ac>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 80156d0:	2008      	movs	r0, #8
 80156d2:	f7f7 fd05 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80156d6:	4b53      	ldr	r3, [pc, #332]	; (8015824 <rfalSetBitRate+0x294>)
 80156d8:	789b      	ldrb	r3, [r3, #2]
 80156da:	2bea      	cmp	r3, #234	; 0xea
 80156dc:	d90c      	bls.n	80156f8 <rfalSetBitRate+0x168>
 80156de:	4b51      	ldr	r3, [pc, #324]	; (8015824 <rfalSetBitRate+0x294>)
 80156e0:	789b      	ldrb	r3, [r3, #2]
 80156e2:	b29b      	uxth	r3, r3
 80156e4:	011b      	lsls	r3, r3, #4
 80156e6:	b29b      	uxth	r3, r3
 80156e8:	b2db      	uxtb	r3, r3
 80156ea:	b29b      	uxth	r3, r3
 80156ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80156f0:	f043 0301 	orr.w	r3, r3, #1
 80156f4:	b29b      	uxth	r3, r3
 80156f6:	e00d      	b.n	8015714 <rfalSetBitRate+0x184>
 80156f8:	4b4a      	ldr	r3, [pc, #296]	; (8015824 <rfalSetBitRate+0x294>)
 80156fa:	789b      	ldrb	r3, [r3, #2]
 80156fc:	b29b      	uxth	r3, r3
 80156fe:	3301      	adds	r3, #1
 8015700:	b29b      	uxth	r3, r3
 8015702:	011b      	lsls	r3, r3, #4
 8015704:	b29b      	uxth	r3, r3
 8015706:	b2db      	uxtb	r3, r3
 8015708:	b29b      	uxth	r3, r3
 801570a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801570e:	f043 0301 	orr.w	r3, r3, #1
 8015712:	b29b      	uxth	r3, r3
 8015714:	4618      	mov	r0, r3
 8015716:	f7f7 fce3 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 801571a:	4b42      	ldr	r3, [pc, #264]	; (8015824 <rfalSetBitRate+0x294>)
 801571c:	78db      	ldrb	r3, [r3, #3]
 801571e:	2bea      	cmp	r3, #234	; 0xea
 8015720:	d90c      	bls.n	801573c <rfalSetBitRate+0x1ac>
 8015722:	4b40      	ldr	r3, [pc, #256]	; (8015824 <rfalSetBitRate+0x294>)
 8015724:	78db      	ldrb	r3, [r3, #3]
 8015726:	b29b      	uxth	r3, r3
 8015728:	011b      	lsls	r3, r3, #4
 801572a:	b29b      	uxth	r3, r3
 801572c:	b2db      	uxtb	r3, r3
 801572e:	b29b      	uxth	r3, r3
 8015730:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015734:	f043 0302 	orr.w	r3, r3, #2
 8015738:	b29b      	uxth	r3, r3
 801573a:	e00d      	b.n	8015758 <rfalSetBitRate+0x1c8>
 801573c:	4b39      	ldr	r3, [pc, #228]	; (8015824 <rfalSetBitRate+0x294>)
 801573e:	78db      	ldrb	r3, [r3, #3]
 8015740:	b29b      	uxth	r3, r3
 8015742:	3301      	adds	r3, #1
 8015744:	b29b      	uxth	r3, r3
 8015746:	011b      	lsls	r3, r3, #4
 8015748:	b29b      	uxth	r3, r3
 801574a:	b2db      	uxtb	r3, r3
 801574c:	b29b      	uxth	r3, r3
 801574e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015752:	f043 0302 	orr.w	r3, r3, #2
 8015756:	b29b      	uxth	r3, r3
 8015758:	4618      	mov	r0, r3
 801575a:	f7f7 fcc1 	bl	800d0e0 <rfalSetAnalogConfig>
            break;
 801575e:	e16d      	b.n	8015a3c <rfalSetBitRate+0x4ac>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8015760:	2008      	movs	r0, #8
 8015762:	f7f7 fcbd 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8015766:	4b2f      	ldr	r3, [pc, #188]	; (8015824 <rfalSetBitRate+0x294>)
 8015768:	789b      	ldrb	r3, [r3, #2]
 801576a:	2bea      	cmp	r3, #234	; 0xea
 801576c:	d90c      	bls.n	8015788 <rfalSetBitRate+0x1f8>
 801576e:	4b2d      	ldr	r3, [pc, #180]	; (8015824 <rfalSetBitRate+0x294>)
 8015770:	789b      	ldrb	r3, [r3, #2]
 8015772:	b29b      	uxth	r3, r3
 8015774:	011b      	lsls	r3, r3, #4
 8015776:	b29b      	uxth	r3, r3
 8015778:	b2db      	uxtb	r3, r3
 801577a:	b29b      	uxth	r3, r3
 801577c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015780:	f043 0301 	orr.w	r3, r3, #1
 8015784:	b29b      	uxth	r3, r3
 8015786:	e00d      	b.n	80157a4 <rfalSetBitRate+0x214>
 8015788:	4b26      	ldr	r3, [pc, #152]	; (8015824 <rfalSetBitRate+0x294>)
 801578a:	789b      	ldrb	r3, [r3, #2]
 801578c:	b29b      	uxth	r3, r3
 801578e:	3301      	adds	r3, #1
 8015790:	b29b      	uxth	r3, r3
 8015792:	011b      	lsls	r3, r3, #4
 8015794:	b29b      	uxth	r3, r3
 8015796:	b2db      	uxtb	r3, r3
 8015798:	b29b      	uxth	r3, r3
 801579a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801579e:	f043 0301 	orr.w	r3, r3, #1
 80157a2:	b29b      	uxth	r3, r3
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7f7 fc9b 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80157aa:	4b1e      	ldr	r3, [pc, #120]	; (8015824 <rfalSetBitRate+0x294>)
 80157ac:	78db      	ldrb	r3, [r3, #3]
 80157ae:	2bea      	cmp	r3, #234	; 0xea
 80157b0:	d90c      	bls.n	80157cc <rfalSetBitRate+0x23c>
 80157b2:	4b1c      	ldr	r3, [pc, #112]	; (8015824 <rfalSetBitRate+0x294>)
 80157b4:	78db      	ldrb	r3, [r3, #3]
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	011b      	lsls	r3, r3, #4
 80157ba:	b29b      	uxth	r3, r3
 80157bc:	b2db      	uxtb	r3, r3
 80157be:	b29b      	uxth	r3, r3
 80157c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80157c4:	f043 0302 	orr.w	r3, r3, #2
 80157c8:	b29b      	uxth	r3, r3
 80157ca:	e00d      	b.n	80157e8 <rfalSetBitRate+0x258>
 80157cc:	4b15      	ldr	r3, [pc, #84]	; (8015824 <rfalSetBitRate+0x294>)
 80157ce:	78db      	ldrb	r3, [r3, #3]
 80157d0:	b29b      	uxth	r3, r3
 80157d2:	3301      	adds	r3, #1
 80157d4:	b29b      	uxth	r3, r3
 80157d6:	011b      	lsls	r3, r3, #4
 80157d8:	b29b      	uxth	r3, r3
 80157da:	b2db      	uxtb	r3, r3
 80157dc:	b29b      	uxth	r3, r3
 80157de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80157e2:	f043 0302 	orr.w	r3, r3, #2
 80157e6:	b29b      	uxth	r3, r3
 80157e8:	4618      	mov	r0, r3
 80157ea:	f7f7 fc79 	bl	800d0e0 <rfalSetAnalogConfig>
            break;
 80157ee:	e125      	b.n	8015a3c <rfalSetBitRate+0x4ac>
        
           #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
           #else
               
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 80157f0:	4b0c      	ldr	r3, [pc, #48]	; (8015824 <rfalSetBitRate+0x294>)
 80157f2:	78db      	ldrb	r3, [r3, #3]
 80157f4:	2bec      	cmp	r3, #236	; 0xec
 80157f6:	d00b      	beq.n	8015810 <rfalSetBitRate+0x280>
 80157f8:	4b0a      	ldr	r3, [pc, #40]	; (8015824 <rfalSetBitRate+0x294>)
 80157fa:	78db      	ldrb	r3, [r3, #3]
 80157fc:	2beb      	cmp	r3, #235	; 0xeb
 80157fe:	d007      	beq.n	8015810 <rfalSetBitRate+0x280>
 8015800:	4b08      	ldr	r3, [pc, #32]	; (8015824 <rfalSetBitRate+0x294>)
 8015802:	78db      	ldrb	r3, [r3, #3]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d003      	beq.n	8015810 <rfalSetBitRate+0x280>
 8015808:	4b06      	ldr	r3, [pc, #24]	; (8015824 <rfalSetBitRate+0x294>)
 801580a:	78db      	ldrb	r3, [r3, #3]
 801580c:	2b01      	cmp	r3, #1
 801580e:	d107      	bne.n	8015820 <rfalSetBitRate+0x290>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 8015810:	4b04      	ldr	r3, [pc, #16]	; (8015824 <rfalSetBitRate+0x294>)
 8015812:	789b      	ldrb	r3, [r3, #2]
 8015814:	2bed      	cmp	r3, #237	; 0xed
 8015816:	d007      	beq.n	8015828 <rfalSetBitRate+0x298>
 8015818:	4b02      	ldr	r3, [pc, #8]	; (8015824 <rfalSetBitRate+0x294>)
 801581a:	789b      	ldrb	r3, [r3, #2]
 801581c:	2bec      	cmp	r3, #236	; 0xec
 801581e:	d003      	beq.n	8015828 <rfalSetBitRate+0x298>
                {
                    return ERR_PARAM;
 8015820:	2307      	movs	r3, #7
 8015822:	e10c      	b.n	8015a3e <rfalSetBitRate+0x4ae>
 8015824:	2000369c 	.word	0x2000369c
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3911StreamConfig      streamConf;
                    iso15693PhyConfig_t               config;
                    
                    /* Set the coding configuration for configuring ISO15693 */
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 8015828:	4b87      	ldr	r3, [pc, #540]	; (8015a48 <rfalSetBitRate+0x4b8>)
 801582a:	789b      	ldrb	r3, [r3, #2]
 801582c:	2bed      	cmp	r3, #237	; 0xed
 801582e:	bf0c      	ite	eq
 8015830:	2301      	moveq	r3, #1
 8015832:	2300      	movne	r3, #0
 8015834:	b2db      	uxtb	r3, r3
 8015836:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 8015838:	4b83      	ldr	r3, [pc, #524]	; (8015a48 <rfalSetBitRate+0x4b8>)
 801583a:	78db      	ldrb	r3, [r3, #3]
 801583c:	2b01      	cmp	r3, #1
 801583e:	d00a      	beq.n	8015856 <rfalSetBitRate+0x2c6>
 8015840:	2beb      	cmp	r3, #235	; 0xeb
 8015842:	d002      	beq.n	801584a <rfalSetBitRate+0x2ba>
 8015844:	2b00      	cmp	r3, #0
 8015846:	d003      	beq.n	8015850 <rfalSetBitRate+0x2c0>
 8015848:	e008      	b.n	801585c <rfalSetBitRate+0x2cc>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 801584a:	2301      	movs	r3, #1
 801584c:	613b      	str	r3, [r7, #16]
                            break;
 801584e:	e008      	b.n	8015862 <rfalSetBitRate+0x2d2>
                        case RFAL_BR_106:
                            config.speedMode = 2;
 8015850:	2302      	movs	r3, #2
 8015852:	613b      	str	r3, [r7, #16]
                            break;
 8015854:	e005      	b.n	8015862 <rfalSetBitRate+0x2d2>
                        case RFAL_BR_212:
                            config.speedMode = 3;
 8015856:	2303      	movs	r3, #3
 8015858:	613b      	str	r3, [r7, #16]
                            break;
 801585a:	e002      	b.n	8015862 <rfalSetBitRate+0x2d2>
                        default:
                            config.speedMode = 0;
 801585c:	2300      	movs	r3, #0
 801585e:	613b      	str	r3, [r7, #16]
                            break;
 8015860:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);   /* Convert ISO15693 config into StreamConfig */
 8015862:	f107 0218 	add.w	r2, r7, #24
 8015866:	f107 030c 	add.w	r3, r7, #12
 801586a:	4611      	mov	r1, r2
 801586c:	4618      	mov	r0, r3
 801586e:	f7f7 fd93 	bl	800d398 <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 8015872:	69bb      	ldr	r3, [r7, #24]
 8015874:	785b      	ldrb	r3, [r3, #1]
 8015876:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 8015878:	69bb      	ldr	r3, [r7, #24]
 801587a:	789b      	ldrb	r3, [r3, #2]
 801587c:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 801587e:	69bb      	ldr	r3, [r7, #24]
 8015880:	78db      	ldrb	r3, [r3, #3]
 8015882:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 8015884:	69bb      	ldr	r3, [r7, #24]
 8015886:	781b      	ldrb	r3, [r3, #0]
 8015888:	753b      	strb	r3, [r7, #20]
                    st25r3911StreamConfigure(&streamConf);
 801588a:	f107 0314 	add.w	r3, r7, #20
 801588e:	4618      	mov	r0, r3
 8015890:	f7ed fecc 	bl	800362c <st25r3911StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8015894:	2008      	movs	r0, #8
 8015896:	f7f7 fc23 	bl	800d0e0 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 801589a:	4b6b      	ldr	r3, [pc, #428]	; (8015a48 <rfalSetBitRate+0x4b8>)
 801589c:	789b      	ldrb	r3, [r3, #2]
 801589e:	2bea      	cmp	r3, #234	; 0xea
 80158a0:	d90c      	bls.n	80158bc <rfalSetBitRate+0x32c>
 80158a2:	4b69      	ldr	r3, [pc, #420]	; (8015a48 <rfalSetBitRate+0x4b8>)
 80158a4:	789b      	ldrb	r3, [r3, #2]
 80158a6:	b29b      	uxth	r3, r3
 80158a8:	011b      	lsls	r3, r3, #4
 80158aa:	b29b      	uxth	r3, r3
 80158ac:	b2db      	uxtb	r3, r3
 80158ae:	b29b      	uxth	r3, r3
 80158b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80158b4:	f043 0301 	orr.w	r3, r3, #1
 80158b8:	b29b      	uxth	r3, r3
 80158ba:	e00d      	b.n	80158d8 <rfalSetBitRate+0x348>
 80158bc:	4b62      	ldr	r3, [pc, #392]	; (8015a48 <rfalSetBitRate+0x4b8>)
 80158be:	789b      	ldrb	r3, [r3, #2]
 80158c0:	b29b      	uxth	r3, r3
 80158c2:	3301      	adds	r3, #1
 80158c4:	b29b      	uxth	r3, r3
 80158c6:	011b      	lsls	r3, r3, #4
 80158c8:	b29b      	uxth	r3, r3
 80158ca:	b2db      	uxtb	r3, r3
 80158cc:	b29b      	uxth	r3, r3
 80158ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80158d2:	f043 0301 	orr.w	r3, r3, #1
 80158d6:	b29b      	uxth	r3, r3
 80158d8:	4618      	mov	r0, r3
 80158da:	f7f7 fc01 	bl	800d0e0 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80158de:	4b5a      	ldr	r3, [pc, #360]	; (8015a48 <rfalSetBitRate+0x4b8>)
 80158e0:	78db      	ldrb	r3, [r3, #3]
 80158e2:	2bea      	cmp	r3, #234	; 0xea
 80158e4:	d90c      	bls.n	8015900 <rfalSetBitRate+0x370>
 80158e6:	4b58      	ldr	r3, [pc, #352]	; (8015a48 <rfalSetBitRate+0x4b8>)
 80158e8:	78db      	ldrb	r3, [r3, #3]
 80158ea:	b29b      	uxth	r3, r3
 80158ec:	011b      	lsls	r3, r3, #4
 80158ee:	b29b      	uxth	r3, r3
 80158f0:	b2db      	uxtb	r3, r3
 80158f2:	b29b      	uxth	r3, r3
 80158f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80158f8:	f043 0302 	orr.w	r3, r3, #2
 80158fc:	b29b      	uxth	r3, r3
 80158fe:	e00d      	b.n	801591c <rfalSetBitRate+0x38c>
 8015900:	4b51      	ldr	r3, [pc, #324]	; (8015a48 <rfalSetBitRate+0x4b8>)
 8015902:	78db      	ldrb	r3, [r3, #3]
 8015904:	b29b      	uxth	r3, r3
 8015906:	3301      	adds	r3, #1
 8015908:	b29b      	uxth	r3, r3
 801590a:	011b      	lsls	r3, r3, #4
 801590c:	b29b      	uxth	r3, r3
 801590e:	b2db      	uxtb	r3, r3
 8015910:	b29b      	uxth	r3, r3
 8015912:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015916:	f043 0302 	orr.w	r3, r3, #2
 801591a:	b29b      	uxth	r3, r3
 801591c:	4618      	mov	r0, r3
 801591e:	f7f7 fbdf 	bl	800d0e0 <rfalSetAnalogConfig>
                break;
 8015922:	e08b      	b.n	8015a3c <rfalSetBitRate+0x4ac>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8015924:	2008      	movs	r0, #8
 8015926:	f7f7 fbdb 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 801592a:	4b47      	ldr	r3, [pc, #284]	; (8015a48 <rfalSetBitRate+0x4b8>)
 801592c:	789b      	ldrb	r3, [r3, #2]
 801592e:	2bea      	cmp	r3, #234	; 0xea
 8015930:	d90c      	bls.n	801594c <rfalSetBitRate+0x3bc>
 8015932:	4b45      	ldr	r3, [pc, #276]	; (8015a48 <rfalSetBitRate+0x4b8>)
 8015934:	789b      	ldrb	r3, [r3, #2]
 8015936:	b29b      	uxth	r3, r3
 8015938:	011b      	lsls	r3, r3, #4
 801593a:	b29b      	uxth	r3, r3
 801593c:	b2db      	uxtb	r3, r3
 801593e:	b29b      	uxth	r3, r3
 8015940:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015944:	f043 0301 	orr.w	r3, r3, #1
 8015948:	b29b      	uxth	r3, r3
 801594a:	e00d      	b.n	8015968 <rfalSetBitRate+0x3d8>
 801594c:	4b3e      	ldr	r3, [pc, #248]	; (8015a48 <rfalSetBitRate+0x4b8>)
 801594e:	789b      	ldrb	r3, [r3, #2]
 8015950:	b29b      	uxth	r3, r3
 8015952:	3301      	adds	r3, #1
 8015954:	b29b      	uxth	r3, r3
 8015956:	011b      	lsls	r3, r3, #4
 8015958:	b29b      	uxth	r3, r3
 801595a:	b2db      	uxtb	r3, r3
 801595c:	b29b      	uxth	r3, r3
 801595e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015962:	f043 0301 	orr.w	r3, r3, #1
 8015966:	b29b      	uxth	r3, r3
 8015968:	4618      	mov	r0, r3
 801596a:	f7f7 fbb9 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 801596e:	4b36      	ldr	r3, [pc, #216]	; (8015a48 <rfalSetBitRate+0x4b8>)
 8015970:	78db      	ldrb	r3, [r3, #3]
 8015972:	2bea      	cmp	r3, #234	; 0xea
 8015974:	d90c      	bls.n	8015990 <rfalSetBitRate+0x400>
 8015976:	4b34      	ldr	r3, [pc, #208]	; (8015a48 <rfalSetBitRate+0x4b8>)
 8015978:	78db      	ldrb	r3, [r3, #3]
 801597a:	b29b      	uxth	r3, r3
 801597c:	011b      	lsls	r3, r3, #4
 801597e:	b29b      	uxth	r3, r3
 8015980:	b2db      	uxtb	r3, r3
 8015982:	b29b      	uxth	r3, r3
 8015984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015988:	f043 0302 	orr.w	r3, r3, #2
 801598c:	b29b      	uxth	r3, r3
 801598e:	e00d      	b.n	80159ac <rfalSetBitRate+0x41c>
 8015990:	4b2d      	ldr	r3, [pc, #180]	; (8015a48 <rfalSetBitRate+0x4b8>)
 8015992:	78db      	ldrb	r3, [r3, #3]
 8015994:	b29b      	uxth	r3, r3
 8015996:	3301      	adds	r3, #1
 8015998:	b29b      	uxth	r3, r3
 801599a:	011b      	lsls	r3, r3, #4
 801599c:	b29b      	uxth	r3, r3
 801599e:	b2db      	uxtb	r3, r3
 80159a0:	b29b      	uxth	r3, r3
 80159a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80159a6:	f043 0302 	orr.w	r3, r3, #2
 80159aa:	b29b      	uxth	r3, r3
 80159ac:	4618      	mov	r0, r3
 80159ae:	f7f7 fb97 	bl	800d0e0 <rfalSetAnalogConfig>
            break;
 80159b2:	e043      	b.n	8015a3c <rfalSetBitRate+0x4ac>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 80159b4:	2009      	movs	r0, #9
 80159b6:	f7f7 fb93 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80159ba:	4b23      	ldr	r3, [pc, #140]	; (8015a48 <rfalSetBitRate+0x4b8>)
 80159bc:	789b      	ldrb	r3, [r3, #2]
 80159be:	2bea      	cmp	r3, #234	; 0xea
 80159c0:	d90a      	bls.n	80159d8 <rfalSetBitRate+0x448>
 80159c2:	4b21      	ldr	r3, [pc, #132]	; (8015a48 <rfalSetBitRate+0x4b8>)
 80159c4:	789b      	ldrb	r3, [r3, #2]
 80159c6:	b29b      	uxth	r3, r3
 80159c8:	011b      	lsls	r3, r3, #4
 80159ca:	b29b      	uxth	r3, r3
 80159cc:	b2db      	uxtb	r3, r3
 80159ce:	b29a      	uxth	r2, r3
 80159d0:	4b1e      	ldr	r3, [pc, #120]	; (8015a4c <rfalSetBitRate+0x4bc>)
 80159d2:	4313      	orrs	r3, r2
 80159d4:	b29b      	uxth	r3, r3
 80159d6:	e00b      	b.n	80159f0 <rfalSetBitRate+0x460>
 80159d8:	4b1b      	ldr	r3, [pc, #108]	; (8015a48 <rfalSetBitRate+0x4b8>)
 80159da:	789b      	ldrb	r3, [r3, #2]
 80159dc:	b29b      	uxth	r3, r3
 80159de:	3301      	adds	r3, #1
 80159e0:	b29b      	uxth	r3, r3
 80159e2:	011b      	lsls	r3, r3, #4
 80159e4:	b29b      	uxth	r3, r3
 80159e6:	b2db      	uxtb	r3, r3
 80159e8:	b29a      	uxth	r2, r3
 80159ea:	4b18      	ldr	r3, [pc, #96]	; (8015a4c <rfalSetBitRate+0x4bc>)
 80159ec:	4313      	orrs	r3, r2
 80159ee:	b29b      	uxth	r3, r3
 80159f0:	4618      	mov	r0, r3
 80159f2:	f7f7 fb75 	bl	800d0e0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80159f6:	4b14      	ldr	r3, [pc, #80]	; (8015a48 <rfalSetBitRate+0x4b8>)
 80159f8:	78db      	ldrb	r3, [r3, #3]
 80159fa:	2bea      	cmp	r3, #234	; 0xea
 80159fc:	d90a      	bls.n	8015a14 <rfalSetBitRate+0x484>
 80159fe:	4b12      	ldr	r3, [pc, #72]	; (8015a48 <rfalSetBitRate+0x4b8>)
 8015a00:	78db      	ldrb	r3, [r3, #3]
 8015a02:	b29b      	uxth	r3, r3
 8015a04:	011b      	lsls	r3, r3, #4
 8015a06:	b29b      	uxth	r3, r3
 8015a08:	b2db      	uxtb	r3, r3
 8015a0a:	b29a      	uxth	r2, r3
 8015a0c:	4b10      	ldr	r3, [pc, #64]	; (8015a50 <rfalSetBitRate+0x4c0>)
 8015a0e:	4313      	orrs	r3, r2
 8015a10:	b29b      	uxth	r3, r3
 8015a12:	e00b      	b.n	8015a2c <rfalSetBitRate+0x49c>
 8015a14:	4b0c      	ldr	r3, [pc, #48]	; (8015a48 <rfalSetBitRate+0x4b8>)
 8015a16:	78db      	ldrb	r3, [r3, #3]
 8015a18:	b29b      	uxth	r3, r3
 8015a1a:	3301      	adds	r3, #1
 8015a1c:	b29b      	uxth	r3, r3
 8015a1e:	011b      	lsls	r3, r3, #4
 8015a20:	b29b      	uxth	r3, r3
 8015a22:	b2db      	uxtb	r3, r3
 8015a24:	b29a      	uxth	r2, r3
 8015a26:	4b0a      	ldr	r3, [pc, #40]	; (8015a50 <rfalSetBitRate+0x4c0>)
 8015a28:	4313      	orrs	r3, r2
 8015a2a:	b29b      	uxth	r3, r3
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f7f7 fb57 	bl	800d0e0 <rfalSetAnalogConfig>
            break;
 8015a32:	e003      	b.n	8015a3c <rfalSetBitRate+0x4ac>
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 8015a34:	2321      	movs	r3, #33	; 0x21
 8015a36:	e002      	b.n	8015a3e <rfalSetBitRate+0x4ae>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 8015a38:	230f      	movs	r3, #15
 8015a3a:	e000      	b.n	8015a3e <rfalSetBitRate+0x4ae>
    }
    
    return ERR_NONE;
 8015a3c:	2300      	movs	r3, #0
}
 8015a3e:	4618      	mov	r0, r3
 8015a40:	3720      	adds	r7, #32
 8015a42:	46bd      	mov	sp, r7
 8015a44:	bd80      	pop	{r7, pc}
 8015a46:	bf00      	nop
 8015a48:	2000369c 	.word	0x2000369c
 8015a4c:	ffff8801 	.word	0xffff8801
 8015a50:	ffff8802 	.word	0xffff8802

08015a54 <rfalGetBitRate>:


/*******************************************************************************/
ReturnCode rfalGetBitRate( rfalBitRate *txBR, rfalBitRate *rxBR )
{
 8015a54:	b480      	push	{r7}
 8015a56:	b083      	sub	sp, #12
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
 8015a5c:	6039      	str	r1, [r7, #0]
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 8015a5e:	4b0f      	ldr	r3, [pc, #60]	; (8015a9c <rfalGetBitRate+0x48>)
 8015a60:	781b      	ldrb	r3, [r3, #0]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d003      	beq.n	8015a6e <rfalGetBitRate+0x1a>
 8015a66:	4b0d      	ldr	r3, [pc, #52]	; (8015a9c <rfalGetBitRate+0x48>)
 8015a68:	785b      	ldrb	r3, [r3, #1]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d101      	bne.n	8015a72 <rfalGetBitRate+0x1e>
    {
        return ERR_WRONG_STATE;
 8015a6e:	2321      	movs	r3, #33	; 0x21
 8015a70:	e00e      	b.n	8015a90 <rfalGetBitRate+0x3c>
    }
    
    if( txBR != NULL )
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d003      	beq.n	8015a80 <rfalGetBitRate+0x2c>
    {
        *txBR = gRFAL.txBR;
 8015a78:	4b08      	ldr	r3, [pc, #32]	; (8015a9c <rfalGetBitRate+0x48>)
 8015a7a:	789a      	ldrb	r2, [r3, #2]
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	701a      	strb	r2, [r3, #0]
    }
    
    if( rxBR != NULL )
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d003      	beq.n	8015a8e <rfalGetBitRate+0x3a>
    {
        *rxBR = gRFAL.rxBR;
 8015a86:	4b05      	ldr	r3, [pc, #20]	; (8015a9c <rfalGetBitRate+0x48>)
 8015a88:	78da      	ldrb	r2, [r3, #3]
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 8015a8e:	2300      	movs	r3, #0
}
 8015a90:	4618      	mov	r0, r3
 8015a92:	370c      	adds	r7, #12
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bc80      	pop	{r7}
 8015a98:	4770      	bx	lr
 8015a9a:	bf00      	nop
 8015a9c:	2000369c 	.word	0x2000369c

08015aa0 <rfalSetErrorHandling>:


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 8015aa0:	b480      	push	{r7}
 8015aa2:	b083      	sub	sp, #12
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	71fb      	strb	r3, [r7, #7]
    gRFAL.conf.eHandling = eHandling;
 8015aaa:	4a04      	ldr	r2, [pc, #16]	; (8015abc <rfalSetErrorHandling+0x1c>)
 8015aac:	79fb      	ldrb	r3, [r7, #7]
 8015aae:	71d3      	strb	r3, [r2, #7]
}
 8015ab0:	bf00      	nop
 8015ab2:	370c      	adds	r7, #12
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	bc80      	pop	{r7}
 8015ab8:	4770      	bx	lr
 8015aba:	bf00      	nop
 8015abc:	2000369c 	.word	0x2000369c

08015ac0 <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 8015ac0:	b480      	push	{r7}
 8015ac2:	b083      	sub	sp, #12
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3911_GPT_MAX_1FC );
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	4a05      	ldr	r2, [pc, #20]	; (8015ae0 <rfalSetFDTPoll+0x20>)
 8015acc:	4293      	cmp	r3, r2
 8015ace:	bf28      	it	cs
 8015ad0:	4613      	movcs	r3, r2
 8015ad2:	4a04      	ldr	r2, [pc, #16]	; (8015ae4 <rfalSetFDTPoll+0x24>)
 8015ad4:	6113      	str	r3, [r2, #16]
}
 8015ad6:	bf00      	nop
 8015ad8:	370c      	adds	r7, #12
 8015ada:	46bd      	mov	sp, r7
 8015adc:	bc80      	pop	{r7}
 8015ade:	4770      	bx	lr
 8015ae0:	0007fff8 	.word	0x0007fff8
 8015ae4:	2000369c 	.word	0x2000369c

08015ae8 <rfalSetFDTListen>:
}


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 8015ae8:	b480      	push	{r7}
 8015aea:	b083      	sub	sp, #12
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3911_MRT_MAX_1FC);
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 8015af6:	bf28      	it	cs
 8015af8:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 8015afc:	4a03      	ldr	r2, [pc, #12]	; (8015b0c <rfalSetFDTListen+0x24>)
 8015afe:	60d3      	str	r3, [r2, #12]
}
 8015b00:	bf00      	nop
 8015b02:	370c      	adds	r7, #12
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bc80      	pop	{r7}
 8015b08:	4770      	bx	lr
 8015b0a:	bf00      	nop
 8015b0c:	2000369c 	.word	0x2000369c

08015b10 <rfalSetGT>:
{
    return gRFAL.timings.FDTListen;
}

void rfalSetGT( uint32_t GT )
{
 8015b10:	b480      	push	{r7}
 8015b12:	b083      	sub	sp, #12
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3911_GT_MAX_1FC );
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	4a05      	ldr	r2, [pc, #20]	; (8015b30 <rfalSetGT+0x20>)
 8015b1c:	4293      	cmp	r3, r2
 8015b1e:	bf28      	it	cs
 8015b20:	4613      	movcs	r3, r2
 8015b22:	4a04      	ldr	r2, [pc, #16]	; (8015b34 <rfalSetGT+0x24>)
 8015b24:	6093      	str	r3, [r2, #8]
}
 8015b26:	bf00      	nop
 8015b28:	370c      	adds	r7, #12
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bc80      	pop	{r7}
 8015b2e:	4770      	bx	lr
 8015b30:	040a8bc0 	.word	0x040a8bc0
 8015b34:	2000369c 	.word	0x2000369c

08015b38 <rfalIsGTExpired>:
    return gRFAL.timings.GT;
}

/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 8015b3c:	4b09      	ldr	r3, [pc, #36]	; (8015b64 <rfalIsGTExpired+0x2c>)
 8015b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d00c      	beq.n	8015b5e <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 8015b44:	4b07      	ldr	r3, [pc, #28]	; (8015b64 <rfalIsGTExpired+0x2c>)
 8015b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f7ee fb89 	bl	8004260 <timerIsExpired>
 8015b4e:	4603      	mov	r3, r0
 8015b50:	f083 0301 	eor.w	r3, r3, #1
 8015b54:	b2db      	uxtb	r3, r3
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d001      	beq.n	8015b5e <rfalIsGTExpired+0x26>
        {
            return false;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	e000      	b.n	8015b60 <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 8015b5e:	2301      	movs	r3, #1
}
 8015b60:	4618      	mov	r0, r3
 8015b62:	bd80      	pop	{r7, pc}
 8015b64:	2000369c 	.word	0x2000369c

08015b68 <rfalFieldOnAndStartGT>:

/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b082      	sub	sp, #8
 8015b6c:	af00      	add	r7, sp, #0
    ReturnCode  ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3911IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 8015b6e:	2280      	movs	r2, #128	; 0x80
 8015b70:	2180      	movs	r1, #128	; 0x80
 8015b72:	2002      	movs	r0, #2
 8015b74:	f7ed fc50 	bl	8003418 <st25r3911CheckReg>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	f083 0301 	eor.w	r3, r3, #1
 8015b7e:	b2db      	uxtb	r3, r3
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d103      	bne.n	8015b8c <rfalFieldOnAndStartGT+0x24>
 8015b84:	4b27      	ldr	r3, [pc, #156]	; (8015c24 <rfalFieldOnAndStartGT+0xbc>)
 8015b86:	781b      	ldrb	r3, [r3, #0]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d101      	bne.n	8015b90 <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 8015b8c:	2321      	movs	r3, #33	; 0x21
 8015b8e:	e044      	b.n	8015c1a <rfalFieldOnAndStartGT+0xb2>
    }
    
    ret = ERR_NONE;
 8015b90:	2300      	movs	r3, #0
 8015b92:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 8015b94:	2002      	movs	r0, #2
 8015b96:	f7f7 faa3 	bl	800d0e0 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3911IsTxEnabled() || !gRFAL.field )
 8015b9a:	2208      	movs	r2, #8
 8015b9c:	2108      	movs	r1, #8
 8015b9e:	2002      	movs	r0, #2
 8015ba0:	f7ed fc3a 	bl	8003418 <st25r3911CheckReg>
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	f083 0301 	eor.w	r3, r3, #1
 8015baa:	b2db      	uxtb	r3, r3
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d106      	bne.n	8015bbe <rfalFieldOnAndStartGT+0x56>
 8015bb0:	4b1c      	ldr	r3, [pc, #112]	; (8015c24 <rfalFieldOnAndStartGT+0xbc>)
 8015bb2:	791b      	ldrb	r3, [r3, #4]
 8015bb4:	f083 0301 	eor.w	r3, r3, #1
 8015bb8:	b2db      	uxtb	r3, r3
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d016      	beq.n	8015bec <rfalFieldOnAndStartGT+0x84>
    {
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3911PerformCollisionAvoidance( ST25R3911_CMD_RESPONSE_RF_COLLISION_0, ST25R3911_THRESHOLD_DO_NOT_SET, ST25R3911_THRESHOLD_DO_NOT_SET, 0 );
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	22ff      	movs	r2, #255	; 0xff
 8015bc2:	21ff      	movs	r1, #255	; 0xff
 8015bc4:	20ca      	movs	r0, #202	; 0xca
 8015bc6:	f7ed fca7 	bl	8003518 <st25r3911PerformCollisionAvoidance>
 8015bca:	4603      	mov	r3, r0
 8015bcc:	80fb      	strh	r3, [r7, #6]
        
        gRFAL.field = st25r3911IsTxEnabled();
 8015bce:	2208      	movs	r2, #8
 8015bd0:	2108      	movs	r1, #8
 8015bd2:	2002      	movs	r0, #2
 8015bd4:	f7ed fc20 	bl	8003418 <st25r3911CheckReg>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	461a      	mov	r2, r3
 8015bdc:	4b11      	ldr	r3, [pc, #68]	; (8015c24 <rfalFieldOnAndStartGT+0xbc>)
 8015bde:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 8015be0:	4b10      	ldr	r3, [pc, #64]	; (8015c24 <rfalFieldOnAndStartGT+0xbc>)
 8015be2:	791b      	ldrb	r3, [r3, #4]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d001      	beq.n	8015bec <rfalFieldOnAndStartGT+0x84>
        {            
            st25r3911TxRxOn(); /* Enable Tx and Rx (Tx is already On) */
 8015be8:	f7ed fa45 	bl	8003076 <st25r3911TxRxOn>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 8015bec:	4b0d      	ldr	r3, [pc, #52]	; (8015c24 <rfalFieldOnAndStartGT+0xbc>)
 8015bee:	689b      	ldr	r3, [r3, #8]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d011      	beq.n	8015c18 <rfalFieldOnAndStartGT+0xb0>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3911_GT_MIN_1FC) ) );
 8015bf4:	4b0b      	ldr	r3, [pc, #44]	; (8015c24 <rfalFieldOnAndStartGT+0xbc>)
 8015bf6:	689b      	ldr	r3, [r3, #8]
 8015bf8:	f243 42f8 	movw	r2, #13560	; 0x34f8
 8015bfc:	4293      	cmp	r3, r2
 8015bfe:	bf38      	it	cc
 8015c00:	4613      	movcc	r3, r2
 8015c02:	4a09      	ldr	r2, [pc, #36]	; (8015c28 <rfalFieldOnAndStartGT+0xc0>)
 8015c04:	fba2 2303 	umull	r2, r3, r2, r3
 8015c08:	0b1b      	lsrs	r3, r3, #12
 8015c0a:	b29b      	uxth	r3, r3
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f7ee fb19 	bl	8004244 <timerCalculateTimer>
 8015c12:	4602      	mov	r2, r0
 8015c14:	4b03      	ldr	r3, [pc, #12]	; (8015c24 <rfalFieldOnAndStartGT+0xbc>)
 8015c16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    return ret;
 8015c18:	88fb      	ldrh	r3, [r7, #6]
}
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	3708      	adds	r7, #8
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	bd80      	pop	{r7, pc}
 8015c22:	bf00      	nop
 8015c24:	2000369c 	.word	0x2000369c
 8015c28:	4d542005 	.word	0x4d542005

08015c2c <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 8015c30:	4b08      	ldr	r3, [pc, #32]	; (8015c54 <rfalFieldOff+0x28>)
 8015c32:	7d1b      	ldrb	r3, [r3, #20]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d001      	beq.n	8015c3c <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 8015c38:	f000 fac8 	bl	80161cc <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3911TxRxOff();
 8015c3c:	f7ed fa23 	bl	8003086 <st25r3911TxRxOff>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 8015c40:	2003      	movs	r0, #3
 8015c42:	f7f7 fa4d 	bl	800d0e0 <rfalSetAnalogConfig>
    gRFAL.field = false;
 8015c46:	4b03      	ldr	r3, [pc, #12]	; (8015c54 <rfalFieldOff+0x28>)
 8015c48:	2200      	movs	r2, #0
 8015c4a:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 8015c4c:	2300      	movs	r3, #0
}
 8015c4e:	4618      	mov	r0, r3
 8015c50:	bd80      	pop	{r7, pc}
 8015c52:	bf00      	nop
 8015c54:	2000369c 	.word	0x2000369c

08015c58 <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 8015c58:	b5b0      	push	{r4, r5, r7, lr}
 8015c5a:	b084      	sub	sp, #16
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d101      	bne.n	8015c6a <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 8015c66:	2307      	movs	r3, #7
 8015c68:	e11c      	b.n	8015ea4 <rfalStartTransceive+0x24c>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 8015c6a:	4b90      	ldr	r3, [pc, #576]	; (8015eac <rfalStartTransceive+0x254>)
 8015c6c:	781b      	ldrb	r3, [r3, #0]
 8015c6e:	2b01      	cmp	r3, #1
 8015c70:	f240 8117 	bls.w	8015ea2 <rfalStartTransceive+0x24a>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 8015c74:	2208      	movs	r2, #8
 8015c76:	2108      	movs	r1, #8
 8015c78:	2002      	movs	r0, #2
 8015c7a:	f7ed fbcd 	bl	8003418 <st25r3911CheckReg>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	f083 0301 	eor.w	r3, r3, #1
 8015c84:	b2db      	uxtb	r3, r3
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d011      	beq.n	8015cae <rfalStartTransceive+0x56>
 8015c8a:	4b88      	ldr	r3, [pc, #544]	; (8015eac <rfalStartTransceive+0x254>)
 8015c8c:	785b      	ldrb	r3, [r3, #1]
 8015c8e:	2b0a      	cmp	r3, #10
 8015c90:	d00d      	beq.n	8015cae <rfalStartTransceive+0x56>
 8015c92:	4b86      	ldr	r3, [pc, #536]	; (8015eac <rfalStartTransceive+0x254>)
 8015c94:	785b      	ldrb	r3, [r3, #1]
 8015c96:	2b0b      	cmp	r3, #11
 8015c98:	d009      	beq.n	8015cae <rfalStartTransceive+0x56>
 8015c9a:	4b84      	ldr	r3, [pc, #528]	; (8015eac <rfalStartTransceive+0x254>)
 8015c9c:	785b      	ldrb	r3, [r3, #1]
 8015c9e:	2b0c      	cmp	r3, #12
 8015ca0:	d005      	beq.n	8015cae <rfalStartTransceive+0x56>
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d001      	beq.n	8015cae <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 8015caa:	2321      	movs	r3, #33	; 0x21
 8015cac:	e0fa      	b.n	8015ea4 <rfalStartTransceive+0x24c>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 8015cae:	4b7f      	ldr	r3, [pc, #508]	; (8015eac <rfalStartTransceive+0x254>)
 8015cb0:	687a      	ldr	r2, [r7, #4]
 8015cb2:	f103 041c 	add.w	r4, r3, #28
 8015cb6:	4615      	mov	r5, r2
 8015cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015cbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015cc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 8015cc4:	4b79      	ldr	r3, [pc, #484]	; (8015eac <rfalStartTransceive+0x254>)
 8015cc6:	68db      	ldr	r3, [r3, #12]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d031      	beq.n	8015d30 <rfalStartTransceive+0xd8>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 8015ccc:	2340      	movs	r3, #64	; 0x40
 8015cce:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 8015cd0:	4b76      	ldr	r3, [pc, #472]	; (8015eac <rfalStartTransceive+0x254>)
 8015cd2:	785b      	ldrb	r3, [r3, #1]
 8015cd4:	2b01      	cmp	r3, #1
 8015cd6:	d103      	bne.n	8015ce0 <rfalStartTransceive+0x88>
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8015cde:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 8015ce0:	4b72      	ldr	r3, [pc, #456]	; (8015eac <rfalStartTransceive+0x254>)
 8015ce2:	785b      	ldrb	r3, [r3, #1]
 8015ce4:	2b02      	cmp	r3, #2
 8015ce6:	d103      	bne.n	8015cf0 <rfalStartTransceive+0x98>
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8015cee:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 8015cf0:	4b6e      	ldr	r3, [pc, #440]	; (8015eac <rfalStartTransceive+0x254>)
 8015cf2:	785b      	ldrb	r3, [r3, #1]
 8015cf4:	2b03      	cmp	r3, #3
 8015cf6:	d103      	bne.n	8015d00 <rfalStartTransceive+0xa8>
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8015cfe:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 8015d00:	4b6a      	ldr	r3, [pc, #424]	; (8015eac <rfalStartTransceive+0x254>)
 8015d02:	785b      	ldrb	r3, [r3, #1]
 8015d04:	2b07      	cmp	r3, #7
 8015d06:	d102      	bne.n	8015d0e <rfalStartTransceive+0xb6>
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	3380      	adds	r3, #128	; 0x80
 8015d0c:	60fb      	str	r3, [r7, #12]
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 8015d0e:	4b67      	ldr	r3, [pc, #412]	; (8015eac <rfalStartTransceive+0x254>)
 8015d10:	68db      	ldr	r3, [r3, #12]
 8015d12:	68fa      	ldr	r2, [r7, #12]
 8015d14:	429a      	cmp	r2, r3
 8015d16:	d806      	bhi.n	8015d26 <rfalStartTransceive+0xce>
 8015d18:	4b64      	ldr	r3, [pc, #400]	; (8015eac <rfalStartTransceive+0x254>)
 8015d1a:	68da      	ldr	r2, [r3, #12]
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	1ad3      	subs	r3, r2, r3
 8015d20:	099b      	lsrs	r3, r3, #6
 8015d22:	b2db      	uxtb	r3, r3
 8015d24:	e000      	b.n	8015d28 <rfalStartTransceive+0xd0>
 8015d26:	2304      	movs	r3, #4
 8015d28:	4619      	mov	r1, r3
 8015d2a:	200e      	movs	r0, #14
 8015d2c:	f7ed fe9e 	bl	8003a6c <st25r3911WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 8015d30:	4b5e      	ldr	r3, [pc, #376]	; (8015eac <rfalStartTransceive+0x254>)
 8015d32:	785b      	ldrb	r3, [r3, #1]
 8015d34:	2b09      	cmp	r3, #9
 8015d36:	d053      	beq.n	8015de0 <rfalStartTransceive+0x188>
 8015d38:	4b5c      	ldr	r3, [pc, #368]	; (8015eac <rfalStartTransceive+0x254>)
 8015d3a:	785b      	ldrb	r3, [r3, #1]
 8015d3c:	2b0d      	cmp	r3, #13
 8015d3e:	d04f      	beq.n	8015de0 <rfalStartTransceive+0x188>
        {
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8015d40:	4b5a      	ldr	r3, [pc, #360]	; (8015eac <rfalStartTransceive+0x254>)
 8015d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d48:	d046      	beq.n	8015dd8 <rfalStartTransceive+0x180>
 8015d4a:	4b58      	ldr	r3, [pc, #352]	; (8015eac <rfalStartTransceive+0x254>)
 8015d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d042      	beq.n	8015dd8 <rfalStartTransceive+0x180>
            {
                /* Ensure proper timing configuration */
                if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 8015d52:	4b56      	ldr	r3, [pc, #344]	; (8015eac <rfalStartTransceive+0x254>)
 8015d54:	68da      	ldr	r2, [r3, #12]
 8015d56:	4b55      	ldr	r3, [pc, #340]	; (8015eac <rfalStartTransceive+0x254>)
 8015d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	d301      	bcc.n	8015d62 <rfalStartTransceive+0x10a>
                {
                    return ERR_PARAM;
 8015d5e:	2307      	movs	r3, #7
 8015d60:	e0a0      	b.n	8015ea4 <rfalStartTransceive+0x24c>
                }
        
                FxTAdj = RFAL_FWT_ADJUSTMENT;
 8015d62:	2340      	movs	r3, #64	; 0x40
 8015d64:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 8015d66:	4b51      	ldr	r3, [pc, #324]	; (8015eac <rfalStartTransceive+0x254>)
 8015d68:	785b      	ldrb	r3, [r3, #1]
 8015d6a:	2b01      	cmp	r3, #1
 8015d6c:	d103      	bne.n	8015d76 <rfalStartTransceive+0x11e>
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015d74:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 8015d76:	4b4d      	ldr	r3, [pc, #308]	; (8015eac <rfalStartTransceive+0x254>)
 8015d78:	785b      	ldrb	r3, [r3, #1]
 8015d7a:	2b02      	cmp	r3, #2
 8015d7c:	d103      	bne.n	8015d86 <rfalStartTransceive+0x12e>
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015d84:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 8015d86:	4b49      	ldr	r3, [pc, #292]	; (8015eac <rfalStartTransceive+0x254>)
 8015d88:	785b      	ldrb	r3, [r3, #1]
 8015d8a:	2b03      	cmp	r3, #3
 8015d8c:	d103      	bne.n	8015d96 <rfalStartTransceive+0x13e>
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	f503 632e 	add.w	r3, r3, #2784	; 0xae0
 8015d94:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 8015d96:	4b45      	ldr	r3, [pc, #276]	; (8015eac <rfalStartTransceive+0x254>)
 8015d98:	785b      	ldrb	r3, [r3, #1]
 8015d9a:	2b06      	cmp	r3, #6
 8015d9c:	d10b      	bne.n	8015db6 <rfalStartTransceive+0x15e>
                {
                    FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 8015d9e:	4b43      	ldr	r3, [pc, #268]	; (8015eac <rfalStartTransceive+0x254>)
 8015da0:	789b      	ldrb	r3, [r3, #2]
 8015da2:	2b01      	cmp	r3, #1
 8015da4:	d102      	bne.n	8015dac <rfalStartTransceive+0x154>
 8015da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015daa:	e001      	b.n	8015db0 <rfalStartTransceive+0x158>
 8015dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015db0:	68fa      	ldr	r2, [r7, #12]
 8015db2:	4413      	add	r3, r2
 8015db4:	60fb      	str	r3, [r7, #12]
                }
                
                /* Ensure that the given FWT doesn't exceed NRT maximum */
                gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3911_NRT_MAX_1FC );
 8015db6:	4b3d      	ldr	r3, [pc, #244]	; (8015eac <rfalStartTransceive+0x254>)
 8015db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	4413      	add	r3, r2
 8015dbe:	4a3c      	ldr	r2, [pc, #240]	; (8015eb0 <rfalStartTransceive+0x258>)
 8015dc0:	4293      	cmp	r3, r2
 8015dc2:	bf28      	it	cs
 8015dc4:	4613      	movcs	r3, r2
 8015dc6:	4a39      	ldr	r2, [pc, #228]	; (8015eac <rfalStartTransceive+0x254>)
 8015dc8:	6353      	str	r3, [r2, #52]	; 0x34
                
                /* Set FWT in the NRT */
                st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 8015dca:	4b38      	ldr	r3, [pc, #224]	; (8015eac <rfalStartTransceive+0x254>)
 8015dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015dce:	099b      	lsrs	r3, r3, #6
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7ed fb63 	bl	800349c <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8015dd6:	e006      	b.n	8015de6 <rfalStartTransceive+0x18e>
            }
            else
            {
                /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
                st25r3911SetNoResponseTime_64fcs( RFAL_ST25R3911_NRT_DISABLED );
 8015dd8:	2000      	movs	r0, #0
 8015dda:	f7ed fb5f 	bl	800349c <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8015dde:	e002      	b.n	8015de6 <rfalStartTransceive+0x18e>
            }
        }
        else /* Active Comms */
        {
            /* Setup NRT timer for rf response RF collision timeout. */
            st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc(RFAL_AP2P_FIELDON_TADTTRFW) );
 8015de0:	2080      	movs	r0, #128	; 0x80
 8015de2:	f7ed fb5b 	bl	800349c <st25r3911SetNoResponseTime_64fcs>
            
            /* In Active Mode No Response Timer cannot be used to measure FWT a SW timer is used instead */
        }
        
        gRFAL.state       = RFAL_STATE_TXRX;
 8015de6:	4b31      	ldr	r3, [pc, #196]	; (8015eac <rfalStartTransceive+0x254>)
 8015de8:	2203      	movs	r2, #3
 8015dea:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 8015dec:	4b2f      	ldr	r3, [pc, #188]	; (8015eac <rfalStartTransceive+0x254>)
 8015dee:	220b      	movs	r2, #11
 8015df0:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 8015df2:	4b2e      	ldr	r3, [pc, #184]	; (8015eac <rfalStartTransceive+0x254>)
 8015df4:	2202      	movs	r2, #2
 8015df6:	82da      	strh	r2, [r3, #22]
        gRFAL.TxRx.rxse   = false;
 8015df8:	4b2c      	ldr	r3, [pc, #176]	; (8015eac <rfalStartTransceive+0x254>)
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	761a      	strb	r2, [r3, #24]
        
    #if RFAL_FEATURE_NFCV        
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8015dfe:	4b2b      	ldr	r3, [pc, #172]	; (8015eac <rfalStartTransceive+0x254>)
 8015e00:	785b      	ldrb	r3, [r3, #1]
 8015e02:	2b07      	cmp	r3, #7
 8015e04:	d003      	beq.n	8015e0e <rfalStartTransceive+0x1b6>
 8015e06:	4b29      	ldr	r3, [pc, #164]	; (8015eac <rfalStartTransceive+0x254>)
 8015e08:	785b      	ldrb	r3, [r3, #1]
 8015e0a:	2b08      	cmp	r3, #8
 8015e0c:	d128      	bne.n	8015e60 <rfalStartTransceive+0x208>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 8015e0e:	4a27      	ldr	r2, [pc, #156]	; (8015eac <rfalStartTransceive+0x254>)
 8015e10:	4b26      	ldr	r3, [pc, #152]	; (8015eac <rfalStartTransceive+0x254>)
 8015e12:	f502 7473 	add.w	r4, r2, #972	; 0x3cc
 8015e16:	f103 051c 	add.w	r5, r3, #28
 8015e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015e1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015e22:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 8015e26:	4b21      	ldr	r3, [pc, #132]	; (8015eac <rfalStartTransceive+0x254>)
 8015e28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d001      	beq.n	8015e34 <rfalStartTransceive+0x1dc>
 8015e30:	4b20      	ldr	r3, [pc, #128]	; (8015eb4 <rfalStartTransceive+0x25c>)
 8015e32:	e000      	b.n	8015e36 <rfalStartTransceive+0x1de>
 8015e34:	2300      	movs	r3, #0
 8015e36:	4a1d      	ldr	r2, [pc, #116]	; (8015eac <rfalStartTransceive+0x254>)
 8015e38:	6253      	str	r3, [r2, #36]	; 0x24
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 8015e3a:	4b1c      	ldr	r3, [pc, #112]	; (8015eac <rfalStartTransceive+0x254>)
 8015e3c:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 8015e40:	851a      	strh	r2, [r3, #40]	; 0x28
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 8015e42:	4b1a      	ldr	r3, [pc, #104]	; (8015eac <rfalStartTransceive+0x254>)
 8015e44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015e48:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 8015e4c:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 8015e50:	4a16      	ldr	r2, [pc, #88]	; (8015eac <rfalStartTransceive+0x254>)
 8015e52:	6313      	str	r3, [r2, #48]	; 0x30
            
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 8015e54:	4b15      	ldr	r3, [pc, #84]	; (8015eac <rfalStartTransceive+0x254>)
 8015e56:	69db      	ldr	r3, [r3, #28]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d001      	beq.n	8015e60 <rfalStartTransceive+0x208>
            {
                return  ERR_NONE;
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	e021      	b.n	8015ea4 <rfalStartTransceive+0x24c>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 8015e60:	4b12      	ldr	r3, [pc, #72]	; (8015eac <rfalStartTransceive+0x254>)
 8015e62:	69db      	ldr	r3, [r3, #28]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d003      	beq.n	8015e70 <rfalStartTransceive+0x218>
 8015e68:	4b10      	ldr	r3, [pc, #64]	; (8015eac <rfalStartTransceive+0x254>)
 8015e6a:	8c1b      	ldrh	r3, [r3, #32]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d116      	bne.n	8015e9e <rfalStartTransceive+0x246>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 8015e70:	f000 f9c2 	bl	80161f8 <rfalPrepareTransceive>
            
            /* Disable our field upon a Rx reEnable on AP2P */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 8015e74:	4b0d      	ldr	r3, [pc, #52]	; (8015eac <rfalStartTransceive+0x254>)
 8015e76:	785b      	ldrb	r3, [r3, #1]
 8015e78:	2b09      	cmp	r3, #9
 8015e7a:	d003      	beq.n	8015e84 <rfalStartTransceive+0x22c>
 8015e7c:	4b0b      	ldr	r3, [pc, #44]	; (8015eac <rfalStartTransceive+0x254>)
 8015e7e:	785b      	ldrb	r3, [r3, #1]
 8015e80:	2b0d      	cmp	r3, #13
 8015e82:	d103      	bne.n	8015e8c <rfalStartTransceive+0x234>
            {
                st25r3911TxOff();
 8015e84:	2108      	movs	r1, #8
 8015e86:	2002      	movs	r0, #2
 8015e88:	f7ed fe3a 	bl	8003b00 <st25r3911ClrRegisterBits>
            }
            
            /* No Tx done, enable the Receiver */
            st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 8015e8c:	20d1      	movs	r0, #209	; 0xd1
 8015e8e:	f7ed ff71 	bl	8003d74 <st25r3911ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3911ExecuteCommand( ST25R3911_CMD_START_NO_RESPONSE_TIMER );
 8015e92:	20e3      	movs	r0, #227	; 0xe3
 8015e94:	f7ed ff6e 	bl	8003d74 <st25r3911ExecuteCommand>
            
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 8015e98:	4b04      	ldr	r3, [pc, #16]	; (8015eac <rfalStartTransceive+0x254>)
 8015e9a:	2251      	movs	r2, #81	; 0x51
 8015e9c:	751a      	strb	r2, [r3, #20]
        }
        
        return ERR_NONE;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	e000      	b.n	8015ea4 <rfalStartTransceive+0x24c>
    }
    
    return ERR_WRONG_STATE;
 8015ea2:	2321      	movs	r3, #33	; 0x21
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3710      	adds	r7, #16
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8015eac:	2000369c 	.word	0x2000369c
 8015eb0:	0ffff000 	.word	0x0ffff000
 8015eb4:	2000385c 	.word	0x2000385c

08015eb8 <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 8015eb8:	b480      	push	{r7}
 8015eba:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 8015ebc:	4b08      	ldr	r3, [pc, #32]	; (8015ee0 <rfalIsTransceiveInTx+0x28>)
 8015ebe:	7d1b      	ldrb	r3, [r3, #20]
 8015ec0:	2b0a      	cmp	r3, #10
 8015ec2:	d905      	bls.n	8015ed0 <rfalIsTransceiveInTx+0x18>
 8015ec4:	4b06      	ldr	r3, [pc, #24]	; (8015ee0 <rfalIsTransceiveInTx+0x28>)
 8015ec6:	7d1b      	ldrb	r3, [r3, #20]
 8015ec8:	2b50      	cmp	r3, #80	; 0x50
 8015eca:	d801      	bhi.n	8015ed0 <rfalIsTransceiveInTx+0x18>
 8015ecc:	2301      	movs	r3, #1
 8015ece:	e000      	b.n	8015ed2 <rfalIsTransceiveInTx+0x1a>
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	f003 0301 	and.w	r3, r3, #1
 8015ed6:	b2db      	uxtb	r3, r3
}
 8015ed8:	4618      	mov	r0, r3
 8015eda:	46bd      	mov	sp, r7
 8015edc:	bc80      	pop	{r7}
 8015ede:	4770      	bx	lr
 8015ee0:	2000369c 	.word	0x2000369c

08015ee4 <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 8015ee4:	b480      	push	{r7}
 8015ee6:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 8015ee8:	4b05      	ldr	r3, [pc, #20]	; (8015f00 <rfalIsTransceiveInRx+0x1c>)
 8015eea:	7d1b      	ldrb	r3, [r3, #20]
 8015eec:	2b50      	cmp	r3, #80	; 0x50
 8015eee:	bf8c      	ite	hi
 8015ef0:	2301      	movhi	r3, #1
 8015ef2:	2300      	movls	r3, #0
 8015ef4:	b2db      	uxtb	r3, r3
}
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	bc80      	pop	{r7}
 8015efc:	4770      	bx	lr
 8015efe:	bf00      	nop
 8015f00:	2000369c 	.word	0x2000369c

08015f04 <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b08c      	sub	sp, #48	; 0x30
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	60f8      	str	r0, [r7, #12]
 8015f0c:	607a      	str	r2, [r7, #4]
 8015f0e:	461a      	mov	r2, r3
 8015f10:	460b      	mov	r3, r1
 8015f12:	817b      	strh	r3, [r7, #10]
 8015f14:	4613      	mov	r3, r2
 8015f16:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	613b      	str	r3, [r7, #16]
 8015f1c:	897b      	ldrh	r3, [r7, #10]
 8015f1e:	00db      	lsls	r3, r3, #3
 8015f20:	b29b      	uxth	r3, r3
 8015f22:	82bb      	strh	r3, [r7, #20]
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	61bb      	str	r3, [r7, #24]
 8015f28:	893b      	ldrh	r3, [r7, #8]
 8015f2a:	00db      	lsls	r3, r3, #3
 8015f2c:	b29b      	uxth	r3, r3
 8015f2e:	83bb      	strh	r3, [r7, #28]
 8015f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f32:	623b      	str	r3, [r7, #32]
 8015f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f36:	627b      	str	r3, [r7, #36]	; 0x24
 8015f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 8015f3c:	f107 0310 	add.w	r3, r7, #16
 8015f40:	4618      	mov	r0, r3
 8015f42:	f7ff fe89 	bl	8015c58 <rfalStartTransceive>
 8015f46:	4603      	mov	r3, r0
 8015f48:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8015f4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d001      	beq.n	8015f54 <rfalTransceiveBlockingTx+0x50>
 8015f50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015f52:	e002      	b.n	8015f5a <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 8015f54:	f000 f805 	bl	8015f62 <rfalTransceiveRunBlockingTx>
 8015f58:	4603      	mov	r3, r0
}
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	3730      	adds	r7, #48	; 0x30
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}

08015f62 <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 8015f62:	b580      	push	{r7, lr}
 8015f64:	b082      	sub	sp, #8
 8015f66:	af00      	add	r7, sp, #0
    ReturnCode  ret;
        
    do{
        rfalWorker();
 8015f68:	f000 f892 	bl	8016090 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 8015f6c:	f000 f880 	bl	8016070 <rfalGetTransceiveStatus>
 8015f70:	4603      	mov	r3, r0
 8015f72:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 8015f74:	f7ff ffa0 	bl	8015eb8 <rfalIsTransceiveInTx>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d002      	beq.n	8015f84 <rfalTransceiveRunBlockingTx+0x22>
 8015f7e:	88fb      	ldrh	r3, [r7, #6]
 8015f80:	2b02      	cmp	r3, #2
 8015f82:	d0f1      	beq.n	8015f68 <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 8015f84:	f7ff ffae 	bl	8015ee4 <rfalIsTransceiveInRx>
 8015f88:	4603      	mov	r3, r0
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d001      	beq.n	8015f92 <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 8015f8e:	2300      	movs	r3, #0
 8015f90:	e000      	b.n	8015f94 <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 8015f92:	88fb      	ldrh	r3, [r7, #6]
}
 8015f94:	4618      	mov	r0, r3
 8015f96:	3708      	adds	r7, #8
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	bd80      	pop	{r7, pc}

08015f9c <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b082      	sub	sp, #8
 8015fa0:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 8015fa2:	f000 f875 	bl	8016090 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 8015fa6:	f000 f863 	bl	8016070 <rfalGetTransceiveStatus>
 8015faa:	4603      	mov	r3, r0
 8015fac:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );
 8015fae:	f7ff ff99 	bl	8015ee4 <rfalIsTransceiveInRx>
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d002      	beq.n	8015fbe <rfalTransceiveBlockingRx+0x22>
 8015fb8:	88fb      	ldrh	r3, [r7, #6]
 8015fba:	2b02      	cmp	r3, #2
 8015fbc:	d0f1      	beq.n	8015fa2 <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 8015fbe:	88fb      	ldrh	r3, [r7, #6]
}
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	3708      	adds	r7, #8
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	bd80      	pop	{r7, pc}

08015fc8 <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b08a      	sub	sp, #40	; 0x28
 8015fcc:	af04      	add	r7, sp, #16
 8015fce:	60f8      	str	r0, [r7, #12]
 8015fd0:	607a      	str	r2, [r7, #4]
 8015fd2:	461a      	mov	r2, r3
 8015fd4:	460b      	mov	r3, r1
 8015fd6:	817b      	strh	r3, [r7, #10]
 8015fd8:	4613      	mov	r3, r2
 8015fda:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 8015fdc:	893a      	ldrh	r2, [r7, #8]
 8015fde:	8979      	ldrh	r1, [r7, #10]
 8015fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe2:	9302      	str	r3, [sp, #8]
 8015fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fe6:	9301      	str	r3, [sp, #4]
 8015fe8:	6a3b      	ldr	r3, [r7, #32]
 8015fea:	9300      	str	r3, [sp, #0]
 8015fec:	4613      	mov	r3, r2
 8015fee:	687a      	ldr	r2, [r7, #4]
 8015ff0:	68f8      	ldr	r0, [r7, #12]
 8015ff2:	f7ff ff87 	bl	8015f04 <rfalTransceiveBlockingTx>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	82fb      	strh	r3, [r7, #22]
 8015ffa:	8afb      	ldrh	r3, [r7, #22]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d001      	beq.n	8016004 <rfalTransceiveBlockingTxRx+0x3c>
 8016000:	8afb      	ldrh	r3, [r7, #22]
 8016002:	e00e      	b.n	8016022 <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 8016004:	f7ff ffca 	bl	8015f9c <rfalTransceiveBlockingRx>
 8016008:	4603      	mov	r3, r0
 801600a:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 801600c:	6a3b      	ldr	r3, [r7, #32]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d006      	beq.n	8016020 <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen =  rfalConvBitsToBytes(*actLen);
 8016012:	6a3b      	ldr	r3, [r7, #32]
 8016014:	881b      	ldrh	r3, [r3, #0]
 8016016:	3307      	adds	r3, #7
 8016018:	08db      	lsrs	r3, r3, #3
 801601a:	b29a      	uxth	r2, r3
 801601c:	6a3b      	ldr	r3, [r7, #32]
 801601e:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 8016020:	8afb      	ldrh	r3, [r7, #22]
}
 8016022:	4618      	mov	r0, r3
 8016024:	3718      	adds	r7, #24
 8016026:	46bd      	mov	sp, r7
 8016028:	bd80      	pop	{r7, pc}
	...

0801602c <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 801602c:	b580      	push	{r7, lr}
 801602e:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 8016030:	4b0e      	ldr	r3, [pc, #56]	; (801606c <rfalRunTransceiveWorker+0x40>)
 8016032:	781b      	ldrb	r3, [r3, #0]
 8016034:	2b03      	cmp	r3, #3
 8016036:	d115      	bne.n	8016064 <rfalRunTransceiveWorker+0x38>
    {     
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 8016038:	f7ff ff3e 	bl	8015eb8 <rfalIsTransceiveInTx>
 801603c:	4603      	mov	r3, r0
 801603e:	2b00      	cmp	r3, #0
 8016040:	d005      	beq.n	801604e <rfalRunTransceiveWorker+0x22>
        {
            rfalTransceiveTx();
 8016042:	f000 f96f 	bl	8016324 <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 8016046:	f000 f813 	bl	8016070 <rfalGetTransceiveStatus>
 801604a:	4603      	mov	r3, r0
 801604c:	e00b      	b.n	8016066 <rfalRunTransceiveWorker+0x3a>
        }
        
        if( rfalIsTransceiveInRx() )
 801604e:	f7ff ff49 	bl	8015ee4 <rfalIsTransceiveInRx>
 8016052:	4603      	mov	r3, r0
 8016054:	2b00      	cmp	r3, #0
 8016056:	d005      	beq.n	8016064 <rfalRunTransceiveWorker+0x38>
        {
            rfalTransceiveRx();
 8016058:	f000 fbb0 	bl	80167bc <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 801605c:	f000 f808 	bl	8016070 <rfalGetTransceiveStatus>
 8016060:	4603      	mov	r3, r0
 8016062:	e000      	b.n	8016066 <rfalRunTransceiveWorker+0x3a>
        }
    }    
    return ERR_WRONG_STATE;
 8016064:	2321      	movs	r3, #33	; 0x21
}
 8016066:	4618      	mov	r0, r3
 8016068:	bd80      	pop	{r7, pc}
 801606a:	bf00      	nop
 801606c:	2000369c 	.word	0x2000369c

08016070 <rfalGetTransceiveStatus>:
{
    return gRFAL.TxRx.state;
}

ReturnCode rfalGetTransceiveStatus( void )
{
 8016070:	b480      	push	{r7}
 8016072:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 8016074:	4b05      	ldr	r3, [pc, #20]	; (801608c <rfalGetTransceiveStatus+0x1c>)
 8016076:	7d1b      	ldrb	r3, [r3, #20]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d102      	bne.n	8016082 <rfalGetTransceiveStatus+0x12>
 801607c:	4b03      	ldr	r3, [pc, #12]	; (801608c <rfalGetTransceiveStatus+0x1c>)
 801607e:	8adb      	ldrh	r3, [r3, #22]
 8016080:	e000      	b.n	8016084 <rfalGetTransceiveStatus+0x14>
 8016082:	2302      	movs	r3, #2
}
 8016084:	4618      	mov	r0, r3
 8016086:	46bd      	mov	sp, r7
 8016088:	bc80      	pop	{r7}
 801608a:	4770      	bx	lr
 801608c:	2000369c 	.word	0x2000369c

08016090 <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 8016090:	b580      	push	{r7, lr}
 8016092:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 8016094:	4b09      	ldr	r3, [pc, #36]	; (80160bc <rfalWorker+0x2c>)
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	2b04      	cmp	r3, #4
 801609a:	d007      	beq.n	80160ac <rfalWorker+0x1c>
 801609c:	2b05      	cmp	r3, #5
 801609e:	d008      	beq.n	80160b2 <rfalWorker+0x22>
 80160a0:	2b03      	cmp	r3, #3
 80160a2:	d000      	beq.n	80160a6 <rfalWorker+0x16>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 80160a4:	e008      	b.n	80160b8 <rfalWorker+0x28>
            rfalRunTransceiveWorker();
 80160a6:	f7ff ffc1 	bl	801602c <rfalRunTransceiveWorker>
            break;
 80160aa:	e005      	b.n	80160b8 <rfalWorker+0x28>
            rfalRunListenModeWorker();
 80160ac:	f001 fb16 	bl	80176dc <rfalRunListenModeWorker>
            break;
 80160b0:	e002      	b.n	80160b8 <rfalWorker+0x28>
            rfalRunWakeUpModeWorker();
 80160b2:	f001 ff17 	bl	8017ee4 <rfalRunWakeUpModeWorker>
            break;
 80160b6:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 80160b8:	bf00      	nop
 80160ba:	bd80      	pop	{r7, pc}
 80160bc:	2000369c 	.word	0x2000369c

080160c0 <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b082      	sub	sp, #8
 80160c4:	af00      	add	r7, sp, #0
    bool    rxHasIncParError;
    uint8_t fifoBytesToRead;
    uint8_t reEnRx[] = { ST25R3911_CMD_CLEAR_FIFO, ST25R3911_CMD_UNMASK_RECEIVE_DATA };
 80160c6:	4b3f      	ldr	r3, [pc, #252]	; (80161c4 <rfalErrorHandling+0x104>)
 80160c8:	881b      	ldrh	r3, [r3, #0]
 80160ca:	80bb      	strh	r3, [r7, #4]
    

    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 80160cc:	f000 fedc 	bl	8016e88 <rfalFIFOStatusGetNumBytes>
 80160d0:	4603      	mov	r3, r0
 80160d2:	71fb      	strb	r3, [r7, #7]
    
    
    /*******************************************************************************/
    /* EMVCo                                                                       */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 80160d4:	4b3c      	ldr	r3, [pc, #240]	; (80161c8 <rfalErrorHandling+0x108>)
 80160d6:	79db      	ldrb	r3, [r3, #7]
 80160d8:	2b02      	cmp	r3, #2
 80160da:	d141      	bne.n	8016160 <rfalErrorHandling+0xa0>
        /*   - Parity error                                                            */
        /*   - CRC error                                                               */
        /*******************************************************************************/        
     
        /* Check if reception has incompete bytes or parity error */
        rxHasIncParError = ( rfalFIFOStatusIsIncompleteByte() ? true : rfalFIFOStatusIsMissingPar() );   /* MISRA 13.5 */
 80160dc:	f000 fee0 	bl	8016ea0 <rfalFIFOStatusIsIncompleteByte>
 80160e0:	4603      	mov	r3, r0
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d104      	bne.n	80160f0 <rfalErrorHandling+0x30>
 80160e6:	f000 feed 	bl	8016ec4 <rfalFIFOStatusIsMissingPar>
 80160ea:	4603      	mov	r3, r0
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d001      	beq.n	80160f4 <rfalErrorHandling+0x34>
 80160f0:	2301      	movs	r3, #1
 80160f2:	e000      	b.n	80160f6 <rfalErrorHandling+0x36>
 80160f4:	2300      	movs	r3, #0
 80160f6:	71bb      	strb	r3, [r7, #6]
        
        /* In case there are residual bits decrement FIFO bytes */
        if( (fifoBytesToRead > 0U) && rxHasIncParError)
 80160f8:	79fb      	ldrb	r3, [r7, #7]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d005      	beq.n	801610a <rfalErrorHandling+0x4a>
 80160fe:	79bb      	ldrb	r3, [r7, #6]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d002      	beq.n	801610a <rfalErrorHandling+0x4a>
        {
            fifoBytesToRead--;
 8016104:	79fb      	ldrb	r3, [r7, #7]
 8016106:	3b01      	subs	r3, #1
 8016108:	71fb      	strb	r3, [r7, #7]
        }
            
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 801610a:	4b2f      	ldr	r3, [pc, #188]	; (80161c8 <rfalErrorHandling+0x108>)
 801610c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801610e:	461a      	mov	r2, r3
 8016110:	79fb      	ldrb	r3, [r7, #7]
 8016112:	4413      	add	r3, r2
 8016114:	2b03      	cmp	r3, #3
 8016116:	dc51      	bgt.n	80161bc <rfalErrorHandling+0xfc>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 8016118:	4b2b      	ldr	r3, [pc, #172]	; (80161c8 <rfalErrorHandling+0x108>)
 801611a:	8adb      	ldrh	r3, [r3, #22]
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 801611c:	2b1d      	cmp	r3, #29
 801611e:	d00e      	beq.n	801613e <rfalErrorHandling+0x7e>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 8016120:	4b29      	ldr	r3, [pc, #164]	; (80161c8 <rfalErrorHandling+0x108>)
 8016122:	8adb      	ldrh	r3, [r3, #22]
 8016124:	2b09      	cmp	r3, #9
 8016126:	d00a      	beq.n	801613e <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 8016128:	4b27      	ldr	r3, [pc, #156]	; (80161c8 <rfalErrorHandling+0x108>)
 801612a:	8adb      	ldrh	r3, [r3, #22]
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 801612c:	2b1b      	cmp	r3, #27
 801612e:	d006      	beq.n	801613e <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 8016130:	4b25      	ldr	r3, [pc, #148]	; (80161c8 <rfalErrorHandling+0x108>)
 8016132:	8adb      	ldrh	r3, [r3, #22]
 8016134:	2b15      	cmp	r3, #21
 8016136:	d002      	beq.n	801613e <rfalErrorHandling+0x7e>
 8016138:	79bb      	ldrb	r3, [r7, #6]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d03e      	beq.n	80161bc <rfalErrorHandling+0xfc>
              rxHasIncParError                                                               ) )
        {
            /* Ignore this reception, ReEnable receiver */
            st25r3911ExecuteCommands( reEnRx, sizeof(reEnRx) );
 801613e:	1d3b      	adds	r3, r7, #4
 8016140:	2102      	movs	r1, #2
 8016142:	4618      	mov	r0, r3
 8016144:	f7ed fe64 	bl	8003e10 <st25r3911ExecuteCommands>
            
            rfalFIFOStatusClear();
 8016148:	f000 fe92 	bl	8016e70 <rfalFIFOStatusClear>
            gRFAL.fifo.bytesTotal = 0;
 801614c:	4b1e      	ldr	r3, [pc, #120]	; (80161c8 <rfalErrorHandling+0x108>)
 801614e:	2200      	movs	r2, #0
 8016150:	875a      	strh	r2, [r3, #58]	; 0x3a
            gRFAL.TxRx.status = ERR_BUSY;
 8016152:	4b1d      	ldr	r3, [pc, #116]	; (80161c8 <rfalErrorHandling+0x108>)
 8016154:	2202      	movs	r2, #2
 8016156:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8016158:	4b1b      	ldr	r3, [pc, #108]	; (80161c8 <rfalErrorHandling+0x108>)
 801615a:	2253      	movs	r2, #83	; 0x53
 801615c:	751a      	strb	r2, [r3, #20]
 801615e:	e02e      	b.n	80161be <rfalErrorHandling+0xfe>
    }

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 8016160:	4b19      	ldr	r3, [pc, #100]	; (80161c8 <rfalErrorHandling+0x108>)
 8016162:	785b      	ldrb	r3, [r3, #1]
 8016164:	2b01      	cmp	r3, #1
 8016166:	d12a      	bne.n	80161be <rfalErrorHandling+0xfe>
        /*******************************************************************************/
        /* If we received one incomplete byte (not a block and a incomplete byte at    *
         * the end) we will raise a specific error ( support for T2T 4 bit ACK / NAK )   *
         * Otherwise just leave it as an CRC/FRAMING/PAR error                         */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 8016168:	4b17      	ldr	r3, [pc, #92]	; (80161c8 <rfalErrorHandling+0x108>)
 801616a:	8adb      	ldrh	r3, [r3, #22]
 801616c:	2b1b      	cmp	r3, #27
 801616e:	d003      	beq.n	8016178 <rfalErrorHandling+0xb8>
 8016170:	4b15      	ldr	r3, [pc, #84]	; (80161c8 <rfalErrorHandling+0x108>)
 8016172:	8adb      	ldrh	r3, [r3, #22]
 8016174:	2b15      	cmp	r3, #21
 8016176:	d122      	bne.n	80161be <rfalErrorHandling+0xfe>
        {
            if( rfalFIFOStatusIsIncompleteByte() && (fifoBytesToRead == RFAL_NFC_RX_INCOMPLETE_LEN) )
 8016178:	f000 fe92 	bl	8016ea0 <rfalFIFOStatusIsIncompleteByte>
 801617c:	4603      	mov	r3, r0
 801617e:	2b00      	cmp	r3, #0
 8016180:	d01d      	beq.n	80161be <rfalErrorHandling+0xfe>
 8016182:	79fb      	ldrb	r3, [r7, #7]
 8016184:	2b01      	cmp	r3, #1
 8016186:	d11a      	bne.n	80161be <rfalErrorHandling+0xfe>
            {
                st25r3911ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 8016188:	4b0f      	ldr	r3, [pc, #60]	; (80161c8 <rfalErrorHandling+0x108>)
 801618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801618c:	79fa      	ldrb	r2, [r7, #7]
 801618e:	4611      	mov	r1, r2
 8016190:	4618      	mov	r0, r3
 8016192:	f7ed fda7 	bl	8003ce4 <st25r3911ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 8016196:	4b0c      	ldr	r3, [pc, #48]	; (80161c8 <rfalErrorHandling+0x108>)
 8016198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801619a:	2b00      	cmp	r3, #0
 801619c:	d007      	beq.n	80161ae <rfalErrorHandling+0xee>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 801619e:	f000 fea3 	bl	8016ee8 <rfalFIFOGetNumIncompleteBits>
 80161a2:	4603      	mov	r3, r0
 80161a4:	461a      	mov	r2, r3
 80161a6:	4b08      	ldr	r3, [pc, #32]	; (80161c8 <rfalErrorHandling+0x108>)
 80161a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161aa:	b292      	uxth	r2, r2
 80161ac:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 80161ae:	4b06      	ldr	r3, [pc, #24]	; (80161c8 <rfalErrorHandling+0x108>)
 80161b0:	2228      	movs	r2, #40	; 0x28
 80161b2:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80161b4:	4b04      	ldr	r3, [pc, #16]	; (80161c8 <rfalErrorHandling+0x108>)
 80161b6:	225a      	movs	r2, #90	; 0x5a
 80161b8:	751a      	strb	r2, [r3, #20]
 80161ba:	e000      	b.n	80161be <rfalErrorHandling+0xfe>
        return;
 80161bc:	bf00      	nop
            }
        }
    }
    
}
 80161be:	3708      	adds	r7, #8
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}
 80161c4:	0801a94c 	.word	0x0801a94c
 80161c8:	2000369c 	.word	0x2000369c

080161cc <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 80161d0:	21e0      	movs	r1, #224	; 0xe0
 80161d2:	2005      	movs	r0, #5
 80161d4:	f7ed fc94 	bl	8003b00 <st25r3911ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 80161d8:	2110      	movs	r1, #16
 80161da:	200b      	movs	r0, #11
 80161dc:	f7ed fcb3 	bl	8003b46 <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 80161e0:	4b04      	ldr	r3, [pc, #16]	; (80161f4 <rfalCleanupTransceive+0x28>)
 80161e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d002      	beq.n	80161ee <rfalCleanupTransceive+0x22>
    {
        gRFAL.callbacks.postTxRx();
 80161e8:	4b02      	ldr	r3, [pc, #8]	; (80161f4 <rfalCleanupTransceive+0x28>)
 80161ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80161ec:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 80161ee:	bf00      	nop
 80161f0:	bd80      	pop	{r7, pc}
 80161f2:	bf00      	nop
 80161f4:	2000369c 	.word	0x2000369c

080161f8 <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b082      	sub	sp, #8
 80161fc:	af00      	add	r7, sp, #0
    uint8_t  reg;
    
    /*******************************************************************************/
    /* In the EMVCo mode the NRT will continue to run.                             *
     * For the clear to stop it, the EMV mode has to be disabled before            */
    st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 80161fe:	2102      	movs	r1, #2
 8016200:	2011      	movs	r0, #17
 8016202:	f7ed fc7d 	bl	8003b00 <st25r3911ClrRegisterBits>
    
    /* Reset receive logic */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 8016206:	20c2      	movs	r0, #194	; 0xc2
 8016208:	f7ed fdb4 	bl	8003d74 <st25r3911ExecuteCommand>
    
    /* Reset Rx Gain */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 801620c:	20d5      	movs	r0, #213	; 0xd5
 801620e:	f7ed fdb1 	bl	8003d74 <st25r3911ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 8016212:	4b42      	ldr	r3, [pc, #264]	; (801631c <rfalPrepareTransceive+0x124>)
 8016214:	785b      	ldrb	r3, [r3, #1]
 8016216:	2b09      	cmp	r3, #9
 8016218:	d01c      	beq.n	8016254 <rfalPrepareTransceive+0x5c>
 801621a:	4b40      	ldr	r3, [pc, #256]	; (801631c <rfalPrepareTransceive+0x124>)
 801621c:	785b      	ldrb	r3, [r3, #1]
 801621e:	2b0d      	cmp	r3, #13
 8016220:	d018      	beq.n	8016254 <rfalPrepareTransceive+0x5c>
    {
       /* In Passive communications General Purpose Timer is used to measure FDT Poll */
       if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 8016222:	4b3e      	ldr	r3, [pc, #248]	; (801631c <rfalPrepareTransceive+0x124>)
 8016224:	691b      	ldr	r3, [r3, #16]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d014      	beq.n	8016254 <rfalPrepareTransceive+0x5c>
       {
           /* Configure GPT to start at RX end */
           st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 801622a:	4b3c      	ldr	r3, [pc, #240]	; (801631c <rfalPrepareTransceive+0x124>)
 801622c:	691b      	ldr	r3, [r3, #16]
 801622e:	f240 423b 	movw	r2, #1083	; 0x43b
 8016232:	4293      	cmp	r3, r2
 8016234:	d804      	bhi.n	8016240 <rfalPrepareTransceive+0x48>
 8016236:	4b39      	ldr	r3, [pc, #228]	; (801631c <rfalPrepareTransceive+0x124>)
 8016238:	691b      	ldr	r3, [r3, #16]
 801623a:	08db      	lsrs	r3, r3, #3
 801623c:	b29b      	uxth	r3, r3
 801623e:	e005      	b.n	801624c <rfalPrepareTransceive+0x54>
 8016240:	4b36      	ldr	r3, [pc, #216]	; (801631c <rfalPrepareTransceive+0x124>)
 8016242:	691b      	ldr	r3, [r3, #16]
 8016244:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8016248:	08db      	lsrs	r3, r3, #3
 801624a:	b29b      	uxth	r3, r3
 801624c:	2120      	movs	r1, #32
 801624e:	4618      	mov	r0, r3
 8016250:	f7ed f8ae 	bl	80033b0 <st25r3911StartGPTimer_8fcs>
    
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 8016254:	4b31      	ldr	r3, [pc, #196]	; (801631c <rfalPrepareTransceive+0x124>)
 8016256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016258:	2b00      	cmp	r3, #0
 801625a:	d002      	beq.n	8016262 <rfalPrepareTransceive+0x6a>
    {
        gRFAL.callbacks.preTxRx();
 801625c:	4b2f      	ldr	r3, [pc, #188]	; (801631c <rfalPrepareTransceive+0x124>)
 801625e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016260:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    maskInterrupts = ( ST25R3911_IRQ_MASK_FWL  | ST25R3911_IRQ_MASK_TXE  |
 8016262:	4b2f      	ldr	r3, [pc, #188]	; (8016320 <rfalPrepareTransceive+0x128>)
 8016264:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3911_REG_ISO14443A_NFC_no_tx_par_off | ST25R3911_REG_ISO14443A_NFC_no_rx_par_off | ST25R3911_REG_ISO14443A_NFC_nfc_f0_off);
 8016266:	2300      	movs	r3, #0
 8016268:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 801626a:	4b2c      	ldr	r3, [pc, #176]	; (801631c <rfalPrepareTransceive+0x124>)
 801626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801626e:	f003 0304 	and.w	r3, r3, #4
 8016272:	2b00      	cmp	r3, #0
 8016274:	d003      	beq.n	801627e <rfalPrepareTransceive+0x86>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_nfc_f0;
 8016276:	78fb      	ldrb	r3, [r7, #3]
 8016278:	f043 0320 	orr.w	r3, r3, #32
 801627c:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 801627e:	4b27      	ldr	r3, [pc, #156]	; (801631c <rfalPrepareTransceive+0x124>)
 8016280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016282:	f003 0310 	and.w	r3, r3, #16
 8016286:	2b00      	cmp	r3, #0
 8016288:	d003      	beq.n	8016292 <rfalPrepareTransceive+0x9a>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_rx_par;
 801628a:	78fb      	ldrb	r3, [r7, #3]
 801628c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016290:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 8016292:	4b22      	ldr	r3, [pc, #136]	; (801631c <rfalPrepareTransceive+0x124>)
 8016294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016296:	f003 0320 	and.w	r3, r3, #32
 801629a:	2b00      	cmp	r3, #0
 801629c:	d003      	beq.n	80162a6 <rfalPrepareTransceive+0xae>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_tx_par;
 801629e:	78fb      	ldrb	r3, [r7, #3]
 80162a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80162a4:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0), reg );
 80162a6:	78fb      	ldrb	r3, [r7, #3]
 80162a8:	461a      	mov	r2, r3
 80162aa:	21e0      	movs	r1, #224	; 0xe0
 80162ac:	2005      	movs	r0, #5
 80162ae:	f7ed fc68 	bl	8003b82 <st25r3911ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 80162b2:	4b1a      	ldr	r3, [pc, #104]	; (801631c <rfalPrepareTransceive+0x124>)
 80162b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162b6:	f003 0308 	and.w	r3, r3, #8
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d004      	beq.n	80162c8 <rfalPrepareTransceive+0xd0>
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 80162be:	2110      	movs	r1, #16
 80162c0:	200b      	movs	r0, #11
 80162c2:	f7ed fc1d 	bl	8003b00 <st25r3911ClrRegisterBits>
 80162c6:	e003      	b.n	80162d0 <rfalPrepareTransceive+0xd8>
    }
    else
    {
        st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 80162c8:	2110      	movs	r1, #16
 80162ca:	200b      	movs	r0, #11
 80162cc:	f7ed fc3b 	bl	8003b46 <st25r3911SetRegisterBits>
    

    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 80162d0:	4b12      	ldr	r3, [pc, #72]	; (801631c <rfalPrepareTransceive+0x124>)
 80162d2:	79db      	ldrb	r3, [r3, #7]
 80162d4:	2b02      	cmp	r3, #2
 80162d6:	d104      	bne.n	80162e2 <rfalPrepareTransceive+0xea>
    {
        st25r3911SetRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 80162d8:	2102      	movs	r1, #2
 80162da:	2011      	movs	r0, #17
 80162dc:	f7ed fc33 	bl	8003b46 <st25r3911SetRegisterBits>
 80162e0:	e003      	b.n	80162ea <rfalPrepareTransceive+0xf2>
    }
    else
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 80162e2:	2102      	movs	r1, #2
 80162e4:	2011      	movs	r0, #17
 80162e6:	f7ed fc0b 	bl	8003b00 <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 80162ea:	4b0c      	ldr	r3, [pc, #48]	; (801631c <rfalPrepareTransceive+0x124>)
 80162ec:	785b      	ldrb	r3, [r3, #1]
 80162ee:	2b09      	cmp	r3, #9
 80162f0:	d003      	beq.n	80162fa <rfalPrepareTransceive+0x102>
 80162f2:	4b0a      	ldr	r3, [pc, #40]	; (801631c <rfalPrepareTransceive+0x124>)
 80162f4:	785b      	ldrb	r3, [r3, #1]
 80162f6:	2b0d      	cmp	r3, #13
 80162f8:	d103      	bne.n	8016302 <rfalPrepareTransceive+0x10a>
    {
        maskInterrupts |= ( ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC );
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8016300:	607b      	str	r3, [r7, #4]
    }
    
    
    /*******************************************************************************/
    /* clear and enable these interrupts */
    st25r3911GetInterrupt( maskInterrupts );
 8016302:	6878      	ldr	r0, [r7, #4]
 8016304:	f7ed ff1c 	bl	8004140 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( maskInterrupts );
 8016308:	6878      	ldr	r0, [r7, #4]
 801630a:	f7ed ff51 	bl	80041b0 <st25r3911EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 801630e:	f000 fdaf 	bl	8016e70 <rfalFIFOStatusClear>
}
 8016312:	bf00      	nop
 8016314:	3708      	adds	r7, #8
 8016316:	46bd      	mov	sp, r7
 8016318:	bd80      	pop	{r7, pc}
 801631a:	bf00      	nop
 801631c:	2000369c 	.word	0x2000369c
 8016320:	00f04078 	.word	0x00f04078

08016324 <rfalTransceiveTx>:

/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 8016324:	b5b0      	push	{r4, r5, r7, lr}
 8016326:	b08a      	sub	sp, #40	; 0x28
 8016328:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 801632a:	2300      	movs	r3, #0
 801632c:	81fb      	strh	r3, [r7, #14]
    NO_WARNING(ret);
    
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 801632e:	2300      	movs	r3, #0
 8016330:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8016332:	4b95      	ldr	r3, [pc, #596]	; (8016588 <rfalTransceiveTx+0x264>)
 8016334:	7d1a      	ldrb	r2, [r3, #20]
 8016336:	4b94      	ldr	r3, [pc, #592]	; (8016588 <rfalTransceiveTx+0x264>)
 8016338:	7d5b      	ldrb	r3, [r3, #21]
 801633a:	429a      	cmp	r2, r3
 801633c:	d003      	beq.n	8016346 <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 801633e:	4b92      	ldr	r3, [pc, #584]	; (8016588 <rfalTransceiveTx+0x264>)
 8016340:	7d1a      	ldrb	r2, [r3, #20]
 8016342:	4b91      	ldr	r3, [pc, #580]	; (8016588 <rfalTransceiveTx+0x264>)
 8016344:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 8016346:	4b90      	ldr	r3, [pc, #576]	; (8016588 <rfalTransceiveTx+0x264>)
 8016348:	7d1b      	ldrb	r3, [r3, #20]
 801634a:	3b0b      	subs	r3, #11
 801634c:	2b08      	cmp	r3, #8
 801634e:	f200 8217 	bhi.w	8016780 <rfalTransceiveTx+0x45c>
 8016352:	a201      	add	r2, pc, #4	; (adr r2, 8016358 <rfalTransceiveTx+0x34>)
 8016354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016358:	0801637d 	.word	0x0801637d
 801635c:	08016383 	.word	0x08016383
 8016360:	080163a1 	.word	0x080163a1
 8016364:	080163c9 	.word	0x080163c9
 8016368:	0801651b 	.word	0x0801651b
 801636c:	08016557 	.word	0x08016557
 8016370:	0801669b 	.word	0x0801669b
 8016374:	08016711 	.word	0x08016711
 8016378:	08016757 	.word	0x08016757
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 801637c:	4b82      	ldr	r3, [pc, #520]	; (8016588 <rfalTransceiveTx+0x264>)
 801637e:	220c      	movs	r2, #12
 8016380:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 8016382:	f7ff fbd9 	bl	8015b38 <rfalIsGTExpired>
 8016386:	4603      	mov	r3, r0
 8016388:	f083 0301 	eor.w	r3, r3, #1
 801638c:	b2db      	uxtb	r3, r3
 801638e:	2b00      	cmp	r3, #0
 8016390:	f040 81fd 	bne.w	801678e <rfalTransceiveTx+0x46a>
            {
                break;
            }
            
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 8016394:	4b7c      	ldr	r3, [pc, #496]	; (8016588 <rfalTransceiveTx+0x264>)
 8016396:	2200      	movs	r2, #0
 8016398:	641a      	str	r2, [r3, #64]	; 0x40
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 801639a:	4b7b      	ldr	r3, [pc, #492]	; (8016588 <rfalTransceiveTx+0x264>)
 801639c:	220d      	movs	r2, #13
 801639e:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 80163a0:	4b79      	ldr	r3, [pc, #484]	; (8016588 <rfalTransceiveTx+0x264>)
 80163a2:	785b      	ldrb	r3, [r3, #1]
 80163a4:	2b09      	cmp	r3, #9
 80163a6:	d00c      	beq.n	80163c2 <rfalTransceiveTx+0x9e>
 80163a8:	4b77      	ldr	r3, [pc, #476]	; (8016588 <rfalTransceiveTx+0x264>)
 80163aa:	785b      	ldrb	r3, [r3, #1]
 80163ac:	2b0d      	cmp	r3, #13
 80163ae:	d008      	beq.n	80163c2 <rfalTransceiveTx+0x9e>
            {
                if( st25r3911IsGPTRunning() )
 80163b0:	2204      	movs	r2, #4
 80163b2:	2104      	movs	r1, #4
 80163b4:	202b      	movs	r0, #43	; 0x2b
 80163b6:	f7ed f82f 	bl	8003418 <st25r3911CheckReg>
 80163ba:	4603      	mov	r3, r0
 80163bc:	2b00      	cmp	r3, #0
 80163be:	f040 81e8 	bne.w	8016792 <rfalTransceiveTx+0x46e>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 80163c2:	4b71      	ldr	r3, [pc, #452]	; (8016588 <rfalTransceiveTx+0x264>)
 80163c4:	220e      	movs	r2, #14
 80163c6:	751a      	strb	r2, [r3, #20]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 80163c8:	f7ff ff16 	bl	80161f8 <rfalPrepareTransceive>

            /* Calculate when Water Level Interrupt will be triggered */
            gRFAL.fifo.expWL = (uint16_t)( st25r3911CheckReg( ST25R3911_REG_IO_CONF1, ST25R3911_REG_IO_CONF1_fifo_lt, ST25R3911_REG_IO_CONF1_fifo_lt_16bytes) ? RFAL_FIFO_OUT_LT_16 : RFAL_FIFO_OUT_LT_32 );
 80163cc:	2210      	movs	r2, #16
 80163ce:	2110      	movs	r1, #16
 80163d0:	2000      	movs	r0, #0
 80163d2:	f7ed f821 	bl	8003418 <st25r3911CheckReg>
 80163d6:	4603      	mov	r3, r0
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d001      	beq.n	80163e0 <rfalTransceiveTx+0xbc>
 80163dc:	2250      	movs	r2, #80	; 0x50
 80163de:	e000      	b.n	80163e2 <rfalTransceiveTx+0xbe>
 80163e0:	2240      	movs	r2, #64	; 0x40
 80163e2:	4b69      	ldr	r3, [pc, #420]	; (8016588 <rfalTransceiveTx+0x264>)
 80163e4:	871a      	strh	r2, [r3, #56]	; 0x38
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 80163e6:	4b68      	ldr	r3, [pc, #416]	; (8016588 <rfalTransceiveTx+0x264>)
 80163e8:	785b      	ldrb	r3, [r3, #1]
 80163ea:	2b07      	cmp	r3, #7
 80163ec:	d003      	beq.n	80163f6 <rfalTransceiveTx+0xd2>
 80163ee:	4b66      	ldr	r3, [pc, #408]	; (8016588 <rfalTransceiveTx+0x264>)
 80163f0:	785b      	ldrb	r3, [r3, #1]
 80163f2:	2b08      	cmp	r3, #8
 80163f4:	d151      	bne.n	801649a <rfalTransceiveTx+0x176>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3911WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
            #endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 80163f6:	4b64      	ldr	r3, [pc, #400]	; (8016588 <rfalTransceiveTx+0x264>)
 80163f8:	2200      	movs	r2, #0
 80163fa:	f8a3 23c8 	strh.w	r2, [r3, #968]	; 0x3c8
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 80163fe:	4b62      	ldr	r3, [pc, #392]	; (8016588 <rfalTransceiveTx+0x264>)
 8016400:	69d8      	ldr	r0, [r3, #28]
 8016402:	4b61      	ldr	r3, [pc, #388]	; (8016588 <rfalTransceiveTx+0x264>)
 8016404:	8c1b      	ldrh	r3, [r3, #32]
 8016406:	3307      	adds	r3, #7
 8016408:	08db      	lsrs	r3, r3, #3
 801640a:	b299      	uxth	r1, r3
 801640c:	4b5e      	ldr	r3, [pc, #376]	; (8016588 <rfalTransceiveTx+0x264>)
 801640e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016412:	f003 0301 	and.w	r3, r3, #1
 8016416:	2b00      	cmp	r3, #0
 8016418:	bf0c      	ite	eq
 801641a:	2301      	moveq	r3, #1
 801641c:	2300      	movne	r3, #0
 801641e:	b2dc      	uxtb	r4, r3
 8016420:	4b59      	ldr	r3, [pc, #356]	; (8016588 <rfalTransceiveTx+0x264>)
 8016422:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801642a:	2b00      	cmp	r3, #0
 801642c:	bf0c      	ite	eq
 801642e:	2301      	moveq	r3, #1
 8016430:	2300      	movne	r3, #0
 8016432:	b2dd      	uxtb	r5, r3
 8016434:	4b54      	ldr	r3, [pc, #336]	; (8016588 <rfalTransceiveTx+0x264>)
 8016436:	785b      	ldrb	r3, [r3, #1]
 8016438:	2b08      	cmp	r3, #8
 801643a:	bf0c      	ite	eq
 801643c:	2301      	moveq	r3, #1
 801643e:	2300      	movne	r3, #0
 8016440:	b2db      	uxtb	r3, r3
 8016442:	4a52      	ldr	r2, [pc, #328]	; (801658c <rfalTransceiveTx+0x268>)
 8016444:	9205      	str	r2, [sp, #20]
 8016446:	2260      	movs	r2, #96	; 0x60
 8016448:	9204      	str	r2, [sp, #16]
 801644a:	4a51      	ldr	r2, [pc, #324]	; (8016590 <rfalTransceiveTx+0x26c>)
 801644c:	9203      	str	r2, [sp, #12]
 801644e:	4a51      	ldr	r2, [pc, #324]	; (8016594 <rfalTransceiveTx+0x270>)
 8016450:	9202      	str	r2, [sp, #8]
 8016452:	4a51      	ldr	r2, [pc, #324]	; (8016598 <rfalTransceiveTx+0x274>)
 8016454:	9201      	str	r2, [sp, #4]
 8016456:	9300      	str	r3, [sp, #0]
 8016458:	462b      	mov	r3, r5
 801645a:	4622      	mov	r2, r4
 801645c:	f7f6 ffc2 	bl	800d3e4 <iso15693VCDCode>
 8016460:	4603      	mov	r3, r0
 8016462:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3911_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 8016464:	89fb      	ldrh	r3, [r7, #14]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d009      	beq.n	801647e <rfalTransceiveTx+0x15a>
 801646a:	89fb      	ldrh	r3, [r7, #14]
 801646c:	2b0d      	cmp	r3, #13
 801646e:	d006      	beq.n	801647e <rfalTransceiveTx+0x15a>
                {
                    gRFAL.TxRx.status = ret;
 8016470:	4a45      	ldr	r2, [pc, #276]	; (8016588 <rfalTransceiveTx+0x264>)
 8016472:	89fb      	ldrh	r3, [r7, #14]
 8016474:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8016476:	4b44      	ldr	r3, [pc, #272]	; (8016588 <rfalTransceiveTx+0x264>)
 8016478:	2213      	movs	r2, #19
 801647a:	751a      	strb	r2, [r3, #20]
                    break;
 801647c:	e190      	b.n	80167a0 <rfalTransceiveTx+0x47c>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 801647e:	4b42      	ldr	r3, [pc, #264]	; (8016588 <rfalTransceiveTx+0x264>)
 8016480:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8016482:	00db      	lsls	r3, r3, #3
 8016484:	4618      	mov	r0, r3
 8016486:	f7ed f8bc 	bl	8003602 <st25r3911SetNumTxBits>

                /* Load FIFO with coded bytes */
                /* TODO: check bytesWritten does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)gRFAL.fifo.bytesWritten );
 801648a:	4b3f      	ldr	r3, [pc, #252]	; (8016588 <rfalTransceiveTx+0x264>)
 801648c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801648e:	b2db      	uxtb	r3, r3
 8016490:	4619      	mov	r1, r3
 8016492:	483f      	ldr	r0, [pc, #252]	; (8016590 <rfalTransceiveTx+0x26c>)
 8016494:	f7ed fbde 	bl	8003c54 <st25r3911WriteFifo>
 8016498:	e01c      	b.n	80164d4 <rfalTransceiveTx+0x1b0>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 801649a:	4b3b      	ldr	r3, [pc, #236]	; (8016588 <rfalTransceiveTx+0x264>)
 801649c:	8c1b      	ldrh	r3, [r3, #32]
 801649e:	3307      	adds	r3, #7
 80164a0:	08db      	lsrs	r3, r3, #3
 80164a2:	b29a      	uxth	r2, r3
 80164a4:	4b38      	ldr	r3, [pc, #224]	; (8016588 <rfalTransceiveTx+0x264>)
 80164a6:	875a      	strh	r2, [r3, #58]	; 0x3a
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 80164a8:	4b37      	ldr	r3, [pc, #220]	; (8016588 <rfalTransceiveTx+0x264>)
 80164aa:	8c1b      	ldrh	r3, [r3, #32]
 80164ac:	4618      	mov	r0, r3
 80164ae:	f7ed f8a8 	bl	8003602 <st25r3911SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3911_FIFO_DEPTH );
 80164b2:	4b35      	ldr	r3, [pc, #212]	; (8016588 <rfalTransceiveTx+0x264>)
 80164b4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80164b6:	2b60      	cmp	r3, #96	; 0x60
 80164b8:	bf28      	it	cs
 80164ba:	2360      	movcs	r3, #96	; 0x60
 80164bc:	b29a      	uxth	r2, r3
 80164be:	4b32      	ldr	r3, [pc, #200]	; (8016588 <rfalTransceiveTx+0x264>)
 80164c0:	879a      	strh	r2, [r3, #60]	; 0x3c
                st25r3911WriteFifo( gRFAL.TxRx.ctx.txBuf, (uint8_t)gRFAL.fifo.bytesWritten );
 80164c2:	4b31      	ldr	r3, [pc, #196]	; (8016588 <rfalTransceiveTx+0x264>)
 80164c4:	69da      	ldr	r2, [r3, #28]
 80164c6:	4b30      	ldr	r3, [pc, #192]	; (8016588 <rfalTransceiveTx+0x264>)
 80164c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80164ca:	b2db      	uxtb	r3, r3
 80164cc:	4619      	mov	r1, r3
 80164ce:	4610      	mov	r0, r2
 80164d0:	f7ed fbc0 	bl	8003c54 <st25r3911WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx(); 
 80164d4:	4b2c      	ldr	r3, [pc, #176]	; (8016588 <rfalTransceiveTx+0x264>)
 80164d6:	795b      	ldrb	r3, [r3, #5]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d005      	beq.n	80164e8 <rfalTransceiveTx+0x1c4>
 80164dc:	4b2a      	ldr	r3, [pc, #168]	; (8016588 <rfalTransceiveTx+0x264>)
 80164de:	795b      	ldrb	r3, [r3, #5]
 80164e0:	4619      	mov	r1, r3
 80164e2:	2001      	movs	r0, #1
 80164e4:	f7ed fa7e 	bl	80039e4 <st25r3911WriteTestRegister>
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 80164e8:	4b27      	ldr	r3, [pc, #156]	; (8016588 <rfalTransceiveTx+0x264>)
 80164ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164ec:	f003 0301 	and.w	r3, r3, #1
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d003      	beq.n	80164fc <rfalTransceiveTx+0x1d8>
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITHOUT_CRC );
 80164f4:	20c5      	movs	r0, #197	; 0xc5
 80164f6:	f7ed fc3d 	bl	8003d74 <st25r3911ExecuteCommand>
 80164fa:	e002      	b.n	8016502 <rfalTransceiveTx+0x1de>
            }
            else
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITH_CRC );
 80164fc:	20c4      	movs	r0, #196	; 0xc4
 80164fe:	f7ed fc39 	bl	8003d74 <st25r3911ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8016502:	4b21      	ldr	r3, [pc, #132]	; (8016588 <rfalTransceiveTx+0x264>)
 8016504:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8016506:	4b20      	ldr	r3, [pc, #128]	; (8016588 <rfalTransceiveTx+0x264>)
 8016508:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801650a:	429a      	cmp	r2, r3
 801650c:	d201      	bcs.n	8016512 <rfalTransceiveTx+0x1ee>
 801650e:	220f      	movs	r2, #15
 8016510:	e000      	b.n	8016514 <rfalTransceiveTx+0x1f0>
 8016512:	2211      	movs	r2, #17
 8016514:	4b1c      	ldr	r3, [pc, #112]	; (8016588 <rfalTransceiveTx+0x264>)
 8016516:	751a      	strb	r2, [r3, #20]
            break;
 8016518:	e142      	b.n	80167a0 <rfalTransceiveTx+0x47c>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );            
 801651a:	2048      	movs	r0, #72	; 0x48
 801651c:	f7ed fe10 	bl	8004140 <st25r3911GetInterrupt>
 8016520:	4603      	mov	r3, r0
 8016522:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8016524:	68bb      	ldr	r3, [r7, #8]
 8016526:	2b00      	cmp	r3, #0
 8016528:	f000 8135 	beq.w	8016796 <rfalTransceiveTx+0x472>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_TXE) == 0U) )
 801652c:	68bb      	ldr	r3, [r7, #8]
 801652e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016532:	2b00      	cmp	r3, #0
 8016534:	d008      	beq.n	8016548 <rfalTransceiveTx+0x224>
 8016536:	68bb      	ldr	r3, [r7, #8]
 8016538:	f003 0308 	and.w	r3, r3, #8
 801653c:	2b00      	cmp	r3, #0
 801653e:	d103      	bne.n	8016548 <rfalTransceiveTx+0x224>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 8016540:	4b11      	ldr	r3, [pc, #68]	; (8016588 <rfalTransceiveTx+0x264>)
 8016542:	2210      	movs	r2, #16
 8016544:	751a      	strb	r2, [r3, #20]
 8016546:	e006      	b.n	8016556 <rfalTransceiveTx+0x232>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 8016548:	4b0f      	ldr	r3, [pc, #60]	; (8016588 <rfalTransceiveTx+0x264>)
 801654a:	2203      	movs	r2, #3
 801654c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 801654e:	4b0e      	ldr	r3, [pc, #56]	; (8016588 <rfalTransceiveTx+0x264>)
 8016550:	2213      	movs	r2, #19
 8016552:	751a      	strb	r2, [r3, #20]
                break;
 8016554:	e124      	b.n	80167a0 <rfalTransceiveTx+0x47c>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8016556:	4b0c      	ldr	r3, [pc, #48]	; (8016588 <rfalTransceiveTx+0x264>)
 8016558:	785b      	ldrb	r3, [r3, #1]
 801655a:	2b07      	cmp	r3, #7
 801655c:	d003      	beq.n	8016566 <rfalTransceiveTx+0x242>
 801655e:	4b0a      	ldr	r3, [pc, #40]	; (8016588 <rfalTransceiveTx+0x264>)
 8016560:	785b      	ldrb	r3, [r3, #1]
 8016562:	2b08      	cmp	r3, #8
 8016564:	d16d      	bne.n	8016642 <rfalTransceiveTx+0x31e>
            {
                uint16_t maxLen;
                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 8016566:	4b08      	ldr	r3, [pc, #32]	; (8016588 <rfalTransceiveTx+0x264>)
 8016568:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801656a:	461a      	mov	r2, r3
 801656c:	4b06      	ldr	r3, [pc, #24]	; (8016588 <rfalTransceiveTx+0x264>)
 801656e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8016570:	1ad3      	subs	r3, r2, r3
 8016572:	4a05      	ldr	r2, [pc, #20]	; (8016588 <rfalTransceiveTx+0x264>)
 8016574:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8016576:	4293      	cmp	r3, r2
 8016578:	da10      	bge.n	801659c <rfalTransceiveTx+0x278>
 801657a:	4b03      	ldr	r3, [pc, #12]	; (8016588 <rfalTransceiveTx+0x264>)
 801657c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801657e:	4b02      	ldr	r3, [pc, #8]	; (8016588 <rfalTransceiveTx+0x264>)
 8016580:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8016582:	1ad3      	subs	r3, r2, r3
 8016584:	b29b      	uxth	r3, r3
 8016586:	e00b      	b.n	80165a0 <rfalTransceiveTx+0x27c>
 8016588:	2000369c 	.word	0x2000369c
 801658c:	200036d8 	.word	0x200036d8
 8016590:	2000385c 	.word	0x2000385c
 8016594:	20003a64 	.word	0x20003a64
 8016598:	200036d6 	.word	0x200036d6
 801659c:	4b82      	ldr	r3, [pc, #520]	; (80167a8 <rfalTransceiveTx+0x484>)
 801659e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80165a0:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 80165a2:	89bb      	ldrh	r3, [r7, #12]
 80165a4:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80165a8:	bf28      	it	cs
 80165aa:	f44f 7302 	movcs.w	r3, #520	; 0x208
 80165ae:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 80165b0:	2300      	movs	r3, #0
 80165b2:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 80165b4:	4b7c      	ldr	r3, [pc, #496]	; (80167a8 <rfalTransceiveTx+0x484>)
 80165b6:	69d8      	ldr	r0, [r3, #28]
 80165b8:	4b7b      	ldr	r3, [pc, #492]	; (80167a8 <rfalTransceiveTx+0x484>)
 80165ba:	8c1b      	ldrh	r3, [r3, #32]
 80165bc:	3307      	adds	r3, #7
 80165be:	08db      	lsrs	r3, r3, #3
 80165c0:	b299      	uxth	r1, r3
 80165c2:	4b79      	ldr	r3, [pc, #484]	; (80167a8 <rfalTransceiveTx+0x484>)
 80165c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80165c8:	f003 0301 	and.w	r3, r3, #1
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	bf0c      	ite	eq
 80165d0:	2301      	moveq	r3, #1
 80165d2:	2300      	movne	r3, #0
 80165d4:	b2dc      	uxtb	r4, r3
 80165d6:	4b74      	ldr	r3, [pc, #464]	; (80167a8 <rfalTransceiveTx+0x484>)
 80165d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80165dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	bf0c      	ite	eq
 80165e4:	2301      	moveq	r3, #1
 80165e6:	2300      	movne	r3, #0
 80165e8:	b2dd      	uxtb	r5, r3
 80165ea:	4b6f      	ldr	r3, [pc, #444]	; (80167a8 <rfalTransceiveTx+0x484>)
 80165ec:	785b      	ldrb	r3, [r3, #1]
 80165ee:	2b08      	cmp	r3, #8
 80165f0:	bf0c      	ite	eq
 80165f2:	2301      	moveq	r3, #1
 80165f4:	2300      	movne	r3, #0
 80165f6:	b2db      	uxtb	r3, r3
 80165f8:	1dba      	adds	r2, r7, #6
 80165fa:	9205      	str	r2, [sp, #20]
 80165fc:	89ba      	ldrh	r2, [r7, #12]
 80165fe:	9204      	str	r2, [sp, #16]
 8016600:	4a6a      	ldr	r2, [pc, #424]	; (80167ac <rfalTransceiveTx+0x488>)
 8016602:	9203      	str	r2, [sp, #12]
 8016604:	4a6a      	ldr	r2, [pc, #424]	; (80167b0 <rfalTransceiveTx+0x48c>)
 8016606:	9202      	str	r2, [sp, #8]
 8016608:	4a6a      	ldr	r2, [pc, #424]	; (80167b4 <rfalTransceiveTx+0x490>)
 801660a:	9201      	str	r2, [sp, #4]
 801660c:	9300      	str	r3, [sp, #0]
 801660e:	462b      	mov	r3, r5
 8016610:	4622      	mov	r2, r4
 8016612:	f7f6 fee7 	bl	800d3e4 <iso15693VCDCode>
 8016616:	4603      	mov	r3, r0
 8016618:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 801661a:	89fb      	ldrh	r3, [r7, #14]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d009      	beq.n	8016634 <rfalTransceiveTx+0x310>
 8016620:	89fb      	ldrh	r3, [r7, #14]
 8016622:	2b0d      	cmp	r3, #13
 8016624:	d006      	beq.n	8016634 <rfalTransceiveTx+0x310>
                {
                    gRFAL.TxRx.status = ret;
 8016626:	4a60      	ldr	r2, [pc, #384]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016628:	89fb      	ldrh	r3, [r7, #14]
 801662a:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 801662c:	4b5e      	ldr	r3, [pc, #376]	; (80167a8 <rfalTransceiveTx+0x484>)
 801662e:	2213      	movs	r2, #19
 8016630:	751a      	strb	r2, [r3, #20]
                    break;
 8016632:	e0b5      	b.n	80167a0 <rfalTransceiveTx+0x47c>
                }

                /* Load FIFO with coded bytes */
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)tmp );
 8016634:	88fb      	ldrh	r3, [r7, #6]
 8016636:	b2db      	uxtb	r3, r3
 8016638:	4619      	mov	r1, r3
 801663a:	485c      	ldr	r0, [pc, #368]	; (80167ac <rfalTransceiveTx+0x488>)
 801663c:	f7ed fb0a 	bl	8003c54 <st25r3911WriteFifo>
            {
 8016640:	e018      	b.n	8016674 <rfalTransceiveTx+0x350>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 8016642:	4b59      	ldr	r3, [pc, #356]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016644:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8016646:	461a      	mov	r2, r3
 8016648:	4b57      	ldr	r3, [pc, #348]	; (80167a8 <rfalTransceiveTx+0x484>)
 801664a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801664c:	4619      	mov	r1, r3
 801664e:	4b56      	ldr	r3, [pc, #344]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016650:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8016652:	1acb      	subs	r3, r1, r3
 8016654:	4293      	cmp	r3, r2
 8016656:	bfa8      	it	ge
 8016658:	4613      	movge	r3, r2
 801665a:	b29b      	uxth	r3, r3
 801665c:	80fb      	strh	r3, [r7, #6]
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], (uint8_t)tmp );
 801665e:	4b52      	ldr	r3, [pc, #328]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016660:	69db      	ldr	r3, [r3, #28]
 8016662:	4a51      	ldr	r2, [pc, #324]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016664:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8016666:	4413      	add	r3, r2
 8016668:	88fa      	ldrh	r2, [r7, #6]
 801666a:	b2d2      	uxtb	r2, r2
 801666c:	4611      	mov	r1, r2
 801666e:	4618      	mov	r0, r3
 8016670:	f7ed faf0 	bl	8003c54 <st25r3911WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 8016674:	4b4c      	ldr	r3, [pc, #304]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016676:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8016678:	88fb      	ldrh	r3, [r7, #6]
 801667a:	4413      	add	r3, r2
 801667c:	b29a      	uxth	r2, r3
 801667e:	4b4a      	ldr	r3, [pc, #296]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016680:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8016682:	4b49      	ldr	r3, [pc, #292]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016684:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8016686:	4b48      	ldr	r3, [pc, #288]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016688:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801668a:	429a      	cmp	r2, r3
 801668c:	d201      	bcs.n	8016692 <rfalTransceiveTx+0x36e>
 801668e:	220f      	movs	r2, #15
 8016690:	e000      	b.n	8016694 <rfalTransceiveTx+0x370>
 8016692:	2211      	movs	r2, #17
 8016694:	4b44      	ldr	r3, [pc, #272]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016696:	751a      	strb	r2, [r3, #20]
            break;
 8016698:	e082      	b.n	80167a0 <rfalTransceiveTx+0x47c>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );
 801669a:	2048      	movs	r0, #72	; 0x48
 801669c:	f7ed fd50 	bl	8004140 <st25r3911GetInterrupt>
 80166a0:	4603      	mov	r3, r0
 80166a2:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d077      	beq.n	801679a <rfalTransceiveTx+0x476>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3911_IRQ_MASK_TXE) != 0U )
 80166aa:	68bb      	ldr	r3, [r7, #8]
 80166ac:	f003 0308 	and.w	r3, r3, #8
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d021      	beq.n	80166f8 <rfalTransceiveTx+0x3d4>
            {
                /* In Active comm start SW timer to measure FWT */
                if( rfalIsModeActiveComm( gRFAL.mode) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) ) 
 80166b4:	4b3c      	ldr	r3, [pc, #240]	; (80167a8 <rfalTransceiveTx+0x484>)
 80166b6:	785b      	ldrb	r3, [r3, #1]
 80166b8:	2b09      	cmp	r3, #9
 80166ba:	d003      	beq.n	80166c4 <rfalTransceiveTx+0x3a0>
 80166bc:	4b3a      	ldr	r3, [pc, #232]	; (80167a8 <rfalTransceiveTx+0x484>)
 80166be:	785b      	ldrb	r3, [r3, #1]
 80166c0:	2b0d      	cmp	r3, #13
 80166c2:	d115      	bne.n	80166f0 <rfalTransceiveTx+0x3cc>
 80166c4:	4b38      	ldr	r3, [pc, #224]	; (80167a8 <rfalTransceiveTx+0x484>)
 80166c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166cc:	d010      	beq.n	80166f0 <rfalTransceiveTx+0x3cc>
 80166ce:	4b36      	ldr	r3, [pc, #216]	; (80167a8 <rfalTransceiveTx+0x484>)
 80166d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d00c      	beq.n	80166f0 <rfalTransceiveTx+0x3cc>
                {
                    rfalTimerStart( gRFAL.tmr.FWT, rfalConv1fcToMs( gRFAL.TxRx.ctx.fwt ) );
 80166d6:	4b34      	ldr	r3, [pc, #208]	; (80167a8 <rfalTransceiveTx+0x484>)
 80166d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166da:	4a37      	ldr	r2, [pc, #220]	; (80167b8 <rfalTransceiveTx+0x494>)
 80166dc:	fba2 2303 	umull	r2, r3, r2, r3
 80166e0:	0b1b      	lsrs	r3, r3, #12
 80166e2:	b29b      	uxth	r3, r3
 80166e4:	4618      	mov	r0, r3
 80166e6:	f7ed fdad 	bl	8004244 <timerCalculateTimer>
 80166ea:	4602      	mov	r2, r0
 80166ec:	4b2e      	ldr	r3, [pc, #184]	; (80167a8 <rfalTransceiveTx+0x484>)
 80166ee:	645a      	str	r2, [r3, #68]	; 0x44
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 80166f0:	4b2d      	ldr	r3, [pc, #180]	; (80167a8 <rfalTransceiveTx+0x484>)
 80166f2:	2212      	movs	r2, #18
 80166f4:	751a      	strb	r2, [r3, #20]
 80166f6:	e00b      	b.n	8016710 <rfalTransceiveTx+0x3ec>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_FWL) != 0U )
 80166f8:	68bb      	ldr	r3, [r7, #8]
 80166fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d14d      	bne.n	801679e <rfalTransceiveTx+0x47a>
                /*******************************************************************************/
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 8016702:	4b29      	ldr	r3, [pc, #164]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016704:	2203      	movs	r2, #3
 8016706:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8016708:	4b27      	ldr	r3, [pc, #156]	; (80167a8 <rfalTransceiveTx+0x484>)
 801670a:	2213      	movs	r2, #19
 801670c:	751a      	strb	r2, [r3, #20]
               break;
 801670e:	e047      	b.n	80167a0 <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 8016710:	4b25      	ldr	r3, [pc, #148]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016714:	2b00      	cmp	r3, #0
 8016716:	d110      	bne.n	801673a <rfalTransceiveTx+0x416>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 8016718:	4b23      	ldr	r3, [pc, #140]	; (80167a8 <rfalTransceiveTx+0x484>)
 801671a:	799b      	ldrb	r3, [r3, #6]
 801671c:	2b00      	cmp	r3, #0
 801671e:	d003      	beq.n	8016728 <rfalTransceiveTx+0x404>
 8016720:	2100      	movs	r1, #0
 8016722:	2001      	movs	r0, #1
 8016724:	f7ed f95e 	bl	80039e4 <st25r3911WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 8016728:	f7ff fd50 	bl	80161cc <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 801672c:	4b1e      	ldr	r3, [pc, #120]	; (80167a8 <rfalTransceiveTx+0x484>)
 801672e:	2200      	movs	r2, #0
 8016730:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 8016732:	4b1d      	ldr	r3, [pc, #116]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016734:	2200      	movs	r2, #0
 8016736:	751a      	strb	r2, [r3, #20]
                break;
 8016738:	e032      	b.n	80167a0 <rfalTransceiveTx+0x47c>
            }
            
            rfalCheckEnableObsModeRx();
 801673a:	4b1b      	ldr	r3, [pc, #108]	; (80167a8 <rfalTransceiveTx+0x484>)
 801673c:	799b      	ldrb	r3, [r3, #6]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d005      	beq.n	801674e <rfalTransceiveTx+0x42a>
 8016742:	4b19      	ldr	r3, [pc, #100]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016744:	799b      	ldrb	r3, [r3, #6]
 8016746:	4619      	mov	r1, r3
 8016748:	2001      	movs	r0, #1
 801674a:	f7ed f94b 	bl	80039e4 <st25r3911WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 801674e:	4b16      	ldr	r3, [pc, #88]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016750:	2251      	movs	r2, #81	; 0x51
 8016752:	751a      	strb	r2, [r3, #20]
            break;
 8016754:	e024      	b.n	80167a0 <rfalTransceiveTx+0x47c>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 8016756:	4b14      	ldr	r3, [pc, #80]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016758:	8adb      	ldrh	r3, [r3, #22]
 801675a:	2b02      	cmp	r3, #2
 801675c:	d102      	bne.n	8016764 <rfalTransceiveTx+0x440>
            {
                gRFAL.TxRx.status = ERR_SYSTEM;
 801675e:	4b12      	ldr	r3, [pc, #72]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016760:	2208      	movs	r2, #8
 8016762:	82da      	strh	r2, [r3, #22]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 8016764:	4b10      	ldr	r3, [pc, #64]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016766:	799b      	ldrb	r3, [r3, #6]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d003      	beq.n	8016774 <rfalTransceiveTx+0x450>
 801676c:	2100      	movs	r1, #0
 801676e:	2001      	movs	r0, #1
 8016770:	f7ed f938 	bl	80039e4 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 8016774:	f7ff fd2a 	bl	80161cc <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 8016778:	4b0b      	ldr	r3, [pc, #44]	; (80167a8 <rfalTransceiveTx+0x484>)
 801677a:	2200      	movs	r2, #0
 801677c:	751a      	strb	r2, [r3, #20]
            break;
 801677e:	e00f      	b.n	80167a0 <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 8016780:	4b09      	ldr	r3, [pc, #36]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016782:	2208      	movs	r2, #8
 8016784:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8016786:	4b08      	ldr	r3, [pc, #32]	; (80167a8 <rfalTransceiveTx+0x484>)
 8016788:	2213      	movs	r2, #19
 801678a:	751a      	strb	r2, [r3, #20]
            break;
 801678c:	e008      	b.n	80167a0 <rfalTransceiveTx+0x47c>
                break;
 801678e:	bf00      	nop
 8016790:	e006      	b.n	80167a0 <rfalTransceiveTx+0x47c>
                   break;
 8016792:	bf00      	nop
 8016794:	e004      	b.n	80167a0 <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 8016796:	bf00      	nop
 8016798:	e002      	b.n	80167a0 <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 801679a:	bf00      	nop
 801679c:	e000      	b.n	80167a0 <rfalTransceiveTx+0x47c>
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
 801679e:	bf00      	nop
    }
}
 80167a0:	bf00      	nop
 80167a2:	3710      	adds	r7, #16
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bdb0      	pop	{r4, r5, r7, pc}
 80167a8:	2000369c 	.word	0x2000369c
 80167ac:	2000385c 	.word	0x2000385c
 80167b0:	20003a64 	.word	0x20003a64
 80167b4:	200036d6 	.word	0x200036d6
 80167b8:	4d542005 	.word	0x4d542005

080167bc <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 80167bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167be:	b089      	sub	sp, #36	; 0x24
 80167c0:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint8_t           tmp;
    uint8_t           aux;
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 80167c2:	2300      	movs	r3, #0
 80167c4:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 80167c6:	4baa      	ldr	r3, [pc, #680]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80167c8:	7d1a      	ldrb	r2, [r3, #20]
 80167ca:	4ba9      	ldr	r3, [pc, #676]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80167cc:	7d5b      	ldrb	r3, [r3, #21]
 80167ce:	429a      	cmp	r2, r3
 80167d0:	d003      	beq.n	80167da <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 80167d2:	4ba7      	ldr	r3, [pc, #668]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80167d4:	7d1a      	ldrb	r2, [r3, #20]
 80167d6:	4ba6      	ldr	r3, [pc, #664]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80167d8:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 80167da:	4ba5      	ldr	r3, [pc, #660]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80167dc:	7d1b      	ldrb	r3, [r3, #20]
 80167de:	3b51      	subs	r3, #81	; 0x51
 80167e0:	2b09      	cmp	r3, #9
 80167e2:	f200 831c 	bhi.w	8016e1e <rfalTransceiveRx+0x662>
 80167e6:	a201      	add	r2, pc, #4	; (adr r2, 80167ec <rfalTransceiveRx+0x30>)
 80167e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167ec:	08016815 	.word	0x08016815
 80167f0:	08016d9b 	.word	0x08016d9b
 80167f4:	0801684d 	.word	0x0801684d
 80167f8:	08016959 	.word	0x08016959
 80167fc:	08016cd9 	.word	0x08016cd9
 8016800:	080169ad 	.word	0x080169ad
 8016804:	08016ac3 	.word	0x08016ac3
 8016808:	08016dd5 	.word	0x08016dd5
 801680c:	08016cb3 	.word	0x08016cb3
 8016810:	08016d71 	.word	0x08016d71
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;    // Total bytes written on RxBuffer
 8016814:	4b96      	ldr	r3, [pc, #600]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016816:	2200      	movs	r2, #0
 8016818:	879a      	strh	r2, [r3, #60]	; 0x3c
            gRFAL.fifo.bytesTotal     = 0;    // Total bytes in FIFO will now be from Rx
 801681a:	4b95      	ldr	r3, [pc, #596]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 801681c:	2200      	movs	r2, #0
 801681e:	875a      	strh	r2, [r3, #58]	; 0x3a
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 8016820:	4b93      	ldr	r3, [pc, #588]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016824:	2b00      	cmp	r3, #0
 8016826:	d003      	beq.n	8016830 <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 8016828:	4b91      	ldr	r3, [pc, #580]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 801682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801682c:	2200      	movs	r2, #0
 801682e:	801a      	strh	r2, [r3, #0]
            }
            
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 8016830:	4b8f      	ldr	r3, [pc, #572]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016832:	785b      	ldrb	r3, [r3, #1]
 8016834:	2b09      	cmp	r3, #9
 8016836:	d003      	beq.n	8016840 <rfalTransceiveRx+0x84>
 8016838:	4b8d      	ldr	r3, [pc, #564]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 801683a:	785b      	ldrb	r3, [r3, #1]
 801683c:	2b0d      	cmp	r3, #13
 801683e:	d101      	bne.n	8016844 <rfalTransceiveRx+0x88>
 8016840:	2252      	movs	r2, #82	; 0x52
 8016842:	e000      	b.n	8016846 <rfalTransceiveRx+0x8a>
 8016844:	2253      	movs	r2, #83	; 0x53
 8016846:	4b8a      	ldr	r3, [pc, #552]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016848:	751a      	strb	r2, [r3, #20]
            break;
 801684a:	e2f8      	b.n	8016e3e <rfalTransceiveRx+0x682>
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
        
            /*******************************************************************************/
            /* If in Active comm, Check if FWT SW timer has expired */
            if( rfalIsModeActiveComm( gRFAL.mode ) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 801684c:	4b88      	ldr	r3, [pc, #544]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 801684e:	785b      	ldrb	r3, [r3, #1]
 8016850:	2b09      	cmp	r3, #9
 8016852:	d003      	beq.n	801685c <rfalTransceiveRx+0xa0>
 8016854:	4b86      	ldr	r3, [pc, #536]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016856:	785b      	ldrb	r3, [r3, #1]
 8016858:	2b0d      	cmp	r3, #13
 801685a:	d117      	bne.n	801688c <rfalTransceiveRx+0xd0>
 801685c:	4b84      	ldr	r3, [pc, #528]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 801685e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016864:	d012      	beq.n	801688c <rfalTransceiveRx+0xd0>
 8016866:	4b82      	ldr	r3, [pc, #520]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801686a:	2b00      	cmp	r3, #0
 801686c:	d00e      	beq.n	801688c <rfalTransceiveRx+0xd0>
            {
                if( rfalTimerisExpired( gRFAL.tmr.FWT ) )  
 801686e:	4b80      	ldr	r3, [pc, #512]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016872:	4618      	mov	r0, r3
 8016874:	f7ed fcf4 	bl	8004260 <timerIsExpired>
 8016878:	4603      	mov	r3, r0
 801687a:	2b00      	cmp	r3, #0
 801687c:	d006      	beq.n	801688c <rfalTransceiveRx+0xd0>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 801687e:	4b7c      	ldr	r3, [pc, #496]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016880:	2204      	movs	r2, #4
 8016882:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016884:	4b7a      	ldr	r3, [pc, #488]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016886:	225a      	movs	r2, #90	; 0x5a
 8016888:	751a      	strb	r2, [r3, #20]
                    break;
 801688a:	e2d8      	b.n	8016e3e <rfalTransceiveRx+0x682>
                }
            }
            
            /*******************************************************************************/
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_RXS | ST25R3911_IRQ_MASK_NRE | ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_RXE) );
 801688c:	f644 0030 	movw	r0, #18480	; 0x4830
 8016890:	f7ed fc56 	bl	8004140 <st25r3911GetInterrupt>
 8016894:	4603      	mov	r3, r0
 8016896:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8016898:	68bb      	ldr	r3, [r7, #8]
 801689a:	2b00      	cmp	r3, #0
 801689c:	f000 82c6 	beq.w	8016e2c <rfalTransceiveRx+0x670>
            /* NRE interrupt may be triggered twice                                        */
            /* Ignore NRE if is detected together with no Rx Start                         */
            /*******************************************************************************/
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode)       */
            if( ((irqs & ST25R3911_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 80168a0:	68bb      	ldr	r3, [r7, #8]
 80168a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d00b      	beq.n	80168c2 <rfalTransceiveRx+0x106>
 80168aa:	68bb      	ldr	r3, [r7, #8]
 80168ac:	f003 0320 	and.w	r3, r3, #32
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d106      	bne.n	80168c2 <rfalTransceiveRx+0x106>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 80168b4:	4b6e      	ldr	r3, [pc, #440]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80168b6:	2204      	movs	r2, #4
 80168b8:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80168ba:	4b6d      	ldr	r3, [pc, #436]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80168bc:	225a      	movs	r2, #90	; 0x5a
 80168be:	751a      	strb	r2, [r3, #20]
                break;
 80168c0:	e2bd      	b.n	8016e3e <rfalTransceiveRx+0x682>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 80168c2:	68bb      	ldr	r3, [r7, #8]
 80168c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d015      	beq.n	80168f8 <rfalTransceiveRx+0x13c>
 80168cc:	68bb      	ldr	r3, [r7, #8]
 80168ce:	f003 0320 	and.w	r3, r3, #32
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d110      	bne.n	80168f8 <rfalTransceiveRx+0x13c>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 80168d6:	4b66      	ldr	r3, [pc, #408]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80168d8:	785b      	ldrb	r3, [r3, #1]
 80168da:	2b09      	cmp	r3, #9
 80168dc:	d003      	beq.n	80168e6 <rfalTransceiveRx+0x12a>
 80168de:	4b64      	ldr	r3, [pc, #400]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80168e0:	785b      	ldrb	r3, [r3, #1]
 80168e2:	2b0d      	cmp	r3, #13
 80168e4:	d101      	bne.n	80168ea <rfalTransceiveRx+0x12e>
 80168e6:	2204      	movs	r2, #4
 80168e8:	e000      	b.n	80168ec <rfalTransceiveRx+0x130>
 80168ea:	2225      	movs	r2, #37	; 0x25
 80168ec:	4b60      	ldr	r3, [pc, #384]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80168ee:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80168f0:	4b5f      	ldr	r3, [pc, #380]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80168f2:	225a      	movs	r2, #90	; 0x5a
 80168f4:	751a      	strb	r2, [r3, #20]
                break;
 80168f6:	e2a2      	b.n	8016e3e <rfalTransceiveRx+0x682>
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_RXS) != 0U )
 80168f8:	68bb      	ldr	r3, [r7, #8]
 80168fa:	f003 0320 	and.w	r3, r3, #32
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d015      	beq.n	801692e <rfalTransceiveRx+0x172>
            {
                /* If we got RXS + RXE together, jump directly into RFAL_TXRX_STATE_RX_ERR_CHECK */
                if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 8016902:	68bb      	ldr	r3, [r7, #8]
 8016904:	f003 0310 	and.w	r3, r3, #16
 8016908:	2b00      	cmp	r3, #0
 801690a:	d006      	beq.n	801691a <rfalTransceiveRx+0x15e>
                {
                    gRFAL.TxRx.rxse  = true;
 801690c:	4b58      	ldr	r3, [pc, #352]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 801690e:	2201      	movs	r2, #1
 8016910:	761a      	strb	r2, [r3, #24]
                    gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 8016912:	4b57      	ldr	r3, [pc, #348]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016914:	2256      	movs	r2, #86	; 0x56
 8016916:	751a      	strb	r2, [r3, #20]
                    break;
 8016918:	e291      	b.n	8016e3e <rfalTransceiveRx+0x682>
                {
                    /*******************************************************************************/
                    /* REMARK: Silicon workaround ST25R3911 Errata #1.1                            */
                    /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                    /* Use a SW timer to handle an eventual missing RXE                            */
                    rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 801691a:	200a      	movs	r0, #10
 801691c:	f7ed fc92 	bl	8004244 <timerCalculateTimer>
 8016920:	4602      	mov	r2, r0
 8016922:	4b53      	ldr	r3, [pc, #332]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016924:	649a      	str	r2, [r3, #72]	; 0x48
                    /*******************************************************************************/
                    
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8016926:	4b52      	ldr	r3, [pc, #328]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016928:	2254      	movs	r2, #84	; 0x54
 801692a:	751a      	strb	r2, [r3, #20]
 801692c:	e014      	b.n	8016958 <rfalTransceiveRx+0x19c>
                }
            }
            else if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 801692e:	68bb      	ldr	r3, [r7, #8]
 8016930:	f003 0310 	and.w	r3, r3, #16
 8016934:	2b00      	cmp	r3, #0
 8016936:	d008      	beq.n	801694a <rfalTransceiveRx+0x18e>
                /* REMARK: Silicon workaround ST25R3911 Errata #1.9                            */
                /* ST25R3911 may indicate RXE without RXS previously, this happens upon some   */
                /* noise or incomplete byte frames with less than 4 bits                       */
                /*******************************************************************************/
                
                gRFAL.TxRx.status = ERR_IO;
 8016938:	4b4d      	ldr	r3, [pc, #308]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 801693a:	2203      	movs	r2, #3
 801693c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801693e:	4b4c      	ldr	r3, [pc, #304]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016940:	225a      	movs	r2, #90	; 0x5a
 8016942:	751a      	strb	r2, [r3, #20]
                
                rfalErrorHandling();
 8016944:	f7ff fbbc 	bl	80160c0 <rfalErrorHandling>
                break;
 8016948:	e279      	b.n	8016e3e <rfalTransceiveRx+0x682>
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 801694a:	4b49      	ldr	r3, [pc, #292]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 801694c:	2203      	movs	r2, #3
 801694e:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016950:	4b47      	ldr	r3, [pc, #284]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016952:	225a      	movs	r2, #90	; 0x5a
 8016954:	751a      	strb	r2, [r3, #20]
               break;
 8016956:	e272      	b.n	8016e3e <rfalTransceiveRx+0x682>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_RXE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_EOF) );
 8016958:	f44f 6005 	mov.w	r0, #2128	; 0x850
 801695c:	f7ed fbf0 	bl	8004140 <st25r3911GetInterrupt>
 8016960:	4603      	mov	r3, r0
 8016962:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8016964:	68bb      	ldr	r3, [r7, #8]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d10f      	bne.n	801698a <rfalTransceiveRx+0x1ce>
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
                /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
                /* corrupted frames.                                                           */
                /* SW timer is used to timeout upon a missing RXE                              */
                if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 801696a:	4b41      	ldr	r3, [pc, #260]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 801696c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801696e:	4618      	mov	r0, r3
 8016970:	f7ed fc76 	bl	8004260 <timerIsExpired>
 8016974:	4603      	mov	r3, r0
 8016976:	2b00      	cmp	r3, #0
 8016978:	f000 825a 	beq.w	8016e30 <rfalTransceiveRx+0x674>
                {
                    gRFAL.TxRx.status = ERR_FRAMING;
 801697c:	4b3c      	ldr	r3, [pc, #240]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 801697e:	2209      	movs	r2, #9
 8016980:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016982:	4b3b      	ldr	r3, [pc, #236]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016984:	225a      	movs	r2, #90	; 0x5a
 8016986:	751a      	strb	r2, [r3, #20]
                }
                /*******************************************************************************/
                    
                break;  /* No interrupt to process */
 8016988:	e252      	b.n	8016e30 <rfalTransceiveRx+0x674>
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 801698a:	68bb      	ldr	r3, [r7, #8]
 801698c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016990:	2b00      	cmp	r3, #0
 8016992:	d008      	beq.n	80169a6 <rfalTransceiveRx+0x1ea>
 8016994:	68bb      	ldr	r3, [r7, #8]
 8016996:	f003 0310 	and.w	r3, r3, #16
 801699a:	2b00      	cmp	r3, #0
 801699c:	d103      	bne.n	80169a6 <rfalTransceiveRx+0x1ea>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 801699e:	4b34      	ldr	r3, [pc, #208]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80169a0:	2255      	movs	r2, #85	; 0x55
 80169a2:	751a      	strb	r2, [r3, #20]
                break;
 80169a4:	e24b      	b.n	8016e3e <rfalTransceiveRx+0x682>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 80169a6:	4b32      	ldr	r3, [pc, #200]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80169a8:	2256      	movs	r2, #86	; 0x56
 80169aa:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
        
            /* Retrieve and check for any error irqs */
            irqs |= st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_ERR1 | ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_COL) );
 80169ac:	4831      	ldr	r0, [pc, #196]	; (8016a74 <rfalTransceiveRx+0x2b8>)
 80169ae:	f7ed fbc7 	bl	8004140 <st25r3911GetInterrupt>
 80169b2:	4602      	mov	r2, r0
 80169b4:	68bb      	ldr	r3, [r7, #8]
 80169b6:	4313      	orrs	r3, r2
 80169b8:	60bb      	str	r3, [r7, #8]
        
            if( (irqs & ST25R3911_IRQ_MASK_ERR1) != 0U )
 80169ba:	68bb      	ldr	r3, [r7, #8]
 80169bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d008      	beq.n	80169d6 <rfalTransceiveRx+0x21a>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 80169c4:	4b2a      	ldr	r3, [pc, #168]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80169c6:	2209      	movs	r2, #9
 80169c8:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 80169ca:	4b29      	ldr	r3, [pc, #164]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80169cc:	2257      	movs	r2, #87	; 0x57
 80169ce:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 80169d0:	f7ff fb76 	bl	80160c0 <rfalErrorHandling>
                break;
 80169d4:	e233      	b.n	8016e3e <rfalTransceiveRx+0x682>
            }
            /* Discard Soft Framing errors if not in EMVCo error handling */
            else if( ((irqs & ST25R3911_IRQ_MASK_ERR2) != 0U) && (gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO) )
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d00c      	beq.n	80169fa <rfalTransceiveRx+0x23e>
 80169e0:	4b23      	ldr	r3, [pc, #140]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80169e2:	79db      	ldrb	r3, [r3, #7]
 80169e4:	2b02      	cmp	r3, #2
 80169e6:	d108      	bne.n	80169fa <rfalTransceiveRx+0x23e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 80169e8:	4b21      	ldr	r3, [pc, #132]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80169ea:	2209      	movs	r2, #9
 80169ec:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 80169ee:	4b20      	ldr	r3, [pc, #128]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 80169f0:	2257      	movs	r2, #87	; 0x57
 80169f2:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 80169f4:	f7ff fb64 	bl	80160c0 <rfalErrorHandling>
                break;
 80169f8:	e221      	b.n	8016e3e <rfalTransceiveRx+0x682>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_PAR) != 0U )
 80169fa:	68bb      	ldr	r3, [r7, #8]
 80169fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d008      	beq.n	8016a16 <rfalTransceiveRx+0x25a>
            {
                gRFAL.TxRx.status = ERR_PAR;
 8016a04:	4b1a      	ldr	r3, [pc, #104]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016a06:	221b      	movs	r2, #27
 8016a08:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8016a0a:	4b19      	ldr	r3, [pc, #100]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016a0c:	2257      	movs	r2, #87	; 0x57
 8016a0e:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8016a10:	f7ff fb56 	bl	80160c0 <rfalErrorHandling>
                break;
 8016a14:	e213      	b.n	8016e3e <rfalTransceiveRx+0x682>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_CRC) != 0U )
 8016a16:	68bb      	ldr	r3, [r7, #8]
 8016a18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d008      	beq.n	8016a32 <rfalTransceiveRx+0x276>
            {
                gRFAL.TxRx.status = ERR_CRC;
 8016a20:	4b13      	ldr	r3, [pc, #76]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016a22:	2215      	movs	r2, #21
 8016a24:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8016a26:	4b12      	ldr	r3, [pc, #72]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016a28:	2257      	movs	r2, #87	; 0x57
 8016a2a:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8016a2c:	f7ff fb48 	bl	80160c0 <rfalErrorHandling>
                break;
 8016a30:	e205      	b.n	8016e3e <rfalTransceiveRx+0x682>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_COL) != 0U )
 8016a32:	68bb      	ldr	r3, [r7, #8]
 8016a34:	f003 0304 	and.w	r3, r3, #4
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d008      	beq.n	8016a4e <rfalTransceiveRx+0x292>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 8016a3c:	4b0c      	ldr	r3, [pc, #48]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016a3e:	221d      	movs	r2, #29
 8016a40:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8016a42:	4b0b      	ldr	r3, [pc, #44]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016a44:	2257      	movs	r2, #87	; 0x57
 8016a46:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8016a48:	f7ff fb3a 	bl	80160c0 <rfalErrorHandling>
                break;
 8016a4c:	e1f7      	b.n	8016e3e <rfalTransceiveRx+0x682>
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 8016a4e:	68bb      	ldr	r3, [r7, #8]
 8016a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d00f      	beq.n	8016a78 <rfalTransceiveRx+0x2bc>
 8016a58:	68bb      	ldr	r3, [r7, #8]
 8016a5a:	f003 0310 	and.w	r3, r3, #16
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d10a      	bne.n	8016a78 <rfalTransceiveRx+0x2bc>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 8016a62:	4b03      	ldr	r3, [pc, #12]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016a64:	2225      	movs	r2, #37	; 0x25
 8016a66:	82da      	strh	r2, [r3, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016a68:	4b01      	ldr	r3, [pc, #4]	; (8016a70 <rfalTransceiveRx+0x2b4>)
 8016a6a:	225a      	movs	r2, #90	; 0x5a
 8016a6c:	751a      	strb	r2, [r3, #20]
                 break;
 8016a6e:	e1e6      	b.n	8016e3e <rfalTransceiveRx+0x682>
 8016a70:	2000369c 	.word	0x2000369c
 8016a74:	00f00004 	.word	0x00f00004
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_RXE) != 0U) || (gRFAL.TxRx.rxse) )
 8016a78:	68bb      	ldr	r3, [r7, #8]
 8016a7a:	f003 0310 	and.w	r3, r3, #16
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d103      	bne.n	8016a8a <rfalTransceiveRx+0x2ce>
 8016a82:	4b94      	ldr	r3, [pc, #592]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016a84:	7e1b      	ldrb	r3, [r3, #24]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d014      	beq.n	8016ab4 <rfalTransceiveRx+0x2f8>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 8016a8a:	f000 fa09 	bl	8016ea0 <rfalFIFOStatusIsIncompleteByte>
 8016a8e:	4603      	mov	r3, r0
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d003      	beq.n	8016a9c <rfalTransceiveRx+0x2e0>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 8016a94:	4b8f      	ldr	r3, [pc, #572]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016a96:	2228      	movs	r2, #40	; 0x28
 8016a98:	82da      	strh	r2, [r3, #22]
 8016a9a:	e007      	b.n	8016aac <rfalTransceiveRx+0x2f0>
                }
                /* Check if the reception ends with missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 8016a9c:	f000 fa12 	bl	8016ec4 <rfalFIFOStatusIsMissingPar>
 8016aa0:	4603      	mov	r3, r0
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d002      	beq.n	8016aac <rfalTransceiveRx+0x2f0>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 8016aa6:	4b8b      	ldr	r3, [pc, #556]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016aa8:	2209      	movs	r2, #9
 8016aaa:	82da      	strh	r2, [r3, #22]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 8016aac:	4b89      	ldr	r3, [pc, #548]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016aae:	2257      	movs	r2, #87	; 0x57
 8016ab0:	751a      	strb	r2, [r3, #20]
 8016ab2:	e006      	b.n	8016ac2 <rfalTransceiveRx+0x306>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 8016ab4:	4b87      	ldr	r3, [pc, #540]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016ab6:	2203      	movs	r2, #3
 8016ab8:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016aba:	4b86      	ldr	r3, [pc, #536]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016abc:	225a      	movs	r2, #90	; 0x5a
 8016abe:	751a      	strb	r2, [r3, #20]
                break;
 8016ac0:	e1bd      	b.n	8016e3e <rfalTransceiveRx+0x682>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                        
            tmp = rfalFIFOStatusGetNumBytes();
 8016ac2:	f000 f9e1 	bl	8016e88 <rfalFIFOStatusGetNumBytes>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	73fb      	strb	r3, [r7, #15]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 8016aca:	4b82      	ldr	r3, [pc, #520]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ace:	f003 0302 	and.w	r3, r3, #2
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d11f      	bne.n	8016b16 <rfalTransceiveRx+0x35a>
            {
                /* Check if CRC is being placed into the FIFO and if received frame was bigger than CRC */
                if( st25r3911IsCRCinFIFO() && ((gRFAL.fifo.bytesTotal + tmp) > 0U) )
 8016ad6:	2240      	movs	r2, #64	; 0x40
 8016ad8:	2140      	movs	r1, #64	; 0x40
 8016ada:	2009      	movs	r0, #9
 8016adc:	f7ec fc9c 	bl	8003418 <st25r3911CheckReg>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d017      	beq.n	8016b16 <rfalTransceiveRx+0x35a>
 8016ae6:	4b7b      	ldr	r3, [pc, #492]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016ae8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8016aea:	461a      	mov	r2, r3
 8016aec:	7bfb      	ldrb	r3, [r7, #15]
 8016aee:	4413      	add	r3, r2
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d010      	beq.n	8016b16 <rfalTransceiveRx+0x35a>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > (uint8_t)RFAL_CRC_LEN) )  
 8016af4:	7bfb      	ldrb	r3, [r7, #15]
 8016af6:	2b02      	cmp	r3, #2
 8016af8:	d903      	bls.n	8016b02 <rfalTransceiveRx+0x346>
                    {
                        tmp -= (uint8_t)RFAL_CRC_LEN;
 8016afa:	7bfb      	ldrb	r3, [r7, #15]
 8016afc:	3b02      	subs	r3, #2
 8016afe:	73fb      	strb	r3, [r7, #15]
 8016b00:	e009      	b.n	8016b16 <rfalTransceiveRx+0x35a>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > (uint16_t)RFAL_CRC_LEN)                       
 8016b02:	4b74      	ldr	r3, [pc, #464]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b04:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8016b06:	2b02      	cmp	r3, #2
 8016b08:	d905      	bls.n	8016b16 <rfalTransceiveRx+0x35a>
                    {                        
                        gRFAL.fifo.bytesTotal -= (uint16_t)RFAL_CRC_LEN;
 8016b0a:	4b72      	ldr	r3, [pc, #456]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b0c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8016b0e:	3b02      	subs	r3, #2
 8016b10:	b29a      	uxth	r2, r3
 8016b12:	4b70      	ldr	r3, [pc, #448]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b14:	875a      	strh	r2, [r3, #58]	; 0x3a
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 8016b16:	4b6f      	ldr	r3, [pc, #444]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b18:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8016b1a:	7bfb      	ldrb	r3, [r7, #15]
 8016b1c:	b29b      	uxth	r3, r3
 8016b1e:	4413      	add	r3, r2
 8016b20:	b29a      	uxth	r2, r3
 8016b22:	4b6c      	ldr	r3, [pc, #432]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b24:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 8016b26:	4b6b      	ldr	r3, [pc, #428]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b28:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8016b2a:	4b6a      	ldr	r3, [pc, #424]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b2e:	3307      	adds	r3, #7
 8016b30:	08db      	lsrs	r3, r3, #3
 8016b32:	b29b      	uxth	r3, r3
 8016b34:	429a      	cmp	r2, r3
 8016b36:	d90f      	bls.n	8016b58 <rfalTransceiveRx+0x39c>
            {
                tmp = (uint8_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 8016b38:	4b66      	ldr	r3, [pc, #408]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b3c:	3307      	adds	r3, #7
 8016b3e:	08db      	lsrs	r3, r3, #3
 8016b40:	b2da      	uxtb	r2, r3
 8016b42:	4b64      	ldr	r3, [pc, #400]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b44:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8016b46:	b2db      	uxtb	r3, r3
 8016b48:	1ad3      	subs	r3, r2, r3
 8016b4a:	73fb      	strb	r3, [r7, #15]
                
                gRFAL.TxRx.status = ERR_NOMEM;
 8016b4c:	4b61      	ldr	r3, [pc, #388]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b4e:	2201      	movs	r2, #1
 8016b50:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016b52:	4b60      	ldr	r3, [pc, #384]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b54:	225a      	movs	r2, #90	; 0x5a
 8016b56:	751a      	strb	r2, [r3, #20]
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 8016b58:	4b5e      	ldr	r3, [pc, #376]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b5c:	4a5d      	ldr	r2, [pc, #372]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b5e:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8016b60:	4413      	add	r3, r2
 8016b62:	7bfa      	ldrb	r2, [r7, #15]
 8016b64:	4611      	mov	r1, r2
 8016b66:	4618      	mov	r0, r3
 8016b68:	f7ed f8bc 	bl	8003ce4 <st25r3911ReadFifo>
            if( (gRFAL.TxRx.ctx.rxRcvdLen != NULL) )
 8016b6c:	4b59      	ldr	r3, [pc, #356]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d019      	beq.n	8016ba8 <rfalTransceiveRx+0x3ec>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 8016b74:	4b57      	ldr	r3, [pc, #348]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b76:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8016b78:	4b56      	ldr	r3, [pc, #344]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b7c:	00d2      	lsls	r2, r2, #3
 8016b7e:	b292      	uxth	r2, r2
 8016b80:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 8016b82:	f000 f98d 	bl	8016ea0 <rfalFIFOStatusIsIncompleteByte>
 8016b86:	4603      	mov	r3, r0
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d00d      	beq.n	8016ba8 <rfalTransceiveRx+0x3ec>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 8016b8c:	f000 f9ac 	bl	8016ee8 <rfalFIFOGetNumIncompleteBits>
 8016b90:	4603      	mov	r3, r0
 8016b92:	f1c3 0208 	rsb	r2, r3, #8
 8016b96:	4b4f      	ldr	r3, [pc, #316]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b9a:	8819      	ldrh	r1, [r3, #0]
 8016b9c:	b292      	uxth	r2, r2
 8016b9e:	4b4d      	ldr	r3, [pc, #308]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ba2:	1a8a      	subs	r2, r1, r2
 8016ba4:	b292      	uxth	r2, r2
 8016ba6:	801a      	strh	r2, [r3, #0]
            }
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 8016ba8:	4b4a      	ldr	r3, [pc, #296]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016baa:	785b      	ldrb	r3, [r3, #1]
 8016bac:	2b07      	cmp	r3, #7
 8016bae:	d003      	beq.n	8016bb8 <rfalTransceiveRx+0x3fc>
 8016bb0:	4b48      	ldr	r3, [pc, #288]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016bb2:	785b      	ldrb	r3, [r3, #1]
 8016bb4:	2b08      	cmp	r3, #8
 8016bb6:	d165      	bne.n	8016c84 <rfalTransceiveRx+0x4c8>
 8016bb8:	4b46      	ldr	r3, [pc, #280]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016bba:	8adb      	ldrh	r3, [r3, #22]
 8016bbc:	2b02      	cmp	r3, #2
 8016bbe:	d161      	bne.n	8016c84 <rfalTransceiveRx+0x4c8>
            {
                ReturnCode ret;
                uint16_t offset = 0;
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	80fb      	strh	r3, [r7, #6]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8016bc4:	4b43      	ldr	r3, [pc, #268]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016bc6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016bc8:	4b42      	ldr	r3, [pc, #264]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016bca:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
 8016bcc:	4b41      	ldr	r3, [pc, #260]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016bce:	f8d3 53d4 	ldr.w	r5, [r3, #980]	; 0x3d4
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 8016bd2:	4b40      	ldr	r3, [pc, #256]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016bd4:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8016bd8:	3307      	adds	r3, #7
 8016bda:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8016bdc:	b29e      	uxth	r6, r3
 8016bde:	4b3d      	ldr	r3, [pc, #244]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016be0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8016be4:	4a3b      	ldr	r2, [pc, #236]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016be6:	f8b2 23e8 	ldrh.w	r2, [r2, #1000]	; 0x3e8
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 8016bea:	493a      	ldr	r1, [pc, #232]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016bec:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8016bee:	2908      	cmp	r1, #8
 8016bf0:	bf0c      	ite	eq
 8016bf2:	2101      	moveq	r1, #1
 8016bf4:	2100      	movne	r1, #0
 8016bf6:	b2c9      	uxtb	r1, r1
 8016bf8:	9103      	str	r1, [sp, #12]
 8016bfa:	9202      	str	r2, [sp, #8]
 8016bfc:	9301      	str	r3, [sp, #4]
 8016bfe:	1dbb      	adds	r3, r7, #6
 8016c00:	9300      	str	r3, [sp, #0]
 8016c02:	4633      	mov	r3, r6
 8016c04:	462a      	mov	r2, r5
 8016c06:	4621      	mov	r1, r4
 8016c08:	f7f6 fd62 	bl	800d6d0 <iso15693VICCDecode>
 8016c0c:	4603      	mov	r3, r0
 8016c0e:	81bb      	strh	r3, [r7, #12]

                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 8016c10:	89bb      	ldrh	r3, [r7, #12]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d002      	beq.n	8016c1c <rfalTransceiveRx+0x460>
 8016c16:	89bb      	ldrh	r3, [r7, #12]
 8016c18:	2b15      	cmp	r3, #21
 8016c1a:	d11f      	bne.n	8016c5c <rfalTransceiveRx+0x4a0>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 8016c1c:	4b2d      	ldr	r3, [pc, #180]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016c1e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016c22:	f003 0302 	and.w	r3, r3, #2
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d118      	bne.n	8016c5c <rfalTransceiveRx+0x4a0>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 8016c2a:	4b2a      	ldr	r3, [pc, #168]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016c2c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8016c30:	881b      	ldrh	r3, [r3, #0]
 8016c32:	f003 0307 	and.w	r3, r3, #7
 8016c36:	b29b      	uxth	r3, r3
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d10f      	bne.n	8016c5c <rfalTransceiveRx+0x4a0>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 8016c3c:	4b25      	ldr	r3, [pc, #148]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016c3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8016c42:	881b      	ldrh	r3, [r3, #0]
 8016c44:	2b0f      	cmp	r3, #15
 8016c46:	d909      	bls.n	8016c5c <rfalTransceiveRx+0x4a0>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 8016c48:	4b22      	ldr	r3, [pc, #136]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016c4a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8016c4e:	881a      	ldrh	r2, [r3, #0]
 8016c50:	4b20      	ldr	r3, [pc, #128]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016c52:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8016c56:	3a10      	subs	r2, #16
 8016c58:	b292      	uxth	r2, r2
 8016c5a:	801a      	strh	r2, [r3, #0]
                }
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 8016c5c:	4a1d      	ldr	r2, [pc, #116]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016c5e:	4b1d      	ldr	r3, [pc, #116]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016c60:	f102 041c 	add.w	r4, r2, #28
 8016c64:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8016c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016c6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016c70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 8016c74:	89bb      	ldrh	r3, [r7, #12]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d001      	beq.n	8016c7e <rfalTransceiveRx+0x4c2>
 8016c7a:	89bb      	ldrh	r3, [r7, #12]
 8016c7c:	e000      	b.n	8016c80 <rfalTransceiveRx+0x4c4>
 8016c7e:	2302      	movs	r3, #2
 8016c80:	4a14      	ldr	r2, [pc, #80]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016c82:	82d3      	strh	r3, [r2, #22]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 8016c84:	4b13      	ldr	r3, [pc, #76]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016c86:	8adb      	ldrh	r3, [r3, #22]
 8016c88:	2b02      	cmp	r3, #2
 8016c8a:	d003      	beq.n	8016c94 <rfalTransceiveRx+0x4d8>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 8016c8c:	4b11      	ldr	r3, [pc, #68]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016c8e:	225a      	movs	r2, #90	; 0x5a
 8016c90:	751a      	strb	r2, [r3, #20]
                break;
 8016c92:	e0d4      	b.n	8016e3e <rfalTransceiveRx+0x682>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 8016c94:	4b0f      	ldr	r3, [pc, #60]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016c96:	785b      	ldrb	r3, [r3, #1]
 8016c98:	2b09      	cmp	r3, #9
 8016c9a:	d003      	beq.n	8016ca4 <rfalTransceiveRx+0x4e8>
 8016c9c:	4b0d      	ldr	r3, [pc, #52]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016c9e:	785b      	ldrb	r3, [r3, #1]
 8016ca0:	2b0d      	cmp	r3, #13
 8016ca2:	d103      	bne.n	8016cac <rfalTransceiveRx+0x4f0>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 8016ca4:	4b0b      	ldr	r3, [pc, #44]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016ca6:	2258      	movs	r2, #88	; 0x58
 8016ca8:	751a      	strb	r2, [r3, #20]
                break;
 8016caa:	e0c8      	b.n	8016e3e <rfalTransceiveRx+0x682>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 8016cac:	4b09      	ldr	r3, [pc, #36]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016cae:	2259      	movs	r2, #89	; 0x59
 8016cb0:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 8016cb2:	4b08      	ldr	r3, [pc, #32]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016cb4:	799b      	ldrb	r3, [r3, #6]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d003      	beq.n	8016cc2 <rfalTransceiveRx+0x506>
 8016cba:	2100      	movs	r1, #0
 8016cbc:	2001      	movs	r0, #1
 8016cbe:	f7ec fe91 	bl	80039e4 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 8016cc2:	f7ff fa83 	bl	80161cc <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 8016cc6:	4b03      	ldr	r3, [pc, #12]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016cc8:	2200      	movs	r2, #0
 8016cca:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 8016ccc:	4b01      	ldr	r3, [pc, #4]	; (8016cd4 <rfalTransceiveRx+0x518>)
 8016cce:	2200      	movs	r2, #0
 8016cd0:	751a      	strb	r2, [r3, #20]
            break;
 8016cd2:	e0b4      	b.n	8016e3e <rfalTransceiveRx+0x682>
 8016cd4:	2000369c 	.word	0x2000369c
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
            /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
            /* corrupted frames.                                                           */
            /* Re-Start SW timer to handle an eventual missing RXE                         */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 8016cd8:	200a      	movs	r0, #10
 8016cda:	f7ed fab3 	bl	8004244 <timerCalculateTimer>
 8016cde:	4602      	mov	r2, r0
 8016ce0:	4b59      	ldr	r3, [pc, #356]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016ce2:	649a      	str	r2, [r3, #72]	; 0x48
            /*******************************************************************************/        
                    
        
            tmp = rfalFIFOStatusGetNumBytes();
 8016ce4:	f000 f8d0 	bl	8016e88 <rfalFIFOStatusGetNumBytes>
 8016ce8:	4603      	mov	r3, r0
 8016cea:	73fb      	strb	r3, [r7, #15]
            gRFAL.fifo.bytesTotal += tmp;
 8016cec:	4b56      	ldr	r3, [pc, #344]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016cee:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8016cf0:	7bfb      	ldrb	r3, [r7, #15]
 8016cf2:	b29b      	uxth	r3, r3
 8016cf4:	4413      	add	r3, r2
 8016cf6:	b29a      	uxth	r2, r3
 8016cf8:	4b53      	ldr	r3, [pc, #332]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016cfa:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (uint8_t)(( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 8016cfc:	4b52      	ldr	r3, [pc, #328]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016cfe:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8016d00:	4b51      	ldr	r3, [pc, #324]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d04:	3307      	adds	r3, #7
 8016d06:	08db      	lsrs	r3, r3, #3
 8016d08:	b29b      	uxth	r3, r3
 8016d0a:	429a      	cmp	r2, r3
 8016d0c:	d90a      	bls.n	8016d24 <rfalTransceiveRx+0x568>
 8016d0e:	4b4e      	ldr	r3, [pc, #312]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d12:	3307      	adds	r3, #7
 8016d14:	08db      	lsrs	r3, r3, #3
 8016d16:	b2da      	uxtb	r2, r3
 8016d18:	4b4b      	ldr	r3, [pc, #300]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016d1a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8016d1c:	b2db      	uxtb	r3, r3
 8016d1e:	1ad3      	subs	r3, r2, r3
 8016d20:	b2db      	uxtb	r3, r3
 8016d22:	e000      	b.n	8016d26 <rfalTransceiveRx+0x56a>
 8016d24:	7bfb      	ldrb	r3, [r7, #15]
 8016d26:	73bb      	strb	r3, [r7, #14]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 8016d28:	4b47      	ldr	r3, [pc, #284]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d2c:	4a46      	ldr	r2, [pc, #280]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016d2e:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8016d30:	4413      	add	r3, r2
 8016d32:	7bba      	ldrb	r2, [r7, #14]
 8016d34:	4611      	mov	r1, r2
 8016d36:	4618      	mov	r0, r3
 8016d38:	f7ec ffd4 	bl	8003ce4 <st25r3911ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 8016d3c:	4b42      	ldr	r3, [pc, #264]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016d3e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8016d40:	7bbb      	ldrb	r3, [r7, #14]
 8016d42:	b29b      	uxth	r3, r3
 8016d44:	4413      	add	r3, r2
 8016d46:	b29a      	uxth	r2, r3
 8016d48:	4b3f      	ldr	r3, [pc, #252]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016d4a:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 8016d4c:	7bba      	ldrb	r2, [r7, #14]
 8016d4e:	7bfb      	ldrb	r3, [r7, #15]
 8016d50:	429a      	cmp	r2, r3
 8016d52:	d207      	bcs.n	8016d64 <rfalTransceiveRx+0x5a8>
            {
                st25r3911ReadFifo( NULL, (tmp - aux) );
 8016d54:	7bfa      	ldrb	r2, [r7, #15]
 8016d56:	7bbb      	ldrb	r3, [r7, #14]
 8016d58:	1ad3      	subs	r3, r2, r3
 8016d5a:	b2db      	uxtb	r3, r3
 8016d5c:	4619      	mov	r1, r3
 8016d5e:	2000      	movs	r0, #0
 8016d60:	f7ec ffc0 	bl	8003ce4 <st25r3911ReadFifo>
            }
            
            rfalFIFOStatusClear();
 8016d64:	f000 f884 	bl	8016e70 <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8016d68:	4b37      	ldr	r3, [pc, #220]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016d6a:	2254      	movs	r2, #84	; 0x54
 8016d6c:	751a      	strb	r2, [r3, #20]
            break;
 8016d6e:	e066      	b.n	8016e3e <rfalTransceiveRx+0x682>
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 8016d70:	4b35      	ldr	r3, [pc, #212]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016d72:	799b      	ldrb	r3, [r3, #6]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d003      	beq.n	8016d80 <rfalTransceiveRx+0x5c4>
 8016d78:	2100      	movs	r1, #0
 8016d7a:	2001      	movs	r0, #1
 8016d7c:	f7ec fe32 	bl	80039e4 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 8016d80:	f7ff fa24 	bl	80161cc <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 8016d84:	4b30      	ldr	r3, [pc, #192]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016d86:	8adb      	ldrh	r3, [r3, #22]
 8016d88:	2b02      	cmp	r3, #2
 8016d8a:	d102      	bne.n	8016d92 <rfalTransceiveRx+0x5d6>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 8016d8c:	4b2e      	ldr	r3, [pc, #184]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016d8e:	2208      	movs	r2, #8
 8016d90:	82da      	strh	r2, [r3, #22]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 8016d92:	4b2d      	ldr	r3, [pc, #180]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016d94:	2200      	movs	r2, #0
 8016d96:	751a      	strb	r2, [r3, #20]
            break;
 8016d98:	e051      	b.n	8016e3e <rfalTransceiveRx+0x682>
        
        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_NRE) );
 8016d9a:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8016d9e:	f7ed f9cf 	bl	8004140 <st25r3911GetInterrupt>
 8016da2:	4603      	mov	r3, r0
 8016da4:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8016da6:	68bb      	ldr	r3, [r7, #8]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d043      	beq.n	8016e34 <rfalTransceiveRx+0x678>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_EON) != 0U )
 8016dac:	68bb      	ldr	r3, [r7, #8]
 8016dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d002      	beq.n	8016dbc <rfalTransceiveRx+0x600>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8016db6:	4b24      	ldr	r3, [pc, #144]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016db8:	2253      	movs	r2, #83	; 0x53
 8016dba:	751a      	strb	r2, [r3, #20]
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_NRE) != 0U )
 8016dbc:	68bb      	ldr	r3, [r7, #8]
 8016dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d038      	beq.n	8016e38 <rfalTransceiveRx+0x67c>
            {
                /* ST25R3911 uses the NRT to measure other device's Field On max time: Tadt + (n x Trfw)  */
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 8016dc6:	4b20      	ldr	r3, [pc, #128]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016dc8:	2225      	movs	r2, #37	; 0x25
 8016dca:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016dcc:	4b1e      	ldr	r3, [pc, #120]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016dce:	225a      	movs	r2, #90	; 0x5a
 8016dd0:	751a      	strb	r2, [r3, #20]
            }
            break;
 8016dd2:	e031      	b.n	8016e38 <rfalTransceiveRx+0x67c>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC) );
 8016dd4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8016dd8:	f7ed f9b2 	bl	8004140 <st25r3911GetInterrupt>
 8016ddc:	4603      	mov	r3, r0
 8016dde:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8016de0:	68bb      	ldr	r3, [r7, #8]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d02a      	beq.n	8016e3c <rfalTransceiveRx+0x680>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_CAT) != 0U )
 8016de6:	68bb      	ldr	r3, [r7, #8]
 8016de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d003      	beq.n	8016df8 <rfalTransceiveRx+0x63c>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 8016df0:	4b15      	ldr	r3, [pc, #84]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016df2:	2259      	movs	r2, #89	; 0x59
 8016df4:	751a      	strb	r2, [r3, #20]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 8016df6:	e022      	b.n	8016e3e <rfalTransceiveRx+0x682>
            else if( (irqs & ST25R3911_IRQ_MASK_CAC) != 0U )
 8016df8:	68bb      	ldr	r3, [r7, #8]
 8016dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d006      	beq.n	8016e10 <rfalTransceiveRx+0x654>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 8016e02:	4b11      	ldr	r3, [pc, #68]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016e04:	221d      	movs	r2, #29
 8016e06:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016e08:	4b0f      	ldr	r3, [pc, #60]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016e0a:	225a      	movs	r2, #90	; 0x5a
 8016e0c:	751a      	strb	r2, [r3, #20]
            break;
 8016e0e:	e016      	b.n	8016e3e <rfalTransceiveRx+0x682>
               gRFAL.TxRx.status = ERR_IO;
 8016e10:	4b0d      	ldr	r3, [pc, #52]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016e12:	2203      	movs	r2, #3
 8016e14:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016e16:	4b0c      	ldr	r3, [pc, #48]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016e18:	225a      	movs	r2, #90	; 0x5a
 8016e1a:	751a      	strb	r2, [r3, #20]
            break;
 8016e1c:	e00f      	b.n	8016e3e <rfalTransceiveRx+0x682>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 8016e1e:	4b0a      	ldr	r3, [pc, #40]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016e20:	2208      	movs	r2, #8
 8016e22:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016e24:	4b08      	ldr	r3, [pc, #32]	; (8016e48 <rfalTransceiveRx+0x68c>)
 8016e26:	225a      	movs	r2, #90	; 0x5a
 8016e28:	751a      	strb	r2, [r3, #20]
            break;           
 8016e2a:	e008      	b.n	8016e3e <rfalTransceiveRx+0x682>
                break;  /* No interrupt to process */
 8016e2c:	bf00      	nop
 8016e2e:	e006      	b.n	8016e3e <rfalTransceiveRx+0x682>
                break;  /* No interrupt to process */
 8016e30:	bf00      	nop
 8016e32:	e004      	b.n	8016e3e <rfalTransceiveRx+0x682>
                break;  /* No interrupt to process */
 8016e34:	bf00      	nop
 8016e36:	e002      	b.n	8016e3e <rfalTransceiveRx+0x682>
            break;
 8016e38:	bf00      	nop
 8016e3a:	e000      	b.n	8016e3e <rfalTransceiveRx+0x682>
               break;  /* No interrupt to process */
 8016e3c:	bf00      	nop
    }    
}
 8016e3e:	bf00      	nop
 8016e40:	3714      	adds	r7, #20
 8016e42:	46bd      	mov	sp, r7
 8016e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e46:	bf00      	nop
 8016e48:	2000369c 	.word	0x2000369c

08016e4c <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 8016e50:	4b05      	ldr	r3, [pc, #20]	; (8016e68 <rfalFIFOStatusUpdate+0x1c>)
 8016e52:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016e56:	2bff      	cmp	r3, #255	; 0xff
 8016e58:	d104      	bne.n	8016e64 <rfalFIFOStatusUpdate+0x18>
    {
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 8016e5a:	2202      	movs	r2, #2
 8016e5c:	4903      	ldr	r1, [pc, #12]	; (8016e6c <rfalFIFOStatusUpdate+0x20>)
 8016e5e:	201a      	movs	r0, #26
 8016e60:	f7ec fd26 	bl	80038b0 <st25r3911ReadMultipleRegisters>
    }
}
 8016e64:	bf00      	nop
 8016e66:	bd80      	pop	{r7, pc}
 8016e68:	2000369c 	.word	0x2000369c
 8016e6c:	200036da 	.word	0x200036da

08016e70 <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 8016e70:	b480      	push	{r7}
 8016e72:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 8016e74:	4b03      	ldr	r3, [pc, #12]	; (8016e84 <rfalFIFOStatusClear+0x14>)
 8016e76:	22ff      	movs	r2, #255	; 0xff
 8016e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 8016e7c:	bf00      	nop
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	bc80      	pop	{r7}
 8016e82:	4770      	bx	lr
 8016e84:	2000369c 	.word	0x2000369c

08016e88 <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint8_t rfalFIFOStatusGetNumBytes( void )
{
 8016e88:	b580      	push	{r7, lr}
 8016e8a:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8016e8c:	f7ff ffde 	bl	8016e4c <rfalFIFOStatusUpdate>
    
    return gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]; 
 8016e90:	4b02      	ldr	r3, [pc, #8]	; (8016e9c <rfalFIFOStatusGetNumBytes+0x14>)
 8016e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   
}
 8016e96:	4618      	mov	r0, r3
 8016e98:	bd80      	pop	{r7, pc}
 8016e9a:	bf00      	nop
 8016e9c:	2000369c 	.word	0x2000369c

08016ea0 <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8016ea4:	f7ff ffd2 	bl	8016e4c <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & (ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb | ST25R3911_REG_FIFO_RX_STATUS2_fifo_ncp)) != 0U);
 8016ea8:	4b05      	ldr	r3, [pc, #20]	; (8016ec0 <rfalFIFOStatusIsIncompleteByte+0x20>)
 8016eaa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016eae:	f003 031e 	and.w	r3, r3, #30
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	bf14      	ite	ne
 8016eb6:	2301      	movne	r3, #1
 8016eb8:	2300      	moveq	r3, #0
 8016eba:	b2db      	uxtb	r3, r3
}
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	bd80      	pop	{r7, pc}
 8016ec0:	2000369c 	.word	0x2000369c

08016ec4 <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8016ec8:	f7ff ffc0 	bl	8016e4c <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_np_lb) != 0U);
 8016ecc:	4b05      	ldr	r3, [pc, #20]	; (8016ee4 <rfalFIFOStatusIsMissingPar+0x20>)
 8016ece:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016ed2:	f003 0301 	and.w	r3, r3, #1
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	bf14      	ite	ne
 8016eda:	2301      	movne	r3, #1
 8016edc:	2300      	moveq	r3, #0
 8016ede:	b2db      	uxtb	r3, r3
}
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	bd80      	pop	{r7, pc}
 8016ee4:	2000369c 	.word	0x2000369c

08016ee8 <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8016eec:	f7ff ffae 	bl	8016e4c <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb) >> ST25R3911_REG_FIFO_RX_STATUS2_shift_fifo_lb);
 8016ef0:	4b04      	ldr	r3, [pc, #16]	; (8016f04 <rfalFIFOGetNumIncompleteBits+0x1c>)
 8016ef2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016ef6:	085b      	lsrs	r3, r3, #1
 8016ef8:	b2db      	uxtb	r3, r3
 8016efa:	f003 0307 	and.w	r3, r3, #7
 8016efe:	b2db      	uxtb	r3, r3
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	bd80      	pop	{r7, pc}
 8016f04:	2000369c 	.word	0x2000369c

08016f08 <rfalISO14443ATransceiveShortFrame>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveShortFrame( rfal14443AShortFrameCmd txCmd, uint8_t* rxBuf, uint8_t rxBufLen, uint16_t* rxRcvdLen, uint32_t fwt )
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b086      	sub	sp, #24
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	60b9      	str	r1, [r7, #8]
 8016f10:	607b      	str	r3, [r7, #4]
 8016f12:	4603      	mov	r3, r0
 8016f14:	73fb      	strb	r3, [r7, #15]
 8016f16:	4613      	mov	r3, r2
 8016f18:	73bb      	strb	r3, [r7, #14]
    ReturnCode ret;
    uint8_t    directCmd;

    /* Check if RFAL is properly initialized */
    if( !st25r3911IsTxEnabled() || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 8016f1a:	2208      	movs	r2, #8
 8016f1c:	2108      	movs	r1, #8
 8016f1e:	2002      	movs	r0, #2
 8016f20:	f7ec fa7a 	bl	8003418 <st25r3911CheckReg>
 8016f24:	4603      	mov	r3, r0
 8016f26:	f083 0301 	eor.w	r3, r3, #1
 8016f2a:	b2db      	uxtb	r3, r3
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d10b      	bne.n	8016f48 <rfalISO14443ATransceiveShortFrame+0x40>
 8016f30:	4b70      	ldr	r3, [pc, #448]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016f32:	781b      	ldrb	r3, [r3, #0]
 8016f34:	2b01      	cmp	r3, #1
 8016f36:	d907      	bls.n	8016f48 <rfalISO14443ATransceiveShortFrame+0x40>
 8016f38:	4b6e      	ldr	r3, [pc, #440]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016f3a:	785b      	ldrb	r3, [r3, #1]
 8016f3c:	2b01      	cmp	r3, #1
 8016f3e:	d005      	beq.n	8016f4c <rfalISO14443ATransceiveShortFrame+0x44>
 8016f40:	4b6c      	ldr	r3, [pc, #432]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016f42:	785b      	ldrb	r3, [r3, #1]
 8016f44:	2b02      	cmp	r3, #2
 8016f46:	d001      	beq.n	8016f4c <rfalISO14443ATransceiveShortFrame+0x44>
    {
        return ERR_WRONG_STATE;
 8016f48:	2321      	movs	r3, #33	; 0x21
 8016f4a:	e0cf      	b.n	80170ec <rfalISO14443ATransceiveShortFrame+0x1e4>
    }    
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rxRcvdLen == NULL) || (fwt == RFAL_FWT_NONE) )
 8016f4c:	68bb      	ldr	r3, [r7, #8]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d006      	beq.n	8016f60 <rfalISO14443ATransceiveShortFrame+0x58>
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d003      	beq.n	8016f60 <rfalISO14443ATransceiveShortFrame+0x58>
 8016f58:	6a3b      	ldr	r3, [r7, #32]
 8016f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f5e:	d101      	bne.n	8016f64 <rfalISO14443ATransceiveShortFrame+0x5c>
    {
        return ERR_PARAM;
 8016f60:	2307      	movs	r3, #7
 8016f62:	e0c3      	b.n	80170ec <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    /*******************************************************************************/
    /* Select the Direct Command to be performed                                   */
    switch (txCmd)
 8016f64:	7bfb      	ldrb	r3, [r7, #15]
 8016f66:	2b26      	cmp	r3, #38	; 0x26
 8016f68:	d004      	beq.n	8016f74 <rfalISO14443ATransceiveShortFrame+0x6c>
 8016f6a:	2b52      	cmp	r3, #82	; 0x52
 8016f6c:	d105      	bne.n	8016f7a <rfalISO14443ATransceiveShortFrame+0x72>
    {
        case RFAL_14443A_SHORTFRAME_CMD_WUPA:
            directCmd = ST25R3911_CMD_TRANSMIT_WUPA;
 8016f6e:	23c7      	movs	r3, #199	; 0xc7
 8016f70:	757b      	strb	r3, [r7, #21]
            break;
 8016f72:	e004      	b.n	8016f7e <rfalISO14443ATransceiveShortFrame+0x76>
            
        case RFAL_14443A_SHORTFRAME_CMD_REQA:
            directCmd = ST25R3911_CMD_TRANSMIT_REQA;
 8016f74:	23c6      	movs	r3, #198	; 0xc6
 8016f76:	757b      	strb	r3, [r7, #21]
            break;
 8016f78:	e001      	b.n	8016f7e <rfalISO14443ATransceiveShortFrame+0x76>
            
        default:
            return ERR_PARAM;
 8016f7a:	2307      	movs	r3, #7
 8016f7c:	e0b6      	b.n	80170ec <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl);
 8016f7e:	2101      	movs	r1, #1
 8016f80:	2005      	movs	r0, #5
 8016f82:	f7ec fde0 	bl	8003b46 <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving since ATQA has no CRC included */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 8016f86:	2180      	movs	r1, #128	; 0x80
 8016f88:	2009      	movs	r0, #9
 8016f8a:	f7ec fddc 	bl	8003b46 <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Wait for GT and FDT */
    while( !rfalIsGTExpired() )      { /* MISRA 15.6: mandatory brackets */ };
 8016f8e:	bf00      	nop
 8016f90:	f7fe fdd2 	bl	8015b38 <rfalIsGTExpired>
 8016f94:	4603      	mov	r3, r0
 8016f96:	f083 0301 	eor.w	r3, r3, #1
 8016f9a:	b2db      	uxtb	r3, r3
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d1f7      	bne.n	8016f90 <rfalISO14443ATransceiveShortFrame+0x88>
    while( st25r3911IsGPTRunning() ) { /* MISRA 15.6: mandatory brackets */ };
 8016fa0:	bf00      	nop
 8016fa2:	2204      	movs	r2, #4
 8016fa4:	2104      	movs	r1, #4
 8016fa6:	202b      	movs	r0, #43	; 0x2b
 8016fa8:	f7ec fa36 	bl	8003418 <st25r3911CheckReg>
 8016fac:	4603      	mov	r3, r0
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d1f7      	bne.n	8016fa2 <rfalISO14443ATransceiveShortFrame+0x9a>
    
    gRFAL.tmr.GT = RFAL_TIMING_NONE;
 8016fb2:	4b50      	ldr	r3, [pc, #320]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	641a      	str	r2, [r3, #64]	; 0x40

    
    /*******************************************************************************/
    /* Prepare for Transceive, Receive only (bypass Tx states) */
    gRFAL.TxRx.ctx.flags     = ((uint32_t) RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP );
 8016fb8:	4b4e      	ldr	r3, [pc, #312]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016fba:	2203      	movs	r2, #3
 8016fbc:	631a      	str	r2, [r3, #48]	; 0x30
    gRFAL.TxRx.ctx.rxBuf     = rxBuf;
 8016fbe:	4a4d      	ldr	r2, [pc, #308]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016fc0:	68bb      	ldr	r3, [r7, #8]
 8016fc2:	6253      	str	r3, [r2, #36]	; 0x24
    gRFAL.TxRx.ctx.rxBufLen  = rxBufLen;
 8016fc4:	7bbb      	ldrb	r3, [r7, #14]
 8016fc6:	b29a      	uxth	r2, r3
 8016fc8:	4b4a      	ldr	r3, [pc, #296]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016fca:	851a      	strh	r2, [r3, #40]	; 0x28
    gRFAL.TxRx.ctx.rxRcvdLen = rxRcvdLen;
 8016fcc:	4a49      	ldr	r2, [pc, #292]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    /*******************************************************************************/
    /* Load NRT with FWT */
    st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3911_NRT_MAX_1FC ) ) );
 8016fd2:	6a3b      	ldr	r3, [r7, #32]
 8016fd4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8016fd8:	4a47      	ldr	r2, [pc, #284]	; (80170f8 <rfalISO14443ATransceiveShortFrame+0x1f0>)
 8016fda:	4293      	cmp	r3, r2
 8016fdc:	bf28      	it	cs
 8016fde:	4613      	movcs	r3, r2
 8016fe0:	099b      	lsrs	r3, r3, #6
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f7ec fa5a 	bl	800349c <st25r3911SetNoResponseTime_64fcs>
    
    if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 8016fe8:	4b42      	ldr	r3, [pc, #264]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016fea:	68db      	ldr	r3, [r3, #12]
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d010      	beq.n	8017012 <rfalISO14443ATransceiveShortFrame+0x10a>
    {
        /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
        st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( ((RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT) > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - (RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT)) ) );
 8016ff0:	4b40      	ldr	r3, [pc, #256]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016ff2:	68db      	ldr	r3, [r3, #12]
 8016ff4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8016ff8:	d306      	bcc.n	8017008 <rfalISO14443ATransceiveShortFrame+0x100>
 8016ffa:	4b3e      	ldr	r3, [pc, #248]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016ffc:	68db      	ldr	r3, [r3, #12]
 8016ffe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8017002:	099b      	lsrs	r3, r3, #6
 8017004:	b2db      	uxtb	r3, r3
 8017006:	e000      	b.n	801700a <rfalISO14443ATransceiveShortFrame+0x102>
 8017008:	2304      	movs	r3, #4
 801700a:	4619      	mov	r1, r3
 801700c:	200e      	movs	r0, #14
 801700e:	f7ec fd2d 	bl	8003a6c <st25r3911WriteRegister>
    }
    
    /* In Passive communications General Purpose Timer is used to measure FDT Poll */
    if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 8017012:	4b38      	ldr	r3, [pc, #224]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8017014:	691b      	ldr	r3, [r3, #16]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d014      	beq.n	8017044 <rfalISO14443ATransceiveShortFrame+0x13c>
    {
        /* Configure GPT to start at RX end */
        st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 801701a:	4b36      	ldr	r3, [pc, #216]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801701c:	691b      	ldr	r3, [r3, #16]
 801701e:	f240 423b 	movw	r2, #1083	; 0x43b
 8017022:	4293      	cmp	r3, r2
 8017024:	d804      	bhi.n	8017030 <rfalISO14443ATransceiveShortFrame+0x128>
 8017026:	4b33      	ldr	r3, [pc, #204]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8017028:	691b      	ldr	r3, [r3, #16]
 801702a:	08db      	lsrs	r3, r3, #3
 801702c:	b29b      	uxth	r3, r3
 801702e:	e005      	b.n	801703c <rfalISO14443ATransceiveShortFrame+0x134>
 8017030:	4b30      	ldr	r3, [pc, #192]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8017032:	691b      	ldr	r3, [r3, #16]
 8017034:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8017038:	08db      	lsrs	r3, r3, #3
 801703a:	b29b      	uxth	r3, r3
 801703c:	2120      	movs	r1, #32
 801703e:	4618      	mov	r0, r3
 8017040:	f7ec f9b6 	bl	80033b0 <st25r3911StartGPTimer_8fcs>
    }
    
    /*******************************************************************************/
    rfalPrepareTransceive();
 8017044:	f7ff f8d8 	bl	80161f8 <rfalPrepareTransceive>
    
    /* Also enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 8017048:	2004      	movs	r0, #4
 801704a:	f7ed f879 	bl	8004140 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 801704e:	2004      	movs	r0, #4
 8017050:	f7ed f8ae 	bl	80041b0 <st25r3911EnableInterrupts>
    
    /*Check if Observation Mode is enabled and set it on ST25R391x */
    rfalCheckEnableObsModeTx();
 8017054:	4b27      	ldr	r3, [pc, #156]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8017056:	795b      	ldrb	r3, [r3, #5]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d005      	beq.n	8017068 <rfalISO14443ATransceiveShortFrame+0x160>
 801705c:	4b25      	ldr	r3, [pc, #148]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801705e:	795b      	ldrb	r3, [r3, #5]
 8017060:	4619      	mov	r1, r3
 8017062:	2001      	movs	r0, #1
 8017064:	f7ec fcbe 	bl	80039e4 <st25r3911WriteTestRegister>
    
    /*******************************************************************************/
    /* Chip bug: Clear nbtx bits before sending WUPA/REQA - otherwise ST25R3911 will report parity error */
    st25r3911WriteRegister( ST25R3911_REG_NUM_TX_BYTES2, 0);
 8017068:	2100      	movs	r1, #0
 801706a:	201e      	movs	r0, #30
 801706c:	f7ec fcfe 	bl	8003a6c <st25r3911WriteRegister>

    /* Send either WUPA or REQA. All affected tags will backscatter ATQA and change to READY state */
    st25r3911ExecuteCommand( directCmd );
 8017070:	7d7b      	ldrb	r3, [r7, #21]
 8017072:	4618      	mov	r0, r3
 8017074:	f7ec fe7e 	bl	8003d74 <st25r3911ExecuteCommand>
    
    /* Wait for TXE */
    if( st25r3911WaitForInterruptsTimed( ST25R3911_IRQ_MASK_TXE, (uint16_t)MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3911_SW_TMR_MIN_1MS ) ) == 0U)
 8017078:	6a3b      	ldr	r3, [r7, #32]
 801707a:	f646 12ef 	movw	r2, #27119	; 0x69ef
 801707e:	4293      	cmp	r3, r2
 8017080:	d906      	bls.n	8017090 <rfalISO14443ATransceiveShortFrame+0x188>
 8017082:	6a3b      	ldr	r3, [r7, #32]
 8017084:	4a1d      	ldr	r2, [pc, #116]	; (80170fc <rfalISO14443ATransceiveShortFrame+0x1f4>)
 8017086:	fba2 2303 	umull	r2, r3, r2, r3
 801708a:	0b1b      	lsrs	r3, r3, #12
 801708c:	b29b      	uxth	r3, r3
 801708e:	e000      	b.n	8017092 <rfalISO14443ATransceiveShortFrame+0x18a>
 8017090:	2301      	movs	r3, #1
 8017092:	4619      	mov	r1, r3
 8017094:	2008      	movs	r0, #8
 8017096:	f7ed f803 	bl	80040a0 <st25r3911WaitForInterruptsTimed>
 801709a:	4603      	mov	r3, r0
 801709c:	2b00      	cmp	r3, #0
 801709e:	d102      	bne.n	80170a6 <rfalISO14443ATransceiveShortFrame+0x19e>
    {
        ret = ERR_IO;
 80170a0:	2303      	movs	r3, #3
 80170a2:	82fb      	strh	r3, [r7, #22]
 80170a4:	e016      	b.n	80170d4 <rfalISO14443ATransceiveShortFrame+0x1cc>
    }
    else
    {
        /*Check if Observation Mode is enabled and set it on ST25R391x */
        rfalCheckEnableObsModeRx();
 80170a6:	4b13      	ldr	r3, [pc, #76]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80170a8:	799b      	ldrb	r3, [r3, #6]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d005      	beq.n	80170ba <rfalISO14443ATransceiveShortFrame+0x1b2>
 80170ae:	4b11      	ldr	r3, [pc, #68]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80170b0:	799b      	ldrb	r3, [r3, #6]
 80170b2:	4619      	mov	r1, r3
 80170b4:	2001      	movs	r0, #1
 80170b6:	f7ec fc95 	bl	80039e4 <st25r3911WriteTestRegister>
        
        /* Jump into a transceive Rx state for reception (bypass Tx states) */
        gRFAL.state       = RFAL_STATE_TXRX;
 80170ba:	4b0e      	ldr	r3, [pc, #56]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80170bc:	2203      	movs	r2, #3
 80170be:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 80170c0:	4b0c      	ldr	r3, [pc, #48]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80170c2:	2251      	movs	r2, #81	; 0x51
 80170c4:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 80170c6:	4b0b      	ldr	r3, [pc, #44]	; (80170f4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80170c8:	2202      	movs	r2, #2
 80170ca:	82da      	strh	r2, [r3, #22]
        
        /* Execute Transceive Rx blocking */
        ret = rfalTransceiveBlockingRx();
 80170cc:	f7fe ff66 	bl	8015f9c <rfalTransceiveBlockingRx>
 80170d0:	4603      	mov	r3, r0
 80170d2:	82fb      	strh	r3, [r7, #22]
    }
    
    
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 80170d4:	2004      	movs	r0, #4
 80170d6:	f7ed f877 	bl	80041c8 <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 80170da:	2101      	movs	r1, #1
 80170dc:	2005      	movs	r0, #5
 80170de:	f7ec fd0f 	bl	8003b00 <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits(ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 80170e2:	2180      	movs	r1, #128	; 0x80
 80170e4:	2009      	movs	r0, #9
 80170e6:	f7ec fd0b 	bl	8003b00 <st25r3911ClrRegisterBits>
    
    return ret;
 80170ea:	8afb      	ldrh	r3, [r7, #22]
}
 80170ec:	4618      	mov	r0, r3
 80170ee:	3718      	adds	r7, #24
 80170f0:	46bd      	mov	sp, r7
 80170f2:	bd80      	pop	{r7, pc}
 80170f4:	2000369c 	.word	0x2000369c
 80170f8:	0ffff000 	.word	0x0ffff000
 80170fc:	4d542005 	.word	0x4d542005

08017100 <rfalISO14443ATransceiveAnticollisionFrame>:

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveAnticollisionFrame( uint8_t *buf, uint8_t *bytesToSend, uint8_t *bitsToSend, uint16_t *rxLength, uint32_t fwt )
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b08e      	sub	sp, #56	; 0x38
 8017104:	af00      	add	r7, sp, #0
 8017106:	60f8      	str	r0, [r7, #12]
 8017108:	60b9      	str	r1, [r7, #8]
 801710a:	607a      	str	r2, [r7, #4]
 801710c:	603b      	str	r3, [r7, #0]
    rfalTransceiveContext ctx;
    uint8_t               collByte;
    uint8_t               collData;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 801710e:	4b77      	ldr	r3, [pc, #476]	; (80172ec <rfalISO14443ATransceiveAnticollisionFrame+0x1ec>)
 8017110:	781b      	ldrb	r3, [r3, #0]
 8017112:	2b01      	cmp	r3, #1
 8017114:	d903      	bls.n	801711e <rfalISO14443ATransceiveAnticollisionFrame+0x1e>
 8017116:	4b75      	ldr	r3, [pc, #468]	; (80172ec <rfalISO14443ATransceiveAnticollisionFrame+0x1ec>)
 8017118:	785b      	ldrb	r3, [r3, #1]
 801711a:	2b01      	cmp	r3, #1
 801711c:	d001      	beq.n	8017122 <rfalISO14443ATransceiveAnticollisionFrame+0x22>
    {
        return ERR_WRONG_STATE;
 801711e:	2321      	movs	r3, #33	; 0x21
 8017120:	e0df      	b.n	80172e2 <rfalISO14443ATransceiveAnticollisionFrame+0x1e2>
    }
    
    /* Check for valid parameters */
    if( (buf == NULL) || (bytesToSend == NULL) || (bitsToSend == NULL) || (rxLength == NULL) )
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d008      	beq.n	801713a <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d005      	beq.n	801713a <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d002      	beq.n	801713a <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 8017134:	683b      	ldr	r3, [r7, #0]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d101      	bne.n	801713e <rfalISO14443ATransceiveAnticollisionFrame+0x3e>
    {
        return ERR_PARAM;
 801713a:	2307      	movs	r3, #7
 801713c:	e0d1      	b.n	80172e2 <rfalISO14443ATransceiveAnticollisionFrame+0x1e2>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 801713e:	f240 1003 	movw	r0, #259	; 0x103
 8017142:	f7f5 ffcd 	bl	800d0e0 <rfalSetAnalogConfig>
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 8017146:	2101      	movs	r1, #1
 8017148:	2005      	movs	r0, #5
 801714a:	f7ec fcfc 	bl	8003b46 <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 801714e:	2180      	movs	r1, #128	; 0x80
 8017150:	2009      	movs	r0, #9
 8017152:	f7ec fcf8 	bl	8003b46 <st25r3911SetRegisterBits>
    
    
    
    /*******************************************************************************/
    /* Prepare for Transceive                                                      */
    ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF );  /* Disable Automatic Gain Control (AGC) for better detection of collision */
 8017156:	230b      	movs	r3, #11
 8017158:	62fb      	str	r3, [r7, #44]	; 0x2c
    ctx.txBuf     = buf;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	61bb      	str	r3, [r7, #24]
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 801715e:	68bb      	ldr	r3, [r7, #8]
 8017160:	781b      	ldrb	r3, [r3, #0]
 8017162:	b29b      	uxth	r3, r3
 8017164:	00db      	lsls	r3, r3, #3
 8017166:	b29a      	uxth	r2, r3
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	781b      	ldrb	r3, [r3, #0]
 801716c:	b29b      	uxth	r3, r3
 801716e:	4413      	add	r3, r2
 8017170:	b29b      	uxth	r3, r3
 8017172:	83bb      	strh	r3, [r7, #28]
    ctx.rxBuf     = &buf[*bytesToSend];
 8017174:	68bb      	ldr	r3, [r7, #8]
 8017176:	781b      	ldrb	r3, [r3, #0]
 8017178:	461a      	mov	r2, r3
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	4413      	add	r3, r2
 801717e:	623b      	str	r3, [r7, #32]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 8017180:	2328      	movs	r3, #40	; 0x28
 8017182:	84bb      	strh	r3, [r7, #36]	; 0x24
    ctx.rxRcvdLen = rxLength;
 8017184:	683b      	ldr	r3, [r7, #0]
 8017186:	62bb      	str	r3, [r7, #40]	; 0x28
    ctx.fwt       = fwt;
 8017188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801718a:	633b      	str	r3, [r7, #48]	; 0x30
    
    rfalStartTransceive( &ctx );
 801718c:	f107 0318 	add.w	r3, r7, #24
 8017190:	4618      	mov	r0, r3
 8017192:	f7fe fd61 	bl	8015c58 <rfalStartTransceive>
    
    /* Additionally enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 8017196:	2004      	movs	r0, #4
 8017198:	f7ec ffd2 	bl	8004140 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 801719c:	2004      	movs	r0, #4
 801719e:	f7ed f807 	bl	80041b0 <st25r3911EnableInterrupts>
    
    /*******************************************************************************/
    collByte = 0;
 80171a2:	2300      	movs	r3, #0
 80171a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    
    /* save the collision byte */
    if ((*bitsToSend) > 0U)
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	781b      	ldrb	r3, [r3, #0]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d02d      	beq.n	801720c <rfalISO14443ATransceiveAnticollisionFrame+0x10c>
    {
        buf[(*bytesToSend)] <<= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 80171b0:	68bb      	ldr	r3, [r7, #8]
 80171b2:	781b      	ldrb	r3, [r3, #0]
 80171b4:	461a      	mov	r2, r3
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	4413      	add	r3, r2
 80171ba:	781b      	ldrb	r3, [r3, #0]
 80171bc:	461a      	mov	r2, r3
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	781b      	ldrb	r3, [r3, #0]
 80171c2:	f1c3 0308 	rsb	r3, r3, #8
 80171c6:	409a      	lsls	r2, r3
 80171c8:	68bb      	ldr	r3, [r7, #8]
 80171ca:	781b      	ldrb	r3, [r3, #0]
 80171cc:	4619      	mov	r1, r3
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	440b      	add	r3, r1
 80171d2:	b2d2      	uxtb	r2, r2
 80171d4:	701a      	strb	r2, [r3, #0]
        buf[(*bytesToSend)] >>= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 80171d6:	68bb      	ldr	r3, [r7, #8]
 80171d8:	781b      	ldrb	r3, [r3, #0]
 80171da:	461a      	mov	r2, r3
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	4413      	add	r3, r2
 80171e0:	781b      	ldrb	r3, [r3, #0]
 80171e2:	461a      	mov	r2, r3
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	781b      	ldrb	r3, [r3, #0]
 80171e8:	f1c3 0308 	rsb	r3, r3, #8
 80171ec:	411a      	asrs	r2, r3
 80171ee:	68bb      	ldr	r3, [r7, #8]
 80171f0:	781b      	ldrb	r3, [r3, #0]
 80171f2:	4619      	mov	r1, r3
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	440b      	add	r3, r1
 80171f8:	b2d2      	uxtb	r2, r2
 80171fa:	701a      	strb	r2, [r3, #0]
        collByte = buf[(*bytesToSend)];
 80171fc:	68bb      	ldr	r3, [r7, #8]
 80171fe:	781b      	ldrb	r3, [r3, #0]
 8017200:	461a      	mov	r2, r3
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	4413      	add	r3, r2
 8017206:	781b      	ldrb	r3, [r3, #0]
 8017208:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }
    
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 801720c:	f7fe fea9 	bl	8015f62 <rfalTransceiveRunBlockingTx>
 8017210:	4603      	mov	r3, r0
 8017212:	86fb      	strh	r3, [r7, #54]	; 0x36
    if( ret == ERR_NONE)
 8017214:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017216:	2b00      	cmp	r3, #0
 8017218:	d14f      	bne.n	80172ba <rfalISO14443ATransceiveAnticollisionFrame+0x1ba>
    {
       ret = rfalTransceiveBlockingRx();
 801721a:	f7fe febf 	bl	8015f9c <rfalTransceiveBlockingRx>
 801721e:	4603      	mov	r3, r0
 8017220:	86fb      	strh	r3, [r7, #54]	; 0x36
    
       /*******************************************************************************/
       if ((*bitsToSend) > 0U)
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	781b      	ldrb	r3, [r3, #0]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d031      	beq.n	801728e <rfalISO14443ATransceiveAnticollisionFrame+0x18e>
       {
           buf[(*bytesToSend)] >>= (*bitsToSend);
 801722a:	68bb      	ldr	r3, [r7, #8]
 801722c:	781b      	ldrb	r3, [r3, #0]
 801722e:	461a      	mov	r2, r3
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	4413      	add	r3, r2
 8017234:	781b      	ldrb	r3, [r3, #0]
 8017236:	461a      	mov	r2, r3
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	781b      	ldrb	r3, [r3, #0]
 801723c:	411a      	asrs	r2, r3
 801723e:	68bb      	ldr	r3, [r7, #8]
 8017240:	781b      	ldrb	r3, [r3, #0]
 8017242:	4619      	mov	r1, r3
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	440b      	add	r3, r1
 8017248:	b2d2      	uxtb	r2, r2
 801724a:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] <<= (*bitsToSend);
 801724c:	68bb      	ldr	r3, [r7, #8]
 801724e:	781b      	ldrb	r3, [r3, #0]
 8017250:	461a      	mov	r2, r3
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	4413      	add	r3, r2
 8017256:	781b      	ldrb	r3, [r3, #0]
 8017258:	461a      	mov	r2, r3
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	781b      	ldrb	r3, [r3, #0]
 801725e:	409a      	lsls	r2, r3
 8017260:	68bb      	ldr	r3, [r7, #8]
 8017262:	781b      	ldrb	r3, [r3, #0]
 8017264:	4619      	mov	r1, r3
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	440b      	add	r3, r1
 801726a:	b2d2      	uxtb	r2, r2
 801726c:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] |= collByte;
 801726e:	68bb      	ldr	r3, [r7, #8]
 8017270:	781b      	ldrb	r3, [r3, #0]
 8017272:	461a      	mov	r2, r3
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	4413      	add	r3, r2
 8017278:	7819      	ldrb	r1, [r3, #0]
 801727a:	68bb      	ldr	r3, [r7, #8]
 801727c:	781b      	ldrb	r3, [r3, #0]
 801727e:	461a      	mov	r2, r3
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	4413      	add	r3, r2
 8017284:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8017288:	430a      	orrs	r2, r1
 801728a:	b2d2      	uxtb	r2, r2
 801728c:	701a      	strb	r2, [r3, #0]
       }
       
       if( (ERR_RF_COLLISION == ret) )
 801728e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017290:	2b1d      	cmp	r3, #29
 8017292:	d112      	bne.n	80172ba <rfalISO14443ATransceiveAnticollisionFrame+0x1ba>
       {
           /* read out collision register */
           st25r3911ReadRegister( ST25R3911_REG_COLLISION_STATUS, &collData);
 8017294:	f107 0317 	add.w	r3, r7, #23
 8017298:	4619      	mov	r1, r3
 801729a:	201c      	movs	r0, #28
 801729c:	f7ec fabe 	bl	800381c <st25r3911ReadRegister>

           (*bytesToSend) = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_byte) & 0x0FU); // 4-bits Byte information
 80172a0:	7dfb      	ldrb	r3, [r7, #23]
 80172a2:	091b      	lsrs	r3, r3, #4
 80172a4:	b2da      	uxtb	r2, r3
 80172a6:	68bb      	ldr	r3, [r7, #8]
 80172a8:	701a      	strb	r2, [r3, #0]
           (*bitsToSend)  = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_bit)  & 0x07U); // 3-bits bit information
 80172aa:	7dfb      	ldrb	r3, [r7, #23]
 80172ac:	085b      	lsrs	r3, r3, #1
 80172ae:	b2db      	uxtb	r3, r3
 80172b0:	f003 0307 	and.w	r3, r3, #7
 80172b4:	b2da      	uxtb	r2, r3
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	701a      	strb	r2, [r3, #0]
    }
    
   
    /*******************************************************************************/
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 80172ba:	2004      	movs	r0, #4
 80172bc:	f7ec ff84 	bl	80041c8 <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 80172c0:	2101      	movs	r1, #1
 80172c2:	2005      	movs	r0, #5
 80172c4:	f7ec fc1c 	bl	8003b00 <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 80172c8:	2180      	movs	r1, #128	; 0x80
 80172ca:	2009      	movs	r0, #9
 80172cc:	f7ec fc18 	bl	8003b00 <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80172d0:	f240 1001 	movw	r0, #257	; 0x101
 80172d4:	f7f5 ff04 	bl	800d0e0 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80172d8:	f44f 7081 	mov.w	r0, #258	; 0x102
 80172dc:	f7f5 ff00 	bl	800d0e0 <rfalSetAnalogConfig>
    
    return ret;
 80172e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 80172e2:	4618      	mov	r0, r3
 80172e4:	3738      	adds	r7, #56	; 0x38
 80172e6:	46bd      	mov	sp, r7
 80172e8:	bd80      	pop	{r7, pc}
 80172ea:	bf00      	nop
 80172ec:	2000369c 	.word	0x2000369c

080172f0 <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b08c      	sub	sp, #48	; 0x30
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	60f8      	str	r0, [r7, #12]
 80172f8:	607a      	str	r2, [r7, #4]
 80172fa:	461a      	mov	r2, r3
 80172fc:	460b      	mov	r3, r1
 80172fe:	72fb      	strb	r3, [r7, #11]
 8017300:	4613      	mov	r3, r2
 8017302:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8017304:	4b29      	ldr	r3, [pc, #164]	; (80173ac <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 8017306:	781b      	ldrb	r3, [r3, #0]
 8017308:	2b01      	cmp	r3, #1
 801730a:	d903      	bls.n	8017314 <rfalISO15693TransceiveAnticollisionFrame+0x24>
 801730c:	4b27      	ldr	r3, [pc, #156]	; (80173ac <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 801730e:	785b      	ldrb	r3, [r3, #1]
 8017310:	2b07      	cmp	r3, #7
 8017312:	d001      	beq.n	8017318 <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 8017314:	2321      	movs	r3, #33	; 0x21
 8017316:	e045      	b.n	80173a4 <rfalISO15693TransceiveAnticollisionFrame+0xb4>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 8017318:	f241 0003 	movw	r0, #4099	; 0x1003
 801731c:	f7f5 fee0 	bl	800d0e0 <rfalSetAnalogConfig>

    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 8017320:	4b22      	ldr	r3, [pc, #136]	; (80173ac <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 8017322:	2210      	movs	r2, #16
 8017324:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 8017328:	7afb      	ldrb	r3, [r7, #11]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d101      	bne.n	8017332 <rfalISO15693TransceiveAnticollisionFrame+0x42>
 801732e:	220b      	movs	r2, #11
 8017330:	e000      	b.n	8017334 <rfalISO15693TransceiveAnticollisionFrame+0x44>
 8017332:	220a      	movs	r2, #10
 8017334:	7afb      	ldrb	r3, [r7, #11]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d101      	bne.n	801733e <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 801733a:	2340      	movs	r3, #64	; 0x40
 801733c:	e000      	b.n	8017340 <rfalISO15693TransceiveAnticollisionFrame+0x50>
 801733e:	2300      	movs	r3, #0
 8017340:	4313      	orrs	r3, r2
 8017342:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 8017348:	7afb      	ldrb	r3, [r7, #11]
 801734a:	b29b      	uxth	r3, r3
 801734c:	00db      	lsls	r3, r3, #3
 801734e:	b29b      	uxth	r3, r3
 8017350:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 8017356:	7abb      	ldrb	r3, [r7, #10]
 8017358:	b29b      	uxth	r3, r3
 801735a:	00db      	lsls	r3, r3, #3
 801735c:	b29b      	uxth	r3, r3
 801735e:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 8017360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017362:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 8017364:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8017368:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 801736a:	f107 0310 	add.w	r3, r7, #16
 801736e:	4618      	mov	r0, r3
 8017370:	f7fe fc72 	bl	8015c58 <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 8017374:	f7fe fdf5 	bl	8015f62 <rfalTransceiveRunBlockingTx>
 8017378:	4603      	mov	r3, r0
 801737a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 801737c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801737e:	2b00      	cmp	r3, #0
 8017380:	d103      	bne.n	801738a <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 8017382:	f7fe fe0b 	bl	8015f9c <rfalTransceiveBlockingRx>
 8017386:	4603      	mov	r3, r0
 8017388:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 801738a:	f241 0001 	movw	r0, #4097	; 0x1001
 801738e:	f7f5 fea7 	bl	800d0e0 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017392:	f241 0002 	movw	r0, #4098	; 0x1002
 8017396:	f7f5 fea3 	bl	800d0e0 <rfalSetAnalogConfig>
        
    gRFAL.nfcvData.ignoreBits = 0;
 801739a:	4b04      	ldr	r3, [pc, #16]	; (80173ac <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 801739c:	2200      	movs	r2, #0
 801739e:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
    return ret;
 80173a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 80173a4:	4618      	mov	r0, r3
 80173a6:	3730      	adds	r7, #48	; 0x30
 80173a8:	46bd      	mov	sp, r7
 80173aa:	bd80      	pop	{r7, pc}
 80173ac:	2000369c 	.word	0x2000369c

080173b0 <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b088      	sub	sp, #32
 80173b4:	af02      	add	r7, sp, #8
 80173b6:	60f8      	str	r0, [r7, #12]
 80173b8:	460b      	mov	r3, r1
 80173ba:	607a      	str	r2, [r7, #4]
 80173bc:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 80173be:	7afa      	ldrb	r2, [r7, #11]
 80173c0:	f107 0017 	add.w	r0, r7, #23
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	9300      	str	r3, [sp, #0]
 80173c8:	4613      	mov	r3, r2
 80173ca:	68fa      	ldr	r2, [r7, #12]
 80173cc:	2100      	movs	r1, #0
 80173ce:	f7ff ff8f 	bl	80172f0 <rfalISO15693TransceiveAnticollisionFrame>
 80173d2:	4603      	mov	r3, r0
}
 80173d4:	4618      	mov	r0, r3
 80173d6:	3718      	adds	r7, #24
 80173d8:	46bd      	mov	sp, r7
 80173da:	bd80      	pop	{r7, pc}

080173dc <rfalISO15693TransceiveEOF>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOF( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	b08a      	sub	sp, #40	; 0x28
 80173e0:	af04      	add	r7, sp, #16
 80173e2:	60f8      	str	r0, [r7, #12]
 80173e4:	460b      	mov	r3, r1
 80173e6:	607a      	str	r2, [r7, #4]
 80173e8:	72fb      	strb	r3, [r7, #11]
    ReturnCode ret;
    uint8_t    dummy;
    
    /* Check if RFAL is properly initialized */
    if( ( gRFAL.state < RFAL_STATE_MODE_SET ) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 80173ea:	4b10      	ldr	r3, [pc, #64]	; (801742c <rfalISO15693TransceiveEOF+0x50>)
 80173ec:	781b      	ldrb	r3, [r3, #0]
 80173ee:	2b01      	cmp	r3, #1
 80173f0:	d903      	bls.n	80173fa <rfalISO15693TransceiveEOF+0x1e>
 80173f2:	4b0e      	ldr	r3, [pc, #56]	; (801742c <rfalISO15693TransceiveEOF+0x50>)
 80173f4:	785b      	ldrb	r3, [r3, #1]
 80173f6:	2b07      	cmp	r3, #7
 80173f8:	d001      	beq.n	80173fe <rfalISO15693TransceiveEOF+0x22>
    {
        return ERR_WRONG_STATE;
 80173fa:	2321      	movs	r3, #33	; 0x21
 80173fc:	e012      	b.n	8017424 <rfalISO15693TransceiveEOF+0x48>
    }
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveBlockingTxRx( &dummy,
 80173fe:	7afb      	ldrb	r3, [r7, #11]
 8017400:	b29a      	uxth	r2, r3
 8017402:	f107 0015 	add.w	r0, r7, #21
 8017406:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 801740a:	9302      	str	r3, [sp, #8]
 801740c:	2303      	movs	r3, #3
 801740e:	9301      	str	r3, [sp, #4]
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	9300      	str	r3, [sp, #0]
 8017414:	4613      	mov	r3, r2
 8017416:	68fa      	ldr	r2, [r7, #12]
 8017418:	2100      	movs	r1, #0
 801741a:	f7fe fdd5 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 801741e:	4603      	mov	r3, r0
 8017420:	82fb      	strh	r3, [r7, #22]
                                      rxBuf,
                                      rxBufLen,
                                      actLen,
                                      ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP |(uint32_t)RFAL_TXRX_FLAGS_AGC_ON ),
                                      rfalConv64fcTo1fc(ISO15693_FWT) );
    return ret;
 8017422:	8afb      	ldrh	r3, [r7, #22]
}
 8017424:	4618      	mov	r0, r3
 8017426:	3718      	adds	r7, #24
 8017428:	46bd      	mov	sp, r7
 801742a:	bd80      	pop	{r7, pc}
 801742c:	2000369c 	.word	0x2000369c

08017430 <rfalFeliCaPoll>:

#if RFAL_FEATURE_NFCF

/*******************************************************************************/
ReturnCode rfalFeliCaPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes* pollResList, uint8_t pollResListSize, uint8_t *devicesDetected, uint8_t *collisionsDetected )
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b08c      	sub	sp, #48	; 0x30
 8017434:	af04      	add	r7, sp, #16
 8017436:	603b      	str	r3, [r7, #0]
 8017438:	4603      	mov	r3, r0
 801743a:	71fb      	strb	r3, [r7, #7]
 801743c:	460b      	mov	r3, r1
 801743e:	80bb      	strh	r3, [r7, #4]
 8017440:	4613      	mov	r3, r2
 8017442:	71bb      	strb	r3, [r7, #6]
    uint8_t           colDetected;
    rfalEHandling     curHandling;
    uint8_t           nbSlots;
        
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 8017444:	4b70      	ldr	r3, [pc, #448]	; (8017608 <rfalFeliCaPoll+0x1d8>)
 8017446:	781b      	ldrb	r3, [r3, #0]
 8017448:	2b01      	cmp	r3, #1
 801744a:	d903      	bls.n	8017454 <rfalFeliCaPoll+0x24>
 801744c:	4b6e      	ldr	r3, [pc, #440]	; (8017608 <rfalFeliCaPoll+0x1d8>)
 801744e:	785b      	ldrb	r3, [r3, #1]
 8017450:	2b06      	cmp	r3, #6
 8017452:	d001      	beq.n	8017458 <rfalFeliCaPoll+0x28>
    {
        return ERR_WRONG_STATE;
 8017454:	2321      	movs	r3, #33	; 0x21
 8017456:	e0d3      	b.n	8017600 <rfalFeliCaPoll+0x1d0>
    }
    
    frameIdx    = 0;
 8017458:	2300      	movs	r3, #0
 801745a:	767b      	strb	r3, [r7, #25]
    colDetected = 0;
 801745c:	2300      	movs	r3, #0
 801745e:	773b      	strb	r3, [r7, #28]
    devDetected = 0;
 8017460:	2300      	movs	r3, #0
 8017462:	777b      	strb	r3, [r7, #29]
    nbSlots     = (uint8_t)slots;
 8017464:	79fb      	ldrb	r3, [r7, #7]
 8017466:	76fb      	strb	r3, [r7, #27]
    
    /*******************************************************************************/
    /* Compute SENSF_REQ frame */
    frame[frameIdx++] = (uint8_t)FELICA_CMD_POLLING; /* CMD: SENF_REQ                       */
 8017468:	7e7b      	ldrb	r3, [r7, #25]
 801746a:	1c5a      	adds	r2, r3, #1
 801746c:	767a      	strb	r2, [r7, #25]
 801746e:	f107 0220 	add.w	r2, r7, #32
 8017472:	4413      	add	r3, r2
 8017474:	2200      	movs	r2, #0
 8017476:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 801747a:	88bb      	ldrh	r3, [r7, #4]
 801747c:	0a1b      	lsrs	r3, r3, #8
 801747e:	b29a      	uxth	r2, r3
 8017480:	7e7b      	ldrb	r3, [r7, #25]
 8017482:	1c59      	adds	r1, r3, #1
 8017484:	7679      	strb	r1, [r7, #25]
 8017486:	b2d2      	uxtb	r2, r2
 8017488:	f107 0120 	add.w	r1, r7, #32
 801748c:	440b      	add	r3, r1
 801748e:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode & 0xFFU);  /* System Code (SC)                    */
 8017492:	7e7b      	ldrb	r3, [r7, #25]
 8017494:	1c5a      	adds	r2, r3, #1
 8017496:	767a      	strb	r2, [r7, #25]
 8017498:	88ba      	ldrh	r2, [r7, #4]
 801749a:	b2d2      	uxtb	r2, r2
 801749c:	f107 0120 	add.w	r1, r7, #32
 80174a0:	440b      	add	r3, r1
 80174a2:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = reqCode;                     /* Communication Parameter Request (RC)*/
 80174a6:	7e7b      	ldrb	r3, [r7, #25]
 80174a8:	1c5a      	adds	r2, r3, #1
 80174aa:	767a      	strb	r2, [r7, #25]
 80174ac:	f107 0220 	add.w	r2, r7, #32
 80174b0:	4413      	add	r3, r2
 80174b2:	79ba      	ldrb	r2, [r7, #6]
 80174b4:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = nbSlots;                     /* TimeSlot (TSN)                      */
 80174b8:	7e7b      	ldrb	r3, [r7, #25]
 80174ba:	1c5a      	adds	r2, r3, #1
 80174bc:	767a      	strb	r2, [r7, #25]
 80174be:	f107 0220 	add.w	r2, r7, #32
 80174c2:	4413      	add	r3, r2
 80174c4:	7efa      	ldrb	r2, [r7, #27]
 80174c6:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    
    /*******************************************************************************/
    /* NRT should not stop on reception - Use EMVCo mode to run NRT in nrt_emv     *
     * ERRORHANDLING_EMVCO has no special handling for NFC-F mode                  */
    curHandling = gRFAL.conf.eHandling;
 80174ca:	4b4f      	ldr	r3, [pc, #316]	; (8017608 <rfalFeliCaPoll+0x1d8>)
 80174cc:	79db      	ldrb	r3, [r3, #7]
 80174ce:	763b      	strb	r3, [r7, #24]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 80174d0:	2002      	movs	r0, #2
 80174d2:	f7fe fae5 	bl	8015aa0 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Run transceive blocking, 
     * Calculate Total Response Time in(64/fc): 
     *                       512 PICC process time + (n * 256 Time Slot duration)  */
    ret = rfalTransceiveBlockingTx( frame, 
 80174d6:	7e7b      	ldrb	r3, [r7, #25]
 80174d8:	b299      	uxth	r1, r3
                                    (uint16_t)frameIdx, 
                                    (uint8_t*)gRFAL.nfcfData.pollResponses, 
                                    RFAL_FELICA_POLL_RES_LEN, 
                                    &actLen,
                                    (RFAL_TXRX_FLAGS_DEFAULT),
                                    rfalConv64fcTo1fc( RFAL_FELICA_POLL_DELAY_TIME + (RFAL_FELICA_POLL_SLOT_TIME * ((uint32_t)nbSlots + 1U)) ) );
 80174da:	7efb      	ldrb	r3, [r7, #27]
    ret = rfalTransceiveBlockingTx( frame, 
 80174dc:	3303      	adds	r3, #3
 80174de:	039b      	lsls	r3, r3, #14
 80174e0:	f107 0010 	add.w	r0, r7, #16
 80174e4:	9302      	str	r3, [sp, #8]
 80174e6:	2300      	movs	r3, #0
 80174e8:	9301      	str	r3, [sp, #4]
 80174ea:	f107 030e 	add.w	r3, r7, #14
 80174ee:	9300      	str	r3, [sp, #0]
 80174f0:	2314      	movs	r3, #20
 80174f2:	4a46      	ldr	r2, [pc, #280]	; (801760c <rfalFeliCaPoll+0x1dc>)
 80174f4:	f7fe fd06 	bl	8015f04 <rfalTransceiveBlockingTx>
 80174f8:	4603      	mov	r3, r0
 80174fa:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* If Tx OK, Wait for all responses, store them as soon as they appear         */
    if( ret == ERR_NONE )
 80174fc:	8bfb      	ldrh	r3, [r7, #30]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d145      	bne.n	801758e <rfalFeliCaPoll+0x15e>
    {
        bool timeout;

        do 
        {
            ret = rfalTransceiveBlockingRx();
 8017502:	f7fe fd4b 	bl	8015f9c <rfalTransceiveBlockingRx>
 8017506:	4603      	mov	r3, r0
 8017508:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 801750a:	8bfb      	ldrh	r3, [r7, #30]
 801750c:	2b04      	cmp	r3, #4
 801750e:	d102      	bne.n	8017516 <rfalFeliCaPoll+0xe6>
            {
                /* Upon timeout the full Poll Delay + (Slot time)*(nbSlots) has expired */
                timeout = true;
 8017510:	2301      	movs	r3, #1
 8017512:	76bb      	strb	r3, [r7, #26]
 8017514:	e030      	b.n	8017578 <rfalFeliCaPoll+0x148>
            }
            else
            {
                /* Reception done, reEnabled Rx for following Slot */
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 8017516:	20d1      	movs	r0, #209	; 0xd1
 8017518:	f7ec fc2c 	bl	8003d74 <st25r3911ExecuteCommand>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 801751c:	20d5      	movs	r0, #213	; 0xd5
 801751e:	f7ec fc29 	bl	8003d74 <st25r3911ExecuteCommand>
                
                /* If the reception was OK, new device found */
                if( ret == ERR_NONE )
 8017522:	8bfb      	ldrh	r3, [r7, #30]
 8017524:	2b00      	cmp	r3, #0
 8017526:	d10e      	bne.n	8017546 <rfalFeliCaPoll+0x116>
                {
                   devDetected++;
 8017528:	7f7b      	ldrb	r3, [r7, #29]
 801752a:	3301      	adds	r3, #1
 801752c:	777b      	strb	r3, [r7, #29]
                   
                   /* Overwrite the Transceive context for the next reception */
                   gRFAL.TxRx.ctx.rxBuf = (uint8_t*)gRFAL.nfcfData.pollResponses[devDetected];
 801752e:	7f7a      	ldrb	r2, [r7, #29]
 8017530:	4613      	mov	r3, r2
 8017532:	009b      	lsls	r3, r3, #2
 8017534:	4413      	add	r3, r2
 8017536:	009b      	lsls	r3, r3, #2
 8017538:	3378      	adds	r3, #120	; 0x78
 801753a:	4a33      	ldr	r2, [pc, #204]	; (8017608 <rfalFeliCaPoll+0x1d8>)
 801753c:	4413      	add	r3, r2
 801753e:	3306      	adds	r3, #6
 8017540:	4a31      	ldr	r2, [pc, #196]	; (8017608 <rfalFeliCaPoll+0x1d8>)
 8017542:	6253      	str	r3, [r2, #36]	; 0x24
 8017544:	e002      	b.n	801754c <rfalFeliCaPoll+0x11c>
                }
                /* If the reception was not OK, mark as collision */
                else
                {
                    colDetected++;
 8017546:	7f3b      	ldrb	r3, [r7, #28]
 8017548:	3301      	adds	r3, #1
 801754a:	773b      	strb	r3, [r7, #28]
                }
                
                /* Check whether NRT has expired meanwhile  */
                timeout = st25r3911CheckReg( ST25R3911_REG_REGULATOR_RESULT, ST25R3911_REG_REGULATOR_RESULT_nrt_on, 0x00 );
 801754c:	2200      	movs	r2, #0
 801754e:	2102      	movs	r1, #2
 8017550:	202b      	movs	r0, #43	; 0x2b
 8017552:	f7eb ff61 	bl	8003418 <st25r3911CheckReg>
 8017556:	4603      	mov	r3, r0
 8017558:	76bb      	strb	r3, [r7, #26]
                if( !timeout )
 801755a:	7ebb      	ldrb	r3, [r7, #26]
 801755c:	f083 0301 	eor.w	r3, r3, #1
 8017560:	b2db      	uxtb	r3, r3
 8017562:	2b00      	cmp	r3, #0
 8017564:	d008      	beq.n	8017578 <rfalFeliCaPoll+0x148>
                {
                    /* Jump again into transceive Rx state for the following reception */
                    gRFAL.TxRx.status = ERR_BUSY;
 8017566:	4b28      	ldr	r3, [pc, #160]	; (8017608 <rfalFeliCaPoll+0x1d8>)
 8017568:	2202      	movs	r2, #2
 801756a:	82da      	strh	r2, [r3, #22]
                    gRFAL.state       = RFAL_STATE_TXRX;
 801756c:	4b26      	ldr	r3, [pc, #152]	; (8017608 <rfalFeliCaPoll+0x1d8>)
 801756e:	2203      	movs	r2, #3
 8017570:	701a      	strb	r2, [r3, #0]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 8017572:	4b25      	ldr	r3, [pc, #148]	; (8017608 <rfalFeliCaPoll+0x1d8>)
 8017574:	2251      	movs	r2, #81	; 0x51
 8017576:	751a      	strb	r2, [r3, #20]
                }
            }
        }while( ((nbSlots--) != 0U) && !timeout );
 8017578:	7efb      	ldrb	r3, [r7, #27]
 801757a:	1e5a      	subs	r2, r3, #1
 801757c:	76fa      	strb	r2, [r7, #27]
 801757e:	2b00      	cmp	r3, #0
 8017580:	d005      	beq.n	801758e <rfalFeliCaPoll+0x15e>
 8017582:	7ebb      	ldrb	r3, [r7, #26]
 8017584:	f083 0301 	eor.w	r3, r3, #1
 8017588:	b2db      	uxtb	r3, r3
 801758a:	2b00      	cmp	r3, #0
 801758c:	d1b9      	bne.n	8017502 <rfalFeliCaPoll+0xd2>
    }
    
    /*******************************************************************************/
    /* Restore NRT to normal mode - back to previous error handling */
    rfalSetErrorHandling( curHandling );
 801758e:	7e3b      	ldrb	r3, [r7, #24]
 8017590:	4618      	mov	r0, r3
 8017592:	f7fe fa85 	bl	8015aa0 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Assign output parameters if requested                                       */
    
    if( (pollResList != NULL) && (pollResListSize > 0U) && (devDetected > 0U) )
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	2b00      	cmp	r3, #0
 801759a:	d01c      	beq.n	80175d6 <rfalFeliCaPoll+0x1a6>
 801759c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d018      	beq.n	80175d6 <rfalFeliCaPoll+0x1a6>
 80175a4:	7f7b      	ldrb	r3, [r7, #29]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d015      	beq.n	80175d6 <rfalFeliCaPoll+0x1a6>
    {
        ST_MEMCPY( pollResList, gRFAL.nfcfData.pollResponses, (RFAL_FELICA_POLL_RES_LEN * (uint32_t)MIN(pollResListSize, devDetected) ) );
 80175aa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80175ae:	7f7b      	ldrb	r3, [r7, #29]
 80175b0:	429a      	cmp	r2, r3
 80175b2:	d206      	bcs.n	80175c2 <rfalFeliCaPoll+0x192>
 80175b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80175b8:	4613      	mov	r3, r2
 80175ba:	009b      	lsls	r3, r3, #2
 80175bc:	4413      	add	r3, r2
 80175be:	009b      	lsls	r3, r3, #2
 80175c0:	e004      	b.n	80175cc <rfalFeliCaPoll+0x19c>
 80175c2:	7f7a      	ldrb	r2, [r7, #29]
 80175c4:	4613      	mov	r3, r2
 80175c6:	009b      	lsls	r3, r3, #2
 80175c8:	4413      	add	r3, r2
 80175ca:	009b      	lsls	r3, r3, #2
 80175cc:	461a      	mov	r2, r3
 80175ce:	490f      	ldr	r1, [pc, #60]	; (801760c <rfalFeliCaPoll+0x1dc>)
 80175d0:	6838      	ldr	r0, [r7, #0]
 80175d2:	f001 fc10 	bl	8018df6 <memcpy>
    }
    
    if( devicesDetected != NULL )
 80175d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d002      	beq.n	80175e2 <rfalFeliCaPoll+0x1b2>
    {
        *devicesDetected = devDetected;
 80175dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175de:	7f7a      	ldrb	r2, [r7, #29]
 80175e0:	701a      	strb	r2, [r3, #0]
    }
    
    if( collisionsDetected != NULL )
 80175e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d002      	beq.n	80175ee <rfalFeliCaPoll+0x1be>
    {
        *collisionsDetected = colDetected;
 80175e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ea:	7f3a      	ldrb	r2, [r7, #28]
 80175ec:	701a      	strb	r2, [r3, #0]
    }
    
    return (( (colDetected != 0U) || (devDetected != 0U)) ? ERR_NONE : ret);
 80175ee:	7f3b      	ldrb	r3, [r7, #28]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d104      	bne.n	80175fe <rfalFeliCaPoll+0x1ce>
 80175f4:	7f7b      	ldrb	r3, [r7, #29]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d101      	bne.n	80175fe <rfalFeliCaPoll+0x1ce>
 80175fa:	8bfb      	ldrh	r3, [r7, #30]
 80175fc:	e000      	b.n	8017600 <rfalFeliCaPoll+0x1d0>
 80175fe:	2300      	movs	r3, #0
}
 8017600:	4618      	mov	r0, r3
 8017602:	3720      	adds	r7, #32
 8017604:	46bd      	mov	sp, r7
 8017606:	bd80      	pop	{r7, pc}
 8017608:	2000369c 	.word	0x2000369c
 801760c:	2000371a 	.word	0x2000371a

08017610 <rfalIsExtFieldOn>:



/*******************************************************************************/
bool rfalIsExtFieldOn( void )
{
 8017610:	b580      	push	{r7, lr}
 8017612:	af00      	add	r7, sp, #0
    return st25r3911IsExtFieldOn();
 8017614:	2240      	movs	r2, #64	; 0x40
 8017616:	2140      	movs	r1, #64	; 0x40
 8017618:	2030      	movs	r0, #48	; 0x30
 801761a:	f7eb fefd 	bl	8003418 <st25r3911CheckReg>
 801761e:	4603      	mov	r3, r0
}
 8017620:	4618      	mov	r0, r3
 8017622:	bd80      	pop	{r7, pc}

08017624 <rfalListenStart>:

#if RFAL_FEATURE_LISTEN_MODE

/*******************************************************************************/
ReturnCode rfalListenStart( uint32_t lmMask, const rfalLmConfPA *confA, const rfalLmConfPB *confB, const rfalLmConfPF *confF, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b084      	sub	sp, #16
 8017628:	af00      	add	r7, sp, #0
 801762a:	60f8      	str	r0, [r7, #12]
 801762c:	60b9      	str	r1, [r7, #8]
 801762e:	607a      	str	r2, [r7, #4]
 8017630:	603b      	str	r3, [r7, #0]
    NO_WARNING(confA);
    NO_WARNING(confB);
    NO_WARNING(confF);
    
    
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 8017632:	4b29      	ldr	r3, [pc, #164]	; (80176d8 <rfalListenStart+0xb4>)
 8017634:	2200      	movs	r2, #0
 8017636:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    
    
    /*******************************************************************************/
    if( ((lmMask & RFAL_LM_MASK_NFCA) != 0U) || ((lmMask & RFAL_LM_MASK_NFCB) != 0U) || ((lmMask & RFAL_LM_MASK_NFCF) != 0U) )
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017640:	2b00      	cmp	r3, #0
 8017642:	d109      	bne.n	8017658 <rfalListenStart+0x34>
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801764a:	2b00      	cmp	r3, #0
 801764c:	d104      	bne.n	8017658 <rfalListenStart+0x34>
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017654:	2b00      	cmp	r3, #0
 8017656:	d001      	beq.n	801765c <rfalListenStart+0x38>
    {
        return ERR_NOTSUPP;
 8017658:	2318      	movs	r3, #24
 801765a:	e038      	b.n	80176ce <rfalListenStart+0xaa>
    }
    
    
    /*******************************************************************************/
    if( (lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017662:	2b00      	cmp	r3, #0
 8017664:	d032      	beq.n	80176cc <rfalListenStart+0xa8>
    {
        gRFAL.state       = RFAL_STATE_LM;
 8017666:	4b1c      	ldr	r3, [pc, #112]	; (80176d8 <rfalListenStart+0xb4>)
 8017668:	2204      	movs	r2, #4
 801766a:	701a      	strb	r2, [r3, #0]
       
        gRFAL.Lm.rxBuf    = rxBuf;
 801766c:	4a1a      	ldr	r2, [pc, #104]	; (80176d8 <rfalListenStart+0xb4>)
 801766e:	69bb      	ldr	r3, [r7, #24]
 8017670:	6593      	str	r3, [r2, #88]	; 0x58
        gRFAL.Lm.rxBufLen = rxBufLen;
 8017672:	4a19      	ldr	r2, [pc, #100]	; (80176d8 <rfalListenStart+0xb4>)
 8017674:	8bbb      	ldrh	r3, [r7, #28]
 8017676:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
        gRFAL.Lm.rxLen    = rxLen;
 801767a:	4a17      	ldr	r2, [pc, #92]	; (80176d8 <rfalListenStart+0xb4>)
 801767c:	6a3b      	ldr	r3, [r7, #32]
 801767e:	6613      	str	r3, [r2, #96]	; 0x60
        *gRFAL.Lm.rxLen   = 0;
 8017680:	4b15      	ldr	r3, [pc, #84]	; (80176d8 <rfalListenStart+0xb4>)
 8017682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017684:	2200      	movs	r2, #0
 8017686:	801a      	strh	r2, [r3, #0]
        gRFAL.Lm.dataFlag = false;
 8017688:	4b13      	ldr	r3, [pc, #76]	; (80176d8 <rfalListenStart+0xb4>)
 801768a:	2200      	movs	r2, #0
 801768c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        
        /* Disable GPT trigger source */
        st25r3911ChangeRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_gptc_mask, ST25R3911_REG_GPT_CONTROL_gptc_no_trigger );
 8017690:	2200      	movs	r2, #0
 8017692:	21e0      	movs	r1, #224	; 0xe0
 8017694:	2011      	movs	r0, #17
 8017696:	f7ec fa74 	bl	8003b82 <st25r3911ChangeRegisterBits>
      
        /* On Bit Rate Detection Mode ST25R391x will filter incoming frames during MRT time starting on External Field On event, use 512/fc steps */
        st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo512fc( RFAL_LM_GT ) );
 801769a:	2102      	movs	r1, #2
 801769c:	200e      	movs	r0, #14
 801769e:	f7ec f9e5 	bl	8003a6c <st25r3911WriteRegister>
        
        /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
        st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 80176a2:	21e0      	movs	r1, #224	; 0xe0
 80176a4:	2005      	movs	r0, #5
 80176a6:	f7ec fa2b 	bl	8003b00 <st25r3911ClrRegisterBits>
        
        /* Enable External Field Detector */
        st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 80176aa:	2110      	movs	r1, #16
 80176ac:	2009      	movs	r0, #9
 80176ae:	f7ec fa4a 	bl	8003b46 <st25r3911SetRegisterBits>
      
        /* Enable Receiver */
        st25r3911ChangeRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_rx_en, ST25R3911_REG_OP_CONTROL_rx_en );
 80176b2:	2240      	movs	r2, #64	; 0x40
 80176b4:	2140      	movs	r1, #64	; 0x40
 80176b6:	2002      	movs	r0, #2
 80176b8:	f7ec fa63 	bl	8003b82 <st25r3911ChangeRegisterBits>
        
        /* Set Analog configurations for generic Listen mode */
        /* Not on SetState(POWER OFF) as otherwise would be applied on every Field Event */
        rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_ON) );
 80176bc:	2006      	movs	r0, #6
 80176be:	f7f5 fd0f 	bl	800d0e0 <rfalSetAnalogConfig>
        
        /* Initialize as POWER_OFF and set proper mode in RF Chip */
        rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 80176c2:	2001      	movs	r0, #1
 80176c4:	f000 f960 	bl	8017988 <rfalListenSetState>
    else
    {
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
    }
    
    return ERR_NONE;
 80176c8:	2300      	movs	r3, #0
 80176ca:	e000      	b.n	80176ce <rfalListenStart+0xaa>
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
 80176cc:	2305      	movs	r3, #5
}
 80176ce:	4618      	mov	r0, r3
 80176d0:	3710      	adds	r7, #16
 80176d2:	46bd      	mov	sp, r7
 80176d4:	bd80      	pop	{r7, pc}
 80176d6:	bf00      	nop
 80176d8:	2000369c 	.word	0x2000369c

080176dc <rfalRunListenModeWorker>:



/*******************************************************************************/
static ReturnCode rfalRunListenModeWorker( void )
{
 80176dc:	b580      	push	{r7, lr}
 80176de:	b082      	sub	sp, #8
 80176e0:	af00      	add	r7, sp, #0
    volatile uint32_t irqs;
    uint8_t           tmp;
    
    if( gRFAL.state != RFAL_STATE_LM )
 80176e2:	4b81      	ldr	r3, [pc, #516]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 80176e4:	781b      	ldrb	r3, [r3, #0]
 80176e6:	2b04      	cmp	r3, #4
 80176e8:	d001      	beq.n	80176ee <rfalRunListenModeWorker+0x12>
    {
        return ERR_WRONG_STATE;
 80176ea:	2321      	movs	r3, #33	; 0x21
 80176ec:	e0f8      	b.n	80178e0 <rfalRunListenModeWorker+0x204>
    }
    
    switch( gRFAL.Lm.state )
 80176ee:	4b7e      	ldr	r3, [pc, #504]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 80176f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80176f4:	3b01      	subs	r3, #1
 80176f6:	2b0f      	cmp	r3, #15
 80176f8:	f200 80e6 	bhi.w	80178c8 <rfalRunListenModeWorker+0x1ec>
 80176fc:	a201      	add	r2, pc, #4	; (adr r2, 8017704 <rfalRunListenModeWorker+0x28>)
 80176fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017702:	bf00      	nop
 8017704:	08017745 	.word	0x08017745
 8017708:	0801776b 	.word	0x0801776b
 801770c:	080178c5 	.word	0x080178c5
 8017710:	080178c9 	.word	0x080178c9
 8017714:	080178c5 	.word	0x080178c5
 8017718:	080178c5 	.word	0x080178c5
 801771c:	080178c5 	.word	0x080178c5
 8017720:	080178c5 	.word	0x080178c5
 8017724:	080178c5 	.word	0x080178c5
 8017728:	080178cd 	.word	0x080178cd
 801772c:	080178cd 	.word	0x080178cd
 8017730:	080178c5 	.word	0x080178c5
 8017734:	080178c5 	.word	0x080178c5
 8017738:	080178c5 	.word	0x080178c5
 801773c:	080178c5 	.word	0x080178c5
 8017740:	080178c5 	.word	0x080178c5
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            
            irqs = st25r3911GetInterrupt( (  ST25R3911_IRQ_MASK_EON ) );
 8017744:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8017748:	f7ec fcfa 	bl	8004140 <st25r3911GetInterrupt>
 801774c:	4603      	mov	r3, r0
 801774e:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	2b00      	cmp	r3, #0
 8017754:	f000 80bc 	beq.w	80178d0 <rfalRunListenModeWorker+0x1f4>
            {
              break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_EON) != 0U )
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801775e:	2b00      	cmp	r3, #0
 8017760:	f000 80b8 	beq.w	80178d4 <rfalRunListenModeWorker+0x1f8>
            {
                rfalListenSetState( RFAL_LM_STATE_IDLE );
 8017764:	2002      	movs	r0, #2
 8017766:	f000 f90f 	bl	8017988 <rfalListenSetState>
            
              
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_EOF ) );
 801776a:	f44f 6011 	mov.w	r0, #2320	; 0x910
 801776e:	f7ec fce7 	bl	8004140 <st25r3911GetInterrupt>
 8017772:	4603      	mov	r3, r0
 8017774:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	2b00      	cmp	r3, #0
 801777a:	f000 80ad 	beq.w	80178d8 <rfalRunListenModeWorker+0x1fc>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_NFCT) != 0U )
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017784:	2b00      	cmp	r3, #0
 8017786:	d011      	beq.n	80177ac <rfalRunListenModeWorker+0xd0>
            {
                /* Retrieve detected bitrate */
                uint8_t    newBr;
                st25r3911ReadRegister( ST25R3911_REG_NFCIP1_BIT_RATE, &newBr );
 8017788:	1cbb      	adds	r3, r7, #2
 801778a:	4619      	mov	r1, r3
 801778c:	201f      	movs	r0, #31
 801778e:	f7ec f845 	bl	800381c <st25r3911ReadRegister>
                newBr >>= ST25R3911_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 8017792:	78bb      	ldrb	r3, [r7, #2]
 8017794:	091b      	lsrs	r3, r3, #4
 8017796:	b2db      	uxtb	r3, r3
 8017798:	70bb      	strb	r3, [r7, #2]

                if (newBr > ST25R3911_REG_BIT_RATE_rxrate_424)
 801779a:	78bb      	ldrb	r3, [r7, #2]
 801779c:	2b02      	cmp	r3, #2
 801779e:	d901      	bls.n	80177a4 <rfalRunListenModeWorker+0xc8>
                {
                    newBr = ST25R3911_REG_BIT_RATE_rxrate_424;
 80177a0:	2302      	movs	r3, #2
 80177a2:	70bb      	strb	r3, [r7, #2]
                }

                gRFAL.Lm.brDetected = (rfalBitRate)(newBr); /* PRQA S 4342 # MISRA 10.5 - Guaranteed that no invalid enum values may be created. See also equalityGuard_RFAL_BR_106 ff.*/
 80177a4:	78ba      	ldrb	r2, [r7, #2]
 80177a6:	4b50      	ldr	r3, [pc, #320]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 80177a8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            }
            if( ((irqs & ST25R3911_IRQ_MASK_RXE) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	f003 0310 	and.w	r3, r3, #16
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d074      	beq.n	80178a0 <rfalRunListenModeWorker+0x1c4>
 80177b6:	4b4c      	ldr	r3, [pc, #304]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 80177b8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80177bc:	2bff      	cmp	r3, #255	; 0xff
 80177be:	d06f      	beq.n	80178a0 <rfalRunListenModeWorker+0x1c4>
            {
                irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_ERR1 ) );
 80177c0:	484a      	ldr	r0, [pc, #296]	; (80178ec <rfalRunListenModeWorker+0x210>)
 80177c2:	f7ec fcbd 	bl	8004140 <st25r3911GetInterrupt>
 80177c6:	4603      	mov	r3, r0
 80177c8:	607b      	str	r3, [r7, #4]
                
                if( ((irqs & ST25R3911_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3911_IRQ_MASK_PAR) != 0U) || ((irqs & ST25R3911_IRQ_MASK_ERR1) != 0U) )
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d109      	bne.n	80177e8 <rfalRunListenModeWorker+0x10c>
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d104      	bne.n	80177e8 <rfalRunListenModeWorker+0x10c>
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d012      	beq.n	801780e <rfalRunListenModeWorker+0x132>
                {
                    /* nfc_ar may have triggered RF Collision Avoidance, disable it before executing Clear (Stop All activities) */
                    st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 80177e8:	2101      	movs	r1, #1
 80177ea:	2003      	movs	r0, #3
 80177ec:	f7ec f988 	bl	8003b00 <st25r3911ClrRegisterBits>
                    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 80177f0:	20c2      	movs	r0, #194	; 0xc2
 80177f2:	f7ec fabf 	bl	8003d74 <st25r3911ExecuteCommand>
                    st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 80177f6:	20d1      	movs	r0, #209	; 0xd1
 80177f8:	f7ec fabc 	bl	8003d74 <st25r3911ExecuteCommand>
                    st25r3911SetRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 80177fc:	2101      	movs	r1, #1
 80177fe:	2003      	movs	r0, #3
 8017800:	f7ec f9a1 	bl	8003b46 <st25r3911SetRegisterBits>
                    st25r3911TxOff();
 8017804:	2108      	movs	r1, #8
 8017806:	2002      	movs	r0, #2
 8017808:	f7ec f97a 	bl	8003b00 <st25r3911ClrRegisterBits>
                    break; /* A bad reception occurred, remain in same state */
 801780c:	e067      	b.n	80178de <rfalRunListenModeWorker+0x202>
                }
                
                /* Retrieve received data */
                st25r3911ReadRegister(ST25R3911_REG_FIFO_RX_STATUS1, &tmp);
 801780e:	1cfb      	adds	r3, r7, #3
 8017810:	4619      	mov	r1, r3
 8017812:	201a      	movs	r0, #26
 8017814:	f7ec f802 	bl	800381c <st25r3911ReadRegister>
                *gRFAL.Lm.rxLen = tmp;
 8017818:	78fa      	ldrb	r2, [r7, #3]
 801781a:	4b33      	ldr	r3, [pc, #204]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 801781c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801781e:	b292      	uxth	r2, r2
 8017820:	801a      	strh	r2, [r3, #0]
                
                st25r3911ReadFifo( gRFAL.Lm.rxBuf, (uint8_t)MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 8017822:	4b31      	ldr	r3, [pc, #196]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 8017824:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8017826:	4b30      	ldr	r3, [pc, #192]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 8017828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801782a:	881a      	ldrh	r2, [r3, #0]
 801782c:	4b2e      	ldr	r3, [pc, #184]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 801782e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017832:	3307      	adds	r3, #7
 8017834:	08db      	lsrs	r3, r3, #3
 8017836:	b29b      	uxth	r3, r3
 8017838:	429a      	cmp	r2, r3
 801783a:	d204      	bcs.n	8017846 <rfalRunListenModeWorker+0x16a>
 801783c:	4b2a      	ldr	r3, [pc, #168]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 801783e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017840:	881b      	ldrh	r3, [r3, #0]
 8017842:	b2db      	uxtb	r3, r3
 8017844:	e005      	b.n	8017852 <rfalRunListenModeWorker+0x176>
 8017846:	4b28      	ldr	r3, [pc, #160]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 8017848:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801784c:	3307      	adds	r3, #7
 801784e:	08db      	lsrs	r3, r3, #3
 8017850:	b2db      	uxtb	r3, r3
 8017852:	4619      	mov	r1, r3
 8017854:	f7ec fa46 	bl	8003ce4 <st25r3911ReadFifo>
                
                /* Check if the data we got has at least the CRC and remove it, otherwise leave at 0 */
                *gRFAL.Lm.rxLen  -= ((*gRFAL.Lm.rxLen > RFAL_CRC_LEN) ? RFAL_CRC_LEN : *gRFAL.Lm.rxLen);
 8017858:	4b23      	ldr	r3, [pc, #140]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 801785a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801785c:	8819      	ldrh	r1, [r3, #0]
 801785e:	4b22      	ldr	r3, [pc, #136]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 8017860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017862:	881b      	ldrh	r3, [r3, #0]
 8017864:	2b02      	cmp	r3, #2
 8017866:	bf28      	it	cs
 8017868:	2302      	movcs	r3, #2
 801786a:	b29a      	uxth	r2, r3
 801786c:	4b1e      	ldr	r3, [pc, #120]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 801786e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017870:	1a8a      	subs	r2, r1, r2
 8017872:	b292      	uxth	r2, r2
 8017874:	801a      	strh	r2, [r3, #0]
                *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 8017876:	4b1c      	ldr	r3, [pc, #112]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 8017878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801787a:	881a      	ldrh	r2, [r3, #0]
 801787c:	4b1a      	ldr	r3, [pc, #104]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 801787e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017880:	00d2      	lsls	r2, r2, #3
 8017882:	b292      	uxth	r2, r2
 8017884:	801a      	strh	r2, [r3, #0]
                gRFAL.Lm.dataFlag = true;
 8017886:	4b18      	ldr	r3, [pc, #96]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 8017888:	2201      	movs	r2, #1
 801788a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 801788e:	4b16      	ldr	r3, [pc, #88]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 8017890:	799b      	ldrb	r3, [r3, #6]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d015      	beq.n	80178c2 <rfalRunListenModeWorker+0x1e6>
 8017896:	2100      	movs	r1, #0
 8017898:	2001      	movs	r0, #1
 801789a:	f7ec f8a3 	bl	80039e4 <st25r3911WriteTestRegister>
 801789e:	e010      	b.n	80178c2 <rfalRunListenModeWorker+0x1e6>
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && (!gRFAL.Lm.dataFlag) )
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d018      	beq.n	80178dc <rfalRunListenModeWorker+0x200>
 80178aa:	4b0f      	ldr	r3, [pc, #60]	; (80178e8 <rfalRunListenModeWorker+0x20c>)
 80178ac:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80178b0:	f083 0301 	eor.w	r3, r3, #1
 80178b4:	b2db      	uxtb	r3, r3
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d010      	beq.n	80178dc <rfalRunListenModeWorker+0x200>
            {
                rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 80178ba:	2001      	movs	r0, #1
 80178bc:	f000 f864 	bl	8017988 <rfalListenSetState>
            }
            else
            {
                /* MISRA 15.7 - Empty else */
            }
            break;
 80178c0:	e00c      	b.n	80178dc <rfalRunListenModeWorker+0x200>
 80178c2:	e00b      	b.n	80178dc <rfalRunListenModeWorker+0x200>
            case RFAL_LM_STATE_SLEEP_AF:
            case RFAL_LM_STATE_READY_Ax:
            case RFAL_LM_STATE_CARDEMU_4A:
            case RFAL_LM_STATE_CARDEMU_4B:
            case RFAL_LM_STATE_CARDEMU_3:
                return ERR_INTERNAL;
 80178c4:	230c      	movs	r3, #12
 80178c6:	e00b      	b.n	80178e0 <rfalRunListenModeWorker+0x204>
            case RFAL_LM_STATE_TARGET_A:
                break;
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 80178c8:	2321      	movs	r3, #33	; 0x21
 80178ca:	e009      	b.n	80178e0 <rfalRunListenModeWorker+0x204>
                break;
 80178cc:	bf00      	nop
 80178ce:	e006      	b.n	80178de <rfalRunListenModeWorker+0x202>
              break;  /* No interrupt to process */
 80178d0:	bf00      	nop
 80178d2:	e004      	b.n	80178de <rfalRunListenModeWorker+0x202>
                break;
 80178d4:	bf00      	nop
 80178d6:	e002      	b.n	80178de <rfalRunListenModeWorker+0x202>
                break;  /* No interrupt to process */
 80178d8:	bf00      	nop
 80178da:	e000      	b.n	80178de <rfalRunListenModeWorker+0x202>
            break;
 80178dc:	bf00      	nop
    }
    return ERR_NONE;
 80178de:	2300      	movs	r3, #0
}
 80178e0:	4618      	mov	r0, r3
 80178e2:	3708      	adds	r7, #8
 80178e4:	46bd      	mov	sp, r7
 80178e6:	bd80      	pop	{r7, pc}
 80178e8:	2000369c 	.word	0x2000369c
 80178ec:	00f00810 	.word	0x00f00810

080178f0 <rfalListenStop>:


/*******************************************************************************/
ReturnCode rfalListenStop( void )
{
 80178f0:	b580      	push	{r7, lr}
 80178f2:	af00      	add	r7, sp, #0
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 80178f4:	4b0b      	ldr	r3, [pc, #44]	; (8017924 <rfalListenStop+0x34>)
 80178f6:	2200      	movs	r2, #0
 80178f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
    /*Check if Observation Mode was enabled and disable it on ST25R391x */
    rfalCheckDisableObsMode();
 80178fc:	4b09      	ldr	r3, [pc, #36]	; (8017924 <rfalListenStop+0x34>)
 80178fe:	799b      	ldrb	r3, [r3, #6]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d003      	beq.n	801790c <rfalListenStop+0x1c>
 8017904:	2100      	movs	r1, #0
 8017906:	2001      	movs	r0, #1
 8017908:	f7ec f86c 	bl	80039e4 <st25r3911WriteTestRegister>
  
    /* Disable Receiver and Transmitter */
    rfalFieldOff();
 801790c:	f7fe f98e 	bl	8015c2c <rfalFieldOff>
    
    /* As there's no Off mode, set default value: ISO14443A with automatic RF Collision Avoidance Off */
    st25r3911WriteRegister( ST25R3911_REG_MODE, (ST25R3911_REG_MODE_om_iso14443a | ST25R3911_REG_MODE_nfc_ar_off) );
 8017910:	2108      	movs	r1, #8
 8017912:	2003      	movs	r0, #3
 8017914:	f7ec f8aa 	bl	8003a6c <st25r3911WriteRegister>
    
    /* Set Analog configurations for Listen Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_OFF) );
 8017918:	2007      	movs	r0, #7
 801791a:	f7f5 fbe1 	bl	800d0e0 <rfalSetAnalogConfig>
        
    return ERR_NONE;
 801791e:	2300      	movs	r3, #0
}
 8017920:	4618      	mov	r0, r3
 8017922:	bd80      	pop	{r7, pc}
 8017924:	2000369c 	.word	0x2000369c

08017928 <rfalListenSleepStart>:


/*******************************************************************************/
/*  PRQA S 3673 1 # MISRA 8.13 - ST25R3911B does not support Listen mode. Implementation for other chips will modify rxBuf and rxLen */
ReturnCode rfalListenSleepStart( rfalLmState sleepSt, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 8017928:	b480      	push	{r7}
 801792a:	b085      	sub	sp, #20
 801792c:	af00      	add	r7, sp, #0
 801792e:	60b9      	str	r1, [r7, #8]
 8017930:	607b      	str	r3, [r7, #4]
 8017932:	4603      	mov	r3, r0
 8017934:	73fb      	strb	r3, [r7, #15]
 8017936:	4613      	mov	r3, r2
 8017938:	81bb      	strh	r3, [r7, #12]
    NO_WARNING(sleepSt);
    NO_WARNING(rxBuf);
    NO_WARNING(rxBufLen);
    NO_WARNING(rxLen);
    
    return ERR_NOTSUPP;
 801793a:	2318      	movs	r3, #24
}
 801793c:	4618      	mov	r0, r3
 801793e:	3714      	adds	r7, #20
 8017940:	46bd      	mov	sp, r7
 8017942:	bc80      	pop	{r7}
 8017944:	4770      	bx	lr
	...

08017948 <rfalListenGetState>:


/*******************************************************************************/
rfalLmState rfalListenGetState( bool *dataFlag, rfalBitRate *lastBR )
{
 8017948:	b480      	push	{r7}
 801794a:	b083      	sub	sp, #12
 801794c:	af00      	add	r7, sp, #0
 801794e:	6078      	str	r0, [r7, #4]
 8017950:	6039      	str	r1, [r7, #0]
    /* Allow state retrieval even if gRFAL.state != RFAL_STATE_LM so  *
     * that this Lm state can be used by caller after activation      */

    if( lastBR != NULL )
 8017952:	683b      	ldr	r3, [r7, #0]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d004      	beq.n	8017962 <rfalListenGetState+0x1a>
    {
        *lastBR = gRFAL.Lm.brDetected;
 8017958:	4b0a      	ldr	r3, [pc, #40]	; (8017984 <rfalListenGetState+0x3c>)
 801795a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 801795e:	683b      	ldr	r3, [r7, #0]
 8017960:	701a      	strb	r2, [r3, #0]
    }
    
    if( dataFlag != NULL )
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d004      	beq.n	8017972 <rfalListenGetState+0x2a>
    {
        *dataFlag = gRFAL.Lm.dataFlag;
 8017968:	4b06      	ldr	r3, [pc, #24]	; (8017984 <rfalListenGetState+0x3c>)
 801796a:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	701a      	strb	r2, [r3, #0]
    }
    
    return gRFAL.Lm.state;
 8017972:	4b04      	ldr	r3, [pc, #16]	; (8017984 <rfalListenGetState+0x3c>)
 8017974:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
}
 8017978:	4618      	mov	r0, r3
 801797a:	370c      	adds	r7, #12
 801797c:	46bd      	mov	sp, r7
 801797e:	bc80      	pop	{r7}
 8017980:	4770      	bx	lr
 8017982:	bf00      	nop
 8017984:	2000369c 	.word	0x2000369c

08017988 <rfalListenSetState>:


/*******************************************************************************/
ReturnCode rfalListenSetState( rfalLmState newSt )
{
 8017988:	b580      	push	{r7, lr}
 801798a:	b084      	sub	sp, #16
 801798c:	af00      	add	r7, sp, #0
 801798e:	4603      	mov	r3, r0
 8017990:	71fb      	strb	r3, [r7, #7]
    bool        reSetState;
        
    /*rfalLogD( "RFAL: curState: %02X newState: %02X \r\n", gRFAL.Lm.state, newSt );*/
    
    /* SetState clears the Data flag */
    gRFAL.Lm.dataFlag = false;
 8017992:	4b62      	ldr	r3, [pc, #392]	; (8017b1c <rfalListenSetState+0x194>)
 8017994:	2200      	movs	r2, #0
 8017996:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    newState          = newSt;
 801799a:	79fb      	ldrb	r3, [r7, #7]
 801799c:	73fb      	strb	r3, [r7, #15]
    ret               = ERR_NONE;
 801799e:	2300      	movs	r3, #0
 80179a0:	81bb      	strh	r3, [r7, #12]
    
    do{
        reSetState = false;
 80179a2:	2300      	movs	r3, #0
 80179a4:	73bb      	strb	r3, [r7, #14]

        /*******************************************************************************/
        switch( newState )
 80179a6:	7bfb      	ldrb	r3, [r7, #15]
 80179a8:	3b01      	subs	r3, #1
 80179aa:	2b0f      	cmp	r3, #15
 80179ac:	f200 80a2 	bhi.w	8017af4 <rfalListenSetState+0x16c>
 80179b0:	a201      	add	r2, pc, #4	; (adr r2, 80179b8 <rfalListenSetState+0x30>)
 80179b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179b6:	bf00      	nop
 80179b8:	080179f9 	.word	0x080179f9
 80179bc:	08017a57 	.word	0x08017a57
 80179c0:	08017af1 	.word	0x08017af1
 80179c4:	08017af5 	.word	0x08017af5
 80179c8:	08017af1 	.word	0x08017af1
 80179cc:	08017af1 	.word	0x08017af1
 80179d0:	08017af1 	.word	0x08017af1
 80179d4:	08017af1 	.word	0x08017af1
 80179d8:	08017af1 	.word	0x08017af1
 80179dc:	08017af9 	.word	0x08017af9
 80179e0:	08017af9 	.word	0x08017af9
 80179e4:	08017af1 	.word	0x08017af1
 80179e8:	08017af1 	.word	0x08017af1
 80179ec:	08017af1 	.word	0x08017af1
 80179f0:	08017af1 	.word	0x08017af1
 80179f4:	08017af1 	.word	0x08017af1
            /*******************************************************************************/
            case RFAL_LM_STATE_POWER_OFF:
                
                /*******************************************************************************/
                /* Disable nfc_ar as RF Collision Avoidance timer may have already started */
                st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 80179f8:	2101      	movs	r1, #1
 80179fa:	2003      	movs	r0, #3
 80179fc:	f7ec f880 	bl	8003b00 <st25r3911ClrRegisterBits>
                
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 8017a00:	20c2      	movs	r0, #194	; 0xc2
 8017a02:	f7ec f9b7 	bl	8003d74 <st25r3911ExecuteCommand>
                    
                /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                st25r3911TxOff();
 8017a06:	2108      	movs	r1, #8
 8017a08:	2002      	movs	r0, #2
 8017a0a:	f7ec f879 	bl	8003b00 <st25r3911ClrRegisterBits>
                
                /*******************************************************************************/
                /* Ensure that the NFCIP1 mode is disabled */
                st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_nfc_f0 );
 8017a0e:	2120      	movs	r1, #32
 8017a10:	2005      	movs	r0, #5
 8017a12:	f7ec f875 	bl	8003b00 <st25r3911ClrRegisterBits>
                
                
                /*******************************************************************************/
                /* Clear and enable required IRQs */
                st25r3911DisableInterrupts( ST25R3911_IRQ_MASK_ALL );
 8017a16:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017a1a:	f7ec fbd5 	bl	80041c8 <st25r3911DisableInterrupts>
                
                
                st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_RXS | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_ERR1 |
 8017a1e:	4840      	ldr	r0, [pc, #256]	; (8017b20 <rfalListenSetState+0x198>)
 8017a20:	f7ec fb8e 	bl	8004140 <st25r3911GetInterrupt>
                 * If the interrupt status register is being read when NFCT is trigerred, the  *
                 * IRQ line might go low and NFCT is not signalled on the status register.     *
                 * For initial bitrate detection, mask RXS, only wait for NFCT and RXE.        */
                /*******************************************************************************/
                
                st25r3911EnableInterrupts( (ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_ERR1 |
 8017a24:	483f      	ldr	r0, [pc, #252]	; (8017b24 <rfalListenSetState+0x19c>)
 8017a26:	f7ec fbc3 	bl	80041b0 <st25r3911EnableInterrupts>
                                            ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_RXE ) );
                
                /*******************************************************************************/
                /* Clear the bitRate previously detected */
                gRFAL.Lm.brDetected = RFAL_BR_KEEP;
 8017a2a:	4b3c      	ldr	r3, [pc, #240]	; (8017b1c <rfalListenSetState+0x194>)
 8017a2c:	22ff      	movs	r2, #255	; 0xff
 8017a2e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                
                
                /*******************************************************************************/
                /* Apply the BitRate detection mode mode */
                st25r3911WriteRegister( ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_targ | ST25R3911_REG_MODE_om_bit_rate_detection | ST25R3911_REG_MODE_nfc_ar_on)  );
 8017a32:	2181      	movs	r1, #129	; 0x81
 8017a34:	2003      	movs	r0, #3
 8017a36:	f7ec f819 	bl	8003a6c <st25r3911WriteRegister>
                
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911 Errata #1.3                            */
                /* Even though bitrate is going to be detected the bitrate must be set to      *
                 * 106kbps to get correct 106kbps parity                                       */
                st25r3911WriteRegister( ST25R3911_REG_BIT_RATE, (ST25R3911_REG_BIT_RATE_txrate_106 | ST25R3911_REG_BIT_RATE_rxrate_106) );
 8017a3a:	2100      	movs	r1, #0
 8017a3c:	2004      	movs	r0, #4
 8017a3e:	f7ec f815 	bl	8003a6c <st25r3911WriteRegister>
                /*******************************************************************************/
                
                
                /*******************************************************************************/
                /* Check if external Field is already On */
                if( rfalIsExtFieldOn() )
 8017a42:	f7ff fde5 	bl	8017610 <rfalIsExtFieldOn>
 8017a46:	4603      	mov	r3, r0
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d057      	beq.n	8017afc <rfalListenSetState+0x174>
                {
                    reSetState = true;
 8017a4c:	2301      	movs	r3, #1
 8017a4e:	73bb      	strb	r3, [r7, #14]
                    newState   = RFAL_LM_STATE_IDLE;                         /* Set IDLE state */
 8017a50:	2302      	movs	r3, #2
 8017a52:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8017a54:	e052      	b.n	8017afc <rfalListenSetState+0x174>
                 *      
                 * Ensure that when upper layer calls SetState(IDLE), it restores initial 
                 * configuration and that check whether an external Field is still present     */
                 
                /* nfc_ar may have triggered RF Collision Avoidance, disable it before executing Clear (Stop All activities) */
                st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 8017a56:	2101      	movs	r1, #1
 8017a58:	2003      	movs	r0, #3
 8017a5a:	f7ec f851 	bl	8003b00 <st25r3911ClrRegisterBits>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 8017a5e:	20c2      	movs	r0, #194	; 0xc2
 8017a60:	f7ec f988 	bl	8003d74 <st25r3911ExecuteCommand>
                st25r3911SetRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 8017a64:	2101      	movs	r1, #1
 8017a66:	2003      	movs	r0, #3
 8017a68:	f7ec f86d 	bl	8003b46 <st25r3911SetRegisterBits>
                
                /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                st25r3911TxOff();
 8017a6c:	2108      	movs	r1, #8
 8017a6e:	2002      	movs	r0, #2
 8017a70:	f7ec f846 	bl	8003b00 <st25r3911ClrRegisterBits>

                
                /* Load 2nd/3rd stage gain setting from registers into the receiver */
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 8017a74:	20d5      	movs	r0, #213	; 0xd5
 8017a76:	f7ec f97d 	bl	8003d74 <st25r3911ExecuteCommand>
                
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911 Errata #1.4                            */
                /* Enable; disable; enable mixer to make sure the digital decoder is in        *
                 * high state. This also switches the demodulator to mixer mode.               */
                st25r3911ReadRegister( ST25R3911_REG_RX_CONF1, &tmp );
 8017a7a:	f107 030b 	add.w	r3, r7, #11
 8017a7e:	4619      	mov	r1, r3
 8017a80:	200a      	movs	r0, #10
 8017a82:	f7eb fecb 	bl	800381c <st25r3911ReadRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (tmp | ST25R3911_REG_RX_CONF1_amd_sel) );
 8017a86:	7afb      	ldrb	r3, [r7, #11]
 8017a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a8c:	b2db      	uxtb	r3, r3
 8017a8e:	4619      	mov	r1, r3
 8017a90:	200a      	movs	r0, #10
 8017a92:	f7eb ffeb 	bl	8003a6c <st25r3911WriteRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (uint8_t)(tmp & ~ST25R3911_REG_RX_CONF1_amd_sel) );
 8017a96:	7afb      	ldrb	r3, [r7, #11]
 8017a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017a9c:	b2db      	uxtb	r3, r3
 8017a9e:	4619      	mov	r1, r3
 8017aa0:	200a      	movs	r0, #10
 8017aa2:	f7eb ffe3 	bl	8003a6c <st25r3911WriteRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (tmp | ST25R3911_REG_RX_CONF1_amd_sel) );
 8017aa6:	7afb      	ldrb	r3, [r7, #11]
 8017aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017aac:	b2db      	uxtb	r3, r3
 8017aae:	4619      	mov	r1, r3
 8017ab0:	200a      	movs	r0, #10
 8017ab2:	f7eb ffdb 	bl	8003a6c <st25r3911WriteRegister>
                /*******************************************************************************/
                
                /* ReEnable the receiver */
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 8017ab6:	20d1      	movs	r0, #209	; 0xd1
 8017ab8:	f7ec f95c 	bl	8003d74 <st25r3911ExecuteCommand>
                
                
                /* If external Field is no longer detected go back to POWER_OFF */
                if( !st25r3911IsExtFieldOn() )
 8017abc:	2240      	movs	r2, #64	; 0x40
 8017abe:	2140      	movs	r1, #64	; 0x40
 8017ac0:	2030      	movs	r0, #48	; 0x30
 8017ac2:	f7eb fca9 	bl	8003418 <st25r3911CheckReg>
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	f083 0301 	eor.w	r3, r3, #1
 8017acc:	b2db      	uxtb	r3, r3
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d003      	beq.n	8017ada <rfalListenSetState+0x152>
                {
                    reSetState = true;
 8017ad2:	2301      	movs	r3, #1
 8017ad4:	73bb      	strb	r3, [r7, #14]
                    newState   = RFAL_LM_STATE_POWER_OFF;                    /* Set POWER_OFF state */
 8017ad6:	2301      	movs	r3, #1
 8017ad8:	73fb      	strb	r3, [r7, #15]
                }

                /*******************************************************************************/
                /*Check if Observation Mode is enabled and set it on ST25R391x */
                rfalCheckEnableObsModeRx();
 8017ada:	4b10      	ldr	r3, [pc, #64]	; (8017b1c <rfalListenSetState+0x194>)
 8017adc:	799b      	ldrb	r3, [r3, #6]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d00e      	beq.n	8017b00 <rfalListenSetState+0x178>
 8017ae2:	4b0e      	ldr	r3, [pc, #56]	; (8017b1c <rfalListenSetState+0x194>)
 8017ae4:	799b      	ldrb	r3, [r3, #6]
 8017ae6:	4619      	mov	r1, r3
 8017ae8:	2001      	movs	r0, #1
 8017aea:	f7eb ff7b 	bl	80039e4 <st25r3911WriteTestRegister>
                break;
 8017aee:	e007      	b.n	8017b00 <rfalListenSetState+0x178>
            case RFAL_LM_STATE_SLEEP_A:
            case RFAL_LM_STATE_SLEEP_B:
            case RFAL_LM_STATE_SLEEP_AF:
            case RFAL_LM_STATE_CARDEMU_4A:
            case RFAL_LM_STATE_CARDEMU_4B:
                return ERR_NOTSUPP;
 8017af0:	2318      	movs	r3, #24
 8017af2:	e00f      	b.n	8017b14 <rfalListenSetState+0x18c>
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 8017af4:	2321      	movs	r3, #33	; 0x21
 8017af6:	e00d      	b.n	8017b14 <rfalListenSetState+0x18c>
                break;
 8017af8:	bf00      	nop
 8017afa:	e002      	b.n	8017b02 <rfalListenSetState+0x17a>
                break;
 8017afc:	bf00      	nop
 8017afe:	e000      	b.n	8017b02 <rfalListenSetState+0x17a>
                break;
 8017b00:	bf00      	nop
        }
    }
    while( reSetState );
 8017b02:	7bbb      	ldrb	r3, [r7, #14]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	f47f af4c 	bne.w	80179a2 <rfalListenSetState+0x1a>
    
    gRFAL.Lm.state = newState;
 8017b0a:	4a04      	ldr	r2, [pc, #16]	; (8017b1c <rfalListenSetState+0x194>)
 8017b0c:	7bfb      	ldrb	r3, [r7, #15]
 8017b0e:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
    
    return ret;
 8017b12:	89bb      	ldrh	r3, [r7, #12]
}
 8017b14:	4618      	mov	r0, r3
 8017b16:	3710      	adds	r7, #16
 8017b18:	46bd      	mov	sp, r7
 8017b1a:	bd80      	pop	{r7, pc}
 8017b1c:	2000369c 	.word	0x2000369c
 8017b20:	00f01930 	.word	0x00f01930
 8017b24:	00f01910 	.word	0x00f01910

08017b28 <rfalWakeUpModeStart>:

#if RFAL_FEATURE_WAKEUP_MODE

/*******************************************************************************/
ReturnCode rfalWakeUpModeStart( const rfalWakeUpConfig *config )
{
 8017b28:	b5b0      	push	{r4, r5, r7, lr}
 8017b2a:	b086      	sub	sp, #24
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
    uint8_t                reg;
    uint32_t               irqs;
    
    /* The Wake-Up procedure is explained in detail in Application Note: AN4985 */
    
    if( config == NULL )
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d130      	bne.n	8017b98 <rfalWakeUpModeStart+0x70>
    {
        gRFAL.wum.cfg.period      = RFAL_WUM_PERIOD_500MS;
 8017b36:	4bad      	ldr	r3, [pc, #692]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017b38:	2214      	movs	r2, #20
 8017b3a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gRFAL.wum.cfg.irqTout     = false;
 8017b3e:	4bab      	ldr	r3, [pc, #684]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017b40:	2200      	movs	r2, #0
 8017b42:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gRFAL.wum.cfg.swTagDetect = false;
 8017b46:	4ba9      	ldr	r3, [pc, #676]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017b48:	2200      	movs	r2, #0
 8017b4a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      
        gRFAL.wum.cfg.indAmp.enabled   = true;
 8017b4e:	4ba7      	ldr	r3, [pc, #668]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017b50:	2201      	movs	r2, #1
 8017b52:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        gRFAL.wum.cfg.indPha.enabled   = true;
 8017b56:	4ba5      	ldr	r3, [pc, #660]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017b58:	2201      	movs	r2, #1
 8017b5a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
        gRFAL.wum.cfg.cap.enabled      = false;
 8017b5e:	4ba3      	ldr	r3, [pc, #652]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017b60:	2200      	movs	r2, #0
 8017b62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        gRFAL.wum.cfg.indAmp.delta     = 2U;
 8017b66:	4ba1      	ldr	r3, [pc, #644]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017b68:	2202      	movs	r2, #2
 8017b6a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 8017b6e:	4b9f      	ldr	r3, [pc, #636]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017b70:	22ff      	movs	r2, #255	; 0xff
 8017b72:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 8017b76:	4b9d      	ldr	r3, [pc, #628]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017b78:	2200      	movs	r2, #0
 8017b7a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        gRFAL.wum.cfg.indPha.delta     = 2U;
 8017b7e:	4b9b      	ldr	r3, [pc, #620]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017b80:	2202      	movs	r2, #2
 8017b82:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
        gRFAL.wum.cfg.indPha.reference = RFAL_WUM_REFERENCE_AUTO;
 8017b86:	4b99      	ldr	r3, [pc, #612]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017b88:	22ff      	movs	r2, #255	; 0xff
 8017b8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        gRFAL.wum.cfg.indPha.autoAvg   = false;
 8017b8e:	4b97      	ldr	r3, [pc, #604]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017b90:	2200      	movs	r2, #0
 8017b92:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8017b96:	e00e      	b.n	8017bb6 <rfalWakeUpModeStart+0x8e>
    }
    else
    {
        gRFAL.wum.cfg = *config;
 8017b98:	4b94      	ldr	r3, [pc, #592]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017b9a:	687a      	ldr	r2, [r7, #4]
 8017b9c:	3369      	adds	r3, #105	; 0x69
 8017b9e:	6811      	ldr	r1, [r2, #0]
 8017ba0:	6855      	ldr	r5, [r2, #4]
 8017ba2:	6894      	ldr	r4, [r2, #8]
 8017ba4:	68d0      	ldr	r0, [r2, #12]
 8017ba6:	6019      	str	r1, [r3, #0]
 8017ba8:	605d      	str	r5, [r3, #4]
 8017baa:	609c      	str	r4, [r3, #8]
 8017bac:	60d8      	str	r0, [r3, #12]
 8017bae:	6911      	ldr	r1, [r2, #16]
 8017bb0:	6119      	str	r1, [r3, #16]
 8017bb2:	7d12      	ldrb	r2, [r2, #20]
 8017bb4:	751a      	strb	r2, [r3, #20]
    }
    
    
    /* Check for valid configuration */
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 8017bb6:	4b8d      	ldr	r3, [pc, #564]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017bb8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d009      	beq.n	8017bd4 <rfalWakeUpModeStart+0xac>
 8017bc0:	4b8a      	ldr	r3, [pc, #552]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017bc2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d121      	bne.n	8017c0e <rfalWakeUpModeStart+0xe6>
 8017bca:	4b88      	ldr	r3, [pc, #544]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017bcc:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d11c      	bne.n	8017c0e <rfalWakeUpModeStart+0xe6>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 8017bd4:	4b85      	ldr	r3, [pc, #532]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017bd6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8017bda:	f083 0301 	eor.w	r3, r3, #1
 8017bde:	b2db      	uxtb	r3, r3
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d00f      	beq.n	8017c04 <rfalWakeUpModeStart+0xdc>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 8017be4:	4b81      	ldr	r3, [pc, #516]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017be6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8017bea:	f083 0301 	eor.w	r3, r3, #1
 8017bee:	b2db      	uxtb	r3, r3
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d007      	beq.n	8017c04 <rfalWakeUpModeStart+0xdc>
 8017bf4:	4b7d      	ldr	r3, [pc, #500]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017bf6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8017bfa:	f083 0301 	eor.w	r3, r3, #1
 8017bfe:	b2db      	uxtb	r3, r3
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d104      	bne.n	8017c0e <rfalWakeUpModeStart+0xe6>
         gRFAL.wum.cfg.swTagDetect                                                                         )
 8017c04:	4b79      	ldr	r3, [pc, #484]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017c06:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d001      	beq.n	8017c12 <rfalWakeUpModeStart+0xea>
    {
        return ERR_PARAM;
 8017c0e:	2307      	movs	r3, #7
 8017c10:	e14f      	b.n	8017eb2 <rfalWakeUpModeStart+0x38a>
    }
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 8017c12:	2300      	movs	r3, #0
 8017c14:	613b      	str	r3, [r7, #16]
    
    
    /* Disable Tx, Rx, External Field Detector and set default ISO14443A mode */
    st25r3911TxRxOff();
 8017c16:	f7eb fa36 	bl	8003086 <st25r3911TxRxOff>
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8017c1a:	2110      	movs	r1, #16
 8017c1c:	2009      	movs	r0, #9
 8017c1e:	f7eb ff6f 	bl	8003b00 <st25r3911ClrRegisterBits>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ | ST25R3911_REG_MODE_mask_om), (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_iso14443a) );
 8017c22:	2208      	movs	r2, #8
 8017c24:	21f8      	movs	r1, #248	; 0xf8
 8017c26:	2003      	movs	r0, #3
 8017c28:	f7eb ffab 	bl	8003b82 <st25r3911ChangeRegisterBits>
    
    /* Set Analog configurations for Wake-up On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON) );
 8017c2c:	2004      	movs	r0, #4
 8017c2e:	f7f5 fa57 	bl	800d0e0 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Prepare Wake-Up Timer Control Register */
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3911_REG_WUP_TIMER_CONTROL_shift_wut);
 8017c32:	4b6e      	ldr	r3, [pc, #440]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017c34:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8017c38:	011b      	lsls	r3, r3, #4
 8017c3a:	75fb      	strb	r3, [r7, #23]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3911_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 8017c3c:	4b6b      	ldr	r3, [pc, #428]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017c3e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8017c42:	2b0f      	cmp	r3, #15
 8017c44:	d802      	bhi.n	8017c4c <rfalWakeUpModeStart+0x124>
 8017c46:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8017c4a:	e000      	b.n	8017c4e <rfalWakeUpModeStart+0x126>
 8017c4c:	2200      	movs	r2, #0
 8017c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017c52:	4313      	orrs	r3, r2
 8017c54:	b25b      	sxtb	r3, r3
 8017c56:	75fb      	strb	r3, [r7, #23]
    
    if(gRFAL.wum.cfg.irqTout)
 8017c58:	4b64      	ldr	r3, [pc, #400]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017c5a:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d007      	beq.n	8017c72 <rfalWakeUpModeStart+0x14a>
    {
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wto;
 8017c62:	7dfb      	ldrb	r3, [r7, #23]
 8017c64:	f043 0308 	orr.w	r3, r3, #8
 8017c68:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WT;
 8017c6a:	693b      	ldr	r3, [r7, #16]
 8017c6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017c70:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Amplitude is to be performed */
    if( gRFAL.wum.cfg.indAmp.enabled )
 8017c72:	4b5e      	ldr	r3, [pc, #376]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017c74:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d04c      	beq.n	8017d16 <rfalWakeUpModeStart+0x1ee>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_d);
 8017c7c:	4b5b      	ldr	r3, [pc, #364]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017c7e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8017c82:	011b      	lsls	r3, r3, #4
 8017c84:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 8017c86:	4b59      	ldr	r3, [pc, #356]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017c88:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d001      	beq.n	8017c94 <rfalWakeUpModeStart+0x16c>
 8017c90:	2208      	movs	r2, #8
 8017c92:	e000      	b.n	8017c96 <rfalWakeUpModeStart+0x16e>
 8017c94:	2200      	movs	r2, #0
 8017c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c9a:	4313      	orrs	r3, r2
 8017c9c:	b25b      	sxtb	r3, r3
 8017c9e:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_aew) & ST25R3911_REG_AMPLITUDE_MEASURE_CONF_mask_am_aew);
 8017ca0:	4b52      	ldr	r3, [pc, #328]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017ca2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8017ca6:	005b      	lsls	r3, r3, #1
 8017ca8:	b2db      	uxtb	r3, r3
 8017caa:	b25b      	sxtb	r3, r3
 8017cac:	f003 0306 	and.w	r3, r3, #6
 8017cb0:	b25a      	sxtb	r2, r3
 8017cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017cb6:	4313      	orrs	r3, r2
 8017cb8:	b25b      	sxtb	r3, r3
 8017cba:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 8017cbc:	4b4b      	ldr	r3, [pc, #300]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017cbe:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8017cc2:	b25a      	sxtb	r2, r3
 8017cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017cc8:	4313      	orrs	r3, r2
 8017cca:	b25b      	sxtb	r3, r3
 8017ccc:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_CONF, aux );
 8017cce:	7bfb      	ldrb	r3, [r7, #15]
 8017cd0:	4619      	mov	r1, r3
 8017cd2:	2032      	movs	r0, #50	; 0x32
 8017cd4:	f7eb feca 	bl	8003a6c <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indAmp.autoAvg )
 8017cd8:	4b44      	ldr	r3, [pc, #272]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017cda:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8017cde:	f083 0301 	eor.w	r3, r3, #1
 8017ce2:	b2db      	uxtb	r3, r3
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d00e      	beq.n	8017d06 <rfalWakeUpModeStart+0x1de>
        {
            if( gRFAL.wum.cfg.indAmp.reference == RFAL_WUM_REFERENCE_AUTO )
 8017ce8:	4b40      	ldr	r3, [pc, #256]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017cea:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8017cee:	2bff      	cmp	r3, #255	; 0xff
 8017cf0:	d102      	bne.n	8017cf8 <rfalWakeUpModeStart+0x1d0>
            {
                st25r3911MeasureAmplitude( &gRFAL.wum.cfg.indAmp.reference );
 8017cf2:	483f      	ldr	r0, [pc, #252]	; (8017df0 <rfalWakeUpModeStart+0x2c8>)
 8017cf4:	f7eb fa75 	bl	80031e2 <st25r3911MeasureAmplitude>
            }
            st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_REF, gRFAL.wum.cfg.indAmp.reference );
 8017cf8:	4b3c      	ldr	r3, [pc, #240]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017cfa:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8017cfe:	4619      	mov	r1, r3
 8017d00:	2033      	movs	r0, #51	; 0x33
 8017d02:	f7eb feb3 	bl	8003a6c <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wam;
 8017d06:	7dfb      	ldrb	r3, [r7, #23]
 8017d08:	f043 0304 	orr.w	r3, r3, #4
 8017d0c:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WAM;
 8017d0e:	693b      	ldr	r3, [r7, #16]
 8017d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8017d14:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Phase is to be performed */
    if( gRFAL.wum.cfg.indPha.enabled )
 8017d16:	4b35      	ldr	r3, [pc, #212]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017d18:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d04c      	beq.n	8017dba <rfalWakeUpModeStart+0x292>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_d);
 8017d20:	4b32      	ldr	r3, [pc, #200]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017d22:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8017d26:	011b      	lsls	r3, r3, #4
 8017d28:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 8017d2a:	4b30      	ldr	r3, [pc, #192]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017d2c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d001      	beq.n	8017d38 <rfalWakeUpModeStart+0x210>
 8017d34:	2208      	movs	r2, #8
 8017d36:	e000      	b.n	8017d3a <rfalWakeUpModeStart+0x212>
 8017d38:	2200      	movs	r2, #0
 8017d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d3e:	4313      	orrs	r3, r2
 8017d40:	b25b      	sxtb	r3, r3
 8017d42:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_aew) & ST25R3911_REG_PHASE_MEASURE_CONF_mask_pm_aew);
 8017d44:	4b29      	ldr	r3, [pc, #164]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017d46:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8017d4a:	005b      	lsls	r3, r3, #1
 8017d4c:	b2db      	uxtb	r3, r3
 8017d4e:	b25b      	sxtb	r3, r3
 8017d50:	f003 0306 	and.w	r3, r3, #6
 8017d54:	b25a      	sxtb	r2, r3
 8017d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d5a:	4313      	orrs	r3, r2
 8017d5c:	b25b      	sxtb	r3, r3
 8017d5e:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 8017d60:	4b22      	ldr	r3, [pc, #136]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017d62:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8017d66:	b25a      	sxtb	r2, r3
 8017d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d6c:	4313      	orrs	r3, r2
 8017d6e:	b25b      	sxtb	r3, r3
 8017d70:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_CONF, aux );
 8017d72:	7bfb      	ldrb	r3, [r7, #15]
 8017d74:	4619      	mov	r1, r3
 8017d76:	2036      	movs	r0, #54	; 0x36
 8017d78:	f7eb fe78 	bl	8003a6c <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indPha.autoAvg )
 8017d7c:	4b1b      	ldr	r3, [pc, #108]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017d7e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8017d82:	f083 0301 	eor.w	r3, r3, #1
 8017d86:	b2db      	uxtb	r3, r3
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d00e      	beq.n	8017daa <rfalWakeUpModeStart+0x282>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 8017d8c:	4b17      	ldr	r3, [pc, #92]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017d8e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8017d92:	2bff      	cmp	r3, #255	; 0xff
 8017d94:	d102      	bne.n	8017d9c <rfalWakeUpModeStart+0x274>
            {
                st25r3911MeasurePhase( &gRFAL.wum.cfg.indPha.reference );
 8017d96:	4817      	ldr	r0, [pc, #92]	; (8017df4 <rfalWakeUpModeStart+0x2cc>)
 8017d98:	f7eb fa31 	bl	80031fe <st25r3911MeasurePhase>
            }
            st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_REF, gRFAL.wum.cfg.indPha.reference );
 8017d9c:	4b13      	ldr	r3, [pc, #76]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017d9e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8017da2:	4619      	mov	r1, r3
 8017da4:	2037      	movs	r0, #55	; 0x37
 8017da6:	f7eb fe61 	bl	8003a6c <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wph;
 8017daa:	7dfb      	ldrb	r3, [r7, #23]
 8017dac:	f043 0302 	orr.w	r3, r3, #2
 8017db0:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WPH;
 8017db2:	693b      	ldr	r3, [r7, #16]
 8017db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017db8:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Capacitive is to be performed */
    if( gRFAL.wum.cfg.cap.enabled )
 8017dba:	4b0c      	ldr	r3, [pc, #48]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017dbc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d05a      	beq.n	8017e7a <rfalWakeUpModeStart+0x352>
    {
        /*******************************************************************************/
        /* Perform Capacitive sensor calibration */
        
        /* Disable Oscillator and Field */
        st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 8017dc4:	2188      	movs	r1, #136	; 0x88
 8017dc6:	2002      	movs	r0, #2
 8017dc8:	f7eb fe9a 	bl	8003b00 <st25r3911ClrRegisterBits>
        
        /* Sensor gain should be configured on Analog Config */
        
        /* Perform calibration procedure */
        st25r3911CalibrateCapacitiveSensor( NULL );
 8017dcc:	2000      	movs	r0, #0
 8017dce:	f7eb fa40 	bl	8003252 <st25r3911CalibrateCapacitiveSensor>
        
        
        /*******************************************************************************/
        aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_d);
 8017dd2:	4b06      	ldr	r3, [pc, #24]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017dd4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8017dd8:	011b      	lsls	r3, r3, #4
 8017dda:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 8017ddc:	4b03      	ldr	r3, [pc, #12]	; (8017dec <rfalWakeUpModeStart+0x2c4>)
 8017dde:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d008      	beq.n	8017df8 <rfalWakeUpModeStart+0x2d0>
 8017de6:	2208      	movs	r2, #8
 8017de8:	e007      	b.n	8017dfa <rfalWakeUpModeStart+0x2d2>
 8017dea:	bf00      	nop
 8017dec:	2000369c 	.word	0x2000369c
 8017df0:	2000370a 	.word	0x2000370a
 8017df4:	20003710 	.word	0x20003710
 8017df8:	2200      	movs	r2, #0
 8017dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017dfe:	4313      	orrs	r3, r2
 8017e00:	b25b      	sxtb	r3, r3
 8017e02:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_aew) & ST25R3911_REG_CAPACITANCE_MEASURE_CONF_mask_cm_aew);
 8017e04:	4b2d      	ldr	r3, [pc, #180]	; (8017ebc <rfalWakeUpModeStart+0x394>)
 8017e06:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8017e0a:	005b      	lsls	r3, r3, #1
 8017e0c:	b2db      	uxtb	r3, r3
 8017e0e:	b25b      	sxtb	r3, r3
 8017e10:	f003 0306 	and.w	r3, r3, #6
 8017e14:	b25a      	sxtb	r2, r3
 8017e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017e1a:	4313      	orrs	r3, r2
 8017e1c:	b25b      	sxtb	r3, r3
 8017e1e:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 8017e20:	4b26      	ldr	r3, [pc, #152]	; (8017ebc <rfalWakeUpModeStart+0x394>)
 8017e22:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8017e26:	b25a      	sxtb	r2, r3
 8017e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017e2c:	4313      	orrs	r3, r2
 8017e2e:	b25b      	sxtb	r3, r3
 8017e30:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_CONF, aux );
 8017e32:	7bfb      	ldrb	r3, [r7, #15]
 8017e34:	4619      	mov	r1, r3
 8017e36:	203a      	movs	r0, #58	; 0x3a
 8017e38:	f7eb fe18 	bl	8003a6c <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.cap.autoAvg )
 8017e3c:	4b1f      	ldr	r3, [pc, #124]	; (8017ebc <rfalWakeUpModeStart+0x394>)
 8017e3e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8017e42:	f083 0301 	eor.w	r3, r3, #1
 8017e46:	b2db      	uxtb	r3, r3
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d00e      	beq.n	8017e6a <rfalWakeUpModeStart+0x342>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 8017e4c:	4b1b      	ldr	r3, [pc, #108]	; (8017ebc <rfalWakeUpModeStart+0x394>)
 8017e4e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8017e52:	2bff      	cmp	r3, #255	; 0xff
 8017e54:	d102      	bne.n	8017e5c <rfalWakeUpModeStart+0x334>
            {
                st25r3911MeasureCapacitance( &gRFAL.wum.cfg.cap.reference );
 8017e56:	481a      	ldr	r0, [pc, #104]	; (8017ec0 <rfalWakeUpModeStart+0x398>)
 8017e58:	f7eb f9df 	bl	800321a <st25r3911MeasureCapacitance>
            }
            st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_REF, gRFAL.wum.cfg.cap.reference );
 8017e5c:	4b17      	ldr	r3, [pc, #92]	; (8017ebc <rfalWakeUpModeStart+0x394>)
 8017e5e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8017e62:	4619      	mov	r1, r3
 8017e64:	203b      	movs	r0, #59	; 0x3b
 8017e66:	f7eb fe01 	bl	8003a6c <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wcap;
 8017e6a:	7dfb      	ldrb	r3, [r7, #23]
 8017e6c:	f043 0301 	orr.w	r3, r3, #1
 8017e70:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WCAP;
 8017e72:	693b      	ldr	r3, [r7, #16]
 8017e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017e78:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable and clear all interrupts except Wake-Up IRQs */
    st25r3911DisableInterrupts( ST25R3911_IRQ_MASK_ALL );
 8017e7a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017e7e:	f7ec f9a3 	bl	80041c8 <st25r3911DisableInterrupts>
    st25r3911GetInterrupt( irqs );
 8017e82:	6938      	ldr	r0, [r7, #16]
 8017e84:	f7ec f95c 	bl	8004140 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( irqs );
 8017e88:	6938      	ldr	r0, [r7, #16]
 8017e8a:	f7ec f991 	bl	80041b0 <st25r3911EnableInterrupts>
    
    /* Enable Low Power Wake-Up Mode */
    st25r3911WriteRegister( ST25R3911_REG_WUP_TIMER_CONTROL, reg );
 8017e8e:	7dfb      	ldrb	r3, [r7, #23]
 8017e90:	4619      	mov	r1, r3
 8017e92:	2031      	movs	r0, #49	; 0x31
 8017e94:	f7eb fdea 	bl	8003a6c <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_wu), ST25R3911_REG_OP_CONTROL_wu );
 8017e98:	2204      	movs	r2, #4
 8017e9a:	2184      	movs	r1, #132	; 0x84
 8017e9c:	2002      	movs	r0, #2
 8017e9e:	f7eb fe70 	bl	8003b82 <st25r3911ChangeRegisterBits>
    
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 8017ea2:	4b06      	ldr	r3, [pc, #24]	; (8017ebc <rfalWakeUpModeStart+0x394>)
 8017ea4:	2201      	movs	r2, #1
 8017ea6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    gRFAL.state     = RFAL_STATE_WUM;  
 8017eaa:	4b04      	ldr	r3, [pc, #16]	; (8017ebc <rfalWakeUpModeStart+0x394>)
 8017eac:	2205      	movs	r2, #5
 8017eae:	701a      	strb	r2, [r3, #0]
      
    return ERR_NONE;
 8017eb0:	2300      	movs	r3, #0
}
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	3718      	adds	r7, #24
 8017eb6:	46bd      	mov	sp, r7
 8017eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8017eba:	bf00      	nop
 8017ebc:	2000369c 	.word	0x2000369c
 8017ec0:	20003716 	.word	0x20003716

08017ec4 <rfalWakeUpModeHasWoke>:


/*******************************************************************************/
bool rfalWakeUpModeHasWoke( void )
{   
 8017ec4:	b480      	push	{r7}
 8017ec6:	af00      	add	r7, sp, #0
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 8017ec8:	4b05      	ldr	r3, [pc, #20]	; (8017ee0 <rfalWakeUpModeHasWoke+0x1c>)
 8017eca:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8017ece:	2b01      	cmp	r3, #1
 8017ed0:	bf8c      	ite	hi
 8017ed2:	2301      	movhi	r3, #1
 8017ed4:	2300      	movls	r3, #0
 8017ed6:	b2db      	uxtb	r3, r3
}
 8017ed8:	4618      	mov	r0, r3
 8017eda:	46bd      	mov	sp, r7
 8017edc:	bc80      	pop	{r7}
 8017ede:	4770      	bx	lr
 8017ee0:	2000369c 	.word	0x2000369c

08017ee4 <rfalRunWakeUpModeWorker>:


/*******************************************************************************/
static void rfalRunWakeUpModeWorker( void )
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b082      	sub	sp, #8
 8017ee8:	af00      	add	r7, sp, #0
    uint32_t irqs;
    
    if( gRFAL.state != RFAL_STATE_WUM )
 8017eea:	4b1c      	ldr	r3, [pc, #112]	; (8017f5c <rfalRunWakeUpModeWorker+0x78>)
 8017eec:	781b      	ldrb	r3, [r3, #0]
 8017eee:	2b05      	cmp	r3, #5
 8017ef0:	d129      	bne.n	8017f46 <rfalRunWakeUpModeWorker+0x62>
    {
        return;
    }
    
    switch( gRFAL.wum.state )
 8017ef2:	4b1a      	ldr	r3, [pc, #104]	; (8017f5c <rfalRunWakeUpModeWorker+0x78>)
 8017ef4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8017ef8:	3b01      	subs	r3, #1
 8017efa:	2b01      	cmp	r3, #1
 8017efc:	d825      	bhi.n	8017f4a <rfalRunWakeUpModeWorker+0x66>
    {
        case RFAL_WUM_STATE_ENABLED:
        case RFAL_WUM_STATE_ENABLED_WOKE:
            
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 8017efe:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 8017f02:	f7ec f91d 	bl	8004140 <st25r3911GetInterrupt>
 8017f06:	6078      	str	r0, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d01f      	beq.n	8017f4e <rfalRunWakeUpModeWorker+0x6a>
               break;  /* No interrupt to process */
            }
            
            /*******************************************************************************/
            /* Check and mark which measurement(s) cause interrupt */
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d003      	beq.n	8017f20 <rfalRunWakeUpModeWorker+0x3c>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8017f18:	4b10      	ldr	r3, [pc, #64]	; (8017f5c <rfalRunWakeUpModeWorker+0x78>)
 8017f1a:	2202      	movs	r2, #2
 8017f1c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d003      	beq.n	8017f32 <rfalRunWakeUpModeWorker+0x4e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8017f2a:	4b0c      	ldr	r3, [pc, #48]	; (8017f5c <rfalRunWakeUpModeWorker+0x78>)
 8017f2c:	2202      	movs	r2, #2
 8017f2e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d00a      	beq.n	8017f52 <rfalRunWakeUpModeWorker+0x6e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8017f3c:	4b07      	ldr	r3, [pc, #28]	; (8017f5c <rfalRunWakeUpModeWorker+0x78>)
 8017f3e:	2202      	movs	r2, #2
 8017f40:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            break;
 8017f44:	e005      	b.n	8017f52 <rfalRunWakeUpModeWorker+0x6e>
        return;
 8017f46:	bf00      	nop
 8017f48:	e004      	b.n	8017f54 <rfalRunWakeUpModeWorker+0x70>
            
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8017f4a:	bf00      	nop
 8017f4c:	e002      	b.n	8017f54 <rfalRunWakeUpModeWorker+0x70>
               break;  /* No interrupt to process */
 8017f4e:	bf00      	nop
 8017f50:	e000      	b.n	8017f54 <rfalRunWakeUpModeWorker+0x70>
            break;
 8017f52:	bf00      	nop
    }
}
 8017f54:	3708      	adds	r7, #8
 8017f56:	46bd      	mov	sp, r7
 8017f58:	bd80      	pop	{r7, pc}
 8017f5a:	bf00      	nop
 8017f5c:	2000369c 	.word	0x2000369c

08017f60 <rfalWakeUpModeStop>:


/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	af00      	add	r7, sp, #0
    if( gRFAL.wum.state == RFAL_WUM_STATE_NOT_INIT )
 8017f64:	4b0f      	ldr	r3, [pc, #60]	; (8017fa4 <rfalWakeUpModeStop+0x44>)
 8017f66:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d101      	bne.n	8017f72 <rfalWakeUpModeStop+0x12>
    {
        return ERR_WRONG_STATE;
 8017f6e:	2321      	movs	r3, #33	; 0x21
 8017f70:	e015      	b.n	8017f9e <rfalWakeUpModeStop+0x3e>
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 8017f72:	4b0c      	ldr	r3, [pc, #48]	; (8017fa4 <rfalWakeUpModeStop+0x44>)
 8017f74:	2200      	movs	r2, #0
 8017f76:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    
    /* Re-Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8017f7a:	2110      	movs	r1, #16
 8017f7c:	2009      	movs	r0, #9
 8017f7e:	f7eb fde2 	bl	8003b46 <st25r3911SetRegisterBits>
    
    /* Disable Wake-Up Mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8017f82:	2104      	movs	r1, #4
 8017f84:	2002      	movs	r0, #2
 8017f86:	f7eb fdbb 	bl	8003b00 <st25r3911ClrRegisterBits>
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP) );
 8017f8a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 8017f8e:	f7ec f91b 	bl	80041c8 <st25r3911DisableInterrupts>
    
    /* Re-Enable the Oscillator */
    st25r3911OscOn();
 8017f92:	f7eb f880 	bl	8003096 <st25r3911OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 8017f96:	2005      	movs	r0, #5
 8017f98:	f7f5 f8a2 	bl	800d0e0 <rfalSetAnalogConfig>
      
    return ERR_NONE;
 8017f9c:	2300      	movs	r3, #0
}
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	bd80      	pop	{r7, pc}
 8017fa2:	bf00      	nop
 8017fa4:	2000369c 	.word	0x2000369c

08017fa8 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b082      	sub	sp, #8
 8017fac:	af00      	add	r7, sp, #0
 8017fae:	4603      	mov	r3, r0
 8017fb0:	80fb      	strh	r3, [r7, #6]
 8017fb2:	460b      	mov	r3, r1
 8017fb4:	717b      	strb	r3, [r7, #5]
 8017fb6:	4613      	mov	r3, r2
 8017fb8:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 8017fba:	88fb      	ldrh	r3, [r7, #6]
 8017fbc:	b2db      	uxtb	r3, r3
 8017fbe:	793a      	ldrb	r2, [r7, #4]
 8017fc0:	7979      	ldrb	r1, [r7, #5]
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	f7eb fddd 	bl	8003b82 <st25r3911ChangeRegisterBits>
    return ERR_NONE;
 8017fc8:	2300      	movs	r3, #0
}
 8017fca:	4618      	mov	r0, r3
 8017fcc:	3708      	adds	r7, #8
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	bd80      	pop	{r7, pc}

08017fd2 <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 8017fd2:	b580      	push	{r7, lr}
 8017fd4:	b082      	sub	sp, #8
 8017fd6:	af00      	add	r7, sp, #0
 8017fd8:	4603      	mov	r3, r0
 8017fda:	80fb      	strh	r3, [r7, #6]
 8017fdc:	460b      	mov	r3, r1
 8017fde:	717b      	strb	r3, [r7, #5]
 8017fe0:	4613      	mov	r3, r2
 8017fe2:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 8017fe4:	88fb      	ldrh	r3, [r7, #6]
 8017fe6:	b2db      	uxtb	r3, r3
 8017fe8:	793a      	ldrb	r2, [r7, #4]
 8017fea:	7979      	ldrb	r1, [r7, #5]
 8017fec:	4618      	mov	r0, r3
 8017fee:	f7eb fe07 	bl	8003c00 <st25r3911ChangeTestRegisterBits>
    return ERR_NONE;
 8017ff2:	2300      	movs	r3, #0
}
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	3708      	adds	r7, #8
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	bd80      	pop	{r7, pc}

08017ffc <rfalSt25tbPollerDoCollisionResolution>:
******************************************************************************
*/


static bool rfalSt25tbPollerDoCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	b086      	sub	sp, #24
 8018000:	af00      	add	r7, sp, #0
 8018002:	4603      	mov	r3, r0
 8018004:	60b9      	str	r1, [r7, #8]
 8018006:	607a      	str	r2, [r7, #4]
 8018008:	73fb      	strb	r3, [r7, #15]
    uint8_t    i;
    uint8_t    chipId;
    ReturnCode ret;
    bool col;

    col = false;
 801800a:	2300      	movs	r3, #0
 801800c:	74fb      	strb	r3, [r7, #19]
    
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 801800e:	2300      	movs	r3, #0
 8018010:	75fb      	strb	r3, [r7, #23]
 8018012:	e072      	b.n	80180fa <rfalSt25tbPollerDoCollisionResolution+0xfe>
    {
        platformDelay(1);  /* Wait t2: Answer to new request delay  */
 8018014:	2001      	movs	r0, #1
 8018016:	f7ec f9a7 	bl	8004368 <HAL_Delay>
        
        if( i==0U )
 801801a:	7dfb      	ldrb	r3, [r7, #23]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d107      	bne.n	8018030 <rfalSt25tbPollerDoCollisionResolution+0x34>
        {
            /* Step 2: Send Pcall16 */
            ret = rfalSt25tbPollerPcall( &chipId );
 8018020:	f107 0312 	add.w	r3, r7, #18
 8018024:	4618      	mov	r0, r3
 8018026:	f000 f8c6 	bl	80181b6 <rfalSt25tbPollerPcall>
 801802a:	4603      	mov	r3, r0
 801802c:	82bb      	strh	r3, [r7, #20]
 801802e:	e008      	b.n	8018042 <rfalSt25tbPollerDoCollisionResolution+0x46>
        }
        else
        {
            /* Step 3-17: Send Pcall16 */
            ret = rfalSt25tbPollerSlotMarker( i, &chipId );
 8018030:	f107 0212 	add.w	r2, r7, #18
 8018034:	7dfb      	ldrb	r3, [r7, #23]
 8018036:	4611      	mov	r1, r2
 8018038:	4618      	mov	r0, r3
 801803a:	f000 f8e2 	bl	8018202 <rfalSt25tbPollerSlotMarker>
 801803e:	4603      	mov	r3, r0
 8018040:	82bb      	strh	r3, [r7, #20]
        }
        
        if( ret == ERR_NONE )
 8018042:	8abb      	ldrh	r3, [r7, #20]
 8018044:	2b00      	cmp	r3, #0
 8018046:	d148      	bne.n	80180da <rfalSt25tbPollerDoCollisionResolution+0xde>
        {
            /* Found another device */
            st25tbDevList[*devCnt].chipID       = chipId;
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	781b      	ldrb	r3, [r3, #0]
 801804c:	461a      	mov	r2, r3
 801804e:	4613      	mov	r3, r2
 8018050:	009b      	lsls	r3, r3, #2
 8018052:	4413      	add	r3, r2
 8018054:	005b      	lsls	r3, r3, #1
 8018056:	461a      	mov	r2, r3
 8018058:	68bb      	ldr	r3, [r7, #8]
 801805a:	4413      	add	r3, r2
 801805c:	7cba      	ldrb	r2, [r7, #18]
 801805e:	701a      	strb	r2, [r3, #0]
            st25tbDevList[*devCnt].isDeselected = false;
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	781b      	ldrb	r3, [r3, #0]
 8018064:	461a      	mov	r2, r3
 8018066:	4613      	mov	r3, r2
 8018068:	009b      	lsls	r3, r3, #2
 801806a:	4413      	add	r3, r2
 801806c:	005b      	lsls	r3, r3, #1
 801806e:	461a      	mov	r2, r3
 8018070:	68bb      	ldr	r3, [r7, #8]
 8018072:	4413      	add	r3, r2
 8018074:	2200      	movs	r2, #0
 8018076:	725a      	strb	r2, [r3, #9]
            
            /* Select Device, retrieve its UID  */
            ret = rfalSt25tbPollerSelect( chipId );
 8018078:	7cbb      	ldrb	r3, [r7, #18]
 801807a:	4618      	mov	r0, r3
 801807c:	f000 f8f4 	bl	8018268 <rfalSt25tbPollerSelect>
 8018080:	4603      	mov	r3, r0
 8018082:	82bb      	strh	r3, [r7, #20]

            /* By Selecting this device, the previous gets Deselected */
            if( (*devCnt) > 0U )
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	781b      	ldrb	r3, [r3, #0]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d00b      	beq.n	80180a4 <rfalSt25tbPollerDoCollisionResolution+0xa8>
            {
                st25tbDevList[(*devCnt)-1U].isDeselected = true;
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	781b      	ldrb	r3, [r3, #0]
 8018090:	461a      	mov	r2, r3
 8018092:	4613      	mov	r3, r2
 8018094:	009b      	lsls	r3, r3, #2
 8018096:	4413      	add	r3, r2
 8018098:	005b      	lsls	r3, r3, #1
 801809a:	3b0a      	subs	r3, #10
 801809c:	68ba      	ldr	r2, [r7, #8]
 801809e:	4413      	add	r3, r2
 80180a0:	2201      	movs	r2, #1
 80180a2:	725a      	strb	r2, [r3, #9]
            }

            if( ERR_NONE == ret )
 80180a4:	8abb      	ldrh	r3, [r7, #20]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d10d      	bne.n	80180c6 <rfalSt25tbPollerDoCollisionResolution+0xca>
            {
                rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	781b      	ldrb	r3, [r3, #0]
 80180ae:	461a      	mov	r2, r3
 80180b0:	4613      	mov	r3, r2
 80180b2:	009b      	lsls	r3, r3, #2
 80180b4:	4413      	add	r3, r2
 80180b6:	005b      	lsls	r3, r3, #1
 80180b8:	461a      	mov	r2, r3
 80180ba:	68bb      	ldr	r3, [r7, #8]
 80180bc:	4413      	add	r3, r2
 80180be:	3301      	adds	r3, #1
 80180c0:	4618      	mov	r0, r3
 80180c2:	f000 f8fd 	bl	80182c0 <rfalSt25tbPollerGetUID>
            }

            if( ERR_NONE == ret )
 80180c6:	8abb      	ldrh	r3, [r7, #20]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d10e      	bne.n	80180ea <rfalSt25tbPollerDoCollisionResolution+0xee>
            {
                (*devCnt)++;
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	781b      	ldrb	r3, [r3, #0]
 80180d0:	3301      	adds	r3, #1
 80180d2:	b2da      	uxtb	r2, r3
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	701a      	strb	r2, [r3, #0]
 80180d8:	e007      	b.n	80180ea <rfalSt25tbPollerDoCollisionResolution+0xee>
            }
        }
        else if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 80180da:	8abb      	ldrh	r3, [r7, #20]
 80180dc:	2b15      	cmp	r3, #21
 80180de:	d002      	beq.n	80180e6 <rfalSt25tbPollerDoCollisionResolution+0xea>
 80180e0:	8abb      	ldrh	r3, [r7, #20]
 80180e2:	2b09      	cmp	r3, #9
 80180e4:	d101      	bne.n	80180ea <rfalSt25tbPollerDoCollisionResolution+0xee>
        {
            col = true;
 80180e6:	2301      	movs	r3, #1
 80180e8:	74fb      	strb	r3, [r7, #19]
        else
        {
            /* MISRA 15.7 - Empty else */
        }
        
        if( *devCnt >= devLimit )
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	781b      	ldrb	r3, [r3, #0]
 80180ee:	7bfa      	ldrb	r2, [r7, #15]
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d906      	bls.n	8018102 <rfalSt25tbPollerDoCollisionResolution+0x106>
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 80180f4:	7dfb      	ldrb	r3, [r7, #23]
 80180f6:	3301      	adds	r3, #1
 80180f8:	75fb      	strb	r3, [r7, #23]
 80180fa:	7dfb      	ldrb	r3, [r7, #23]
 80180fc:	2b0f      	cmp	r3, #15
 80180fe:	d989      	bls.n	8018014 <rfalSt25tbPollerDoCollisionResolution+0x18>
 8018100:	e000      	b.n	8018104 <rfalSt25tbPollerDoCollisionResolution+0x108>
        {
            break;
 8018102:	bf00      	nop
        }
    }
    return col;
 8018104:	7cfb      	ldrb	r3, [r7, #19]
}
 8018106:	4618      	mov	r0, r3
 8018108:	3718      	adds	r7, #24
 801810a:	46bd      	mov	sp, r7
 801810c:	bd80      	pop	{r7, pc}

0801810e <rfalSt25tbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitialize( void )
{
 801810e:	b580      	push	{r7, lr}
 8018110:	af00      	add	r7, sp, #0
    return rfalNfcbPollerInitialize();
 8018112:	f7fb fbfb 	bl	801390c <rfalNfcbPollerInitialize>
 8018116:	4603      	mov	r3, r0
}
 8018118:	4618      	mov	r0, r3
 801811a:	bd80      	pop	{r7, pc}

0801811c <rfalSt25tbPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCheckPresence( uint8_t *chipId )
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b084      	sub	sp, #16
 8018120:	af00      	add	r7, sp, #0
 8018122:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    chipIdRes;

    chipIdRes = 0x00;
 8018124:	2300      	movs	r3, #0
 8018126:	737b      	strb	r3, [r7, #13]
   
    /* Send Initiate Request */
    ret = rfalSt25tbPollerInitiate( &chipIdRes );
 8018128:	f107 030d 	add.w	r3, r7, #13
 801812c:	4618      	mov	r0, r3
 801812e:	f000 f815 	bl	801815c <rfalSt25tbPollerInitiate>
 8018132:	4603      	mov	r3, r0
 8018134:	81fb      	strh	r3, [r7, #14]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8018136:	89fb      	ldrh	r3, [r7, #14]
 8018138:	2b15      	cmp	r3, #21
 801813a:	d002      	beq.n	8018142 <rfalSt25tbPollerCheckPresence+0x26>
 801813c:	89fb      	ldrh	r3, [r7, #14]
 801813e:	2b09      	cmp	r3, #9
 8018140:	d101      	bne.n	8018146 <rfalSt25tbPollerCheckPresence+0x2a>
    {
        return ERR_NONE;
 8018142:	2300      	movs	r3, #0
 8018144:	e006      	b.n	8018154 <rfalSt25tbPollerCheckPresence+0x38>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d002      	beq.n	8018152 <rfalSt25tbPollerCheckPresence+0x36>
    {
        *chipId = chipIdRes;
 801814c:	7b7a      	ldrb	r2, [r7, #13]
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 8018152:	89fb      	ldrh	r3, [r7, #14]
}
 8018154:	4618      	mov	r0, r3
 8018156:	3710      	adds	r7, #16
 8018158:	46bd      	mov	sp, r7
 801815a:	bd80      	pop	{r7, pc}

0801815c <rfalSt25tbPollerInitiate>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitiate( uint8_t *chipId )
{
 801815c:	b580      	push	{r7, lr}
 801815e:	b08a      	sub	sp, #40	; 0x28
 8018160:	af04      	add	r7, sp, #16
 8018162:	6078      	str	r0, [r7, #4]
    uint16_t              rxLen;
    rfalSt25tbInitiateReq initiateReq;
    uint8_t               rxBuf[RFAL_ST25TB_CHIP_ID_LEN + RFAL_ST25TB_CRC_LEN]; /* In case we receive less data that CRC, RF layer will not remove the CRC from buffer */
    
    /* Compute Initiate Request */
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 8018164:	2306      	movs	r3, #6
 8018166:	743b      	strb	r3, [r7, #16]
    initiateReq.cmd2   = RFAL_ST25TB_INITIATE_CMD2;
 8018168:	2300      	movs	r3, #0
 801816a:	747b      	strb	r3, [r7, #17]
    
    /* Send Initiate Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801816c:	f107 020c 	add.w	r2, r7, #12
 8018170:	f107 0010 	add.w	r0, r7, #16
 8018174:	f241 036d 	movw	r3, #4205	; 0x106d
 8018178:	9302      	str	r3, [sp, #8]
 801817a:	2300      	movs	r3, #0
 801817c:	9301      	str	r3, [sp, #4]
 801817e:	f107 0314 	add.w	r3, r7, #20
 8018182:	9300      	str	r3, [sp, #0]
 8018184:	2303      	movs	r3, #3
 8018186:	2102      	movs	r1, #2
 8018188:	f7fd ff1e 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 801818c:	4603      	mov	r3, r0
 801818e:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 8018190:	8afb      	ldrh	r3, [r7, #22]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d104      	bne.n	80181a0 <rfalSt25tbPollerInitiate+0x44>
 8018196:	8abb      	ldrh	r3, [r7, #20]
 8018198:	2b01      	cmp	r3, #1
 801819a:	d001      	beq.n	80181a0 <rfalSt25tbPollerInitiate+0x44>
    {
        return ERR_PROTO;
 801819c:	230b      	movs	r3, #11
 801819e:	e006      	b.n	80181ae <rfalSt25tbPollerInitiate+0x52>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d002      	beq.n	80181ac <rfalSt25tbPollerInitiate+0x50>
    {
        *chipId = *rxBuf;
 80181a6:	7b3a      	ldrb	r2, [r7, #12]
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 80181ac:	8afb      	ldrh	r3, [r7, #22]
}
 80181ae:	4618      	mov	r0, r3
 80181b0:	3718      	adds	r7, #24
 80181b2:	46bd      	mov	sp, r7
 80181b4:	bd80      	pop	{r7, pc}

080181b6 <rfalSt25tbPollerPcall>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerPcall( uint8_t *chipId )
{
 80181b6:	b580      	push	{r7, lr}
 80181b8:	b088      	sub	sp, #32
 80181ba:	af04      	add	r7, sp, #16
 80181bc:	6078      	str	r0, [r7, #4]
    ReturnCode         ret;
    uint16_t           rxLen;
    rfalSt25tbPcallReq pcallReq;

    /* Compute Pcal16 Request */
    pcallReq.cmd1   = RFAL_ST25TB_PCALL_CMD1;
 80181be:	2306      	movs	r3, #6
 80181c0:	723b      	strb	r3, [r7, #8]
    pcallReq.cmd2   = RFAL_ST25TB_PCALL_CMD2;
 80181c2:	2304      	movs	r3, #4
 80181c4:	727b      	strb	r3, [r7, #9]
    
    /* Send Pcal16 Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&pcallReq, sizeof(rfalSt25tbPcallReq), (uint8_t*)chipId, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 80181c6:	f107 0008 	add.w	r0, r7, #8
 80181ca:	f241 036d 	movw	r3, #4205	; 0x106d
 80181ce:	9302      	str	r3, [sp, #8]
 80181d0:	2300      	movs	r3, #0
 80181d2:	9301      	str	r3, [sp, #4]
 80181d4:	f107 030c 	add.w	r3, r7, #12
 80181d8:	9300      	str	r3, [sp, #0]
 80181da:	2301      	movs	r3, #1
 80181dc:	687a      	ldr	r2, [r7, #4]
 80181de:	2102      	movs	r1, #2
 80181e0:	f7fd fef2 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 80181e4:	4603      	mov	r3, r0
 80181e6:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 80181e8:	89fb      	ldrh	r3, [r7, #14]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d104      	bne.n	80181f8 <rfalSt25tbPollerPcall+0x42>
 80181ee:	89bb      	ldrh	r3, [r7, #12]
 80181f0:	2b01      	cmp	r3, #1
 80181f2:	d001      	beq.n	80181f8 <rfalSt25tbPollerPcall+0x42>
    {
        return ERR_PROTO;
 80181f4:	230b      	movs	r3, #11
 80181f6:	e000      	b.n	80181fa <rfalSt25tbPollerPcall+0x44>
    }
    
    return ret;
 80181f8:	89fb      	ldrh	r3, [r7, #14]
}
 80181fa:	4618      	mov	r0, r3
 80181fc:	3710      	adds	r7, #16
 80181fe:	46bd      	mov	sp, r7
 8018200:	bd80      	pop	{r7, pc}

08018202 <rfalSt25tbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSlotMarker( uint8_t slotNum, uint8_t *chipIdRes )
{
 8018202:	b580      	push	{r7, lr}
 8018204:	b088      	sub	sp, #32
 8018206:	af04      	add	r7, sp, #16
 8018208:	4603      	mov	r3, r0
 801820a:	6039      	str	r1, [r7, #0]
 801820c:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    uint16_t   rxLen;
    uint8_t    slotMarker;

    if( (slotNum == 0U) || (slotNum > 15U) )
 801820e:	79fb      	ldrb	r3, [r7, #7]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d002      	beq.n	801821a <rfalSt25tbPollerSlotMarker+0x18>
 8018214:	79fb      	ldrb	r3, [r7, #7]
 8018216:	2b0f      	cmp	r3, #15
 8018218:	d901      	bls.n	801821e <rfalSt25tbPollerSlotMarker+0x1c>
    {
        return ERR_PARAM;
 801821a:	2307      	movs	r3, #7
 801821c:	e020      	b.n	8018260 <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    /* Compute SlotMarker */
    slotMarker = ( ((slotNum & RFAL_ST25TB_SLOTNUM_MASK) << RFAL_ST25TB_SLOTNUM_SHIFT) | RFAL_ST25TB_PCALL_CMD1 );
 801821e:	79fb      	ldrb	r3, [r7, #7]
 8018220:	011b      	lsls	r3, r3, #4
 8018222:	b2db      	uxtb	r3, r3
 8018224:	f043 0306 	orr.w	r3, r3, #6
 8018228:	b2db      	uxtb	r3, r3
 801822a:	72fb      	strb	r3, [r7, #11]
    
    
    /* Send SlotMarker */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, RFAL_ST25TB_CMD_LEN, (uint8_t*)chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801822c:	f107 000b 	add.w	r0, r7, #11
 8018230:	f241 036d 	movw	r3, #4205	; 0x106d
 8018234:	9302      	str	r3, [sp, #8]
 8018236:	2300      	movs	r3, #0
 8018238:	9301      	str	r3, [sp, #4]
 801823a:	f107 030c 	add.w	r3, r7, #12
 801823e:	9300      	str	r3, [sp, #0]
 8018240:	2301      	movs	r3, #1
 8018242:	683a      	ldr	r2, [r7, #0]
 8018244:	2101      	movs	r1, #1
 8018246:	f7fd febf 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 801824a:	4603      	mov	r3, r0
 801824c:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid ChipID Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 801824e:	89fb      	ldrh	r3, [r7, #14]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d104      	bne.n	801825e <rfalSt25tbPollerSlotMarker+0x5c>
 8018254:	89bb      	ldrh	r3, [r7, #12]
 8018256:	2b01      	cmp	r3, #1
 8018258:	d001      	beq.n	801825e <rfalSt25tbPollerSlotMarker+0x5c>
    {
        return ERR_PROTO;
 801825a:	230b      	movs	r3, #11
 801825c:	e000      	b.n	8018260 <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    return ret;
 801825e:	89fb      	ldrh	r3, [r7, #14]
}
 8018260:	4618      	mov	r0, r3
 8018262:	3710      	adds	r7, #16
 8018264:	46bd      	mov	sp, r7
 8018266:	bd80      	pop	{r7, pc}

08018268 <rfalSt25tbPollerSelect>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSelect( uint8_t chipId )
{
 8018268:	b580      	push	{r7, lr}
 801826a:	b08a      	sub	sp, #40	; 0x28
 801826c:	af04      	add	r7, sp, #16
 801826e:	4603      	mov	r3, r0
 8018270:	71fb      	strb	r3, [r7, #7]
    uint16_t            rxLen;    
    rfalSt25tbSelectReq selectReq;
    uint8_t             chipIdRes;

    /* Compute Select Request */
    selectReq.cmd    = RFAL_ST25TB_SELECT_CMD;
 8018272:	230e      	movs	r3, #14
 8018274:	743b      	strb	r3, [r7, #16]
    selectReq.chipId = chipId;
 8018276:	79fb      	ldrb	r3, [r7, #7]
 8018278:	747b      	strb	r3, [r7, #17]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801827a:	f107 020f 	add.w	r2, r7, #15
 801827e:	f107 0010 	add.w	r0, r7, #16
 8018282:	f241 036d 	movw	r3, #4205	; 0x106d
 8018286:	9302      	str	r3, [sp, #8]
 8018288:	2300      	movs	r3, #0
 801828a:	9301      	str	r3, [sp, #4]
 801828c:	f107 0314 	add.w	r3, r7, #20
 8018290:	9300      	str	r3, [sp, #0]
 8018292:	2301      	movs	r3, #1
 8018294:	2102      	movs	r1, #2
 8018296:	f7fd fe97 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 801829a:	4603      	mov	r3, r0
 801829c:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && ((rxLen != RFAL_ST25TB_CHIP_ID_LEN) || (chipIdRes != chipId)) )
 801829e:	8afb      	ldrh	r3, [r7, #22]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d108      	bne.n	80182b6 <rfalSt25tbPollerSelect+0x4e>
 80182a4:	8abb      	ldrh	r3, [r7, #20]
 80182a6:	2b01      	cmp	r3, #1
 80182a8:	d103      	bne.n	80182b2 <rfalSt25tbPollerSelect+0x4a>
 80182aa:	7bfb      	ldrb	r3, [r7, #15]
 80182ac:	79fa      	ldrb	r2, [r7, #7]
 80182ae:	429a      	cmp	r2, r3
 80182b0:	d001      	beq.n	80182b6 <rfalSt25tbPollerSelect+0x4e>
    {
        return ERR_PROTO;
 80182b2:	230b      	movs	r3, #11
 80182b4:	e000      	b.n	80182b8 <rfalSt25tbPollerSelect+0x50>
    }
    
    return ret;
 80182b6:	8afb      	ldrh	r3, [r7, #22]
}
 80182b8:	4618      	mov	r0, r3
 80182ba:	3718      	adds	r7, #24
 80182bc:	46bd      	mov	sp, r7
 80182be:	bd80      	pop	{r7, pc}

080182c0 <rfalSt25tbPollerGetUID>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerGetUID( rfalSt25tbUID *UID )
{
 80182c0:	b580      	push	{r7, lr}
 80182c2:	b088      	sub	sp, #32
 80182c4:	af04      	add	r7, sp, #16
 80182c6:	6078      	str	r0, [r7, #4]
    uint16_t   rxLen;
    uint8_t    getUidReq;
    

    /* Compute Get UID Request */
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 80182c8:	230b      	movs	r3, #11
 80182ca:	72fb      	strb	r3, [r7, #11]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 80182cc:	f107 000b 	add.w	r0, r7, #11
 80182d0:	f241 036d 	movw	r3, #4205	; 0x106d
 80182d4:	9302      	str	r3, [sp, #8]
 80182d6:	2300      	movs	r3, #0
 80182d8:	9301      	str	r3, [sp, #4]
 80182da:	f107 030c 	add.w	r3, r7, #12
 80182de:	9300      	str	r3, [sp, #0]
 80182e0:	2308      	movs	r3, #8
 80182e2:	687a      	ldr	r2, [r7, #4]
 80182e4:	2101      	movs	r1, #1
 80182e6:	f7fd fe6f 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 80182ea:	4603      	mov	r3, r0
 80182ec:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid UID Response */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_UID_LEN) )
 80182ee:	89fb      	ldrh	r3, [r7, #14]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d104      	bne.n	80182fe <rfalSt25tbPollerGetUID+0x3e>
 80182f4:	89bb      	ldrh	r3, [r7, #12]
 80182f6:	2b08      	cmp	r3, #8
 80182f8:	d001      	beq.n	80182fe <rfalSt25tbPollerGetUID+0x3e>
    {
        return ERR_PROTO;
 80182fa:	230b      	movs	r3, #11
 80182fc:	e000      	b.n	8018300 <rfalSt25tbPollerGetUID+0x40>
    }
    
    return ret;
 80182fe:	89fb      	ldrh	r3, [r7, #14]
}
 8018300:	4618      	mov	r0, r3
 8018302:	3710      	adds	r7, #16
 8018304:	46bd      	mov	sp, r7
 8018306:	bd80      	pop	{r7, pc}

08018308 <rfalSt25tbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b086      	sub	sp, #24
 801830c:	af00      	add	r7, sp, #0
 801830e:	4603      	mov	r3, r0
 8018310:	60b9      	str	r1, [r7, #8]
 8018312:	607a      	str	r2, [r7, #4]
 8018314:	73fb      	strb	r3, [r7, #15]
    
    uint8_t    chipId;
    ReturnCode ret;
    bool       detected;  /* collision or device was detected */
    
    if( (st25tbDevList == NULL) || (devCnt == NULL) || (devLimit == 0U) )
 8018316:	68bb      	ldr	r3, [r7, #8]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d005      	beq.n	8018328 <rfalSt25tbPollerCollisionResolution+0x20>
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d002      	beq.n	8018328 <rfalSt25tbPollerCollisionResolution+0x20>
 8018322:	7bfb      	ldrb	r3, [r7, #15]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d101      	bne.n	801832c <rfalSt25tbPollerCollisionResolution+0x24>
    {
        return ERR_PARAM;
 8018328:	2307      	movs	r3, #7
 801832a:	e05c      	b.n	80183e6 <rfalSt25tbPollerCollisionResolution+0xde>
    }
    
    *devCnt = 0;
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	2200      	movs	r2, #0
 8018330:	701a      	strb	r2, [r3, #0]
    
    /* Step 1: Send Initiate */
    ret = rfalSt25tbPollerInitiate( &chipId );
 8018332:	f107 0314 	add.w	r3, r7, #20
 8018336:	4618      	mov	r0, r3
 8018338:	f7ff ff10 	bl	801815c <rfalSt25tbPollerInitiate>
 801833c:	4603      	mov	r3, r0
 801833e:	82fb      	strh	r3, [r7, #22]
    if( ret == ERR_NONE )
 8018340:	8afb      	ldrh	r3, [r7, #22]
 8018342:	2b00      	cmp	r3, #0
 8018344:	d139      	bne.n	80183ba <rfalSt25tbPollerCollisionResolution+0xb2>
    {
        /* If only 1 answer is detected */
        st25tbDevList[*devCnt].chipID       = chipId;
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	781b      	ldrb	r3, [r3, #0]
 801834a:	461a      	mov	r2, r3
 801834c:	4613      	mov	r3, r2
 801834e:	009b      	lsls	r3, r3, #2
 8018350:	4413      	add	r3, r2
 8018352:	005b      	lsls	r3, r3, #1
 8018354:	461a      	mov	r2, r3
 8018356:	68bb      	ldr	r3, [r7, #8]
 8018358:	4413      	add	r3, r2
 801835a:	7d3a      	ldrb	r2, [r7, #20]
 801835c:	701a      	strb	r2, [r3, #0]
        st25tbDevList[*devCnt].isDeselected = false;
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	781b      	ldrb	r3, [r3, #0]
 8018362:	461a      	mov	r2, r3
 8018364:	4613      	mov	r3, r2
 8018366:	009b      	lsls	r3, r3, #2
 8018368:	4413      	add	r3, r2
 801836a:	005b      	lsls	r3, r3, #1
 801836c:	461a      	mov	r2, r3
 801836e:	68bb      	ldr	r3, [r7, #8]
 8018370:	4413      	add	r3, r2
 8018372:	2200      	movs	r2, #0
 8018374:	725a      	strb	r2, [r3, #9]
        
        /* Retrieve its UID and keep it Selected*/
        ret = rfalSt25tbPollerSelect( chipId );
 8018376:	7d3b      	ldrb	r3, [r7, #20]
 8018378:	4618      	mov	r0, r3
 801837a:	f7ff ff75 	bl	8018268 <rfalSt25tbPollerSelect>
 801837e:	4603      	mov	r3, r0
 8018380:	82fb      	strh	r3, [r7, #22]
        
        if( ERR_NONE == ret )
 8018382:	8afb      	ldrh	r3, [r7, #22]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d10f      	bne.n	80183a8 <rfalSt25tbPollerCollisionResolution+0xa0>
        {
            ret = rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	781b      	ldrb	r3, [r3, #0]
 801838c:	461a      	mov	r2, r3
 801838e:	4613      	mov	r3, r2
 8018390:	009b      	lsls	r3, r3, #2
 8018392:	4413      	add	r3, r2
 8018394:	005b      	lsls	r3, r3, #1
 8018396:	461a      	mov	r2, r3
 8018398:	68bb      	ldr	r3, [r7, #8]
 801839a:	4413      	add	r3, r2
 801839c:	3301      	adds	r3, #1
 801839e:	4618      	mov	r0, r3
 80183a0:	f7ff ff8e 	bl	80182c0 <rfalSt25tbPollerGetUID>
 80183a4:	4603      	mov	r3, r0
 80183a6:	82fb      	strh	r3, [r7, #22]
        }
        
        if( ERR_NONE == ret )
 80183a8:	8afb      	ldrh	r3, [r7, #22]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d105      	bne.n	80183ba <rfalSt25tbPollerCollisionResolution+0xb2>
        {
            (*devCnt)++;
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	781b      	ldrb	r3, [r3, #0]
 80183b2:	3301      	adds	r3, #1
 80183b4:	b2da      	uxtb	r2, r3
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	701a      	strb	r2, [r3, #0]
        }
    }
    /* Always proceed to Pcall16 anticollision as phase differences of tags can lead to no tag recognized, even if there is one */
    if( *devCnt < devLimit )
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	781b      	ldrb	r3, [r3, #0]
 80183be:	7bfa      	ldrb	r2, [r7, #15]
 80183c0:	429a      	cmp	r2, r3
 80183c2:	d90f      	bls.n	80183e4 <rfalSt25tbPollerCollisionResolution+0xdc>
    {
        /* Multiple device responses */
        do
        {
            detected = rfalSt25tbPollerDoCollisionResolution( devLimit, st25tbDevList, devCnt );
 80183c4:	7bfb      	ldrb	r3, [r7, #15]
 80183c6:	687a      	ldr	r2, [r7, #4]
 80183c8:	68b9      	ldr	r1, [r7, #8]
 80183ca:	4618      	mov	r0, r3
 80183cc:	f7ff fe16 	bl	8017ffc <rfalSt25tbPollerDoCollisionResolution>
 80183d0:	4603      	mov	r3, r0
 80183d2:	757b      	strb	r3, [r7, #21]
        }
        while( (detected == true) && (*devCnt < devLimit) );
 80183d4:	7d7b      	ldrb	r3, [r7, #21]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d004      	beq.n	80183e4 <rfalSt25tbPollerCollisionResolution+0xdc>
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	781b      	ldrb	r3, [r3, #0]
 80183de:	7bfa      	ldrb	r2, [r7, #15]
 80183e0:	429a      	cmp	r2, r3
 80183e2:	d8ef      	bhi.n	80183c4 <rfalSt25tbPollerCollisionResolution+0xbc>
    }

    return ERR_NONE;
 80183e4:	2300      	movs	r3, #0
}
 80183e6:	4618      	mov	r0, r3
 80183e8:	3718      	adds	r7, #24
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}

080183ee <rfalST25xVPollerM24LRReadSingleBlock>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRReadSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 80183ee:	b580      	push	{r7, lr}
 80183f0:	b08c      	sub	sp, #48	; 0x30
 80183f2:	af06      	add	r7, sp, #24
 80183f4:	60b9      	str	r1, [r7, #8]
 80183f6:	607b      	str	r3, [r7, #4]
 80183f8:	4603      	mov	r3, r0
 80183fa:	73fb      	strb	r3, [r7, #15]
 80183fc:	4613      	mov	r3, r2
 80183fe:	81bb      	strh	r3, [r7, #12]
    uint8_t data[RFAL_NFCV_BLOCKNUM_M24LR_LEN];
    uint8_t dataLen;
    
    dataLen = 0;
 8018400:	2300      	movs	r3, #0
 8018402:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;         /* Set M24LR Block Number (16 bits) LSB */
 8018404:	7dfb      	ldrb	r3, [r7, #23]
 8018406:	1c5a      	adds	r2, r3, #1
 8018408:	75fa      	strb	r2, [r7, #23]
 801840a:	89ba      	ldrh	r2, [r7, #12]
 801840c:	b2d2      	uxtb	r2, r2
 801840e:	f107 0118 	add.w	r1, r7, #24
 8018412:	440b      	add	r3, r1
 8018414:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = (uint8_t)(blockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 8018418:	89bb      	ldrh	r3, [r7, #12]
 801841a:	0a1b      	lsrs	r3, r3, #8
 801841c:	b29a      	uxth	r2, r3
 801841e:	7dfb      	ldrb	r3, [r7, #23]
 8018420:	1c59      	adds	r1, r3, #1
 8018422:	75f9      	strb	r1, [r7, #23]
 8018424:	b2d2      	uxtb	r2, r2
 8018426:	f107 0118 	add.w	r1, r7, #24
 801842a:	440b      	add	r3, r1
 801842c:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8018430:	7bfb      	ldrb	r3, [r7, #15]
 8018432:	f043 0308 	orr.w	r3, r3, #8
 8018436:	b2d9      	uxtb	r1, r3
 8018438:	7dfb      	ldrb	r3, [r7, #23]
 801843a:	b29b      	uxth	r3, r3
 801843c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801843e:	9204      	str	r2, [sp, #16]
 8018440:	8c3a      	ldrh	r2, [r7, #32]
 8018442:	9203      	str	r2, [sp, #12]
 8018444:	687a      	ldr	r2, [r7, #4]
 8018446:	9202      	str	r2, [sp, #8]
 8018448:	9301      	str	r3, [sp, #4]
 801844a:	f107 0314 	add.w	r3, r7, #20
 801844e:	9300      	str	r3, [sp, #0]
 8018450:	68bb      	ldr	r3, [r7, #8]
 8018452:	2200      	movs	r2, #0
 8018454:	2020      	movs	r0, #32
 8018456:	f7fc fde9 	bl	801502c <rfalNfcvPollerTransceiveReq>
 801845a:	4603      	mov	r3, r0
}
 801845c:	4618      	mov	r0, r3
 801845e:	3718      	adds	r7, #24
 8018460:	46bd      	mov	sp, r7
 8018462:	bd80      	pop	{r7, pc}

08018464 <rfalST25xVPollerM24LRWriteSingleBlock>:

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 8018464:	b580      	push	{r7, lr}
 8018466:	b09e      	sub	sp, #120	; 0x78
 8018468:	af06      	add	r7, sp, #24
 801846a:	60b9      	str	r1, [r7, #8]
 801846c:	607b      	str	r3, [r7, #4]
 801846e:	4603      	mov	r3, r0
 8018470:	73fb      	strb	r3, [r7, #15]
 8018472:	4613      	mov	r3, r2
 8018474:	81bb      	strh	r3, [r7, #12]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) || (wrData == NULL) )
 8018476:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801847a:	2b00      	cmp	r3, #0
 801847c:	d006      	beq.n	801848c <rfalST25xVPollerM24LRWriteSingleBlock+0x28>
 801847e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8018482:	2b20      	cmp	r3, #32
 8018484:	d802      	bhi.n	801848c <rfalST25xVPollerM24LRWriteSingleBlock+0x28>
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d101      	bne.n	8018490 <rfalST25xVPollerM24LRWriteSingleBlock+0x2c>
    {
        return ERR_PARAM;
 801848c:	2307      	movs	r3, #7
 801848e:	e047      	b.n	8018520 <rfalST25xVPollerM24LRWriteSingleBlock+0xbc>
    }
    
    dataLen = 0U;
 8018490:	2300      	movs	r3, #0
 8018492:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;         /* Set M24LR Block Number (16 bits) LSB */
 8018496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801849a:	1c5a      	adds	r2, r3, #1
 801849c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 80184a0:	89ba      	ldrh	r2, [r7, #12]
 80184a2:	b2d2      	uxtb	r2, r2
 80184a4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80184a8:	440b      	add	r3, r1
 80184aa:	f803 2c24 	strb.w	r2, [r3, #-36]
    data[dataLen++] = (uint8_t)(blockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 80184ae:	89bb      	ldrh	r3, [r7, #12]
 80184b0:	0a1b      	lsrs	r3, r3, #8
 80184b2:	b29a      	uxth	r2, r3
 80184b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80184b8:	1c59      	adds	r1, r3, #1
 80184ba:	f887 105f 	strb.w	r1, [r7, #95]	; 0x5f
 80184be:	b2d2      	uxtb	r2, r2
 80184c0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80184c4:	440b      	add	r3, r1
 80184c6:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen ); /* Append Block data to write       */
 80184ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80184ce:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80184d2:	4413      	add	r3, r2
 80184d4:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80184d8:	6879      	ldr	r1, [r7, #4]
 80184da:	4618      	mov	r0, r3
 80184dc:	f000 fc8b 	bl	8018df6 <memcpy>
    dataLen += blockLen;
 80184e0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80184e4:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80184e8:	4413      	add	r3, r2
 80184ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 80184ee:	7bfb      	ldrb	r3, [r7, #15]
 80184f0:	f043 0308 	orr.w	r3, r3, #8
 80184f4:	b2d9      	uxtb	r1, r3
 80184f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80184fa:	b29b      	uxth	r3, r3
 80184fc:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 8018500:	9204      	str	r2, [sp, #16]
 8018502:	222a      	movs	r2, #42	; 0x2a
 8018504:	9203      	str	r2, [sp, #12]
 8018506:	f107 0210 	add.w	r2, r7, #16
 801850a:	9202      	str	r2, [sp, #8]
 801850c:	9301      	str	r3, [sp, #4]
 801850e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018512:	9300      	str	r3, [sp, #0]
 8018514:	68bb      	ldr	r3, [r7, #8]
 8018516:	2200      	movs	r2, #0
 8018518:	2021      	movs	r0, #33	; 0x21
 801851a:	f7fc fd87 	bl	801502c <rfalNfcvPollerTransceiveReq>
 801851e:	4603      	mov	r3, r0
}
 8018520:	4618      	mov	r0, r3
 8018522:	3760      	adds	r7, #96	; 0x60
 8018524:	46bd      	mov	sp, r7
 8018526:	bd80      	pop	{r7, pc}

08018528 <rfalST25xVPollerM24LRReadMultipleBlocks>:

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint16_t firstBlockNum, uint8_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8018528:	b580      	push	{r7, lr}
 801852a:	b08a      	sub	sp, #40	; 0x28
 801852c:	af06      	add	r7, sp, #24
 801852e:	6039      	str	r1, [r7, #0]
 8018530:	4611      	mov	r1, r2
 8018532:	461a      	mov	r2, r3
 8018534:	4603      	mov	r3, r0
 8018536:	71fb      	strb	r3, [r7, #7]
 8018538:	460b      	mov	r3, r1
 801853a:	80bb      	strh	r3, [r7, #4]
 801853c:	4613      	mov	r3, r2
 801853e:	71bb      	strb	r3, [r7, #6]
    uint8_t data[(RFAL_NFCV_BLOCKNUM_M24LR_LEN + RFAL_NFCV_BLOCKNUM_M24LR_LEN)];
    uint8_t dataLen;
    
    dataLen = 0U;
 8018540:	2300      	movs	r3, #0
 8018542:	73fb      	strb	r3, [r7, #15]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)firstBlockNum;         /* Set M24LR Block Number (16 bits) LSB */
 8018544:	7bfb      	ldrb	r3, [r7, #15]
 8018546:	1c5a      	adds	r2, r3, #1
 8018548:	73fa      	strb	r2, [r7, #15]
 801854a:	88ba      	ldrh	r2, [r7, #4]
 801854c:	b2d2      	uxtb	r2, r2
 801854e:	f107 0110 	add.w	r1, r7, #16
 8018552:	440b      	add	r3, r1
 8018554:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)(firstBlockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 8018558:	88bb      	ldrh	r3, [r7, #4]
 801855a:	0a1b      	lsrs	r3, r3, #8
 801855c:	b29a      	uxth	r2, r3
 801855e:	7bfb      	ldrb	r3, [r7, #15]
 8018560:	1c59      	adds	r1, r3, #1
 8018562:	73f9      	strb	r1, [r7, #15]
 8018564:	b2d2      	uxtb	r2, r2
 8018566:	f107 0110 	add.w	r1, r7, #16
 801856a:	440b      	add	r3, r1
 801856c:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = numOfBlocks;                    /* Set number of blocks to read         */
 8018570:	7bfb      	ldrb	r3, [r7, #15]
 8018572:	1c5a      	adds	r2, r3, #1
 8018574:	73fa      	strb	r2, [r7, #15]
 8018576:	f107 0210 	add.w	r2, r7, #16
 801857a:	4413      	add	r3, r2
 801857c:	79ba      	ldrb	r2, [r7, #6]
 801857e:	f803 2c08 	strb.w	r2, [r3, #-8]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_MULTIPLE_BLOCKS, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8018582:	79fb      	ldrb	r3, [r7, #7]
 8018584:	f043 0308 	orr.w	r3, r3, #8
 8018588:	b2d9      	uxtb	r1, r3
 801858a:	7bfb      	ldrb	r3, [r7, #15]
 801858c:	b29b      	uxth	r3, r3
 801858e:	6a3a      	ldr	r2, [r7, #32]
 8018590:	9204      	str	r2, [sp, #16]
 8018592:	8bba      	ldrh	r2, [r7, #28]
 8018594:	9203      	str	r2, [sp, #12]
 8018596:	69ba      	ldr	r2, [r7, #24]
 8018598:	9202      	str	r2, [sp, #8]
 801859a:	9301      	str	r3, [sp, #4]
 801859c:	f107 0308 	add.w	r3, r7, #8
 80185a0:	9300      	str	r3, [sp, #0]
 80185a2:	683b      	ldr	r3, [r7, #0]
 80185a4:	2200      	movs	r2, #0
 80185a6:	2023      	movs	r0, #35	; 0x23
 80185a8:	f7fc fd40 	bl	801502c <rfalNfcvPollerTransceiveReq>
 80185ac:	4603      	mov	r3, r0
}
 80185ae:	4618      	mov	r0, r3
 80185b0:	3710      	adds	r7, #16
 80185b2:	46bd      	mov	sp, r7
 80185b4:	bd80      	pop	{r7, pc}

080185b6 <rfalT1TPollerInitialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode rfalT1TPollerInitialize( void )
{
 80185b6:	b580      	push	{r7, lr}
 80185b8:	b082      	sub	sp, #8
 80185ba:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 80185bc:	2200      	movs	r2, #0
 80185be:	2100      	movs	r1, #0
 80185c0:	2002      	movs	r0, #2
 80185c2:	f7fc fed3 	bl	801536c <rfalSetMode>
 80185c6:	4603      	mov	r3, r0
 80185c8:	80fb      	strh	r3, [r7, #6]
 80185ca:	88fb      	ldrh	r3, [r7, #6]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d001      	beq.n	80185d4 <rfalT1TPollerInitialize+0x1e>
 80185d0:	88fb      	ldrh	r3, [r7, #6]
 80185d2:	e00e      	b.n	80185f2 <rfalT1TPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 80185d4:	2001      	movs	r0, #1
 80185d6:	f7fd fa63 	bl	8015aa0 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NONE );                          /* T1T should only be initialized after NFC-A mode, therefore the GT has been fulfilled */ 
 80185da:	2000      	movs	r0, #0
 80185dc:	f7fd fa98 	bl	8015b10 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );    /* T1T uses NFC-A FDT Listen with n=9   Digital 1.1  10.7.2                             */
 80185e0:	f240 4094 	movw	r0, #1172	; 0x494
 80185e4:	f7fd fa80 	bl	8015ae8 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_T1T_POLLER );
 80185e8:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80185ec:	f7fd fa68 	bl	8015ac0 <rfalSetFDTPoll>
    
    return ERR_NONE;
 80185f0:	2300      	movs	r3, #0
}
 80185f2:	4618      	mov	r0, r3
 80185f4:	3708      	adds	r7, #8
 80185f6:	46bd      	mov	sp, r7
 80185f8:	bd80      	pop	{r7, pc}

080185fa <rfalT1TPollerRid>:


/*******************************************************************************/
ReturnCode rfalT1TPollerRid( rfalT1TRidRes *ridRes )
{
 80185fa:	b580      	push	{r7, lr}
 80185fc:	b08a      	sub	sp, #40	; 0x28
 80185fe:	af04      	add	r7, sp, #16
 8018600:	6078      	str	r0, [r7, #4]
    ReturnCode     ret;
    rfalT1TRidReq  ridReq;
    uint16_t       rcvdLen;
    
    if( ridRes == NULL )
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d101      	bne.n	801860c <rfalT1TPollerRid+0x12>
    {
        return ERR_PARAM;
 8018608:	2307      	movs	r3, #7
 801860a:	e02a      	b.n	8018662 <rfalT1TPollerRid+0x68>
    }
    
    /* Compute RID command and set Undefined Values to 0x00    Digital 1.1 10.6.1 */
    ST_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 801860c:	f107 030c 	add.w	r3, r7, #12
 8018610:	2207      	movs	r2, #7
 8018612:	2100      	movs	r1, #0
 8018614:	4618      	mov	r0, r3
 8018616:	f000 fc12 	bl	8018e3e <memset>
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 801861a:	2378      	movs	r3, #120	; 0x78
 801861c:	733b      	strb	r3, [r7, #12]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&ridReq, sizeof(rfalT1TRidReq), (uint8_t*)ridRes, sizeof(rfalT1TRidRes), &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_T1T_DRD_READ ) );
 801861e:	f107 000c 	add.w	r0, r7, #12
 8018622:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8018626:	9302      	str	r3, [sp, #8]
 8018628:	2300      	movs	r3, #0
 801862a:	9301      	str	r3, [sp, #4]
 801862c:	f107 030a 	add.w	r3, r7, #10
 8018630:	9300      	str	r3, [sp, #0]
 8018632:	2306      	movs	r3, #6
 8018634:	687a      	ldr	r2, [r7, #4]
 8018636:	2107      	movs	r1, #7
 8018638:	f7fd fcc6 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 801863c:	4603      	mov	r3, r0
 801863e:	82fb      	strh	r3, [r7, #22]
 8018640:	8afb      	ldrh	r3, [r7, #22]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d001      	beq.n	801864a <rfalT1TPollerRid+0x50>
 8018646:	8afb      	ldrh	r3, [r7, #22]
 8018648:	e00b      	b.n	8018662 <rfalT1TPollerRid+0x68>
    
    /* Check expected RID response length and the HR0   Digital 2.0 (Candidate) 11.6.2.1 */
    if( (rcvdLen != sizeof(rfalT1TRidRes)) || ((ridRes->hr0 & RFAL_T1T_RID_RES_HR0_MASK) != RFAL_T1T_RID_RES_HR0_VAL) )
 801864a:	897b      	ldrh	r3, [r7, #10]
 801864c:	2b06      	cmp	r3, #6
 801864e:	d105      	bne.n	801865c <rfalT1TPollerRid+0x62>
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	781b      	ldrb	r3, [r3, #0]
 8018654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018658:	2b10      	cmp	r3, #16
 801865a:	d001      	beq.n	8018660 <rfalT1TPollerRid+0x66>
    {
        return ERR_PROTO;
 801865c:	230b      	movs	r3, #11
 801865e:	e000      	b.n	8018662 <rfalT1TPollerRid+0x68>
    }
    
    return ERR_NONE;
 8018660:	2300      	movs	r3, #0
}
 8018662:	4618      	mov	r0, r3
 8018664:	3718      	adds	r7, #24
 8018666:	46bd      	mov	sp, r7
 8018668:	bd80      	pop	{r7, pc}
	...

0801866c <rfalT2TPollerRead>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

 ReturnCode rfalT2TPollerRead( uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
 {
 801866c:	b580      	push	{r7, lr}
 801866e:	b08a      	sub	sp, #40	; 0x28
 8018670:	af04      	add	r7, sp, #16
 8018672:	60b9      	str	r1, [r7, #8]
 8018674:	607b      	str	r3, [r7, #4]
 8018676:	4603      	mov	r3, r0
 8018678:	73fb      	strb	r3, [r7, #15]
 801867a:	4613      	mov	r3, r2
 801867c:	81bb      	strh	r3, [r7, #12]
    ReturnCode      ret;
    rfalT2TReadReq  req;
     
    if( (rxBuf == NULL) || (rcvLen == NULL) )
 801867e:	68bb      	ldr	r3, [r7, #8]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d002      	beq.n	801868a <rfalT2TPollerRead+0x1e>
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d101      	bne.n	801868e <rfalT2TPollerRead+0x22>
    {
        return ERR_PARAM;
 801868a:	2307      	movs	r3, #7
 801868c:	e023      	b.n	80186d6 <rfalT2TPollerRead+0x6a>
    }
    
    req.code = (uint8_t)RFAL_T2T_CMD_READ;
 801868e:	2330      	movs	r3, #48	; 0x30
 8018690:	753b      	strb	r3, [r7, #20]
    req.blNo = blockNum;
 8018692:	7bfb      	ldrb	r3, [r7, #15]
 8018694:	757b      	strb	r3, [r7, #21]
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TReadReq), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 8018696:	89ba      	ldrh	r2, [r7, #12]
 8018698:	f107 0014 	add.w	r0, r7, #20
 801869c:	4b10      	ldr	r3, [pc, #64]	; (80186e0 <rfalT2TPollerRead+0x74>)
 801869e:	9302      	str	r3, [sp, #8]
 80186a0:	2300      	movs	r3, #0
 80186a2:	9301      	str	r3, [sp, #4]
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	9300      	str	r3, [sp, #0]
 80186a8:	4613      	mov	r3, r2
 80186aa:	68ba      	ldr	r2, [r7, #8]
 80186ac:	2102      	movs	r1, #2
 80186ae:	f7fd fc8b 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 80186b2:	4603      	mov	r3, r0
 80186b4:	82fb      	strh	r3, [r7, #22]
    
    /* T2T 1.0 5.2.1.7 The Reader/Writer SHALL treat a NACK in response to a READ Command as a Protocol Error */
    if( (ret == ERR_INCOMPLETE_BYTE) && (*rcvLen == RFAL_T2T_ACK_NACK_LEN) && ((*rxBuf & RFAL_T2T_ACK_MASK) != RFAL_T2T_ACK) )
 80186b6:	8afb      	ldrh	r3, [r7, #22]
 80186b8:	2b28      	cmp	r3, #40	; 0x28
 80186ba:	d10b      	bne.n	80186d4 <rfalT2TPollerRead+0x68>
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	881b      	ldrh	r3, [r3, #0]
 80186c0:	2b01      	cmp	r3, #1
 80186c2:	d107      	bne.n	80186d4 <rfalT2TPollerRead+0x68>
 80186c4:	68bb      	ldr	r3, [r7, #8]
 80186c6:	781b      	ldrb	r3, [r3, #0]
 80186c8:	f003 030f 	and.w	r3, r3, #15
 80186cc:	2b0a      	cmp	r3, #10
 80186ce:	d001      	beq.n	80186d4 <rfalT2TPollerRead+0x68>
    {
        return ERR_PROTO;
 80186d0:	230b      	movs	r3, #11
 80186d2:	e000      	b.n	80186d6 <rfalT2TPollerRead+0x6a>
    }
    return ret;
 80186d4:	8afb      	ldrh	r3, [r7, #22]
 }
 80186d6:	4618      	mov	r0, r3
 80186d8:	3718      	adds	r7, #24
 80186da:	46bd      	mov	sp, r7
 80186dc:	bd80      	pop	{r7, pc}
 80186de:	bf00      	nop
 80186e0:	000108d8 	.word	0x000108d8

080186e4 <rfalT2TPollerWrite>:
 
 
 /*******************************************************************************/
 ReturnCode rfalT2TPollerWrite( uint8_t blockNum, const uint8_t* wrData )
 {
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b08a      	sub	sp, #40	; 0x28
 80186e8:	af04      	add	r7, sp, #16
 80186ea:	4603      	mov	r3, r0
 80186ec:	6039      	str	r1, [r7, #0]
 80186ee:	71fb      	strb	r3, [r7, #7]
    ReturnCode         ret;
    rfalT2TWriteReq    req;
    uint8_t            res;
    uint16_t           rxLen;
    
    req.code = (uint8_t)RFAL_T2T_CMD_WRITE;
 80186f0:	23a2      	movs	r3, #162	; 0xa2
 80186f2:	743b      	strb	r3, [r7, #16]
    req.blNo = blockNum;
 80186f4:	79fb      	ldrb	r3, [r7, #7]
 80186f6:	747b      	strb	r3, [r7, #17]
    ST_MEMCPY(req.data, wrData, RFAL_T2T_WRITE_DATA_LEN);
 80186f8:	683b      	ldr	r3, [r7, #0]
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	f8c7 3012 	str.w	r3, [r7, #18]
    
     
    /* Transceive WRITE Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TWriteReq), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 8018700:	f107 020f 	add.w	r2, r7, #15
 8018704:	f107 0010 	add.w	r0, r7, #16
 8018708:	4b11      	ldr	r3, [pc, #68]	; (8018750 <rfalT2TPollerWrite+0x6c>)
 801870a:	9302      	str	r3, [sp, #8]
 801870c:	2300      	movs	r3, #0
 801870e:	9301      	str	r3, [sp, #4]
 8018710:	f107 030c 	add.w	r3, r7, #12
 8018714:	9300      	str	r3, [sp, #0]
 8018716:	2301      	movs	r3, #1
 8018718:	2106      	movs	r1, #6
 801871a:	f7fd fc55 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 801871e:	4603      	mov	r3, r0
 8018720:	82fb      	strh	r3, [r7, #22]
    
    /* Check for a valid ACK */
    if( (ret == ERR_INCOMPLETE_BYTE) || (ret == ERR_NONE) )
 8018722:	8afb      	ldrh	r3, [r7, #22]
 8018724:	2b28      	cmp	r3, #40	; 0x28
 8018726:	d002      	beq.n	801872e <rfalT2TPollerWrite+0x4a>
 8018728:	8afb      	ldrh	r3, [r7, #22]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d10b      	bne.n	8018746 <rfalT2TPollerWrite+0x62>
    {
        ret = ERR_PROTO;
 801872e:	230b      	movs	r3, #11
 8018730:	82fb      	strh	r3, [r7, #22]
        
        if( (rxLen == RFAL_T2T_ACK_NACK_LEN) && ((res & RFAL_T2T_ACK_MASK) == RFAL_T2T_ACK) )
 8018732:	89bb      	ldrh	r3, [r7, #12]
 8018734:	2b01      	cmp	r3, #1
 8018736:	d106      	bne.n	8018746 <rfalT2TPollerWrite+0x62>
 8018738:	7bfb      	ldrb	r3, [r7, #15]
 801873a:	f003 030f 	and.w	r3, r3, #15
 801873e:	2b0a      	cmp	r3, #10
 8018740:	d101      	bne.n	8018746 <rfalT2TPollerWrite+0x62>
        {
            ret = ERR_NONE;
 8018742:	2300      	movs	r3, #0
 8018744:	82fb      	strh	r3, [r7, #22]
        }
    }
    
    return ret;
 8018746:	8afb      	ldrh	r3, [r7, #22]
 }
 8018748:	4618      	mov	r0, r3
 801874a:	3718      	adds	r7, #24
 801874c:	46bd      	mov	sp, r7
 801874e:	bd80      	pop	{r7, pc}
 8018750:	000108d8 	.word	0x000108d8

08018754 <rfalT2TPollerSectorSelect>:

 
 /*******************************************************************************/
 ReturnCode rfalT2TPollerSectorSelect( uint8_t sectorNum )
 {
 8018754:	b580      	push	{r7, lr}
 8018756:	b08a      	sub	sp, #40	; 0x28
 8018758:	af04      	add	r7, sp, #16
 801875a:	4603      	mov	r3, r0
 801875c:	71fb      	strb	r3, [r7, #7]
    uint8_t                  res;
    uint16_t                 rxLen;
    
    
    /* Compute SECTOR SELECT Packet 1  */
    p1Req.code  = (uint8_t)RFAL_T2T_CMD_SECTOR_SELECT;
 801875e:	23c2      	movs	r3, #194	; 0xc2
 8018760:	753b      	strb	r3, [r7, #20]
    p1Req.byte2 = RFAL_T2T_SECTOR_SELECT_P1_BYTE2;
 8018762:	23ff      	movs	r3, #255	; 0xff
 8018764:	757b      	strb	r3, [r7, #21]
    
    /* Transceive SECTOR SELECT Packet 1 */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&p1Req, sizeof(rfalT2TSectorSelectP1Req), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_SL_MAX );
 8018766:	f107 020f 	add.w	r2, r7, #15
 801876a:	f107 0014 	add.w	r0, r7, #20
 801876e:	f243 43f8 	movw	r3, #13560	; 0x34f8
 8018772:	9302      	str	r3, [sp, #8]
 8018774:	2300      	movs	r3, #0
 8018776:	9301      	str	r3, [sp, #4]
 8018778:	f107 030c 	add.w	r3, r7, #12
 801877c:	9300      	str	r3, [sp, #0]
 801877e:	2301      	movs	r3, #1
 8018780:	2102      	movs	r1, #2
 8018782:	f7fd fc21 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 8018786:	4603      	mov	r3, r0
 8018788:	82fb      	strh	r3, [r7, #22]
    
    /* Check and report any transmission error */
    if( (ret != ERR_INCOMPLETE_BYTE) && (ret != ERR_NONE) )
 801878a:	8afb      	ldrh	r3, [r7, #22]
 801878c:	2b28      	cmp	r3, #40	; 0x28
 801878e:	d004      	beq.n	801879a <rfalT2TPollerSectorSelect+0x46>
 8018790:	8afb      	ldrh	r3, [r7, #22]
 8018792:	2b00      	cmp	r3, #0
 8018794:	d001      	beq.n	801879a <rfalT2TPollerSectorSelect+0x46>
    {
        return ret;
 8018796:	8afb      	ldrh	r3, [r7, #22]
 8018798:	e036      	b.n	8018808 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    /* Ensure that an ACK was received */
    if( (ret != ERR_INCOMPLETE_BYTE) || (rxLen != RFAL_T2T_ACK_NACK_LEN) || ((res & RFAL_T2T_ACK_MASK) != RFAL_T2T_ACK) )
 801879a:	8afb      	ldrh	r3, [r7, #22]
 801879c:	2b28      	cmp	r3, #40	; 0x28
 801879e:	d107      	bne.n	80187b0 <rfalT2TPollerSectorSelect+0x5c>
 80187a0:	89bb      	ldrh	r3, [r7, #12]
 80187a2:	2b01      	cmp	r3, #1
 80187a4:	d104      	bne.n	80187b0 <rfalT2TPollerSectorSelect+0x5c>
 80187a6:	7bfb      	ldrb	r3, [r7, #15]
 80187a8:	f003 030f 	and.w	r3, r3, #15
 80187ac:	2b0a      	cmp	r3, #10
 80187ae:	d001      	beq.n	80187b4 <rfalT2TPollerSectorSelect+0x60>
    {
        return ERR_PROTO;
 80187b0:	230b      	movs	r3, #11
 80187b2:	e029      	b.n	8018808 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    
    /* Compute SECTOR SELECT Packet 2  */
    p2Req.secNo  = sectorNum;
 80187b4:	79fb      	ldrb	r3, [r7, #7]
 80187b6:	743b      	strb	r3, [r7, #16]
    ST_MEMSET( &p2Req.rfu, 0x00, RFAL_T2T_SECTOR_SELECT_P2_RFU_LEN );
 80187b8:	f107 0310 	add.w	r3, r7, #16
 80187bc:	3301      	adds	r3, #1
 80187be:	2203      	movs	r2, #3
 80187c0:	2100      	movs	r1, #0
 80187c2:	4618      	mov	r0, r3
 80187c4:	f000 fb3b 	bl	8018e3e <memset>
    
    
    /* Transceive SECTOR SELECT Packet 2 */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&p2Req, sizeof(rfalT2TSectorSelectP2Req), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_SL_MAX );
 80187c8:	f107 020f 	add.w	r2, r7, #15
 80187cc:	f107 0010 	add.w	r0, r7, #16
 80187d0:	f243 43f8 	movw	r3, #13560	; 0x34f8
 80187d4:	9302      	str	r3, [sp, #8]
 80187d6:	2300      	movs	r3, #0
 80187d8:	9301      	str	r3, [sp, #4]
 80187da:	f107 030c 	add.w	r3, r7, #12
 80187de:	9300      	str	r3, [sp, #0]
 80187e0:	2301      	movs	r3, #1
 80187e2:	2104      	movs	r1, #4
 80187e4:	f7fd fbf0 	bl	8015fc8 <rfalTransceiveBlockingTxRx>
 80187e8:	4603      	mov	r3, r0
 80187ea:	82fb      	strh	r3, [r7, #22]
    
    /* T2T 1.0 5.4.1.14 The Reader/Writer SHALL treat any response received before the end of PATT2T,SL,MAX as a Protocol Error */
    if( (ret == ERR_NONE) || (ret == ERR_INCOMPLETE_BYTE) )
 80187ec:	8afb      	ldrh	r3, [r7, #22]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d002      	beq.n	80187f8 <rfalT2TPollerSectorSelect+0xa4>
 80187f2:	8afb      	ldrh	r3, [r7, #22]
 80187f4:	2b28      	cmp	r3, #40	; 0x28
 80187f6:	d101      	bne.n	80187fc <rfalT2TPollerSectorSelect+0xa8>
    {
        return ERR_PROTO;
 80187f8:	230b      	movs	r3, #11
 80187fa:	e005      	b.n	8018808 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    /* T2T 1.0 5.4.1.13 The Reader/Writer SHALL treat the transmission of the SECTOR SELECT Command Packet 2 as being successful when it receives no response until PATT2T,SL,MAX. */ 
    if( ret == ERR_TIMEOUT )
 80187fc:	8afb      	ldrh	r3, [r7, #22]
 80187fe:	2b04      	cmp	r3, #4
 8018800:	d101      	bne.n	8018806 <rfalT2TPollerSectorSelect+0xb2>
    {
        return ERR_NONE;
 8018802:	2300      	movs	r3, #0
 8018804:	e000      	b.n	8018808 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    return ret;
 8018806:	8afb      	ldrh	r3, [r7, #22]
 }
 8018808:	4618      	mov	r0, r3
 801880a:	3718      	adds	r7, #24
 801880c:	46bd      	mov	sp, r7
 801880e:	bd80      	pop	{r7, pc}

08018810 <rfalT4TPollerComposeCAPDU>:
 ******************************************************************************
 */

/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeCAPDU( rfalT4tCApduParam *apduParam )
{
 8018810:	b580      	push	{r7, lr}
 8018812:	b084      	sub	sp, #16
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
    uint8_t                  hdrLen;
    uint16_t                 msgIt;
    
    if( (apduParam == NULL) || (apduParam->cApduBuf == NULL) || (apduParam->cApduLen == NULL) )
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	2b00      	cmp	r3, #0
 801881c:	d007      	beq.n	801882e <rfalT4TPollerComposeCAPDU+0x1e>
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	689b      	ldr	r3, [r3, #8]
 8018822:	2b00      	cmp	r3, #0
 8018824:	d003      	beq.n	801882e <rfalT4TPollerComposeCAPDU+0x1e>
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	68db      	ldr	r3, [r3, #12]
 801882a:	2b00      	cmp	r3, #0
 801882c:	d101      	bne.n	8018832 <rfalT4TPollerComposeCAPDU+0x22>
    {
        return ERR_PARAM;
 801882e:	2307      	movs	r3, #7
 8018830:	e085      	b.n	801893e <rfalT4TPollerComposeCAPDU+0x12e>
    }
    
    msgIt                  = 0;
 8018832:	2300      	movs	r3, #0
 8018834:	81fb      	strh	r3, [r7, #14]
    *(apduParam->cApduLen) = 0;
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	68db      	ldr	r3, [r3, #12]
 801883a:	2200      	movs	r2, #0
 801883c:	801a      	strh	r2, [r3, #0]
    
    /*******************************************************************************/
    /* Compute Command-APDU  according to the format   T4T 1.0 5.1.2 & ISO7816-4 2013 Table 1 */
    
    /* Check if Data is present */
    if( apduParam->LcFlag )
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	795b      	ldrb	r3, [r3, #5]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d026      	beq.n	8018894 <rfalT4TPollerComposeCAPDU+0x84>
    {
        if( apduParam->Lc == 0U )
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	791b      	ldrb	r3, [r3, #4]
 801884a:	2b00      	cmp	r3, #0
 801884c:	d101      	bne.n	8018852 <rfalT4TPollerComposeCAPDU+0x42>
        {
            /* Extented field coding not supported */
            return ERR_PARAM;
 801884e:	2307      	movs	r3, #7
 8018850:	e075      	b.n	801893e <rfalT4TPollerComposeCAPDU+0x12e>
        {
            return ERR_PARAM; /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
        }
        
        /* Calculate the header length a place the data/body where it should be */
        hdrLen = RFAL_T4T_MAX_CAPDU_PROLOGUE_LEN + RFAL_T4T_LC_LEN;
 8018852:	2305      	movs	r3, #5
 8018854:	737b      	strb	r3, [r7, #13]
        
        /* make sure not to exceed buffer size */
        if( ((uint16_t)hdrLen + (uint16_t)apduParam->Lc + (apduParam->LeFlag ? RFAL_T4T_LC_LEN : 0U)) > RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 8018856:	7b7b      	ldrb	r3, [r7, #13]
 8018858:	687a      	ldr	r2, [r7, #4]
 801885a:	7912      	ldrb	r2, [r2, #4]
 801885c:	4413      	add	r3, r2
 801885e:	461a      	mov	r2, r3
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	79db      	ldrb	r3, [r3, #7]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d001      	beq.n	801886c <rfalT4TPollerComposeCAPDU+0x5c>
 8018868:	2301      	movs	r3, #1
 801886a:	e000      	b.n	801886e <rfalT4TPollerComposeCAPDU+0x5e>
 801886c:	2300      	movs	r3, #0
 801886e:	4413      	add	r3, r2
 8018870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018874:	d901      	bls.n	801887a <rfalT4TPollerComposeCAPDU+0x6a>
        {
            return ERR_NOMEM; /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset */ 
 8018876:	2301      	movs	r3, #1
 8018878:	e061      	b.n	801893e <rfalT4TPollerComposeCAPDU+0x12e>
        }
        ST_MEMMOVE( &apduParam->cApduBuf->apdu[hdrLen], apduParam->cApduBuf->apdu, apduParam->Lc );
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	689a      	ldr	r2, [r3, #8]
 801887e:	7b7b      	ldrb	r3, [r7, #13]
 8018880:	4413      	add	r3, r2
 8018882:	1cd8      	adds	r0, r3, #3
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	689b      	ldr	r3, [r3, #8]
 8018888:	1cd9      	adds	r1, r3, #3
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	791b      	ldrb	r3, [r3, #4]
 801888e:	461a      	mov	r2, r3
 8018890:	f000 fabc 	bl	8018e0c <memmove>
    }
    
    /* Prepend the ADPDU's header */
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->CLA;
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	689a      	ldr	r2, [r3, #8]
 8018898:	89fb      	ldrh	r3, [r7, #14]
 801889a:	1c59      	adds	r1, r3, #1
 801889c:	81f9      	strh	r1, [r7, #14]
 801889e:	4618      	mov	r0, r3
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	7819      	ldrb	r1, [r3, #0]
 80188a4:	1813      	adds	r3, r2, r0
 80188a6:	460a      	mov	r2, r1
 80188a8:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->INS;
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	689a      	ldr	r2, [r3, #8]
 80188ae:	89fb      	ldrh	r3, [r7, #14]
 80188b0:	1c59      	adds	r1, r3, #1
 80188b2:	81f9      	strh	r1, [r7, #14]
 80188b4:	4618      	mov	r0, r3
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	7859      	ldrb	r1, [r3, #1]
 80188ba:	1813      	adds	r3, r2, r0
 80188bc:	460a      	mov	r2, r1
 80188be:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->P1;
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	689a      	ldr	r2, [r3, #8]
 80188c4:	89fb      	ldrh	r3, [r7, #14]
 80188c6:	1c59      	adds	r1, r3, #1
 80188c8:	81f9      	strh	r1, [r7, #14]
 80188ca:	4618      	mov	r0, r3
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	7899      	ldrb	r1, [r3, #2]
 80188d0:	1813      	adds	r3, r2, r0
 80188d2:	460a      	mov	r2, r1
 80188d4:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->P2;
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	689a      	ldr	r2, [r3, #8]
 80188da:	89fb      	ldrh	r3, [r7, #14]
 80188dc:	1c59      	adds	r1, r3, #1
 80188de:	81f9      	strh	r1, [r7, #14]
 80188e0:	4618      	mov	r0, r3
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	78d9      	ldrb	r1, [r3, #3]
 80188e6:	1813      	adds	r3, r2, r0
 80188e8:	460a      	mov	r2, r1
 80188ea:	70da      	strb	r2, [r3, #3]
    
    
    /* Check if Data field length is to be added */
    if( apduParam->LcFlag )
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	795b      	ldrb	r3, [r3, #5]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d010      	beq.n	8018916 <rfalT4TPollerComposeCAPDU+0x106>
    {
        apduParam->cApduBuf->apdu[msgIt++] = apduParam->Lc;
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	689a      	ldr	r2, [r3, #8]
 80188f8:	89fb      	ldrh	r3, [r7, #14]
 80188fa:	1c59      	adds	r1, r3, #1
 80188fc:	81f9      	strh	r1, [r7, #14]
 80188fe:	4618      	mov	r0, r3
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	7919      	ldrb	r1, [r3, #4]
 8018904:	1813      	adds	r3, r2, r0
 8018906:	460a      	mov	r2, r1
 8018908:	70da      	strb	r2, [r3, #3]
        msgIt += apduParam->Lc;
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	791b      	ldrb	r3, [r3, #4]
 801890e:	b29a      	uxth	r2, r3
 8018910:	89fb      	ldrh	r3, [r7, #14]
 8018912:	4413      	add	r3, r2
 8018914:	81fb      	strh	r3, [r7, #14]
    }
    
    /* Check if Expected Response Length is to be added */
    if( apduParam->LeFlag )
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	79db      	ldrb	r3, [r3, #7]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d00a      	beq.n	8018934 <rfalT4TPollerComposeCAPDU+0x124>
    {
        apduParam->cApduBuf->apdu[msgIt++] = apduParam->Le;
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	689a      	ldr	r2, [r3, #8]
 8018922:	89fb      	ldrh	r3, [r7, #14]
 8018924:	1c59      	adds	r1, r3, #1
 8018926:	81f9      	strh	r1, [r7, #14]
 8018928:	4618      	mov	r0, r3
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	7999      	ldrb	r1, [r3, #6]
 801892e:	1813      	adds	r3, r2, r0
 8018930:	460a      	mov	r2, r1
 8018932:	70da      	strb	r2, [r3, #3]
    }
    
    *(apduParam->cApduLen) = msgIt;
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	68db      	ldr	r3, [r3, #12]
 8018938:	89fa      	ldrh	r2, [r7, #14]
 801893a:	801a      	strh	r2, [r3, #0]
    
    return ERR_NONE;
 801893c:	2300      	movs	r3, #0
}
 801893e:	4618      	mov	r0, r3
 8018940:	3710      	adds	r7, #16
 8018942:	46bd      	mov	sp, r7
 8018944:	bd80      	pop	{r7, pc}

08018946 <rfalT4TPollerParseRAPDU>:


/*******************************************************************************/
ReturnCode rfalT4TPollerParseRAPDU( rfalT4tRApduParam *apduParam )
{
 8018946:	b480      	push	{r7}
 8018948:	b083      	sub	sp, #12
 801894a:	af00      	add	r7, sp, #0
 801894c:	6078      	str	r0, [r7, #4]
    if( (apduParam == NULL) || (apduParam->rApduBuf == NULL) )
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	2b00      	cmp	r3, #0
 8018952:	d003      	beq.n	801895c <rfalT4TPollerParseRAPDU+0x16>
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d101      	bne.n	8018960 <rfalT4TPollerParseRAPDU+0x1a>
    {
        return ERR_PARAM;
 801895c:	2307      	movs	r3, #7
 801895e:	e029      	b.n	80189b4 <rfalT4TPollerParseRAPDU+0x6e>
    }
    
    if( apduParam->rcvdLen < RFAL_T4T_MAX_RAPDU_SW1SW2_LEN )
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	889b      	ldrh	r3, [r3, #4]
 8018964:	2b01      	cmp	r3, #1
 8018966:	d801      	bhi.n	801896c <rfalT4TPollerParseRAPDU+0x26>
    {
        return ERR_PROTO;
 8018968:	230b      	movs	r3, #11
 801896a:	e023      	b.n	80189b4 <rfalT4TPollerParseRAPDU+0x6e>
    }

    apduParam->rApduBodyLen = (apduParam->rcvdLen - (uint16_t)RFAL_T4T_MAX_RAPDU_SW1SW2_LEN);
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	889b      	ldrh	r3, [r3, #4]
 8018970:	3b02      	subs	r3, #2
 8018972:	b29a      	uxth	r2, r3
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	80da      	strh	r2, [r3, #6]
    apduParam->statusWord   = GETU16( &apduParam->rApduBuf->apdu[ apduParam->rApduBodyLen ] );
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	687a      	ldr	r2, [r7, #4]
 801897e:	88d2      	ldrh	r2, [r2, #6]
 8018980:	4413      	add	r3, r2
 8018982:	78db      	ldrb	r3, [r3, #3]
 8018984:	021b      	lsls	r3, r3, #8
 8018986:	b21a      	sxth	r2, r3
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	6879      	ldr	r1, [r7, #4]
 801898e:	88c9      	ldrh	r1, [r1, #6]
 8018990:	440b      	add	r3, r1
 8018992:	3303      	adds	r3, #3
 8018994:	3301      	adds	r3, #1
 8018996:	781b      	ldrb	r3, [r3, #0]
 8018998:	b21b      	sxth	r3, r3
 801899a:	4313      	orrs	r3, r2
 801899c:	b21b      	sxth	r3, r3
 801899e:	b29a      	uxth	r2, r3
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	811a      	strh	r2, [r3, #8]

    /* Check SW1 SW2    T4T 1.0 5.1.3 NOTE */
    if( apduParam->statusWord == RFAL_T4T_ISO7816_STATUS_COMPLETE )
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	891b      	ldrh	r3, [r3, #8]
 80189a8:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 80189ac:	d101      	bne.n	80189b2 <rfalT4TPollerParseRAPDU+0x6c>
    {
        return ERR_NONE;
 80189ae:	2300      	movs	r3, #0
 80189b0:	e000      	b.n	80189b4 <rfalT4TPollerParseRAPDU+0x6e>
    }

    return ERR_REQUEST;
 80189b2:	2305      	movs	r3, #5
}
 80189b4:	4618      	mov	r0, r3
 80189b6:	370c      	adds	r7, #12
 80189b8:	46bd      	mov	sp, r7
 80189ba:	bc80      	pop	{r7}
 80189bc:	4770      	bx	lr

080189be <rfalT4TPollerComposeSelectAppl>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectAppl( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* aid, uint8_t aidLen, uint16_t *cApduLen )
{   
 80189be:	b580      	push	{r7, lr}
 80189c0:	b088      	sub	sp, #32
 80189c2:	af00      	add	r7, sp, #0
 80189c4:	60f8      	str	r0, [r7, #12]
 80189c6:	60b9      	str	r1, [r7, #8]
 80189c8:	603b      	str	r3, [r7, #0]
 80189ca:	4613      	mov	r3, r2
 80189cc:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;

    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 00h  07h AID    00h */
    cAPDU.CLA      = RFAL_T4T_CLA;
 80189ce:	2300      	movs	r3, #0
 80189d0:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 80189d2:	23a4      	movs	r3, #164	; 0xa4
 80189d4:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_DF_NAME;
 80189d6:	2304      	movs	r3, #4
 80189d8:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_RETURN_FCI_TEMPLATE;
 80189da:	2300      	movs	r3, #0
 80189dc:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = aidLen;
 80189de:	79fb      	ldrb	r3, [r7, #7]
 80189e0:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 80189e2:	2300      	movs	r3, #0
 80189e4:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 80189e6:	2301      	movs	r3, #1
 80189e8:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = true;
 80189ea:	2301      	movs	r3, #1
 80189ec:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 80189f2:	683b      	ldr	r3, [r7, #0]
 80189f4:	61fb      	str	r3, [r7, #28]
    
    if( aidLen > 0U )
 80189f6:	79fb      	ldrb	r3, [r7, #7]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d006      	beq.n	8018a0a <rfalT4TPollerComposeSelectAppl+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, aid, aidLen );
 80189fc:	69bb      	ldr	r3, [r7, #24]
 80189fe:	3303      	adds	r3, #3
 8018a00:	79fa      	ldrb	r2, [r7, #7]
 8018a02:	68b9      	ldr	r1, [r7, #8]
 8018a04:	4618      	mov	r0, r3
 8018a06:	f000 f9f6 	bl	8018df6 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 8018a0a:	f107 0310 	add.w	r3, r7, #16
 8018a0e:	4618      	mov	r0, r3
 8018a10:	f7ff fefe 	bl	8018810 <rfalT4TPollerComposeCAPDU>
 8018a14:	4603      	mov	r3, r0
}
 8018a16:	4618      	mov	r0, r3
 8018a18:	3720      	adds	r7, #32
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	bd80      	pop	{r7, pc}

08018a1e <rfalT4TPollerComposeSelectFile>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectFile( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* fid, uint8_t fidLen, uint16_t *cApduLen )
{   
 8018a1e:	b580      	push	{r7, lr}
 8018a20:	b088      	sub	sp, #32
 8018a22:	af00      	add	r7, sp, #0
 8018a24:	60f8      	str	r0, [r7, #12]
 8018a26:	60b9      	str	r1, [r7, #8]
 8018a28:	603b      	str	r3, [r7, #0]
 8018a2a:	4613      	mov	r3, r2
 8018a2c:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;

    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 0Ch  02h FID    -   */    
    cAPDU.CLA      = RFAL_T4T_CLA;
 8018a2e:	2300      	movs	r3, #0
 8018a30:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 8018a32:	23a4      	movs	r3, #164	; 0xa4
 8018a34:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_FILEID;
 8018a36:	2300      	movs	r3, #0
 8018a38:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_NO_RESPONSE_DATA;
 8018a3a:	230c      	movs	r3, #12
 8018a3c:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = fidLen;
 8018a3e:	79fb      	ldrb	r3, [r7, #7]
 8018a40:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 8018a42:	2300      	movs	r3, #0
 8018a44:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 8018a46:	2301      	movs	r3, #1
 8018a48:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 8018a4a:	2300      	movs	r3, #0
 8018a4c:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 8018a52:	683b      	ldr	r3, [r7, #0]
 8018a54:	61fb      	str	r3, [r7, #28]
    
    if( fidLen > 0U )
 8018a56:	79fb      	ldrb	r3, [r7, #7]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d006      	beq.n	8018a6a <rfalT4TPollerComposeSelectFile+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, fid, fidLen );
 8018a5c:	69bb      	ldr	r3, [r7, #24]
 8018a5e:	3303      	adds	r3, #3
 8018a60:	79fa      	ldrb	r2, [r7, #7]
 8018a62:	68b9      	ldr	r1, [r7, #8]
 8018a64:	4618      	mov	r0, r3
 8018a66:	f000 f9c6 	bl	8018df6 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 8018a6a:	f107 0310 	add.w	r3, r7, #16
 8018a6e:	4618      	mov	r0, r3
 8018a70:	f7ff fece 	bl	8018810 <rfalT4TPollerComposeCAPDU>
 8018a74:	4603      	mov	r3, r0
}
 8018a76:	4618      	mov	r0, r3
 8018a78:	3720      	adds	r7, #32
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	bd80      	pop	{r7, pc}

08018a7e <rfalT4TPollerComposeSelectFileV1Mapping>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectFileV1Mapping( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* fid, uint8_t fidLen, uint16_t *cApduLen )
{   
 8018a7e:	b580      	push	{r7, lr}
 8018a80:	b088      	sub	sp, #32
 8018a82:	af00      	add	r7, sp, #0
 8018a84:	60f8      	str	r0, [r7, #12]
 8018a86:	60b9      	str	r1, [r7, #8]
 8018a88:	603b      	str	r3, [r7, #0]
 8018a8a:	4613      	mov	r3, r2
 8018a8c:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;
    
    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 00h  02h FID    -   */      
    cAPDU.CLA      = RFAL_T4T_CLA;
 8018a8e:	2300      	movs	r3, #0
 8018a90:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 8018a92:	23a4      	movs	r3, #164	; 0xa4
 8018a94:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_FILEID;
 8018a96:	2300      	movs	r3, #0
 8018a98:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_RETURN_FCI_TEMPLATE;
 8018a9a:	2300      	movs	r3, #0
 8018a9c:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = fidLen;
 8018a9e:	79fb      	ldrb	r3, [r7, #7]
 8018aa0:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 8018aa6:	2301      	movs	r3, #1
 8018aa8:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 8018aaa:	2300      	movs	r3, #0
 8018aac:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 8018ab2:	683b      	ldr	r3, [r7, #0]
 8018ab4:	61fb      	str	r3, [r7, #28]
    
    if( fidLen > 0U )
 8018ab6:	79fb      	ldrb	r3, [r7, #7]
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d006      	beq.n	8018aca <rfalT4TPollerComposeSelectFileV1Mapping+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, fid, fidLen );
 8018abc:	69bb      	ldr	r3, [r7, #24]
 8018abe:	3303      	adds	r3, #3
 8018ac0:	79fa      	ldrb	r2, [r7, #7]
 8018ac2:	68b9      	ldr	r1, [r7, #8]
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	f000 f996 	bl	8018df6 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 8018aca:	f107 0310 	add.w	r3, r7, #16
 8018ace:	4618      	mov	r0, r3
 8018ad0:	f7ff fe9e 	bl	8018810 <rfalT4TPollerComposeCAPDU>
 8018ad4:	4603      	mov	r3, r0
}
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	3720      	adds	r7, #32
 8018ada:	46bd      	mov	sp, r7
 8018adc:	bd80      	pop	{r7, pc}

08018ade <rfalT4TPollerComposeReadData>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeReadData( rfalIsoDepApduBufFormat *cApduBuf, uint16_t offset, uint8_t expLen, uint16_t *cApduLen )
{    
 8018ade:	b580      	push	{r7, lr}
 8018ae0:	b088      	sub	sp, #32
 8018ae2:	af00      	add	r7, sp, #0
 8018ae4:	60f8      	str	r0, [r7, #12]
 8018ae6:	607b      	str	r3, [r7, #4]
 8018ae8:	460b      	mov	r3, r1
 8018aea:	817b      	strh	r3, [r7, #10]
 8018aec:	4613      	mov	r3, r2
 8018aee:	727b      	strb	r3, [r7, #9]
    rfalT4tCApduParam cAPDU;
  
    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h B0h [Offset] -   -      len */     
    cAPDU.CLA      = RFAL_T4T_CLA;
 8018af0:	2300      	movs	r3, #0
 8018af2:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_READBINARY;
 8018af4:	23b0      	movs	r3, #176	; 0xb0
 8018af6:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = (uint8_t)((offset >> 8U) & 0xFFU);
 8018af8:	897b      	ldrh	r3, [r7, #10]
 8018afa:	0a1b      	lsrs	r3, r3, #8
 8018afc:	b29b      	uxth	r3, r3
 8018afe:	b2db      	uxtb	r3, r3
 8018b00:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = (uint8_t)((offset >> 0U) & 0xFFU);
 8018b02:	897b      	ldrh	r3, [r7, #10]
 8018b04:	b2db      	uxtb	r3, r3
 8018b06:	74fb      	strb	r3, [r7, #19]
    cAPDU.Le       = expLen;
 8018b08:	7a7b      	ldrb	r3, [r7, #9]
 8018b0a:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = false;
 8018b0c:	2300      	movs	r3, #0
 8018b0e:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = true;
 8018b10:	2301      	movs	r3, #1
 8018b12:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	61fb      	str	r3, [r7, #28]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 8018b1c:	f107 0310 	add.w	r3, r7, #16
 8018b20:	4618      	mov	r0, r3
 8018b22:	f7ff fe75 	bl	8018810 <rfalT4TPollerComposeCAPDU>
 8018b26:	4603      	mov	r3, r0
}
 8018b28:	4618      	mov	r0, r3
 8018b2a:	3720      	adds	r7, #32
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}

08018b30 <rfalT4TPollerComposeReadDataODO>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeReadDataODO( rfalIsoDepApduBufFormat *cApduBuf, uint32_t offset, uint8_t expLen, uint16_t *cApduLen )
{    
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b08a      	sub	sp, #40	; 0x28
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	60f8      	str	r0, [r7, #12]
 8018b38:	60b9      	str	r1, [r7, #8]
 8018b3a:	603b      	str	r3, [r7, #0]
 8018b3c:	4613      	mov	r3, r2
 8018b3e:	71fb      	strb	r3, [r7, #7]
    uint8_t           dataIt;

    /* CLA INS P1  P2  Lc  Data         Le */
    /* 00h B1h 00h 00h Lc  54 03 xxyyzz len */
    /*                          [Offset]    */    
    cAPDU.CLA      = RFAL_T4T_CLA;
 8018b40:	2300      	movs	r3, #0
 8018b42:	753b      	strb	r3, [r7, #20]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_READBINARY_ODO;
 8018b44:	23b1      	movs	r3, #177	; 0xb1
 8018b46:	757b      	strb	r3, [r7, #21]
    cAPDU.P1       = 0x00U;
 8018b48:	2300      	movs	r3, #0
 8018b4a:	75bb      	strb	r3, [r7, #22]
    cAPDU.P2       = 0x00U;
 8018b4c:	2300      	movs	r3, #0
 8018b4e:	75fb      	strb	r3, [r7, #23]
    cAPDU.Le       = expLen;
 8018b50:	79fb      	ldrb	r3, [r7, #7]
 8018b52:	76bb      	strb	r3, [r7, #26]
    cAPDU.LcFlag   = true;
 8018b54:	2301      	movs	r3, #1
 8018b56:	767b      	strb	r3, [r7, #25]
    cAPDU.LeFlag   = true;
 8018b58:	2301      	movs	r3, #1
 8018b5a:	76fb      	strb	r3, [r7, #27]
    cAPDU.cApduBuf = cApduBuf;
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	61fb      	str	r3, [r7, #28]
    cAPDU.cApduLen = cApduLen;
 8018b60:	683b      	ldr	r3, [r7, #0]
 8018b62:	623b      	str	r3, [r7, #32]
    
    dataIt = 0U;
 8018b64:	2300      	movs	r3, #0
 8018b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cApduBuf->apdu[dataIt++] = RFAL_T4T_OFFSET_DO;
 8018b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b6e:	1c5a      	adds	r2, r3, #1
 8018b70:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018b74:	461a      	mov	r2, r3
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	4413      	add	r3, r2
 8018b7a:	2254      	movs	r2, #84	; 0x54
 8018b7c:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_LENGTH_DO;
 8018b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b82:	1c5a      	adds	r2, r3, #1
 8018b84:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018b88:	461a      	mov	r2, r3
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	4413      	add	r3, r2
 8018b8e:	2203      	movs	r2, #3
 8018b90:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 16U);
 8018b92:	68bb      	ldr	r3, [r7, #8]
 8018b94:	0c1a      	lsrs	r2, r3, #16
 8018b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b9a:	1c59      	adds	r1, r3, #1
 8018b9c:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8018ba0:	4619      	mov	r1, r3
 8018ba2:	b2d2      	uxtb	r2, r2
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	440b      	add	r3, r1
 8018ba8:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 8U);
 8018baa:	68bb      	ldr	r3, [r7, #8]
 8018bac:	0a1a      	lsrs	r2, r3, #8
 8018bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bb2:	1c59      	adds	r1, r3, #1
 8018bb4:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8018bb8:	4619      	mov	r1, r3
 8018bba:	b2d2      	uxtb	r2, r2
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	440b      	add	r3, r1
 8018bc0:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset);
 8018bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bc6:	1c5a      	adds	r2, r3, #1
 8018bc8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018bcc:	4619      	mov	r1, r3
 8018bce:	68bb      	ldr	r3, [r7, #8]
 8018bd0:	b2da      	uxtb	r2, r3
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	440b      	add	r3, r1
 8018bd6:	70da      	strb	r2, [r3, #3]
    cAPDU.Lc                 = dataIt;
 8018bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bdc:	763b      	strb	r3, [r7, #24]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 8018bde:	f107 0314 	add.w	r3, r7, #20
 8018be2:	4618      	mov	r0, r3
 8018be4:	f7ff fe14 	bl	8018810 <rfalT4TPollerComposeCAPDU>
 8018be8:	4603      	mov	r3, r0
}
 8018bea:	4618      	mov	r0, r3
 8018bec:	3728      	adds	r7, #40	; 0x28
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	bd80      	pop	{r7, pc}

08018bf2 <rfalT4TPollerComposeWriteData>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeWriteData( rfalIsoDepApduBufFormat *cApduBuf, uint16_t offset, const uint8_t* data, uint8_t dataLen, uint16_t *cApduLen )
{    
 8018bf2:	b580      	push	{r7, lr}
 8018bf4:	b088      	sub	sp, #32
 8018bf6:	af00      	add	r7, sp, #0
 8018bf8:	60f8      	str	r0, [r7, #12]
 8018bfa:	607a      	str	r2, [r7, #4]
 8018bfc:	461a      	mov	r2, r3
 8018bfe:	460b      	mov	r3, r1
 8018c00:	817b      	strh	r3, [r7, #10]
 8018c02:	4613      	mov	r3, r2
 8018c04:	727b      	strb	r3, [r7, #9]
    rfalT4tCApduParam cAPDU;


    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h D6h [Offset] len Data   -   */         
    cAPDU.CLA      = RFAL_T4T_CLA;
 8018c06:	2300      	movs	r3, #0
 8018c08:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_UPDATEBINARY;
 8018c0a:	23d6      	movs	r3, #214	; 0xd6
 8018c0c:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = (uint8_t)((offset >> 8U) & 0xFFU);
 8018c0e:	897b      	ldrh	r3, [r7, #10]
 8018c10:	0a1b      	lsrs	r3, r3, #8
 8018c12:	b29b      	uxth	r3, r3
 8018c14:	b2db      	uxtb	r3, r3
 8018c16:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = (uint8_t)((offset >> 0U) & 0xFFU);
 8018c18:	897b      	ldrh	r3, [r7, #10]
 8018c1a:	b2db      	uxtb	r3, r3
 8018c1c:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = dataLen;
 8018c1e:	7a7b      	ldrb	r3, [r7, #9]
 8018c20:	753b      	strb	r3, [r7, #20]
    cAPDU.LcFlag   = true;
 8018c22:	2301      	movs	r3, #1
 8018c24:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 8018c26:	2300      	movs	r3, #0
 8018c28:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 8018c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c30:	61fb      	str	r3, [r7, #28]
    
    if( dataLen > 0U )
 8018c32:	7a7b      	ldrb	r3, [r7, #9]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d006      	beq.n	8018c46 <rfalT4TPollerComposeWriteData+0x54>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, data, dataLen );
 8018c38:	69bb      	ldr	r3, [r7, #24]
 8018c3a:	3303      	adds	r3, #3
 8018c3c:	7a7a      	ldrb	r2, [r7, #9]
 8018c3e:	6879      	ldr	r1, [r7, #4]
 8018c40:	4618      	mov	r0, r3
 8018c42:	f000 f8d8 	bl	8018df6 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 8018c46:	f107 0310 	add.w	r3, r7, #16
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	f7ff fde0 	bl	8018810 <rfalT4TPollerComposeCAPDU>
 8018c50:	4603      	mov	r3, r0
}
 8018c52:	4618      	mov	r0, r3
 8018c54:	3720      	adds	r7, #32
 8018c56:	46bd      	mov	sp, r7
 8018c58:	bd80      	pop	{r7, pc}

08018c5a <rfalT4TPollerComposeWriteDataODO>:

/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeWriteDataODO( rfalIsoDepApduBufFormat *cApduBuf, uint32_t offset, const uint8_t* data, uint8_t dataLen, uint16_t *cApduLen )
{    
 8018c5a:	b580      	push	{r7, lr}
 8018c5c:	b08a      	sub	sp, #40	; 0x28
 8018c5e:	af00      	add	r7, sp, #0
 8018c60:	60f8      	str	r0, [r7, #12]
 8018c62:	60b9      	str	r1, [r7, #8]
 8018c64:	607a      	str	r2, [r7, #4]
 8018c66:	70fb      	strb	r3, [r7, #3]
    uint8_t           dataIt;
        
    /* CLA INS P1  P2   Lc  Data                     Le  */
    /* 00h D7h 00h 00h  len 54 03 xxyyzz 53 Ld data  -   */
    /*                           [offset]     [data]     */
    cAPDU.CLA      = RFAL_T4T_CLA;
 8018c68:	2300      	movs	r3, #0
 8018c6a:	753b      	strb	r3, [r7, #20]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_UPDATEBINARY_ODO;
 8018c6c:	23d7      	movs	r3, #215	; 0xd7
 8018c6e:	757b      	strb	r3, [r7, #21]
    cAPDU.P1       = 0x00U;
 8018c70:	2300      	movs	r3, #0
 8018c72:	75bb      	strb	r3, [r7, #22]
    cAPDU.P2       = 0x00U;
 8018c74:	2300      	movs	r3, #0
 8018c76:	75fb      	strb	r3, [r7, #23]
    cAPDU.LcFlag   = true;
 8018c78:	2301      	movs	r3, #1
 8018c7a:	767b      	strb	r3, [r7, #25]
    cAPDU.LeFlag   = false;
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	76fb      	strb	r3, [r7, #27]
    cAPDU.cApduBuf = cApduBuf;
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	61fb      	str	r3, [r7, #28]
    cAPDU.cApduLen = cApduLen;
 8018c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c86:	623b      	str	r3, [r7, #32]
        
    dataIt = 0U;
 8018c88:	2300      	movs	r3, #0
 8018c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cApduBuf->apdu[dataIt++] = RFAL_T4T_OFFSET_DO;
 8018c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c92:	1c5a      	adds	r2, r3, #1
 8018c94:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018c98:	461a      	mov	r2, r3
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	4413      	add	r3, r2
 8018c9e:	2254      	movs	r2, #84	; 0x54
 8018ca0:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_LENGTH_DO;
 8018ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ca6:	1c5a      	adds	r2, r3, #1
 8018ca8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018cac:	461a      	mov	r2, r3
 8018cae:	68fb      	ldr	r3, [r7, #12]
 8018cb0:	4413      	add	r3, r2
 8018cb2:	2203      	movs	r2, #3
 8018cb4:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 16U);
 8018cb6:	68bb      	ldr	r3, [r7, #8]
 8018cb8:	0c1a      	lsrs	r2, r3, #16
 8018cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018cbe:	1c59      	adds	r1, r3, #1
 8018cc0:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8018cc4:	4619      	mov	r1, r3
 8018cc6:	b2d2      	uxtb	r2, r2
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	440b      	add	r3, r1
 8018ccc:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 8U);
 8018cce:	68bb      	ldr	r3, [r7, #8]
 8018cd0:	0a1a      	lsrs	r2, r3, #8
 8018cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018cd6:	1c59      	adds	r1, r3, #1
 8018cd8:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8018cdc:	4619      	mov	r1, r3
 8018cde:	b2d2      	uxtb	r2, r2
 8018ce0:	68fb      	ldr	r3, [r7, #12]
 8018ce2:	440b      	add	r3, r1
 8018ce4:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset);
 8018ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018cea:	1c5a      	adds	r2, r3, #1
 8018cec:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018cf0:	4619      	mov	r1, r3
 8018cf2:	68bb      	ldr	r3, [r7, #8]
 8018cf4:	b2da      	uxtb	r2, r3
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	440b      	add	r3, r1
 8018cfa:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_DATA_DO;
 8018cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d00:	1c5a      	adds	r2, r3, #1
 8018d02:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018d06:	461a      	mov	r2, r3
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	4413      	add	r3, r2
 8018d0c:	2253      	movs	r2, #83	; 0x53
 8018d0e:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = dataLen;
 8018d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d14:	1c5a      	adds	r2, r3, #1
 8018d16:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018d1a:	461a      	mov	r2, r3
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	4413      	add	r3, r2
 8018d20:	78fa      	ldrb	r2, [r7, #3]
 8018d22:	70da      	strb	r2, [r3, #3]
    
    if( (((uint32_t)dataLen + (uint32_t)dataIt) >= RFAL_T4T_MAX_LC) ||  (((uint32_t)dataLen + (uint32_t)dataIt) >= RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN) )
 8018d24:	78fa      	ldrb	r2, [r7, #3]
 8018d26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d2a:	4413      	add	r3, r2
 8018d2c:	2bfe      	cmp	r3, #254	; 0xfe
 8018d2e:	d806      	bhi.n	8018d3e <rfalT4TPollerComposeWriteDataODO+0xe4>
 8018d30:	78fa      	ldrb	r2, [r7, #3]
 8018d32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d36:	4413      	add	r3, r2
 8018d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018d3c:	d301      	bcc.n	8018d42 <rfalT4TPollerComposeWriteDataODO+0xe8>
    {
        return (ERR_NOMEM);
 8018d3e:	2301      	movs	r3, #1
 8018d40:	e01b      	b.n	8018d7a <rfalT4TPollerComposeWriteDataODO+0x120>
    }
    
    if( dataLen > 0U )
 8018d42:	78fb      	ldrb	r3, [r7, #3]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d009      	beq.n	8018d5c <rfalT4TPollerComposeWriteDataODO+0x102>
    {
        ST_MEMCPY( &cAPDU.cApduBuf->apdu[dataIt], data, dataLen );
 8018d48:	69fa      	ldr	r2, [r7, #28]
 8018d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d4e:	4413      	add	r3, r2
 8018d50:	3303      	adds	r3, #3
 8018d52:	78fa      	ldrb	r2, [r7, #3]
 8018d54:	6879      	ldr	r1, [r7, #4]
 8018d56:	4618      	mov	r0, r3
 8018d58:	f000 f84d 	bl	8018df6 <memcpy>
    }
    dataIt += dataLen;
 8018d5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018d60:	78fb      	ldrb	r3, [r7, #3]
 8018d62:	4413      	add	r3, r2
 8018d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cAPDU.Lc = dataIt;
 8018d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d6c:	763b      	strb	r3, [r7, #24]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 8018d6e:	f107 0314 	add.w	r3, r7, #20
 8018d72:	4618      	mov	r0, r3
 8018d74:	f7ff fd4c 	bl	8018810 <rfalT4TPollerComposeCAPDU>
 8018d78:	4603      	mov	r3, r0
}
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	3728      	adds	r7, #40	; 0x28
 8018d7e:	46bd      	mov	sp, r7
 8018d80:	bd80      	pop	{r7, pc}
	...

08018d84 <__errno>:
 8018d84:	4b01      	ldr	r3, [pc, #4]	; (8018d8c <__errno+0x8>)
 8018d86:	6818      	ldr	r0, [r3, #0]
 8018d88:	4770      	bx	lr
 8018d8a:	bf00      	nop
 8018d8c:	20000110 	.word	0x20000110

08018d90 <__libc_init_array>:
 8018d90:	b570      	push	{r4, r5, r6, lr}
 8018d92:	2500      	movs	r5, #0
 8018d94:	4e0c      	ldr	r6, [pc, #48]	; (8018dc8 <__libc_init_array+0x38>)
 8018d96:	4c0d      	ldr	r4, [pc, #52]	; (8018dcc <__libc_init_array+0x3c>)
 8018d98:	1ba4      	subs	r4, r4, r6
 8018d9a:	10a4      	asrs	r4, r4, #2
 8018d9c:	42a5      	cmp	r5, r4
 8018d9e:	d109      	bne.n	8018db4 <__libc_init_array+0x24>
 8018da0:	f000 fc5e 	bl	8019660 <_init>
 8018da4:	2500      	movs	r5, #0
 8018da6:	4e0a      	ldr	r6, [pc, #40]	; (8018dd0 <__libc_init_array+0x40>)
 8018da8:	4c0a      	ldr	r4, [pc, #40]	; (8018dd4 <__libc_init_array+0x44>)
 8018daa:	1ba4      	subs	r4, r4, r6
 8018dac:	10a4      	asrs	r4, r4, #2
 8018dae:	42a5      	cmp	r5, r4
 8018db0:	d105      	bne.n	8018dbe <__libc_init_array+0x2e>
 8018db2:	bd70      	pop	{r4, r5, r6, pc}
 8018db4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018db8:	4798      	blx	r3
 8018dba:	3501      	adds	r5, #1
 8018dbc:	e7ee      	b.n	8018d9c <__libc_init_array+0xc>
 8018dbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018dc2:	4798      	blx	r3
 8018dc4:	3501      	adds	r5, #1
 8018dc6:	e7f2      	b.n	8018dae <__libc_init_array+0x1e>
 8018dc8:	0801b098 	.word	0x0801b098
 8018dcc:	0801b098 	.word	0x0801b098
 8018dd0:	0801b098 	.word	0x0801b098
 8018dd4:	0801b09c 	.word	0x0801b09c

08018dd8 <memcmp>:
 8018dd8:	b530      	push	{r4, r5, lr}
 8018dda:	2400      	movs	r4, #0
 8018ddc:	42a2      	cmp	r2, r4
 8018dde:	d101      	bne.n	8018de4 <memcmp+0xc>
 8018de0:	2000      	movs	r0, #0
 8018de2:	e007      	b.n	8018df4 <memcmp+0x1c>
 8018de4:	5d03      	ldrb	r3, [r0, r4]
 8018de6:	3401      	adds	r4, #1
 8018de8:	190d      	adds	r5, r1, r4
 8018dea:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8018dee:	42ab      	cmp	r3, r5
 8018df0:	d0f4      	beq.n	8018ddc <memcmp+0x4>
 8018df2:	1b58      	subs	r0, r3, r5
 8018df4:	bd30      	pop	{r4, r5, pc}

08018df6 <memcpy>:
 8018df6:	b510      	push	{r4, lr}
 8018df8:	1e43      	subs	r3, r0, #1
 8018dfa:	440a      	add	r2, r1
 8018dfc:	4291      	cmp	r1, r2
 8018dfe:	d100      	bne.n	8018e02 <memcpy+0xc>
 8018e00:	bd10      	pop	{r4, pc}
 8018e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018e0a:	e7f7      	b.n	8018dfc <memcpy+0x6>

08018e0c <memmove>:
 8018e0c:	4288      	cmp	r0, r1
 8018e0e:	b510      	push	{r4, lr}
 8018e10:	eb01 0302 	add.w	r3, r1, r2
 8018e14:	d807      	bhi.n	8018e26 <memmove+0x1a>
 8018e16:	1e42      	subs	r2, r0, #1
 8018e18:	4299      	cmp	r1, r3
 8018e1a:	d00a      	beq.n	8018e32 <memmove+0x26>
 8018e1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018e20:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018e24:	e7f8      	b.n	8018e18 <memmove+0xc>
 8018e26:	4283      	cmp	r3, r0
 8018e28:	d9f5      	bls.n	8018e16 <memmove+0xa>
 8018e2a:	1881      	adds	r1, r0, r2
 8018e2c:	1ad2      	subs	r2, r2, r3
 8018e2e:	42d3      	cmn	r3, r2
 8018e30:	d100      	bne.n	8018e34 <memmove+0x28>
 8018e32:	bd10      	pop	{r4, pc}
 8018e34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018e38:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018e3c:	e7f7      	b.n	8018e2e <memmove+0x22>

08018e3e <memset>:
 8018e3e:	4603      	mov	r3, r0
 8018e40:	4402      	add	r2, r0
 8018e42:	4293      	cmp	r3, r2
 8018e44:	d100      	bne.n	8018e48 <memset+0xa>
 8018e46:	4770      	bx	lr
 8018e48:	f803 1b01 	strb.w	r1, [r3], #1
 8018e4c:	e7f9      	b.n	8018e42 <memset+0x4>

08018e4e <_vsniprintf_r>:
 8018e4e:	b530      	push	{r4, r5, lr}
 8018e50:	1e14      	subs	r4, r2, #0
 8018e52:	4605      	mov	r5, r0
 8018e54:	b09b      	sub	sp, #108	; 0x6c
 8018e56:	4618      	mov	r0, r3
 8018e58:	da05      	bge.n	8018e66 <_vsniprintf_r+0x18>
 8018e5a:	238b      	movs	r3, #139	; 0x8b
 8018e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8018e60:	602b      	str	r3, [r5, #0]
 8018e62:	b01b      	add	sp, #108	; 0x6c
 8018e64:	bd30      	pop	{r4, r5, pc}
 8018e66:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018e6a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018e6e:	bf0c      	ite	eq
 8018e70:	4623      	moveq	r3, r4
 8018e72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018e76:	9302      	str	r3, [sp, #8]
 8018e78:	9305      	str	r3, [sp, #20]
 8018e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018e7e:	9100      	str	r1, [sp, #0]
 8018e80:	9104      	str	r1, [sp, #16]
 8018e82:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018e86:	4602      	mov	r2, r0
 8018e88:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018e8a:	4669      	mov	r1, sp
 8018e8c:	4628      	mov	r0, r5
 8018e8e:	f000 f873 	bl	8018f78 <_svfiprintf_r>
 8018e92:	1c43      	adds	r3, r0, #1
 8018e94:	bfbc      	itt	lt
 8018e96:	238b      	movlt	r3, #139	; 0x8b
 8018e98:	602b      	strlt	r3, [r5, #0]
 8018e9a:	2c00      	cmp	r4, #0
 8018e9c:	d0e1      	beq.n	8018e62 <_vsniprintf_r+0x14>
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	9b00      	ldr	r3, [sp, #0]
 8018ea2:	701a      	strb	r2, [r3, #0]
 8018ea4:	e7dd      	b.n	8018e62 <_vsniprintf_r+0x14>
	...

08018ea8 <vsniprintf>:
 8018ea8:	b507      	push	{r0, r1, r2, lr}
 8018eaa:	9300      	str	r3, [sp, #0]
 8018eac:	4613      	mov	r3, r2
 8018eae:	460a      	mov	r2, r1
 8018eb0:	4601      	mov	r1, r0
 8018eb2:	4803      	ldr	r0, [pc, #12]	; (8018ec0 <vsniprintf+0x18>)
 8018eb4:	6800      	ldr	r0, [r0, #0]
 8018eb6:	f7ff ffca 	bl	8018e4e <_vsniprintf_r>
 8018eba:	b003      	add	sp, #12
 8018ebc:	f85d fb04 	ldr.w	pc, [sp], #4
 8018ec0:	20000110 	.word	0x20000110

08018ec4 <__ssputs_r>:
 8018ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ec8:	688e      	ldr	r6, [r1, #8]
 8018eca:	4682      	mov	sl, r0
 8018ecc:	429e      	cmp	r6, r3
 8018ece:	460c      	mov	r4, r1
 8018ed0:	4690      	mov	r8, r2
 8018ed2:	4699      	mov	r9, r3
 8018ed4:	d837      	bhi.n	8018f46 <__ssputs_r+0x82>
 8018ed6:	898a      	ldrh	r2, [r1, #12]
 8018ed8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018edc:	d031      	beq.n	8018f42 <__ssputs_r+0x7e>
 8018ede:	2302      	movs	r3, #2
 8018ee0:	6825      	ldr	r5, [r4, #0]
 8018ee2:	6909      	ldr	r1, [r1, #16]
 8018ee4:	1a6f      	subs	r7, r5, r1
 8018ee6:	6965      	ldr	r5, [r4, #20]
 8018ee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018eec:	fb95 f5f3 	sdiv	r5, r5, r3
 8018ef0:	f109 0301 	add.w	r3, r9, #1
 8018ef4:	443b      	add	r3, r7
 8018ef6:	429d      	cmp	r5, r3
 8018ef8:	bf38      	it	cc
 8018efa:	461d      	movcc	r5, r3
 8018efc:	0553      	lsls	r3, r2, #21
 8018efe:	d530      	bpl.n	8018f62 <__ssputs_r+0x9e>
 8018f00:	4629      	mov	r1, r5
 8018f02:	f000 fb13 	bl	801952c <_malloc_r>
 8018f06:	4606      	mov	r6, r0
 8018f08:	b950      	cbnz	r0, 8018f20 <__ssputs_r+0x5c>
 8018f0a:	230c      	movs	r3, #12
 8018f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8018f10:	f8ca 3000 	str.w	r3, [sl]
 8018f14:	89a3      	ldrh	r3, [r4, #12]
 8018f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f1a:	81a3      	strh	r3, [r4, #12]
 8018f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f20:	463a      	mov	r2, r7
 8018f22:	6921      	ldr	r1, [r4, #16]
 8018f24:	f7ff ff67 	bl	8018df6 <memcpy>
 8018f28:	89a3      	ldrh	r3, [r4, #12]
 8018f2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f32:	81a3      	strh	r3, [r4, #12]
 8018f34:	6126      	str	r6, [r4, #16]
 8018f36:	443e      	add	r6, r7
 8018f38:	6026      	str	r6, [r4, #0]
 8018f3a:	464e      	mov	r6, r9
 8018f3c:	6165      	str	r5, [r4, #20]
 8018f3e:	1bed      	subs	r5, r5, r7
 8018f40:	60a5      	str	r5, [r4, #8]
 8018f42:	454e      	cmp	r6, r9
 8018f44:	d900      	bls.n	8018f48 <__ssputs_r+0x84>
 8018f46:	464e      	mov	r6, r9
 8018f48:	4632      	mov	r2, r6
 8018f4a:	4641      	mov	r1, r8
 8018f4c:	6820      	ldr	r0, [r4, #0]
 8018f4e:	f7ff ff5d 	bl	8018e0c <memmove>
 8018f52:	68a3      	ldr	r3, [r4, #8]
 8018f54:	2000      	movs	r0, #0
 8018f56:	1b9b      	subs	r3, r3, r6
 8018f58:	60a3      	str	r3, [r4, #8]
 8018f5a:	6823      	ldr	r3, [r4, #0]
 8018f5c:	441e      	add	r6, r3
 8018f5e:	6026      	str	r6, [r4, #0]
 8018f60:	e7dc      	b.n	8018f1c <__ssputs_r+0x58>
 8018f62:	462a      	mov	r2, r5
 8018f64:	f000 fb3c 	bl	80195e0 <_realloc_r>
 8018f68:	4606      	mov	r6, r0
 8018f6a:	2800      	cmp	r0, #0
 8018f6c:	d1e2      	bne.n	8018f34 <__ssputs_r+0x70>
 8018f6e:	6921      	ldr	r1, [r4, #16]
 8018f70:	4650      	mov	r0, sl
 8018f72:	f000 fa8f 	bl	8019494 <_free_r>
 8018f76:	e7c8      	b.n	8018f0a <__ssputs_r+0x46>

08018f78 <_svfiprintf_r>:
 8018f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f7c:	461d      	mov	r5, r3
 8018f7e:	898b      	ldrh	r3, [r1, #12]
 8018f80:	b09d      	sub	sp, #116	; 0x74
 8018f82:	061f      	lsls	r7, r3, #24
 8018f84:	4680      	mov	r8, r0
 8018f86:	460c      	mov	r4, r1
 8018f88:	4616      	mov	r6, r2
 8018f8a:	d50f      	bpl.n	8018fac <_svfiprintf_r+0x34>
 8018f8c:	690b      	ldr	r3, [r1, #16]
 8018f8e:	b96b      	cbnz	r3, 8018fac <_svfiprintf_r+0x34>
 8018f90:	2140      	movs	r1, #64	; 0x40
 8018f92:	f000 facb 	bl	801952c <_malloc_r>
 8018f96:	6020      	str	r0, [r4, #0]
 8018f98:	6120      	str	r0, [r4, #16]
 8018f9a:	b928      	cbnz	r0, 8018fa8 <_svfiprintf_r+0x30>
 8018f9c:	230c      	movs	r3, #12
 8018f9e:	f8c8 3000 	str.w	r3, [r8]
 8018fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8018fa6:	e0c8      	b.n	801913a <_svfiprintf_r+0x1c2>
 8018fa8:	2340      	movs	r3, #64	; 0x40
 8018faa:	6163      	str	r3, [r4, #20]
 8018fac:	2300      	movs	r3, #0
 8018fae:	9309      	str	r3, [sp, #36]	; 0x24
 8018fb0:	2320      	movs	r3, #32
 8018fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018fb6:	2330      	movs	r3, #48	; 0x30
 8018fb8:	f04f 0b01 	mov.w	fp, #1
 8018fbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018fc0:	9503      	str	r5, [sp, #12]
 8018fc2:	4637      	mov	r7, r6
 8018fc4:	463d      	mov	r5, r7
 8018fc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018fca:	b10b      	cbz	r3, 8018fd0 <_svfiprintf_r+0x58>
 8018fcc:	2b25      	cmp	r3, #37	; 0x25
 8018fce:	d13e      	bne.n	801904e <_svfiprintf_r+0xd6>
 8018fd0:	ebb7 0a06 	subs.w	sl, r7, r6
 8018fd4:	d00b      	beq.n	8018fee <_svfiprintf_r+0x76>
 8018fd6:	4653      	mov	r3, sl
 8018fd8:	4632      	mov	r2, r6
 8018fda:	4621      	mov	r1, r4
 8018fdc:	4640      	mov	r0, r8
 8018fde:	f7ff ff71 	bl	8018ec4 <__ssputs_r>
 8018fe2:	3001      	adds	r0, #1
 8018fe4:	f000 80a4 	beq.w	8019130 <_svfiprintf_r+0x1b8>
 8018fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fea:	4453      	add	r3, sl
 8018fec:	9309      	str	r3, [sp, #36]	; 0x24
 8018fee:	783b      	ldrb	r3, [r7, #0]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	f000 809d 	beq.w	8019130 <_svfiprintf_r+0x1b8>
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8018ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019000:	9304      	str	r3, [sp, #16]
 8019002:	9307      	str	r3, [sp, #28]
 8019004:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019008:	931a      	str	r3, [sp, #104]	; 0x68
 801900a:	462f      	mov	r7, r5
 801900c:	2205      	movs	r2, #5
 801900e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019012:	4850      	ldr	r0, [pc, #320]	; (8019154 <_svfiprintf_r+0x1dc>)
 8019014:	f000 fa30 	bl	8019478 <memchr>
 8019018:	9b04      	ldr	r3, [sp, #16]
 801901a:	b9d0      	cbnz	r0, 8019052 <_svfiprintf_r+0xda>
 801901c:	06d9      	lsls	r1, r3, #27
 801901e:	bf44      	itt	mi
 8019020:	2220      	movmi	r2, #32
 8019022:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019026:	071a      	lsls	r2, r3, #28
 8019028:	bf44      	itt	mi
 801902a:	222b      	movmi	r2, #43	; 0x2b
 801902c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019030:	782a      	ldrb	r2, [r5, #0]
 8019032:	2a2a      	cmp	r2, #42	; 0x2a
 8019034:	d015      	beq.n	8019062 <_svfiprintf_r+0xea>
 8019036:	462f      	mov	r7, r5
 8019038:	2000      	movs	r0, #0
 801903a:	250a      	movs	r5, #10
 801903c:	9a07      	ldr	r2, [sp, #28]
 801903e:	4639      	mov	r1, r7
 8019040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019044:	3b30      	subs	r3, #48	; 0x30
 8019046:	2b09      	cmp	r3, #9
 8019048:	d94d      	bls.n	80190e6 <_svfiprintf_r+0x16e>
 801904a:	b1b8      	cbz	r0, 801907c <_svfiprintf_r+0x104>
 801904c:	e00f      	b.n	801906e <_svfiprintf_r+0xf6>
 801904e:	462f      	mov	r7, r5
 8019050:	e7b8      	b.n	8018fc4 <_svfiprintf_r+0x4c>
 8019052:	4a40      	ldr	r2, [pc, #256]	; (8019154 <_svfiprintf_r+0x1dc>)
 8019054:	463d      	mov	r5, r7
 8019056:	1a80      	subs	r0, r0, r2
 8019058:	fa0b f000 	lsl.w	r0, fp, r0
 801905c:	4318      	orrs	r0, r3
 801905e:	9004      	str	r0, [sp, #16]
 8019060:	e7d3      	b.n	801900a <_svfiprintf_r+0x92>
 8019062:	9a03      	ldr	r2, [sp, #12]
 8019064:	1d11      	adds	r1, r2, #4
 8019066:	6812      	ldr	r2, [r2, #0]
 8019068:	9103      	str	r1, [sp, #12]
 801906a:	2a00      	cmp	r2, #0
 801906c:	db01      	blt.n	8019072 <_svfiprintf_r+0xfa>
 801906e:	9207      	str	r2, [sp, #28]
 8019070:	e004      	b.n	801907c <_svfiprintf_r+0x104>
 8019072:	4252      	negs	r2, r2
 8019074:	f043 0302 	orr.w	r3, r3, #2
 8019078:	9207      	str	r2, [sp, #28]
 801907a:	9304      	str	r3, [sp, #16]
 801907c:	783b      	ldrb	r3, [r7, #0]
 801907e:	2b2e      	cmp	r3, #46	; 0x2e
 8019080:	d10c      	bne.n	801909c <_svfiprintf_r+0x124>
 8019082:	787b      	ldrb	r3, [r7, #1]
 8019084:	2b2a      	cmp	r3, #42	; 0x2a
 8019086:	d133      	bne.n	80190f0 <_svfiprintf_r+0x178>
 8019088:	9b03      	ldr	r3, [sp, #12]
 801908a:	3702      	adds	r7, #2
 801908c:	1d1a      	adds	r2, r3, #4
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	9203      	str	r2, [sp, #12]
 8019092:	2b00      	cmp	r3, #0
 8019094:	bfb8      	it	lt
 8019096:	f04f 33ff 	movlt.w	r3, #4294967295
 801909a:	9305      	str	r3, [sp, #20]
 801909c:	4d2e      	ldr	r5, [pc, #184]	; (8019158 <_svfiprintf_r+0x1e0>)
 801909e:	2203      	movs	r2, #3
 80190a0:	7839      	ldrb	r1, [r7, #0]
 80190a2:	4628      	mov	r0, r5
 80190a4:	f000 f9e8 	bl	8019478 <memchr>
 80190a8:	b138      	cbz	r0, 80190ba <_svfiprintf_r+0x142>
 80190aa:	2340      	movs	r3, #64	; 0x40
 80190ac:	1b40      	subs	r0, r0, r5
 80190ae:	fa03 f000 	lsl.w	r0, r3, r0
 80190b2:	9b04      	ldr	r3, [sp, #16]
 80190b4:	3701      	adds	r7, #1
 80190b6:	4303      	orrs	r3, r0
 80190b8:	9304      	str	r3, [sp, #16]
 80190ba:	7839      	ldrb	r1, [r7, #0]
 80190bc:	2206      	movs	r2, #6
 80190be:	4827      	ldr	r0, [pc, #156]	; (801915c <_svfiprintf_r+0x1e4>)
 80190c0:	1c7e      	adds	r6, r7, #1
 80190c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80190c6:	f000 f9d7 	bl	8019478 <memchr>
 80190ca:	2800      	cmp	r0, #0
 80190cc:	d038      	beq.n	8019140 <_svfiprintf_r+0x1c8>
 80190ce:	4b24      	ldr	r3, [pc, #144]	; (8019160 <_svfiprintf_r+0x1e8>)
 80190d0:	bb13      	cbnz	r3, 8019118 <_svfiprintf_r+0x1a0>
 80190d2:	9b03      	ldr	r3, [sp, #12]
 80190d4:	3307      	adds	r3, #7
 80190d6:	f023 0307 	bic.w	r3, r3, #7
 80190da:	3308      	adds	r3, #8
 80190dc:	9303      	str	r3, [sp, #12]
 80190de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190e0:	444b      	add	r3, r9
 80190e2:	9309      	str	r3, [sp, #36]	; 0x24
 80190e4:	e76d      	b.n	8018fc2 <_svfiprintf_r+0x4a>
 80190e6:	fb05 3202 	mla	r2, r5, r2, r3
 80190ea:	2001      	movs	r0, #1
 80190ec:	460f      	mov	r7, r1
 80190ee:	e7a6      	b.n	801903e <_svfiprintf_r+0xc6>
 80190f0:	2300      	movs	r3, #0
 80190f2:	250a      	movs	r5, #10
 80190f4:	4619      	mov	r1, r3
 80190f6:	3701      	adds	r7, #1
 80190f8:	9305      	str	r3, [sp, #20]
 80190fa:	4638      	mov	r0, r7
 80190fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019100:	3a30      	subs	r2, #48	; 0x30
 8019102:	2a09      	cmp	r2, #9
 8019104:	d903      	bls.n	801910e <_svfiprintf_r+0x196>
 8019106:	2b00      	cmp	r3, #0
 8019108:	d0c8      	beq.n	801909c <_svfiprintf_r+0x124>
 801910a:	9105      	str	r1, [sp, #20]
 801910c:	e7c6      	b.n	801909c <_svfiprintf_r+0x124>
 801910e:	fb05 2101 	mla	r1, r5, r1, r2
 8019112:	2301      	movs	r3, #1
 8019114:	4607      	mov	r7, r0
 8019116:	e7f0      	b.n	80190fa <_svfiprintf_r+0x182>
 8019118:	ab03      	add	r3, sp, #12
 801911a:	9300      	str	r3, [sp, #0]
 801911c:	4622      	mov	r2, r4
 801911e:	4b11      	ldr	r3, [pc, #68]	; (8019164 <_svfiprintf_r+0x1ec>)
 8019120:	a904      	add	r1, sp, #16
 8019122:	4640      	mov	r0, r8
 8019124:	f3af 8000 	nop.w
 8019128:	f1b0 3fff 	cmp.w	r0, #4294967295
 801912c:	4681      	mov	r9, r0
 801912e:	d1d6      	bne.n	80190de <_svfiprintf_r+0x166>
 8019130:	89a3      	ldrh	r3, [r4, #12]
 8019132:	065b      	lsls	r3, r3, #25
 8019134:	f53f af35 	bmi.w	8018fa2 <_svfiprintf_r+0x2a>
 8019138:	9809      	ldr	r0, [sp, #36]	; 0x24
 801913a:	b01d      	add	sp, #116	; 0x74
 801913c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019140:	ab03      	add	r3, sp, #12
 8019142:	9300      	str	r3, [sp, #0]
 8019144:	4622      	mov	r2, r4
 8019146:	4b07      	ldr	r3, [pc, #28]	; (8019164 <_svfiprintf_r+0x1ec>)
 8019148:	a904      	add	r1, sp, #16
 801914a:	4640      	mov	r0, r8
 801914c:	f000 f882 	bl	8019254 <_printf_i>
 8019150:	e7ea      	b.n	8019128 <_svfiprintf_r+0x1b0>
 8019152:	bf00      	nop
 8019154:	0801b05a 	.word	0x0801b05a
 8019158:	0801b060 	.word	0x0801b060
 801915c:	0801b064 	.word	0x0801b064
 8019160:	00000000 	.word	0x00000000
 8019164:	08018ec5 	.word	0x08018ec5

08019168 <_printf_common>:
 8019168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801916c:	4691      	mov	r9, r2
 801916e:	461f      	mov	r7, r3
 8019170:	688a      	ldr	r2, [r1, #8]
 8019172:	690b      	ldr	r3, [r1, #16]
 8019174:	4606      	mov	r6, r0
 8019176:	4293      	cmp	r3, r2
 8019178:	bfb8      	it	lt
 801917a:	4613      	movlt	r3, r2
 801917c:	f8c9 3000 	str.w	r3, [r9]
 8019180:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019184:	460c      	mov	r4, r1
 8019186:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801918a:	b112      	cbz	r2, 8019192 <_printf_common+0x2a>
 801918c:	3301      	adds	r3, #1
 801918e:	f8c9 3000 	str.w	r3, [r9]
 8019192:	6823      	ldr	r3, [r4, #0]
 8019194:	0699      	lsls	r1, r3, #26
 8019196:	bf42      	ittt	mi
 8019198:	f8d9 3000 	ldrmi.w	r3, [r9]
 801919c:	3302      	addmi	r3, #2
 801919e:	f8c9 3000 	strmi.w	r3, [r9]
 80191a2:	6825      	ldr	r5, [r4, #0]
 80191a4:	f015 0506 	ands.w	r5, r5, #6
 80191a8:	d107      	bne.n	80191ba <_printf_common+0x52>
 80191aa:	f104 0a19 	add.w	sl, r4, #25
 80191ae:	68e3      	ldr	r3, [r4, #12]
 80191b0:	f8d9 2000 	ldr.w	r2, [r9]
 80191b4:	1a9b      	subs	r3, r3, r2
 80191b6:	42ab      	cmp	r3, r5
 80191b8:	dc29      	bgt.n	801920e <_printf_common+0xa6>
 80191ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80191be:	6822      	ldr	r2, [r4, #0]
 80191c0:	3300      	adds	r3, #0
 80191c2:	bf18      	it	ne
 80191c4:	2301      	movne	r3, #1
 80191c6:	0692      	lsls	r2, r2, #26
 80191c8:	d42e      	bmi.n	8019228 <_printf_common+0xc0>
 80191ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80191ce:	4639      	mov	r1, r7
 80191d0:	4630      	mov	r0, r6
 80191d2:	47c0      	blx	r8
 80191d4:	3001      	adds	r0, #1
 80191d6:	d021      	beq.n	801921c <_printf_common+0xb4>
 80191d8:	6823      	ldr	r3, [r4, #0]
 80191da:	68e5      	ldr	r5, [r4, #12]
 80191dc:	f003 0306 	and.w	r3, r3, #6
 80191e0:	2b04      	cmp	r3, #4
 80191e2:	bf18      	it	ne
 80191e4:	2500      	movne	r5, #0
 80191e6:	f8d9 2000 	ldr.w	r2, [r9]
 80191ea:	f04f 0900 	mov.w	r9, #0
 80191ee:	bf08      	it	eq
 80191f0:	1aad      	subeq	r5, r5, r2
 80191f2:	68a3      	ldr	r3, [r4, #8]
 80191f4:	6922      	ldr	r2, [r4, #16]
 80191f6:	bf08      	it	eq
 80191f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80191fc:	4293      	cmp	r3, r2
 80191fe:	bfc4      	itt	gt
 8019200:	1a9b      	subgt	r3, r3, r2
 8019202:	18ed      	addgt	r5, r5, r3
 8019204:	341a      	adds	r4, #26
 8019206:	454d      	cmp	r5, r9
 8019208:	d11a      	bne.n	8019240 <_printf_common+0xd8>
 801920a:	2000      	movs	r0, #0
 801920c:	e008      	b.n	8019220 <_printf_common+0xb8>
 801920e:	2301      	movs	r3, #1
 8019210:	4652      	mov	r2, sl
 8019212:	4639      	mov	r1, r7
 8019214:	4630      	mov	r0, r6
 8019216:	47c0      	blx	r8
 8019218:	3001      	adds	r0, #1
 801921a:	d103      	bne.n	8019224 <_printf_common+0xbc>
 801921c:	f04f 30ff 	mov.w	r0, #4294967295
 8019220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019224:	3501      	adds	r5, #1
 8019226:	e7c2      	b.n	80191ae <_printf_common+0x46>
 8019228:	2030      	movs	r0, #48	; 0x30
 801922a:	18e1      	adds	r1, r4, r3
 801922c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019230:	1c5a      	adds	r2, r3, #1
 8019232:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019236:	4422      	add	r2, r4
 8019238:	3302      	adds	r3, #2
 801923a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801923e:	e7c4      	b.n	80191ca <_printf_common+0x62>
 8019240:	2301      	movs	r3, #1
 8019242:	4622      	mov	r2, r4
 8019244:	4639      	mov	r1, r7
 8019246:	4630      	mov	r0, r6
 8019248:	47c0      	blx	r8
 801924a:	3001      	adds	r0, #1
 801924c:	d0e6      	beq.n	801921c <_printf_common+0xb4>
 801924e:	f109 0901 	add.w	r9, r9, #1
 8019252:	e7d8      	b.n	8019206 <_printf_common+0x9e>

08019254 <_printf_i>:
 8019254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019258:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801925c:	460c      	mov	r4, r1
 801925e:	7e09      	ldrb	r1, [r1, #24]
 8019260:	b085      	sub	sp, #20
 8019262:	296e      	cmp	r1, #110	; 0x6e
 8019264:	4617      	mov	r7, r2
 8019266:	4606      	mov	r6, r0
 8019268:	4698      	mov	r8, r3
 801926a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801926c:	f000 80b3 	beq.w	80193d6 <_printf_i+0x182>
 8019270:	d822      	bhi.n	80192b8 <_printf_i+0x64>
 8019272:	2963      	cmp	r1, #99	; 0x63
 8019274:	d036      	beq.n	80192e4 <_printf_i+0x90>
 8019276:	d80a      	bhi.n	801928e <_printf_i+0x3a>
 8019278:	2900      	cmp	r1, #0
 801927a:	f000 80b9 	beq.w	80193f0 <_printf_i+0x19c>
 801927e:	2958      	cmp	r1, #88	; 0x58
 8019280:	f000 8083 	beq.w	801938a <_printf_i+0x136>
 8019284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019288:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801928c:	e032      	b.n	80192f4 <_printf_i+0xa0>
 801928e:	2964      	cmp	r1, #100	; 0x64
 8019290:	d001      	beq.n	8019296 <_printf_i+0x42>
 8019292:	2969      	cmp	r1, #105	; 0x69
 8019294:	d1f6      	bne.n	8019284 <_printf_i+0x30>
 8019296:	6820      	ldr	r0, [r4, #0]
 8019298:	6813      	ldr	r3, [r2, #0]
 801929a:	0605      	lsls	r5, r0, #24
 801929c:	f103 0104 	add.w	r1, r3, #4
 80192a0:	d52a      	bpl.n	80192f8 <_printf_i+0xa4>
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	6011      	str	r1, [r2, #0]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	da03      	bge.n	80192b2 <_printf_i+0x5e>
 80192aa:	222d      	movs	r2, #45	; 0x2d
 80192ac:	425b      	negs	r3, r3
 80192ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80192b2:	486f      	ldr	r0, [pc, #444]	; (8019470 <_printf_i+0x21c>)
 80192b4:	220a      	movs	r2, #10
 80192b6:	e039      	b.n	801932c <_printf_i+0xd8>
 80192b8:	2973      	cmp	r1, #115	; 0x73
 80192ba:	f000 809d 	beq.w	80193f8 <_printf_i+0x1a4>
 80192be:	d808      	bhi.n	80192d2 <_printf_i+0x7e>
 80192c0:	296f      	cmp	r1, #111	; 0x6f
 80192c2:	d020      	beq.n	8019306 <_printf_i+0xb2>
 80192c4:	2970      	cmp	r1, #112	; 0x70
 80192c6:	d1dd      	bne.n	8019284 <_printf_i+0x30>
 80192c8:	6823      	ldr	r3, [r4, #0]
 80192ca:	f043 0320 	orr.w	r3, r3, #32
 80192ce:	6023      	str	r3, [r4, #0]
 80192d0:	e003      	b.n	80192da <_printf_i+0x86>
 80192d2:	2975      	cmp	r1, #117	; 0x75
 80192d4:	d017      	beq.n	8019306 <_printf_i+0xb2>
 80192d6:	2978      	cmp	r1, #120	; 0x78
 80192d8:	d1d4      	bne.n	8019284 <_printf_i+0x30>
 80192da:	2378      	movs	r3, #120	; 0x78
 80192dc:	4865      	ldr	r0, [pc, #404]	; (8019474 <_printf_i+0x220>)
 80192de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80192e2:	e055      	b.n	8019390 <_printf_i+0x13c>
 80192e4:	6813      	ldr	r3, [r2, #0]
 80192e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80192ea:	1d19      	adds	r1, r3, #4
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	6011      	str	r1, [r2, #0]
 80192f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80192f4:	2301      	movs	r3, #1
 80192f6:	e08c      	b.n	8019412 <_printf_i+0x1be>
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80192fe:	6011      	str	r1, [r2, #0]
 8019300:	bf18      	it	ne
 8019302:	b21b      	sxthne	r3, r3
 8019304:	e7cf      	b.n	80192a6 <_printf_i+0x52>
 8019306:	6813      	ldr	r3, [r2, #0]
 8019308:	6825      	ldr	r5, [r4, #0]
 801930a:	1d18      	adds	r0, r3, #4
 801930c:	6010      	str	r0, [r2, #0]
 801930e:	0628      	lsls	r0, r5, #24
 8019310:	d501      	bpl.n	8019316 <_printf_i+0xc2>
 8019312:	681b      	ldr	r3, [r3, #0]
 8019314:	e002      	b.n	801931c <_printf_i+0xc8>
 8019316:	0668      	lsls	r0, r5, #25
 8019318:	d5fb      	bpl.n	8019312 <_printf_i+0xbe>
 801931a:	881b      	ldrh	r3, [r3, #0]
 801931c:	296f      	cmp	r1, #111	; 0x6f
 801931e:	bf14      	ite	ne
 8019320:	220a      	movne	r2, #10
 8019322:	2208      	moveq	r2, #8
 8019324:	4852      	ldr	r0, [pc, #328]	; (8019470 <_printf_i+0x21c>)
 8019326:	2100      	movs	r1, #0
 8019328:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801932c:	6865      	ldr	r5, [r4, #4]
 801932e:	2d00      	cmp	r5, #0
 8019330:	60a5      	str	r5, [r4, #8]
 8019332:	f2c0 8095 	blt.w	8019460 <_printf_i+0x20c>
 8019336:	6821      	ldr	r1, [r4, #0]
 8019338:	f021 0104 	bic.w	r1, r1, #4
 801933c:	6021      	str	r1, [r4, #0]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d13d      	bne.n	80193be <_printf_i+0x16a>
 8019342:	2d00      	cmp	r5, #0
 8019344:	f040 808e 	bne.w	8019464 <_printf_i+0x210>
 8019348:	4665      	mov	r5, ip
 801934a:	2a08      	cmp	r2, #8
 801934c:	d10b      	bne.n	8019366 <_printf_i+0x112>
 801934e:	6823      	ldr	r3, [r4, #0]
 8019350:	07db      	lsls	r3, r3, #31
 8019352:	d508      	bpl.n	8019366 <_printf_i+0x112>
 8019354:	6923      	ldr	r3, [r4, #16]
 8019356:	6862      	ldr	r2, [r4, #4]
 8019358:	429a      	cmp	r2, r3
 801935a:	bfde      	ittt	le
 801935c:	2330      	movle	r3, #48	; 0x30
 801935e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019362:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019366:	ebac 0305 	sub.w	r3, ip, r5
 801936a:	6123      	str	r3, [r4, #16]
 801936c:	f8cd 8000 	str.w	r8, [sp]
 8019370:	463b      	mov	r3, r7
 8019372:	aa03      	add	r2, sp, #12
 8019374:	4621      	mov	r1, r4
 8019376:	4630      	mov	r0, r6
 8019378:	f7ff fef6 	bl	8019168 <_printf_common>
 801937c:	3001      	adds	r0, #1
 801937e:	d14d      	bne.n	801941c <_printf_i+0x1c8>
 8019380:	f04f 30ff 	mov.w	r0, #4294967295
 8019384:	b005      	add	sp, #20
 8019386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801938a:	4839      	ldr	r0, [pc, #228]	; (8019470 <_printf_i+0x21c>)
 801938c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8019390:	6813      	ldr	r3, [r2, #0]
 8019392:	6821      	ldr	r1, [r4, #0]
 8019394:	1d1d      	adds	r5, r3, #4
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	6015      	str	r5, [r2, #0]
 801939a:	060a      	lsls	r2, r1, #24
 801939c:	d50b      	bpl.n	80193b6 <_printf_i+0x162>
 801939e:	07ca      	lsls	r2, r1, #31
 80193a0:	bf44      	itt	mi
 80193a2:	f041 0120 	orrmi.w	r1, r1, #32
 80193a6:	6021      	strmi	r1, [r4, #0]
 80193a8:	b91b      	cbnz	r3, 80193b2 <_printf_i+0x15e>
 80193aa:	6822      	ldr	r2, [r4, #0]
 80193ac:	f022 0220 	bic.w	r2, r2, #32
 80193b0:	6022      	str	r2, [r4, #0]
 80193b2:	2210      	movs	r2, #16
 80193b4:	e7b7      	b.n	8019326 <_printf_i+0xd2>
 80193b6:	064d      	lsls	r5, r1, #25
 80193b8:	bf48      	it	mi
 80193ba:	b29b      	uxthmi	r3, r3
 80193bc:	e7ef      	b.n	801939e <_printf_i+0x14a>
 80193be:	4665      	mov	r5, ip
 80193c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80193c4:	fb02 3311 	mls	r3, r2, r1, r3
 80193c8:	5cc3      	ldrb	r3, [r0, r3]
 80193ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80193ce:	460b      	mov	r3, r1
 80193d0:	2900      	cmp	r1, #0
 80193d2:	d1f5      	bne.n	80193c0 <_printf_i+0x16c>
 80193d4:	e7b9      	b.n	801934a <_printf_i+0xf6>
 80193d6:	6813      	ldr	r3, [r2, #0]
 80193d8:	6825      	ldr	r5, [r4, #0]
 80193da:	1d18      	adds	r0, r3, #4
 80193dc:	6961      	ldr	r1, [r4, #20]
 80193de:	6010      	str	r0, [r2, #0]
 80193e0:	0628      	lsls	r0, r5, #24
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	d501      	bpl.n	80193ea <_printf_i+0x196>
 80193e6:	6019      	str	r1, [r3, #0]
 80193e8:	e002      	b.n	80193f0 <_printf_i+0x19c>
 80193ea:	066a      	lsls	r2, r5, #25
 80193ec:	d5fb      	bpl.n	80193e6 <_printf_i+0x192>
 80193ee:	8019      	strh	r1, [r3, #0]
 80193f0:	2300      	movs	r3, #0
 80193f2:	4665      	mov	r5, ip
 80193f4:	6123      	str	r3, [r4, #16]
 80193f6:	e7b9      	b.n	801936c <_printf_i+0x118>
 80193f8:	6813      	ldr	r3, [r2, #0]
 80193fa:	1d19      	adds	r1, r3, #4
 80193fc:	6011      	str	r1, [r2, #0]
 80193fe:	681d      	ldr	r5, [r3, #0]
 8019400:	6862      	ldr	r2, [r4, #4]
 8019402:	2100      	movs	r1, #0
 8019404:	4628      	mov	r0, r5
 8019406:	f000 f837 	bl	8019478 <memchr>
 801940a:	b108      	cbz	r0, 8019410 <_printf_i+0x1bc>
 801940c:	1b40      	subs	r0, r0, r5
 801940e:	6060      	str	r0, [r4, #4]
 8019410:	6863      	ldr	r3, [r4, #4]
 8019412:	6123      	str	r3, [r4, #16]
 8019414:	2300      	movs	r3, #0
 8019416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801941a:	e7a7      	b.n	801936c <_printf_i+0x118>
 801941c:	6923      	ldr	r3, [r4, #16]
 801941e:	462a      	mov	r2, r5
 8019420:	4639      	mov	r1, r7
 8019422:	4630      	mov	r0, r6
 8019424:	47c0      	blx	r8
 8019426:	3001      	adds	r0, #1
 8019428:	d0aa      	beq.n	8019380 <_printf_i+0x12c>
 801942a:	6823      	ldr	r3, [r4, #0]
 801942c:	079b      	lsls	r3, r3, #30
 801942e:	d413      	bmi.n	8019458 <_printf_i+0x204>
 8019430:	68e0      	ldr	r0, [r4, #12]
 8019432:	9b03      	ldr	r3, [sp, #12]
 8019434:	4298      	cmp	r0, r3
 8019436:	bfb8      	it	lt
 8019438:	4618      	movlt	r0, r3
 801943a:	e7a3      	b.n	8019384 <_printf_i+0x130>
 801943c:	2301      	movs	r3, #1
 801943e:	464a      	mov	r2, r9
 8019440:	4639      	mov	r1, r7
 8019442:	4630      	mov	r0, r6
 8019444:	47c0      	blx	r8
 8019446:	3001      	adds	r0, #1
 8019448:	d09a      	beq.n	8019380 <_printf_i+0x12c>
 801944a:	3501      	adds	r5, #1
 801944c:	68e3      	ldr	r3, [r4, #12]
 801944e:	9a03      	ldr	r2, [sp, #12]
 8019450:	1a9b      	subs	r3, r3, r2
 8019452:	42ab      	cmp	r3, r5
 8019454:	dcf2      	bgt.n	801943c <_printf_i+0x1e8>
 8019456:	e7eb      	b.n	8019430 <_printf_i+0x1dc>
 8019458:	2500      	movs	r5, #0
 801945a:	f104 0919 	add.w	r9, r4, #25
 801945e:	e7f5      	b.n	801944c <_printf_i+0x1f8>
 8019460:	2b00      	cmp	r3, #0
 8019462:	d1ac      	bne.n	80193be <_printf_i+0x16a>
 8019464:	7803      	ldrb	r3, [r0, #0]
 8019466:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801946a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801946e:	e76c      	b.n	801934a <_printf_i+0xf6>
 8019470:	0801b06b 	.word	0x0801b06b
 8019474:	0801b07c 	.word	0x0801b07c

08019478 <memchr>:
 8019478:	b510      	push	{r4, lr}
 801947a:	b2c9      	uxtb	r1, r1
 801947c:	4402      	add	r2, r0
 801947e:	4290      	cmp	r0, r2
 8019480:	4603      	mov	r3, r0
 8019482:	d101      	bne.n	8019488 <memchr+0x10>
 8019484:	2300      	movs	r3, #0
 8019486:	e003      	b.n	8019490 <memchr+0x18>
 8019488:	781c      	ldrb	r4, [r3, #0]
 801948a:	3001      	adds	r0, #1
 801948c:	428c      	cmp	r4, r1
 801948e:	d1f6      	bne.n	801947e <memchr+0x6>
 8019490:	4618      	mov	r0, r3
 8019492:	bd10      	pop	{r4, pc}

08019494 <_free_r>:
 8019494:	b538      	push	{r3, r4, r5, lr}
 8019496:	4605      	mov	r5, r0
 8019498:	2900      	cmp	r1, #0
 801949a:	d043      	beq.n	8019524 <_free_r+0x90>
 801949c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80194a0:	1f0c      	subs	r4, r1, #4
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	bfb8      	it	lt
 80194a6:	18e4      	addlt	r4, r4, r3
 80194a8:	f000 f8d0 	bl	801964c <__malloc_lock>
 80194ac:	4a1e      	ldr	r2, [pc, #120]	; (8019528 <_free_r+0x94>)
 80194ae:	6813      	ldr	r3, [r2, #0]
 80194b0:	4610      	mov	r0, r2
 80194b2:	b933      	cbnz	r3, 80194c2 <_free_r+0x2e>
 80194b4:	6063      	str	r3, [r4, #4]
 80194b6:	6014      	str	r4, [r2, #0]
 80194b8:	4628      	mov	r0, r5
 80194ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80194be:	f000 b8c6 	b.w	801964e <__malloc_unlock>
 80194c2:	42a3      	cmp	r3, r4
 80194c4:	d90b      	bls.n	80194de <_free_r+0x4a>
 80194c6:	6821      	ldr	r1, [r4, #0]
 80194c8:	1862      	adds	r2, r4, r1
 80194ca:	4293      	cmp	r3, r2
 80194cc:	bf01      	itttt	eq
 80194ce:	681a      	ldreq	r2, [r3, #0]
 80194d0:	685b      	ldreq	r3, [r3, #4]
 80194d2:	1852      	addeq	r2, r2, r1
 80194d4:	6022      	streq	r2, [r4, #0]
 80194d6:	6063      	str	r3, [r4, #4]
 80194d8:	6004      	str	r4, [r0, #0]
 80194da:	e7ed      	b.n	80194b8 <_free_r+0x24>
 80194dc:	4613      	mov	r3, r2
 80194de:	685a      	ldr	r2, [r3, #4]
 80194e0:	b10a      	cbz	r2, 80194e6 <_free_r+0x52>
 80194e2:	42a2      	cmp	r2, r4
 80194e4:	d9fa      	bls.n	80194dc <_free_r+0x48>
 80194e6:	6819      	ldr	r1, [r3, #0]
 80194e8:	1858      	adds	r0, r3, r1
 80194ea:	42a0      	cmp	r0, r4
 80194ec:	d10b      	bne.n	8019506 <_free_r+0x72>
 80194ee:	6820      	ldr	r0, [r4, #0]
 80194f0:	4401      	add	r1, r0
 80194f2:	1858      	adds	r0, r3, r1
 80194f4:	4282      	cmp	r2, r0
 80194f6:	6019      	str	r1, [r3, #0]
 80194f8:	d1de      	bne.n	80194b8 <_free_r+0x24>
 80194fa:	6810      	ldr	r0, [r2, #0]
 80194fc:	6852      	ldr	r2, [r2, #4]
 80194fe:	4401      	add	r1, r0
 8019500:	6019      	str	r1, [r3, #0]
 8019502:	605a      	str	r2, [r3, #4]
 8019504:	e7d8      	b.n	80194b8 <_free_r+0x24>
 8019506:	d902      	bls.n	801950e <_free_r+0x7a>
 8019508:	230c      	movs	r3, #12
 801950a:	602b      	str	r3, [r5, #0]
 801950c:	e7d4      	b.n	80194b8 <_free_r+0x24>
 801950e:	6820      	ldr	r0, [r4, #0]
 8019510:	1821      	adds	r1, r4, r0
 8019512:	428a      	cmp	r2, r1
 8019514:	bf01      	itttt	eq
 8019516:	6811      	ldreq	r1, [r2, #0]
 8019518:	6852      	ldreq	r2, [r2, #4]
 801951a:	1809      	addeq	r1, r1, r0
 801951c:	6021      	streq	r1, [r4, #0]
 801951e:	6062      	str	r2, [r4, #4]
 8019520:	605c      	str	r4, [r3, #4]
 8019522:	e7c9      	b.n	80194b8 <_free_r+0x24>
 8019524:	bd38      	pop	{r3, r4, r5, pc}
 8019526:	bf00      	nop
 8019528:	20003a88 	.word	0x20003a88

0801952c <_malloc_r>:
 801952c:	b570      	push	{r4, r5, r6, lr}
 801952e:	1ccd      	adds	r5, r1, #3
 8019530:	f025 0503 	bic.w	r5, r5, #3
 8019534:	3508      	adds	r5, #8
 8019536:	2d0c      	cmp	r5, #12
 8019538:	bf38      	it	cc
 801953a:	250c      	movcc	r5, #12
 801953c:	2d00      	cmp	r5, #0
 801953e:	4606      	mov	r6, r0
 8019540:	db01      	blt.n	8019546 <_malloc_r+0x1a>
 8019542:	42a9      	cmp	r1, r5
 8019544:	d903      	bls.n	801954e <_malloc_r+0x22>
 8019546:	230c      	movs	r3, #12
 8019548:	6033      	str	r3, [r6, #0]
 801954a:	2000      	movs	r0, #0
 801954c:	bd70      	pop	{r4, r5, r6, pc}
 801954e:	f000 f87d 	bl	801964c <__malloc_lock>
 8019552:	4a21      	ldr	r2, [pc, #132]	; (80195d8 <_malloc_r+0xac>)
 8019554:	6814      	ldr	r4, [r2, #0]
 8019556:	4621      	mov	r1, r4
 8019558:	b991      	cbnz	r1, 8019580 <_malloc_r+0x54>
 801955a:	4c20      	ldr	r4, [pc, #128]	; (80195dc <_malloc_r+0xb0>)
 801955c:	6823      	ldr	r3, [r4, #0]
 801955e:	b91b      	cbnz	r3, 8019568 <_malloc_r+0x3c>
 8019560:	4630      	mov	r0, r6
 8019562:	f000 f863 	bl	801962c <_sbrk_r>
 8019566:	6020      	str	r0, [r4, #0]
 8019568:	4629      	mov	r1, r5
 801956a:	4630      	mov	r0, r6
 801956c:	f000 f85e 	bl	801962c <_sbrk_r>
 8019570:	1c43      	adds	r3, r0, #1
 8019572:	d124      	bne.n	80195be <_malloc_r+0x92>
 8019574:	230c      	movs	r3, #12
 8019576:	4630      	mov	r0, r6
 8019578:	6033      	str	r3, [r6, #0]
 801957a:	f000 f868 	bl	801964e <__malloc_unlock>
 801957e:	e7e4      	b.n	801954a <_malloc_r+0x1e>
 8019580:	680b      	ldr	r3, [r1, #0]
 8019582:	1b5b      	subs	r3, r3, r5
 8019584:	d418      	bmi.n	80195b8 <_malloc_r+0x8c>
 8019586:	2b0b      	cmp	r3, #11
 8019588:	d90f      	bls.n	80195aa <_malloc_r+0x7e>
 801958a:	600b      	str	r3, [r1, #0]
 801958c:	18cc      	adds	r4, r1, r3
 801958e:	50cd      	str	r5, [r1, r3]
 8019590:	4630      	mov	r0, r6
 8019592:	f000 f85c 	bl	801964e <__malloc_unlock>
 8019596:	f104 000b 	add.w	r0, r4, #11
 801959a:	1d23      	adds	r3, r4, #4
 801959c:	f020 0007 	bic.w	r0, r0, #7
 80195a0:	1ac3      	subs	r3, r0, r3
 80195a2:	d0d3      	beq.n	801954c <_malloc_r+0x20>
 80195a4:	425a      	negs	r2, r3
 80195a6:	50e2      	str	r2, [r4, r3]
 80195a8:	e7d0      	b.n	801954c <_malloc_r+0x20>
 80195aa:	684b      	ldr	r3, [r1, #4]
 80195ac:	428c      	cmp	r4, r1
 80195ae:	bf16      	itet	ne
 80195b0:	6063      	strne	r3, [r4, #4]
 80195b2:	6013      	streq	r3, [r2, #0]
 80195b4:	460c      	movne	r4, r1
 80195b6:	e7eb      	b.n	8019590 <_malloc_r+0x64>
 80195b8:	460c      	mov	r4, r1
 80195ba:	6849      	ldr	r1, [r1, #4]
 80195bc:	e7cc      	b.n	8019558 <_malloc_r+0x2c>
 80195be:	1cc4      	adds	r4, r0, #3
 80195c0:	f024 0403 	bic.w	r4, r4, #3
 80195c4:	42a0      	cmp	r0, r4
 80195c6:	d005      	beq.n	80195d4 <_malloc_r+0xa8>
 80195c8:	1a21      	subs	r1, r4, r0
 80195ca:	4630      	mov	r0, r6
 80195cc:	f000 f82e 	bl	801962c <_sbrk_r>
 80195d0:	3001      	adds	r0, #1
 80195d2:	d0cf      	beq.n	8019574 <_malloc_r+0x48>
 80195d4:	6025      	str	r5, [r4, #0]
 80195d6:	e7db      	b.n	8019590 <_malloc_r+0x64>
 80195d8:	20003a88 	.word	0x20003a88
 80195dc:	20003a8c 	.word	0x20003a8c

080195e0 <_realloc_r>:
 80195e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195e2:	4607      	mov	r7, r0
 80195e4:	4614      	mov	r4, r2
 80195e6:	460e      	mov	r6, r1
 80195e8:	b921      	cbnz	r1, 80195f4 <_realloc_r+0x14>
 80195ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80195ee:	4611      	mov	r1, r2
 80195f0:	f7ff bf9c 	b.w	801952c <_malloc_r>
 80195f4:	b922      	cbnz	r2, 8019600 <_realloc_r+0x20>
 80195f6:	f7ff ff4d 	bl	8019494 <_free_r>
 80195fa:	4625      	mov	r5, r4
 80195fc:	4628      	mov	r0, r5
 80195fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019600:	f000 f826 	bl	8019650 <_malloc_usable_size_r>
 8019604:	42a0      	cmp	r0, r4
 8019606:	d20f      	bcs.n	8019628 <_realloc_r+0x48>
 8019608:	4621      	mov	r1, r4
 801960a:	4638      	mov	r0, r7
 801960c:	f7ff ff8e 	bl	801952c <_malloc_r>
 8019610:	4605      	mov	r5, r0
 8019612:	2800      	cmp	r0, #0
 8019614:	d0f2      	beq.n	80195fc <_realloc_r+0x1c>
 8019616:	4631      	mov	r1, r6
 8019618:	4622      	mov	r2, r4
 801961a:	f7ff fbec 	bl	8018df6 <memcpy>
 801961e:	4631      	mov	r1, r6
 8019620:	4638      	mov	r0, r7
 8019622:	f7ff ff37 	bl	8019494 <_free_r>
 8019626:	e7e9      	b.n	80195fc <_realloc_r+0x1c>
 8019628:	4635      	mov	r5, r6
 801962a:	e7e7      	b.n	80195fc <_realloc_r+0x1c>

0801962c <_sbrk_r>:
 801962c:	b538      	push	{r3, r4, r5, lr}
 801962e:	2300      	movs	r3, #0
 8019630:	4c05      	ldr	r4, [pc, #20]	; (8019648 <_sbrk_r+0x1c>)
 8019632:	4605      	mov	r5, r0
 8019634:	4608      	mov	r0, r1
 8019636:	6023      	str	r3, [r4, #0]
 8019638:	f7e9 fcbc 	bl	8002fb4 <_sbrk>
 801963c:	1c43      	adds	r3, r0, #1
 801963e:	d102      	bne.n	8019646 <_sbrk_r+0x1a>
 8019640:	6823      	ldr	r3, [r4, #0]
 8019642:	b103      	cbz	r3, 8019646 <_sbrk_r+0x1a>
 8019644:	602b      	str	r3, [r5, #0]
 8019646:	bd38      	pop	{r3, r4, r5, pc}
 8019648:	20003d74 	.word	0x20003d74

0801964c <__malloc_lock>:
 801964c:	4770      	bx	lr

0801964e <__malloc_unlock>:
 801964e:	4770      	bx	lr

08019650 <_malloc_usable_size_r>:
 8019650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019654:	1f18      	subs	r0, r3, #4
 8019656:	2b00      	cmp	r3, #0
 8019658:	bfbc      	itt	lt
 801965a:	580b      	ldrlt	r3, [r1, r0]
 801965c:	18c0      	addlt	r0, r0, r3
 801965e:	4770      	bx	lr

08019660 <_init>:
 8019660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019662:	bf00      	nop
 8019664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019666:	bc08      	pop	{r3}
 8019668:	469e      	mov	lr, r3
 801966a:	4770      	bx	lr

0801966c <_fini>:
 801966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801966e:	bf00      	nop
 8019670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019672:	bc08      	pop	{r3}
 8019674:	469e      	mov	lr, r3
 8019676:	4770      	bx	lr
