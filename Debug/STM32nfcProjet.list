
STM32nfcProjet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019524  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a14  08019660  08019660  00029660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b074  0801b074  00030174  2**0
                  CONTENTS
  4 .ARM          00000008  0801b074  0801b074  0002b074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b07c  0801b07c  00030174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b07c  0801b07c  0002b07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b080  0801b080  0002b080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0801b084  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003bc4  20000174  0801b1f8  00030174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003d38  0801b1f8  00033d38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bd7d  00000000  00000000  0003019d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006949  00000000  00000000  0005bf1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c38  00000000  00000000  00062868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001980  00000000  00000000  000644a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021fab  00000000  00000000  00065e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e6d4  00000000  00000000  00087dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6b17  00000000  00000000  000b649f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015cfb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007518  00000000  00000000  0015d008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000174 	.word	0x20000174
 8000158:	00000000 	.word	0x00000000
 800015c:	08019648 	.word	0x08019648

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000178 	.word	0x20000178
 8000178:	08019648 	.word	0x08019648

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <logUsartInit>:
  * @brief  This function initalize the UART handle.
	* @param	husart : already initalized handle to USART HW
  * @retval none :
  */
void logUsartInit(UART_HandleTypeDef *husart)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
    pLogUsart = husart;
 800049c:	4a03      	ldr	r2, [pc, #12]	; (80004ac <logUsartInit+0x18>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	6013      	str	r3, [r2, #0]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	20000394 	.word	0x20000394

080004b0 <logUsartTx>:
	* @param	dataLen : length of data to be transmitted
  * @retval ERR_INVALID_HANDLE : in case the SPI HW is not initalized yet
  * @retval others : HAL status
  */
uint8_t logUsartTx(uint8_t *data, uint16_t dataLen)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	807b      	strh	r3, [r7, #2]
  if(pLogUsart == 0)
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <logUsartTx+0x34>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d101      	bne.n	80004c8 <logUsartTx+0x18>
    return ERR_INVALID_HANDLE;
 80004c4:	2326      	movs	r3, #38	; 0x26
 80004c6:	e008      	b.n	80004da <logUsartTx+0x2a>

  return HAL_UART_Transmit(pLogUsart, data, dataLen, USART_TIMEOUT);
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <logUsartTx+0x34>)
 80004ca:	6818      	ldr	r0, [r3, #0]
 80004cc:	887a      	ldrh	r2, [r7, #2]
 80004ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004d2:	6879      	ldr	r1, [r7, #4]
 80004d4:	f005 fb55 	bl	8005b82 <HAL_UART_Transmit>
 80004d8:	4603      	mov	r3, r0
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000394 	.word	0x20000394

080004e8 <logUsart>:

int logUsart(const char* format, ...)
{
 80004e8:	b40f      	push	{r0, r1, r2, r3}
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b0c2      	sub	sp, #264	; 0x108
 80004ee:	af00      	add	r7, sp, #0
  #if (USE_LOGGER == LOGGER_ON)
  {  
    #define LOG_BUFFER_SIZE 256
    char buf[LOG_BUFFER_SIZE];
    va_list argptr;
    va_start(argptr, format);
 80004f0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80004f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    int cnt = vsnprintf(buf, LOG_BUFFER_SIZE, format, argptr);
 80004f8:	4638      	mov	r0, r7
 80004fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80004fe:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000506:	f018 fc5f 	bl	8018dc8 <vsniprintf>
 800050a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    va_end(argptr);  
      
    /* */
    logUsartTx((uint8_t*)buf, strlen(buf));
 800050e:	463b      	mov	r3, r7
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe33 	bl	800017c <strlen>
 8000516:	4603      	mov	r3, r0
 8000518:	b29a      	uxth	r2, r3
 800051a:	463b      	mov	r3, r7
 800051c:	4611      	mov	r1, r2
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ffc6 	bl	80004b0 <logUsartTx>
    return cnt;
 8000524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  #else
  {
    return 0;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 8000528:	4618      	mov	r0, r3
 800052a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800052e:	46bd      	mov	sp, r7
 8000530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000534:	b004      	add	sp, #16
 8000536:	4770      	bx	lr

08000538 <hex2Str>:

/* */

char* hex2Str(unsigned char * data, size_t dataLen)
{
 8000538:	b480      	push	{r7}
 800053a:	b089      	sub	sp, #36	; 0x24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
  #if (USE_LOGGER == LOGGER_ON)
  {
    unsigned char * pin = data;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	61fb      	str	r3, [r7, #28]
    const char * hex = "0123456789ABCDEF";
 8000546:	4b36      	ldr	r3, [pc, #216]	; (8000620 <hex2Str+0xe8>)
 8000548:	613b      	str	r3, [r7, #16]
    char * pout = hexStr[hexStrIdx];
 800054a:	4b36      	ldr	r3, [pc, #216]	; (8000624 <hex2Str+0xec>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	01db      	lsls	r3, r3, #7
 8000550:	4a35      	ldr	r2, [pc, #212]	; (8000628 <hex2Str+0xf0>)
 8000552:	4413      	add	r3, r2
 8000554:	61bb      	str	r3, [r7, #24]
    uint8_t i = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	75fb      	strb	r3, [r7, #23]
    uint8_t idx = hexStrIdx;
 800055a:	4b32      	ldr	r3, [pc, #200]	; (8000624 <hex2Str+0xec>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	73fb      	strb	r3, [r7, #15]
    size_t len;  
      
    if(dataLen == 0)
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d103      	bne.n	800056e <hex2Str+0x36>
    {
      pout[0] = 0;     
 8000566:	69bb      	ldr	r3, [r7, #24]
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
 800056c:	e042      	b.n	80005f4 <hex2Str+0xbc>
    } 
    else     
    {
      /* Trim data that doesn't fit in buffer */
      len = MIN( dataLen , (MAX_HEX_STR_LENGTH / 2) );
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	2b40      	cmp	r3, #64	; 0x40
 8000572:	bf28      	it	cs
 8000574:	2340      	movcs	r3, #64	; 0x40
 8000576:	60bb      	str	r3, [r7, #8]
        
      for(; i < (len - 1); ++i)
 8000578:	e01c      	b.n	80005b4 <hex2Str+0x7c>
      {
          *pout++ = hex[(*pin>>4)&0xF];
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	091b      	lsrs	r3, r3, #4
 8000580:	b2db      	uxtb	r3, r3
 8000582:	f003 030f 	and.w	r3, r3, #15
 8000586:	693a      	ldr	r2, [r7, #16]
 8000588:	441a      	add	r2, r3
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	1c59      	adds	r1, r3, #1
 800058e:	61b9      	str	r1, [r7, #24]
 8000590:	7812      	ldrb	r2, [r2, #0]
 8000592:	701a      	strb	r2, [r3, #0]
          *pout++ = hex[(*pin++)&0xF];
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	61fa      	str	r2, [r7, #28]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	f003 030f 	and.w	r3, r3, #15
 80005a0:	693a      	ldr	r2, [r7, #16]
 80005a2:	441a      	add	r2, r3
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	1c59      	adds	r1, r3, #1
 80005a8:	61b9      	str	r1, [r7, #24]
 80005aa:	7812      	ldrb	r2, [r2, #0]
 80005ac:	701a      	strb	r2, [r3, #0]
      for(; i < (len - 1); ++i)
 80005ae:	7dfb      	ldrb	r3, [r7, #23]
 80005b0:	3301      	adds	r3, #1
 80005b2:	75fb      	strb	r3, [r7, #23]
 80005b4:	7dfa      	ldrb	r2, [r7, #23]
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d3dd      	bcc.n	800057a <hex2Str+0x42>
      }
      *pout++ = hex[(*pin>>4)&0xF];
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	091b      	lsrs	r3, r3, #4
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	f003 030f 	and.w	r3, r3, #15
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	441a      	add	r2, r3
 80005ce:	69bb      	ldr	r3, [r7, #24]
 80005d0:	1c59      	adds	r1, r3, #1
 80005d2:	61b9      	str	r1, [r7, #24]
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	701a      	strb	r2, [r3, #0]
      *pout++ = hex[(*pin)&0xF];
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	f003 030f 	and.w	r3, r3, #15
 80005e0:	693a      	ldr	r2, [r7, #16]
 80005e2:	441a      	add	r2, r3
 80005e4:	69bb      	ldr	r3, [r7, #24]
 80005e6:	1c59      	adds	r1, r3, #1
 80005e8:	61b9      	str	r1, [r7, #24]
 80005ea:	7812      	ldrb	r2, [r2, #0]
 80005ec:	701a      	strb	r2, [r3, #0]
      *pout = 0;
 80005ee:	69bb      	ldr	r3, [r7, #24]
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
    }    
    
    hexStrIdx++;
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <hex2Str+0xec>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <hex2Str+0xec>)
 80005fe:	701a      	strb	r2, [r3, #0]
    hexStrIdx %= MAX_HEX_STR;
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <hex2Str+0xec>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	f003 0303 	and.w	r3, r3, #3
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <hex2Str+0xec>)
 800060c:	701a      	strb	r2, [r3, #0]
    
    return hexStr[idx];
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	01db      	lsls	r3, r3, #7
 8000612:	4a05      	ldr	r2, [pc, #20]	; (8000628 <hex2Str+0xf0>)
 8000614:	4413      	add	r3, r2
  #else
  {
    return NULL;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 8000616:	4618      	mov	r0, r3
 8000618:	3724      	adds	r7, #36	; 0x24
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	08019660 	.word	0x08019660
 8000624:	20000390 	.word	0x20000390
 8000628:	20000190 	.word	0x20000190

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f003 fdd5 	bl	80041e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f88f 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f93b 	bl	80008b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063e:	f000 f90f 	bl	8000860 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000642:	f000 f8d7 	bl	80007f4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize driver*/
  spiInit(&hspi1);
 8000646:	483d      	ldr	r0, [pc, #244]	; (800073c <main+0x110>)
 8000648:	f002 faf4 	bl	8002c34 <spiInit>

  /* Initialize log module */
  logUsartInit(&huart2);
 800064c:	483c      	ldr	r0, [pc, #240]	; (8000740 <main+0x114>)
 800064e:	f7ff ff21 	bl	8000494 <logUsartInit>

  platformLog("Welcome to the NFC enabler application\r\n");
 8000652:	483c      	ldr	r0, [pc, #240]	; (8000744 <main+0x118>)
 8000654:	f7ff ff48 	bl	80004e8 <logUsart>

  if( !demoIni() )
 8000658:	f000 fa24 	bl	8000aa4 <demoIni>
 800065c:	4603      	mov	r3, r0
 800065e:	f083 0301 	eor.w	r3, r3, #1
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d01f      	beq.n	80006a8 <main+0x7c>
    {
      /*
      * in case the rfal initalization failed signal it by flashing all LED
      * and stoping all operations
      */
      platformLog("Initialization failed..\r\n");
 8000668:	4837      	ldr	r0, [pc, #220]	; (8000748 <main+0x11c>)
 800066a:	f7ff ff3d 	bl	80004e8 <logUsart>
      while(1)
      {
        platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	4836      	ldr	r0, [pc, #216]	; (800074c <main+0x120>)
 8000674:	f004 f911 	bl	800489a <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8000678:	2101      	movs	r1, #1
 800067a:	4835      	ldr	r0, [pc, #212]	; (8000750 <main+0x124>)
 800067c:	f004 f90d 	bl	800489a <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8000680:	2110      	movs	r1, #16
 8000682:	4832      	ldr	r0, [pc, #200]	; (800074c <main+0x120>)
 8000684:	f004 f909 	bl	800489a <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8000688:	2102      	movs	r1, #2
 800068a:	4830      	ldr	r0, [pc, #192]	; (800074c <main+0x120>)
 800068c:	f004 f905 	bl	800489a <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8000690:	2110      	movs	r1, #16
 8000692:	482f      	ldr	r0, [pc, #188]	; (8000750 <main+0x124>)
 8000694:	f004 f901 	bl	800489a <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8000698:	2120      	movs	r1, #32
 800069a:	482d      	ldr	r0, [pc, #180]	; (8000750 <main+0x124>)
 800069c:	f004 f8fd 	bl	800489a <HAL_GPIO_TogglePin>
        platformDelay(100);
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f003 fe0b 	bl	80042bc <HAL_Delay>
        platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80006a6:	e7e2      	b.n	800066e <main+0x42>
      }
    }
    else
    {
      platformLog("Initialization succeeded..\r\n");
 80006a8:	482a      	ldr	r0, [pc, #168]	; (8000754 <main+0x128>)
 80006aa:	f7ff ff1d 	bl	80004e8 <logUsart>
      for (int i = 0; i < 6; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	e01e      	b.n	80006f2 <main+0xc6>
      {
        platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80006b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b8:	4824      	ldr	r0, [pc, #144]	; (800074c <main+0x120>)
 80006ba:	f004 f8ee 	bl	800489a <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80006be:	2101      	movs	r1, #1
 80006c0:	4823      	ldr	r0, [pc, #140]	; (8000750 <main+0x124>)
 80006c2:	f004 f8ea 	bl	800489a <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80006c6:	2110      	movs	r1, #16
 80006c8:	4820      	ldr	r0, [pc, #128]	; (800074c <main+0x120>)
 80006ca:	f004 f8e6 	bl	800489a <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 80006ce:	2102      	movs	r1, #2
 80006d0:	481e      	ldr	r0, [pc, #120]	; (800074c <main+0x120>)
 80006d2:	f004 f8e2 	bl	800489a <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 80006d6:	2110      	movs	r1, #16
 80006d8:	481d      	ldr	r0, [pc, #116]	; (8000750 <main+0x124>)
 80006da:	f004 f8de 	bl	800489a <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 80006de:	2120      	movs	r1, #32
 80006e0:	481b      	ldr	r0, [pc, #108]	; (8000750 <main+0x124>)
 80006e2:	f004 f8da 	bl	800489a <HAL_GPIO_TogglePin>
        platformDelay(200);
 80006e6:	20c8      	movs	r0, #200	; 0xc8
 80006e8:	f003 fde8 	bl	80042bc <HAL_Delay>
      for (int i = 0; i < 6; i++)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3301      	adds	r3, #1
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b05      	cmp	r3, #5
 80006f6:	dddd      	ble.n	80006b4 <main+0x88>
      }

      platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2101      	movs	r1, #1
 80006fc:	4814      	ldr	r0, [pc, #80]	; (8000750 <main+0x124>)
 80006fe:	f004 f8b4 	bl	800486a <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8000702:	2200      	movs	r2, #0
 8000704:	2110      	movs	r1, #16
 8000706:	4811      	ldr	r0, [pc, #68]	; (800074c <main+0x120>)
 8000708:	f004 f8af 	bl	800486a <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 800070c:	2200      	movs	r2, #0
 800070e:	2102      	movs	r1, #2
 8000710:	480e      	ldr	r0, [pc, #56]	; (800074c <main+0x120>)
 8000712:	f004 f8aa 	bl	800486a <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8000716:	2200      	movs	r2, #0
 8000718:	2110      	movs	r1, #16
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <main+0x124>)
 800071c:	f004 f8a5 	bl	800486a <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8000720:	2200      	movs	r2, #0
 8000722:	2120      	movs	r1, #32
 8000724:	480a      	ldr	r0, [pc, #40]	; (8000750 <main+0x124>)
 8000726:	f004 f8a0 	bl	800486a <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <main+0x120>)
 8000732:	f004 f89a 	bl	800486a <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 /* Run Demo Application */
	 demoCycle();
 8000736:	f000 fa0f 	bl	8000b58 <demoCycle>
 800073a:	e7fc      	b.n	8000736 <main+0x10a>
 800073c:	20000398 	.word	0x20000398
 8000740:	200003f0 	.word	0x200003f0
 8000744:	08019674 	.word	0x08019674
 8000748:	080196a0 	.word	0x080196a0
 800074c:	40020000 	.word	0x40020000
 8000750:	40020400 	.word	0x40020400
 8000754:	080196bc 	.word	0x080196bc

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b092      	sub	sp, #72	; 0x48
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2234      	movs	r2, #52	; 0x34
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f018 fafa 	bl	8018d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	463b      	mov	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <SystemClock_Config+0x98>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000782:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <SystemClock_Config+0x98>)
 8000784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000788:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078a:	2302      	movs	r3, #2
 800078c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000792:	2310      	movs	r3, #16
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079a:	2300      	movs	r3, #0
 800079c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800079e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80007a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80007a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 f8ae 	bl	8004910 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007ba:	f000 f90d 	bl	80009d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2303      	movs	r3, #3
 80007c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	2101      	movs	r1, #1
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 fbca 	bl	8004f70 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007e2:	f000 f8f9 	bl	80009d8 <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3748      	adds	r7, #72	; 0x48
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_SPI1_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <MX_SPI1_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_SPI1_Init+0x64>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI1_Init+0x64>)
 800081a:	2201      	movs	r2, #1
 800081c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_SPI1_Init+0x64>)
 8000820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000824:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI1_Init+0x64>)
 8000828:	2218      	movs	r2, #24
 800082a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI1_Init+0x64>)
 8000840:	220a      	movs	r2, #10
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_SPI1_Init+0x64>)
 8000846:	f004 fe59 	bl	80054fc <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000850:	f000 f8c2 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000398 	.word	0x20000398
 800085c:	40013000 	.word	0x40013000

08000860 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000866:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_USART2_UART_Init+0x50>)
 8000868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000898:	f005 f926 	bl	8005ae8 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008a2:	f000 f899 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200003f0 	.word	0x200003f0
 80008b0:	40004400 	.word	0x40004400

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b3f      	ldr	r3, [pc, #252]	; (80009c8 <MX_GPIO_Init+0x114>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a3e      	ldr	r2, [pc, #248]	; (80009c8 <MX_GPIO_Init+0x114>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b3c      	ldr	r3, [pc, #240]	; (80009c8 <MX_GPIO_Init+0x114>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	4b39      	ldr	r3, [pc, #228]	; (80009c8 <MX_GPIO_Init+0x114>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a38      	ldr	r2, [pc, #224]	; (80009c8 <MX_GPIO_Init+0x114>)
 80008e8:	f043 0320 	orr.w	r3, r3, #32
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <MX_GPIO_Init+0x114>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f003 0320 	and.w	r3, r3, #32
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b33      	ldr	r3, [pc, #204]	; (80009c8 <MX_GPIO_Init+0x114>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	4a32      	ldr	r2, [pc, #200]	; (80009c8 <MX_GPIO_Init+0x114>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	61d3      	str	r3, [r2, #28]
 8000906:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <MX_GPIO_Init+0x114>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_GPIO_Init+0x114>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	4a2c      	ldr	r2, [pc, #176]	; (80009c8 <MX_GPIO_Init+0x114>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	61d3      	str	r3, [r2, #28]
 800091e:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <MX_GPIO_Init+0x114>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_F_Pin|LED_B_Pin|LED_FIELD_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 7189 	mov.w	r1, #274	; 0x112
 8000930:	4826      	ldr	r0, [pc, #152]	; (80009cc <MX_GPIO_Init+0x118>)
 8000932:	f003 ff9a 	bl	800486a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_V_Pin|LED_AP2P_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2171      	movs	r1, #113	; 0x71
 800093a:	4825      	ldr	r0, [pc, #148]	; (80009d0 <MX_GPIO_Init+0x11c>)
 800093c:	f003 ff95 	bl	800486a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000946:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	481f      	ldr	r0, [pc, #124]	; (80009d4 <MX_GPIO_Init+0x120>)
 8000958:	f003 fde0 	bl	800451c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_3911_Pin */
  GPIO_InitStruct.Pin = IRQ_3911_Pin;
 800095c:	2301      	movs	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000960:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_3911_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4816      	ldr	r0, [pc, #88]	; (80009cc <MX_GPIO_Init+0x118>)
 8000972:	f003 fdd3 	bl	800451c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_F_Pin LED_B_Pin LED_FIELD_Pin */
  GPIO_InitStruct.Pin = LED_F_Pin|LED_B_Pin|LED_FIELD_Pin;
 8000976:	f44f 7389 	mov.w	r3, #274	; 0x112
 800097a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	480f      	ldr	r0, [pc, #60]	; (80009cc <MX_GPIO_Init+0x118>)
 8000990:	f003 fdc4 	bl	800451c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_V_Pin LED_AP2P_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_V_Pin|LED_AP2P_Pin|SPI1_CS_Pin;
 8000994:	2371      	movs	r3, #113	; 0x71
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	4809      	ldr	r0, [pc, #36]	; (80009d0 <MX_GPIO_Init+0x11c>)
 80009ac:	f003 fdb6 	bl	800451c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2006      	movs	r0, #6
 80009b6:	f003 fd7a 	bl	80044ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009ba:	2006      	movs	r0, #6
 80009bc:	f003 fd93 	bl	80044e6 <HAL_NVIC_EnableIRQ>

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400
 80009d4:	40020800 	.word	0x40020800

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <checkUserButton>:
 *  This function check whethe the user button has been pressed
 *****************************************************************************
 */

static void checkUserButton(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
    /* Check if USER button is pressed */
    if( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN))
 80009e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ec:	481f      	ldr	r0, [pc, #124]	; (8000a6c <checkUserButton+0x88>)
 80009ee:	f003 ff25 	bl	800483c <HAL_GPIO_ReadPin>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d036      	beq.n	8000a66 <checkUserButton+0x82>
    {
        ndefDemoFeature++;
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <checkUserButton+0x8c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <checkUserButton+0x8c>)
 8000a02:	701a      	strb	r2, [r3, #0]
        ndefDemoFeature %= NDEF_DEMO_MAX_FEATURES;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <checkUserButton+0x8c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	f003 0303 	and.w	r3, r3, #3
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <checkUserButton+0x8c>)
 8000a10:	701a      	strb	r2, [r3, #0]

        ledsOff();
 8000a12:	f001 fb33 	bl	800207c <ledsOff>
        ndefDemoPrevFeature = ndefDemoFeature;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <checkUserButton+0x8c>)
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <checkUserButton+0x90>)
 8000a1c:	701a      	strb	r2, [r3, #0]
        platformLog("%s\r\n", ndefDemoFeatureDescription[ndefDemoFeature]);
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <checkUserButton+0x8c>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <checkUserButton+0x94>)
 8000a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4813      	ldr	r0, [pc, #76]	; (8000a7c <checkUserButton+0x98>)
 8000a2e:	f7ff fd5b 	bl	80004e8 <logUsart>
        /* Debounce button */
        while( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN) );
 8000a32:	bf00      	nop
 8000a34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <checkUserButton+0x88>)
 8000a3a:	f003 feff 	bl	800483c <HAL_GPIO_ReadPin>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d1f7      	bne.n	8000a34 <checkUserButton+0x50>
        if( ndefDemoFeature != NDEF_DEMO_READ )
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <checkUserButton+0x8c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d00c      	beq.n	8000a66 <checkUserButton+0x82>
        {
            timer = platformTimerCreate(NDEF_WRITE_FORMAT_TIMEOUT);
 8000a4c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a50:	f003 fba2 	bl	8004198 <timerCalculateTimer>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <checkUserButton+0x9c>)
 8000a58:	6013      	str	r3, [r2, #0]
            timerLed = platformTimerCreate(NDEF_LED_BLINK_DURATION);
 8000a5a:	20fa      	movs	r0, #250	; 0xfa
 8000a5c:	f003 fb9c 	bl	8004198 <timerCalculateTimer>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <checkUserButton+0xa0>)
 8000a64:	6013      	str	r3, [r2, #0]
        }
    }
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40020800 	.word	0x40020800
 8000a70:	20000f98 	.word	0x20000f98
 8000a74:	20000097 	.word	0x20000097
 8000a78:	20000054 	.word	0x20000054
 8000a7c:	0801972c 	.word	0x0801972c
 8000a80:	20002f9c 	.word	0x20002f9c
 8000a84:	20002fa0 	.word	0x20002fa0

08000a88 <ndefShowDemoUsage>:
 *
 *  This function displays usage information
 *****************************************************************************
 */
static void ndefShowDemoUsage()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
#if NDEF_FEATURE_ALL
    //uint32_t i;
    
    //platformLog("Use the User button to cycle among the different modes:\r\n");

    platformLog("%s\r\n", ndefDemoFeatureDescription[0]);
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <ndefShowDemoUsage+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <ndefShowDemoUsage+0x18>)
 8000a94:	f7ff fd28 	bl	80004e8 <logUsart>
//    {
//        platformLog("%s\r\n", ndefDemoFeatureDescription[i]);
//    }
    //platformLog("In Write or Format mode (menu 2, 3 or 4), the demo returns to Read mode (menu 1) if no tag detected after %d seconds\r\n\n", NDEF_WRITE_FORMAT_TIMEOUT/1000);
#endif /* NDEF_FEATURE_ALL */
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000054 	.word	0x20000054
 8000aa0:	0801972c 	.word	0x0801972c

08000aa4 <demoIni>:
 * \return true  : Initialization ok
 * \return false : Initialization failed
 *****************************************************************************
 */
bool demoIni( void )
{
 8000aa4:	b5b0      	push	{r4, r5, r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
//    if( (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0)
//    {
//        verbose = true;
//    }
//#endif
    ndefShowDemoUsage();
 8000aaa:	f7ff ffed 	bl	8000a88 <ndefShowDemoUsage>
    
    err = rfalNfcInitialize();
 8000aae:	f00e fb33 	bl	800f118 <rfalNfcInitialize>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
    if( err == ERR_NONE )
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d140      	bne.n	8000b3e <demoIni+0x9a>
    {
        discParam.compMode      = RFAL_COMPLIANCE_MODE_NFC;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <demoIni+0xa4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
        discParam.devLimit      = 1U;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <demoIni+0xa4>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	719a      	strb	r2, [r3, #6]
        discParam.nfcfBR        = RFAL_BR_212;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <demoIni+0xa4>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	71da      	strb	r2, [r3, #7]
        discParam.ap2pBR        = RFAL_BR_424;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <demoIni+0xa4>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <demoIni+0xa4>)
 8000ad8:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <demoIni+0xa8>)
 8000ada:	3308      	adds	r3, #8
 8000adc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ade:	c303      	stmia	r3!, {r0, r1}
 8000ae0:	801a      	strh	r2, [r3, #0]
        ST_MEMCPY( &discParam.GB, GB, sizeof(GB) );
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <demoIni+0xa4>)
 8000ae4:	4a1a      	ldr	r2, [pc, #104]	; (8000b50 <demoIni+0xac>)
 8000ae6:	f103 0512 	add.w	r5, r3, #18
 8000aea:	4614      	mov	r4, r2
 8000aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aee:	6028      	str	r0, [r5, #0]
 8000af0:	6069      	str	r1, [r5, #4]
 8000af2:	60aa      	str	r2, [r5, #8]
 8000af4:	60eb      	str	r3, [r5, #12]
 8000af6:	6820      	ldr	r0, [r4, #0]
 8000af8:	6128      	str	r0, [r5, #16]
        discParam.GBLen         = sizeof(GB);
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <demoIni+0xa4>)
 8000afc:	2214      	movs	r2, #20
 8000afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        discParam.notifyCb             = NULL;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <demoIni+0xa4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	669a      	str	r2, [r3, #104]	; 0x68
        discParam.totalDuration        = 1000U;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <demoIni+0xa4>)
 8000b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b0e:	809a      	strh	r2, [r3, #4]
        discParam.wakeupEnabled        = false;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <demoIni+0xa4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        discParam.wakeupConfigDefault  = true;
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <demoIni+0xa4>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        discParam.techs2Find           = ( RFAL_NFC_POLL_TECH_A | RFAL_NFC_POLL_TECH_B | RFAL_NFC_POLL_TECH_F | RFAL_NFC_POLL_TECH_V | RFAL_NFC_POLL_TECH_ST25TB );
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <demoIni+0xa4>)
 8000b22:	222f      	movs	r2, #47	; 0x2f
 8000b24:	805a      	strh	r2, [r3, #2]
#if defined(ST25R3911) || defined(ST25R3916)
        discParam.techs2Find   |= RFAL_NFC_POLL_TECH_AP2P;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <demoIni+0xa4>)
 8000b28:	885b      	ldrh	r3, [r3, #2]
 8000b2a:	f043 0310 	orr.w	r3, r3, #16
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <demoIni+0xa4>)
 8000b32:	805a      	strh	r2, [r3, #2]
      
      discParam.techs2Find |= ( RFAL_NFC_LISTEN_TECH_A | RFAL_NFC_LISTEN_TECH_F );
      
#endif /* ST25R3916 */

        state = DEMO_ST_START_DISCOVERY;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <demoIni+0xb0>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
        return true;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e000      	b.n	8000b40 <demoIni+0x9c>
    }
    return false;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bdb0      	pop	{r4, r5, r7, pc}
 8000b48:	2000053c 	.word	0x2000053c
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	2000000c 	.word	0x2000000c
 8000b54:	200005c0 	.word	0x200005c0

08000b58 <demoCycle>:
 *  This function executes the demo state machine. 
 *  It must be called periodically
 *****************************************************************************
 */
void demoCycle( void )
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af02      	add	r7, sp, #8
    rfalNfcaSelRes        selRes;
    
    rfalNfcbSensbRes      sensbRes;
    uint8_t               sensbResLen;
    
    uint8_t               devCnt = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    rfalFeliCaPollRes     cardList[1];
    uint8_t               collisions = 0U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	77fb      	strb	r3, [r7, #31]
    rfalNfcfSensfRes*     sensfRes;

    rfalNfcvInventoryRes  invRes;
    uint16_t              rcvdLen;
    
    rfalNfcWorker();                                    /* Run RFAL worker periodically */
 8000b68:	f00e fbd0 	bl	800f30c <rfalNfcWorker>
    
    if( (ndefDemoFeature != NDEF_DEMO_READ) && (platformTimerIsExpired(timer)) )
 8000b6c:	4ba8      	ldr	r3, [pc, #672]	; (8000e10 <demoCycle+0x2b8>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00d      	beq.n	8000b90 <demoCycle+0x38>
 8000b74:	4ba7      	ldr	r3, [pc, #668]	; (8000e14 <demoCycle+0x2bc>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 fb1b 	bl	80041b4 <timerIsExpired>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d005      	beq.n	8000b90 <demoCycle+0x38>
    {
        platformLog("Timer expired, back to Read mode...\r\n");
 8000b84:	48a4      	ldr	r0, [pc, #656]	; (8000e18 <demoCycle+0x2c0>)
 8000b86:	f7ff fcaf 	bl	80004e8 <logUsart>
        ndefDemoFeature = NDEF_DEMO_READ;
 8000b8a:	4ba1      	ldr	r3, [pc, #644]	; (8000e10 <demoCycle+0x2b8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
    }
    
    if( ndefDemoFeature != ndefDemoPrevFeature )
 8000b90:	4b9f      	ldr	r3, [pc, #636]	; (8000e10 <demoCycle+0x2b8>)
 8000b92:	781a      	ldrb	r2, [r3, #0]
 8000b94:	4ba1      	ldr	r3, [pc, #644]	; (8000e1c <demoCycle+0x2c4>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d00d      	beq.n	8000bb8 <demoCycle+0x60>
    {
        ndefDemoPrevFeature = ndefDemoFeature;
 8000b9c:	4b9c      	ldr	r3, [pc, #624]	; (8000e10 <demoCycle+0x2b8>)
 8000b9e:	781a      	ldrb	r2, [r3, #0]
 8000ba0:	4b9e      	ldr	r3, [pc, #632]	; (8000e1c <demoCycle+0x2c4>)
 8000ba2:	701a      	strb	r2, [r3, #0]
        platformLog("%s\r\n", ndefDemoFeatureDescription[ndefDemoFeature]);
 8000ba4:	4b9a      	ldr	r3, [pc, #616]	; (8000e10 <demoCycle+0x2b8>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b9d      	ldr	r3, [pc, #628]	; (8000e20 <demoCycle+0x2c8>)
 8000bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	489c      	ldr	r0, [pc, #624]	; (8000e24 <demoCycle+0x2cc>)
 8000bb4:	f7ff fc98 	bl	80004e8 <logUsart>
    }
    
    if( ndefDemoFeature != NDEF_DEMO_READ )
 8000bb8:	4b95      	ldr	r3, [pc, #596]	; (8000e10 <demoCycle+0x2b8>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d025      	beq.n	8000c0c <demoCycle+0xb4>
    {
        if( platformTimerIsExpired(timerLed) )
 8000bc0:	4b99      	ldr	r3, [pc, #612]	; (8000e28 <demoCycle+0x2d0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 faf5 	bl	80041b4 <timerIsExpired>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d014      	beq.n	8000bfa <demoCycle+0xa2>
        {
            timerLed = platformTimerCreate(NDEF_LED_BLINK_DURATION);
 8000bd0:	20fa      	movs	r0, #250	; 0xfa
 8000bd2:	f003 fae1 	bl	8004198 <timerCalculateTimer>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4a93      	ldr	r2, [pc, #588]	; (8000e28 <demoCycle+0x2d0>)
 8000bda:	6013      	str	r3, [r2, #0]
            ledOn = !ledOn;
 8000bdc:	4b93      	ldr	r3, [pc, #588]	; (8000e2c <demoCycle+0x2d4>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	bf14      	ite	ne
 8000be4:	2301      	movne	r3, #1
 8000be6:	2300      	moveq	r3, #0
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	f083 0301 	eor.w	r3, r3, #1
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b8d      	ldr	r3, [pc, #564]	; (8000e2c <demoCycle+0x2d4>)
 8000bf8:	701a      	strb	r2, [r3, #0]
        }
        if( ledOn )
 8000bfa:	4b8c      	ldr	r3, [pc, #560]	; (8000e2c <demoCycle+0x2d4>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <demoCycle+0xb0>
        {
            ledsOn();
 8000c02:	f001 fa13 	bl	800202c <ledsOn>
 8000c06:	e001      	b.n	8000c0c <demoCycle+0xb4>
        }
        else
        {
            ledsOff();
 8000c08:	f001 fa38 	bl	800207c <ledsOff>
        }
    }
    
    checkUserButton();
 8000c0c:	f7ff feea 	bl	80009e4 <checkUserButton>
    
    switch( state )
 8000c10:	4b87      	ldr	r3, [pc, #540]	; (8000e30 <demoCycle+0x2d8>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d002      	beq.n	8000c1e <demoCycle+0xc6>
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d00c      	beq.n	8000c36 <demoCycle+0xde>
            break;

        /*******************************************************************************/
        case DEMO_ST_NOTINIT:
        default:
            break;
 8000c1c:	e23d      	b.n	800109a <demoCycle+0x542>
            ledsOff();
 8000c1e:	f001 fa2d 	bl	800207c <ledsOff>
            rfalNfcDeactivate( false );
 8000c22:	2000      	movs	r0, #0
 8000c24:	f00e fb20 	bl	800f268 <rfalNfcDeactivate>
            rfalNfcDiscover( &discParam );
 8000c28:	4882      	ldr	r0, [pc, #520]	; (8000e34 <demoCycle+0x2dc>)
 8000c2a:	f00e fa91 	bl	800f150 <rfalNfcDiscover>
            state = DEMO_ST_DISCOVERY;
 8000c2e:	4b80      	ldr	r3, [pc, #512]	; (8000e30 <demoCycle+0x2d8>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	701a      	strb	r2, [r3, #0]
            break;
 8000c34:	e231      	b.n	800109a <demoCycle+0x542>
            if( rfalNfcIsDevActivated( rfalNfcGetState() ) )
 8000c36:	f00e fb39 	bl	800f2ac <rfalNfcGetState>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b1d      	cmp	r3, #29
 8000c3e:	f240 822b 	bls.w	8001098 <demoCycle+0x540>
 8000c42:	f00e fb33 	bl	800f2ac <rfalNfcGetState>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b21      	cmp	r3, #33	; 0x21
 8000c4a:	f200 8225 	bhi.w	8001098 <demoCycle+0x540>
                rfalNfcGetActiveDevice( &nfcDevice );
 8000c4e:	487a      	ldr	r0, [pc, #488]	; (8000e38 <demoCycle+0x2e0>)
 8000c50:	f00e fb36 	bl	800f2c0 <rfalNfcGetActiveDevice>
                ledsOff();
 8000c54:	f001 fa12 	bl	800207c <ledsOff>
                platformDelay(50);
 8000c58:	2032      	movs	r0, #50	; 0x32
 8000c5a:	f003 fb2f 	bl	80042bc <HAL_Delay>
                ndefDemoPrevFeature = 0xFF; /* Force the display of the prompt */
 8000c5e:	4b6f      	ldr	r3, [pc, #444]	; (8000e1c <demoCycle+0x2c4>)
 8000c60:	22ff      	movs	r2, #255	; 0xff
 8000c62:	701a      	strb	r2, [r3, #0]
                switch( nfcDevice->type )
 8000c64:	4b74      	ldr	r3, [pc, #464]	; (8000e38 <demoCycle+0x2e0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b05      	cmp	r3, #5
 8000c6c:	f200 8207 	bhi.w	800107e <demoCycle+0x526>
 8000c70:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <demoCycle+0x120>)
 8000c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c76:	bf00      	nop
 8000c78:	08000c91 	.word	0x08000c91
 8000c7c:	08000dc9 	.word	0x08000dc9
 8000c80:	08000ebd 	.word	0x08000ebd
 8000c84:	08000f8b 	.word	0x08000f8b
 8000c88:	08001027 	.word	0x08001027
 8000c8c:	08001051 	.word	0x08001051
                        platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2101      	movs	r1, #1
 8000c94:	4869      	ldr	r0, [pc, #420]	; (8000e3c <demoCycle+0x2e4>)
 8000c96:	f003 fde8 	bl	800486a <HAL_GPIO_WritePin>
                        switch( nfcDevice->dev.nfca.type )
 8000c9a:	4b67      	ldr	r3, [pc, #412]	; (8000e38 <demoCycle+0x2e0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	785b      	ldrb	r3, [r3, #1]
 8000ca0:	2b60      	cmp	r3, #96	; 0x60
 8000ca2:	d033      	beq.n	8000d0c <demoCycle+0x1b4>
 8000ca4:	2b60      	cmp	r3, #96	; 0x60
 8000ca6:	dc43      	bgt.n	8000d30 <demoCycle+0x1d8>
 8000ca8:	2b40      	cmp	r3, #64	; 0x40
 8000caa:	d02f      	beq.n	8000d0c <demoCycle+0x1b4>
 8000cac:	2b40      	cmp	r3, #64	; 0x40
 8000cae:	dc3f      	bgt.n	8000d30 <demoCycle+0x1d8>
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d002      	beq.n	8000cba <demoCycle+0x162>
 8000cb4:	2b20      	cmp	r3, #32
 8000cb6:	d012      	beq.n	8000cde <demoCycle+0x186>
 8000cb8:	e03a      	b.n	8000d30 <demoCycle+0x1d8>
                                platformLog("ISO14443A/Topaz (NFC-A T1T) TAG found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000cba:	4b5f      	ldr	r3, [pc, #380]	; (8000e38 <demoCycle+0x2e0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	699a      	ldr	r2, [r3, #24]
 8000cc0:	4b5d      	ldr	r3, [pc, #372]	; (8000e38 <demoCycle+0x2e0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	7f1b      	ldrb	r3, [r3, #28]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4610      	mov	r0, r2
 8000cca:	f7ff fc35 	bl	8000538 <hex2Str>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	485b      	ldr	r0, [pc, #364]	; (8000e40 <demoCycle+0x2e8>)
 8000cd4:	f7ff fc08 	bl	80004e8 <logUsart>
                                rfalNfcaPollerSleep();
 8000cd8:	f012 fd7a 	bl	80137d0 <rfalNfcaPollerSleep>
                                break;
 8000cdc:	e03f      	b.n	8000d5e <demoCycle+0x206>
                                platformLog("NFCA Passive ISO-DEP device found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000cde:	4b56      	ldr	r3, [pc, #344]	; (8000e38 <demoCycle+0x2e0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	699a      	ldr	r2, [r3, #24]
 8000ce4:	4b54      	ldr	r3, [pc, #336]	; (8000e38 <demoCycle+0x2e0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	7f1b      	ldrb	r3, [r3, #28]
 8000cea:	4619      	mov	r1, r3
 8000cec:	4610      	mov	r0, r2
 8000cee:	f7ff fc23 	bl	8000538 <hex2Str>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4853      	ldr	r0, [pc, #332]	; (8000e44 <demoCycle+0x2ec>)
 8000cf8:	f7ff fbf6 	bl	80004e8 <logUsart>
                                demoNdef(nfcDevice);
 8000cfc:	4b4e      	ldr	r3, [pc, #312]	; (8000e38 <demoCycle+0x2e0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 faf3 	bl	80012ec <demoNdef>
                                rfalIsoDepDeselect(); 
 8000d06:	f00d fad1 	bl	800e2ac <rfalIsoDepDeselect>
                                break;
 8000d0a:	e028      	b.n	8000d5e <demoCycle+0x206>
                                platformLog("NFCA Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000d0c:	4b4a      	ldr	r3, [pc, #296]	; (8000e38 <demoCycle+0x2e0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	699a      	ldr	r2, [r3, #24]
 8000d12:	4b49      	ldr	r3, [pc, #292]	; (8000e38 <demoCycle+0x2e0>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	7f1b      	ldrb	r3, [r3, #28]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4610      	mov	r0, r2
 8000d1c:	f7ff fc0c 	bl	8000538 <hex2Str>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4619      	mov	r1, r3
 8000d24:	4848      	ldr	r0, [pc, #288]	; (8000e48 <demoCycle+0x2f0>)
 8000d26:	f7ff fbdf 	bl	80004e8 <logUsart>
                                demoP2P();
 8000d2a:	f000 f9cf 	bl	80010cc <demoP2P>
                                break;
 8000d2e:	e016      	b.n	8000d5e <demoCycle+0x206>
                                platformLog("ISO14443A/NFC-A card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000d30:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <demoCycle+0x2e0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	699a      	ldr	r2, [r3, #24]
 8000d36:	4b40      	ldr	r3, [pc, #256]	; (8000e38 <demoCycle+0x2e0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	7f1b      	ldrb	r3, [r3, #28]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4610      	mov	r0, r2
 8000d40:	f7ff fbfa 	bl	8000538 <hex2Str>
 8000d44:	4603      	mov	r3, r0
 8000d46:	4619      	mov	r1, r3
 8000d48:	4840      	ldr	r0, [pc, #256]	; (8000e4c <demoCycle+0x2f4>)
 8000d4a:	f7ff fbcd 	bl	80004e8 <logUsart>
                                demoNdef(nfcDevice);
 8000d4e:	4b3a      	ldr	r3, [pc, #232]	; (8000e38 <demoCycle+0x2e0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 faca 	bl	80012ec <demoNdef>
                                rfalNfcaPollerSleep();
 8000d58:	f012 fd3a 	bl	80137d0 <rfalNfcaPollerSleep>
                                break;
 8000d5c:	bf00      	nop
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8000d5e:	483c      	ldr	r0, [pc, #240]	; (8000e50 <demoCycle+0x2f8>)
 8000d60:	f7ff fbc2 	bl	80004e8 <logUsart>
                        rfalNfcaPollerInitialize();
 8000d64:	f012 f96c 	bl	8013040 <rfalNfcaPollerInitialize>
                        while( rfalNfcaPollerCheckPresence(RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes) == ERR_NONE )
 8000d68:	e024      	b.n	8000db4 <demoCycle+0x25c>
                            if( ((nfcDevice->dev.nfca.type == RFAL_NFCA_T1T) && (!rfalNfcaIsSensResT1T(&sensRes ))) ||
 8000d6a:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <demoCycle+0x2e0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	785b      	ldrb	r3, [r3, #1]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d106      	bne.n	8000d82 <demoCycle+0x22a>
 8000d74:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000d78:	f003 030f 	and.w	r3, r3, #15
 8000d7c:	2b0c      	cmp	r3, #12
 8000d7e:	f040 8180 	bne.w	8001082 <demoCycle+0x52a>
                                ((nfcDevice->dev.nfca.type != RFAL_NFCA_T1T) && (rfalNfcaPollerSelect(nfcDevice->dev.nfca.nfcId1, nfcDevice->dev.nfca.nfcId1Len, &selRes) != ERR_NONE)) )
 8000d82:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <demoCycle+0x2e0>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	785b      	ldrb	r3, [r3, #1]
                            if( ((nfcDevice->dev.nfca.type == RFAL_NFCA_T1T) && (!rfalNfcaIsSensResT1T(&sensRes ))) ||
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d00e      	beq.n	8000daa <demoCycle+0x252>
                                ((nfcDevice->dev.nfca.type != RFAL_NFCA_T1T) && (rfalNfcaPollerSelect(nfcDevice->dev.nfca.nfcId1, nfcDevice->dev.nfca.nfcId1Len, &selRes) != ERR_NONE)) )
 8000d8c:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <demoCycle+0x2e0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	1d98      	adds	r0, r3, #6
 8000d92:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <demoCycle+0x2e0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	795b      	ldrb	r3, [r3, #5]
 8000d98:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f012 fca5 	bl	80136ec <rfalNfcaPollerSelect>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f040 816c 	bne.w	8001082 <demoCycle+0x52a>
                            rfalNfcaPollerSleep();
 8000daa:	f012 fd11 	bl	80137d0 <rfalNfcaPollerSleep>
                            platformDelay(130);
 8000dae:	2082      	movs	r0, #130	; 0x82
 8000db0:	f003 fa84 	bl	80042bc <HAL_Delay>
                        while( rfalNfcaPollerCheckPresence(RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes) == ERR_NONE )
 8000db4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000db8:	4619      	mov	r1, r3
 8000dba:	2052      	movs	r0, #82	; 0x52
 8000dbc:	f012 f964 	bl	8013088 <rfalNfcaPollerCheckPresence>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0d1      	beq.n	8000d6a <demoCycle+0x212>
                        break;
 8000dc6:	e15c      	b.n	8001082 <demoCycle+0x52a>
                        platformLog("ISO14443B/NFC-B card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <demoCycle+0x2e0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	699a      	ldr	r2, [r3, #24]
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <demoCycle+0x2e0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	7f1b      	ldrb	r3, [r3, #28]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4610      	mov	r0, r2
 8000dd8:	f7ff fbae 	bl	8000538 <hex2Str>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4619      	mov	r1, r3
 8000de0:	481c      	ldr	r0, [pc, #112]	; (8000e54 <demoCycle+0x2fc>)
 8000de2:	f7ff fb81 	bl	80004e8 <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2110      	movs	r1, #16
 8000dea:	481b      	ldr	r0, [pc, #108]	; (8000e58 <demoCycle+0x300>)
 8000dec:	f003 fd3d 	bl	800486a <HAL_GPIO_WritePin>
                        if( rfalNfcbIsIsoDepSupported( &nfcDevice->dev.nfcb ) )
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <demoCycle+0x2e0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	7b1b      	ldrb	r3, [r3, #12]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d02e      	beq.n	8000e5c <demoCycle+0x304>
                            demoNdef(nfcDevice);
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <demoCycle+0x2e0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fa72 	bl	80012ec <demoNdef>
                            rfalIsoDepDeselect();
 8000e08:	f00d fa50 	bl	800e2ac <rfalIsoDepDeselect>
 8000e0c:	e02c      	b.n	8000e68 <demoCycle+0x310>
 8000e0e:	bf00      	nop
 8000e10:	20000f98 	.word	0x20000f98
 8000e14:	20002f9c 	.word	0x20002f9c
 8000e18:	08019734 	.word	0x08019734
 8000e1c:	20000097 	.word	0x20000097
 8000e20:	20000054 	.word	0x20000054
 8000e24:	0801972c 	.word	0x0801972c
 8000e28:	20002fa0 	.word	0x20002fa0
 8000e2c:	20002fa4 	.word	0x20002fa4
 8000e30:	200005c0 	.word	0x200005c0
 8000e34:	2000053c 	.word	0x2000053c
 8000e38:	20002fa8 	.word	0x20002fa8
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	0801975c 	.word	0x0801975c
 8000e44:	08019790 	.word	0x08019790
 8000e48:	080197c0 	.word	0x080197c0
 8000e4c:	080197ec 	.word	0x080197ec
 8000e50:	08019814 	.word	0x08019814
 8000e54:	08019850 	.word	0x08019850
 8000e58:	40020000 	.word	0x40020000
                            rfalNfcbPollerSleep(nfcDevice->dev.nfcb.sensbRes.nfcid0);
 8000e5c:	4b91      	ldr	r3, [pc, #580]	; (80010a4 <demoCycle+0x54c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	3303      	adds	r3, #3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f012 fd9a 	bl	801399c <rfalNfcbPollerSleep>
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8000e68:	488f      	ldr	r0, [pc, #572]	; (80010a8 <demoCycle+0x550>)
 8000e6a:	f7ff fb3d 	bl	80004e8 <logUsart>
                        rfalNfcbPollerInitialize();
 8000e6e:	f012 fd03 	bl	8013878 <rfalNfcbPollerInitialize>
                        while( rfalNfcbPollerCheckPresence(RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen) == ERR_NONE )
 8000e72:	e015      	b.n	8000ea0 <demoCycle+0x348>
                            if( ST_BYTECMP(sensbRes.nfcid0, nfcDevice->dev.nfcb.sensbRes.nfcid0, RFAL_NFCB_NFCID0_LEN) != 0 )
 8000e74:	4b8b      	ldr	r3, [pc, #556]	; (80010a4 <demoCycle+0x54c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	1cd9      	adds	r1, r3, #3
 8000e7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e7e:	3301      	adds	r3, #1
 8000e80:	2204      	movs	r2, #4
 8000e82:	4618      	mov	r0, r3
 8000e84:	f017 ff34 	bl	8018cf0 <memcmp>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d114      	bne.n	8000eb8 <demoCycle+0x360>
                            rfalNfcbPollerSleep(nfcDevice->dev.nfcb.sensbRes.nfcid0);
 8000e8e:	4b85      	ldr	r3, [pc, #532]	; (80010a4 <demoCycle+0x54c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3303      	adds	r3, #3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f012 fd81 	bl	801399c <rfalNfcbPollerSleep>
                            platformDelay(130);
 8000e9a:	2082      	movs	r0, #130	; 0x82
 8000e9c:	f003 fa0e 	bl	80042bc <HAL_Delay>
                        while( rfalNfcbPollerCheckPresence(RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen) == ERR_NONE )
 8000ea0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000ea4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2008      	movs	r0, #8
 8000eac:	f012 fd10 	bl	80138d0 <rfalNfcbPollerCheckPresence>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0de      	beq.n	8000e74 <demoCycle+0x31c>
                        break;
 8000eb6:	e0e5      	b.n	8001084 <demoCycle+0x52c>
                                break;
 8000eb8:	bf00      	nop
                        break;
 8000eba:	e0e3      	b.n	8001084 <demoCycle+0x52c>
                        if( rfalNfcfIsNfcDepSupported( &nfcDevice->dev.nfcf ) )
 8000ebc:	4b79      	ldr	r3, [pc, #484]	; (80010a4 <demoCycle+0x54c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	78db      	ldrb	r3, [r3, #3]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d116      	bne.n	8000ef4 <demoCycle+0x39c>
 8000ec6:	4b77      	ldr	r3, [pc, #476]	; (80010a4 <demoCycle+0x54c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	791b      	ldrb	r3, [r3, #4]
 8000ecc:	2bfe      	cmp	r3, #254	; 0xfe
 8000ece:	d111      	bne.n	8000ef4 <demoCycle+0x39c>
                            platformLog("NFCF Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000ed0:	4b74      	ldr	r3, [pc, #464]	; (80010a4 <demoCycle+0x54c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	699a      	ldr	r2, [r3, #24]
 8000ed6:	4b73      	ldr	r3, [pc, #460]	; (80010a4 <demoCycle+0x54c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	7f1b      	ldrb	r3, [r3, #28]
 8000edc:	4619      	mov	r1, r3
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f7ff fb2a 	bl	8000538 <hex2Str>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4870      	ldr	r0, [pc, #448]	; (80010ac <demoCycle+0x554>)
 8000eea:	f7ff fafd 	bl	80004e8 <logUsart>
                            demoP2P();
 8000eee:	f000 f8ed 	bl	80010cc <demoP2P>
 8000ef2:	e013      	b.n	8000f1c <demoCycle+0x3c4>
                            platformLog("Felica/NFC-F card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 8000ef4:	4b6b      	ldr	r3, [pc, #428]	; (80010a4 <demoCycle+0x54c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	699a      	ldr	r2, [r3, #24]
 8000efa:	4b6a      	ldr	r3, [pc, #424]	; (80010a4 <demoCycle+0x54c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	7f1b      	ldrb	r3, [r3, #28]
 8000f00:	4619      	mov	r1, r3
 8000f02:	4610      	mov	r0, r2
 8000f04:	f7ff fb18 	bl	8000538 <hex2Str>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4868      	ldr	r0, [pc, #416]	; (80010b0 <demoCycle+0x558>)
 8000f0e:	f7ff faeb 	bl	80004e8 <logUsart>
                            demoNdef(nfcDevice);
 8000f12:	4b64      	ldr	r3, [pc, #400]	; (80010a4 <demoCycle+0x54c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f9e8 	bl	80012ec <demoNdef>
                        platformLedOn(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4864      	ldr	r0, [pc, #400]	; (80010b4 <demoCycle+0x55c>)
 8000f22:	f003 fca2 	bl	800486a <HAL_GPIO_WritePin>
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8000f26:	4860      	ldr	r0, [pc, #384]	; (80010a8 <demoCycle+0x550>)
 8000f28:	f7ff fade 	bl	80004e8 <logUsart>
                        devCnt = 1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        rfalNfcfPollerInitialize( RFAL_BR_212 );
 8000f32:	2001      	movs	r0, #1
 8000f34:	f013 f874 	bl	8014020 <rfalNfcfPollerInitialize>
                        while (rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, cardList, &devCnt, &collisions ) == ERR_NONE)
 8000f38:	e012      	b.n	8000f60 <demoCycle+0x408>
                            sensfRes = (rfalNfcfSensfRes*)&((uint8_t *)cardList)[1];
 8000f3a:	f107 0320 	add.w	r3, r7, #32
 8000f3e:	3301      	adds	r3, #1
 8000f40:	653b      	str	r3, [r7, #80]	; 0x50
                            if( ST_BYTECMP(sensfRes->NFCID2, nfcDevice->dev.nfcf.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN) != 0 )
 8000f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f44:	1c58      	adds	r0, r3, #1
 8000f46:	4b57      	ldr	r3, [pc, #348]	; (80010a4 <demoCycle+0x54c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3303      	adds	r3, #3
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f017 fece 	bl	8018cf0 <memcmp>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d115      	bne.n	8000f86 <demoCycle+0x42e>
                            platformDelay(130);
 8000f5a:	2082      	movs	r0, #130	; 0x82
 8000f5c:	f003 f9ae 	bl	80042bc <HAL_Delay>
                        while (rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, cardList, &devCnt, &collisions ) == ERR_NONE)
 8000f60:	f107 0220 	add.w	r2, r7, #32
 8000f64:	f107 031f 	add.w	r3, r7, #31
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	4613      	mov	r3, r2
 8000f72:	2200      	movs	r2, #0
 8000f74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f013 f881 	bl	8014080 <rfalNfcfPollerPoll>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0da      	beq.n	8000f3a <demoCycle+0x3e2>
                        break;
 8000f84:	e07e      	b.n	8001084 <demoCycle+0x52c>
                                break;
 8000f86:	bf00      	nop
                        break;
 8000f88:	e07c      	b.n	8001084 <demoCycle+0x52c>
                            ST_MEMCPY( devUID, nfcDevice->nfcid, nfcDevice->nfcidLen );   /* Copy the UID into local var */
 8000f8a:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <demoCycle+0x54c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6999      	ldr	r1, [r3, #24]
 8000f90:	4b44      	ldr	r3, [pc, #272]	; (80010a4 <demoCycle+0x54c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	7f1b      	ldrb	r3, [r3, #28]
 8000f96:	461a      	mov	r2, r3
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f017 feb8 	bl	8018d10 <memcpy>
                            REVERSE_BYTES( devUID, RFAL_NFCV_UID_LEN );                 /* Reverse the UID for display purposes */
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	3307      	adds	r3, #7
 8000fa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000faa:	e00f      	b.n	8000fcc <demoCycle+0x474>
 8000fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000fba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000fbc:	7812      	ldrb	r2, [r2, #0]
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fc2:	1e5a      	subs	r2, r3, #1
 8000fc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8000fc6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d3eb      	bcc.n	8000fac <demoCycle+0x454>
                            platformLog(" test ISO15693/NFC-V card found. UID: %s\r\n", hex2Str(devUID, RFAL_NFCV_UID_LEN));
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff faad 	bl	8000538 <hex2Str>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4835      	ldr	r0, [pc, #212]	; (80010b8 <demoCycle+0x560>)
 8000fe4:	f7ff fa80 	bl	80004e8 <logUsart>
                            demoNdef(nfcDevice);
 8000fe8:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <demoCycle+0x54c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f97d 	bl	80012ec <demoNdef>
                            platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8000ff2:	482d      	ldr	r0, [pc, #180]	; (80010a8 <demoCycle+0x550>)
 8000ff4:	f7ff fa78 	bl	80004e8 <logUsart>
                            rfalNfcvPollerInitialize();
 8000ff8:	f013 fb8c 	bl	8014714 <rfalNfcvPollerInitialize>
                            while (rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, RFAL_NFCV_UID_LEN * 8U, nfcDevice->dev.nfcv.InvRes.UID, &invRes, &rcvdLen) == ERR_NONE)
 8000ffc:	e002      	b.n	8001004 <demoCycle+0x4ac>
                                platformDelay(130);
 8000ffe:	2082      	movs	r0, #130	; 0x82
 8001000:	f003 f95c 	bl	80042bc <HAL_Delay>
                            while (rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, RFAL_NFCV_UID_LEN * 8U, nfcDevice->dev.nfcv.InvRes.UID, &invRes, &rcvdLen) == ERR_NONE)
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <demoCycle+0x54c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	1cda      	adds	r2, r3, #3
 800100a:	f107 0110 	add.w	r1, r7, #16
 800100e:	f107 030e 	add.w	r3, r7, #14
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	460b      	mov	r3, r1
 8001016:	2140      	movs	r1, #64	; 0x40
 8001018:	2020      	movs	r0, #32
 800101a:	f013 fbc0 	bl	801479e <rfalNfcvPollerInventory>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0ec      	beq.n	8000ffe <demoCycle+0x4a6>
                        break;
 8001024:	e02e      	b.n	8001084 <demoCycle+0x52c>
                        platformLog("ST25TB card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <demoCycle+0x54c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	699a      	ldr	r2, [r3, #24]
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <demoCycle+0x54c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	7f1b      	ldrb	r3, [r3, #28]
 8001032:	4619      	mov	r1, r3
 8001034:	4610      	mov	r0, r2
 8001036:	f7ff fa7f 	bl	8000538 <hex2Str>
 800103a:	4603      	mov	r3, r0
 800103c:	4619      	mov	r1, r3
 800103e:	481f      	ldr	r0, [pc, #124]	; (80010bc <demoCycle+0x564>)
 8001040:	f7ff fa52 	bl	80004e8 <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8001044:	2201      	movs	r2, #1
 8001046:	2110      	movs	r1, #16
 8001048:	481a      	ldr	r0, [pc, #104]	; (80010b4 <demoCycle+0x55c>)
 800104a:	f003 fc0e 	bl	800486a <HAL_GPIO_WritePin>
                        break;
 800104e:	e019      	b.n	8001084 <demoCycle+0x52c>
                        platformLog("NFC Active P2P device found. NFCID3: %s\r\n", hex2Str(nfcDevice->nfcid, nfcDevice->nfcidLen));
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <demoCycle+0x54c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	699a      	ldr	r2, [r3, #24]
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <demoCycle+0x54c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	7f1b      	ldrb	r3, [r3, #28]
 800105c:	4619      	mov	r1, r3
 800105e:	4610      	mov	r0, r2
 8001060:	f7ff fa6a 	bl	8000538 <hex2Str>
 8001064:	4603      	mov	r3, r0
 8001066:	4619      	mov	r1, r3
 8001068:	4815      	ldr	r0, [pc, #84]	; (80010c0 <demoCycle+0x568>)
 800106a:	f7ff fa3d 	bl	80004e8 <logUsart>
                        platformLedOn(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 800106e:	2201      	movs	r2, #1
 8001070:	2120      	movs	r1, #32
 8001072:	4814      	ldr	r0, [pc, #80]	; (80010c4 <demoCycle+0x56c>)
 8001074:	f003 fbf9 	bl	800486a <HAL_GPIO_WritePin>
                        demoP2P();
 8001078:	f000 f828 	bl	80010cc <demoP2P>
                        break;
 800107c:	e002      	b.n	8001084 <demoCycle+0x52c>
                        break;
 800107e:	bf00      	nop
 8001080:	e000      	b.n	8001084 <demoCycle+0x52c>
                        break;
 8001082:	bf00      	nop
                rfalNfcDeactivate( false );
 8001084:	2000      	movs	r0, #0
 8001086:	f00e f8ef 	bl	800f268 <rfalNfcDeactivate>
                platformDelay( 500 );
 800108a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800108e:	f003 f915 	bl	80042bc <HAL_Delay>
                state = DEMO_ST_START_DISCOVERY;
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <demoCycle+0x570>)
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
            break;
 8001098:	bf00      	nop
    }
}
 800109a:	bf00      	nop
 800109c:	3760      	adds	r7, #96	; 0x60
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20002fa8 	.word	0x20002fa8
 80010a8:	08019814 	.word	0x08019814
 80010ac:	08019878 	.word	0x08019878
 80010b0:	080198a4 	.word	0x080198a4
 80010b4:	40020000 	.word	0x40020000
 80010b8:	080198c8 	.word	0x080198c8
 80010bc:	080198f4 	.word	0x080198f4
 80010c0:	08019914 	.word	0x08019914
 80010c4:	40020400 	.word	0x40020400
 80010c8:	200005c0 	.word	0x200005c0

080010cc <demoP2P>:
 * 
 * 
 *****************************************************************************
 */
void demoP2P( void )
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b0d5      	sub	sp, #340	; 0x154
 80010d0:	af02      	add	r7, sp, #8
    ndefBuffer  bufPayload;
    ndefMessage message;
    ndefRecord  record;
    ndefType    uri;

    platformLog(" Initalize device .. ");
 80010d2:	4865      	ldr	r0, [pc, #404]	; (8001268 <demoP2P+0x19c>)
 80010d4:	f7ff fa08 	bl	80004e8 <logUsart>
    err = demoTransceiveBlocking( ndefInit, sizeof(ndefInit), &rxData, &rxLen, RFAL_FWT_NONE);
 80010d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010dc:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	9100      	str	r1, [sp, #0]
 80010e6:	211a      	movs	r1, #26
 80010e8:	4860      	ldr	r0, [pc, #384]	; (800126c <demoP2P+0x1a0>)
 80010ea:	f000 f8db 	bl	80012a4 <demoTransceiveBlocking>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if( err != ERR_NONE )
 80010f4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <demoP2P+0x38>
    {
        platformLog("failed.");
 80010fc:	485c      	ldr	r0, [pc, #368]	; (8001270 <demoP2P+0x1a4>)
 80010fe:	f7ff f9f3 	bl	80004e8 <logUsart>
        return;
 8001102:	e0ac      	b.n	800125e <demoP2P+0x192>
    }
    platformLog("succeeded.\r\n");
 8001104:	485b      	ldr	r0, [pc, #364]	; (8001274 <demoP2P+0x1a8>)
 8001106:	f7ff f9ef 	bl	80004e8 <logUsart>
    
    err  = ndefRtdUri(&uri, NDEF_URI_PREFIX_HTTP_WWW, &bufURL);
 800110a:	463b      	mov	r3, r7
 800110c:	4a5a      	ldr	r2, [pc, #360]	; (8001278 <demoP2P+0x1ac>)
 800110e:	2101      	movs	r1, #1
 8001110:	4618      	mov	r0, r3
 8001112:	f007 fa85 	bl	8008620 <ndefRtdUri>
 8001116:	4603      	mov	r3, r0
 8001118:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    err |= ndefRtdUriToRecord(&uri, &record);
 800111c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001120:	463b      	mov	r3, r7
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f007 fb69 	bl	80087fc <ndefRtdUriToRecord>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8001132:	4313      	orrs	r3, r2
 8001134:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    err |= ndefMessageInit(&message);
 8001138:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800113c:	4618      	mov	r0, r3
 800113e:	f004 feff 	bl	8005f40 <ndefMessageInit>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800114a:	4313      	orrs	r3, r2
 800114c:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    err |= ndefMessageAppend(&message, &record);  /* To get MB and ME bits set */
 8001150:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001154:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f004 ff3e 	bl	8005fdc <ndefMessageAppend>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8001168:	4313      	orrs	r3, r2
 800116a:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    /* Build the SNEP buffer made of the prefix, the length byte and the record */
    ST_MEMCPY(ndefUriBuffer, ndefSnepPrefix, sizeof(ndefSnepPrefix));
 800116e:	4b43      	ldr	r3, [pc, #268]	; (800127c <demoP2P+0x1b0>)
 8001170:	4a43      	ldr	r2, [pc, #268]	; (8001280 <demoP2P+0x1b4>)
 8001172:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001176:	e883 0003 	stmia.w	r3, {r0, r1}

    /* Skip 1 byte for length byte */
    bufPayload.buffer = ndefUriBuffer + sizeof(ndefSnepPrefix) + 1;
 800117a:	4b42      	ldr	r3, [pc, #264]	; (8001284 <demoP2P+0x1b8>)
 800117c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    bufPayload.length = sizeof(ndefUriBuffer) - sizeof(ndefSnepPrefix);
 8001180:	23f7      	movs	r3, #247	; 0xf7
 8001182:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    err |= ndefMessageEncode(&message, &bufPayload);
 8001186:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800118a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f004 ffd1 	bl	8006138 <ndefMessageEncode>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800119e:	4313      	orrs	r3, r2
 80011a0:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    ndefUriBuffer[sizeof(ndefSnepPrefix)] = bufPayload.length;
 80011a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b34      	ldr	r3, [pc, #208]	; (800127c <demoP2P+0x1b0>)
 80011ac:	721a      	strb	r2, [r3, #8]

    bufPayload.buffer = ndefUriBuffer;
 80011ae:	4b33      	ldr	r3, [pc, #204]	; (800127c <demoP2P+0x1b0>)
 80011b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    bufPayload.length = sizeof(ndefSnepPrefix) + 1 + bufPayload.length;
 80011b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011b8:	3309      	adds	r3, #9
 80011ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    if( err != ERR_NONE )
 80011be:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <demoP2P+0x108>
    {
        platformLog("NDEF message creation failed\r\n", err);
 80011c6:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80011ca:	4619      	mov	r1, r3
 80011cc:	482e      	ldr	r0, [pc, #184]	; (8001288 <demoP2P+0x1bc>)
 80011ce:	f7ff f98b 	bl	80004e8 <logUsart>
        return;
 80011d2:	e044      	b.n	800125e <demoP2P+0x192>
    }

    ndefBufferDump("URL converted to SNEP:\r\n", (ndefConstBuffer*)&bufPayload, true);
 80011d4:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80011d8:	2201      	movs	r2, #1
 80011da:	4619      	mov	r1, r3
 80011dc:	482b      	ldr	r0, [pc, #172]	; (800128c <demoP2P+0x1c0>)
 80011de:	f001 fc57 	bl	8002a90 <ndefBufferDump>

    platformLog(" Push NDEF Uri: www.ST.com .. ");
 80011e2:	482b      	ldr	r0, [pc, #172]	; (8001290 <demoP2P+0x1c4>)
 80011e4:	f7ff f980 	bl	80004e8 <logUsart>
    err = demoTransceiveBlocking(bufPayload.buffer, bufPayload.length, &rxData, &rxLen, RFAL_FWT_NONE);
 80011e8:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80011ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011f0:	b299      	uxth	r1, r3
 80011f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80011f6:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80011fa:	f04f 34ff 	mov.w	r4, #4294967295
 80011fe:	9400      	str	r4, [sp, #0]
 8001200:	f000 f850 	bl	80012a4 <demoTransceiveBlocking>
 8001204:	4603      	mov	r3, r0
 8001206:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if( err != ERR_NONE )
 800120a:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <demoP2P+0x14e>
    {
        platformLog("failed.");
 8001212:	4817      	ldr	r0, [pc, #92]	; (8001270 <demoP2P+0x1a4>)
 8001214:	f7ff f968 	bl	80004e8 <logUsart>
        return;
 8001218:	e021      	b.n	800125e <demoP2P+0x192>
    }
    platformLog("succeeded.\r\n");
 800121a:	4816      	ldr	r0, [pc, #88]	; (8001274 <demoP2P+0x1a8>)
 800121c:	f7ff f964 	bl	80004e8 <logUsart>


    platformLog(" Device present, maintaining connection ");
 8001220:	481c      	ldr	r0, [pc, #112]	; (8001294 <demoP2P+0x1c8>)
 8001222:	f7ff f961 	bl	80004e8 <logUsart>
    while(err == ERR_NONE) 
 8001226:	e013      	b.n	8001250 <demoP2P+0x184>
    {
        err = demoTransceiveBlocking( ndefLLCPSYMM, sizeof(ndefLLCPSYMM), &rxData, &rxLen, RFAL_FWT_NONE);
 8001228:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800122c:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	9100      	str	r1, [sp, #0]
 8001236:	2102      	movs	r1, #2
 8001238:	4817      	ldr	r0, [pc, #92]	; (8001298 <demoP2P+0x1cc>)
 800123a:	f000 f833 	bl	80012a4 <demoTransceiveBlocking>
 800123e:	4603      	mov	r3, r0
 8001240:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
        platformLog(".");
 8001244:	4815      	ldr	r0, [pc, #84]	; (800129c <demoP2P+0x1d0>)
 8001246:	f7ff f94f 	bl	80004e8 <logUsart>
        platformDelay(50);
 800124a:	2032      	movs	r0, #50	; 0x32
 800124c:	f003 f836 	bl	80042bc <HAL_Delay>
    while(err == ERR_NONE) 
 8001250:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0e7      	beq.n	8001228 <demoP2P+0x15c>
    }
    platformLog("\r\n Device removed.\r\n");
 8001258:	4811      	ldr	r0, [pc, #68]	; (80012a0 <demoP2P+0x1d4>)
 800125a:	f7ff f945 	bl	80004e8 <logUsart>
}
 800125e:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8001262:	46bd      	mov	sp, r7
 8001264:	bd90      	pop	{r4, r7, pc}
 8001266:	bf00      	nop
 8001268:	08019940 	.word	0x08019940
 800126c:	20000020 	.word	0x20000020
 8001270:	08019958 	.word	0x08019958
 8001274:	08019960 	.word	0x08019960
 8001278:	2000003c 	.word	0x2000003c
 800127c:	2000043c 	.word	0x2000043c
 8001280:	0801a934 	.word	0x0801a934
 8001284:	20000445 	.word	0x20000445
 8001288:	08019970 	.word	0x08019970
 800128c:	08019990 	.word	0x08019990
 8001290:	080199ac 	.word	0x080199ac
 8001294:	080199cc 	.word	0x080199cc
 8001298:	20000438 	.word	0x20000438
 800129c:	080199f8 	.word	0x080199f8
 80012a0:	080199fc 	.word	0x080199fc

080012a4 <demoTransceiveBlocking>:
 *  \return ERR_NONE      : No error, activation successful
 * 
 *****************************************************************************
 */
ReturnCode demoTransceiveBlocking( uint8_t *txBuf, uint16_t txBufSize, uint8_t **rxData, uint16_t **rcvLen, uint32_t fwt )
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	460b      	mov	r3, r1
 80012b2:	817b      	strh	r3, [r7, #10]
    ReturnCode err;
    
    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 80012b4:	8979      	ldrh	r1, [r7, #10]
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f00e fa08 	bl	800f6d4 <rfalNfcDataExchangeStart>
 80012c4:	4603      	mov	r3, r0
 80012c6:	82fb      	strh	r3, [r7, #22]
    if( err == ERR_NONE )
 80012c8:	8afb      	ldrh	r3, [r7, #22]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d108      	bne.n	80012e0 <demoTransceiveBlocking+0x3c>
    {
        do{
            rfalNfcWorker();
 80012ce:	f00e f81d 	bl	800f30c <rfalNfcWorker>
            err = rfalNfcDataExchangeGetStatus();
 80012d2:	f00e fb19 	bl	800f908 <rfalNfcDataExchangeGetStatus>
 80012d6:	4603      	mov	r3, r0
 80012d8:	82fb      	strh	r3, [r7, #22]
        }
        while( err == ERR_BUSY );
 80012da:	8afb      	ldrh	r3, [r7, #22]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d0f6      	beq.n	80012ce <demoTransceiveBlocking+0x2a>
    }
    return err;
 80012e0:	8afb      	ldrh	r3, [r7, #22]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <demoNdef>:

static void demoNdef(rfalNfcDevice *pNfcDevice)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80012f8:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80012fc:	6018      	str	r0, [r3, #0]


    /*
     * Perform NDEF Context Initialization
     */
    err = ndefPollerContextInitialization(&ndefCtx, pNfcDevice);
 80012fe:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001302:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8001306:	6819      	ldr	r1, [r3, #0]
 8001308:	48b4      	ldr	r0, [pc, #720]	; (80015dc <demoNdef+0x2f0>)
 800130a:	f007 fb47 	bl	800899c <ndefPollerContextInitialization>
 800130e:	4603      	mov	r3, r0
 8001310:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
    if( err != ERR_NONE )
 8001314:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <demoNdef+0x3e>
    {
        platformLog("NDEF NOT DETECTED (ndefPollerContextInitialization returns %d)\r\n", err);
 800131c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001320:	4619      	mov	r1, r3
 8001322:	48af      	ldr	r0, [pc, #700]	; (80015e0 <demoNdef+0x2f4>)
 8001324:	f7ff f8e0 	bl	80004e8 <logUsart>
        return;
 8001328:	e27a      	b.n	8001820 <demoNdef+0x534>
    }
    
    if( verbose & (pNfcDevice->type == RFAL_NFC_LISTEN_TYPE_NFCV) )
 800132a:	4bae      	ldr	r3, [pc, #696]	; (80015e4 <demoNdef+0x2f8>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001334:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b03      	cmp	r3, #3
 800133e:	bf0c      	ite	eq
 8001340:	2301      	moveq	r3, #1
 8001342:	2300      	movne	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	4013      	ands	r3, r2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <demoNdef+0x66>
    {
        ndefDumpSysInfo(&ndefCtx);
 800134c:	48a3      	ldr	r0, [pc, #652]	; (80015dc <demoNdef+0x2f0>)
 800134e:	f000 fc25 	bl	8001b9c <ndefDumpSysInfo>
    }

    /*
     * Perform NDEF Detect procedure
     */
    err = ndefPollerNdefDetect(&ndefCtx, &info);
 8001352:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001356:	4619      	mov	r1, r3
 8001358:	48a0      	ldr	r0, [pc, #640]	; (80015dc <demoNdef+0x2f0>)
 800135a:	f007 fb4d 	bl	80089f8 <ndefPollerNdefDetect>
 800135e:	4603      	mov	r3, r0
 8001360:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
    if( err != ERR_NONE )
 8001364:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00a      	beq.n	8001382 <demoNdef+0x96>
    {
        platformLog("NDEF NOT DETECTED (ndefPollerNdefDetect returns %d)\r\n", err);
 800136c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001370:	4619      	mov	r1, r3
 8001372:	489d      	ldr	r0, [pc, #628]	; (80015e8 <demoNdef+0x2fc>)
 8001374:	f7ff f8b8 	bl	80004e8 <logUsart>
        if( ndefDemoFeature != NDEF_DEMO_FORMAT_TAG)
 8001378:	4b9c      	ldr	r3, [pc, #624]	; (80015ec <demoNdef+0x300>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d01b      	beq.n	80013b8 <demoNdef+0xcc>
        {
            return;
 8001380:	e24e      	b.n	8001820 <demoNdef+0x534>
        }
    }
    else
    {
        platformLog("%s NDEF is detected.\r\n", ndefStates[info.state]);
 8001382:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 8001386:	461a      	mov	r2, r3
 8001388:	4b99      	ldr	r3, [pc, #612]	; (80015f0 <demoNdef+0x304>)
 800138a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138e:	4619      	mov	r1, r3
 8001390:	4898      	ldr	r0, [pc, #608]	; (80015f4 <demoNdef+0x308>)
 8001392:	f7ff f8a9 	bl	80004e8 <logUsart>
        ndefCCDump(&ndefCtx);
 8001396:	4891      	ldr	r0, [pc, #580]	; (80015dc <demoNdef+0x2f0>)
 8001398:	f000 fbae 	bl	8001af8 <ndefCCDump>

        if( verbose )
 800139c:	4b91      	ldr	r3, [pc, #580]	; (80015e4 <demoNdef+0x2f8>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d009      	beq.n	80013b8 <demoNdef+0xcc>
        {
            platformLog("NDEF Len: %d, Offset=%d\r\n", ndefCtx.messageLen, ndefCtx.messageOffset);
 80013a4:	4b8d      	ldr	r3, [pc, #564]	; (80015dc <demoNdef+0x2f0>)
 80013a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013aa:	4a8c      	ldr	r2, [pc, #560]	; (80015dc <demoNdef+0x2f0>)
 80013ac:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80013b0:	4619      	mov	r1, r3
 80013b2:	4891      	ldr	r0, [pc, #580]	; (80015f8 <demoNdef+0x30c>)
 80013b4:	f7ff f898 	bl	80004e8 <logUsart>
        }
    }

    switch( ndefDemoFeature )
 80013b8:	4b8c      	ldr	r3, [pc, #560]	; (80015ec <demoNdef+0x300>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	f200 8228 	bhi.w	8001812 <demoNdef+0x526>
 80013c2:	a201      	add	r2, pc, #4	; (adr r2, 80013c8 <demoNdef+0xdc>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	080013d9 	.word	0x080013d9
 80013cc:	0800149d 	.word	0x0800149d
 80013d0:	08001629 	.word	0x08001629
 80013d4:	080017bb 	.word	0x080017bb
    {
        /*
         * Demonstrate how to read the NDEF message from the Tag
         */
        case NDEF_DEMO_READ:
            if( info.state == NDEF_STATE_INITIALIZED )
 80013d8:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 80013dc:	2b01      	cmp	r3, #1
 80013de:	f000 821e 	beq.w	800181e <demoNdef+0x532>
            {
                /* Nothing to read... */
                return;
            }
            err = ndefPollerReadRawMessage(&ndefCtx, rawMessageBuf, sizeof(rawMessageBuf), &rawMessageLen);
 80013e2:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 80013e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ea:	4984      	ldr	r1, [pc, #528]	; (80015fc <demoNdef+0x310>)
 80013ec:	487b      	ldr	r0, [pc, #492]	; (80015dc <demoNdef+0x2f0>)
 80013ee:	f007 fb20 	bl	8008a32 <ndefPollerReadRawMessage>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 80013f8:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <demoNdef+0x122>
            {
                platformLog("NDEF message cannot be read (ndefPollerReadRawMessage returns %d)\r\n", err);
 8001400:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001404:	4619      	mov	r1, r3
 8001406:	487e      	ldr	r0, [pc, #504]	; (8001600 <demoNdef+0x314>)
 8001408:	f7ff f86e 	bl	80004e8 <logUsart>
                return;
 800140c:	e208      	b.n	8001820 <demoNdef+0x534>
            }
            if( verbose )
 800140e:	4b75      	ldr	r3, [pc, #468]	; (80015e4 <demoNdef+0x2f8>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00e      	beq.n	8001434 <demoNdef+0x148>
            {
                bufRawMessage.buffer = rawMessageBuf;
 8001416:	4b79      	ldr	r3, [pc, #484]	; (80015fc <demoNdef+0x310>)
 8001418:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
                bufRawMessage.length = rawMessageLen;
 800141c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8001420:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
                ndefBufferDump(" NDEF Content", (ndefConstBuffer*)&bufRawMessage, verbose);
 8001424:	4b6f      	ldr	r3, [pc, #444]	; (80015e4 <demoNdef+0x2f8>)
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800142c:	4619      	mov	r1, r3
 800142e:	4875      	ldr	r0, [pc, #468]	; (8001604 <demoNdef+0x318>)
 8001430:	f001 fb2e 	bl	8002a90 <ndefBufferDump>
            }
            bufConstRawMessage.buffer = rawMessageBuf;
 8001434:	4b71      	ldr	r3, [pc, #452]	; (80015fc <demoNdef+0x310>)
 8001436:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
            bufConstRawMessage.length = rawMessageLen;
 800143a:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800143e:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
            err = ndefMessageDecode(&bufConstRawMessage, &message);
 8001442:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8001446:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f004 fe1a 	bl	8006086 <ndefMessageDecode>
 8001452:	4603      	mov	r3, r0
 8001454:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001458:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <demoNdef+0x182>
            {
                platformLog("NDEF message cannot be decoded (ndefMessageDecode  returns %d)\r\n", err);
 8001460:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001464:	4619      	mov	r1, r3
 8001466:	4868      	ldr	r0, [pc, #416]	; (8001608 <demoNdef+0x31c>)
 8001468:	f7ff f83e 	bl	80004e8 <logUsart>
                return;
 800146c:	e1d8      	b.n	8001820 <demoNdef+0x534>
            }
            err = ndefMessageDump(&message, verbose);
 800146e:	4b5d      	ldr	r3, [pc, #372]	; (80015e4 <demoNdef+0x2f8>)
 8001470:	781a      	ldrb	r2, [r3, #0]
 8001472:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f000 ff35 	bl	80022e8 <ndefMessageDump>
 800147e:	4603      	mov	r3, r0
 8001480:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001484:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 81c6 	beq.w	800181a <demoNdef+0x52e>
            {
                platformLog("NDEF message cannot be displayed (ndefMessageDump returns %d)\r\n", err);
 800148e:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001492:	4619      	mov	r1, r3
 8001494:	485d      	ldr	r0, [pc, #372]	; (800160c <demoNdef+0x320>)
 8001496:	f7ff f827 	bl	80004e8 <logUsart>
                return;
 800149a:	e1c1      	b.n	8001820 <demoNdef+0x534>
#if NDEF_FEATURE_ALL 
        /*
         * Demonstrate how to encode a text record and write the message to the tag
         */
        case NDEF_DEMO_WRITE_MSG1:
            ndefDemoFeature = NDEF_DEMO_READ; /* returns to READ mode after write */
 800149c:	4b53      	ldr	r3, [pc, #332]	; (80015ec <demoNdef+0x300>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
            err  = ndefMessageInit(&message); /* Initialize message structure */
 80014a2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 fd4a 	bl	8005f40 <ndefMessageInit>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            bufTextLangCode.buffer = ndefTextLangCode;
 80014b2:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80014b6:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80014ba:	4a55      	ldr	r2, [pc, #340]	; (8001610 <demoNdef+0x324>)
 80014bc:	601a      	str	r2, [r3, #0]
            bufTextLangCode.length = strlen((char *)ndefTextLangCode);
 80014be:	4854      	ldr	r0, [pc, #336]	; (8001610 <demoNdef+0x324>)
 80014c0:	f7fe fe5c 	bl	800017c <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80014cc:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80014d0:	711a      	strb	r2, [r3, #4]

            bufTextLangText.buffer = ndefTEXT;
 80014d2:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80014d6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80014da:	4a4e      	ldr	r2, [pc, #312]	; (8001614 <demoNdef+0x328>)
 80014dc:	601a      	str	r2, [r3, #0]
            bufTextLangText.length = strlen((char *)ndefTEXT);
 80014de:	484d      	ldr	r0, [pc, #308]	; (8001614 <demoNdef+0x328>)
 80014e0:	f7fe fe4c 	bl	800017c <strlen>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80014ea:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80014ee:	605a      	str	r2, [r3, #4]

            err |= ndefRtdText(&text, TEXT_ENCODING_UTF8, &bufTextLangCode, &bufTextLangText); /* Initialize Text type structure */
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80014f8:	f507 7011 	add.w	r0, r7, #580	; 0x244
 80014fc:	2100      	movs	r1, #0
 80014fe:	f006 fe91 	bl	8008224 <ndefRtdText>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800150a:	4313      	orrs	r3, r2
 800150c:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdTextToRecord(&text, &record1); /* Encode Text Record */
 8001510:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8001514:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f006 ffa6 	bl	800846c <ndefRtdTextToRecord>
 8001520:	4603      	mov	r3, r0
 8001522:	461a      	mov	r2, r3
 8001524:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001528:	4313      	orrs	r3, r2
 800152a:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefMessageAppend(&message, &record1); /* Append Text record to message */
 800152e:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8001532:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f004 fd4f 	bl	8005fdc <ndefMessageAppend>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001546:	4313      	orrs	r3, r2
 8001548:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 800154c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001550:	2b00      	cmp	r3, #0
 8001552:	d006      	beq.n	8001562 <demoNdef+0x276>
            {
                platformLog("Message creation failed\r\n", err);
 8001554:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001558:	4619      	mov	r1, r3
 800155a:	482f      	ldr	r0, [pc, #188]	; (8001618 <demoNdef+0x32c>)
 800155c:	f7fe ffc4 	bl	80004e8 <logUsart>
                return;
 8001560:	e15e      	b.n	8001820 <demoNdef+0x534>
            }
            err = ndefPollerWriteMessage(&ndefCtx, &message); /* Write message */
 8001562:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001566:	4619      	mov	r1, r3
 8001568:	481c      	ldr	r0, [pc, #112]	; (80015dc <demoNdef+0x2f0>)
 800156a:	f007 fb39 	bl	8008be0 <ndefPollerWriteMessage>
 800156e:	4603      	mov	r3, r0
 8001570:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001574:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <demoNdef+0x29e>
            {
                platformLog("Message cannot be written (ndefPollerWriteMessage return %d)\r\n", err);
 800157c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001580:	4619      	mov	r1, r3
 8001582:	4826      	ldr	r0, [pc, #152]	; (800161c <demoNdef+0x330>)
 8001584:	f7fe ffb0 	bl	80004e8 <logUsart>
                return;
 8001588:	e14a      	b.n	8001820 <demoNdef+0x534>
            }
            platformLog("Wrote 1 record to the Tag\r\n");
 800158a:	4825      	ldr	r0, [pc, #148]	; (8001620 <demoNdef+0x334>)
 800158c:	f7fe ffac 	bl	80004e8 <logUsart>
            if( verbose )
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <demoNdef+0x2f8>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d01d      	beq.n	80015d4 <demoNdef+0x2e8>
            {
                /* Dump raw message */
                bufRawMessage.buffer = rawMessageBuf;
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <demoNdef+0x310>)
 800159a:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
                bufRawMessage.length = sizeof(rawMessageBuf);
 800159e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a2:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
                err = ndefMessageEncode(&message, &bufRawMessage);
 80015a6:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80015aa:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 fdc1 	bl	8006138 <ndefMessageEncode>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
                if( err == ERR_NONE )
 80015bc:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d107      	bne.n	80015d4 <demoNdef+0x2e8>
                {
                    ndefBufferDump("Raw message", (ndefConstBuffer*)&bufRawMessage, verbose);
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <demoNdef+0x2f8>)
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80015cc:	4619      	mov	r1, r3
 80015ce:	4815      	ldr	r0, [pc, #84]	; (8001624 <demoNdef+0x338>)
 80015d0:	f001 fa5e 	bl	8002a90 <ndefBufferDump>
                }
            }
            LedNotificationWriteDone();
 80015d4:	f000 fd0e 	bl	8001ff4 <LedNotificationWriteDone>
            break;
 80015d8:	e120      	b.n	800181c <demoNdef+0x530>
 80015da:	bf00      	nop
 80015dc:	200005c4 	.word	0x200005c4
 80015e0:	08019a14 	.word	0x08019a14
 80015e4:	20000f99 	.word	0x20000f99
 80015e8:	08019a58 	.word	0x08019a58
 80015ec:	20000f98 	.word	0x20000f98
 80015f0:	20000044 	.word	0x20000044
 80015f4:	08019a90 	.word	0x08019a90
 80015f8:	08019aa8 	.word	0x08019aa8
 80015fc:	20000f9c 	.word	0x20000f9c
 8001600:	08019ac4 	.word	0x08019ac4
 8001604:	08019b08 	.word	0x08019b08
 8001608:	08019b18 	.word	0x08019b18
 800160c:	08019b5c 	.word	0x08019b5c
 8001610:	20000084 	.word	0x20000084
 8001614:	2000006c 	.word	0x2000006c
 8001618:	08019b9c 	.word	0x08019b9c
 800161c:	08019bb8 	.word	0x08019bb8
 8001620:	08019bf8 	.word	0x08019bf8
 8001624:	08019c14 	.word	0x08019c14

        /*
         * Demonstrate how to encode a URI record and a AAR record, how to encode the message to a raw buffer and then how to write the raw buffer
         */
        case NDEF_DEMO_WRITE_MSG2:
            ndefDemoFeature = NDEF_DEMO_READ;  /* returns to READ mode after write */
 8001628:	4b7f      	ldr	r3, [pc, #508]	; (8001828 <demoNdef+0x53c>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
            err  = ndefMessageInit(&message);  /* Initialize message structure */
 800162e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fc84 	bl	8005f40 <ndefMessageInit>
 8001638:	4603      	mov	r3, r0
 800163a:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            bufUri.buffer = ndefURI;
 800163e:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001642:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8001646:	4a79      	ldr	r2, [pc, #484]	; (800182c <demoNdef+0x540>)
 8001648:	601a      	str	r2, [r3, #0]
            bufUri.length = strlen((char *)ndefURI);
 800164a:	4878      	ldr	r0, [pc, #480]	; (800182c <demoNdef+0x540>)
 800164c:	f7fe fd96 	bl	800017c <strlen>
 8001650:	4602      	mov	r2, r0
 8001652:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001656:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800165a:	605a      	str	r2, [r3, #4]
            err |= ndefRtdUri(&uri, NDEF_URI_PREFIX_HTTP_WWW, &bufUri); /* Initialize URI type structure */
 800165c:	f107 0214 	add.w	r2, r7, #20
 8001660:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001664:	2101      	movs	r1, #1
 8001666:	4618      	mov	r0, r3
 8001668:	f006 ffda 	bl	8008620 <ndefRtdUri>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001674:	4313      	orrs	r3, r2
 8001676:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdUriToRecord(&uri, &record1); /* Encode URI Record */
 800167a:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 800167e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f007 f8b9 	bl	80087fc <ndefRtdUriToRecord>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001692:	4313      	orrs	r3, r2
 8001694:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            bufAndroidPackName.buffer = ndefAndroidPackName;
 8001698:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800169c:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80016a0:	4a63      	ldr	r2, [pc, #396]	; (8001830 <demoNdef+0x544>)
 80016a2:	601a      	str	r2, [r3, #0]
            bufAndroidPackName.length = sizeof(ndefAndroidPackName) - 1U;
 80016a4:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80016a8:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80016ac:	220e      	movs	r2, #14
 80016ae:	605a      	str	r2, [r3, #4]
            err |= ndefRtdAar(&aar, &bufAndroidPackName); /* Initialize AAR type structure */
 80016b0:	f107 020c 	add.w	r2, r7, #12
 80016b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f007 f8c2 	bl	8008844 <ndefRtdAar>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80016c8:	4313      	orrs	r3, r2
 80016ca:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdAarToRecord(&aar, &record2); /* Encode AAR record */
 80016ce:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80016d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f007 f935 	bl	8008948 <ndefRtdAarToRecord>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80016e6:	4313      	orrs	r3, r2
 80016e8:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            err |= ndefMessageAppend(&message, &record1); /* Append URI to message */
 80016ec:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 80016f0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 fc70 	bl	8005fdc <ndefMessageAppend>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001704:	4313      	orrs	r3, r2
 8001706:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefMessageAppend(&message, &record2); /* Append AAR to message (record #2 is an example of preformatted record) */
 800170a:	f507 7254 	add.w	r2, r7, #848	; 0x350
 800170e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f004 fc61 	bl	8005fdc <ndefMessageAppend>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001722:	4313      	orrs	r3, r2
 8001724:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            bufRawMessage.buffer = rawMessageBuf;
 8001728:	4b42      	ldr	r3, [pc, #264]	; (8001834 <demoNdef+0x548>)
 800172a:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
            bufRawMessage.length = sizeof(rawMessageBuf);
 800172e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001732:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
            err |= ndefMessageEncode(&message, &bufRawMessage); /* Encode the message to the raw buffer */
 8001736:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800173a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f004 fcf9 	bl	8006138 <ndefMessageEncode>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800174e:	4313      	orrs	r3, r2
 8001750:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001754:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <demoNdef+0x47e>
            {
                platformLog("Raw message creation failed\r\n", err);
 800175c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001760:	4619      	mov	r1, r3
 8001762:	4835      	ldr	r0, [pc, #212]	; (8001838 <demoNdef+0x54c>)
 8001764:	f7fe fec0 	bl	80004e8 <logUsart>
                return;
 8001768:	e05a      	b.n	8001820 <demoNdef+0x534>
            }
            err = ndefPollerWriteRawMessage(&ndefCtx, bufRawMessage.buffer, bufRawMessage.length);
 800176a:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800176e:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 8001772:	4619      	mov	r1, r3
 8001774:	4831      	ldr	r0, [pc, #196]	; (800183c <demoNdef+0x550>)
 8001776:	f007 f97d 	bl	8008a74 <ndefPollerWriteRawMessage>
 800177a:	4603      	mov	r3, r0
 800177c:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001780:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <demoNdef+0x4aa>
            {
                platformLog("Message cannot be written (ndefPollerWriteRawMessage return %d)\r\n", err);
 8001788:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800178c:	4619      	mov	r1, r3
 800178e:	482c      	ldr	r0, [pc, #176]	; (8001840 <demoNdef+0x554>)
 8001790:	f7fe feaa 	bl	80004e8 <logUsart>
                return;
 8001794:	e044      	b.n	8001820 <demoNdef+0x534>
            }
            platformLog("Wrote 2 records to the Tag\r\n");
 8001796:	482b      	ldr	r0, [pc, #172]	; (8001844 <demoNdef+0x558>)
 8001798:	f7fe fea6 	bl	80004e8 <logUsart>
            if( verbose )
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <demoNdef+0x55c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d007      	beq.n	80017b4 <demoNdef+0x4c8>
            {
                /* Dump raw message */
                ndefBufferDump("Raw message", (ndefConstBuffer*)&bufRawMessage, verbose);
 80017a4:	4b28      	ldr	r3, [pc, #160]	; (8001848 <demoNdef+0x55c>)
 80017a6:	781a      	ldrb	r2, [r3, #0]
 80017a8:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80017ac:	4619      	mov	r1, r3
 80017ae:	4827      	ldr	r0, [pc, #156]	; (800184c <demoNdef+0x560>)
 80017b0:	f001 f96e 	bl	8002a90 <ndefBufferDump>
            }
            LedNotificationWriteDone();
 80017b4:	f000 fc1e 	bl	8001ff4 <LedNotificationWriteDone>
            break;
 80017b8:	e030      	b.n	800181c <demoNdef+0x530>

        /*
         * Demonstrate how to format a Tag
         */
        case NDEF_DEMO_FORMAT_TAG:
            ndefDemoFeature = NDEF_DEMO_READ;
 80017ba:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <demoNdef+0x53c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
            if( !ndefIsSTTag(&ndefCtx) )
 80017c0:	481e      	ldr	r0, [pc, #120]	; (800183c <demoNdef+0x550>)
 80017c2:	f000 fbdf 	bl	8001f84 <ndefIsSTTag>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f083 0301 	eor.w	r3, r3, #1
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <demoNdef+0x4ee>
            {
                platformLog("Manufacturer ID not found or not an ST tag. Format aborted \r\n");
 80017d2:	481f      	ldr	r0, [pc, #124]	; (8001850 <demoNdef+0x564>)
 80017d4:	f7fe fe88 	bl	80004e8 <logUsart>
                return;
 80017d8:	e022      	b.n	8001820 <demoNdef+0x534>
            }
            platformLog("Formatting Tag...\r\n");
 80017da:	481e      	ldr	r0, [pc, #120]	; (8001854 <demoNdef+0x568>)
 80017dc:	f7fe fe84 	bl	80004e8 <logUsart>
            /* Format Tag */
            err = ndefPollerTagFormat(&ndefCtx, NULL, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	4815      	ldr	r0, [pc, #84]	; (800183c <demoNdef+0x550>)
 80017e6:	f007 f964 	bl	8008ab2 <ndefPollerTagFormat>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 80017f0:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d006      	beq.n	8001806 <demoNdef+0x51a>
            {
                platformLog("Tag cannot be formatted (ndefPollerTagFormat returns %d)\r\n", err);
 80017f8:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80017fc:	4619      	mov	r1, r3
 80017fe:	4816      	ldr	r0, [pc, #88]	; (8001858 <demoNdef+0x56c>)
 8001800:	f7fe fe72 	bl	80004e8 <logUsart>
                return;
 8001804:	e00c      	b.n	8001820 <demoNdef+0x534>
            }
            platformLog("Tag formatted\r\n");
 8001806:	4815      	ldr	r0, [pc, #84]	; (800185c <demoNdef+0x570>)
 8001808:	f7fe fe6e 	bl	80004e8 <logUsart>
            LedNotificationWriteDone();
 800180c:	f000 fbf2 	bl	8001ff4 <LedNotificationWriteDone>
            break;
 8001810:	e004      	b.n	800181c <demoNdef+0x530>
#endif /* NDEF_FEATURE_ALL */

        default:
            ndefDemoFeature = NDEF_DEMO_READ;
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <demoNdef+0x53c>)
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
            break;     
 8001818:	e000      	b.n	800181c <demoNdef+0x530>
            break;
 800181a:	bf00      	nop
    }
    return;
 800181c:	e000      	b.n	8001820 <demoNdef+0x534>
                return;
 800181e:	bf00      	nop
}
 8001820:	f507 7770 	add.w	r7, r7, #960	; 0x3c0
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000f98 	.word	0x20000f98
 800182c:	20000064 	.word	0x20000064
 8001830:	20000088 	.word	0x20000088
 8001834:	20000f9c 	.word	0x20000f9c
 8001838:	08019c20 	.word	0x08019c20
 800183c:	200005c4 	.word	0x200005c4
 8001840:	08019c40 	.word	0x08019c40
 8001844:	08019c84 	.word	0x08019c84
 8001848:	20000f99 	.word	0x20000f99
 800184c:	08019c14 	.word	0x08019c14
 8001850:	08019ca4 	.word	0x08019ca4
 8001854:	08019ce4 	.word	0x08019ce4
 8001858:	08019cf8 	.word	0x08019cf8
 800185c:	08019d34 	.word	0x08019d34

08001860 <ndefT2TCCDump>:

static void ndefT2TCCDump(ndefContext *ctx)
{
 8001860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af04      	add	r7, sp, #16
 8001866:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;

    platformLog(" * Magic: %2.2Xh Version: %d.%d Size: %d (%d bytes) \r\n * readAccess: %2.2xh writeAccess: %2.2xh \r\n", ctx->cc.t2t.magicNumber, ctx->cc.t2t.majorVersion, ctx->cc.t2t.minorVersion, ctx->cc.t2t.size, ctx->cc.t2t.size * 8U, ctx->cc.t2t.readAccess, ctx->cc.t2t.writeAccess);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800186e:	461c      	mov	r4, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001876:	461d      	mov	r5, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800187e:	461e      	mov	r6, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001886:	4619      	mov	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8001896:	4610      	mov	r0, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 800189e:	9203      	str	r2, [sp, #12]
 80018a0:	9002      	str	r0, [sp, #8]
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	9100      	str	r1, [sp, #0]
 80018a6:	4633      	mov	r3, r6
 80018a8:	462a      	mov	r2, r5
 80018aa:	4621      	mov	r1, r4
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <ndefT2TCCDump+0x74>)
 80018ae:	f7fe fe1b 	bl	80004e8 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	339c      	adds	r3, #156	; 0x9c
 80018b6:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = 4;
 80018b8:	2304      	movs	r3, #4
 80018ba:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <ndefT2TCCDump+0x78>)
 80018be:	781a      	ldrb	r2, [r3, #0]
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4619      	mov	r1, r3
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <ndefT2TCCDump+0x7c>)
 80018c8:	f001 f8e2 	bl	8002a90 <ndefBufferDump>
  
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d4:	08019d44 	.word	0x08019d44
 80018d8:	20000f99 	.word	0x20000f99
 80018dc:	08019da8 	.word	0x08019da8

080018e0 <ndefT3TAIBDump>:

static void ndefT3TAIBDump(ndefContext *ctx)
{
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	b08b      	sub	sp, #44	; 0x2c
 80018e4:	af06      	add	r7, sp, #24
 80018e6:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;

    platformLog(" * Version: %d.%d Size: %d (%d bytes) NbR: %d NbW: %d\r\n * WriteFlag: %2.2xh RWFlag: %2.2xh \r\n", ctx->cc.t3t.majorVersion, ctx->cc.t3t.minorVersion, ctx->cc.t3t.nMaxB, ctx->cc.t3t.nMaxB * 16U, ctx->cc.t3t.nbR, ctx->cc.t3t.nbW, ctx->cc.t3t.writeFlag, ctx->cc.t3t.rwFlag);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80018ee:	461d      	mov	r5, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80018f6:	461e      	mov	r6, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80018fe:	469c      	mov	ip, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 800190e:	4611      	mov	r1, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 8001916:	4610      	mov	r0, r2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 800191e:	4614      	mov	r4, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 8001926:	9204      	str	r2, [sp, #16]
 8001928:	9403      	str	r4, [sp, #12]
 800192a:	9002      	str	r0, [sp, #8]
 800192c:	9101      	str	r1, [sp, #4]
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	4663      	mov	r3, ip
 8001932:	4632      	mov	r2, r6
 8001934:	4629      	mov	r1, r5
 8001936:	480a      	ldr	r0, [pc, #40]	; (8001960 <ndefT3TAIBDump+0x80>)
 8001938:	f7fe fdd6 	bl	80004e8 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	339c      	adds	r3, #156	; 0x9c
 8001940:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = 16;
 8001942:	2310      	movs	r3, #16
 8001944:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <ndefT3TAIBDump+0x84>)
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <ndefT3TAIBDump+0x88>)
 8001952:	f001 f89d 	bl	8002a90 <ndefBufferDump>
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195e:	bf00      	nop
 8001960:	08019db8 	.word	0x08019db8
 8001964:	20000f99 	.word	0x20000f99
 8001968:	08019da8 	.word	0x08019da8

0800196c <ndefT4TCCDump>:

static void ndefT4TCCDump(ndefContext *ctx)
{
 800196c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196e:	b08b      	sub	sp, #44	; 0x2c
 8001970:	af06      	add	r7, sp, #24
 8001972:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;
    
    platformLog(" * CCLEN: %d T4T_VNo: %xh MLe: %d MLc: %d FileId: %2.2x%2.2xh FileSize: %d\r\n * readAccess: %2.2xh writeAccess: %2.2xh\r\n", ctx->cc.t4t.ccLen, ctx->cc.t4t.vNo, ctx->cc.t4t.mLe, ctx->cc.t4t.mLc, ctx->cc.t4t.fileId[0], ctx->cc.t4t.fileId[1],ctx->cc.t4t.fileSize, ctx->cc.t4t.readAccess, ctx->cc.t4t.writeAccess);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800197a:	461e      	mov	r6, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001982:	469c      	mov	ip, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800198a:	469e      	mov	lr, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001992:	4619      	mov	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800199a:	4618      	mov	r0, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80019a2:	461c      	mov	r4, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 80019b0:	4615      	mov	r5, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	f892 208d 	ldrb.w	r2, [r2, #141]	; 0x8d
 80019b8:	9205      	str	r2, [sp, #20]
 80019ba:	9504      	str	r5, [sp, #16]
 80019bc:	9303      	str	r3, [sp, #12]
 80019be:	9402      	str	r4, [sp, #8]
 80019c0:	9001      	str	r0, [sp, #4]
 80019c2:	9100      	str	r1, [sp, #0]
 80019c4:	4673      	mov	r3, lr
 80019c6:	4662      	mov	r2, ip
 80019c8:	4631      	mov	r1, r6
 80019ca:	480b      	ldr	r0, [pc, #44]	; (80019f8 <ndefT4TCCDump+0x8c>)
 80019cc:	f7fe fd8c 	bl	80004e8 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	339c      	adds	r3, #156	; 0x9c
 80019d4:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = ctx->cc.t4t.ccLen;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80019dc:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC File Raw Data", &bufCcBuf, verbose);
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <ndefT4TCCDump+0x90>)
 80019e0:	781a      	ldrb	r2, [r3, #0]
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4619      	mov	r1, r3
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <ndefT4TCCDump+0x94>)
 80019ea:	f001 f851 	bl	8002a90 <ndefBufferDump>
}
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f6:	bf00      	nop
 80019f8:	08019e18 	.word	0x08019e18
 80019fc:	20000f99 	.word	0x20000f99
 8001a00:	08019e90 	.word	0x08019e90

08001a04 <ndefT5TCCDump>:

static void ndefT5TCCDump(ndefContext *ctx)
{
 8001a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a06:	b08b      	sub	sp, #44	; 0x2c
 8001a08:	af06      	add	r7, sp, #24
 8001a0a:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;
    
    platformLog(" * Block Length: %d\r\n", ctx->subCtx.t5t.blockLen);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001a12:	4619      	mov	r1, r3
 8001a14:	4831      	ldr	r0, [pc, #196]	; (8001adc <ndefT5TCCDump+0xd8>)
 8001a16:	f7fe fd67 	bl	80004e8 <logUsart>
    platformLog(" * %d bytes CC\r\n * Magic: %2.2Xh Version: %d.%d MLEN: %d (%d bytes) \r\n * readAccess: %2.2xh writeAccess: %2.2xh \r\n", ctx->cc.t5t.ccLen, ctx->cc.t5t.magicNumber, ctx->cc.t5t.majorVersion, ctx->cc.t5t.minorVersion, ctx->cc.t5t.memoryLen, ctx->cc.t5t.memoryLen * 8U, ctx->cc.t5t.readAccess, ctx->cc.t5t.writeAccess);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001a20:	461d      	mov	r5, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001a28:	461e      	mov	r6, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001a30:	469c      	mov	ip, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001a38:	4619      	mov	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001a40:	4618      	mov	r0, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8001a50:	4614      	mov	r4, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 8001a58:	9204      	str	r2, [sp, #16]
 8001a5a:	9403      	str	r4, [sp, #12]
 8001a5c:	9302      	str	r3, [sp, #8]
 8001a5e:	9001      	str	r0, [sp, #4]
 8001a60:	9100      	str	r1, [sp, #0]
 8001a62:	4663      	mov	r3, ip
 8001a64:	4632      	mov	r2, r6
 8001a66:	4629      	mov	r1, r5
 8001a68:	481d      	ldr	r0, [pc, #116]	; (8001ae0 <ndefT5TCCDump+0xdc>)
 8001a6a:	f7fe fd3d 	bl	80004e8 <logUsart>
    platformLog(" * [%c] Special Frame\r\n",       ctx->cc.t5t.specialFrame ?      'X' : ' ');
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <ndefT5TCCDump+0x78>
 8001a78:	2358      	movs	r3, #88	; 0x58
 8001a7a:	e000      	b.n	8001a7e <ndefT5TCCDump+0x7a>
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4818      	ldr	r0, [pc, #96]	; (8001ae4 <ndefT5TCCDump+0xe0>)
 8001a82:	f7fe fd31 	bl	80004e8 <logUsart>
    platformLog(" * [%c] Multiple block Read\r\n", ctx->cc.t5t.multipleBlockRead ? 'X' : ' ');
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <ndefT5TCCDump+0x90>
 8001a90:	2358      	movs	r3, #88	; 0x58
 8001a92:	e000      	b.n	8001a96 <ndefT5TCCDump+0x92>
 8001a94:	2320      	movs	r3, #32
 8001a96:	4619      	mov	r1, r3
 8001a98:	4813      	ldr	r0, [pc, #76]	; (8001ae8 <ndefT5TCCDump+0xe4>)
 8001a9a:	f7fe fd25 	bl	80004e8 <logUsart>
    platformLog(" * [%c] Lock Block\r\n",          ctx->cc.t5t.lockBlock ?         'X' : ' ');
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <ndefT5TCCDump+0xa8>
 8001aa8:	2358      	movs	r3, #88	; 0x58
 8001aaa:	e000      	b.n	8001aae <ndefT5TCCDump+0xaa>
 8001aac:	2320      	movs	r3, #32
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480e      	ldr	r0, [pc, #56]	; (8001aec <ndefT5TCCDump+0xe8>)
 8001ab2:	f7fe fd19 	bl	80004e8 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	339c      	adds	r3, #156	; 0x9c
 8001aba:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = ctx->cc.t5t.ccLen;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001ac2:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <ndefT5TCCDump+0xec>)
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	4619      	mov	r1, r3
 8001ace:	4809      	ldr	r0, [pc, #36]	; (8001af4 <ndefT5TCCDump+0xf0>)
 8001ad0:	f000 ffde 	bl	8002a90 <ndefBufferDump>
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001adc:	08019ea4 	.word	0x08019ea4
 8001ae0:	08019ebc 	.word	0x08019ebc
 8001ae4:	08019f30 	.word	0x08019f30
 8001ae8:	08019f48 	.word	0x08019f48
 8001aec:	08019f68 	.word	0x08019f68
 8001af0:	20000f99 	.word	0x20000f99
 8001af4:	08019da8 	.word	0x08019da8

08001af8 <ndefCCDump>:

static void ndefCCDump(ndefContext *ctx)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
    if( (ctx == NULL) || !verbose)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d03c      	beq.n	8001b80 <ndefCCDump+0x88>
 8001b06:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <ndefCCDump+0x94>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	f083 0301 	eor.w	r3, r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d135      	bne.n	8001b80 <ndefCCDump+0x88>
    {
        return;
    }
    platformLog("%s", (ctx->device.type ==  RFAL_NFC_LISTEN_TYPE_NFCF) ? "NDEF Attribute Information Block\r\n" : "NDEF Capability Container\r\n");
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d101      	bne.n	8001b20 <ndefCCDump+0x28>
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <ndefCCDump+0x98>)
 8001b1e:	e000      	b.n	8001b22 <ndefCCDump+0x2a>
 8001b20:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <ndefCCDump+0x9c>)
 8001b22:	4619      	mov	r1, r3
 8001b24:	481c      	ldr	r0, [pc, #112]	; (8001b98 <ndefCCDump+0xa0>)
 8001b26:	f7fe fcdf 	bl	80004e8 <logUsart>
    switch( ctx->device.type )
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d828      	bhi.n	8001b84 <ndefCCDump+0x8c>
 8001b32:	a201      	add	r2, pc, #4	; (adr r2, 8001b38 <ndefCCDump+0x40>)
 8001b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b38:	08001b49 	.word	0x08001b49
 8001b3c:	08001b69 	.word	0x08001b69
 8001b40:	08001b71 	.word	0x08001b71
 8001b44:	08001b79 	.word	0x08001b79
    {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            switch( ctx->device.dev.nfca.type )
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	785b      	ldrb	r3, [r3, #1]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <ndefCCDump+0x5e>
 8001b50:	2b20      	cmp	r3, #32
 8001b52:	d004      	beq.n	8001b5e <ndefCCDump+0x66>
                    break;
                case RFAL_NFCA_T4T:
                    ndefT4TCCDump(ctx);
                    break;
                default:
                    break;
 8001b54:	e007      	b.n	8001b66 <ndefCCDump+0x6e>
                    ndefT2TCCDump(ctx);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fe82 	bl	8001860 <ndefT2TCCDump>
                    break;
 8001b5c:	e003      	b.n	8001b66 <ndefCCDump+0x6e>
                    ndefT4TCCDump(ctx);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ff04 	bl	800196c <ndefT4TCCDump>
                    break;
 8001b64:	bf00      	nop
            }
            break;
 8001b66:	e00e      	b.n	8001b86 <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            ndefT4TCCDump(ctx);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff feff 	bl	800196c <ndefT4TCCDump>
            break;
 8001b6e:	e00a      	b.n	8001b86 <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            ndefT3TAIBDump(ctx);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff feb5 	bl	80018e0 <ndefT3TAIBDump>
            break;
 8001b76:	e006      	b.n	8001b86 <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            ndefT5TCCDump(ctx);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff43 	bl	8001a04 <ndefT5TCCDump>
            break;
 8001b7e:	e002      	b.n	8001b86 <ndefCCDump+0x8e>
        return;
 8001b80:	bf00      	nop
 8001b82:	e000      	b.n	8001b86 <ndefCCDump+0x8e>
        default:
            break;
 8001b84:	bf00      	nop
    }
}
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000f99 	.word	0x20000f99
 8001b90:	08019f80 	.word	0x08019f80
 8001b94:	08019fa4 	.word	0x08019fa4
 8001b98:	08019fc0 	.word	0x08019fc0

08001b9c <ndefDumpSysInfo>:

static void ndefDumpSysInfo(ndefContext *ctx)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
    ndefSystemInformation *sysInfo;

    if( (ctx == NULL) || !verbose)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 81d6 	beq.w	8001f58 <ndefDumpSysInfo+0x3bc>
 8001bac:	4ba4      	ldr	r3, [pc, #656]	; (8001e40 <ndefDumpSysInfo+0x2a4>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	f083 0301 	eor.w	r3, r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f040 81ce 	bne.w	8001f58 <ndefDumpSysInfo+0x3bc>
    {
        return;
    }
    
    if( !ctx->subCtx.t5t.sysInfoSupported )
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 8001bc2:	f083 0301 	eor.w	r3, r3, #1
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f040 81c7 	bne.w	8001f5c <ndefDumpSysInfo+0x3c0>
    {
        return;
    }
    
    sysInfo = &ctx->subCtx.t5t.sysInfo;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	33be      	adds	r3, #190	; 0xbe
 8001bd2:	60fb      	str	r3, [r7, #12]
    platformLog("System Information\r\n");
 8001bd4:	489b      	ldr	r0, [pc, #620]	; (8001e44 <ndefDumpSysInfo+0x2a8>)
 8001bd6:	f7fe fc87 	bl	80004e8 <logUsart>
    platformLog(" * %d byte(s) memory addressing\r\n", ndefT5TSysInfoMOIValue(sysInfo->infoFlags) + 1);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	7b9b      	ldrb	r3, [r3, #14]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	3301      	adds	r3, #1
 8001be8:	4619      	mov	r1, r3
 8001bea:	4897      	ldr	r0, [pc, #604]	; (8001e48 <ndefDumpSysInfo+0x2ac>)
 8001bec:	f7fe fc7c 	bl	80004e8 <logUsart>
    if( ndefT5TSysInfoDFSIDPresent(sysInfo->infoFlags) )
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	7b9b      	ldrb	r3, [r3, #14]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <ndefDumpSysInfo+0x6c>
    {
        platformLog(" * DFSID=%2.2Xh\r\n", sysInfo->DFSID);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	7bdb      	ldrb	r3, [r3, #15]
 8001c00:	4619      	mov	r1, r3
 8001c02:	4892      	ldr	r0, [pc, #584]	; (8001e4c <ndefDumpSysInfo+0x2b0>)
 8001c04:	f7fe fc70 	bl	80004e8 <logUsart>
    }
    if( ndefT5TSysInfoAFIPresent(sysInfo->infoFlags) )
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	7b9b      	ldrb	r3, [r3, #14]
 8001c0c:	085b      	lsrs	r3, r3, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <ndefDumpSysInfo+0x88>
    {
        platformLog(" * AFI=%2.2Xh\r\n", sysInfo->AFI);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	7c1b      	ldrb	r3, [r3, #16]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	488c      	ldr	r0, [pc, #560]	; (8001e50 <ndefDumpSysInfo+0x2b4>)
 8001c20:	f7fe fc62 	bl	80004e8 <logUsart>
    }
    if( ndefT5TSysInfoMemSizePresent(sysInfo->infoFlags) )
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	7b9b      	ldrb	r3, [r3, #14]
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <ndefDumpSysInfo+0xaa>
    {
        platformLog(" * %d blocks, %d bytes per block\r\n", sysInfo->numberOfBlock, sysInfo->blockSize);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	7c5b      	ldrb	r3, [r3, #17]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4884      	ldr	r0, [pc, #528]	; (8001e54 <ndefDumpSysInfo+0x2b8>)
 8001c42:	f7fe fc51 	bl	80004e8 <logUsart>
    }
    if( ndefT5TSysInfoICRefPresent(sysInfo->infoFlags) )
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	7b9b      	ldrb	r3, [r3, #14]
 8001c4a:	08db      	lsrs	r3, r3, #3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <ndefDumpSysInfo+0xc6>
    {
        platformLog(" * ICRef=%2.2xh\r\n", sysInfo->ICRef);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	7c9b      	ldrb	r3, [r3, #18]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	487e      	ldr	r0, [pc, #504]	; (8001e58 <ndefDumpSysInfo+0x2bc>)
 8001c5e:	f7fe fc43 	bl	80004e8 <logUsart>
    }
    if( ndefT5TSysInfoCmdListPresent(sysInfo->infoFlags) )
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	7b9b      	ldrb	r3, [r3, #14]
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 8176 	beq.w	8001f60 <ndefDumpSysInfo+0x3c4>
    {
        platformLog(" * [%c] ReadSingleBlock                \r\n", ndefT5TSysInfoReadSingleBlockSupported(sysInfo->supportedCmd)                 ? 'X' : ' ');               
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	7a9b      	ldrb	r3, [r3, #10]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <ndefDumpSysInfo+0xe8>
 8001c80:	2358      	movs	r3, #88	; 0x58
 8001c82:	e000      	b.n	8001c86 <ndefDumpSysInfo+0xea>
 8001c84:	2320      	movs	r3, #32
 8001c86:	4619      	mov	r1, r3
 8001c88:	4874      	ldr	r0, [pc, #464]	; (8001e5c <ndefDumpSysInfo+0x2c0>)
 8001c8a:	f7fe fc2d 	bl	80004e8 <logUsart>
        platformLog(" * [%c] WriteSingleBlock               \r\n", ndefT5TSysInfoWriteSingleBlockSupported(sysInfo->supportedCmd)                ? 'X' : ' ');
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	7a9b      	ldrb	r3, [r3, #10]
 8001c92:	085b      	lsrs	r3, r3, #1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <ndefDumpSysInfo+0x106>
 8001c9e:	2358      	movs	r3, #88	; 0x58
 8001ca0:	e000      	b.n	8001ca4 <ndefDumpSysInfo+0x108>
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	486e      	ldr	r0, [pc, #440]	; (8001e60 <ndefDumpSysInfo+0x2c4>)
 8001ca8:	f7fe fc1e 	bl	80004e8 <logUsart>
        platformLog(" * [%c] LockSingleBlock                \r\n", ndefT5TSysInfoLockSingleBlockSupported(sysInfo->supportedCmd)                 ? 'X' : ' ');
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	7a9b      	ldrb	r3, [r3, #10]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <ndefDumpSysInfo+0x124>
 8001cbc:	2358      	movs	r3, #88	; 0x58
 8001cbe:	e000      	b.n	8001cc2 <ndefDumpSysInfo+0x126>
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4867      	ldr	r0, [pc, #412]	; (8001e64 <ndefDumpSysInfo+0x2c8>)
 8001cc6:	f7fe fc0f 	bl	80004e8 <logUsart>
        platformLog(" * [%c] ReadMultipleBlocks             \r\n", ndefT5TSysInfoReadMultipleBlocksSupported(sysInfo->supportedCmd)              ? 'X' : ' ');
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	7a9b      	ldrb	r3, [r3, #10]
 8001cce:	08db      	lsrs	r3, r3, #3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <ndefDumpSysInfo+0x142>
 8001cda:	2358      	movs	r3, #88	; 0x58
 8001cdc:	e000      	b.n	8001ce0 <ndefDumpSysInfo+0x144>
 8001cde:	2320      	movs	r3, #32
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4861      	ldr	r0, [pc, #388]	; (8001e68 <ndefDumpSysInfo+0x2cc>)
 8001ce4:	f7fe fc00 	bl	80004e8 <logUsart>
        platformLog(" * [%c] WriteMultipleBlocks            \r\n", ndefT5TSysInfoWriteMultipleBlocksSupported(sysInfo->supportedCmd)             ? 'X' : ' ');
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	7a9b      	ldrb	r3, [r3, #10]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <ndefDumpSysInfo+0x160>
 8001cf8:	2358      	movs	r3, #88	; 0x58
 8001cfa:	e000      	b.n	8001cfe <ndefDumpSysInfo+0x162>
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	4619      	mov	r1, r3
 8001d00:	485a      	ldr	r0, [pc, #360]	; (8001e6c <ndefDumpSysInfo+0x2d0>)
 8001d02:	f7fe fbf1 	bl	80004e8 <logUsart>
        platformLog(" * [%c] Select                         \r\n", ndefT5TSysInfoSelectSupported(sysInfo->supportedCmd)                          ? 'X' : ' ');
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	7a9b      	ldrb	r3, [r3, #10]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <ndefDumpSysInfo+0x17e>
 8001d16:	2358      	movs	r3, #88	; 0x58
 8001d18:	e000      	b.n	8001d1c <ndefDumpSysInfo+0x180>
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4854      	ldr	r0, [pc, #336]	; (8001e70 <ndefDumpSysInfo+0x2d4>)
 8001d20:	f7fe fbe2 	bl	80004e8 <logUsart>
        platformLog(" * [%c] ResetToReady                   \r\n", ndefT5TSysInfoResetToReadySupported(sysInfo->supportedCmd)                    ? 'X' : ' ');
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	7a9b      	ldrb	r3, [r3, #10]
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <ndefDumpSysInfo+0x19c>
 8001d34:	2358      	movs	r3, #88	; 0x58
 8001d36:	e000      	b.n	8001d3a <ndefDumpSysInfo+0x19e>
 8001d38:	2320      	movs	r3, #32
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	484d      	ldr	r0, [pc, #308]	; (8001e74 <ndefDumpSysInfo+0x2d8>)
 8001d3e:	f7fe fbd3 	bl	80004e8 <logUsart>
        platformLog(" * [%c] GetMultipleBlockSecStatus      \r\n", ndefT5TSysInfoGetMultipleBlockSecStatusSupported(sysInfo->supportedCmd)       ? 'X' : ' ');
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	7a9b      	ldrb	r3, [r3, #10]
 8001d46:	09db      	lsrs	r3, r3, #7
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <ndefDumpSysInfo+0x1ba>
 8001d52:	2358      	movs	r3, #88	; 0x58
 8001d54:	e000      	b.n	8001d58 <ndefDumpSysInfo+0x1bc>
 8001d56:	2320      	movs	r3, #32
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4847      	ldr	r0, [pc, #284]	; (8001e78 <ndefDumpSysInfo+0x2dc>)
 8001d5c:	f7fe fbc4 	bl	80004e8 <logUsart>
        platformLog(" * [%c] WriteAFI                       \r\n", ndefT5TSysInfoWriteAFISupported(sysInfo->supportedCmd)                        ? 'X' : ' ');
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	7adb      	ldrb	r3, [r3, #11]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <ndefDumpSysInfo+0x1d4>
 8001d6c:	2358      	movs	r3, #88	; 0x58
 8001d6e:	e000      	b.n	8001d72 <ndefDumpSysInfo+0x1d6>
 8001d70:	2320      	movs	r3, #32
 8001d72:	4619      	mov	r1, r3
 8001d74:	4841      	ldr	r0, [pc, #260]	; (8001e7c <ndefDumpSysInfo+0x2e0>)
 8001d76:	f7fe fbb7 	bl	80004e8 <logUsart>
        platformLog(" * [%c] LockAFI                        \r\n", ndefT5TSysInfoLockAFISupported(sysInfo->supportedCmd)                         ? 'X' : ' ');
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	7adb      	ldrb	r3, [r3, #11]
 8001d7e:	085b      	lsrs	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <ndefDumpSysInfo+0x1f2>
 8001d8a:	2358      	movs	r3, #88	; 0x58
 8001d8c:	e000      	b.n	8001d90 <ndefDumpSysInfo+0x1f4>
 8001d8e:	2320      	movs	r3, #32
 8001d90:	4619      	mov	r1, r3
 8001d92:	483b      	ldr	r0, [pc, #236]	; (8001e80 <ndefDumpSysInfo+0x2e4>)
 8001d94:	f7fe fba8 	bl	80004e8 <logUsart>
        platformLog(" * [%c] WriteDSFID                     \r\n", ndefT5TSysInfoWriteDSFIDSupported(sysInfo->supportedCmd)                      ? 'X' : ' ');
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	7adb      	ldrb	r3, [r3, #11]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <ndefDumpSysInfo+0x210>
 8001da8:	2358      	movs	r3, #88	; 0x58
 8001daa:	e000      	b.n	8001dae <ndefDumpSysInfo+0x212>
 8001dac:	2320      	movs	r3, #32
 8001dae:	4619      	mov	r1, r3
 8001db0:	4834      	ldr	r0, [pc, #208]	; (8001e84 <ndefDumpSysInfo+0x2e8>)
 8001db2:	f7fe fb99 	bl	80004e8 <logUsart>
        platformLog(" * [%c] LockDSFID                      \r\n", ndefT5TSysInfoLockDSFIDSupported(sysInfo->supportedCmd)                       ? 'X' : ' ');
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	7adb      	ldrb	r3, [r3, #11]
 8001dba:	08db      	lsrs	r3, r3, #3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <ndefDumpSysInfo+0x22e>
 8001dc6:	2358      	movs	r3, #88	; 0x58
 8001dc8:	e000      	b.n	8001dcc <ndefDumpSysInfo+0x230>
 8001dca:	2320      	movs	r3, #32
 8001dcc:	4619      	mov	r1, r3
 8001dce:	482e      	ldr	r0, [pc, #184]	; (8001e88 <ndefDumpSysInfo+0x2ec>)
 8001dd0:	f7fe fb8a 	bl	80004e8 <logUsart>
        platformLog(" * [%c] GetSystemInformation           \r\n", ndefT5TSysInfoGetSystemInformationSupported(sysInfo->supportedCmd)            ? 'X' : ' ');
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	7adb      	ldrb	r3, [r3, #11]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <ndefDumpSysInfo+0x24c>
 8001de4:	2358      	movs	r3, #88	; 0x58
 8001de6:	e000      	b.n	8001dea <ndefDumpSysInfo+0x24e>
 8001de8:	2320      	movs	r3, #32
 8001dea:	4619      	mov	r1, r3
 8001dec:	4827      	ldr	r0, [pc, #156]	; (8001e8c <ndefDumpSysInfo+0x2f0>)
 8001dee:	f7fe fb7b 	bl	80004e8 <logUsart>
        platformLog(" * [%c] CustomCmds                     \r\n", ndefT5TSysInfoCustomCmdsSupported(sysInfo->supportedCmd)                      ? 'X' : ' ');
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	7adb      	ldrb	r3, [r3, #11]
 8001df6:	095b      	lsrs	r3, r3, #5
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <ndefDumpSysInfo+0x26a>
 8001e02:	2358      	movs	r3, #88	; 0x58
 8001e04:	e000      	b.n	8001e08 <ndefDumpSysInfo+0x26c>
 8001e06:	2320      	movs	r3, #32
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4821      	ldr	r0, [pc, #132]	; (8001e90 <ndefDumpSysInfo+0x2f4>)
 8001e0c:	f7fe fb6c 	bl	80004e8 <logUsart>
        platformLog(" * [%c] FastReadMultipleBlocks         \r\n", ndefT5TSysInfoFastReadMultipleBlocksSupported(sysInfo->supportedCmd)          ? 'X' : ' ');
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	7adb      	ldrb	r3, [r3, #11]
 8001e14:	099b      	lsrs	r3, r3, #6
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <ndefDumpSysInfo+0x288>
 8001e20:	2358      	movs	r3, #88	; 0x58
 8001e22:	e000      	b.n	8001e26 <ndefDumpSysInfo+0x28a>
 8001e24:	2320      	movs	r3, #32
 8001e26:	4619      	mov	r1, r3
 8001e28:	481a      	ldr	r0, [pc, #104]	; (8001e94 <ndefDumpSysInfo+0x2f8>)
 8001e2a:	f7fe fb5d 	bl	80004e8 <logUsart>
        platformLog(" * [%c] ExtReadSingleBlock             \r\n", ndefT5TSysInfoExtReadSingleBlockSupported(sysInfo->supportedCmd)              ? 'X' : ' '); 
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	7b1b      	ldrb	r3, [r3, #12]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d02e      	beq.n	8001e98 <ndefDumpSysInfo+0x2fc>
 8001e3a:	2358      	movs	r3, #88	; 0x58
 8001e3c:	e02d      	b.n	8001e9a <ndefDumpSysInfo+0x2fe>
 8001e3e:	bf00      	nop
 8001e40:	20000f99 	.word	0x20000f99
 8001e44:	08019fc4 	.word	0x08019fc4
 8001e48:	08019fdc 	.word	0x08019fdc
 8001e4c:	0801a000 	.word	0x0801a000
 8001e50:	0801a014 	.word	0x0801a014
 8001e54:	0801a024 	.word	0x0801a024
 8001e58:	0801a048 	.word	0x0801a048
 8001e5c:	0801a05c 	.word	0x0801a05c
 8001e60:	0801a088 	.word	0x0801a088
 8001e64:	0801a0b4 	.word	0x0801a0b4
 8001e68:	0801a0e0 	.word	0x0801a0e0
 8001e6c:	0801a10c 	.word	0x0801a10c
 8001e70:	0801a138 	.word	0x0801a138
 8001e74:	0801a164 	.word	0x0801a164
 8001e78:	0801a190 	.word	0x0801a190
 8001e7c:	0801a1bc 	.word	0x0801a1bc
 8001e80:	0801a1e8 	.word	0x0801a1e8
 8001e84:	0801a214 	.word	0x0801a214
 8001e88:	0801a240 	.word	0x0801a240
 8001e8c:	0801a26c 	.word	0x0801a26c
 8001e90:	0801a298 	.word	0x0801a298
 8001e94:	0801a2c4 	.word	0x0801a2c4
 8001e98:	2320      	movs	r3, #32
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4832      	ldr	r0, [pc, #200]	; (8001f68 <ndefDumpSysInfo+0x3cc>)
 8001e9e:	f7fe fb23 	bl	80004e8 <logUsart>
        platformLog(" * [%c] ExtWriteSingleBlock            \r\n", ndefT5TSysInfoExtWriteSingleBlockSupported(sysInfo->supportedCmd)             ? 'X' : ' ');
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	7b1b      	ldrb	r3, [r3, #12]
 8001ea6:	085b      	lsrs	r3, r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <ndefDumpSysInfo+0x31a>
 8001eb2:	2358      	movs	r3, #88	; 0x58
 8001eb4:	e000      	b.n	8001eb8 <ndefDumpSysInfo+0x31c>
 8001eb6:	2320      	movs	r3, #32
 8001eb8:	4619      	mov	r1, r3
 8001eba:	482c      	ldr	r0, [pc, #176]	; (8001f6c <ndefDumpSysInfo+0x3d0>)
 8001ebc:	f7fe fb14 	bl	80004e8 <logUsart>
        platformLog(" * [%c] ExtLockSingleBlock             \r\n", ndefT5TSysInfoExtLockSingleBlockSupported(sysInfo->supportedCmd)              ? 'X' : ' ');
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	7b1b      	ldrb	r3, [r3, #12]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <ndefDumpSysInfo+0x338>
 8001ed0:	2358      	movs	r3, #88	; 0x58
 8001ed2:	e000      	b.n	8001ed6 <ndefDumpSysInfo+0x33a>
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4825      	ldr	r0, [pc, #148]	; (8001f70 <ndefDumpSysInfo+0x3d4>)
 8001eda:	f7fe fb05 	bl	80004e8 <logUsart>
        platformLog(" * [%c] ExtReadMultipleBlocks          \r\n", ndefT5TSysInfoExtReadMultipleBlocksSupported(sysInfo->supportedCmd)           ? 'X' : ' ');
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	7b1b      	ldrb	r3, [r3, #12]
 8001ee2:	08db      	lsrs	r3, r3, #3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <ndefDumpSysInfo+0x356>
 8001eee:	2358      	movs	r3, #88	; 0x58
 8001ef0:	e000      	b.n	8001ef4 <ndefDumpSysInfo+0x358>
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	481f      	ldr	r0, [pc, #124]	; (8001f74 <ndefDumpSysInfo+0x3d8>)
 8001ef8:	f7fe faf6 	bl	80004e8 <logUsart>
        platformLog(" * [%c] ExtWriteMultipleBlocks         \r\n", ndefT5TSysInfoExtWriteMultipleBlocksSupported(sysInfo->supportedCmd)          ? 'X' : ' ');
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	7b1b      	ldrb	r3, [r3, #12]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <ndefDumpSysInfo+0x374>
 8001f0c:	2358      	movs	r3, #88	; 0x58
 8001f0e:	e000      	b.n	8001f12 <ndefDumpSysInfo+0x376>
 8001f10:	2320      	movs	r3, #32
 8001f12:	4619      	mov	r1, r3
 8001f14:	4818      	ldr	r0, [pc, #96]	; (8001f78 <ndefDumpSysInfo+0x3dc>)
 8001f16:	f7fe fae7 	bl	80004e8 <logUsart>
        platformLog(" * [%c] ExtGetMultipleBlockSecStatus   \r\n", ndefT5TSysInfoExtGetMultipleBlockSecStatusSupported(sysInfo->supportedCmd)    ? 'X' : ' ');
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	7b1b      	ldrb	r3, [r3, #12]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <ndefDumpSysInfo+0x392>
 8001f2a:	2358      	movs	r3, #88	; 0x58
 8001f2c:	e000      	b.n	8001f30 <ndefDumpSysInfo+0x394>
 8001f2e:	2320      	movs	r3, #32
 8001f30:	4619      	mov	r1, r3
 8001f32:	4812      	ldr	r0, [pc, #72]	; (8001f7c <ndefDumpSysInfo+0x3e0>)
 8001f34:	f7fe fad8 	bl	80004e8 <logUsart>
        platformLog(" * [%c] FastExtendedReadMultipleBlocks \r\n", ndefT5TSysInfoFastExtendedReadMultipleBlocksSupported(sysInfo->supportedCmd)  ? 'X' : ' ');
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	7b1b      	ldrb	r3, [r3, #12]
 8001f3c:	099b      	lsrs	r3, r3, #6
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <ndefDumpSysInfo+0x3b0>
 8001f48:	2358      	movs	r3, #88	; 0x58
 8001f4a:	e000      	b.n	8001f4e <ndefDumpSysInfo+0x3b2>
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480b      	ldr	r0, [pc, #44]	; (8001f80 <ndefDumpSysInfo+0x3e4>)
 8001f52:	f7fe fac9 	bl	80004e8 <logUsart>
    }
    return;
 8001f56:	e003      	b.n	8001f60 <ndefDumpSysInfo+0x3c4>
        return;
 8001f58:	bf00      	nop
 8001f5a:	e002      	b.n	8001f62 <ndefDumpSysInfo+0x3c6>
        return;
 8001f5c:	bf00      	nop
 8001f5e:	e000      	b.n	8001f62 <ndefDumpSysInfo+0x3c6>
    return;
 8001f60:	bf00      	nop
}
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	0801a2f0 	.word	0x0801a2f0
 8001f6c:	0801a31c 	.word	0x0801a31c
 8001f70:	0801a348 	.word	0x0801a348
 8001f74:	0801a374 	.word	0x0801a374
 8001f78:	0801a3a0 	.word	0x0801a3a0
 8001f7c:	0801a3cc 	.word	0x0801a3cc
 8001f80:	0801a3f8 	.word	0x0801a3f8

08001f84 <ndefIsSTTag>:

#if NDEF_FEATURE_ALL
static bool ndefIsSTTag(ndefContext *ctx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
    bool ret = false;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
  if( (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0)
  {
    ret = true;
  }
#endif
    if( ctx == NULL )
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <ndefIsSTTag+0x16>
    {   
        return ret;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	e026      	b.n	8001fe8 <ndefIsSTTag+0x64>
    }
    switch (ctx->device.type)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d81c      	bhi.n	8001fdc <ndefIsSTTag+0x58>
 8001fa2:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <ndefIsSTTag+0x24>)
 8001fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa8:	08001fb9 	.word	0x08001fb9
 8001fac:	08001fdd 	.word	0x08001fdd
 8001fb0:	08001fdd 	.word	0x08001fdd
 8001fb4:	08001fcf 	.word	0x08001fcf
    {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            if( (ctx->device.dev.nfca.nfcId1Len != 4) && (ctx->device.dev.nfca.nfcId1[0] == 0x02 ) )
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	795b      	ldrb	r3, [r3, #5]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d00f      	beq.n	8001fe0 <ndefIsSTTag+0x5c>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	799b      	ldrb	r3, [r3, #6]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d10b      	bne.n	8001fe0 <ndefIsSTTag+0x5c>
            {  
                ret = true;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8001fcc:	e008      	b.n	8001fe0 <ndefIsSTTag+0x5c>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            break;
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            break;
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            if( ctx->device.dev.nfcv.InvRes.UID[6] == 0x02 )
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7a5b      	ldrb	r3, [r3, #9]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d106      	bne.n	8001fe4 <ndefIsSTTag+0x60>
            {  
                ret = true;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8001fda:	e003      	b.n	8001fe4 <ndefIsSTTag+0x60>
        default:
            break;
 8001fdc:	bf00      	nop
 8001fde:	e002      	b.n	8001fe6 <ndefIsSTTag+0x62>
            break;
 8001fe0:	bf00      	nop
 8001fe2:	e000      	b.n	8001fe6 <ndefIsSTTag+0x62>
            break;
 8001fe4:	bf00      	nop
    }
    return (ret);
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop

08001ff4 <LedNotificationWriteDone>:
#endif /* NDEF_FEATURE_ALL */

#if NDEF_FEATURE_ALL
static void LedNotificationWriteDone(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < 3; i++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	e00c      	b.n	800201a <LedNotificationWriteDone+0x26>
    {
        ledsOn();
 8002000:	f000 f814 	bl	800202c <ledsOn>
        platformDelay(100);
 8002004:	2064      	movs	r0, #100	; 0x64
 8002006:	f002 f959 	bl	80042bc <HAL_Delay>

        ledsOff();
 800200a:	f000 f837 	bl	800207c <ledsOff>
        platformDelay(100);
 800200e:	2064      	movs	r0, #100	; 0x64
 8002010:	f002 f954 	bl	80042bc <HAL_Delay>
    for (i = 0; i < 3; i++)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3301      	adds	r3, #1
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d9ef      	bls.n	8002000 <LedNotificationWriteDone+0xc>
    }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <ledsOn>:

static void ledsOn(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
    platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8002030:	2201      	movs	r2, #1
 8002032:	2101      	movs	r1, #1
 8002034:	480f      	ldr	r0, [pc, #60]	; (8002074 <ledsOn+0x48>)
 8002036:	f002 fc18 	bl	800486a <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800203a:	2201      	movs	r2, #1
 800203c:	2110      	movs	r1, #16
 800203e:	480e      	ldr	r0, [pc, #56]	; (8002078 <ledsOn+0x4c>)
 8002040:	f002 fc13 	bl	800486a <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8002044:	2201      	movs	r2, #1
 8002046:	2102      	movs	r1, #2
 8002048:	480b      	ldr	r0, [pc, #44]	; (8002078 <ledsOn+0x4c>)
 800204a:	f002 fc0e 	bl	800486a <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800204e:	2201      	movs	r2, #1
 8002050:	2110      	movs	r1, #16
 8002052:	4808      	ldr	r0, [pc, #32]	; (8002074 <ledsOn+0x48>)
 8002054:	f002 fc09 	bl	800486a <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8002058:	2201      	movs	r2, #1
 800205a:	2120      	movs	r1, #32
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <ledsOn+0x48>)
 800205e:	f002 fc04 	bl	800486a <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8002062:	2201      	movs	r2, #1
 8002064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002068:	4803      	ldr	r0, [pc, #12]	; (8002078 <ledsOn+0x4c>)
 800206a:	f002 fbfe 	bl	800486a <HAL_GPIO_WritePin>
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40020400 	.word	0x40020400
 8002078:	40020000 	.word	0x40020000

0800207c <ledsOff>:

static void ledsOff(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
    platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8002080:	2200      	movs	r2, #0
 8002082:	2101      	movs	r1, #1
 8002084:	480f      	ldr	r0, [pc, #60]	; (80020c4 <ledsOff+0x48>)
 8002086:	f002 fbf0 	bl	800486a <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800208a:	2200      	movs	r2, #0
 800208c:	2110      	movs	r1, #16
 800208e:	480e      	ldr	r0, [pc, #56]	; (80020c8 <ledsOff+0x4c>)
 8002090:	f002 fbeb 	bl	800486a <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8002094:	2200      	movs	r2, #0
 8002096:	2102      	movs	r1, #2
 8002098:	480b      	ldr	r0, [pc, #44]	; (80020c8 <ledsOff+0x4c>)
 800209a:	f002 fbe6 	bl	800486a <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800209e:	2200      	movs	r2, #0
 80020a0:	2110      	movs	r1, #16
 80020a2:	4808      	ldr	r0, [pc, #32]	; (80020c4 <ledsOff+0x48>)
 80020a4:	f002 fbe1 	bl	800486a <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2120      	movs	r1, #32
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <ledsOff+0x48>)
 80020ae:	f002 fbdc 	bl	800486a <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80020b2:	2200      	movs	r2, #0
 80020b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b8:	4803      	ldr	r0, [pc, #12]	; (80020c8 <ledsOff+0x4c>)
 80020ba:	f002 fbd6 	bl	800486a <HAL_GPIO_WritePin>
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40020400 	.word	0x40020400
 80020c8:	40020000 	.word	0x40020000

080020cc <isPrintableASCII>:
 */


/*****************************************************************************/
static bool isPrintableASCII(const uint8_t* str, uint32_t strLen)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
    uint32_t i;
    
    if ((str == NULL) || (strLen == 0))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <isPrintableASCII+0x16>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <isPrintableASCII+0x1a>
    {
        return false;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e018      	b.n	8002118 <isPrintableASCII+0x4c>
    }

    for (i = 0; i < strLen; i++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	e010      	b.n	800210e <isPrintableASCII+0x42>
    {
        if ((str[i] < 0x20) || (str[i] > 0x7E))
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b1f      	cmp	r3, #31
 80020f6:	d905      	bls.n	8002104 <isPrintableASCII+0x38>
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4413      	add	r3, r2
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b7e      	cmp	r3, #126	; 0x7e
 8002102:	d901      	bls.n	8002108 <isPrintableASCII+0x3c>
        {
            return false;
 8002104:	2300      	movs	r3, #0
 8002106:	e007      	b.n	8002118 <isPrintableASCII+0x4c>
    for (i = 0; i < strLen; i++)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3301      	adds	r3, #1
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d3ea      	bcc.n	80020ec <isPrintableASCII+0x20>
        }
    }

    return true;
 8002116:	2301      	movs	r3, #1
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
	...

08002124 <ndefRecordDump>:


/*****************************************************************************/
ReturnCode ndefRecordDump(const ndefRecord* record, bool verbose)
{
 8002124:	b5b0      	push	{r4, r5, r7, lr}
 8002126:	b098      	sub	sp, #96	; 0x60
 8002128:	af04      	add	r7, sp, #16
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
    static uint32_t index;
    const uint8_t *ndefTNFNames[] =
 8002130:	4b5e      	ldr	r3, [pc, #376]	; (80022ac <ndefRecordDump+0x188>)
 8002132:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002136:	461d      	mov	r5, r3
 8002138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        (uint8_t *)"NFC Forum external type [NFC RTD]",
        (uint8_t *)"Unknown",
        (uint8_t *)"Unchanged",
        (uint8_t *)"Reserved"
    };
    uint8_t* headerSR = (uint8_t*)"";
 8002144:	4b5a      	ldr	r3, [pc, #360]	; (80022b0 <ndefRecordDump+0x18c>)
 8002146:	64fb      	str	r3, [r7, #76]	; 0x4c
    ReturnCode err;

    if (record == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d104      	bne.n	8002158 <ndefRecordDump+0x34>
    {
        platformLog("No record\r\n");
 800214e:	4859      	ldr	r0, [pc, #356]	; (80022b4 <ndefRecordDump+0x190>)
 8002150:	f7fe f9ca 	bl	80004e8 <logUsart>
        return ERR_NONE;
 8002154:	2300      	movs	r3, #0
 8002156:	e0a4      	b.n	80022a2 <ndefRecordDump+0x17e>
    }

    if (ndefHeaderIsSetMB(record))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	09db      	lsrs	r3, r3, #7
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b01      	cmp	r3, #1
 8002162:	d103      	bne.n	800216c <ndefRecordDump+0x48>
    {
        index = 1U;
 8002164:	4b54      	ldr	r3, [pc, #336]	; (80022b8 <ndefRecordDump+0x194>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e004      	b.n	8002176 <ndefRecordDump+0x52>
    }
    else
    {
        index++;
 800216c:	4b52      	ldr	r3, [pc, #328]	; (80022b8 <ndefRecordDump+0x194>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	3301      	adds	r3, #1
 8002172:	4a51      	ldr	r2, [pc, #324]	; (80022b8 <ndefRecordDump+0x194>)
 8002174:	6013      	str	r3, [r2, #0]
    }

    if (verbose == true)
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <ndefRecordDump+0x6c>
    {
        headerSR = (uint8_t*)(ndefHeaderIsSetSR(record) ? " - Short Record" : " - Standard Record");
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <ndefRecordDump+0x68>
 8002188:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <ndefRecordDump+0x198>)
 800218a:	e000      	b.n	800218e <ndefRecordDump+0x6a>
 800218c:	4b4c      	ldr	r3, [pc, #304]	; (80022c0 <ndefRecordDump+0x19c>)
 800218e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    platformLog("Record #%d%s\r\n", index, headerSR);
 8002190:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <ndefRecordDump+0x194>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002196:	4619      	mov	r1, r3
 8002198:	484a      	ldr	r0, [pc, #296]	; (80022c4 <ndefRecordDump+0x1a0>)
 800219a:	f7fe f9a5 	bl	80004e8 <logUsart>

    /* Well-known type dump */
    err = ndefRecordDumpType(record);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fba6 	bl	80028f0 <ndefRecordDumpType>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (verbose == true)
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d028      	beq.n	8002202 <ndefRecordDump+0xde>
    {
        /* Raw dump */
        //platformLog(" MB:%d ME:%d CF:%d SR:%d IL:%d TNF:%d\r\n", ndefHeaderMB(record), ndefHeaderME(record), ndefHeaderCF(record), ndefHeaderSR(record), ndefHeaderIL(record), ndefHeaderTNF(record));
        platformLog(" MB ME CF SR IL TNF\r\n");
 80021b0:	4845      	ldr	r0, [pc, #276]	; (80022c8 <ndefRecordDump+0x1a4>)
 80021b2:	f7fe f999 	bl	80004e8 <logUsart>
        platformLog("  %d  %d  %d  %d  %d   %d\r\n", ndefHeaderMB(record), ndefHeaderME(record), ndefHeaderCF(record), ndefHeaderSR(record), ndefHeaderIL(record), ndefHeaderTNF(record));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	09db      	lsrs	r3, r3, #7
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461d      	mov	r5, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	099b      	lsrs	r3, r3, #6
 80021c6:	f003 0001 	and.w	r0, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	f003 0401 	and.w	r4, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	7812      	ldrb	r2, [r2, #0]
 80021e2:	08d2      	lsrs	r2, r2, #3
 80021e4:	f002 0201 	and.w	r2, r2, #1
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	7809      	ldrb	r1, [r1, #0]
 80021ec:	f001 0107 	and.w	r1, r1, #7
 80021f0:	9102      	str	r1, [sp, #8]
 80021f2:	9201      	str	r2, [sp, #4]
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	4623      	mov	r3, r4
 80021f8:	4602      	mov	r2, r0
 80021fa:	4629      	mov	r1, r5
 80021fc:	4833      	ldr	r0, [pc, #204]	; (80022cc <ndefRecordDump+0x1a8>)
 80021fe:	f7fe f973 	bl	80004e8 <logUsart>
    }
    if ( (err != ERR_NONE) || (verbose == true) )
 8002202:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <ndefRecordDump+0xec>
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d047      	beq.n	80022a0 <ndefRecordDump+0x17c>
    {
        platformLog(" Type Name Format: %s\r\n", ndefTNFNames[ndefHeaderTNF(record)]);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	3350      	adds	r3, #80	; 0x50
 800221c:	443b      	add	r3, r7
 800221e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002222:	4619      	mov	r1, r3
 8002224:	482a      	ldr	r0, [pc, #168]	; (80022d0 <ndefRecordDump+0x1ac>)
 8002226:	f7fe f95f 	bl	80004e8 <logUsart>

        uint8_t tnf;
        ndefConstBuffer8 bufRecordType;
        ndefRecordGetType(record, &tnf, &bufRecordType);
 800222a:	f107 021c 	add.w	r2, r7, #28
 800222e:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8002232:	4619      	mov	r1, r3
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f004 f895 	bl	8006364 <ndefRecordGetType>
        if ( (tnf == NDEF_TNF_EMPTY) && (bufRecordType.length == 0U) )
 800223a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800223e:	2b00      	cmp	r3, #0
 8002240:	d107      	bne.n	8002252 <ndefRecordDump+0x12e>
 8002242:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <ndefRecordDump+0x12e>
        {
            platformLog(" Empty NDEF record\r\n");
 800224a:	4822      	ldr	r0, [pc, #136]	; (80022d4 <ndefRecordDump+0x1b0>)
 800224c:	f7fe f94c 	bl	80004e8 <logUsart>
 8002250:	e006      	b.n	8002260 <ndefRecordDump+0x13c>
        }
        else
        {
            ndefBuffer8Print(" Type: \"", &bufRecordType, "\"\r\n");
 8002252:	f107 031c 	add.w	r3, r7, #28
 8002256:	4a20      	ldr	r2, [pc, #128]	; (80022d8 <ndefRecordDump+0x1b4>)
 8002258:	4619      	mov	r1, r3
 800225a:	4820      	ldr	r0, [pc, #128]	; (80022dc <ndefRecordDump+0x1b8>)
 800225c:	f000 fccc 	bl	8002bf8 <ndefBuffer8Print>
        }

        if (ndefHeaderIsSetIL(record))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00c      	beq.n	8002286 <ndefRecordDump+0x162>
        {
            /* ID Length bit set */
            ndefConstBuffer8 bufRecordId;
            ndefRecordGetId(record, &bufRecordId);
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	4619      	mov	r1, r3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f004 f901 	bl	800647a <ndefRecordGetId>
            ndefBuffer8Print(" ID: \"", &bufRecordId, "\"\r\n");
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	4a16      	ldr	r2, [pc, #88]	; (80022d8 <ndefRecordDump+0x1b4>)
 800227e:	4619      	mov	r1, r3
 8002280:	4817      	ldr	r0, [pc, #92]	; (80022e0 <ndefRecordDump+0x1bc>)
 8002282:	f000 fcb9 	bl	8002bf8 <ndefBuffer8Print>
        }

        ndefConstBuffer bufRecordPayload;
        ndefRecordGetPayload(record, &bufRecordPayload);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f004 f946 	bl	800651e <ndefRecordGetPayload>
        ndefBufferDump(" Payload:", &bufRecordPayload, verbose);
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4619      	mov	r1, r3
 800229a:	4812      	ldr	r0, [pc, #72]	; (80022e4 <ndefRecordDump+0x1c0>)
 800229c:	f000 fbf8 	bl	8002a90 <ndefBufferDump>
    }

    return ERR_NONE;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3750      	adds	r7, #80	; 0x50
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bdb0      	pop	{r4, r5, r7, pc}
 80022aa:	bf00      	nop
 80022ac:	0801a658 	.word	0x0801a658
 80022b0:	0801a58c 	.word	0x0801a58c
 80022b4:	0801a590 	.word	0x0801a590
 80022b8:	20002fac 	.word	0x20002fac
 80022bc:	0801a59c 	.word	0x0801a59c
 80022c0:	0801a5ac 	.word	0x0801a5ac
 80022c4:	0801a5c0 	.word	0x0801a5c0
 80022c8:	0801a5d0 	.word	0x0801a5d0
 80022cc:	0801a5e8 	.word	0x0801a5e8
 80022d0:	0801a604 	.word	0x0801a604
 80022d4:	0801a61c 	.word	0x0801a61c
 80022d8:	0801a634 	.word	0x0801a634
 80022dc:	0801a638 	.word	0x0801a638
 80022e0:	0801a644 	.word	0x0801a644
 80022e4:	0801a64c 	.word	0x0801a64c

080022e8 <ndefMessageDump>:


/*****************************************************************************/
ReturnCode ndefMessageDump(const ndefMessage* message, bool verbose)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	70fb      	strb	r3, [r7, #3]
    ReturnCode  err;
    ndefRecord* record;

    if (message == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d104      	bne.n	8002304 <ndefMessageDump+0x1c>
    {
        platformLog("Empty NDEF message\r\n");
 80022fa:	4816      	ldr	r0, [pc, #88]	; (8002354 <ndefMessageDump+0x6c>)
 80022fc:	f7fe f8f4 	bl	80004e8 <logUsart>
        return ERR_NONE;
 8002300:	2300      	movs	r3, #0
 8002302:	e023      	b.n	800234c <ndefMessageDump+0x64>
    }
    else
    {
        platformLog("Decoding NDEF message\r\n");
 8002304:	4814      	ldr	r0, [pc, #80]	; (8002358 <ndefMessageDump+0x70>)
 8002306:	f7fe f8ef 	bl	80004e8 <logUsart>
    }

    record = ndefMessageGetFirstRecord(message);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <ndefMessageDump+0x2e>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	e000      	b.n	8002318 <ndefMessageDump+0x30>
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]

    while (record != NULL)
 800231a:	e013      	b.n	8002344 <ndefMessageDump+0x5c>
    {
        err = ndefRecordDump(record, verbose);
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	4619      	mov	r1, r3
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7ff feff 	bl	8002124 <ndefRecordDump>
 8002326:	4603      	mov	r3, r0
 8002328:	817b      	strh	r3, [r7, #10]
        if (err != ERR_NONE)
 800232a:	897b      	ldrh	r3, [r7, #10]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <ndefMessageDump+0x4c>
        {
            return err;
 8002330:	897b      	ldrh	r3, [r7, #10]
 8002332:	e00b      	b.n	800234c <ndefMessageDump+0x64>
        }
        record = ndefMessageGetNextRecord(record);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <ndefMessageDump+0x58>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	e000      	b.n	8002342 <ndefMessageDump+0x5a>
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
    while (record != NULL)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1e8      	bne.n	800231c <ndefMessageDump+0x34>
    }

    return ERR_NONE;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	0801a678 	.word	0x0801a678
 8002358:	0801a690 	.word	0x0801a690

0800235c <ndefEmptyTypeDump>:


/*****************************************************************************/
ReturnCode ndefEmptyTypeDump(const ndefType* empty)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
    if (empty == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <ndefEmptyTypeDump+0x12>
    {
        return ERR_PARAM;
 800236a:	2307      	movs	r3, #7
 800236c:	e009      	b.n	8002382 <ndefEmptyTypeDump+0x26>
    }

    if (empty->id != NDEF_TYPE_EMPTY)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <ndefEmptyTypeDump+0x1e>
    {
        return ERR_PARAM;
 8002376:	2307      	movs	r3, #7
 8002378:	e003      	b.n	8002382 <ndefEmptyTypeDump+0x26>
    }

    platformLog(" Empty record\r\n");
 800237a:	4804      	ldr	r0, [pc, #16]	; (800238c <ndefEmptyTypeDump+0x30>)
 800237c:	f7fe f8b4 	bl	80004e8 <logUsart>

    return ERR_NONE;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	0801a6a8 	.word	0x0801a6a8

08002390 <ndefRtdDeviceInfoDump>:


/*****************************************************************************/
ReturnCode ndefRtdDeviceInfoDump(const ndefType* devInfo)
{
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	b094      	sub	sp, #80	; 0x50
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
    ndefTypeRtdDeviceInfo devInfoData;
    uint32_t type;
    uint32_t i;

    const uint8_t* ndefDeviceInfoName[] =
 8002398:	4b40      	ldr	r3, [pc, #256]	; (800249c <ndefRtdDeviceInfoDump+0x10c>)
 800239a:	f107 040c 	add.w	r4, r7, #12
 800239e:	461d      	mov	r5, r3
 80023a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023a4:	682b      	ldr	r3, [r5, #0]
 80023a6:	6023      	str	r3, [r4, #0]
        (uint8_t*)"Device",
        (uint8_t*)"UUID",
        (uint8_t*)"Firmware version",
    };

    if (devInfo == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <ndefRtdDeviceInfoDump+0x22>
    {
        return ERR_PARAM;
 80023ae:	2307      	movs	r3, #7
 80023b0:	e070      	b.n	8002494 <ndefRtdDeviceInfoDump+0x104>
    }

    if (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d001      	beq.n	80023be <ndefRtdDeviceInfoDump+0x2e>
    {
        return ERR_PARAM;
 80023ba:	2307      	movs	r3, #7
 80023bc:	e06a      	b.n	8002494 <ndefRtdDeviceInfoDump+0x104>
    }

    ndefGetRtdDeviceInfo(devInfo, &devInfoData);
 80023be:	f107 0320 	add.w	r3, r7, #32
 80023c2:	4619      	mov	r1, r3
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f005 fd5f 	bl	8007e88 <ndefGetRtdDeviceInfo>

    platformLog(" Device Information:\r\n");
 80023ca:	4835      	ldr	r0, [pc, #212]	; (80024a0 <ndefRtdDeviceInfoDump+0x110>)
 80023cc:	f7fe f88c 	bl	80004e8 <logUsart>

    for (type = 0; type < NDEF_DEVICE_INFO_TYPE_COUNT; type++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023d4:	e05a      	b.n	800248c <ndefRtdDeviceInfoDump+0xfc>
    {
        if (devInfoData.devInfo[type].buffer != NULL)
 80023d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	3350      	adds	r3, #80	; 0x50
 80023dc:	443b      	add	r3, r7
 80023de:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d04f      	beq.n	8002486 <ndefRtdDeviceInfoDump+0xf6>
        {
            platformLog(" - %s: ", ndefDeviceInfoName[devInfoData.devInfo[type].type]);
 80023e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	3350      	adds	r3, #80	; 0x50
 80023ec:	443b      	add	r3, r7
 80023ee:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	3350      	adds	r3, #80	; 0x50
 80023f6:	443b      	add	r3, r7
 80023f8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80023fc:	4619      	mov	r1, r3
 80023fe:	4829      	ldr	r0, [pc, #164]	; (80024a4 <ndefRtdDeviceInfoDump+0x114>)
 8002400:	f7fe f872 	bl	80004e8 <logUsart>

            if (type != NDEF_DEVICE_INFO_UUID)
 8002404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002406:	2b03      	cmp	r3, #3
 8002408:	d01d      	beq.n	8002446 <ndefRtdDeviceInfoDump+0xb6>
            {
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 800240a:	2300      	movs	r3, #0
 800240c:	64bb      	str	r3, [r7, #72]	; 0x48
 800240e:	e00f      	b.n	8002430 <ndefRtdDeviceInfoDump+0xa0>
                {
                    platformLog("%c", devInfoData.devInfo[type].buffer[i]); /* character */
 8002410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	3350      	adds	r3, #80	; 0x50
 8002416:	443b      	add	r3, r7
 8002418:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800241c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	4820      	ldr	r0, [pc, #128]	; (80024a8 <ndefRtdDeviceInfoDump+0x118>)
 8002426:	f7fe f85f 	bl	80004e8 <logUsart>
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 800242a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800242c:	3301      	adds	r3, #1
 800242e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	3350      	adds	r3, #80	; 0x50
 8002436:	443b      	add	r3, r7
 8002438:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 800243c:	461a      	mov	r2, r3
 800243e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002440:	4293      	cmp	r3, r2
 8002442:	d3e5      	bcc.n	8002410 <ndefRtdDeviceInfoDump+0x80>
 8002444:	e01c      	b.n	8002480 <ndefRtdDeviceInfoDump+0xf0>
                }
            }
            else
            {
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 8002446:	2300      	movs	r3, #0
 8002448:	64bb      	str	r3, [r7, #72]	; 0x48
 800244a:	e00f      	b.n	800246c <ndefRtdDeviceInfoDump+0xdc>
                {
                    platformLog("%.2X", devInfoData.devInfo[type].buffer[i]); /* hex number */
 800244c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	3350      	adds	r3, #80	; 0x50
 8002452:	443b      	add	r3, r7
 8002454:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8002458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800245a:	4413      	add	r3, r2
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	4812      	ldr	r0, [pc, #72]	; (80024ac <ndefRtdDeviceInfoDump+0x11c>)
 8002462:	f7fe f841 	bl	80004e8 <logUsart>
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 8002466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002468:	3301      	adds	r3, #1
 800246a:	64bb      	str	r3, [r7, #72]	; 0x48
 800246c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	3350      	adds	r3, #80	; 0x50
 8002472:	443b      	add	r3, r7
 8002474:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 8002478:	461a      	mov	r2, r3
 800247a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800247c:	4293      	cmp	r3, r2
 800247e:	d3e5      	bcc.n	800244c <ndefRtdDeviceInfoDump+0xbc>
                }
            }
            platformLog("\r\n");
 8002480:	480b      	ldr	r0, [pc, #44]	; (80024b0 <ndefRtdDeviceInfoDump+0x120>)
 8002482:	f7fe f831 	bl	80004e8 <logUsart>
    for (type = 0; type < NDEF_DEVICE_INFO_TYPE_COUNT; type++)
 8002486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002488:	3301      	adds	r3, #1
 800248a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800248c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800248e:	2b04      	cmp	r3, #4
 8002490:	d9a1      	bls.n	80023d6 <ndefRtdDeviceInfoDump+0x46>
        }
    }

    return ERR_NONE;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3750      	adds	r7, #80	; 0x50
 8002498:	46bd      	mov	sp, r7
 800249a:	bdb0      	pop	{r4, r5, r7, pc}
 800249c:	0801a6e8 	.word	0x0801a6e8
 80024a0:	0801a6b8 	.word	0x0801a6b8
 80024a4:	0801a6d0 	.word	0x0801a6d0
 80024a8:	0801a6d8 	.word	0x0801a6d8
 80024ac:	0801a6dc 	.word	0x0801a6dc
 80024b0:	0801a6e4 	.word	0x0801a6e4

080024b4 <ndefRtdTextDump>:


/*****************************************************************************/
ReturnCode ndefRtdTextDump(const ndefType* text)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
    uint8_t utfEncoding;
    ndefConstBuffer8 bufLanguageCode;
    ndefConstBuffer  bufSentence;

    if (text == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <ndefRtdTextDump+0x12>
    {
        return ERR_PARAM;
 80024c2:	2307      	movs	r3, #7
 80024c4:	e027      	b.n	8002516 <ndefRtdTextDump+0x62>
    }

    if (text->id != NDEF_TYPE_RTD_TEXT)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d001      	beq.n	80024d2 <ndefRtdTextDump+0x1e>
    {
        return ERR_PARAM;
 80024ce:	2307      	movs	r3, #7
 80024d0:	e021      	b.n	8002516 <ndefRtdTextDump+0x62>
    }

    ndefGetRtdText(text, &utfEncoding, &bufLanguageCode, &bufSentence);
 80024d2:	f107 030c 	add.w	r3, r7, #12
 80024d6:	f107 0214 	add.w	r2, r7, #20
 80024da:	f107 011f 	add.w	r1, r7, #31
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f005 ff04 	bl	80082ec <ndefGetRtdText>

    ndefBufferPrint(" Text: \"", &bufSentence, "");
 80024e4:	f107 030c 	add.w	r3, r7, #12
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <ndefRtdTextDump+0x6c>)
 80024ea:	4619      	mov	r1, r3
 80024ec:	480d      	ldr	r0, [pc, #52]	; (8002524 <ndefRtdTextDump+0x70>)
 80024ee:	f000 fb33 	bl	8002b58 <ndefBufferPrint>

    platformLog("\" (%s,", utfEncoding == TEXT_ENCODING_UTF8 ? "UTF8" : "UTF16");
 80024f2:	7ffb      	ldrb	r3, [r7, #31]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <ndefRtdTextDump+0x48>
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <ndefRtdTextDump+0x74>)
 80024fa:	e000      	b.n	80024fe <ndefRtdTextDump+0x4a>
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <ndefRtdTextDump+0x78>)
 80024fe:	4619      	mov	r1, r3
 8002500:	480b      	ldr	r0, [pc, #44]	; (8002530 <ndefRtdTextDump+0x7c>)
 8002502:	f7fd fff1 	bl	80004e8 <logUsart>

    ndefBuffer8Print(" language code \"", &bufLanguageCode, "\")\r\n");
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <ndefRtdTextDump+0x80>)
 800250c:	4619      	mov	r1, r3
 800250e:	480a      	ldr	r0, [pc, #40]	; (8002538 <ndefRtdTextDump+0x84>)
 8002510:	f000 fb72 	bl	8002bf8 <ndefBuffer8Print>

    return ERR_NONE;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	0801a58c 	.word	0x0801a58c
 8002524:	0801a6fc 	.word	0x0801a6fc
 8002528:	0801a708 	.word	0x0801a708
 800252c:	0801a710 	.word	0x0801a710
 8002530:	0801a718 	.word	0x0801a718
 8002534:	0801a720 	.word	0x0801a720
 8002538:	0801a728 	.word	0x0801a728

0800253c <ndefRtdUriDump>:


/*****************************************************************************/
ReturnCode ndefRtdUriDump(const ndefType* uri)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufProtocol;
    ndefConstBuffer bufUriString;

    if (uri == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <ndefRtdUriDump+0x12>
    {
        return ERR_PARAM;
 800254a:	2307      	movs	r3, #7
 800254c:	e01c      	b.n	8002588 <ndefRtdUriDump+0x4c>
    }

    if (uri->id != NDEF_TYPE_RTD_URI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d001      	beq.n	800255a <ndefRtdUriDump+0x1e>
    {
        return ERR_PARAM;
 8002556:	2307      	movs	r3, #7
 8002558:	e016      	b.n	8002588 <ndefRtdUriDump+0x4c>
    }

    ndefGetRtdUri(uri, &bufProtocol, &bufUriString);
 800255a:	f107 0208 	add.w	r2, r7, #8
 800255e:	f107 0310 	add.w	r3, r7, #16
 8002562:	4619      	mov	r1, r3
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f006 f8a7 	bl	80086b8 <ndefGetRtdUri>

    ndefBufferPrint("URI: (", &bufProtocol, ")");
 800256a:	f107 0310 	add.w	r3, r7, #16
 800256e:	4a08      	ldr	r2, [pc, #32]	; (8002590 <ndefRtdUriDump+0x54>)
 8002570:	4619      	mov	r1, r3
 8002572:	4808      	ldr	r0, [pc, #32]	; (8002594 <ndefRtdUriDump+0x58>)
 8002574:	f000 faf0 	bl	8002b58 <ndefBufferPrint>
    ndefBufferPrint("", &bufUriString, "\r\n");
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	4a06      	ldr	r2, [pc, #24]	; (8002598 <ndefRtdUriDump+0x5c>)
 800257e:	4619      	mov	r1, r3
 8002580:	4806      	ldr	r0, [pc, #24]	; (800259c <ndefRtdUriDump+0x60>)
 8002582:	f000 fae9 	bl	8002b58 <ndefBufferPrint>

    return ERR_NONE;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	0801a73c 	.word	0x0801a73c
 8002594:	0801a740 	.word	0x0801a740
 8002598:	0801a6e4 	.word	0x0801a6e4
 800259c:	0801a58c 	.word	0x0801a58c

080025a0 <ndefRtdAarDump>:


/*****************************************************************************/
ReturnCode ndefRtdAarDump(const ndefType* aar)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufAarString;

    if (aar == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <ndefRtdAarDump+0x12>
    {
        return ERR_PARAM;
 80025ae:	2307      	movs	r3, #7
 80025b0:	e013      	b.n	80025da <ndefRtdAarDump+0x3a>
    }

    if (aar->id != NDEF_TYPE_RTD_AAR)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d001      	beq.n	80025be <ndefRtdAarDump+0x1e>
    {
        return ERR_PARAM;
 80025ba:	2307      	movs	r3, #7
 80025bc:	e00d      	b.n	80025da <ndefRtdAarDump+0x3a>
    }

    ndefGetRtdAar(aar, &bufAarString);
 80025be:	f107 0308 	add.w	r3, r7, #8
 80025c2:	4619      	mov	r1, r3
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f006 f975 	bl	80088b4 <ndefGetRtdAar>

    ndefBufferPrint(" AAR Package: ", &bufAarString, "\r\n");
 80025ca:	f107 0308 	add.w	r3, r7, #8
 80025ce:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <ndefRtdAarDump+0x44>)
 80025d0:	4619      	mov	r1, r3
 80025d2:	4805      	ldr	r0, [pc, #20]	; (80025e8 <ndefRtdAarDump+0x48>)
 80025d4:	f000 fac0 	bl	8002b58 <ndefBufferPrint>

    return ERR_NONE;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	0801a6e4 	.word	0x0801a6e4
 80025e8:	0801a748 	.word	0x0801a748

080025ec <ndefMediaVCardTranslate>:
}


/*****************************************************************************/
static ReturnCode ndefMediaVCardTranslate(const ndefConstBuffer* bufText, ndefConstBuffer* bufTranslation)
{
 80025ec:	b5b0      	push	{r4, r5, r7, lr}
 80025ee:	b096      	sub	sp, #88	; 0x58
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
    typedef struct {
        uint8_t* vCardString;
        uint8_t* english;
    } ndefTranslate;

    const ndefTranslate translate[] =
 80025f6:	4a2b      	ldr	r2, [pc, #172]	; (80026a4 <ndefMediaVCardTranslate+0xb8>)
 80025f8:	f107 030c 	add.w	r3, r7, #12
 80025fc:	4611      	mov	r1, r2
 80025fe:	2248      	movs	r2, #72	; 0x48
 8002600:	4618      	mov	r0, r3
 8002602:	f016 fb85 	bl	8018d10 <memcpy>
        { (uint8_t*)"PHOTO"        , (uint8_t*)"Photo"          },
    };

    uint32_t i;

    if ( (bufText == NULL) || (bufTranslation == NULL) )
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <ndefMediaVCardTranslate+0x26>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <ndefMediaVCardTranslate+0x2a>
    {
        return ERR_PROTO;
 8002612:	230b      	movs	r3, #11
 8002614:	e041      	b.n	800269a <ndefMediaVCardTranslate+0xae>
    }

    for (i = 0; i < SIZEOF_ARRAY(translate); i++)
 8002616:	2300      	movs	r3, #0
 8002618:	657b      	str	r3, [r7, #84]	; 0x54
 800261a:	e032      	b.n	8002682 <ndefMediaVCardTranslate+0x96>
    {
        if (ST_BYTECMP(bufText->buffer, translate[i].vCardString, strlen((char*)translate[i].vCardString)) == 0)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681c      	ldr	r4, [r3, #0]
 8002620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	3358      	adds	r3, #88	; 0x58
 8002626:	443b      	add	r3, r7
 8002628:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 800262c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	3358      	adds	r3, #88	; 0x58
 8002632:	443b      	add	r3, r7
 8002634:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fd fd9f 	bl	800017c <strlen>
 800263e:	4603      	mov	r3, r0
 8002640:	461a      	mov	r2, r3
 8002642:	4629      	mov	r1, r5
 8002644:	4620      	mov	r0, r4
 8002646:	f016 fb53 	bl	8018cf0 <memcmp>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d115      	bne.n	800267c <ndefMediaVCardTranslate+0x90>
        {
            bufTranslation->buffer = translate[i].english;
 8002650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	3358      	adds	r3, #88	; 0x58
 8002656:	443b      	add	r3, r7
 8002658:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	601a      	str	r2, [r3, #0]
            bufTranslation->length = strlen((char*)translate[i].english);
 8002660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	3358      	adds	r3, #88	; 0x58
 8002666:	443b      	add	r3, r7
 8002668:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800266c:	4618      	mov	r0, r3
 800266e:	f7fd fd85 	bl	800017c <strlen>
 8002672:	4602      	mov	r2, r0
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	605a      	str	r2, [r3, #4]

            return ERR_NONE;
 8002678:	2300      	movs	r3, #0
 800267a:	e00e      	b.n	800269a <ndefMediaVCardTranslate+0xae>
    for (i = 0; i < SIZEOF_ARRAY(translate); i++)
 800267c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800267e:	3301      	adds	r3, #1
 8002680:	657b      	str	r3, [r7, #84]	; 0x54
 8002682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002684:	2b08      	cmp	r3, #8
 8002686:	d9c9      	bls.n	800261c <ndefMediaVCardTranslate+0x30>
        }
    }

    bufTranslation->buffer = bufText->buffer;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	601a      	str	r2, [r3, #0]
    bufTranslation->length = bufText->length;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3758      	adds	r7, #88	; 0x58
 800269e:	46bd      	mov	sp, r7
 80026a0:	bdb0      	pop	{r4, r5, r7, pc}
 80026a2:	bf00      	nop
 80026a4:	0801a774 	.word	0x0801a774

080026a8 <ndefMediaVCardDump>:


/*****************************************************************************/
ReturnCode ndefMediaVCardDump(const ndefType* vCard)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b0a6      	sub	sp, #152	; 0x98
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufTypeN     = { (uint8_t*)"N",     strlen((char*)"N")     };
 80026b0:	4a5e      	ldr	r2, [pc, #376]	; (800282c <ndefMediaVCardDump+0x184>)
 80026b2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80026b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026ba:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeFN    = { (uint8_t*)"FN",    strlen((char*)"FN")    };
 80026be:	4a5c      	ldr	r2, [pc, #368]	; (8002830 <ndefMediaVCardDump+0x188>)
 80026c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80026c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026c8:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeADR   = { (uint8_t*)"ADR",   strlen((char*)"ADR")   };
 80026cc:	4a59      	ldr	r2, [pc, #356]	; (8002834 <ndefMediaVCardDump+0x18c>)
 80026ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026d6:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeTEL   = { (uint8_t*)"TEL",   strlen((char*)"TEL")   };
 80026da:	4a57      	ldr	r2, [pc, #348]	; (8002838 <ndefMediaVCardDump+0x190>)
 80026dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026e4:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeEMAIL = { (uint8_t*)"EMAIL", strlen((char*)"EMAIL") };
 80026e8:	4a54      	ldr	r2, [pc, #336]	; (800283c <ndefMediaVCardDump+0x194>)
 80026ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026f2:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeTITLE = { (uint8_t*)"TITLE", strlen((char*)"TITLE") };
 80026f6:	4a52      	ldr	r2, [pc, #328]	; (8002840 <ndefMediaVCardDump+0x198>)
 80026f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80026fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002700:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeORG   = { (uint8_t*)"ORG",   strlen((char*)"ORG")   };
 8002704:	4a4f      	ldr	r2, [pc, #316]	; (8002844 <ndefMediaVCardDump+0x19c>)
 8002706:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800270a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800270e:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeURL   = { (uint8_t*)"URL",   strlen((char*)"URL")   };
 8002712:	4a4d      	ldr	r2, [pc, #308]	; (8002848 <ndefMediaVCardDump+0x1a0>)
 8002714:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800271c:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypePHOTO = { (uint8_t*)"PHOTO", strlen((char*)"PHOTO") };
 8002720:	4a4a      	ldr	r2, [pc, #296]	; (800284c <ndefMediaVCardDump+0x1a4>)
 8002722:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002726:	e892 0003 	ldmia.w	r2, {r0, r1}
 800272a:	e883 0003 	stmia.w	r3, {r0, r1}

    const ndefConstBuffer* bufVCardField[] = {
 800272e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
 8002734:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
 800273a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002740:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002744:	633b      	str	r3, [r7, #48]	; 0x30
 8002746:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
 800274c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002750:	63bb      	str	r3, [r7, #56]	; 0x38
 8002752:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002758:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800275c:	643b      	str	r3, [r7, #64]	; 0x40
 800275e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002762:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t i;
    const ndefConstBuffer* bufType;
    ndefConstBuffer        bufSubType;
    ndefConstBuffer        bufValue;

    if (vCard == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <ndefMediaVCardDump+0xc6>
    {
        return ERR_PARAM;
 800276a:	2307      	movs	r3, #7
 800276c:	e059      	b.n	8002822 <ndefMediaVCardDump+0x17a>
    }

    if (vCard->id != NDEF_TYPE_MEDIA_VCARD)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b06      	cmp	r3, #6
 8002774:	d001      	beq.n	800277a <ndefMediaVCardDump+0xd2>
    {
        return ERR_PARAM;
 8002776:	2307      	movs	r3, #7
 8002778:	e053      	b.n	8002822 <ndefMediaVCardDump+0x17a>
    }

    platformLog(" vCard decoded: \r\n");
 800277a:	4835      	ldr	r0, [pc, #212]	; (8002850 <ndefMediaVCardDump+0x1a8>)
 800277c:	f7fd feb4 	bl	80004e8 <logUsart>

    for (i = 0; i < SIZEOF_ARRAY(bufVCardField); i++)
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002786:	e047      	b.n	8002818 <ndefMediaVCardDump+0x170>
    {
        /* Requesting vCard field */
        bufType = bufVCardField[i];
 8002788:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	3398      	adds	r3, #152	; 0x98
 8002790:	443b      	add	r3, r7
 8002792:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /* Get information from vCard */
        ndefGetVCard(vCard, bufType, &bufSubType, &bufValue);
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	f107 021c 	add.w	r2, r7, #28
 80027a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f004 ff5a 	bl	8007660 <ndefGetVCard>

        if (bufValue.buffer != NULL)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d02d      	beq.n	800280e <ndefMediaVCardDump+0x166>
        {
            ndefConstBuffer bufTypeTranslate;
            ndefMediaVCardTranslate(bufType, &bufTypeTranslate);
 80027b2:	f107 030c 	add.w	r3, r7, #12
 80027b6:	4619      	mov	r1, r3
 80027b8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80027bc:	f7ff ff16 	bl	80025ec <ndefMediaVCardTranslate>

            /* Type */
            ndefBufferPrint(" ", &bufTypeTranslate, "");
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	4a23      	ldr	r2, [pc, #140]	; (8002854 <ndefMediaVCardDump+0x1ac>)
 80027c6:	4619      	mov	r1, r3
 80027c8:	4823      	ldr	r0, [pc, #140]	; (8002858 <ndefMediaVCardDump+0x1b0>)
 80027ca:	f000 f9c5 	bl	8002b58 <ndefBufferPrint>

            /* Subtype, if any */
            if (bufSubType.buffer != NULL)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d006      	beq.n	80027e2 <ndefMediaVCardDump+0x13a>
            {
                ndefBufferPrint(" (", &bufSubType, ")");
 80027d4:	f107 031c 	add.w	r3, r7, #28
 80027d8:	4a20      	ldr	r2, [pc, #128]	; (800285c <ndefMediaVCardDump+0x1b4>)
 80027da:	4619      	mov	r1, r3
 80027dc:	4820      	ldr	r0, [pc, #128]	; (8002860 <ndefMediaVCardDump+0x1b8>)
 80027de:	f000 f9bb 	bl	8002b58 <ndefBufferPrint>
            }

            /* Value */
            if (ST_BYTECMP(bufType->buffer, bufTypePHOTO.buffer, bufTypePHOTO.length) != 0)
 80027e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80027ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027ec:	4618      	mov	r0, r3
 80027ee:	f016 fa7f 	bl	8018cf0 <memcmp>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <ndefMediaVCardDump+0x160>
            {
                ndefBufferPrint(": ", &bufValue, "\r\n");
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	4a19      	ldr	r2, [pc, #100]	; (8002864 <ndefMediaVCardDump+0x1bc>)
 80027fe:	4619      	mov	r1, r3
 8002800:	4819      	ldr	r0, [pc, #100]	; (8002868 <ndefMediaVCardDump+0x1c0>)
 8002802:	f000 f9a9 	bl	8002b58 <ndefBufferPrint>
 8002806:	e002      	b.n	800280e <ndefMediaVCardDump+0x166>
            }
            else
            {
                platformLog("Photo: <Not displayed>\r\n");
 8002808:	4818      	ldr	r0, [pc, #96]	; (800286c <ndefMediaVCardDump+0x1c4>)
 800280a:	f7fd fe6d 	bl	80004e8 <logUsart>
    for (i = 0; i < SIZEOF_ARRAY(bufVCardField); i++)
 800280e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002812:	3301      	adds	r3, #1
 8002814:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002818:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800281c:	2b08      	cmp	r3, #8
 800281e:	d9b3      	bls.n	8002788 <ndefMediaVCardDump+0xe0>
            }
        }
    }

    return ERR_NONE;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3798      	adds	r7, #152	; 0x98
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	0801a7f8 	.word	0x0801a7f8
 8002830:	0801a800 	.word	0x0801a800
 8002834:	0801a808 	.word	0x0801a808
 8002838:	0801a810 	.word	0x0801a810
 800283c:	0801a818 	.word	0x0801a818
 8002840:	0801a820 	.word	0x0801a820
 8002844:	0801a828 	.word	0x0801a828
 8002848:	0801a830 	.word	0x0801a830
 800284c:	0801a838 	.word	0x0801a838
 8002850:	0801a7bc 	.word	0x0801a7bc
 8002854:	0801a58c 	.word	0x0801a58c
 8002858:	0801a7d0 	.word	0x0801a7d0
 800285c:	0801a73c 	.word	0x0801a73c
 8002860:	0801a7d4 	.word	0x0801a7d4
 8002864:	0801a6e4 	.word	0x0801a6e4
 8002868:	0801a7d8 	.word	0x0801a7d8
 800286c:	0801a7dc 	.word	0x0801a7dc

08002870 <ndefMediaWifiDump>:


/*****************************************************************************/
ReturnCode ndefMediaWifiDump(const ndefType* wifi)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
    ndefTypeWifi wifiConfig;

    if (wifi == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <ndefMediaWifiDump+0x12>
    {
        return ERR_PARAM;
 800287e:	2307      	movs	r3, #7
 8002880:	e028      	b.n	80028d4 <ndefMediaWifiDump+0x64>
    }

    if (wifi->id != NDEF_TYPE_MEDIA_WIFI)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b07      	cmp	r3, #7
 8002888:	d001      	beq.n	800288e <ndefMediaWifiDump+0x1e>
    {
        return ERR_PARAM;
 800288a:	2307      	movs	r3, #7
 800288c:	e022      	b.n	80028d4 <ndefMediaWifiDump+0x64>
    }

    ndefGetWifi(wifi, &wifiConfig);
 800288e:	f107 030c 	add.w	r3, r7, #12
 8002892:	4619      	mov	r1, r3
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f004 fa37 	bl	8006d08 <ndefGetWifi>

    platformLog(" Wifi config: \r\n");
 800289a:	4810      	ldr	r0, [pc, #64]	; (80028dc <ndefMediaWifiDump+0x6c>)
 800289c:	f7fd fe24 	bl	80004e8 <logUsart>
    ndefBufferDump(" Network SSID:",       &wifiConfig.bufNetworkSSID, false);
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	2200      	movs	r2, #0
 80028a6:	4619      	mov	r1, r3
 80028a8:	480d      	ldr	r0, [pc, #52]	; (80028e0 <ndefMediaWifiDump+0x70>)
 80028aa:	f000 f8f1 	bl	8002a90 <ndefBufferDump>
    ndefBufferDump(" Network Key:",        &wifiConfig.bufNetworkKey, false);
 80028ae:	f107 030c 	add.w	r3, r7, #12
 80028b2:	3308      	adds	r3, #8
 80028b4:	2200      	movs	r2, #0
 80028b6:	4619      	mov	r1, r3
 80028b8:	480a      	ldr	r0, [pc, #40]	; (80028e4 <ndefMediaWifiDump+0x74>)
 80028ba:	f000 f8e9 	bl	8002a90 <ndefBufferDump>
    platformLog(" Authentication: %d\r\n",  wifiConfig.authentication);
 80028be:	7f3b      	ldrb	r3, [r7, #28]
 80028c0:	4619      	mov	r1, r3
 80028c2:	4809      	ldr	r0, [pc, #36]	; (80028e8 <ndefMediaWifiDump+0x78>)
 80028c4:	f7fd fe10 	bl	80004e8 <logUsart>
    platformLog(" Encryption: %d\r\n",      wifiConfig.encryption);
 80028c8:	7f7b      	ldrb	r3, [r7, #29]
 80028ca:	4619      	mov	r1, r3
 80028cc:	4807      	ldr	r0, [pc, #28]	; (80028ec <ndefMediaWifiDump+0x7c>)
 80028ce:	f7fd fe0b 	bl	80004e8 <logUsart>

    return ERR_NONE;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	0801a840 	.word	0x0801a840
 80028e0:	0801a854 	.word	0x0801a854
 80028e4:	0801a864 	.word	0x0801a864
 80028e8:	0801a874 	.word	0x0801a874
 80028ec:	0801a88c 	.word	0x0801a88c

080028f0 <ndefRecordDumpType>:


/*****************************************************************************/
ReturnCode ndefRecordDumpType(const ndefRecord* record)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b0c8      	sub	sp, #288	; 0x120
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80028fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028fe:	6018      	str	r0, [r3, #0]
    ReturnCode err;
    ndefType   type;
    uint32_t i;

    err = ndefRecordToType(record, &type);
 8002900:	f107 020c 	add.w	r2, r7, #12
 8002904:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002908:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800290c:	4611      	mov	r1, r2
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	f004 fbcc 	bl	80070ac <ndefRecordToType>
 8002914:	4603      	mov	r3, r0
 8002916:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
    if (err != ERR_NONE)
 800291a:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <ndefRecordDumpType+0x38>
    {
        return err;
 8002922:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8002926:	e02d      	b.n	8002984 <ndefRecordDumpType+0x94>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeDumpTable); i++)
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800292e:	e024      	b.n	800297a <ndefRecordDumpType+0x8a>
    {
        if (type.id == typeDumpTable[i].typeId)
 8002930:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002934:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	4915      	ldr	r1, [pc, #84]	; (8002990 <ndefRecordDumpType+0xa0>)
 800293c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002940:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8002944:	429a      	cmp	r2, r3
 8002946:	d113      	bne.n	8002970 <ndefRecordDumpType+0x80>
        {
            /* Call the appropriate function to the matching record type */
            if (typeDumpTable[i].dump != NULL)
 8002948:	4a11      	ldr	r2, [pc, #68]	; (8002990 <ndefRecordDumpType+0xa0>)
 800294a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00b      	beq.n	8002970 <ndefRecordDumpType+0x80>
            {
                return typeDumpTable[i].dump(&type);
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <ndefRecordDumpType+0xa0>)
 800295a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f107 020c 	add.w	r2, r7, #12
 8002968:	4610      	mov	r0, r2
 800296a:	4798      	blx	r3
 800296c:	4603      	mov	r3, r0
 800296e:	e009      	b.n	8002984 <ndefRecordDumpType+0x94>
    for (i = 0; i < SIZEOF_ARRAY(typeDumpTable); i++)
 8002970:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002974:	3301      	adds	r3, #1
 8002976:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800297a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800297e:	2b06      	cmp	r3, #6
 8002980:	d9d6      	bls.n	8002930 <ndefRecordDumpType+0x40>
            }
        }
    }

    return ERR_NOT_IMPLEMENTED;
 8002982:	230f      	movs	r3, #15
}
 8002984:	4618      	mov	r0, r3
 8002986:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	0801a944 	.word	0x0801a944

08002994 <ndefBufferDumpLine>:


/*****************************************************************************/
static ReturnCode ndefBufferDumpLine(const uint8_t* buffer, const uint32_t offset, uint32_t lineLength, uint32_t remaining)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
    uint32_t j;

    if (buffer == NULL)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <ndefBufferDumpLine+0x18>
    {
        return ERR_PARAM;
 80029a8:	2307      	movs	r3, #7
 80029aa:	e05e      	b.n	8002a6a <ndefBufferDumpLine+0xd6>
    }

    platformLog(" [%.4X] ", offset);
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	4831      	ldr	r0, [pc, #196]	; (8002a74 <ndefBufferDumpLine+0xe0>)
 80029b0:	f7fd fd9a 	bl	80004e8 <logUsart>

    /* Dump hex data */
    for (j = 0; j < remaining; j++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	e00c      	b.n	80029d4 <ndefBufferDumpLine+0x40>
    {
        platformLog("%.2X ", buffer[offset + j]);
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	4413      	add	r3, r2
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4413      	add	r3, r2
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	4619      	mov	r1, r3
 80029c8:	482b      	ldr	r0, [pc, #172]	; (8002a78 <ndefBufferDumpLine+0xe4>)
 80029ca:	f7fd fd8d 	bl	80004e8 <logUsart>
    for (j = 0; j < remaining; j++)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	3301      	adds	r3, #1
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3ee      	bcc.n	80029ba <ndefBufferDumpLine+0x26>
    }
    /* Fill hex section if needed */
    for (j = 0; j < lineLength - remaining; j++)
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	e005      	b.n	80029ee <ndefBufferDumpLine+0x5a>
    {
        platformLog("   ");
 80029e2:	4826      	ldr	r0, [pc, #152]	; (8002a7c <ndefBufferDumpLine+0xe8>)
 80029e4:	f7fd fd80 	bl	80004e8 <logUsart>
    for (j = 0; j < lineLength - remaining; j++)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3301      	adds	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d3f3      	bcc.n	80029e2 <ndefBufferDumpLine+0x4e>
    }

    /* Dump characters */
    platformLog("|");
 80029fa:	4821      	ldr	r0, [pc, #132]	; (8002a80 <ndefBufferDumpLine+0xec>)
 80029fc:	f7fd fd74 	bl	80004e8 <logUsart>
    for (j = 0; j < remaining; j++)
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	e01a      	b.n	8002a3c <ndefBufferDumpLine+0xa8>
    {
        /* Dump only ASCII characters, otherwise replace with a '.' */
        platformLog("%2c", isPrintableASCII(&buffer[offset + j], 1) ? buffer[offset + j] : '.');
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4413      	add	r3, r2
 8002a10:	2101      	movs	r1, #1
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fb5a 	bl	80020cc <isPrintableASCII>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <ndefBufferDumpLine+0x98>
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	4413      	add	r3, r2
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	e000      	b.n	8002a2e <ndefBufferDumpLine+0x9a>
 8002a2c:	232e      	movs	r3, #46	; 0x2e
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4814      	ldr	r0, [pc, #80]	; (8002a84 <ndefBufferDumpLine+0xf0>)
 8002a32:	f7fd fd59 	bl	80004e8 <logUsart>
    for (j = 0; j < remaining; j++)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d3e0      	bcc.n	8002a06 <ndefBufferDumpLine+0x72>
    }
    /* Fill ASCII section if needed */
    for (j = 0; j < lineLength - remaining; j++)
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	e005      	b.n	8002a56 <ndefBufferDumpLine+0xc2>
    {
        platformLog("  ");
 8002a4a:	480f      	ldr	r0, [pc, #60]	; (8002a88 <ndefBufferDumpLine+0xf4>)
 8002a4c:	f7fd fd4c 	bl	80004e8 <logUsart>
    for (j = 0; j < lineLength - remaining; j++)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3301      	adds	r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d3f3      	bcc.n	8002a4a <ndefBufferDumpLine+0xb6>
    }
    platformLog(" |\r\n");
 8002a62:	480a      	ldr	r0, [pc, #40]	; (8002a8c <ndefBufferDumpLine+0xf8>)
 8002a64:	f7fd fd40 	bl	80004e8 <logUsart>

    return ERR_NONE;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	0801a8a0 	.word	0x0801a8a0
 8002a78:	0801a8ac 	.word	0x0801a8ac
 8002a7c:	0801a8b4 	.word	0x0801a8b4
 8002a80:	0801a8b8 	.word	0x0801a8b8
 8002a84:	0801a8bc 	.word	0x0801a8bc
 8002a88:	0801a8c0 	.word	0x0801a8c0
 8002a8c:	0801a8c4 	.word	0x0801a8c4

08002a90 <ndefBufferDump>:


/*****************************************************************************/
ReturnCode ndefBufferDump(const char* string, const ndefConstBuffer* bufPayload, bool verbose)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	71fb      	strb	r3, [r7, #7]
    uint32_t bufferLengthMax = 32;
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t lineLength = 8;
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	617b      	str	r3, [r7, #20]
    uint32_t displayed;
    uint32_t remaining;
    uint32_t offset;

    if ( (string == NULL) || (bufPayload == NULL) )
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <ndefBufferDump+0x22>
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <ndefBufferDump+0x26>
    {
        return ERR_PARAM;
 8002ab2:	2307      	movs	r3, #7
 8002ab4:	e045      	b.n	8002b42 <ndefBufferDump+0xb2>
    }

    displayed = bufPayload->length;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	623b      	str	r3, [r7, #32]
    remaining = bufPayload->length;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	61fb      	str	r3, [r7, #28]

    platformLog("%s (length %d)\r\n", string, bufPayload->length);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68f9      	ldr	r1, [r7, #12]
 8002aca:	4820      	ldr	r0, [pc, #128]	; (8002b4c <ndefBufferDump+0xbc>)
 8002acc:	f7fd fd0c 	bl	80004e8 <logUsart>
    if (bufPayload->buffer == NULL)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d104      	bne.n	8002ae2 <ndefBufferDump+0x52>
    {
        platformLog(" <No chunk payload buffer>\r\n");
 8002ad8:	481d      	ldr	r0, [pc, #116]	; (8002b50 <ndefBufferDump+0xc0>)
 8002ada:	f7fd fd05 	bl	80004e8 <logUsart>
        return ERR_NONE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e02f      	b.n	8002b42 <ndefBufferDump+0xb2>
    }

    if (verbose == true)
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <ndefBufferDump+0x5e>
    {
        bufferLengthMax = 256;
 8002ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (bufPayload->length > bufferLengthMax)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d201      	bcs.n	8002afc <ndefBufferDump+0x6c>
    {
        /* Truncate output */
        displayed = bufferLengthMax;
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	623b      	str	r3, [r7, #32]
    }

    for (offset = 0; offset < displayed; offset += lineLength)
 8002afc:	2300      	movs	r3, #0
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	e012      	b.n	8002b28 <ndefBufferDump+0x98>
    {
        ndefBufferDumpLine(bufPayload->buffer, offset, lineLength, remaining > lineLength ? lineLength : remaining);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	bf28      	it	cs
 8002b0e:	4613      	movcs	r3, r2
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	69b9      	ldr	r1, [r7, #24]
 8002b14:	f7ff ff3e 	bl	8002994 <ndefBufferDumpLine>
        remaining -= lineLength;
 8002b18:	69fa      	ldr	r2, [r7, #28]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	61fb      	str	r3, [r7, #28]
    for (offset = 0; offset < displayed; offset += lineLength)
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	4413      	add	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d3e8      	bcc.n	8002b02 <ndefBufferDump+0x72>
    }

    if (displayed < bufPayload->length)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	6a3a      	ldr	r2, [r7, #32]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d202      	bcs.n	8002b40 <ndefBufferDump+0xb0>
    {
        platformLog(" ... (truncated)\r\n");
 8002b3a:	4806      	ldr	r0, [pc, #24]	; (8002b54 <ndefBufferDump+0xc4>)
 8002b3c:	f7fd fcd4 	bl	80004e8 <logUsart>
    }

    return ERR_NONE;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3728      	adds	r7, #40	; 0x28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	0801a8cc 	.word	0x0801a8cc
 8002b50:	0801a8e0 	.word	0x0801a8e0
 8002b54:	0801a900 	.word	0x0801a900

08002b58 <ndefBufferPrint>:


/*****************************************************************************/
ReturnCode ndefBufferPrint(const char* prefix, const ndefConstBuffer* bufString, const char* suffix)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint8_t test = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	74fb      	strb	r3, [r7, #19]

    if ( (prefix == NULL) || (bufString == NULL) || (bufString->buffer == NULL) || (suffix  == NULL))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <ndefBufferPrint+0x2a>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d006      	beq.n	8002b82 <ndefBufferPrint+0x2a>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <ndefBufferPrint+0x2a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <ndefBufferPrint+0x2e>
    {
        return ERR_PARAM;
 8002b82:	2307      	movs	r3, #7
 8002b84:	e02c      	b.n	8002be0 <ndefBufferPrint+0x88>
    }

    platformLog("%s", prefix);
 8002b86:	68f9      	ldr	r1, [r7, #12]
 8002b88:	4817      	ldr	r0, [pc, #92]	; (8002be8 <ndefBufferPrint+0x90>)
 8002b8a:	f7fd fcad 	bl	80004e8 <logUsart>
    for (i = 0; i < bufString->length; i++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e00e      	b.n	8002bb2 <ndefBufferPrint+0x5a>
    {
        platformLog("%c", bufString->buffer[i]);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4812      	ldr	r0, [pc, #72]	; (8002bec <ndefBufferPrint+0x94>)
 8002ba2:	f7fd fca1 	bl	80004e8 <logUsart>
        test++;
 8002ba6:	7cfb      	ldrb	r3, [r7, #19]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	74fb      	strb	r3, [r7, #19]
    for (i = 0; i < bufString->length; i++)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d3eb      	bcc.n	8002b94 <ndefBufferPrint+0x3c>
    }
    platformLog("%s", suffix);
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	480a      	ldr	r0, [pc, #40]	; (8002be8 <ndefBufferPrint+0x90>)
 8002bc0:	f7fd fc92 	bl	80004e8 <logUsart>

        switch(test)
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d105      	bne.n	8002bd6 <ndefBufferPrint+0x7e>
            {

                case 4:
                	platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8002bca:	2201      	movs	r2, #1
 8002bcc:	2110      	movs	r1, #16
 8002bce:	4808      	ldr	r0, [pc, #32]	; (8002bf0 <ndefBufferPrint+0x98>)
 8002bd0:	f001 fe4b 	bl	800486a <HAL_GPIO_WritePin>
                    break;
 8002bd4:	e003      	b.n	8002bde <ndefBufferPrint+0x86>
//                case NDEF_DEMO_FORMAT_TAG:
//
//                    break;

                default:
                	platformLog("Selection exit\r\n");
 8002bd6:	4807      	ldr	r0, [pc, #28]	; (8002bf4 <ndefBufferPrint+0x9c>)
 8002bd8:	f7fd fc86 	bl	80004e8 <logUsart>
                    break;
 8002bdc:	bf00      	nop
            }

    //platformLog("%d\n\r", test);

    return ERR_NONE;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	0801a914 	.word	0x0801a914
 8002bec:	0801a6d8 	.word	0x0801a6d8
 8002bf0:	40020400 	.word	0x40020400
 8002bf4:	0801a918 	.word	0x0801a918

08002bf8 <ndefBuffer8Print>:


/*****************************************************************************/
ReturnCode ndefBuffer8Print(const char* prefix, const ndefConstBuffer8* bufString, const char* suffix)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
    ndefConstBuffer buf;

    if (bufString == NULL)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <ndefBuffer8Print+0x16>
    {
        return ERR_PARAM;
 8002c0a:	2307      	movs	r3, #7
 8002c0c:	e00d      	b.n	8002c2a <ndefBuffer8Print+0x32>
    }

    buf.buffer = bufString->buffer;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	613b      	str	r3, [r7, #16]
    buf.length = bufString->length;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	791b      	ldrb	r3, [r3, #4]
 8002c18:	617b      	str	r3, [r7, #20]

    return ndefBufferPrint(prefix, &buf, suffix);
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4619      	mov	r1, r3
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f7ff ff98 	bl	8002b58 <ndefBufferPrint>
 8002c28:	4603      	mov	r3, r0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <spiInit>:

SPI_HandleTypeDef *pSpi = 0;


void spiInit(SPI_HandleTypeDef *hspi)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
    pSpi = hspi;
 8002c3c:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <spiInit+0x28>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6013      	str	r3, [r2, #0]

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c50:	601a      	str	r2, [r3, #0]
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	20003078 	.word	0x20003078

08002c60 <spiTxRx>:
{
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
}

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{  
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	80fb      	strh	r3, [r7, #6]
  if(pSpi == 0)
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <spiTxRx+0x6c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <spiTxRx+0x1a>
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e024      	b.n	8002cc4 <spiTxRx+0x64>
  
  if(length > SPI_BUF_LEN)
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	2b61      	cmp	r3, #97	; 0x61
 8002c7e:	d901      	bls.n	8002c84 <spiTxRx+0x24>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e01f      	b.n	8002cc4 <spiTxRx+0x64>
  }
  
  /* Initialize Tx data*/
  if(txData != NULL)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d006      	beq.n	8002c98 <spiTxRx+0x38>
  {
    memcpy(txBuf, txData, length );
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	68f9      	ldr	r1, [r7, #12]
 8002c90:	480f      	ldr	r0, [pc, #60]	; (8002cd0 <spiTxRx+0x70>)
 8002c92:	f016 f83d 	bl	8018d10 <memcpy>
 8002c96:	e005      	b.n	8002ca4 <spiTxRx+0x44>
  }
  else
  {
    memset(txBuf, 0x00, length );
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <spiTxRx+0x70>)
 8002ca0:	f016 f85e 	bl	8018d60 <memset>
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <spiTxRx+0x6c>)
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <spiTxRx+0x52>
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	e000      	b.n	8002cb4 <spiTxRx+0x54>
 8002cb2:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <spiTxRx+0x74>)
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002cba:	9100      	str	r1, [sp, #0]
 8002cbc:	4904      	ldr	r1, [pc, #16]	; (8002cd0 <spiTxRx+0x70>)
 8002cbe:	f002 fca6 	bl	800560e <HAL_SPI_TransmitReceive>
 8002cc2:	4603      	mov	r3, r0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20003078 	.word	0x20003078
 8002cd0:	20002fb0 	.word	0x20002fb0
 8002cd4:	20003014 	.word	0x20003014

08002cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002cde:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <HAL_MspInit+0x5c>)
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <HAL_MspInit+0x5c>)
 8002ce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ce8:	6253      	str	r3, [r2, #36]	; 0x24
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <HAL_MspInit+0x5c>)
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <HAL_MspInit+0x5c>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4a0e      	ldr	r2, [pc, #56]	; (8002d34 <HAL_MspInit+0x5c>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6213      	str	r3, [r2, #32]
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <HAL_MspInit+0x5c>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_MspInit+0x5c>)
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	4a08      	ldr	r2, [pc, #32]	; (8002d34 <HAL_MspInit+0x5c>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6253      	str	r3, [r2, #36]	; 0x24
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_MspInit+0x5c>)
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d26:	2007      	movs	r0, #7
 8002d28:	f001 fbb6 	bl	8004498 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <HAL_SPI_MspInit+0x7c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d127      	bne.n	8002daa <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d5a:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <HAL_SPI_MspInit+0x80>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a16      	ldr	r2, [pc, #88]	; (8002db8 <HAL_SPI_MspInit+0x80>)
 8002d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d64:	6213      	str	r3, [r2, #32]
 8002d66:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <HAL_SPI_MspInit+0x80>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <HAL_SPI_MspInit+0x80>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	4a10      	ldr	r2, [pc, #64]	; (8002db8 <HAL_SPI_MspInit+0x80>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	61d3      	str	r3, [r2, #28]
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_SPI_MspInit+0x80>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d8a:	23e0      	movs	r3, #224	; 0xe0
 8002d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d96:	2303      	movs	r3, #3
 8002d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d9a:	2305      	movs	r3, #5
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	4619      	mov	r1, r3
 8002da4:	4805      	ldr	r0, [pc, #20]	; (8002dbc <HAL_SPI_MspInit+0x84>)
 8002da6:	f001 fbb9 	bl	800451c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002daa:	bf00      	nop
 8002dac:	3728      	adds	r7, #40	; 0x28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40013000 	.word	0x40013000
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40020000 	.word	0x40020000

08002dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	; 0x28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <HAL_UART_MspInit+0x7c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d127      	bne.n	8002e32 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002de2:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <HAL_UART_MspInit+0x80>)
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	4a16      	ldr	r2, [pc, #88]	; (8002e40 <HAL_UART_MspInit+0x80>)
 8002de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dec:	6253      	str	r3, [r2, #36]	; 0x24
 8002dee:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <HAL_UART_MspInit+0x80>)
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfa:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_UART_MspInit+0x80>)
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	4a10      	ldr	r2, [pc, #64]	; (8002e40 <HAL_UART_MspInit+0x80>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	61d3      	str	r3, [r2, #28]
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_UART_MspInit+0x80>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e12:	230c      	movs	r3, #12
 8002e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e22:	2307      	movs	r3, #7
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4805      	ldr	r0, [pc, #20]	; (8002e44 <HAL_UART_MspInit+0x84>)
 8002e2e:	f001 fb75 	bl	800451c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e32:	bf00      	nop
 8002e34:	3728      	adds	r7, #40	; 0x28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40004400 	.word	0x40004400
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40020000 	.word	0x40020000

08002e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e4c:	e7fe      	b.n	8002e4c <NMI_Handler+0x4>

08002e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e52:	e7fe      	b.n	8002e52 <HardFault_Handler+0x4>

08002e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e58:	e7fe      	b.n	8002e58 <MemManage_Handler+0x4>

08002e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e5e:	e7fe      	b.n	8002e5e <BusFault_Handler+0x4>

08002e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e64:	e7fe      	b.n	8002e64 <UsageFault_Handler+0x4>

08002e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr

08002e72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e72:	b480      	push	{r7}
 8002e74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e8e:	f001 f9f9 	bl	8004284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f001 fd16 	bl	80048cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  st25r3911Isr();
 8002ea0:	f000 ffe8 	bl	8003e74 <st25r3911Isr>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002eb0:	4a14      	ldr	r2, [pc, #80]	; (8002f04 <_sbrk+0x5c>)
 8002eb2:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <_sbrk+0x60>)
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ebc:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <_sbrk+0x64>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d102      	bne.n	8002eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <_sbrk+0x64>)
 8002ec6:	4a12      	ldr	r2, [pc, #72]	; (8002f10 <_sbrk+0x68>)
 8002ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <_sbrk+0x64>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d207      	bcs.n	8002ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ed8:	f015 fee0 	bl	8018c9c <__errno>
 8002edc:	4603      	mov	r3, r0
 8002ede:	220c      	movs	r2, #12
 8002ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee6:	e009      	b.n	8002efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ee8:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <_sbrk+0x64>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eee:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <_sbrk+0x64>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <_sbrk+0x64>)
 8002ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002efa:	68fb      	ldr	r3, [r7, #12]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20014000 	.word	0x20014000
 8002f08:	00000400 	.word	0x00000400
 8002f0c:	2000307c 	.word	0x2000307c
 8002f10:	20003d38 	.word	0x20003d38

08002f14 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f20:	480c      	ldr	r0, [pc, #48]	; (8002f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f22:	490d      	ldr	r1, [pc, #52]	; (8002f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f24:	4a0d      	ldr	r2, [pc, #52]	; (8002f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f28:	e002      	b.n	8002f30 <LoopCopyDataInit>

08002f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f2e:	3304      	adds	r3, #4

08002f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f34:	d3f9      	bcc.n	8002f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f38:	4c0a      	ldr	r4, [pc, #40]	; (8002f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f3c:	e001      	b.n	8002f42 <LoopFillZerobss>

08002f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f40:	3204      	adds	r2, #4

08002f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f44:	d3fb      	bcc.n	8002f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f46:	f7ff ffe5 	bl	8002f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f4a:	f015 fead 	bl	8018ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f4e:	f7fd fb6d 	bl	800062c <main>
  bx lr
 8002f52:	4770      	bx	lr
  ldr r0, =_sdata
 8002f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f58:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8002f5c:	0801b084 	.word	0x0801b084
  ldr r2, =_sbss
 8002f60:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8002f64:	20003d38 	.word	0x20003d38

08002f68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f68:	e7fe      	b.n	8002f68 <ADC1_IRQHandler>

08002f6a <st25r3911TxRxOn>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3911TxRxOn( void )
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	af00      	add	r7, sp, #0
    st25r3911SetRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 8002f6e:	2148      	movs	r1, #72	; 0x48
 8002f70:	2002      	movs	r0, #2
 8002f72:	f000 fd74 	bl	8003a5e <st25r3911SetRegisterBits>
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <st25r3911TxRxOff>:

void st25r3911TxRxOff( void )
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	af00      	add	r7, sp, #0
    st25r3911ClrRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 8002f7e:	2148      	movs	r1, #72	; 0x48
 8002f80:	2002      	movs	r0, #2
 8002f82:	f000 fd49 	bl	8003a18 <st25r3911ClrRegisterBits>
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <st25r3911OscOn>:


void st25r3911OscOn( void )
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */        
    /* Use ST25R3911_REG_OP_CONTROL_en instead of ST25R3911_REG_AUX_DISPLAY_osc_ok to be on the safe side */    
    if( !st25r3911CheckReg( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_en, ST25R3911_REG_OP_CONTROL_en ) )
 8002f8e:	2280      	movs	r2, #128	; 0x80
 8002f90:	2180      	movs	r1, #128	; 0x80
 8002f92:	2002      	movs	r0, #2
 8002f94:	f000 f9ba 	bl	800330c <st25r3911CheckReg>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f083 0301 	eor.w	r3, r3, #1
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d011      	beq.n	8002fc8 <st25r3911OscOn+0x3e>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3911GetInterrupt( ST25R3911_IRQ_MASK_OSC );
 8002fa4:	2080      	movs	r0, #128	; 0x80
 8002fa6:	f001 f86f 	bl	8004088 <st25r3911GetInterrupt>
      
        /* enable oscillator frequency stable interrupt */
        st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_OSC);
 8002faa:	2080      	movs	r0, #128	; 0x80
 8002fac:	f001 f8a8 	bl	8004100 <st25r3911EnableInterrupts>

        /* enable oscillator and regulator output */
        st25r3911ModifyRegister(ST25R3911_REG_OP_CONTROL, 0x00, ST25R3911_REG_OP_CONTROL_en);
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	2002      	movs	r0, #2
 8002fb6:	f000 fd86 	bl	8003ac6 <st25r3911ModifyRegister>

        /* wait for the oscillator interrupt */
        st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_OSC, ST25R3911_OSC_STABLE_TIMEOUT);
 8002fba:	210a      	movs	r1, #10
 8002fbc:	2080      	movs	r0, #128	; 0x80
 8002fbe:	f001 f80f 	bl	8003fe0 <st25r3911WaitForInterruptsTimed>
        st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_OSC);
 8002fc2:	2080      	movs	r0, #128	; 0x80
 8002fc4:	f001 f8a8 	bl	8004118 <st25r3911DisableInterrupts>
    }
    
}
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <st25r3911Initialize>:


void st25r3911Initialize(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;

    /* first, reset the st25r3911 */
    st25r3911ExecuteCommand(ST25R3911_CMD_SET_DEFAULT);
 8002fd2:	20c1      	movs	r0, #193	; 0xc1
 8002fd4:	f000 fe62 	bl	8003c9c <st25r3911ExecuteCommand>

    /* Set Operation Control Register to default value */
    st25r3911WriteRegister(ST25R3911_REG_OP_CONTROL, 0x00);
 8002fd8:	2100      	movs	r1, #0
 8002fda:	2002      	movs	r0, #2
 8002fdc:	f000 fcd0 	bl	8003980 <st25r3911WriteRegister>

    /* enable pull downs on miso line */
    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2, 0,
 8002fe0:	2218      	movs	r2, #24
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f000 fd6e 	bl	8003ac6 <st25r3911ModifyRegister>
            ST25R3911_REG_IO_CONF2_miso_pd1 |
            ST25R3911_REG_IO_CONF2_miso_pd2);

    /* after reset all interrupts are enabled. so disable them at first */
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_ALL);
 8002fea:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002fee:	f001 f893 	bl	8004118 <st25r3911DisableInterrupts>
    /* and clear them, just to be sure... */
    st25r3911ClearInterrupts();
 8002ff2:	f001 f89d 	bl	8004130 <st25r3911ClearInterrupts>

    st25r3911OscOn();
 8002ff6:	f7ff ffc8 	bl	8002f8a <st25r3911OscOn>

    /* Measure vdd and set sup3V bit accordingly */
    vdd_mV = st25r3911MeasureVoltage(ST25R3911_REG_REGULATOR_CONTROL_mpsv_vdd);
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f000 f928 	bl	8003250 <st25r3911MeasureVoltage>
 8003000:	4603      	mov	r3, r0
 8003002:	80fb      	strh	r3, [r7, #6]

    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2,
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800300a:	d201      	bcs.n	8003010 <st25r3911Initialize+0x44>
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	e000      	b.n	8003012 <st25r3911Initialize+0x46>
 8003010:	2300      	movs	r3, #0
 8003012:	461a      	mov	r2, r3
 8003014:	2180      	movs	r1, #128	; 0x80
 8003016:	2001      	movs	r0, #1
 8003018:	f000 fd55 	bl	8003ac6 <st25r3911ModifyRegister>
                         ST25R3911_REG_IO_CONF2_sup3V,
                         (uint8_t)((vdd_mV < 3600U)?ST25R3911_REG_IO_CONF2_sup3V:0U));

    /* Make sure Transmitter and Receiver are disabled */
    st25r3911TxRxOff();
 800301c:	f7ff ffad 	bl	8002f7a <st25r3911TxRxOff>
    
    return;
 8003020:	bf00      	nop
}
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <st25r3911AdjustRegulators>:

    return;
}

ReturnCode st25r3911AdjustRegulators(uint16_t* result_mV)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
    uint8_t result;
    uint8_t io_conf2;
    ReturnCode err = ERR_NONE;
 8003030:	2300      	movs	r3, #0
 8003032:	81fb      	strh	r3, [r7, #14]

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3911SetRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 8003034:	2180      	movs	r1, #128	; 0x80
 8003036:	202a      	movs	r0, #42	; 0x2a
 8003038:	f000 fd11 	bl	8003a5e <st25r3911SetRegisterBits>
    st25r3911ClrRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 800303c:	2180      	movs	r1, #128	; 0x80
 800303e:	202a      	movs	r0, #42	; 0x2a
 8003040:	f000 fcea 	bl	8003a18 <st25r3911ClrRegisterBits>

    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_ADJUST_REGULATORS,
 8003044:	f107 030d 	add.w	r3, r7, #13
 8003048:	2205      	movs	r2, #5
 800304a:	212b      	movs	r1, #43	; 0x2b
 800304c:	20d6      	movs	r0, #214	; 0xd6
 800304e:	f000 fad5 	bl	80035fc <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_REGULATOR_RESULT,
                                    5,
                                    &result);
  
    st25r3911ReadRegister(ST25R3911_REG_IO_CONF2, &io_conf2);
 8003052:	f107 030c 	add.w	r3, r7, #12
 8003056:	4619      	mov	r1, r3
 8003058:	2001      	movs	r0, #1
 800305a:	f000 fb5b 	bl	8003714 <st25r3911ReadRegister>

    result >>= ST25R3911_REG_REGULATOR_RESULT_shift_reg;
 800305e:	7b7b      	ldrb	r3, [r7, #13]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	b2db      	uxtb	r3, r3
 8003064:	737b      	strb	r3, [r7, #13]
    result -= 5U;
 8003066:	7b7b      	ldrb	r3, [r7, #13]
 8003068:	3b05      	subs	r3, #5
 800306a:	b2db      	uxtb	r3, r3
 800306c:	737b      	strb	r3, [r7, #13]
    if (result_mV != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d02b      	beq.n	80030cc <st25r3911AdjustRegulators+0xa4>
    {
        if((io_conf2 & ST25R3911_REG_IO_CONF2_sup3V) != 0U)
 8003074:	7b3b      	ldrb	r3, [r7, #12]
 8003076:	b25b      	sxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	da16      	bge.n	80030aa <st25r3911AdjustRegulators+0x82>
        {
            *result_mV = 2400;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8003082:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 100U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	881a      	ldrh	r2, [r3, #0]
 8003088:	7b7b      	ldrb	r3, [r7, #13]
 800308a:	b29b      	uxth	r3, r3
 800308c:	4619      	mov	r1, r3
 800308e:	0089      	lsls	r1, r1, #2
 8003090:	440b      	add	r3, r1
 8003092:	4619      	mov	r1, r3
 8003094:	0088      	lsls	r0, r1, #2
 8003096:	4619      	mov	r1, r3
 8003098:	4603      	mov	r3, r0
 800309a:	440b      	add	r3, r1
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	b29b      	uxth	r3, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	801a      	strh	r2, [r3, #0]
 80030a8:	e010      	b.n	80030cc <st25r3911AdjustRegulators+0xa4>
        }
        else
        {
            *result_mV = 3900;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f640 723c 	movw	r2, #3900	; 0xf3c
 80030b0:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 120U;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	881a      	ldrh	r2, [r3, #0]
 80030b6:	7b7b      	ldrb	r3, [r7, #13]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	4619      	mov	r1, r3
 80030bc:	0109      	lsls	r1, r1, #4
 80030be:	1acb      	subs	r3, r1, r3
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	801a      	strh	r2, [r3, #0]
        }
    }
    return err;
 80030cc:	89fb      	ldrh	r3, [r7, #14]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <st25r3911MeasureAmplitude>:

void st25r3911MeasureAmplitude(uint8_t* result)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_AMPLITUDE,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	220a      	movs	r2, #10
 80030e2:	2120      	movs	r1, #32
 80030e4:	20d3      	movs	r0, #211	; 0xd3
 80030e6:	f000 fa89 	bl	80035fc <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <st25r3911MeasurePhase>:

void st25r3911MeasurePhase(uint8_t* result)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_PHASE,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	220a      	movs	r2, #10
 80030fe:	2120      	movs	r1, #32
 8003100:	20d9      	movs	r0, #217	; 0xd9
 8003102:	f000 fa7b 	bl	80035fc <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <st25r3911MeasureCapacitance>:

void st25r3911MeasureCapacitance(uint8_t* result)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_CAPACITANCE, 
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	220a      	movs	r2, #10
 800311a:	2120      	movs	r1, #32
 800311c:	20de      	movs	r0, #222	; 0xde
 800311e:	f000 fa6d 	bl	80035fc <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <st25r3911CalibrateAntenna>:

void st25r3911CalibrateAntenna(uint8_t* result)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_CALIBRATE_ANTENNA,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	220a      	movs	r2, #10
 8003136:	2123      	movs	r1, #35	; 0x23
 8003138:	20d8      	movs	r0, #216	; 0xd8
 800313a:	f000 fa5f 	bl	80035fc <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_ANT_CAL_RESULT,
                                    10,
                                    result);
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <st25r3911CalibrateCapacitiveSensor>:
                                    result);
}


ReturnCode st25r3911CalibrateCapacitiveSensor(uint8_t* result)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    res;
    
    /* Clear Manual calibration values to enable automatic calibration mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_mask_cs_mcal );
 800314e:	21f8      	movs	r1, #248	; 0xf8
 8003150:	202e      	movs	r0, #46	; 0x2e
 8003152:	f000 fc61 	bl	8003a18 <st25r3911ClrRegisterBits>
    
    /* Execute automatic calibration */
    ret = st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_CALIBRATE_C_SENSOR, ST25R3911_REG_CAP_SENSOR_RESULT, ST25R3911_TOUT_CALIBRATE_CAP_SENSOR, &res );
 8003156:	f107 030d 	add.w	r3, r7, #13
 800315a:	2204      	movs	r2, #4
 800315c:	212f      	movs	r1, #47	; 0x2f
 800315e:	20dd      	movs	r0, #221	; 0xdd
 8003160:	f000 fa4c 	bl	80035fc <st25r3911ExecuteCommandAndGetResult>
 8003164:	4603      	mov	r3, r0
 8003166:	81fb      	strh	r3, [r7, #14]
    
    /* Check wether the calibration was successull */
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 8003168:	7b7b      	ldrb	r3, [r7, #13]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 8003172:	7b7b      	ldrb	r3, [r7, #13]
 8003174:	f003 0302 	and.w	r3, r3, #2
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 8003178:	2b00      	cmp	r3, #0
 800317a:	d102      	bne.n	8003182 <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 800317c:	89fb      	ldrh	r3, [r7, #14]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <st25r3911CalibrateCapacitiveSensor+0x40>
    {
        return ERR_IO;
 8003182:	2303      	movs	r3, #3
 8003184:	e008      	b.n	8003198 <st25r3911CalibrateCapacitiveSensor+0x52>
    }
    
    if( result != NULL )
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d004      	beq.n	8003196 <st25r3911CalibrateCapacitiveSensor+0x50>
    {
        (*result) = (uint8_t)(res >> ST25R3911_REG_CAP_SENSOR_CONTROL_shift_cs_mcal);
 800318c:	7b7b      	ldrb	r3, [r7, #13]
 800318e:	08db      	lsrs	r3, r3, #3
 8003190:	b2da      	uxtb	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <st25r3911SetBitrate>:


ReturnCode st25r3911SetBitrate(uint8_t txRate, uint8_t rxRate)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	460a      	mov	r2, r1
 80031aa:	71fb      	strb	r3, [r7, #7]
 80031ac:	4613      	mov	r3, r2
 80031ae:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3911ReadRegister(ST25R3911_REG_BIT_RATE, &reg);
 80031b0:	f107 030f 	add.w	r3, r7, #15
 80031b4:	4619      	mov	r1, r3
 80031b6:	2004      	movs	r0, #4
 80031b8:	f000 faac 	bl	8003714 <st25r3911ReadRegister>
    if (rxRate != ST25R3911_BR_DO_NOT_SET)
 80031bc:	79bb      	ldrb	r3, [r7, #6]
 80031be:	2bff      	cmp	r3, #255	; 0xff
 80031c0:	d00e      	beq.n	80031e0 <st25r3911SetBitrate+0x40>
    {
        if(rxRate > ST25R3911_BR_3390)
 80031c2:	79bb      	ldrb	r3, [r7, #6]
 80031c4:	2b05      	cmp	r3, #5
 80031c6:	d901      	bls.n	80031cc <st25r3911SetBitrate+0x2c>
        {
            return ERR_PARAM;
 80031c8:	2307      	movs	r3, #7
 80031ca:	e025      	b.n	8003218 <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_rxrate);     /* MISRA 10.3 */
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	f023 030f 	bic.w	r3, r3, #15
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	73fb      	strb	r3, [r7, #15]
            reg |= rxRate << ST25R3911_REG_BIT_RATE_shift_rxrate;
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	79bb      	ldrb	r3, [r7, #6]
 80031da:	4313      	orrs	r3, r2
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (txRate != ST25R3911_BR_DO_NOT_SET)
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	2bff      	cmp	r3, #255	; 0xff
 80031e4:	d012      	beq.n	800320c <st25r3911SetBitrate+0x6c>
    {
        if(txRate > ST25R3911_BR_6780)
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	2b06      	cmp	r3, #6
 80031ea:	d901      	bls.n	80031f0 <st25r3911SetBitrate+0x50>
        {
            return ERR_PARAM;
 80031ec:	2307      	movs	r3, #7
 80031ee:	e013      	b.n	8003218 <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_txrate);     /* MISRA 10.3 */
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	73fb      	strb	r3, [r7, #15]
            reg |= txRate<<ST25R3911_REG_BIT_RATE_shift_txrate;
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	b25a      	sxtb	r2, r3
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	b25b      	sxtb	r3, r3
 8003204:	4313      	orrs	r3, r2
 8003206:	b25b      	sxtb	r3, r3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	73fb      	strb	r3, [r7, #15]
        }
    }
    st25r3911WriteRegister(ST25R3911_REG_BIT_RATE, reg);
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	4619      	mov	r1, r3
 8003210:	2004      	movs	r0, #4
 8003212:	f000 fbb5 	bl	8003980 <st25r3911WriteRegister>
    
    return ERR_NONE;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <st25r3911MeasurePowerSupply>:

uint8_t st25r3911MeasurePowerSupply( uint8_t mpsv )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3911ChangeRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_mask_mpsv, mpsv );
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	461a      	mov	r2, r3
 800322e:	2106      	movs	r1, #6
 8003230:	202a      	movs	r0, #42	; 0x2a
 8003232:	f000 fc32 	bl	8003a9a <st25r3911ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_MEASURE_VDD, ST25R3911_REG_AD_RESULT, 10, &result);
 8003236:	f107 030f 	add.w	r3, r7, #15
 800323a:	220a      	movs	r2, #10
 800323c:	2120      	movs	r1, #32
 800323e:	20df      	movs	r0, #223	; 0xdf
 8003240:	f000 f9dc 	bl	80035fc <st25r3911ExecuteCommandAndGetResult>

    return result;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <st25r3911MeasureVoltage>:

uint16_t st25r3911MeasureVoltage(uint8_t mpsv)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
    uint16_t mV;

    result = st25r3911MeasurePowerSupply( mpsv );
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ffdf 	bl	8003220 <st25r3911MeasurePowerSupply>
 8003262:	4603      	mov	r3, r0
 8003264:	73fb      	strb	r3, [r7, #15]

    mV = ((uint16_t)result) * 23U;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	b29b      	uxth	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	0052      	lsls	r2, r2, #1
 800326e:	441a      	add	r2, r3
 8003270:	00d2      	lsls	r2, r2, #3
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	81bb      	strh	r3, [r7, #12]
    mV += ((((uint16_t)result) * 438U) + 500U) / 1000U;
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800327c:	fb02 f303 	mul.w	r3, r2, r3
 8003280:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003284:	4a06      	ldr	r2, [pc, #24]	; (80032a0 <st25r3911MeasureVoltage+0x50>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	099b      	lsrs	r3, r3, #6
 800328c:	b29a      	uxth	r2, r3
 800328e:	89bb      	ldrh	r3, [r7, #12]
 8003290:	4413      	add	r3, r2
 8003292:	81bb      	strh	r3, [r7, #12]

    return mV;
 8003294:	89bb      	ldrh	r3, [r7, #12]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	10624dd3 	.word	0x10624dd3

080032a4 <st25r3911StartGPTimer_8fcs>:
{
    return st25r3911NoResponseTime_64fcs;
}

void st25r3911StartGPTimer_8fcs(uint16_t gpt_8fcs, uint8_t trigger_source)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	460a      	mov	r2, r1
 80032ae:	80fb      	strh	r3, [r7, #6]
 80032b0:	4613      	mov	r3, r2
 80032b2:	717b      	strb	r3, [r7, #5]
    st25r3911SetGPTime_8fcs(gpt_8fcs);
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 f811 	bl	80032de <st25r3911SetGPTime_8fcs>

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, 
 80032bc:	797b      	ldrb	r3, [r7, #5]
 80032be:	461a      	mov	r2, r3
 80032c0:	21e0      	movs	r1, #224	; 0xe0
 80032c2:	2011      	movs	r0, #17
 80032c4:	f000 fbff 	bl	8003ac6 <st25r3911ModifyRegister>
            ST25R3911_REG_GPT_CONTROL_gptc_mask, 
            trigger_source);
    if (trigger_source == 0U)
 80032c8:	797b      	ldrb	r3, [r7, #5]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d103      	bne.n	80032d6 <st25r3911StartGPTimer_8fcs+0x32>
    {
        st25r3911ExecuteCommand(ST25R3911_CMD_START_GP_TIMER);
 80032ce:	20e0      	movs	r0, #224	; 0xe0
 80032d0:	f000 fce4 	bl	8003c9c <st25r3911ExecuteCommand>
    }

    return;
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
}
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <st25r3911SetGPTime_8fcs>:

void st25r3911SetGPTime_8fcs(uint16_t gpt_8fcs)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	4603      	mov	r3, r0
 80032e6:	80fb      	strh	r3, [r7, #6]
    st25r3911WriteRegister(ST25R3911_REG_GPT1, (uint8_t)(gpt_8fcs >> 8));
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	4619      	mov	r1, r3
 80032f2:	2012      	movs	r0, #18
 80032f4:	f000 fb44 	bl	8003980 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_GPT2, (uint8_t)(gpt_8fcs & 0xffU));
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	4619      	mov	r1, r3
 80032fe:	2013      	movs	r0, #19
 8003300:	f000 fb3e 	bl	8003980 <st25r3911WriteRegister>

    return;
 8003304:	bf00      	nop
}
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <st25r3911CheckReg>:

bool st25r3911CheckReg( uint8_t reg, uint8_t mask, uint8_t value )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	71fb      	strb	r3, [r7, #7]
 8003316:	460b      	mov	r3, r1
 8003318:	71bb      	strb	r3, [r7, #6]
 800331a:	4613      	mov	r3, r2
 800331c:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;
    
    regVal = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( reg, &regVal );
 8003322:	f107 020f 	add.w	r2, r7, #15
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f9f2 	bl	8003714 <st25r3911ReadRegister>
    
    return ((regVal & mask) == value );
 8003330:	7bfa      	ldrb	r2, [r7, #15]
 8003332:	79bb      	ldrb	r3, [r7, #6]
 8003334:	4013      	ands	r3, r2
 8003336:	b2db      	uxtb	r3, r3
 8003338:	797a      	ldrb	r2, [r7, #5]
 800333a:	429a      	cmp	r2, r3
 800333c:	bf0c      	ite	eq
 800333e:	2301      	moveq	r3, #1
 8003340:	2300      	movne	r3, #0
 8003342:	b2db      	uxtb	r3, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <st25r3911CheckChipID>:


bool st25r3911CheckChipID( uint8_t *rev )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
    uint8_t ID;
    
    ID = 0;    
 8003354:	2300      	movs	r3, #0
 8003356:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( ST25R3911_REG_IC_IDENTITY, &ID );
 8003358:	f107 030f 	add.w	r3, r7, #15
 800335c:	4619      	mov	r1, r3
 800335e:	203f      	movs	r0, #63	; 0x3f
 8003360:	f000 f9d8 	bl	8003714 <st25r3911ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3911's IC type code */
    if( (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_type) != ST25R3911_REG_IC_IDENTITY_ic_type )
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800336a:	2b08      	cmp	r3, #8
 800336c:	d001      	beq.n	8003372 <st25r3911CheckChipID+0x26>
    {
        return false;
 800336e:	2300      	movs	r3, #0
 8003370:	e009      	b.n	8003386 <st25r3911CheckChipID+0x3a>
    }
        
    if(rev != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <st25r3911CheckChipID+0x38>
    {
        *rev = (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_rev);
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	b2da      	uxtb	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	701a      	strb	r2, [r3, #0]
    }
    
    return true;
 8003384:	2301      	movs	r3, #1
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <st25r3911SetNoResponseTime_64fcs>:

ReturnCode st25r3911SetNoResponseTime_64fcs(uint32_t nrt_64fcs)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
    ReturnCode err = ERR_NONE;
 8003398:	2300      	movs	r3, #0
 800339a:	81fb      	strh	r3, [r7, #14]
    uint8_t nrt_step = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	737b      	strb	r3, [r7, #13]
    uint32_t noResponseTime_64fcs = nrt_64fcs;      /* MISRA 17.8: Use intermediate variable */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	60bb      	str	r3, [r7, #8]

    st25r3911NoResponseTime_64fcs = noResponseTime_64fcs;
 80033a4:	4a18      	ldr	r2, [pc, #96]	; (8003408 <st25r3911SetNoResponseTime_64fcs+0x78>)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	6013      	str	r3, [r2, #0]
    if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b0:	d312      	bcc.n	80033d8 <st25r3911SetNoResponseTime_64fcs+0x48>
    {
        nrt_step = ST25R3911_REG_GPT_CONTROL_nrt_step;
 80033b2:	2301      	movs	r3, #1
 80033b4:	737b      	strb	r3, [r7, #13]
        noResponseTime_64fcs = (noResponseTime_64fcs + 63U) / 64U;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	333f      	adds	r3, #63	; 0x3f
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	60bb      	str	r3, [r7, #8]
        if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c4:	d304      	bcc.n	80033d0 <st25r3911SetNoResponseTime_64fcs+0x40>
        {
            noResponseTime_64fcs = 0xFFFFU;
 80033c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033ca:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;
 80033cc:	2307      	movs	r3, #7
 80033ce:	81fb      	strh	r3, [r7, #14]
        }
        st25r3911NoResponseTime_64fcs = 64U * noResponseTime_64fcs;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	019b      	lsls	r3, r3, #6
 80033d4:	4a0c      	ldr	r2, [pc, #48]	; (8003408 <st25r3911SetNoResponseTime_64fcs+0x78>)
 80033d6:	6013      	str	r3, [r2, #0]
    }

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_step, nrt_step);
 80033d8:	7b7b      	ldrb	r3, [r7, #13]
 80033da:	461a      	mov	r2, r3
 80033dc:	2101      	movs	r1, #1
 80033de:	2011      	movs	r0, #17
 80033e0:	f000 fb71 	bl	8003ac6 <st25r3911ModifyRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER1, (uint8_t)(noResponseTime_64fcs >> 8));
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	0a1b      	lsrs	r3, r3, #8
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	4619      	mov	r1, r3
 80033ec:	200f      	movs	r0, #15
 80033ee:	f000 fac7 	bl	8003980 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER2, (uint8_t)(noResponseTime_64fcs & 0xffU));
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	4619      	mov	r1, r3
 80033f8:	2010      	movs	r0, #16
 80033fa:	f000 fac1 	bl	8003980 <st25r3911WriteRegister>

    return err;
 80033fe:	89fb      	ldrh	r3, [r7, #14]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20003080 	.word	0x20003080

0800340c <st25r3911PerformCollisionAvoidance>:
    
    return err;
}

ReturnCode st25r3911PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	4604      	mov	r4, r0
 8003414:	4608      	mov	r0, r1
 8003416:	4611      	mov	r1, r2
 8003418:	461a      	mov	r2, r3
 800341a:	4623      	mov	r3, r4
 800341c:	71fb      	strb	r3, [r7, #7]
 800341e:	4603      	mov	r3, r0
 8003420:	71bb      	strb	r3, [r7, #6]
 8003422:	460b      	mov	r3, r1
 8003424:	717b      	strb	r3, [r7, #5]
 8003426:	4613      	mov	r3, r2
 8003428:	713b      	strb	r3, [r7, #4]
    uint8_t  treMask;
    uint32_t irqs;
    
    if( (FieldONCmd != ST25R3911_CMD_INITIAL_RF_COLLISION)    && 
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	2bc8      	cmp	r3, #200	; 0xc8
 800342e:	d007      	beq.n	8003440 <st25r3911PerformCollisionAvoidance+0x34>
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	2bca      	cmp	r3, #202	; 0xca
 8003434:	d004      	beq.n	8003440 <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_0) && 
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	2bc9      	cmp	r3, #201	; 0xc9
 800343a:	d001      	beq.n	8003440 <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_N)   )
    {
        return ERR_PARAM;
 800343c:	2307      	movs	r3, #7
 800343e:	e056      	b.n	80034ee <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) )
 8003440:	79bb      	ldrb	r3, [r7, #6]
 8003442:	2bff      	cmp	r3, #255	; 0xff
 8003444:	d102      	bne.n	800344c <st25r3911PerformCollisionAvoidance+0x40>
 8003446:	797b      	ldrb	r3, [r7, #5]
 8003448:	2bff      	cmp	r3, #255	; 0xff
 800344a:	d01e      	beq.n	800348a <st25r3911PerformCollisionAvoidance+0x7e>
    {
        treMask = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	73fb      	strb	r3, [r7, #15]
        
        if(pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 8003450:	79bb      	ldrb	r3, [r7, #6]
 8003452:	2bff      	cmp	r3, #255	; 0xff
 8003454:	d003      	beq.n	800345e <st25r3911PerformCollisionAvoidance+0x52>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_trg;
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800345c:	73fb      	strb	r3, [r7, #15]
        }
        
        if(caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 800345e:	797b      	ldrb	r3, [r7, #5]
 8003460:	2bff      	cmp	r3, #255	; 0xff
 8003462:	d003      	beq.n	800346c <st25r3911PerformCollisionAvoidance+0x60>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_rfe;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	f043 030f 	orr.w	r3, r3, #15
 800346a:	73fb      	strb	r3, [r7, #15]
        }
            
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3911ChangeRegisterBits( ST25R3911_REG_FIELD_THRESHOLD, treMask, (pdThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_trg) | (caThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_rfe ) );
 800346c:	79bb      	ldrb	r3, [r7, #6]
 800346e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003472:	b2da      	uxtb	r2, r3
 8003474:	797b      	ldrb	r3, [r7, #5]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	b2db      	uxtb	r3, r3
 800347c:	4313      	orrs	r3, r2
 800347e:	b2da      	uxtb	r2, r3
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	4619      	mov	r1, r3
 8003484:	2029      	movs	r0, #41	; 0x29
 8003486:	f000 fb08 	bl	8003a9a <st25r3911ChangeRegisterBits>
    }
    
    /* Set n x TRFW */
    st25r3911ModifyRegister(ST25R3911_REG_AUX, ST25R3911_REG_AUX_mask_nfc_n, (nTRFW & ST25R3911_REG_AUX_mask_nfc_n) );
 800348a:	793b      	ldrb	r3, [r7, #4]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	2103      	movs	r1, #3
 8003496:	2009      	movs	r0, #9
 8003498:	f000 fb15 	bl	8003ac6 <st25r3911ModifyRegister>
    
    /* Enable and clear CA specific interrupts and execute command */
    st25r3911EnableInterrupts( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 800349c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80034a0:	f000 fe2e 	bl	8004100 <st25r3911EnableInterrupts>
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 80034a4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80034a8:	f000 fdee 	bl	8004088 <st25r3911GetInterrupt>
    
    st25r3911ExecuteCommand(FieldONCmd);
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fbf4 	bl	8003c9c <st25r3911ExecuteCommand>
    
    irqs = st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT, ST25R3911_CA_TIMEOUT );
 80034b4:	210a      	movs	r1, #10
 80034b6:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80034ba:	f000 fd91 	bl	8003fe0 <st25r3911WaitForInterruptsTimed>
 80034be:	60b8      	str	r0, [r7, #8]
    
    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_EON) );
 80034c0:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80034c4:	f000 fde0 	bl	8004088 <st25r3911GetInterrupt>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT);
 80034c8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80034cc:	f000 fe24 	bl	8004118 <st25r3911DisableInterrupts>
    
    
    if((ST25R3911_IRQ_MASK_CAC & irqs) != 0U)                             /* Collision occurred */
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <st25r3911PerformCollisionAvoidance+0xd2>
    {
        return ERR_RF_COLLISION;
 80034da:	231d      	movs	r3, #29
 80034dc:	e007      	b.n	80034ee <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    if((ST25R3911_IRQ_MASK_CAT & irqs) != 0U)                             /* No Collision detected, Field On */
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <st25r3911PerformCollisionAvoidance+0xe0>
    {
        return ERR_NONE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <st25r3911PerformCollisionAvoidance+0xe2>
    }

    /* No interrupt detected */
    return ERR_INTERNAL;
 80034ec:	230c      	movs	r3, #12
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd90      	pop	{r4, r7, pc}

080034f6 <st25r3911SetNumTxBits>:
    return ERR_NONE;
}


void st25r3911SetNumTxBits( uint32_t nBits )
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xffU)); 
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	4619      	mov	r1, r3
 8003504:	201e      	movs	r0, #30
 8003506:	f000 fa3b 	bl	8003980 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xffU));    
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	b2db      	uxtb	r3, r3
 8003510:	4619      	mov	r1, r3
 8003512:	201d      	movs	r0, #29
 8003514:	f000 fa34 	bl	8003980 <st25r3911WriteRegister>
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <st25r3911StreamConfigure>:
    }
    return true;
}

ReturnCode st25r3911StreamConfigure(const struct st25r3911StreamConfig *config)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
    uint8_t smd = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]
    uint8_t mode;

    if (config->useBPSK != 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d016      	beq.n	8003562 <st25r3911StreamConfigure+0x42>
    {
        mode = ST25R3911_REG_MODE_om_bpsk_stream;
 8003534:	2378      	movs	r3, #120	; 0x78
 8003536:	73bb      	strb	r3, [r7, #14]
        if ((config->din<2U) || (config->din>4U)) /* not in fc/4 .. fc/16 */
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	785b      	ldrb	r3, [r3, #1]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d903      	bls.n	8003548 <st25r3911StreamConfigure+0x28>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	785b      	ldrb	r3, [r3, #1]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d901      	bls.n	800354c <st25r3911StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 8003548:	2307      	movs	r3, #7
 800354a:	e053      	b.n	80035f4 <st25r3911StreamConfigure+0xd4>
        }
        smd |= (4U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	785b      	ldrb	r3, [r3, #1]
 8003550:	f1c3 0304 	rsb	r3, r3, #4
 8003554:	b2db      	uxtb	r3, r3
 8003556:	015b      	lsls	r3, r3, #5
 8003558:	b2da      	uxtb	r2, r3
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	4313      	orrs	r3, r2
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	e01b      	b.n	800359a <st25r3911StreamConfigure+0x7a>

    }
    else
    {
        mode = ST25R3911_REG_MODE_om_subcarrier_stream;
 8003562:	2370      	movs	r3, #112	; 0x70
 8003564:	73bb      	strb	r3, [r7, #14]
        if ((config->din<3U) || (config->din>6U)) /* not in fc/8 .. fc/64 */
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	785b      	ldrb	r3, [r3, #1]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d903      	bls.n	8003576 <st25r3911StreamConfigure+0x56>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	785b      	ldrb	r3, [r3, #1]
 8003572:	2b06      	cmp	r3, #6
 8003574:	d901      	bls.n	800357a <st25r3911StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 8003576:	2307      	movs	r3, #7
 8003578:	e03c      	b.n	80035f4 <st25r3911StreamConfigure+0xd4>
        }
        smd |= (6U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	785b      	ldrb	r3, [r3, #1]
 800357e:	f1c3 0306 	rsb	r3, r3, #6
 8003582:	b2db      	uxtb	r3, r3
 8003584:	015b      	lsls	r3, r3, #5
 8003586:	b2da      	uxtb	r2, r3
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	4313      	orrs	r3, r2
 800358c:	73fb      	strb	r3, [r7, #15]
        if (config->report_period_length == 0U) 
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	78db      	ldrb	r3, [r3, #3]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <st25r3911StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 8003596:	2307      	movs	r3, #7
 8003598:	e02c      	b.n	80035f4 <st25r3911StreamConfigure+0xd4>
        }
    }

    if ((config->dout<1U) || (config->dout>7U)) /* not in fc/2 .. fc/128 */
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	789b      	ldrb	r3, [r3, #2]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <st25r3911StreamConfigure+0x8a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	789b      	ldrb	r3, [r3, #2]
 80035a6:	2b07      	cmp	r3, #7
 80035a8:	d901      	bls.n	80035ae <st25r3911StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 80035aa:	2307      	movs	r3, #7
 80035ac:	e022      	b.n	80035f4 <st25r3911StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3911_REG_STREAM_MODE_shift_stx;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	789b      	ldrb	r3, [r3, #2]
 80035b2:	f1c3 0307 	rsb	r3, r3, #7
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	73fb      	strb	r3, [r7, #15]

    if (config->report_period_length > 3U) 
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	78db      	ldrb	r3, [r3, #3]
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d901      	bls.n	80035ca <st25r3911StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 80035c6:	2307      	movs	r3, #7
 80035c8:	e014      	b.n	80035f4 <st25r3911StreamConfigure+0xd4>
    }
    smd |= config->report_period_length << ST25R3911_REG_STREAM_MODE_shift_scp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	78db      	ldrb	r3, [r3, #3]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	b25a      	sxtb	r2, r3
 80035d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	b25b      	sxtb	r3, r3
 80035da:	73fb      	strb	r3, [r7, #15]

    st25r3911WriteRegister(ST25R3911_REG_STREAM_MODE, smd);
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	4619      	mov	r1, r3
 80035e0:	2008      	movs	r0, #8
 80035e2:	f000 f9cd 	bl	8003980 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, ST25R3911_REG_MODE_mask_om, mode);
 80035e6:	7bbb      	ldrb	r3, [r7, #14]
 80035e8:	461a      	mov	r2, r3
 80035ea:	2178      	movs	r1, #120	; 0x78
 80035ec:	2003      	movs	r0, #3
 80035ee:	f000 fa54 	bl	8003a9a <st25r3911ChangeRegisterBits>

    return ERR_NONE;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <st25r3911ExecuteCommandAndGetResult>:
 *  \param[out] result: 8 bit long result
 *
 *****************************************************************************
 */
static ReturnCode st25r3911ExecuteCommandAndGetResult(uint8_t cmd, uint8_t resreg, uint8_t sleeptime, uint8_t* result)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	4603      	mov	r3, r0
 8003606:	71fb      	strb	r3, [r7, #7]
 8003608:	460b      	mov	r3, r1
 800360a:	71bb      	strb	r3, [r7, #6]
 800360c:	4613      	mov	r3, r2
 800360e:	717b      	strb	r3, [r7, #5]

    st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8003610:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003614:	f000 fd74 	bl	8004100 <st25r3911EnableInterrupts>
    st25r3911GetInterrupt(ST25R3911_IRQ_MASK_DCT);
 8003618:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800361c:	f000 fd34 	bl	8004088 <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(cmd);
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fb3a 	bl	8003c9c <st25r3911ExecuteCommand>
    st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_DCT, sleeptime);
 8003628:	797b      	ldrb	r3, [r7, #5]
 800362a:	b29b      	uxth	r3, r3
 800362c:	4619      	mov	r1, r3
 800362e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003632:	f000 fcd5 	bl	8003fe0 <st25r3911WaitForInterruptsTimed>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8003636:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800363a:	f000 fd6d 	bl	8004118 <st25r3911DisableInterrupts>
    
    /* read out the result if the pointer is not NULL */
    if (result != NULL)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d004      	beq.n	800364e <st25r3911ExecuteCommandAndGetResult+0x52>
    {
        st25r3911ReadRegister(resreg, result);
 8003644:	79bb      	ldrb	r3, [r7, #6]
 8003646:	6839      	ldr	r1, [r7, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f000 f863 	bl	8003714 <st25r3911ReadRegister>
    }

    return ERR_NONE;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	2b00      	cmp	r3, #0
 8003668:	db0b      	blt.n	8003682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	4906      	ldr	r1, [pc, #24]	; (800368c <__NVIC_EnableIRQ+0x34>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	2001      	movs	r0, #1
 800367a:	fa00 f202 	lsl.w	r2, r0, r2
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	e000e100 	.word	0xe000e100

08003690 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	db12      	blt.n	80036c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	f003 021f 	and.w	r2, r3, #31
 80036a8:	490a      	ldr	r1, [pc, #40]	; (80036d4 <__NVIC_DisableIRQ+0x44>)
 80036aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	2001      	movs	r0, #1
 80036b2:	fa00 f202 	lsl.w	r2, r0, r2
 80036b6:	3320      	adds	r3, #32
 80036b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036bc:	f3bf 8f4f 	dsb	sy
}
 80036c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036c2:	f3bf 8f6f 	isb	sy
}
 80036c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	e000e100 	.word	0xe000e100

080036d8 <st25r3911CheckFieldSetLED>:
* LOCAL FUNCTION PROTOTYPES
******************************************************************************
*/

static inline void st25r3911CheckFieldSetLED(uint8_t value)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
    if ((ST25R3911_REG_OP_CONTROL_tx_en & value) != 0U)
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d006      	beq.n	80036fc <st25r3911CheckFieldSetLED+0x24>
    {
#ifdef PLATFORM_LED_FIELD_PIN
        platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 80036ee:	2201      	movs	r2, #1
 80036f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036f4:	4806      	ldr	r0, [pc, #24]	; (8003710 <st25r3911CheckFieldSetLED+0x38>)
 80036f6:	f001 f8b8 	bl	800486a <HAL_GPIO_WritePin>
    else
    {
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
#endif /* PLATFORM_LED_FIELD_PIN */
    }
}
 80036fa:	e005      	b.n	8003708 <st25r3911CheckFieldSetLED+0x30>
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 80036fc:	2200      	movs	r2, #0
 80036fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003702:	4803      	ldr	r0, [pc, #12]	; (8003710 <st25r3911CheckFieldSetLED+0x38>)
 8003704:	f001 f8b1 	bl	800486a <HAL_GPIO_WritePin>
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40020000 	.word	0x40020000

08003714 <st25r3911ReadRegister>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911ReadRegister(uint8_t reg, uint8_t* value)
{ 
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	6039      	str	r1, [r7, #0]
 800371e:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    platformProtectST25R391xComm();
 8003720:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <st25r3911ReadRegister+0x94>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	3301      	adds	r3, #1
 8003726:	b2da      	uxtb	r2, r3
 8003728:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <st25r3911ReadRegister+0x94>)
 800372a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800372c:	f3bf 8f4f 	dsb	sy
}
 8003730:	bf00      	nop
 8003732:	2006      	movs	r0, #6
 8003734:	f7ff ffac 	bl	8003690 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003738:	f3bf 8f4f 	dsb	sy
}
 800373c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800373e:	f3bf 8f6f 	isb	sy
}
 8003742:	bf00      	nop
    platformSpiSelect();
 8003744:	2200      	movs	r2, #0
 8003746:	2140      	movs	r1, #64	; 0x40
 8003748:	4818      	ldr	r0, [pc, #96]	; (80037ac <st25r3911ReadRegister+0x98>)
 800374a:	f001 f88e 	bl	800486a <HAL_GPIO_WritePin>
  
    buf[0] = (reg | ST25R3911_READ_MODE);
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003754:	b2db      	uxtb	r3, r3
 8003756:	733b      	strb	r3, [r7, #12]
    buf[1] = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	737b      	strb	r3, [r7, #13]
  
    platformSpiTxRx(buf, buf, 2);
 800375c:	f107 010c 	add.w	r1, r7, #12
 8003760:	f107 030c 	add.w	r3, r7, #12
 8003764:	2202      	movs	r2, #2
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fa7a 	bl	8002c60 <spiTxRx>
  
    if(value != NULL)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <st25r3911ReadRegister+0x64>
    {
      *value = buf[1];
 8003772:	7b7a      	ldrb	r2, [r7, #13]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 8003778:	2201      	movs	r2, #1
 800377a:	2140      	movs	r1, #64	; 0x40
 800377c:	480b      	ldr	r0, [pc, #44]	; (80037ac <st25r3911ReadRegister+0x98>)
 800377e:	f001 f874 	bl	800486a <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <st25r3911ReadRegister+0x94>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	3b01      	subs	r3, #1
 8003788:	b2da      	uxtb	r2, r3
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <st25r3911ReadRegister+0x94>)
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <st25r3911ReadRegister+0x94>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <st25r3911ReadRegister+0x8a>
 8003796:	2006      	movs	r0, #6
 8003798:	f7ff ff5e 	bl	8003658 <__NVIC_EnableIRQ>

    return;
 800379c:	bf00      	nop
 800379e:	bf00      	nop
}
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000434 	.word	0x20000434
 80037ac:	40020400 	.word	0x40020400

080037b0 <st25r3911ReadMultipleRegisters>:


void st25r3911ReadMultipleRegisters(uint8_t reg, uint8_t* values, uint8_t length)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	6039      	str	r1, [r7, #0]
 80037ba:	71fb      	strb	r3, [r7, #7]
 80037bc:	4613      	mov	r3, r2
 80037be:	71bb      	strb	r3, [r7, #6]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = (reg | ST25R3911_READ_MODE);
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
  
    if (length > 0U)
 80037ca:	79bb      	ldrb	r3, [r7, #6]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d037      	beq.n	8003840 <st25r3911ReadMultipleRegisters+0x90>
    {
        platformProtectST25R391xComm();
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <st25r3911ReadMultipleRegisters+0x98>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <st25r3911ReadMultipleRegisters+0x98>)
 80037da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80037dc:	f3bf 8f4f 	dsb	sy
}
 80037e0:	bf00      	nop
 80037e2:	2006      	movs	r0, #6
 80037e4:	f7ff ff54 	bl	8003690 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 80037e8:	f3bf 8f4f 	dsb	sy
}
 80037ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037ee:	f3bf 8f6f 	isb	sy
}
 80037f2:	bf00      	nop
        platformSpiSelect();
 80037f4:	2200      	movs	r2, #0
 80037f6:	2140      	movs	r1, #64	; 0x40
 80037f8:	4814      	ldr	r0, [pc, #80]	; (800384c <st25r3911ReadMultipleRegisters+0x9c>)
 80037fa:	f001 f836 	bl	800486a <HAL_GPIO_WritePin>
        ST_MEMCPY( values, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) );  /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /* ST25R391X_COM_SINGLETXRX */
  
        /* Since the result comes one byte later, let's first transmit the adddress with discarding the result */
        platformSpiTxRx(&cmd, NULL, ST25R3911_CMD_LEN);
 80037fe:	f107 030f 	add.w	r3, r7, #15
 8003802:	2201      	movs	r2, #1
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fa2a 	bl	8002c60 <spiTxRx>
        platformSpiTxRx(NULL, values, length);  
 800380c:	79bb      	ldrb	r3, [r7, #6]
 800380e:	b29b      	uxth	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	6839      	ldr	r1, [r7, #0]
 8003814:	2000      	movs	r0, #0
 8003816:	f7ff fa23 	bl	8002c60 <spiTxRx>
  
#endif  /* ST25R391X_COM_SINGLETXRX */

        platformSpiDeselect();
 800381a:	2201      	movs	r2, #1
 800381c:	2140      	movs	r1, #64	; 0x40
 800381e:	480b      	ldr	r0, [pc, #44]	; (800384c <st25r3911ReadMultipleRegisters+0x9c>)
 8003820:	f001 f823 	bl	800486a <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8003824:	4b08      	ldr	r3, [pc, #32]	; (8003848 <st25r3911ReadMultipleRegisters+0x98>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	3b01      	subs	r3, #1
 800382a:	b2da      	uxtb	r2, r3
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <st25r3911ReadMultipleRegisters+0x98>)
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <st25r3911ReadMultipleRegisters+0x98>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d103      	bne.n	8003840 <st25r3911ReadMultipleRegisters+0x90>
 8003838:	2006      	movs	r0, #6
 800383a:	f7ff ff0d 	bl	8003658 <__NVIC_EnableIRQ>
    }
    
    return;
 800383e:	bf00      	nop
 8003840:	bf00      	nop
}
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000434 	.word	0x20000434
 800384c:	40020400 	.word	0x40020400

08003850 <st25r3911ReadTestRegister>:

void st25r3911ReadTestRegister(uint8_t reg, uint8_t* value)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	6039      	str	r1, [r7, #0]
 800385a:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */

    platformProtectST25R391xComm();
 800385c:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <st25r3911ReadTestRegister+0x98>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	3301      	adds	r3, #1
 8003862:	b2da      	uxtb	r2, r3
 8003864:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <st25r3911ReadTestRegister+0x98>)
 8003866:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003868:	f3bf 8f4f 	dsb	sy
}
 800386c:	bf00      	nop
 800386e:	2006      	movs	r0, #6
 8003870:	f7ff ff0e 	bl	8003690 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003874:	f3bf 8f4f 	dsb	sy
}
 8003878:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800387a:	f3bf 8f6f 	isb	sy
}
 800387e:	bf00      	nop
    platformSpiSelect();
 8003880:	2200      	movs	r2, #0
 8003882:	2140      	movs	r1, #64	; 0x40
 8003884:	4819      	ldr	r0, [pc, #100]	; (80038ec <st25r3911ReadTestRegister+0x9c>)
 8003886:	f000 fff0 	bl	800486a <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 800388a:	23fc      	movs	r3, #252	; 0xfc
 800388c:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_READ_MODE);
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003894:	b2db      	uxtb	r3, r3
 8003896:	737b      	strb	r3, [r7, #13]
    buf[2] = 0x00;
 8003898:	2300      	movs	r3, #0
 800389a:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, buf, 3);
 800389c:	f107 010c 	add.w	r1, r7, #12
 80038a0:	f107 030c 	add.w	r3, r7, #12
 80038a4:	2203      	movs	r2, #3
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff f9da 	bl	8002c60 <spiTxRx>
    
    if(value != NULL)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <st25r3911ReadTestRegister+0x68>
    {
      *value = buf[2];
 80038b2:	7bba      	ldrb	r2, [r7, #14]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 80038b8:	2201      	movs	r2, #1
 80038ba:	2140      	movs	r1, #64	; 0x40
 80038bc:	480b      	ldr	r0, [pc, #44]	; (80038ec <st25r3911ReadTestRegister+0x9c>)
 80038be:	f000 ffd4 	bl	800486a <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <st25r3911ReadTestRegister+0x98>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <st25r3911ReadTestRegister+0x98>)
 80038cc:	701a      	strb	r2, [r3, #0]
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <st25r3911ReadTestRegister+0x98>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <st25r3911ReadTestRegister+0x8e>
 80038d6:	2006      	movs	r0, #6
 80038d8:	f7ff febe 	bl	8003658 <__NVIC_EnableIRQ>

    return;
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
}
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000434 	.word	0x20000434
 80038ec:	40020400 	.word	0x40020400

080038f0 <st25r3911WriteTestRegister>:

void st25r3911WriteTestRegister(uint8_t reg, uint8_t value)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	460a      	mov	r2, r1
 80038fa:	71fb      	strb	r3, [r7, #7]
 80038fc:	4613      	mov	r3, r2
 80038fe:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */
    
    platformProtectST25R391xComm();
 8003900:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <st25r3911WriteTestRegister+0x88>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	b2da      	uxtb	r2, r3
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <st25r3911WriteTestRegister+0x88>)
 800390a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800390c:	f3bf 8f4f 	dsb	sy
}
 8003910:	bf00      	nop
 8003912:	2006      	movs	r0, #6
 8003914:	f7ff febc 	bl	8003690 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003918:	f3bf 8f4f 	dsb	sy
}
 800391c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800391e:	f3bf 8f6f 	isb	sy
}
 8003922:	bf00      	nop
    platformSpiSelect();
 8003924:	2200      	movs	r2, #0
 8003926:	2140      	movs	r1, #64	; 0x40
 8003928:	4814      	ldr	r0, [pc, #80]	; (800397c <st25r3911WriteTestRegister+0x8c>)
 800392a:	f000 ff9e 	bl	800486a <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 800392e:	23fc      	movs	r3, #252	; 0xfc
 8003930:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_WRITE_MODE);
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	737b      	strb	r3, [r7, #13]
    buf[2] = value;
 8003936:	79bb      	ldrb	r3, [r7, #6]
 8003938:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, NULL, 3);
 800393a:	f107 030c 	add.w	r3, r7, #12
 800393e:	2203      	movs	r2, #3
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff f98c 	bl	8002c60 <spiTxRx>
  
    platformSpiDeselect();
 8003948:	2201      	movs	r2, #1
 800394a:	2140      	movs	r1, #64	; 0x40
 800394c:	480b      	ldr	r0, [pc, #44]	; (800397c <st25r3911WriteTestRegister+0x8c>)
 800394e:	f000 ff8c 	bl	800486a <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <st25r3911WriteTestRegister+0x88>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	3b01      	subs	r3, #1
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4b07      	ldr	r3, [pc, #28]	; (8003978 <st25r3911WriteTestRegister+0x88>)
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <st25r3911WriteTestRegister+0x88>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d103      	bne.n	800396e <st25r3911WriteTestRegister+0x7e>
 8003966:	2006      	movs	r0, #6
 8003968:	f7ff fe76 	bl	8003658 <__NVIC_EnableIRQ>

    return;
 800396c:	bf00      	nop
 800396e:	bf00      	nop
}
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20000434 	.word	0x20000434
 800397c:	40020400 	.word	0x40020400

08003980 <st25r3911WriteRegister>:

void st25r3911WriteRegister(uint8_t reg, uint8_t value)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	460a      	mov	r2, r1
 800398a:	71fb      	strb	r3, [r7, #7]
 800398c:	4613      	mov	r3, r2
 800398e:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    if (ST25R3911_REG_OP_CONTROL == reg)
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d103      	bne.n	800399e <st25r3911WriteRegister+0x1e>
    {
        st25r3911CheckFieldSetLED(value);
 8003996:	79bb      	ldrb	r3, [r7, #6]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fe9d 	bl	80036d8 <st25r3911CheckFieldSetLED>
    }    
    
    platformProtectST25R391xComm();
 800399e:	4b1c      	ldr	r3, [pc, #112]	; (8003a10 <st25r3911WriteRegister+0x90>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	3301      	adds	r3, #1
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	4b1a      	ldr	r3, [pc, #104]	; (8003a10 <st25r3911WriteRegister+0x90>)
 80039a8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80039aa:	f3bf 8f4f 	dsb	sy
}
 80039ae:	bf00      	nop
 80039b0:	2006      	movs	r0, #6
 80039b2:	f7ff fe6d 	bl	8003690 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 80039b6:	f3bf 8f4f 	dsb	sy
}
 80039ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039bc:	f3bf 8f6f 	isb	sy
}
 80039c0:	bf00      	nop
    platformSpiSelect();
 80039c2:	2200      	movs	r2, #0
 80039c4:	2140      	movs	r1, #64	; 0x40
 80039c6:	4813      	ldr	r0, [pc, #76]	; (8003a14 <st25r3911WriteRegister+0x94>)
 80039c8:	f000 ff4f 	bl	800486a <HAL_GPIO_WritePin>

    buf[0] = reg | ST25R3911_WRITE_MODE;
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	733b      	strb	r3, [r7, #12]
    buf[1] = value;
 80039d0:	79bb      	ldrb	r3, [r7, #6]
 80039d2:	737b      	strb	r3, [r7, #13]
    
    platformSpiTxRx(buf, NULL, 2);
 80039d4:	f107 030c 	add.w	r3, r7, #12
 80039d8:	2202      	movs	r2, #2
 80039da:	2100      	movs	r1, #0
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff f93f 	bl	8002c60 <spiTxRx>
    
    platformSpiDeselect();
 80039e2:	2201      	movs	r2, #1
 80039e4:	2140      	movs	r1, #64	; 0x40
 80039e6:	480b      	ldr	r0, [pc, #44]	; (8003a14 <st25r3911WriteRegister+0x94>)
 80039e8:	f000 ff3f 	bl	800486a <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <st25r3911WriteRegister+0x90>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <st25r3911WriteRegister+0x90>)
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <st25r3911WriteRegister+0x90>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d103      	bne.n	8003a08 <st25r3911WriteRegister+0x88>
 8003a00:	2006      	movs	r0, #6
 8003a02:	f7ff fe29 	bl	8003658 <__NVIC_EnableIRQ>

    return;
 8003a06:	bf00      	nop
 8003a08:	bf00      	nop
}
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20000434 	.word	0x20000434
 8003a14:	40020400 	.word	0x40020400

08003a18 <st25r3911ClrRegisterBits>:

void st25r3911ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	460a      	mov	r2, r1
 8003a22:	71fb      	strb	r3, [r7, #7]
 8003a24:	4613      	mov	r3, r2
 8003a26:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8003a28:	f107 020f 	add.w	r2, r7, #15
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff fe6f 	bl	8003714 <st25r3911ReadRegister>
    tmp &= ~clr_mask;
 8003a36:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	b25a      	sxtb	r2, r3
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	b25b      	sxtb	r3, r3
 8003a42:	4013      	ands	r3, r2
 8003a44:	b25b      	sxtb	r3, r3
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8003a4a:	7bfa      	ldrb	r2, [r7, #15]
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff95 	bl	8003980 <st25r3911WriteRegister>
    
    return;
 8003a56:	bf00      	nop
}
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <st25r3911SetRegisterBits>:


void st25r3911SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	4603      	mov	r3, r0
 8003a66:	460a      	mov	r2, r1
 8003a68:	71fb      	strb	r3, [r7, #7]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8003a6e:	f107 020f 	add.w	r2, r7, #15
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fe4c 	bl	8003714 <st25r3911ReadRegister>
    tmp |= set_mask;
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	79bb      	ldrb	r3, [r7, #6]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8003a86:	7bfa      	ldrb	r2, [r7, #15]
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff ff77 	bl	8003980 <st25r3911WriteRegister>
    
    return;
 8003a92:	bf00      	nop
}
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <st25r3911ChangeRegisterBits>:

void st25r3911ChangeRegisterBits(uint8_t reg, uint8_t valueMask, uint8_t value)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	71fb      	strb	r3, [r7, #7]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	71bb      	strb	r3, [r7, #6]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	717b      	strb	r3, [r7, #5]
    st25r3911ModifyRegister(reg, valueMask, (valueMask & value) );
 8003aac:	79ba      	ldrb	r2, [r7, #6]
 8003aae:	797b      	ldrb	r3, [r7, #5]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	79b9      	ldrb	r1, [r7, #6]
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 f804 	bl	8003ac6 <st25r3911ModifyRegister>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <st25r3911ModifyRegister>:

void st25r3911ModifyRegister(uint8_t reg, uint8_t clr_mask, uint8_t set_mask)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	4603      	mov	r3, r0
 8003ace:	71fb      	strb	r3, [r7, #7]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	71bb      	strb	r3, [r7, #6]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	717b      	strb	r3, [r7, #5]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8003ad8:	f107 020f 	add.w	r2, r7, #15
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fe17 	bl	8003714 <st25r3911ReadRegister>

    /* mask out the bits we don't want to change */
    tmp &= ~clr_mask;
 8003ae6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003aea:	43db      	mvns	r3, r3
 8003aec:	b25a      	sxtb	r2, r3
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	b25b      	sxtb	r3, r3
 8003af2:	4013      	ands	r3, r2
 8003af4:	b25b      	sxtb	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	73fb      	strb	r3, [r7, #15]
    /* set the new value */
    tmp |= set_mask;
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	797b      	ldrb	r3, [r7, #5]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	4611      	mov	r1, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff ff38 	bl	8003980 <st25r3911WriteRegister>

    return;
 8003b10:	bf00      	nop
}
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <st25r3911ChangeTestRegisterBits>:

void st25r3911ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
 8003b22:	460b      	mov	r3, r1
 8003b24:	71bb      	strb	r3, [r7, #6]
 8003b26:	4613      	mov	r3, r2
 8003b28:	717b      	strb	r3, [r7, #5]
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    st25r3911ReadTestRegister(reg, &rdVal);
 8003b2a:	f107 020e 	add.w	r2, r7, #14
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	4611      	mov	r1, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff fe8c 	bl	8003850 <st25r3911ReadTestRegister>
    
    /* Compute new value */
    wrVal  = (rdVal & ~valueMask);
 8003b38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	b25a      	sxtb	r2, r3
 8003b40:	7bbb      	ldrb	r3, [r7, #14]
 8003b42:	b25b      	sxtb	r3, r3
 8003b44:	4013      	ands	r3, r2
 8003b46:	b25b      	sxtb	r3, r3
 8003b48:	73fb      	strb	r3, [r7, #15]
    wrVal |= (value & valueMask);
 8003b4a:	797a      	ldrb	r2, [r7, #5]
 8003b4c:	79bb      	ldrb	r3, [r7, #6]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	73fb      	strb	r3, [r7, #15]
    
    /* Write new reg value */
    st25r3911WriteTestRegister(reg, wrVal );
 8003b58:	7bfa      	ldrb	r2, [r7, #15]
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fec6 	bl	80038f0 <st25r3911WriteTestRegister>
    
    return;
 8003b64:	bf00      	nop
}
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <st25r3911WriteFifo>:
    return;
}


void st25r3911WriteFifo(const uint8_t* values, uint8_t length)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_LOAD;
 8003b78:	2380      	movs	r3, #128	; 0x80
 8003b7a:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */

    if (length > 0U)
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d037      	beq.n	8003bf2 <st25r3911WriteFifo+0x86>
    {  
        platformProtectST25R391xComm();
 8003b82:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <st25r3911WriteFifo+0x90>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	3301      	adds	r3, #1
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <st25r3911WriteFifo+0x90>)
 8003b8c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b8e:	f3bf 8f4f 	dsb	sy
}
 8003b92:	bf00      	nop
 8003b94:	2006      	movs	r0, #6
 8003b96:	f7ff fd7b 	bl	8003690 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003b9a:	f3bf 8f4f 	dsb	sy
}
 8003b9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ba0:	f3bf 8f6f 	isb	sy
}
 8003ba4:	bf00      	nop
        platformSpiSelect();
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2140      	movs	r1, #64	; 0x40
 8003baa:	4815      	ldr	r0, [pc, #84]	; (8003c00 <st25r3911WriteFifo+0x94>)
 8003bac:	f000 fe5d 	bl	800486a <HAL_GPIO_WritePin>

        platformSpiTxRx( comBuf, NULL, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 8003bb0:	f107 030f 	add.w	r3, r7, #15
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff f851 	bl	8002c60 <spiTxRx>
        platformSpiTxRx( values, NULL, length );
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff f84a 	bl	8002c60 <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiDeselect();
 8003bcc:	2201      	movs	r2, #1
 8003bce:	2140      	movs	r1, #64	; 0x40
 8003bd0:	480b      	ldr	r0, [pc, #44]	; (8003c00 <st25r3911WriteFifo+0x94>)
 8003bd2:	f000 fe4a 	bl	800486a <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <st25r3911WriteFifo+0x90>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <st25r3911WriteFifo+0x90>)
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <st25r3911WriteFifo+0x90>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d103      	bne.n	8003bf2 <st25r3911WriteFifo+0x86>
 8003bea:	2006      	movs	r0, #6
 8003bec:	f7ff fd34 	bl	8003658 <__NVIC_EnableIRQ>
    }

    return;
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
}
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000434 	.word	0x20000434
 8003c00:	40020400 	.word	0x40020400

08003c04 <st25r3911ReadFifo>:

void st25r3911ReadFifo(uint8_t* buf, uint8_t length)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_READ;
 8003c10:	23bf      	movs	r3, #191	; 0xbf
 8003c12:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
    
    if(length > 0U)
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d037      	beq.n	8003c8a <st25r3911ReadFifo+0x86>
    {
        platformProtectST25R391xComm();
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <st25r3911ReadFifo+0x90>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <st25r3911ReadFifo+0x90>)
 8003c24:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c26:	f3bf 8f4f 	dsb	sy
}
 8003c2a:	bf00      	nop
 8003c2c:	2006      	movs	r0, #6
 8003c2e:	f7ff fd2f 	bl	8003690 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003c32:	f3bf 8f4f 	dsb	sy
}
 8003c36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c38:	f3bf 8f6f 	isb	sy
}
 8003c3c:	bf00      	nop
        platformSpiSelect();
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2140      	movs	r1, #64	; 0x40
 8003c42:	4815      	ldr	r0, [pc, #84]	; (8003c98 <st25r3911ReadFifo+0x94>)
 8003c44:	f000 fe11 	bl	800486a <HAL_GPIO_WritePin>
        platformSpiTxRx( comBuf, comBuf, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );          /* Transceive as a single SPI call                        */
        ST_MEMCPY( buf, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) ); /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 8003c48:	f107 030f 	add.w	r3, r7, #15
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff f805 	bl	8002c60 <spiTxRx>
        platformSpiTxRx( NULL, buf, length );
 8003c56:	78fb      	ldrb	r3, [r7, #3]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	2000      	movs	r0, #0
 8003c60:	f7fe fffe 	bl	8002c60 <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
      
        platformSpiDeselect();
 8003c64:	2201      	movs	r2, #1
 8003c66:	2140      	movs	r1, #64	; 0x40
 8003c68:	480b      	ldr	r0, [pc, #44]	; (8003c98 <st25r3911ReadFifo+0x94>)
 8003c6a:	f000 fdfe 	bl	800486a <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8003c6e:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <st25r3911ReadFifo+0x90>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <st25r3911ReadFifo+0x90>)
 8003c78:	701a      	strb	r2, [r3, #0]
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <st25r3911ReadFifo+0x90>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d103      	bne.n	8003c8a <st25r3911ReadFifo+0x86>
 8003c82:	2006      	movs	r0, #6
 8003c84:	f7ff fce8 	bl	8003658 <__NVIC_EnableIRQ>
    }

    return;
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
}
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000434 	.word	0x20000434
 8003c98:	40020400 	.word	0x40020400

08003c9c <st25r3911ExecuteCommand>:

void st25r3911ExecuteCommand( uint8_t cmd )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	71fb      	strb	r3, [r7, #7]
    uint8_t tmpCmd;                                    /* MISRA 17.8 */
    
#ifdef PLATFORM_LED_FIELD_PIN
    if ( (cmd >= ST25R3911_CMD_TRANSMIT_WITH_CRC) && (cmd <= ST25R3911_CMD_RESPONSE_RF_COLLISION_0))
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	2bc3      	cmp	r3, #195	; 0xc3
 8003caa:	d908      	bls.n	8003cbe <st25r3911ExecuteCommand+0x22>
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	2bca      	cmp	r3, #202	; 0xca
 8003cb0:	d805      	bhi.n	8003cbe <st25r3911ExecuteCommand+0x22>
    {
        platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cb8:	481e      	ldr	r0, [pc, #120]	; (8003d34 <st25r3911ExecuteCommand+0x98>)
 8003cba:	f000 fdd6 	bl	800486a <HAL_GPIO_WritePin>
    }
#endif /* PLATFORM_LED_FIELD_PIN */
    
    tmpCmd = (cmd | ST25R3911_CMD_MODE);
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	73fb      	strb	r3, [r7, #15]

    platformProtectST25R391xComm();
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <st25r3911ExecuteCommand+0x9c>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <st25r3911ExecuteCommand+0x9c>)
 8003cd2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cd4:	f3bf 8f4f 	dsb	sy
}
 8003cd8:	bf00      	nop
 8003cda:	2006      	movs	r0, #6
 8003cdc:	f7ff fcd8 	bl	8003690 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003ce0:	f3bf 8f4f 	dsb	sy
}
 8003ce4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ce6:	f3bf 8f6f 	isb	sy
}
 8003cea:	bf00      	nop
    platformSpiSelect();
 8003cec:	2200      	movs	r2, #0
 8003cee:	2140      	movs	r1, #64	; 0x40
 8003cf0:	4812      	ldr	r0, [pc, #72]	; (8003d3c <st25r3911ExecuteCommand+0xa0>)
 8003cf2:	f000 fdba 	bl	800486a <HAL_GPIO_WritePin>

    platformSpiTxRx( &tmpCmd, NULL, ST25R3911_CMD_LEN );
 8003cf6:	f107 030f 	add.w	r3, r7, #15
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe ffae 	bl	8002c60 <spiTxRx>

    platformSpiDeselect();
 8003d04:	2201      	movs	r2, #1
 8003d06:	2140      	movs	r1, #64	; 0x40
 8003d08:	480c      	ldr	r0, [pc, #48]	; (8003d3c <st25r3911ExecuteCommand+0xa0>)
 8003d0a:	f000 fdae 	bl	800486a <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <st25r3911ExecuteCommand+0x9c>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <st25r3911ExecuteCommand+0x9c>)
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <st25r3911ExecuteCommand+0x9c>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d103      	bne.n	8003d2a <st25r3911ExecuteCommand+0x8e>
 8003d22:	2006      	movs	r0, #6
 8003d24:	f7ff fc98 	bl	8003658 <__NVIC_EnableIRQ>

    return;
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
}
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40020000 	.word	0x40020000
 8003d38:	20000434 	.word	0x20000434
 8003d3c:	40020400 	.word	0x40020400

08003d40 <st25r3911ExecuteCommands>:


void st25r3911ExecuteCommands(const uint8_t *cmds, uint8_t length)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	70fb      	strb	r3, [r7, #3]
    platformProtectST25R391xComm();
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <st25r3911ExecuteCommands+0x78>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	3301      	adds	r3, #1
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <st25r3911ExecuteCommands+0x78>)
 8003d56:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d58:	f3bf 8f4f 	dsb	sy
}
 8003d5c:	bf00      	nop
 8003d5e:	2006      	movs	r0, #6
 8003d60:	f7ff fc96 	bl	8003690 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003d64:	f3bf 8f4f 	dsb	sy
}
 8003d68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d6a:	f3bf 8f6f 	isb	sy
}
 8003d6e:	bf00      	nop
    platformSpiSelect();
 8003d70:	2200      	movs	r2, #0
 8003d72:	2140      	movs	r1, #64	; 0x40
 8003d74:	4811      	ldr	r0, [pc, #68]	; (8003dbc <st25r3911ExecuteCommands+0x7c>)
 8003d76:	f000 fd78 	bl	800486a <HAL_GPIO_WritePin>
    
    platformSpiTxRx( cmds, NULL, length );
 8003d7a:	78fb      	ldrb	r3, [r7, #3]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2100      	movs	r1, #0
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fe ff6c 	bl	8002c60 <spiTxRx>
    
    platformSpiDeselect();
 8003d88:	2201      	movs	r2, #1
 8003d8a:	2140      	movs	r1, #64	; 0x40
 8003d8c:	480b      	ldr	r0, [pc, #44]	; (8003dbc <st25r3911ExecuteCommands+0x7c>)
 8003d8e:	f000 fd6c 	bl	800486a <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003d92:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <st25r3911ExecuteCommands+0x78>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <st25r3911ExecuteCommands+0x78>)
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <st25r3911ExecuteCommands+0x78>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <st25r3911ExecuteCommands+0x6e>
 8003da6:	2006      	movs	r0, #6
 8003da8:	f7ff fc56 	bl	8003658 <__NVIC_EnableIRQ>

    return;
 8003dac:	bf00      	nop
 8003dae:	bf00      	nop
}
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000434 	.word	0x20000434
 8003dbc:	40020400 	.word	0x40020400

08003dc0 <__NVIC_EnableIRQ>:
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	db0b      	blt.n	8003dea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	f003 021f 	and.w	r2, r3, #31
 8003dd8:	4906      	ldr	r1, [pc, #24]	; (8003df4 <__NVIC_EnableIRQ+0x34>)
 8003dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	2001      	movs	r0, #1
 8003de2:	fa00 f202 	lsl.w	r2, r0, r2
 8003de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr
 8003df4:	e000e100 	.word	0xe000e100

08003df8 <__NVIC_DisableIRQ>:
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	db12      	blt.n	8003e30 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	f003 021f 	and.w	r2, r3, #31
 8003e10:	490a      	ldr	r1, [pc, #40]	; (8003e3c <__NVIC_DisableIRQ+0x44>)
 8003e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	2001      	movs	r0, #1
 8003e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e1e:	3320      	adds	r3, #32
 8003e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e24:	f3bf 8f4f 	dsb	sy
}
 8003e28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e2a:	f3bf 8f6f 	isb	sy
}
 8003e2e:	bf00      	nop
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	e000e100 	.word	0xe000e100

08003e40 <st25r3911InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911InitInterrupts( void )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
    platformIrqST25R3911PinInitialize();
    platformIrqST25R3911SetCallback( st25r3911Isr );
    
    st25r3911interrupt.callback     = NULL;
 8003e44:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <st25r3911InitInterrupts+0x2c>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	605a      	str	r2, [r3, #4]
    st25r3911interrupt.prevCallback = NULL;
 8003e4a:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <st25r3911InitInterrupts+0x2c>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
    st25r3911interrupt.status       = ST25R3911_IRQ_MASK_NONE;
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <st25r3911InitInterrupts+0x2c>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	609a      	str	r2, [r3, #8]
    st25r3911interrupt.mask         = ST25R3911_IRQ_MASK_NONE;
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <st25r3911InitInterrupts+0x2c>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	60da      	str	r2, [r3, #12]
#ifdef PLATFORM_LED_RX_PIN
    platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
#endif /* PLATFORM_LED_RX_PIN */

#ifdef PLATFORM_LED_FIELD_PIN
    platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e62:	4803      	ldr	r0, [pc, #12]	; (8003e70 <st25r3911InitInterrupts+0x30>)
 8003e64:	f000 fd01 	bl	800486a <HAL_GPIO_WritePin>
#endif /* PLATFORM_LED_FIELD_PIN */
}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20003084 	.word	0x20003084
 8003e70:	40020000 	.word	0x40020000

08003e74 <st25r3911Isr>:

void st25r3911Isr( void )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
    st25r3911CheckForReceivedInterrupts();
 8003e78:	f000 f80c 	bl	8003e94 <st25r3911CheckForReceivedInterrupts>
    
    if (NULL != st25r3911interrupt.callback)
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <st25r3911Isr+0x1c>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <st25r3911Isr+0x16>
    {
        st25r3911interrupt.callback();
 8003e84:	4b02      	ldr	r3, [pc, #8]	; (8003e90 <st25r3911Isr+0x1c>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	4798      	blx	r3
    }
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20003084 	.word	0x20003084

08003e94 <st25r3911CheckForReceivedInterrupts>:

void st25r3911CheckForReceivedInterrupts( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3911_INT_REGS_LEN];
    uint32_t irqStatus; 

    irqStatus = ST25R3911_IRQ_MASK_NONE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3911_IRQ_MASK_ALL & 0xFFU), ST25R3911_INT_REGS_LEN );  /* MISRA 10.3 */
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	21ff      	movs	r1, #255	; 0xff
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f014 ff5b 	bl	8018d60 <memset>
        
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 8003eaa:	e01f      	b.n	8003eec <st25r3911CheckForReceivedInterrupts+0x58>
    {
        st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, sizeof(iregs));
 8003eac:	463b      	mov	r3, r7
 8003eae:	2203      	movs	r2, #3
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	2017      	movs	r0, #23
 8003eb4:	f7ff fc7c 	bl	80037b0 <st25r3911ReadMultipleRegisters>
       
#ifdef PLATFORM_LED_FIELD_PIN         
        if ((iregs[0] & ST25R3911_IRQ_MASK_TXE) != 0U)
 8003eb8:	783b      	ldrb	r3, [r7, #0]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <st25r3911CheckForReceivedInterrupts+0x3a>
        {
            platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ec8:	4820      	ldr	r0, [pc, #128]	; (8003f4c <st25r3911CheckForReceivedInterrupts+0xb8>)
 8003eca:	f000 fcce 	bl	800486a <HAL_GPIO_WritePin>
        {
            platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
        }
#endif /* PLATFORM_LED_RX_PIN */
       
        irqStatus |= (uint32_t)iregs[0];
 8003ece:	783b      	ldrb	r3, [r7, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[1]<<8;
 8003ed8:	787b      	ldrb	r3, [r7, #1]
 8003eda:	021b      	lsls	r3, r3, #8
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[2]<<16;
 8003ee2:	78bb      	ldrb	r3, [r7, #2]
 8003ee4:	041b      	lsls	r3, r3, #16
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	607b      	str	r3, [r7, #4]
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 8003eec:	2101      	movs	r1, #1
 8003eee:	4817      	ldr	r0, [pc, #92]	; (8003f4c <st25r3911CheckForReceivedInterrupts+0xb8>)
 8003ef0:	f000 fca4 	bl	800483c <HAL_GPIO_ReadPin>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d0d8      	beq.n	8003eac <st25r3911CheckForReceivedInterrupts+0x18>
    }
    
    /* Forward all interrupts, even masked ones to application. */
    platformProtectST25R391xIrqStatus();
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	3301      	adds	r3, #1
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8003f04:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f06:	f3bf 8f4f 	dsb	sy
}
 8003f0a:	bf00      	nop
 8003f0c:	2006      	movs	r0, #6
 8003f0e:	f7ff ff73 	bl	8003df8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003f12:	f3bf 8f4f 	dsb	sy
}
 8003f16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f18:	f3bf 8f6f 	isb	sy
}
 8003f1c:	bf00      	nop
    st25r3911interrupt.status |= irqStatus;
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <st25r3911CheckForReceivedInterrupts+0xc0>)
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	4a0b      	ldr	r2, [pc, #44]	; (8003f54 <st25r3911CheckForReceivedInterrupts+0xc0>)
 8003f28:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d102      	bne.n	8003f44 <st25r3911CheckForReceivedInterrupts+0xb0>
 8003f3e:	2006      	movs	r0, #6
 8003f40:	f7ff ff3e 	bl	8003dc0 <__NVIC_EnableIRQ>
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40020000 	.word	0x40020000
 8003f50:	20000434 	.word	0x20000434
 8003f54:	20003084 	.word	0x20003084

08003f58 <st25r3911ModifyInterrupts>:


void st25r3911ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
    uint8_t i;
    uint32_t old_mask;
    uint32_t new_mask;

    old_mask = st25r3911interrupt.mask;
 8003f62:	4b1e      	ldr	r3, [pc, #120]	; (8003fdc <st25r3911ModifyInterrupts+0x84>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	613b      	str	r3, [r7, #16]
    new_mask = (~old_mask & set_mask) | (old_mask & clr_mask);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	43da      	mvns	r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	401a      	ands	r2, r3
 8003f70:	6939      	ldr	r1, [r7, #16]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	400b      	ands	r3, r1
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
    st25r3911interrupt.mask &= ~clr_mask;
 8003f7a:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <st25r3911ModifyInterrupts+0x84>)
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	43db      	mvns	r3, r3
 8003f82:	4013      	ands	r3, r2
 8003f84:	4a15      	ldr	r2, [pc, #84]	; (8003fdc <st25r3911ModifyInterrupts+0x84>)
 8003f86:	60d3      	str	r3, [r2, #12]
    st25r3911interrupt.mask |= set_mask;
 8003f88:	4b14      	ldr	r3, [pc, #80]	; (8003fdc <st25r3911ModifyInterrupts+0x84>)
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	4a12      	ldr	r2, [pc, #72]	; (8003fdc <st25r3911ModifyInterrupts+0x84>)
 8003f92:	60d3      	str	r3, [r2, #12]
    for (i=0; i<3U ; i++)
 8003f94:	2300      	movs	r3, #0
 8003f96:	75fb      	strb	r3, [r7, #23]
 8003f98:	e019      	b.n	8003fce <st25r3911ModifyInterrupts+0x76>
    { 
        if (((new_mask >> (i*8U)) & 0xffU) == 0U) {
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00d      	beq.n	8003fc6 <st25r3911ModifyInterrupts+0x6e>
            continue;
        }
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	3314      	adds	r3, #20
 8003fae:	b2d8      	uxtb	r0, r3
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <st25r3911ModifyInterrupts+0x84>)
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	7dfb      	ldrb	r3, [r7, #23]
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f7ff fcde 	bl	8003980 <st25r3911WriteRegister>
 8003fc4:	e000      	b.n	8003fc8 <st25r3911ModifyInterrupts+0x70>
            continue;
 8003fc6:	bf00      	nop
    for (i=0; i<3U ; i++)
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d9e2      	bls.n	8003f9a <st25r3911ModifyInterrupts+0x42>
    }
    return;
 8003fd4:	bf00      	nop
}
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	20003084 	.word	0x20003084

08003fe0 <st25r3911WaitForInterruptsTimed>:


uint32_t st25r3911WaitForInterruptsTimed(uint32_t mask, uint16_t tmo)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	807b      	strh	r3, [r7, #2]
    uint32_t tmr;
    uint32_t status;
   
    tmr = platformTimerCreate(tmo);
 8003fec:	887b      	ldrh	r3, [r7, #2]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f8d2 	bl	8004198 <timerCalculateTimer>
 8003ff4:	60f8      	str	r0, [r7, #12]
    do 
    {
        status = (st25r3911interrupt.status & mask);
 8003ff6:	4b22      	ldr	r3, [pc, #136]	; (8004080 <st25r3911WaitForInterruptsTimed+0xa0>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmr ) || (tmo == 0U)) && (status == 0U) );
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f8d7 	bl	80041b4 <timerIsExpired>
 8004006:	4603      	mov	r3, r0
 8004008:	f083 0301 	eor.w	r3, r3, #1
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <st25r3911WaitForInterruptsTimed+0x38>
 8004012:	887b      	ldrh	r3, [r7, #2]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d102      	bne.n	800401e <st25r3911WaitForInterruptsTimed+0x3e>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0eb      	beq.n	8003ff6 <st25r3911WaitForInterruptsTimed+0x16>

    status = st25r3911interrupt.status & mask;
 800401e:	4b18      	ldr	r3, [pc, #96]	; (8004080 <st25r3911WaitForInterruptsTimed+0xa0>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4013      	ands	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
    
    platformProtectST25R391xIrqStatus();
 8004028:	4b16      	ldr	r3, [pc, #88]	; (8004084 <st25r3911WaitForInterruptsTimed+0xa4>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	3301      	adds	r3, #1
 800402e:	b2da      	uxtb	r2, r3
 8004030:	4b14      	ldr	r3, [pc, #80]	; (8004084 <st25r3911WaitForInterruptsTimed+0xa4>)
 8004032:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004034:	f3bf 8f4f 	dsb	sy
}
 8004038:	bf00      	nop
 800403a:	2006      	movs	r0, #6
 800403c:	f7ff fedc 	bl	8003df8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004040:	f3bf 8f4f 	dsb	sy
}
 8004044:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004046:	f3bf 8f6f 	isb	sy
}
 800404a:	bf00      	nop
    st25r3911interrupt.status &= ~status;
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <st25r3911WaitForInterruptsTimed+0xa0>)
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	43db      	mvns	r3, r3
 8004054:	4013      	ands	r3, r2
 8004056:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <st25r3911WaitForInterruptsTimed+0xa0>)
 8004058:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 800405a:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <st25r3911WaitForInterruptsTimed+0xa4>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	3b01      	subs	r3, #1
 8004060:	b2da      	uxtb	r2, r3
 8004062:	4b08      	ldr	r3, [pc, #32]	; (8004084 <st25r3911WaitForInterruptsTimed+0xa4>)
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <st25r3911WaitForInterruptsTimed+0xa4>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d102      	bne.n	8004074 <st25r3911WaitForInterruptsTimed+0x94>
 800406e:	2006      	movs	r0, #6
 8004070:	f7ff fea6 	bl	8003dc0 <__NVIC_EnableIRQ>
    
    return status;
 8004074:	68bb      	ldr	r3, [r7, #8]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20003084 	.word	0x20003084
 8004084:	20000434 	.word	0x20000434

08004088 <st25r3911GetInterrupt>:

uint32_t st25r3911GetInterrupt(uint32_t mask)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3911interrupt.status & mask);
 8004090:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <st25r3911GetInterrupt+0x70>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	4013      	ands	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
    if (irqs != ST25R3911_IRQ_MASK_NONE)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d025      	beq.n	80040ec <st25r3911GetInterrupt+0x64>
    {
        platformProtectST25R391xIrqStatus();
 80040a0:	4b16      	ldr	r3, [pc, #88]	; (80040fc <st25r3911GetInterrupt+0x74>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	3301      	adds	r3, #1
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	4b14      	ldr	r3, [pc, #80]	; (80040fc <st25r3911GetInterrupt+0x74>)
 80040aa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80040ac:	f3bf 8f4f 	dsb	sy
}
 80040b0:	bf00      	nop
 80040b2:	2006      	movs	r0, #6
 80040b4:	f7ff fea0 	bl	8003df8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 80040b8:	f3bf 8f4f 	dsb	sy
}
 80040bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040be:	f3bf 8f6f 	isb	sy
}
 80040c2:	bf00      	nop
        st25r3911interrupt.status &= ~irqs;
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <st25r3911GetInterrupt+0x70>)
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	4013      	ands	r3, r2
 80040ce:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <st25r3911GetInterrupt+0x70>)
 80040d0:	6093      	str	r3, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 80040d2:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <st25r3911GetInterrupt+0x74>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	4b08      	ldr	r3, [pc, #32]	; (80040fc <st25r3911GetInterrupt+0x74>)
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	4b07      	ldr	r3, [pc, #28]	; (80040fc <st25r3911GetInterrupt+0x74>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d102      	bne.n	80040ec <st25r3911GetInterrupt+0x64>
 80040e6:	2006      	movs	r0, #6
 80040e8:	f7ff fe6a 	bl	8003dc0 <__NVIC_EnableIRQ>
    }
    return irqs;
 80040ec:	68fb      	ldr	r3, [r7, #12]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20003084 	.word	0x20003084
 80040fc:	20000434 	.word	0x20000434

08004100 <st25r3911EnableInterrupts>:

void st25r3911EnableInterrupts(uint32_t mask)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(mask,0);
 8004108:	2100      	movs	r1, #0
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff ff24 	bl	8003f58 <st25r3911ModifyInterrupts>
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <st25r3911DisableInterrupts>:

void st25r3911DisableInterrupts(uint32_t mask)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(0,mask);
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	2000      	movs	r0, #0
 8004124:	f7ff ff18 	bl	8003f58 <st25r3911ModifyInterrupts>
}
 8004128:	bf00      	nop
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <st25r3911ClearInterrupts>:

void st25r3911ClearInterrupts( void )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
    uint8_t iregs[3];

    st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, 3);
 8004136:	1d3b      	adds	r3, r7, #4
 8004138:	2203      	movs	r2, #3
 800413a:	4619      	mov	r1, r3
 800413c:	2017      	movs	r0, #23
 800413e:	f7ff fb37 	bl	80037b0 <st25r3911ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 8004142:	4b13      	ldr	r3, [pc, #76]	; (8004190 <st25r3911ClearInterrupts+0x60>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	3301      	adds	r3, #1
 8004148:	b2da      	uxtb	r2, r3
 800414a:	4b11      	ldr	r3, [pc, #68]	; (8004190 <st25r3911ClearInterrupts+0x60>)
 800414c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800414e:	f3bf 8f4f 	dsb	sy
}
 8004152:	bf00      	nop
 8004154:	2006      	movs	r0, #6
 8004156:	f7ff fe4f 	bl	8003df8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800415a:	f3bf 8f4f 	dsb	sy
}
 800415e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004160:	f3bf 8f6f 	isb	sy
}
 8004164:	bf00      	nop
    st25r3911interrupt.status = 0;
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <st25r3911ClearInterrupts+0x64>)
 8004168:	2200      	movs	r2, #0
 800416a:	609a      	str	r2, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 800416c:	4b08      	ldr	r3, [pc, #32]	; (8004190 <st25r3911ClearInterrupts+0x60>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	3b01      	subs	r3, #1
 8004172:	b2da      	uxtb	r2, r3
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <st25r3911ClearInterrupts+0x60>)
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <st25r3911ClearInterrupts+0x60>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d103      	bne.n	8004188 <st25r3911ClearInterrupts+0x58>
 8004180:	2006      	movs	r0, #6
 8004182:	f7ff fe1d 	bl	8003dc0 <__NVIC_EnableIRQ>
    return;
 8004186:	bf00      	nop
 8004188:	bf00      	nop
}
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20000434 	.word	0x20000434
 8004194:	20003084 	.word	0x20003084

08004198 <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{  
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 80041a2:	f000 f881 	bl	80042a8 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	4413      	add	r3, r2
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 80041bc:	f000 f874 	bl	80042a8 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */
  
  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	da01      	bge.n	80041d6 <timerIsExpired+0x22>
  {
    return true;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <timerIsExpired+0x24>
  }
  
  return false;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041ea:	2003      	movs	r0, #3
 80041ec:	f000 f954 	bl	8004498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041f0:	2000      	movs	r0, #0
 80041f2:	f000 f80d 	bl	8004210 <HAL_InitTick>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	71fb      	strb	r3, [r7, #7]
 8004200:	e001      	b.n	8004206 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004202:	f7fe fd69 	bl	8002cd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004206:	79fb      	ldrb	r3, [r7, #7]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800421c:	4b16      	ldr	r3, [pc, #88]	; (8004278 <HAL_InitTick+0x68>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d022      	beq.n	800426a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004224:	4b15      	ldr	r3, [pc, #84]	; (800427c <HAL_InitTick+0x6c>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4b13      	ldr	r3, [pc, #76]	; (8004278 <HAL_InitTick+0x68>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004230:	fbb1 f3f3 	udiv	r3, r1, r3
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	4618      	mov	r0, r3
 800423a:	f000 f962 	bl	8004502 <HAL_SYSTICK_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10f      	bne.n	8004264 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b0f      	cmp	r3, #15
 8004248:	d809      	bhi.n	800425e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800424a:	2200      	movs	r2, #0
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	f04f 30ff 	mov.w	r0, #4294967295
 8004252:	f000 f92c 	bl	80044ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004256:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <HAL_InitTick+0x70>)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	e007      	b.n	800426e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	73fb      	strb	r3, [r7, #15]
 8004262:	e004      	b.n	800426e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
 8004268:	e001      	b.n	800426e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800426e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	200000a0 	.word	0x200000a0
 800427c:	20000098 	.word	0x20000098
 8004280:	2000009c 	.word	0x2000009c

08004284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <HAL_IncTick+0x1c>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <HAL_IncTick+0x20>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4413      	add	r3, r2
 8004292:	4a03      	ldr	r2, [pc, #12]	; (80042a0 <HAL_IncTick+0x1c>)
 8004294:	6013      	str	r3, [r2, #0]
}
 8004296:	bf00      	nop
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20003094 	.word	0x20003094
 80042a4:	200000a0 	.word	0x200000a0

080042a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return uwTick;
 80042ac:	4b02      	ldr	r3, [pc, #8]	; (80042b8 <HAL_GetTick+0x10>)
 80042ae:	681b      	ldr	r3, [r3, #0]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	20003094 	.word	0x20003094

080042bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042c4:	f7ff fff0 	bl	80042a8 <HAL_GetTick>
 80042c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d004      	beq.n	80042e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_Delay+0x40>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4413      	add	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042e0:	bf00      	nop
 80042e2:	f7ff ffe1 	bl	80042a8 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d8f7      	bhi.n	80042e2 <HAL_Delay+0x26>
  {
  }
}
 80042f2:	bf00      	nop
 80042f4:	bf00      	nop
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	200000a0 	.word	0x200000a0

08004300 <__NVIC_SetPriorityGrouping>:
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <__NVIC_SetPriorityGrouping+0x44>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800431c:	4013      	ands	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800432c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004332:	4a04      	ldr	r2, [pc, #16]	; (8004344 <__NVIC_SetPriorityGrouping+0x44>)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	60d3      	str	r3, [r2, #12]
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	e000ed00 	.word	0xe000ed00

08004348 <__NVIC_GetPriorityGrouping>:
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <__NVIC_GetPriorityGrouping+0x18>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	f003 0307 	and.w	r3, r3, #7
}
 8004356:	4618      	mov	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <__NVIC_EnableIRQ>:
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	2b00      	cmp	r3, #0
 8004374:	db0b      	blt.n	800438e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	f003 021f 	and.w	r2, r3, #31
 800437c:	4906      	ldr	r1, [pc, #24]	; (8004398 <__NVIC_EnableIRQ+0x34>)
 800437e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2001      	movs	r0, #1
 8004386:	fa00 f202 	lsl.w	r2, r0, r2
 800438a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr
 8004398:	e000e100 	.word	0xe000e100

0800439c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	6039      	str	r1, [r7, #0]
 80043a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	db0a      	blt.n	80043c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	490c      	ldr	r1, [pc, #48]	; (80043e8 <__NVIC_SetPriority+0x4c>)
 80043b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ba:	0112      	lsls	r2, r2, #4
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	440b      	add	r3, r1
 80043c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043c4:	e00a      	b.n	80043dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	4908      	ldr	r1, [pc, #32]	; (80043ec <__NVIC_SetPriority+0x50>)
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	3b04      	subs	r3, #4
 80043d4:	0112      	lsls	r2, r2, #4
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	440b      	add	r3, r1
 80043da:	761a      	strb	r2, [r3, #24]
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	e000e100 	.word	0xe000e100
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b089      	sub	sp, #36	; 0x24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f1c3 0307 	rsb	r3, r3, #7
 800440a:	2b04      	cmp	r3, #4
 800440c:	bf28      	it	cs
 800440e:	2304      	movcs	r3, #4
 8004410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	3304      	adds	r3, #4
 8004416:	2b06      	cmp	r3, #6
 8004418:	d902      	bls.n	8004420 <NVIC_EncodePriority+0x30>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	3b03      	subs	r3, #3
 800441e:	e000      	b.n	8004422 <NVIC_EncodePriority+0x32>
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004424:	f04f 32ff 	mov.w	r2, #4294967295
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43da      	mvns	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	401a      	ands	r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004438:	f04f 31ff 	mov.w	r1, #4294967295
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	fa01 f303 	lsl.w	r3, r1, r3
 8004442:	43d9      	mvns	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004448:	4313      	orrs	r3, r2
         );
}
 800444a:	4618      	mov	r0, r3
 800444c:	3724      	adds	r7, #36	; 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3b01      	subs	r3, #1
 8004460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004464:	d301      	bcc.n	800446a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004466:	2301      	movs	r3, #1
 8004468:	e00f      	b.n	800448a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800446a:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <SysTick_Config+0x40>)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3b01      	subs	r3, #1
 8004470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004472:	210f      	movs	r1, #15
 8004474:	f04f 30ff 	mov.w	r0, #4294967295
 8004478:	f7ff ff90 	bl	800439c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <SysTick_Config+0x40>)
 800447e:	2200      	movs	r2, #0
 8004480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004482:	4b04      	ldr	r3, [pc, #16]	; (8004494 <SysTick_Config+0x40>)
 8004484:	2207      	movs	r2, #7
 8004486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	e000e010 	.word	0xe000e010

08004498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff ff2d 	bl	8004300 <__NVIC_SetPriorityGrouping>
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b086      	sub	sp, #24
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044c0:	f7ff ff42 	bl	8004348 <__NVIC_GetPriorityGrouping>
 80044c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	6978      	ldr	r0, [r7, #20]
 80044cc:	f7ff ff90 	bl	80043f0 <NVIC_EncodePriority>
 80044d0:	4602      	mov	r2, r0
 80044d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff ff5f 	bl	800439c <__NVIC_SetPriority>
}
 80044de:	bf00      	nop
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	4603      	mov	r3, r0
 80044ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff ff35 	bl	8004364 <__NVIC_EnableIRQ>
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff ffa2 	bl	8004454 <SysTick_Config>
 8004510:	4603      	mov	r3, r0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800452e:	2300      	movs	r3, #0
 8004530:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004532:	e160      	b.n	80047f6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	2101      	movs	r1, #1
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	fa01 f303 	lsl.w	r3, r1, r3
 8004540:	4013      	ands	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8152 	beq.w	80047f0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b01      	cmp	r3, #1
 8004556:	d005      	beq.n	8004564 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004560:	2b02      	cmp	r3, #2
 8004562:	d130      	bne.n	80045c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2203      	movs	r2, #3
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800459a:	2201      	movs	r2, #1
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	f003 0201 	and.w	r2, r3, #1
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d017      	beq.n	8004602 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	2203      	movs	r2, #3
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d123      	bne.n	8004656 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	08da      	lsrs	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3208      	adds	r2, #8
 8004616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800461a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	220f      	movs	r2, #15
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	08da      	lsrs	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3208      	adds	r2, #8
 8004650:	6939      	ldr	r1, [r7, #16]
 8004652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	2203      	movs	r2, #3
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4013      	ands	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f003 0203 	and.w	r2, r3, #3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80ac 	beq.w	80047f0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004698:	4b5e      	ldr	r3, [pc, #376]	; (8004814 <HAL_GPIO_Init+0x2f8>)
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	4a5d      	ldr	r2, [pc, #372]	; (8004814 <HAL_GPIO_Init+0x2f8>)
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	6213      	str	r3, [r2, #32]
 80046a4:	4b5b      	ldr	r3, [pc, #364]	; (8004814 <HAL_GPIO_Init+0x2f8>)
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80046b0:	4a59      	ldr	r2, [pc, #356]	; (8004818 <HAL_GPIO_Init+0x2fc>)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	089b      	lsrs	r3, r3, #2
 80046b6:	3302      	adds	r3, #2
 80046b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	220f      	movs	r2, #15
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a51      	ldr	r2, [pc, #324]	; (800481c <HAL_GPIO_Init+0x300>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d025      	beq.n	8004728 <HAL_GPIO_Init+0x20c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a50      	ldr	r2, [pc, #320]	; (8004820 <HAL_GPIO_Init+0x304>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d01f      	beq.n	8004724 <HAL_GPIO_Init+0x208>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a4f      	ldr	r2, [pc, #316]	; (8004824 <HAL_GPIO_Init+0x308>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d019      	beq.n	8004720 <HAL_GPIO_Init+0x204>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a4e      	ldr	r2, [pc, #312]	; (8004828 <HAL_GPIO_Init+0x30c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d013      	beq.n	800471c <HAL_GPIO_Init+0x200>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a4d      	ldr	r2, [pc, #308]	; (800482c <HAL_GPIO_Init+0x310>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00d      	beq.n	8004718 <HAL_GPIO_Init+0x1fc>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a4c      	ldr	r2, [pc, #304]	; (8004830 <HAL_GPIO_Init+0x314>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d007      	beq.n	8004714 <HAL_GPIO_Init+0x1f8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a4b      	ldr	r2, [pc, #300]	; (8004834 <HAL_GPIO_Init+0x318>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d101      	bne.n	8004710 <HAL_GPIO_Init+0x1f4>
 800470c:	2306      	movs	r3, #6
 800470e:	e00c      	b.n	800472a <HAL_GPIO_Init+0x20e>
 8004710:	2307      	movs	r3, #7
 8004712:	e00a      	b.n	800472a <HAL_GPIO_Init+0x20e>
 8004714:	2305      	movs	r3, #5
 8004716:	e008      	b.n	800472a <HAL_GPIO_Init+0x20e>
 8004718:	2304      	movs	r3, #4
 800471a:	e006      	b.n	800472a <HAL_GPIO_Init+0x20e>
 800471c:	2303      	movs	r3, #3
 800471e:	e004      	b.n	800472a <HAL_GPIO_Init+0x20e>
 8004720:	2302      	movs	r3, #2
 8004722:	e002      	b.n	800472a <HAL_GPIO_Init+0x20e>
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <HAL_GPIO_Init+0x20e>
 8004728:	2300      	movs	r3, #0
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	f002 0203 	and.w	r2, r2, #3
 8004730:	0092      	lsls	r2, r2, #2
 8004732:	4093      	lsls	r3, r2
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800473a:	4937      	ldr	r1, [pc, #220]	; (8004818 <HAL_GPIO_Init+0x2fc>)
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	3302      	adds	r3, #2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004748:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <HAL_GPIO_Init+0x31c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	43db      	mvns	r3, r3
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4013      	ands	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800476c:	4a32      	ldr	r2, [pc, #200]	; (8004838 <HAL_GPIO_Init+0x31c>)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004772:	4b31      	ldr	r3, [pc, #196]	; (8004838 <HAL_GPIO_Init+0x31c>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	43db      	mvns	r3, r3
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4013      	ands	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004796:	4a28      	ldr	r2, [pc, #160]	; (8004838 <HAL_GPIO_Init+0x31c>)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800479c:	4b26      	ldr	r3, [pc, #152]	; (8004838 <HAL_GPIO_Init+0x31c>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	43db      	mvns	r3, r3
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4013      	ands	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80047c0:	4a1d      	ldr	r2, [pc, #116]	; (8004838 <HAL_GPIO_Init+0x31c>)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047c6:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <HAL_GPIO_Init+0x31c>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4013      	ands	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80047ea:	4a13      	ldr	r2, [pc, #76]	; (8004838 <HAL_GPIO_Init+0x31c>)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	3301      	adds	r3, #1
 80047f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	f47f ae97 	bne.w	8004534 <HAL_GPIO_Init+0x18>
  }
}
 8004806:	bf00      	nop
 8004808:	bf00      	nop
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40023800 	.word	0x40023800
 8004818:	40010000 	.word	0x40010000
 800481c:	40020000 	.word	0x40020000
 8004820:	40020400 	.word	0x40020400
 8004824:	40020800 	.word	0x40020800
 8004828:	40020c00 	.word	0x40020c00
 800482c:	40021000 	.word	0x40021000
 8004830:	40021400 	.word	0x40021400
 8004834:	40021800 	.word	0x40021800
 8004838:	40010400 	.word	0x40010400

0800483c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	887b      	ldrh	r3, [r7, #2]
 800484e:	4013      	ands	r3, r2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
 8004858:	e001      	b.n	800485e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800485a:	2300      	movs	r3, #0
 800485c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800485e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr

0800486a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	460b      	mov	r3, r1
 8004874:	807b      	strh	r3, [r7, #2]
 8004876:	4613      	mov	r3, r2
 8004878:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800487a:	787b      	ldrb	r3, [r7, #1]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004880:	887a      	ldrh	r2, [r7, #2]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8004886:	e003      	b.n	8004890 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8004888:	887b      	ldrh	r3, [r7, #2]
 800488a:	041a      	lsls	r2, r3, #16
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	619a      	str	r2, [r3, #24]
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr

0800489a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800489a:	b480      	push	{r7}
 800489c:	b085      	sub	sp, #20
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	460b      	mov	r3, r1
 80048a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048ac:	887a      	ldrh	r2, [r7, #2]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4013      	ands	r3, r2
 80048b2:	041a      	lsls	r2, r3, #16
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	43d9      	mvns	r1, r3
 80048b8:	887b      	ldrh	r3, [r7, #2]
 80048ba:	400b      	ands	r3, r1
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	619a      	str	r2, [r3, #24]
}
 80048c2:	bf00      	nop
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80048d6:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048d8:	695a      	ldr	r2, [r3, #20]
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	4013      	ands	r3, r2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d006      	beq.n	80048f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048e2:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048e4:	88fb      	ldrh	r3, [r7, #6]
 80048e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f806 	bl	80048fc <HAL_GPIO_EXTI_Callback>
  }
}
 80048f0:	bf00      	nop
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40010400 	.word	0x40010400

080048fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr

08004910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e31d      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004922:	4b94      	ldr	r3, [pc, #592]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800492c:	4b91      	ldr	r3, [pc, #580]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004934:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d07b      	beq.n	8004a3a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d006      	beq.n	8004956 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b0c      	cmp	r3, #12
 800494c:	d10f      	bne.n	800496e <HAL_RCC_OscConfig+0x5e>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004954:	d10b      	bne.n	800496e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004956:	4b87      	ldr	r3, [pc, #540]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d06a      	beq.n	8004a38 <HAL_RCC_OscConfig+0x128>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d166      	bne.n	8004a38 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e2f7      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d106      	bne.n	8004984 <HAL_RCC_OscConfig+0x74>
 8004976:	4b7f      	ldr	r3, [pc, #508]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a7e      	ldr	r2, [pc, #504]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 800497c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e02d      	b.n	80049e0 <HAL_RCC_OscConfig+0xd0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10c      	bne.n	80049a6 <HAL_RCC_OscConfig+0x96>
 800498c:	4b79      	ldr	r3, [pc, #484]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4b76      	ldr	r3, [pc, #472]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a75      	ldr	r2, [pc, #468]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 800499e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	e01c      	b.n	80049e0 <HAL_RCC_OscConfig+0xd0>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b05      	cmp	r3, #5
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCC_OscConfig+0xb8>
 80049ae:	4b71      	ldr	r3, [pc, #452]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a70      	ldr	r2, [pc, #448]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 80049b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	4b6e      	ldr	r3, [pc, #440]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a6d      	ldr	r2, [pc, #436]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e00b      	b.n	80049e0 <HAL_RCC_OscConfig+0xd0>
 80049c8:	4b6a      	ldr	r3, [pc, #424]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a69      	ldr	r2, [pc, #420]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b67      	ldr	r3, [pc, #412]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a66      	ldr	r2, [pc, #408]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 80049da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d013      	beq.n	8004a10 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e8:	f7ff fc5e 	bl	80042a8 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f0:	f7ff fc5a 	bl	80042a8 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e2ad      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a02:	4b5c      	ldr	r3, [pc, #368]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0xe0>
 8004a0e:	e014      	b.n	8004a3a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a10:	f7ff fc4a 	bl	80042a8 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a18:	f7ff fc46 	bl	80042a8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	; 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e299      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a2a:	4b52      	ldr	r3, [pc, #328]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x108>
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d05a      	beq.n	8004afc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d119      	bne.n	8004a86 <HAL_RCC_OscConfig+0x176>
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d116      	bne.n	8004a86 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a58:	4b46      	ldr	r3, [pc, #280]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_OscConfig+0x160>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e276      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a70:	4b40      	ldr	r3, [pc, #256]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	493d      	ldr	r1, [pc, #244]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a84:	e03a      	b.n	8004afc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d020      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a8e:	4b3a      	ldr	r3, [pc, #232]	; (8004b78 <HAL_RCC_OscConfig+0x268>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a94:	f7ff fc08 	bl	80042a8 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a9c:	f7ff fc04 	bl	80042a8 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e257      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aae:	4b31      	ldr	r3, [pc, #196]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aba:	4b2e      	ldr	r3, [pc, #184]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	492a      	ldr	r1, [pc, #168]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	604b      	str	r3, [r1, #4]
 8004ace:	e015      	b.n	8004afc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad0:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <HAL_RCC_OscConfig+0x268>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad6:	f7ff fbe7 	bl	80042a8 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ade:	f7ff fbe3 	bl	80042a8 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e236      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004af0:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f0      	bne.n	8004ade <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80b8 	beq.w	8004c7a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d170      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b10:	4b18      	ldr	r3, [pc, #96]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_OscConfig+0x218>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e21a      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1a      	ldr	r2, [r3, #32]
 8004b2c:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d921      	bls.n	8004b7c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fc7d 	bl	800543c <RCC_SetFlashLatencyFromMSIRange>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e208      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b4c:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	4906      	ldr	r1, [pc, #24]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	061b      	lsls	r3, r3, #24
 8004b6c:	4901      	ldr	r1, [pc, #4]	; (8004b74 <HAL_RCC_OscConfig+0x264>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	604b      	str	r3, [r1, #4]
 8004b72:	e020      	b.n	8004bb6 <HAL_RCC_OscConfig+0x2a6>
 8004b74:	40023800 	.word	0x40023800
 8004b78:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b7c:	4b99      	ldr	r3, [pc, #612]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	4996      	ldr	r1, [pc, #600]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b8e:	4b95      	ldr	r3, [pc, #596]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	061b      	lsls	r3, r3, #24
 8004b9c:	4991      	ldr	r1, [pc, #580]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fc48 	bl	800543c <RCC_SetFlashLatencyFromMSIRange>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e1d3      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	0b5b      	lsrs	r3, r3, #13
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004bc6:	4a87      	ldr	r2, [pc, #540]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004bc8:	6892      	ldr	r2, [r2, #8]
 8004bca:	0912      	lsrs	r2, r2, #4
 8004bcc:	f002 020f 	and.w	r2, r2, #15
 8004bd0:	4985      	ldr	r1, [pc, #532]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004bd2:	5c8a      	ldrb	r2, [r1, r2]
 8004bd4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004bd6:	4a85      	ldr	r2, [pc, #532]	; (8004dec <HAL_RCC_OscConfig+0x4dc>)
 8004bd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004bda:	4b85      	ldr	r3, [pc, #532]	; (8004df0 <HAL_RCC_OscConfig+0x4e0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fb16 	bl	8004210 <HAL_InitTick>
 8004be4:	4603      	mov	r3, r0
 8004be6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d045      	beq.n	8004c7a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	e1b5      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d029      	beq.n	8004c4e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004bfa:	4b7e      	ldr	r3, [pc, #504]	; (8004df4 <HAL_RCC_OscConfig+0x4e4>)
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c00:	f7ff fb52 	bl	80042a8 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c08:	f7ff fb4e 	bl	80042a8 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e1a1      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c1a:	4b72      	ldr	r3, [pc, #456]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c26:	4b6f      	ldr	r3, [pc, #444]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	496c      	ldr	r1, [pc, #432]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c38:	4b6a      	ldr	r3, [pc, #424]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	061b      	lsls	r3, r3, #24
 8004c46:	4967      	ldr	r1, [pc, #412]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	604b      	str	r3, [r1, #4]
 8004c4c:	e015      	b.n	8004c7a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c4e:	4b69      	ldr	r3, [pc, #420]	; (8004df4 <HAL_RCC_OscConfig+0x4e4>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c54:	f7ff fb28 	bl	80042a8 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c5c:	f7ff fb24 	bl	80042a8 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e177      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c6e:	4b5d      	ldr	r3, [pc, #372]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d030      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d016      	beq.n	8004cbc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c8e:	4b5a      	ldr	r3, [pc, #360]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c94:	f7ff fb08 	bl	80042a8 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c9c:	f7ff fb04 	bl	80042a8 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e157      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cae:	4b4d      	ldr	r3, [pc, #308]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x38c>
 8004cba:	e015      	b.n	8004ce8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cbc:	4b4e      	ldr	r3, [pc, #312]	; (8004df8 <HAL_RCC_OscConfig+0x4e8>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc2:	f7ff faf1 	bl	80042a8 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cca:	f7ff faed 	bl	80042a8 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e140      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cdc:	4b41      	ldr	r3, [pc, #260]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f0      	bne.n	8004cca <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80b5 	beq.w	8004e60 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cfa:	4b3a      	ldr	r3, [pc, #232]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10d      	bne.n	8004d22 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d06:	4b37      	ldr	r3, [pc, #220]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	4a36      	ldr	r2, [pc, #216]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d10:	6253      	str	r3, [r2, #36]	; 0x24
 8004d12:	4b34      	ldr	r3, [pc, #208]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d22:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <HAL_RCC_OscConfig+0x4ec>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d118      	bne.n	8004d60 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2e:	4b33      	ldr	r3, [pc, #204]	; (8004dfc <HAL_RCC_OscConfig+0x4ec>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a32      	ldr	r2, [pc, #200]	; (8004dfc <HAL_RCC_OscConfig+0x4ec>)
 8004d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d3a:	f7ff fab5 	bl	80042a8 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d42:	f7ff fab1 	bl	80042a8 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b64      	cmp	r3, #100	; 0x64
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e104      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d54:	4b29      	ldr	r3, [pc, #164]	; (8004dfc <HAL_RCC_OscConfig+0x4ec>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d106      	bne.n	8004d76 <HAL_RCC_OscConfig+0x466>
 8004d68:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6c:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d72:	6353      	str	r3, [r2, #52]	; 0x34
 8004d74:	e02d      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4c2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCC_OscConfig+0x488>
 8004d7e:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d82:	4a18      	ldr	r2, [pc, #96]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d88:	6353      	str	r3, [r2, #52]	; 0x34
 8004d8a:	4b16      	ldr	r3, [pc, #88]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8e:	4a15      	ldr	r2, [pc, #84]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004d90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d94:	6353      	str	r3, [r2, #52]	; 0x34
 8004d96:	e01c      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4c2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b05      	cmp	r3, #5
 8004d9e:	d10c      	bne.n	8004dba <HAL_RCC_OscConfig+0x4aa>
 8004da0:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da4:	4a0f      	ldr	r2, [pc, #60]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004daa:	6353      	str	r3, [r2, #52]	; 0x34
 8004dac:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db0:	4a0c      	ldr	r2, [pc, #48]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db6:	6353      	str	r3, [r2, #52]	; 0x34
 8004db8:	e00b      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4c2>
 8004dba:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbe:	4a09      	ldr	r2, [pc, #36]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc4:	6353      	str	r3, [r2, #52]	; 0x34
 8004dc6:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dca:	4a06      	ldr	r2, [pc, #24]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004dcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dd0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d024      	beq.n	8004e24 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dda:	f7ff fa65 	bl	80042a8 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004de0:	e019      	b.n	8004e16 <HAL_RCC_OscConfig+0x506>
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800
 8004de8:	0801a988 	.word	0x0801a988
 8004dec:	20000098 	.word	0x20000098
 8004df0:	2000009c 	.word	0x2000009c
 8004df4:	42470020 	.word	0x42470020
 8004df8:	42470680 	.word	0x42470680
 8004dfc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e00:	f7ff fa52 	bl	80042a8 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e0a3      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e16:	4b54      	ldr	r3, [pc, #336]	; (8004f68 <HAL_RCC_OscConfig+0x658>)
 8004e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0ee      	beq.n	8004e00 <HAL_RCC_OscConfig+0x4f0>
 8004e22:	e014      	b.n	8004e4e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e24:	f7ff fa40 	bl	80042a8 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2c:	f7ff fa3c 	bl	80042a8 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e08d      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e42:	4b49      	ldr	r3, [pc, #292]	; (8004f68 <HAL_RCC_OscConfig+0x658>)
 8004e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1ee      	bne.n	8004e2c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e4e:	7ffb      	ldrb	r3, [r7, #31]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d105      	bne.n	8004e60 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e54:	4b44      	ldr	r3, [pc, #272]	; (8004f68 <HAL_RCC_OscConfig+0x658>)
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	4a43      	ldr	r2, [pc, #268]	; (8004f68 <HAL_RCC_OscConfig+0x658>)
 8004e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e5e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d079      	beq.n	8004f5c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2b0c      	cmp	r3, #12
 8004e6c:	d056      	beq.n	8004f1c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d13b      	bne.n	8004eee <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e76:	4b3d      	ldr	r3, [pc, #244]	; (8004f6c <HAL_RCC_OscConfig+0x65c>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7ff fa14 	bl	80042a8 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e84:	f7ff fa10 	bl	80042a8 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e063      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e96:	4b34      	ldr	r3, [pc, #208]	; (8004f68 <HAL_RCC_OscConfig+0x658>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ea2:	4b31      	ldr	r3, [pc, #196]	; (8004f68 <HAL_RCC_OscConfig+0x658>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	4319      	orrs	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	492b      	ldr	r1, [pc, #172]	; (8004f68 <HAL_RCC_OscConfig+0x658>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ec0:	4b2a      	ldr	r3, [pc, #168]	; (8004f6c <HAL_RCC_OscConfig+0x65c>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec6:	f7ff f9ef 	bl	80042a8 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ece:	f7ff f9eb 	bl	80042a8 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e03e      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ee0:	4b21      	ldr	r3, [pc, #132]	; (8004f68 <HAL_RCC_OscConfig+0x658>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <HAL_RCC_OscConfig+0x5be>
 8004eec:	e036      	b.n	8004f5c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eee:	4b1f      	ldr	r3, [pc, #124]	; (8004f6c <HAL_RCC_OscConfig+0x65c>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef4:	f7ff f9d8 	bl	80042a8 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004efc:	f7ff f9d4 	bl	80042a8 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e027      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f0e:	4b16      	ldr	r3, [pc, #88]	; (8004f68 <HAL_RCC_OscConfig+0x658>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x5ec>
 8004f1a:	e01f      	b.n	8004f5c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e01a      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f28:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <HAL_RCC_OscConfig+0x658>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d10d      	bne.n	8004f58 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d106      	bne.n	8004f58 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d001      	beq.n	8004f5c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3720      	adds	r7, #32
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	42470060 	.word	0x42470060

08004f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e11a      	b.n	80051ba <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f84:	4b8f      	ldr	r3, [pc, #572]	; (80051c4 <HAL_RCC_ClockConfig+0x254>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d919      	bls.n	8004fc6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d105      	bne.n	8004fa4 <HAL_RCC_ClockConfig+0x34>
 8004f98:	4b8a      	ldr	r3, [pc, #552]	; (80051c4 <HAL_RCC_ClockConfig+0x254>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a89      	ldr	r2, [pc, #548]	; (80051c4 <HAL_RCC_ClockConfig+0x254>)
 8004f9e:	f043 0304 	orr.w	r3, r3, #4
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	4b87      	ldr	r3, [pc, #540]	; (80051c4 <HAL_RCC_ClockConfig+0x254>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f023 0201 	bic.w	r2, r3, #1
 8004fac:	4985      	ldr	r1, [pc, #532]	; (80051c4 <HAL_RCC_ClockConfig+0x254>)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb4:	4b83      	ldr	r3, [pc, #524]	; (80051c4 <HAL_RCC_ClockConfig+0x254>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d001      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e0f9      	b.n	80051ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d008      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd2:	4b7d      	ldr	r3, [pc, #500]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	497a      	ldr	r1, [pc, #488]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 808e 	beq.w	800510e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d107      	bne.n	800500a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ffa:	4b73      	ldr	r3, [pc, #460]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d121      	bne.n	800504a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e0d7      	b.n	80051ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b03      	cmp	r3, #3
 8005010:	d107      	bne.n	8005022 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005012:	4b6d      	ldr	r3, [pc, #436]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d115      	bne.n	800504a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e0cb      	b.n	80051ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d107      	bne.n	800503a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800502a:	4b67      	ldr	r3, [pc, #412]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e0bf      	b.n	80051ba <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800503a:	4b63      	ldr	r3, [pc, #396]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e0b7      	b.n	80051ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800504a:	4b5f      	ldr	r3, [pc, #380]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f023 0203 	bic.w	r2, r3, #3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	495c      	ldr	r1, [pc, #368]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 8005058:	4313      	orrs	r3, r2
 800505a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800505c:	f7ff f924 	bl	80042a8 <HAL_GetTick>
 8005060:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d112      	bne.n	8005090 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800506a:	e00a      	b.n	8005082 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800506c:	f7ff f91c 	bl	80042a8 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f241 3288 	movw	r2, #5000	; 0x1388
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e09b      	b.n	80051ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005082:	4b51      	ldr	r3, [pc, #324]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	2b08      	cmp	r3, #8
 800508c:	d1ee      	bne.n	800506c <HAL_RCC_ClockConfig+0xfc>
 800508e:	e03e      	b.n	800510e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b03      	cmp	r3, #3
 8005096:	d112      	bne.n	80050be <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005098:	e00a      	b.n	80050b0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509a:	f7ff f905 	bl	80042a8 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e084      	b.n	80051ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050b0:	4b45      	ldr	r3, [pc, #276]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 030c 	and.w	r3, r3, #12
 80050b8:	2b0c      	cmp	r3, #12
 80050ba:	d1ee      	bne.n	800509a <HAL_RCC_ClockConfig+0x12a>
 80050bc:	e027      	b.n	800510e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d11d      	bne.n	8005102 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80050c6:	e00a      	b.n	80050de <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c8:	f7ff f8ee 	bl	80042a8 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e06d      	b.n	80051ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80050de:	4b3a      	ldr	r3, [pc, #232]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d1ee      	bne.n	80050c8 <HAL_RCC_ClockConfig+0x158>
 80050ea:	e010      	b.n	800510e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ec:	f7ff f8dc 	bl	80042a8 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e05b      	b.n	80051ba <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005102:	4b31      	ldr	r3, [pc, #196]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 030c 	and.w	r3, r3, #12
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1ee      	bne.n	80050ec <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800510e:	4b2d      	ldr	r3, [pc, #180]	; (80051c4 <HAL_RCC_ClockConfig+0x254>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d219      	bcs.n	8005150 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d105      	bne.n	800512e <HAL_RCC_ClockConfig+0x1be>
 8005122:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <HAL_RCC_ClockConfig+0x254>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a27      	ldr	r2, [pc, #156]	; (80051c4 <HAL_RCC_ClockConfig+0x254>)
 8005128:	f043 0304 	orr.w	r3, r3, #4
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	4b25      	ldr	r3, [pc, #148]	; (80051c4 <HAL_RCC_ClockConfig+0x254>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f023 0201 	bic.w	r2, r3, #1
 8005136:	4923      	ldr	r1, [pc, #140]	; (80051c4 <HAL_RCC_ClockConfig+0x254>)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	4313      	orrs	r3, r2
 800513c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800513e:	4b21      	ldr	r3, [pc, #132]	; (80051c4 <HAL_RCC_ClockConfig+0x254>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d001      	beq.n	8005150 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e034      	b.n	80051ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800515c:	4b1a      	ldr	r3, [pc, #104]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4917      	ldr	r1, [pc, #92]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800517a:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	490f      	ldr	r1, [pc, #60]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800518e:	f000 f823 	bl	80051d8 <HAL_RCC_GetSysClockFreq>
 8005192:	4602      	mov	r2, r0
 8005194:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <HAL_RCC_ClockConfig+0x258>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	091b      	lsrs	r3, r3, #4
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	490b      	ldr	r1, [pc, #44]	; (80051cc <HAL_RCC_ClockConfig+0x25c>)
 80051a0:	5ccb      	ldrb	r3, [r1, r3]
 80051a2:	fa22 f303 	lsr.w	r3, r2, r3
 80051a6:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <HAL_RCC_ClockConfig+0x260>)
 80051a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051aa:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <HAL_RCC_ClockConfig+0x264>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff f82e 	bl	8004210 <HAL_InitTick>
 80051b4:	4603      	mov	r3, r0
 80051b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80051b8:	7afb      	ldrb	r3, [r7, #11]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40023c00 	.word	0x40023c00
 80051c8:	40023800 	.word	0x40023800
 80051cc:	0801a988 	.word	0x0801a988
 80051d0:	20000098 	.word	0x20000098
 80051d4:	2000009c 	.word	0x2000009c

080051d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051dc:	b092      	sub	sp, #72	; 0x48
 80051de:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80051e0:	4b79      	ldr	r3, [pc, #484]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e8:	f003 030c 	and.w	r3, r3, #12
 80051ec:	2b0c      	cmp	r3, #12
 80051ee:	d00d      	beq.n	800520c <HAL_RCC_GetSysClockFreq+0x34>
 80051f0:	2b0c      	cmp	r3, #12
 80051f2:	f200 80d5 	bhi.w	80053a0 <HAL_RCC_GetSysClockFreq+0x1c8>
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d002      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0x28>
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d003      	beq.n	8005206 <HAL_RCC_GetSysClockFreq+0x2e>
 80051fe:	e0cf      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005200:	4b72      	ldr	r3, [pc, #456]	; (80053cc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005202:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005204:	e0da      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005206:	4b72      	ldr	r3, [pc, #456]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005208:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800520a:	e0d7      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800520c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520e:	0c9b      	lsrs	r3, r3, #18
 8005210:	f003 020f 	and.w	r2, r3, #15
 8005214:	4b6f      	ldr	r3, [pc, #444]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005216:	5c9b      	ldrb	r3, [r3, r2]
 8005218:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800521a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800521c:	0d9b      	lsrs	r3, r3, #22
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	3301      	adds	r3, #1
 8005224:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005226:	4b68      	ldr	r3, [pc, #416]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d05d      	beq.n	80052ee <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	2200      	movs	r2, #0
 8005236:	4618      	mov	r0, r3
 8005238:	4611      	mov	r1, r2
 800523a:	4604      	mov	r4, r0
 800523c:	460d      	mov	r5, r1
 800523e:	4622      	mov	r2, r4
 8005240:	462b      	mov	r3, r5
 8005242:	f04f 0000 	mov.w	r0, #0
 8005246:	f04f 0100 	mov.w	r1, #0
 800524a:	0159      	lsls	r1, r3, #5
 800524c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005250:	0150      	lsls	r0, r2, #5
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4621      	mov	r1, r4
 8005258:	1a51      	subs	r1, r2, r1
 800525a:	6139      	str	r1, [r7, #16]
 800525c:	4629      	mov	r1, r5
 800525e:	eb63 0301 	sbc.w	r3, r3, r1
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005270:	4659      	mov	r1, fp
 8005272:	018b      	lsls	r3, r1, #6
 8005274:	4651      	mov	r1, sl
 8005276:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800527a:	4651      	mov	r1, sl
 800527c:	018a      	lsls	r2, r1, #6
 800527e:	46d4      	mov	ip, sl
 8005280:	ebb2 080c 	subs.w	r8, r2, ip
 8005284:	4659      	mov	r1, fp
 8005286:	eb63 0901 	sbc.w	r9, r3, r1
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800529a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800529e:	4690      	mov	r8, r2
 80052a0:	4699      	mov	r9, r3
 80052a2:	4623      	mov	r3, r4
 80052a4:	eb18 0303 	adds.w	r3, r8, r3
 80052a8:	60bb      	str	r3, [r7, #8]
 80052aa:	462b      	mov	r3, r5
 80052ac:	eb49 0303 	adc.w	r3, r9, r3
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052be:	4629      	mov	r1, r5
 80052c0:	024b      	lsls	r3, r1, #9
 80052c2:	4620      	mov	r0, r4
 80052c4:	4629      	mov	r1, r5
 80052c6:	4604      	mov	r4, r0
 80052c8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80052cc:	4601      	mov	r1, r0
 80052ce:	024a      	lsls	r2, r1, #9
 80052d0:	4610      	mov	r0, r2
 80052d2:	4619      	mov	r1, r3
 80052d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d6:	2200      	movs	r2, #0
 80052d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052e0:	f7fa ff54 	bl	800018c <__aeabi_uldivmod>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4613      	mov	r3, r2
 80052ea:	647b      	str	r3, [r7, #68]	; 0x44
 80052ec:	e055      	b.n	800539a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	2200      	movs	r2, #0
 80052f2:	623b      	str	r3, [r7, #32]
 80052f4:	627a      	str	r2, [r7, #36]	; 0x24
 80052f6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052fa:	4642      	mov	r2, r8
 80052fc:	464b      	mov	r3, r9
 80052fe:	f04f 0000 	mov.w	r0, #0
 8005302:	f04f 0100 	mov.w	r1, #0
 8005306:	0159      	lsls	r1, r3, #5
 8005308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800530c:	0150      	lsls	r0, r2, #5
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	46c4      	mov	ip, r8
 8005314:	ebb2 0a0c 	subs.w	sl, r2, ip
 8005318:	4640      	mov	r0, r8
 800531a:	4649      	mov	r1, r9
 800531c:	468c      	mov	ip, r1
 800531e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800532e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005332:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005336:	ebb2 040a 	subs.w	r4, r2, sl
 800533a:	eb63 050b 	sbc.w	r5, r3, fp
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	00eb      	lsls	r3, r5, #3
 8005348:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800534c:	00e2      	lsls	r2, r4, #3
 800534e:	4614      	mov	r4, r2
 8005350:	461d      	mov	r5, r3
 8005352:	4603      	mov	r3, r0
 8005354:	18e3      	adds	r3, r4, r3
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	460b      	mov	r3, r1
 800535a:	eb45 0303 	adc.w	r3, r5, r3
 800535e:	607b      	str	r3, [r7, #4]
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	e9d7 4500 	ldrd	r4, r5, [r7]
 800536c:	4629      	mov	r1, r5
 800536e:	028b      	lsls	r3, r1, #10
 8005370:	4620      	mov	r0, r4
 8005372:	4629      	mov	r1, r5
 8005374:	4604      	mov	r4, r0
 8005376:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800537a:	4601      	mov	r1, r0
 800537c:	028a      	lsls	r2, r1, #10
 800537e:	4610      	mov	r0, r2
 8005380:	4619      	mov	r1, r3
 8005382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005384:	2200      	movs	r2, #0
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	61fa      	str	r2, [r7, #28]
 800538a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800538e:	f7fa fefd 	bl	800018c <__aeabi_uldivmod>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4613      	mov	r3, r2
 8005398:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800539a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800539e:	e00d      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80053a0:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	0b5b      	lsrs	r3, r3, #13
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	3301      	adds	r3, #1
 80053b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80053ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3748      	adds	r7, #72	; 0x48
 80053c2:	46bd      	mov	sp, r7
 80053c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053c8:	40023800 	.word	0x40023800
 80053cc:	00f42400 	.word	0x00f42400
 80053d0:	007a1200 	.word	0x007a1200
 80053d4:	0801a97c 	.word	0x0801a97c

080053d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053dc:	4b02      	ldr	r3, [pc, #8]	; (80053e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80053de:	681b      	ldr	r3, [r3, #0]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr
 80053e8:	20000098 	.word	0x20000098

080053ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053f0:	f7ff fff2 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b05      	ldr	r3, [pc, #20]	; (800540c <HAL_RCC_GetPCLK1Freq+0x20>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	0a1b      	lsrs	r3, r3, #8
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	4903      	ldr	r1, [pc, #12]	; (8005410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005408:	4618      	mov	r0, r3
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40023800 	.word	0x40023800
 8005410:	0801a998 	.word	0x0801a998

08005414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005418:	f7ff ffde 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 800541c:	4602      	mov	r2, r0
 800541e:	4b05      	ldr	r3, [pc, #20]	; (8005434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	0adb      	lsrs	r3, r3, #11
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	4903      	ldr	r1, [pc, #12]	; (8005438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800542a:	5ccb      	ldrb	r3, [r1, r3]
 800542c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005430:	4618      	mov	r0, r3
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40023800 	.word	0x40023800
 8005438:	0801a998 	.word	0x0801a998

0800543c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005444:	2300      	movs	r3, #0
 8005446:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005448:	4b29      	ldr	r3, [pc, #164]	; (80054f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d12c      	bne.n	80054ae <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005454:	4b26      	ldr	r3, [pc, #152]	; (80054f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005460:	4b24      	ldr	r3, [pc, #144]	; (80054f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	e016      	b.n	800549a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800546c:	4b20      	ldr	r3, [pc, #128]	; (80054f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	4a1f      	ldr	r2, [pc, #124]	; (80054f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005476:	6253      	str	r3, [r2, #36]	; 0x24
 8005478:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005484:	4b1b      	ldr	r3, [pc, #108]	; (80054f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800548c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800548e:	4b18      	ldr	r3, [pc, #96]	; (80054f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	4a17      	ldr	r2, [pc, #92]	; (80054f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005498:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80054a0:	d105      	bne.n	80054ae <RCC_SetFlashLatencyFromMSIRange+0x72>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054a8:	d101      	bne.n	80054ae <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80054aa:	2301      	movs	r3, #1
 80054ac:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d105      	bne.n	80054c0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80054b4:	4b10      	ldr	r3, [pc, #64]	; (80054f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a0f      	ldr	r2, [pc, #60]	; (80054f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054ba:	f043 0304 	orr.w	r3, r3, #4
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f023 0201 	bic.w	r2, r3, #1
 80054c8:	490b      	ldr	r1, [pc, #44]	; (80054f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054d0:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d001      	beq.n	80054e2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	371c      	adds	r7, #28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40023800 	.word	0x40023800
 80054f4:	40007000 	.word	0x40007000
 80054f8:	40023c00 	.word	0x40023c00

080054fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e07b      	b.n	8005606 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	2b00      	cmp	r3, #0
 8005514:	d108      	bne.n	8005528 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800551e:	d009      	beq.n	8005534 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	61da      	str	r2, [r3, #28]
 8005526:	e005      	b.n	8005534 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fd fbf2 	bl	8002d38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800556a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b8:	ea42 0103 	orr.w	r1, r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	f003 0104 	and.w	r1, r3, #4
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	f003 0210 	and.w	r2, r3, #16
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b08c      	sub	sp, #48	; 0x30
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	607a      	str	r2, [r7, #4]
 800561a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800561c:	2301      	movs	r3, #1
 800561e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_SPI_TransmitReceive+0x26>
 8005630:	2302      	movs	r3, #2
 8005632:	e18a      	b.n	800594a <HAL_SPI_TransmitReceive+0x33c>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800563c:	f7fe fe34 	bl	80042a8 <HAL_GetTick>
 8005640:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005652:	887b      	ldrh	r3, [r7, #2]
 8005654:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005656:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800565a:	2b01      	cmp	r3, #1
 800565c:	d00f      	beq.n	800567e <HAL_SPI_TransmitReceive+0x70>
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005664:	d107      	bne.n	8005676 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d103      	bne.n	8005676 <HAL_SPI_TransmitReceive+0x68>
 800566e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005672:	2b04      	cmp	r3, #4
 8005674:	d003      	beq.n	800567e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005676:	2302      	movs	r3, #2
 8005678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800567c:	e15b      	b.n	8005936 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d005      	beq.n	8005690 <HAL_SPI_TransmitReceive+0x82>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <HAL_SPI_TransmitReceive+0x82>
 800568a:	887b      	ldrh	r3, [r7, #2]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d103      	bne.n	8005698 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005696:	e14e      	b.n	8005936 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d003      	beq.n	80056ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2205      	movs	r2, #5
 80056a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	887a      	ldrh	r2, [r7, #2]
 80056bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	887a      	ldrh	r2, [r7, #2]
 80056c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	887a      	ldrh	r2, [r7, #2]
 80056ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	887a      	ldrh	r2, [r7, #2]
 80056d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d007      	beq.n	8005700 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005708:	d178      	bne.n	80057fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_SPI_TransmitReceive+0x10a>
 8005712:	8b7b      	ldrh	r3, [r7, #26]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d166      	bne.n	80057e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	881a      	ldrh	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	1c9a      	adds	r2, r3, #2
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800573c:	e053      	b.n	80057e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b02      	cmp	r3, #2
 800574a:	d11b      	bne.n	8005784 <HAL_SPI_TransmitReceive+0x176>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d016      	beq.n	8005784 <HAL_SPI_TransmitReceive+0x176>
 8005756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d113      	bne.n	8005784 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	881a      	ldrh	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	1c9a      	adds	r2, r3, #2
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b01      	cmp	r3, #1
 8005790:	d119      	bne.n	80057c6 <HAL_SPI_TransmitReceive+0x1b8>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d014      	beq.n	80057c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	b292      	uxth	r2, r2
 80057a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	1c9a      	adds	r2, r3, #2
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057c2:	2301      	movs	r3, #1
 80057c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057c6:	f7fe fd6f 	bl	80042a8 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d807      	bhi.n	80057e6 <HAL_SPI_TransmitReceive+0x1d8>
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d003      	beq.n	80057e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057e4:	e0a7      	b.n	8005936 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1a6      	bne.n	800573e <HAL_SPI_TransmitReceive+0x130>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1a1      	bne.n	800573e <HAL_SPI_TransmitReceive+0x130>
 80057fa:	e07c      	b.n	80058f6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_SPI_TransmitReceive+0x1fc>
 8005804:	8b7b      	ldrh	r3, [r7, #26]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d16b      	bne.n	80058e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	330c      	adds	r3, #12
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005830:	e057      	b.n	80058e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b02      	cmp	r3, #2
 800583e:	d11c      	bne.n	800587a <HAL_SPI_TransmitReceive+0x26c>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d017      	beq.n	800587a <HAL_SPI_TransmitReceive+0x26c>
 800584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584c:	2b01      	cmp	r3, #1
 800584e:	d114      	bne.n	800587a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	7812      	ldrb	r2, [r2, #0]
 800585c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b01      	cmp	r3, #1
 8005886:	d119      	bne.n	80058bc <HAL_SPI_TransmitReceive+0x2ae>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d014      	beq.n	80058bc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058b8:	2301      	movs	r3, #1
 80058ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058bc:	f7fe fcf4 	bl	80042a8 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d803      	bhi.n	80058d4 <HAL_SPI_TransmitReceive+0x2c6>
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d2:	d102      	bne.n	80058da <HAL_SPI_TransmitReceive+0x2cc>
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80058e0:	e029      	b.n	8005936 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1a2      	bne.n	8005832 <HAL_SPI_TransmitReceive+0x224>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d19d      	bne.n	8005832 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f8b2 	bl	8005a64 <SPI_EndRxTxTransaction>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d006      	beq.n	8005914 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005912:	e010      	b.n	8005936 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10b      	bne.n	8005934 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800591c:	2300      	movs	r3, #0
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	e000      	b.n	8005936 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005934:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005946:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800594a:	4618      	mov	r0, r3
 800594c:	3730      	adds	r7, #48	; 0x30
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	4613      	mov	r3, r2
 8005962:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005964:	f7fe fca0 	bl	80042a8 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	1a9b      	subs	r3, r3, r2
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	4413      	add	r3, r2
 8005972:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005974:	f7fe fc98 	bl	80042a8 <HAL_GetTick>
 8005978:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800597a:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	015b      	lsls	r3, r3, #5
 8005980:	0d1b      	lsrs	r3, r3, #20
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	fb02 f303 	mul.w	r3, r2, r3
 8005988:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800598a:	e054      	b.n	8005a36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005992:	d050      	beq.n	8005a36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005994:	f7fe fc88 	bl	80042a8 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d902      	bls.n	80059aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d13d      	bne.n	8005a26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059c2:	d111      	bne.n	80059e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059cc:	d004      	beq.n	80059d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d6:	d107      	bne.n	80059e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f0:	d10f      	bne.n	8005a12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e017      	b.n	8005a56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	bf0c      	ite	eq
 8005a46:	2301      	moveq	r3, #1
 8005a48:	2300      	movne	r3, #0
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d19b      	bne.n	800598c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3720      	adds	r7, #32
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000098 	.word	0x20000098

08005a64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a70:	4b1b      	ldr	r3, [pc, #108]	; (8005ae0 <SPI_EndRxTxTransaction+0x7c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a1b      	ldr	r2, [pc, #108]	; (8005ae4 <SPI_EndRxTxTransaction+0x80>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	0d5b      	lsrs	r3, r3, #21
 8005a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a80:	fb02 f303 	mul.w	r3, r2, r3
 8005a84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a8e:	d112      	bne.n	8005ab6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2200      	movs	r2, #0
 8005a98:	2180      	movs	r1, #128	; 0x80
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f7ff ff5a 	bl	8005954 <SPI_WaitFlagStateUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d016      	beq.n	8005ad4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aaa:	f043 0220 	orr.w	r2, r3, #32
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e00f      	b.n	8005ad6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005acc:	2b80      	cmp	r3, #128	; 0x80
 8005ace:	d0f2      	beq.n	8005ab6 <SPI_EndRxTxTransaction+0x52>
 8005ad0:	e000      	b.n	8005ad4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ad2:	bf00      	nop
  }

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000098 	.word	0x20000098
 8005ae4:	165e9f81 	.word	0x165e9f81

08005ae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e03f      	b.n	8005b7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fd f956 	bl	8002dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2224      	movs	r2, #36	; 0x24
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f905 	bl	8005d3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695a      	ldr	r2, [r3, #20]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b08a      	sub	sp, #40	; 0x28
 8005b86:	af02      	add	r7, sp, #8
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	603b      	str	r3, [r7, #0]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d17c      	bne.n	8005c9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <HAL_UART_Transmit+0x2c>
 8005ba8:	88fb      	ldrh	r3, [r7, #6]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e075      	b.n	8005c9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_UART_Transmit+0x3e>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e06e      	b.n	8005c9e <HAL_UART_Transmit+0x11c>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2221      	movs	r2, #33	; 0x21
 8005bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bd6:	f7fe fb67 	bl	80042a8 <HAL_GetTick>
 8005bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	88fa      	ldrh	r2, [r7, #6]
 8005be0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	88fa      	ldrh	r2, [r7, #6]
 8005be6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf0:	d108      	bne.n	8005c04 <HAL_UART_Transmit+0x82>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d104      	bne.n	8005c04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	e003      	b.n	8005c0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c14:	e02a      	b.n	8005c6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2180      	movs	r1, #128	; 0x80
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f840 	bl	8005ca6 <UART_WaitOnFlagUntilTimeout>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e036      	b.n	8005c9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10b      	bne.n	8005c4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	3302      	adds	r3, #2
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	e007      	b.n	8005c5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	781a      	ldrb	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1cf      	bne.n	8005c16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2140      	movs	r1, #64	; 0x40
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 f810 	bl	8005ca6 <UART_WaitOnFlagUntilTimeout>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e006      	b.n	8005c9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e000      	b.n	8005c9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
  }
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	603b      	str	r3, [r7, #0]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb6:	e02c      	b.n	8005d12 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbe:	d028      	beq.n	8005d12 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cc6:	f7fe faef 	bl	80042a8 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d21d      	bcs.n	8005d12 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ce4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695a      	ldr	r2, [r3, #20]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0201 	bic.w	r2, r2, #1
 8005cf4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e00f      	b.n	8005d32 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	bf0c      	ite	eq
 8005d22:	2301      	moveq	r3, #1
 8005d24:	2300      	movne	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	79fb      	ldrb	r3, [r7, #7]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d0c3      	beq.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d7c:	f023 030c 	bic.w	r3, r3, #12
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	430b      	orrs	r3, r1
 8005d88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699a      	ldr	r2, [r3, #24]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a55      	ldr	r2, [pc, #340]	; (8005efc <UART_SetConfig+0x1c0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d103      	bne.n	8005db2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005daa:	f7ff fb33 	bl	8005414 <HAL_RCC_GetPCLK2Freq>
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	e002      	b.n	8005db8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005db2:	f7ff fb1b 	bl	80053ec <HAL_RCC_GetPCLK1Freq>
 8005db6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc0:	d14c      	bne.n	8005e5c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	009a      	lsls	r2, r3, #2
 8005dcc:	441a      	add	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd8:	4a49      	ldr	r2, [pc, #292]	; (8005f00 <UART_SetConfig+0x1c4>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	0119      	lsls	r1, r3, #4
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009a      	lsls	r2, r3, #2
 8005dec:	441a      	add	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005df8:	4b41      	ldr	r3, [pc, #260]	; (8005f00 <UART_SetConfig+0x1c4>)
 8005dfa:	fba3 0302 	umull	r0, r3, r3, r2
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	2064      	movs	r0, #100	; 0x64
 8005e02:	fb00 f303 	mul.w	r3, r0, r3
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	3332      	adds	r3, #50	; 0x32
 8005e0c:	4a3c      	ldr	r2, [pc, #240]	; (8005f00 <UART_SetConfig+0x1c4>)
 8005e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e1a:	4419      	add	r1, r3
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	009a      	lsls	r2, r3, #2
 8005e26:	441a      	add	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e32:	4b33      	ldr	r3, [pc, #204]	; (8005f00 <UART_SetConfig+0x1c4>)
 8005e34:	fba3 0302 	umull	r0, r3, r3, r2
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	2064      	movs	r0, #100	; 0x64
 8005e3c:	fb00 f303 	mul.w	r3, r0, r3
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	3332      	adds	r3, #50	; 0x32
 8005e46:	4a2e      	ldr	r2, [pc, #184]	; (8005f00 <UART_SetConfig+0x1c4>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	095b      	lsrs	r3, r3, #5
 8005e4e:	f003 0207 	and.w	r2, r3, #7
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	440a      	add	r2, r1
 8005e58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e5a:	e04a      	b.n	8005ef2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	009a      	lsls	r2, r3, #2
 8005e66:	441a      	add	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e72:	4a23      	ldr	r2, [pc, #140]	; (8005f00 <UART_SetConfig+0x1c4>)
 8005e74:	fba2 2303 	umull	r2, r3, r2, r3
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	0119      	lsls	r1, r3, #4
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	009a      	lsls	r2, r3, #2
 8005e86:	441a      	add	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e92:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <UART_SetConfig+0x1c4>)
 8005e94:	fba3 0302 	umull	r0, r3, r3, r2
 8005e98:	095b      	lsrs	r3, r3, #5
 8005e9a:	2064      	movs	r0, #100	; 0x64
 8005e9c:	fb00 f303 	mul.w	r3, r0, r3
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	3332      	adds	r3, #50	; 0x32
 8005ea6:	4a16      	ldr	r2, [pc, #88]	; (8005f00 <UART_SetConfig+0x1c4>)
 8005ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eac:	095b      	lsrs	r3, r3, #5
 8005eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eb2:	4419      	add	r1, r3
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	009a      	lsls	r2, r3, #2
 8005ebe:	441a      	add	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eca:	4b0d      	ldr	r3, [pc, #52]	; (8005f00 <UART_SetConfig+0x1c4>)
 8005ecc:	fba3 0302 	umull	r0, r3, r3, r2
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	2064      	movs	r0, #100	; 0x64
 8005ed4:	fb00 f303 	mul.w	r3, r0, r3
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	3332      	adds	r3, #50	; 0x32
 8005ede:	4a08      	ldr	r2, [pc, #32]	; (8005f00 <UART_SetConfig+0x1c4>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	f003 020f 	and.w	r2, r3, #15
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	440a      	add	r2, r1
 8005ef0:	609a      	str	r2, [r3, #8]
}
 8005ef2:	bf00      	nop
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	40013800 	.word	0x40013800
 8005f00:	51eb851f 	.word	0x51eb851f

08005f04 <ndefAllocRecord>:
 */


/*****************************************************************************/
static ndefRecord* ndefAllocRecord(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
    static ndefRecord ndefRecordPool[NDEF_MAX_RECORD];

    if (ndefRecordPoolIndex >= NDEF_MAX_RECORD)
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <ndefAllocRecord+0x34>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b09      	cmp	r3, #9
 8005f0e:	d901      	bls.n	8005f14 <ndefAllocRecord+0x10>
    {
        return NULL;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e00c      	b.n	8005f2e <ndefAllocRecord+0x2a>
    }

    return &ndefRecordPool[ndefRecordPoolIndex++];
 8005f14:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <ndefAllocRecord+0x34>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	b2d1      	uxtb	r1, r2
 8005f1c:	4a06      	ldr	r2, [pc, #24]	; (8005f38 <ndefAllocRecord+0x34>)
 8005f1e:	7011      	strb	r1, [r2, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	4613      	mov	r3, r2
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	1a9b      	subs	r3, r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4a04      	ldr	r2, [pc, #16]	; (8005f3c <ndefAllocRecord+0x38>)
 8005f2c:	4413      	add	r3, r2
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	20003098 	.word	0x20003098
 8005f3c:	2000309c 	.word	0x2000309c

08005f40 <ndefMessageInit>:
 */
/*****************************************************************************/


ReturnCode ndefMessageInit(ndefMessage* message)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
    if (message == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <ndefMessageInit+0x12>
    {
        return ERR_PARAM;
 8005f4e:	2307      	movs	r3, #7
 8005f50:	e00c      	b.n	8005f6c <ndefMessageInit+0x2c>
    }

    message->record           = NULL;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]
    message->info.length      = 0;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	605a      	str	r2, [r3, #4]
    message->info.recordCount = 0;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	609a      	str	r2, [r3, #8]

    ndefRecordPoolIndex = 0;
 8005f64:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <ndefMessageInit+0x38>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	20003098 	.word	0x20003098

08005f7c <ndefMessageGetInfo>:


/*****************************************************************************/
ReturnCode ndefMessageGetInfo(const ndefMessage* message, ndefMessageInfo* info)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
    ndefRecord* record;
    uint32_t    length      = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	613b      	str	r3, [r7, #16]
    uint32_t    recordCount = 0;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]

    if ( (message == NULL) || (info == NULL) )
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <ndefMessageGetInfo+0x1e>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <ndefMessageGetInfo+0x22>
    {
        return ERR_PARAM;
 8005f9a:	2307      	movs	r3, #7
 8005f9c:	e01a      	b.n	8005fd4 <ndefMessageGetInfo+0x58>
    }

    record = message->record;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	617b      	str	r3, [r7, #20]

    while (record != NULL)
 8005fa4:	e00c      	b.n	8005fc0 <ndefMessageGetInfo+0x44>
    {
        length += ndefRecordGetLength(record);
 8005fa6:	6978      	ldr	r0, [r7, #20]
 8005fa8:	f000 f994 	bl	80062d4 <ndefRecordGetLength>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
        recordCount++;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	60fb      	str	r3, [r7, #12]

        record = record->next;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	617b      	str	r3, [r7, #20]
    while (record != NULL)
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1ef      	bne.n	8005fa6 <ndefMessageGetInfo+0x2a>
    }

    info->length      = length;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	601a      	str	r2, [r3, #0]
    info->recordCount = recordCount;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3718      	adds	r7, #24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <ndefMessageAppend>:
}


/*****************************************************************************/
ReturnCode ndefMessageAppend(ndefMessage* message, ndefRecord* record)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
    if ( (message == NULL) || (record == NULL) )
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <ndefMessageAppend+0x16>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <ndefMessageAppend+0x1a>
    {
        return ERR_PARAM;
 8005ff2:	2307      	movs	r3, #7
 8005ff4:	e043      	b.n	800607e <ndefMessageAppend+0xa2>
    }

    /* Clear the Message Begin bit */
    ndefHeaderClearMB(record);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	701a      	strb	r2, [r3, #0]

    /* Record is appended so it is the last in the list, set the Message End bit */
    ndefHeaderSetME(record);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800600c:	b2da      	uxtb	r2, r3
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	701a      	strb	r2, [r3, #0]

    record->next = NULL;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2200      	movs	r2, #0
 8006016:	619a      	str	r2, [r3, #24]

    if (message->record == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10a      	bne.n	8006036 <ndefMessageAppend+0x5a>
    {
        /* Set the Message Begin bit for the first record only */
        ndefHeaderSetMB(record);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006028:	b2da      	uxtb	r2, r3
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	701a      	strb	r2, [r3, #0]

        message->record = record;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	e014      	b.n	8006060 <ndefMessageAppend+0x84>
    }
    else
    {
        ndefRecord* current = message->record;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60fb      	str	r3, [r7, #12]

        /* Go through the list of records */
        while (current->next != NULL)
 800603c:	e002      	b.n	8006044 <ndefMessageAppend+0x68>
        {
            current = current->next;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	60fb      	str	r3, [r7, #12]
        while (current->next != NULL)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1f8      	bne.n	800603e <ndefMessageAppend+0x62>
        }

        /* Clear the Message End bit to the record before the one being appended */
        ndefHeaderClearME(current);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006054:	b2da      	uxtb	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	701a      	strb	r2, [r3, #0]

        /* Append to the last record */
        current->next = record;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	619a      	str	r2, [r3, #24]
    }

    message->info.length      += ndefRecordGetLength(record);
 8006060:	6838      	ldr	r0, [r7, #0]
 8006062:	f000 f937 	bl	80062d4 <ndefRecordGetLength>
 8006066:	4602      	mov	r2, r0
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	441a      	add	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	605a      	str	r2, [r3, #4]
    message->info.recordCount += 1U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <ndefMessageDecode>:


/*****************************************************************************/
ReturnCode ndefMessageDecode(const ndefConstBuffer* bufPayload, ndefMessage* message)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b088      	sub	sp, #32
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    uint32_t offset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (message == NULL) )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d006      	beq.n	80060a4 <ndefMessageDecode+0x1e>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <ndefMessageDecode+0x1e>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <ndefMessageDecode+0x22>
    {
        return ERR_PARAM;
 80060a4:	2307      	movs	r3, #7
 80060a6:	e043      	b.n	8006130 <ndefMessageDecode+0xaa>
    }

    err = ndefMessageInit(message);
 80060a8:	6838      	ldr	r0, [r7, #0]
 80060aa:	f7ff ff49 	bl	8005f40 <ndefMessageInit>
 80060ae:	4603      	mov	r3, r0
 80060b0:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 80060b2:	8b7b      	ldrh	r3, [r7, #26]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <ndefMessageDecode+0x36>
    {
        return err;
 80060b8:	8b7b      	ldrh	r3, [r7, #26]
 80060ba:	e039      	b.n	8006130 <ndefMessageDecode+0xaa>
    }

    offset = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	61fb      	str	r3, [r7, #28]
    while (offset < bufPayload->length)
 80060c0:	e030      	b.n	8006124 <ndefMessageDecode+0x9e>
    {
        ndefConstBuffer bufRecord;
        ndefRecord* record = ndefAllocRecord();
 80060c2:	f7ff ff1f 	bl	8005f04 <ndefAllocRecord>
 80060c6:	6178      	str	r0, [r7, #20]
        if (record == NULL)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <ndefMessageDecode+0x4c>
        {
            return ERR_NOMEM;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e02e      	b.n	8006130 <ndefMessageDecode+0xaa>
        }
        bufRecord.buffer = &bufPayload->buffer[offset];
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]
        bufRecord.length =  bufPayload->length - offset;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	613b      	str	r3, [r7, #16]
        err = ndefRecordDecode(&bufRecord, record);
 80060e6:	f107 030c 	add.w	r3, r7, #12
 80060ea:	6979      	ldr	r1, [r7, #20]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 fa32 	bl	8006556 <ndefRecordDecode>
 80060f2:	4603      	mov	r3, r0
 80060f4:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 80060f6:	8b7b      	ldrh	r3, [r7, #26]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <ndefMessageDecode+0x7a>
        {
            return err;
 80060fc:	8b7b      	ldrh	r3, [r7, #26]
 80060fe:	e017      	b.n	8006130 <ndefMessageDecode+0xaa>
        }
        offset += ndefRecordGetLength(record);
 8006100:	6978      	ldr	r0, [r7, #20]
 8006102:	f000 f8e7 	bl	80062d4 <ndefRecordGetLength>
 8006106:	4602      	mov	r2, r0
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	61fb      	str	r3, [r7, #28]

        err = ndefMessageAppend(message, record);
 800610e:	6979      	ldr	r1, [r7, #20]
 8006110:	6838      	ldr	r0, [r7, #0]
 8006112:	f7ff ff63 	bl	8005fdc <ndefMessageAppend>
 8006116:	4603      	mov	r3, r0
 8006118:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 800611a:	8b7b      	ldrh	r3, [r7, #26]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <ndefMessageDecode+0x9e>
        {
            return err;
 8006120:	8b7b      	ldrh	r3, [r7, #26]
 8006122:	e005      	b.n	8006130 <ndefMessageDecode+0xaa>
    while (offset < bufPayload->length)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	429a      	cmp	r2, r3
 800612c:	d3c9      	bcc.n	80060c2 <ndefMessageDecode+0x3c>
        }
    }

    return ERR_NONE;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3720      	adds	r7, #32
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <ndefMessageEncode>:


/*****************************************************************************/
ReturnCode ndefMessageEncode(const ndefMessage* message, ndefBuffer* bufPayload)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	; 0x28
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
    ndefMessageInfo info;
    ndefRecord*     record;
    uint32_t        offset;
    uint32_t        remainingLength;

    if ( (message == NULL) || (bufPayload == NULL) || (bufPayload->buffer == NULL) )
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d006      	beq.n	8006156 <ndefMessageEncode+0x1e>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <ndefMessageEncode+0x1e>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <ndefMessageEncode+0x22>
    {
        return ERR_PARAM;
 8006156:	2307      	movs	r3, #7
 8006158:	e050      	b.n	80061fc <ndefMessageEncode+0xc4>
    }

    err = ndefMessageGetInfo(message, &info);
 800615a:	f107 0310 	add.w	r3, r7, #16
 800615e:	4619      	mov	r1, r3
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff ff0b 	bl	8005f7c <ndefMessageGetInfo>
 8006166:	4603      	mov	r3, r0
 8006168:	837b      	strh	r3, [r7, #26]
    if ( (err != ERR_NONE) || (bufPayload->length < info.length) )
 800616a:	8b7b      	ldrh	r3, [r7, #26]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d104      	bne.n	800617a <ndefMessageEncode+0x42>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	429a      	cmp	r2, r3
 8006178:	d204      	bcs.n	8006184 <ndefMessageEncode+0x4c>
    {
        bufPayload->length = info.length;
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 8006180:	2301      	movs	r3, #1
 8006182:	e03b      	b.n	80061fc <ndefMessageEncode+0xc4>
    }

    /* Get the first record */
    record          = ndefMessageGetFirstRecord(message);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <ndefMessageEncode+0x58>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	e000      	b.n	8006192 <ndefMessageEncode+0x5a>
 8006190:	2300      	movs	r3, #0
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
    offset          = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	623b      	str	r3, [r7, #32]
    remainingLength = bufPayload->length;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	61fb      	str	r3, [r7, #28]

    while (record != NULL)
 800619e:	e026      	b.n	80061ee <ndefMessageEncode+0xb6>
    {
        ndefBuffer bufRecord;
        bufRecord.buffer = &bufPayload->buffer[offset];
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	4413      	add	r3, r2
 80061a8:	60bb      	str	r3, [r7, #8]
        bufRecord.length = remainingLength;
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	60fb      	str	r3, [r7, #12]
        err = ndefRecordEncode(record, &bufRecord);
 80061ae:	f107 0308 	add.w	r3, r7, #8
 80061b2:	4619      	mov	r1, r3
 80061b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061b6:	f000 fb91 	bl	80068dc <ndefRecordEncode>
 80061ba:	4603      	mov	r3, r0
 80061bc:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 80061be:	8b7b      	ldrh	r3, [r7, #26]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d004      	beq.n	80061ce <ndefMessageEncode+0x96>
        {
            bufPayload->length = info.length;
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	605a      	str	r2, [r3, #4]
            return err;
 80061ca:	8b7b      	ldrh	r3, [r7, #26]
 80061cc:	e016      	b.n	80061fc <ndefMessageEncode+0xc4>
        }
        offset          += bufRecord.length;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a3a      	ldr	r2, [r7, #32]
 80061d2:	4413      	add	r3, r2
 80061d4:	623b      	str	r3, [r7, #32]
        remainingLength -= bufRecord.length;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	61fb      	str	r3, [r7, #28]

        record = ndefMessageGetNextRecord(record);
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <ndefMessageEncode+0xb2>
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	e000      	b.n	80061ec <ndefMessageEncode+0xb4>
 80061ea:	2300      	movs	r3, #0
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
    while (record != NULL)
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1d5      	bne.n	80061a0 <ndefMessageEncode+0x68>
    }

    bufPayload->length = offset;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	6a3a      	ldr	r2, [r7, #32]
 80061f8:	605a      	str	r2, [r3, #4]
    return ERR_NONE;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3728      	adds	r7, #40	; 0x28
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <ndefRecordReset>:
 */


/*****************************************************************************/
ReturnCode ndefRecordReset(ndefRecord* record)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
    ndefConstBuffer8 bufEmpty        = { NULL, 0 };
 800620c:	2300      	movs	r3, #0
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	2300      	movs	r3, #0
 8006212:	753b      	strb	r3, [r7, #20]
    ndefConstBuffer  bufEmptyPayload = { NULL, 0 };
 8006214:	2300      	movs	r3, #0
 8006216:	60bb      	str	r3, [r7, #8]
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]

    if (record == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <ndefRecordReset+0x22>
    {
        return ERR_PARAM;
 8006222:	2307      	movs	r3, #7
 8006224:	e01c      	b.n	8006260 <ndefRecordReset+0x5c>
    }

    record->header = ndefHeader(0U, 0U, 0U, 0U, 0U, NDEF_TNF_EMPTY);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	701a      	strb	r2, [r3, #0]

    (void)ndefRecordSetType(record, NDEF_TNF_EMPTY, &bufEmpty);
 800622c:	f107 0310 	add.w	r3, r7, #16
 8006230:	461a      	mov	r2, r3
 8006232:	2100      	movs	r1, #0
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f866 	bl	8006306 <ndefRecordSetType>

    (void)ndefRecordSetId(record, &bufEmpty);
 800623a:	f107 0310 	add.w	r3, r7, #16
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f8e4 	bl	800640e <ndefRecordSetId>

    /* Set the SR bit */
    (void)ndefRecordSetPayload(record, &bufEmptyPayload);
 8006246:	f107 0308 	add.w	r3, r7, #8
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f92f 	bl	80064b0 <ndefRecordSetPayload>

    record->ndeftype = NULL;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	615a      	str	r2, [r3, #20]

    record->next = NULL;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	619a      	str	r2, [r3, #24]

    return ERR_NONE;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <ndefRecordGetHeaderLength>:
}


/*****************************************************************************/
uint32_t ndefRecordGetHeaderLength(const ndefRecord* record)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
    uint32_t length;

    if (record == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <ndefRecordGetHeaderLength+0x12>
    {
        return 0;
 8006276:	2300      	movs	r3, #0
 8006278:	e027      	b.n	80062ca <ndefRecordGetHeaderLength+0x62>
    }

    length  = sizeof(uint8_t);      /* header (MB:1 + ME:1 + CF:1 + SR:1 + IL:1 + TNF:3 => 8 bits) */
 800627a:	2301      	movs	r3, #1
 800627c:	60fb      	str	r3, [r7, #12]
    length += sizeof(uint8_t);      /* Type length */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3301      	adds	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]
    if (ndefHeaderIsSetSR(record))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <ndefRecordGetHeaderLength+0x30>
    {
        length += sizeof(uint8_t);  /* Short record */
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	3301      	adds	r3, #1
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e002      	b.n	800629e <ndefRecordGetHeaderLength+0x36>
    }
    else
    {
        length += sizeof(uint32_t); /* Standard record */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3304      	adds	r3, #4
 800629c:	60fb      	str	r3, [r7, #12]
    }
    if (ndefHeaderIsSetIL(record))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <ndefRecordGetHeaderLength+0x48>
    {
        length += sizeof(uint8_t);  /* Id length */
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3301      	adds	r3, #1
 80062ae:	60fb      	str	r3, [r7, #12]
    }
    length += record->typeLength;   /* Type */
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	785b      	ldrb	r3, [r3, #1]
 80062b4:	461a      	mov	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
    length += record->idLength;     /* Id */
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	789b      	ldrb	r3, [r3, #2]
 80062c0:	461a      	mov	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4413      	add	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]

    return length;
 80062c8:	68fb      	ldr	r3, [r7, #12]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr

080062d4 <ndefRecordGetLength>:


/*****************************************************************************/
uint32_t ndefRecordGetLength(const ndefRecord* record)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
    uint32_t length;

    if (record == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <ndefRecordGetLength+0x12>
    {
        return 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e00b      	b.n	80062fe <ndefRecordGetLength+0x2a>
    }

    length  = ndefRecordGetHeaderLength(record);  /* Header */
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff ffbe 	bl	8006268 <ndefRecordGetHeaderLength>
 80062ec:	60f8      	str	r0, [r7, #12]
    length += ndefRecordGetPayloadLength(record); /* Payload */
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fb75 	bl	80069de <ndefRecordGetPayloadLength>
 80062f4:	4602      	mov	r2, r0
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4413      	add	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]

    return length;
 80062fc:	68fb      	ldr	r3, [r7, #12]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <ndefRecordSetType>:


/*****************************************************************************/
ReturnCode ndefRecordSetType(ndefRecord* record, uint8_t tnf, const ndefConstBuffer8* bufType)
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	460b      	mov	r3, r1
 8006310:	607a      	str	r2, [r7, #4]
 8006312:	72fb      	strb	r3, [r7, #11]
    if ( (record  == NULL) ||
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <ndefRecordSetType+0x2a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d007      	beq.n	8006330 <ndefRecordSetType+0x2a>
         (bufType == NULL) ||
         ( (bufType->buffer == NULL) && (bufType->length != 0U) ) )
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
         (bufType == NULL) ||
 8006324:	2b00      	cmp	r3, #0
 8006326:	d105      	bne.n	8006334 <ndefRecordSetType+0x2e>
         ( (bufType->buffer == NULL) && (bufType->length != 0U) ) )
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	791b      	ldrb	r3, [r3, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <ndefRecordSetType+0x2e>
    {
        return ERR_PARAM;
 8006330:	2307      	movs	r3, #7
 8006332:	e012      	b.n	800635a <ndefRecordSetType+0x54>
    }

    ndefHeaderSetTNF(record, tnf);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	781a      	ldrb	r2, [r3, #0]
 8006338:	7afb      	ldrb	r3, [r7, #11]
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	b2db      	uxtb	r3, r3
 8006340:	4313      	orrs	r3, r2
 8006342:	b2da      	uxtb	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	701a      	strb	r2, [r3, #0]

    record->typeLength = bufType->length;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	791a      	ldrb	r2, [r3, #4]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	705a      	strb	r2, [r3, #1]
    record->type       = bufType->buffer;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	bc80      	pop	{r7}
 8006362:	4770      	bx	lr

08006364 <ndefRecordGetType>:


/*****************************************************************************/
ReturnCode ndefRecordGetType(const ndefRecord* record, uint8_t* tnf, ndefConstBuffer8* bufType)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
    if ( (record == NULL) || (tnf == NULL) || (bufType == NULL) )
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <ndefRecordGetType+0x1e>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <ndefRecordGetType+0x1e>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <ndefRecordGetType+0x22>
    {
        return ERR_PARAM;
 8006382:	2307      	movs	r3, #7
 8006384:	e00f      	b.n	80063a6 <ndefRecordGetType+0x42>
    }

    *tnf            = ndefHeaderTNF(record);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	b2da      	uxtb	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	701a      	strb	r2, [r3, #0]
    bufType->buffer = record->type;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	601a      	str	r2, [r3, #0]
    bufType->length = record->typeLength;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	785a      	ldrb	r2, [r3, #1]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	711a      	strb	r2, [r3, #4]

    return ERR_NONE;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr

080063b0 <ndefRecordTypeMatch>:


/*****************************************************************************/
bool ndefRecordTypeMatch(const ndefRecord* record, uint8_t tnf, const ndefConstBuffer8* bufType)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	460b      	mov	r3, r1
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	72fb      	strb	r3, [r7, #11]
    if ( (record == NULL) || (bufType == NULL) )
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <ndefRecordTypeMatch+0x1a>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <ndefRecordTypeMatch+0x1e>
    {
        return false;
 80063ca:	2300      	movs	r3, #0
 80063cc:	e01b      	b.n	8006406 <ndefRecordTypeMatch+0x56>
    }

    if ( (ndefHeaderTNF(record) == tnf)             &&
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	f003 0207 	and.w	r2, r3, #7
 80063d6:	7afb      	ldrb	r3, [r7, #11]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d113      	bne.n	8006404 <ndefRecordTypeMatch+0x54>
         (record->typeLength    == bufType->length) &&
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	785a      	ldrb	r2, [r3, #1]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	791b      	ldrb	r3, [r3, #4]
    if ( (ndefHeaderTNF(record) == tnf)             &&
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d10d      	bne.n	8006404 <ndefRecordTypeMatch+0x54>
         (ST_BYTECMP(record->type, bufType->buffer, bufType->length) == 0) )
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6858      	ldr	r0, [r3, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6819      	ldr	r1, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	791b      	ldrb	r3, [r3, #4]
 80063f4:	461a      	mov	r2, r3
 80063f6:	f012 fc7b 	bl	8018cf0 <memcmp>
 80063fa:	4603      	mov	r3, r0
         (record->typeLength    == bufType->length) &&
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <ndefRecordTypeMatch+0x54>
    {
        return true;
 8006400:	2301      	movs	r3, #1
 8006402:	e000      	b.n	8006406 <ndefRecordTypeMatch+0x56>
    }

     return false;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <ndefRecordSetId>:


/*****************************************************************************/
ReturnCode ndefRecordSetId(ndefRecord* record, const ndefConstBuffer8* bufId)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) ||
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <ndefRecordSetId+0x26>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d007      	beq.n	8006434 <ndefRecordSetId+0x26>
         (bufId  == NULL) ||
         ( (bufId->buffer == NULL) && (bufId->length != 0U) ) )
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
         (bufId  == NULL) ||
 8006428:	2b00      	cmp	r3, #0
 800642a:	d105      	bne.n	8006438 <ndefRecordSetId+0x2a>
         ( (bufId->buffer == NULL) && (bufId->length != 0U) ) )
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	791b      	ldrb	r3, [r3, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <ndefRecordSetId+0x2a>
    {
        return ERR_PARAM;
 8006434:	2307      	movs	r3, #7
 8006436:	e01b      	b.n	8006470 <ndefRecordSetId+0x62>
    }

    if (bufId->buffer != NULL)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <ndefRecordSetId+0x42>
    {
        ndefHeaderSetIL(record);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	f043 0308 	orr.w	r3, r3, #8
 8006448:	b2da      	uxtb	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	e006      	b.n	800645e <ndefRecordSetId+0x50>
    }
    else
    {
        ndefHeaderClearIL(record);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	f023 0308 	bic.w	r3, r3, #8
 8006458:	b2da      	uxtb	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	701a      	strb	r2, [r3, #0]
    }

    record->id       = bufId->buffer;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	609a      	str	r2, [r3, #8]
    record->idLength = bufId->length;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	791a      	ldrb	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	709a      	strb	r2, [r3, #2]

    return ERR_NONE;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr

0800647a <ndefRecordGetId>:


/*****************************************************************************/
ReturnCode ndefRecordGetId(const ndefRecord* record, ndefConstBuffer8* bufId)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (bufId == NULL) )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <ndefRecordGetId+0x16>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <ndefRecordGetId+0x1a>
    {
        return ERR_PARAM;
 8006490:	2307      	movs	r3, #7
 8006492:	e008      	b.n	80064a6 <ndefRecordGetId+0x2c>
    }

    bufId->buffer = record->id;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	601a      	str	r2, [r3, #0]
    bufId->length = record->idLength;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	789a      	ldrb	r2, [r3, #2]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	711a      	strb	r2, [r3, #4]

    return ERR_NONE;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr

080064b0 <ndefRecordSetPayload>:


/*****************************************************************************/
ReturnCode ndefRecordSetPayload(ndefRecord* record, const ndefConstBuffer* bufPayload)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
    if ( (record     == NULL) ||
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <ndefRecordSetPayload+0x26>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <ndefRecordSetPayload+0x26>
         (bufPayload == NULL) ||
         ( (bufPayload->buffer == NULL) && (bufPayload->length != 0U) ) )
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
         (bufPayload == NULL) ||
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d105      	bne.n	80064da <ndefRecordSetPayload+0x2a>
         ( (bufPayload->buffer == NULL) && (bufPayload->length != 0U) ) )
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <ndefRecordSetPayload+0x2a>
    {
        return ERR_PARAM;
 80064d6:	2307      	movs	r3, #7
 80064d8:	e01c      	b.n	8006514 <ndefRecordSetPayload+0x64>
    }

    ndefHeaderSetValueSR(record, (bufPayload->length <= NDEF_SHORT_RECORD_LENGTH_MAX) ? 1 : 0);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	f023 0310 	bic.w	r3, r3, #16
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	6852      	ldr	r2, [r2, #4]
 80064f0:	2aff      	cmp	r2, #255	; 0xff
 80064f2:	d801      	bhi.n	80064f8 <ndefRecordSetPayload+0x48>
 80064f4:	2210      	movs	r2, #16
 80064f6:	e000      	b.n	80064fa <ndefRecordSetPayload+0x4a>
 80064f8:	2200      	movs	r2, #0
 80064fa:	4313      	orrs	r3, r2
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	701a      	strb	r2, [r3, #0]

    record->bufPayload.buffer = bufPayload->buffer;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60da      	str	r2, [r3, #12]
    record->bufPayload.length = bufPayload->length;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	bc80      	pop	{r7}
 800651c:	4770      	bx	lr

0800651e <ndefRecordGetPayload>:


/*****************************************************************************/
ReturnCode ndefRecordGetPayload(const ndefRecord* record, ndefConstBuffer* bufPayload)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (bufPayload == NULL) )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <ndefRecordGetPayload+0x16>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <ndefRecordGetPayload+0x1a>
    {
        return ERR_PARAM;
 8006534:	2307      	movs	r3, #7
 8006536:	e00a      	b.n	800654e <ndefRecordGetPayload+0x30>
    }

    bufPayload->buffer = record->bufPayload.buffer;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	601a      	str	r2, [r3, #0]
    bufPayload->length = ndefRecordGetPayloadLength(record);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fa4c 	bl	80069de <ndefRecordGetPayloadLength>
 8006546:	4602      	mov	r2, r0
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <ndefRecordDecode>:


/*****************************************************************************/
ReturnCode ndefRecordDecode(const ndefConstBuffer* bufPayload, ndefRecord* record)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
    uint32_t offset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (record == NULL) )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d006      	beq.n	8006574 <ndefRecordDecode+0x1e>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <ndefRecordDecode+0x1e>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <ndefRecordDecode+0x22>
    {
        return ERR_PARAM;
 8006574:	2307      	movs	r3, #7
 8006576:	e0e7      	b.n	8006748 <ndefRecordDecode+0x1f2>
    }

    if (ndefRecordReset(record) != ERR_NONE)
 8006578:	6838      	ldr	r0, [r7, #0]
 800657a:	f7ff fe43 	bl	8006204 <ndefRecordReset>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <ndefRecordDecode+0x32>
    {
        return ERR_INTERNAL;
 8006584:	230c      	movs	r3, #12
 8006586:	e0df      	b.n	8006748 <ndefRecordDecode+0x1f2>
    }

    /* Get "header" byte */
    offset = 0;
 8006588:	2300      	movs	r3, #0
 800658a:	60fb      	str	r3, [r7, #12]
    if ((offset + sizeof(uint8_t)) > bufPayload->length)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	429a      	cmp	r2, r3
 8006596:	d901      	bls.n	800659c <ndefRecordDecode+0x46>
    {
        return ERR_PROTO;
 8006598:	230b      	movs	r3, #11
 800659a:	e0d5      	b.n	8006748 <ndefRecordDecode+0x1f2>
    }
    record->header = bufPayload->buffer[offset];
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4413      	add	r3, r2
 80065a4:	781a      	ldrb	r2, [r3, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	701a      	strb	r2, [r3, #0]
    offset++;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3301      	adds	r3, #1
 80065ae:	60fb      	str	r3, [r7, #12]

    /* Get Type length */
    if ((offset + sizeof(uint8_t)) > bufPayload->length)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d901      	bls.n	80065c0 <ndefRecordDecode+0x6a>
    {
        return ERR_PROTO;
 80065bc:	230b      	movs	r3, #11
 80065be:	e0c3      	b.n	8006748 <ndefRecordDecode+0x1f2>
    }
    record->typeLength = bufPayload->buffer[offset];
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	781a      	ldrb	r2, [r3, #0]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	705a      	strb	r2, [r3, #1]
    offset++;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3301      	adds	r3, #1
 80065d2:	60fb      	str	r3, [r7, #12]

    /* Decode Payload length */
    if (ndefHeaderIsSetSR(record))
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d013      	beq.n	8006608 <ndefRecordDecode+0xb2>
    {
        /* Short record */
        if ((offset + sizeof(uint8_t)) > bufPayload->length)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d901      	bls.n	80065f0 <ndefRecordDecode+0x9a>
        {
            return ERR_PROTO;
 80065ec:	230b      	movs	r3, #11
 80065ee:	e0ab      	b.n	8006748 <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.length = bufPayload->buffer[offset]; /* length stored on a single byte for Short Record */
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	461a      	mov	r2, r3
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	611a      	str	r2, [r3, #16]
        offset++;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3301      	adds	r3, #1
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	e029      	b.n	800665c <ndefRecordDecode+0x106>
    }
    else
    {
        /* Standard record */
        if ((offset + sizeof(uint32_t)) > bufPayload->length)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	1d1a      	adds	r2, r3, #4
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	429a      	cmp	r2, r3
 8006612:	d901      	bls.n	8006618 <ndefRecordDecode+0xc2>
        {
            return ERR_PROTO;
 8006614:	230b      	movs	r3, #11
 8006616:	e097      	b.n	8006748 <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.length = GETU32(&bufPayload->buffer[offset]);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	061a      	lsls	r2, r3, #24
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6819      	ldr	r1, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3301      	adds	r3, #1
 800662c:	440b      	add	r3, r1
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	041b      	lsls	r3, r3, #16
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6819      	ldr	r1, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3302      	adds	r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	4313      	orrs	r3, r2
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6811      	ldr	r1, [r2, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	3203      	adds	r2, #3
 800664c:	440a      	add	r2, r1
 800664e:	7812      	ldrb	r2, [r2, #0]
 8006650:	431a      	orrs	r2, r3
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	611a      	str	r2, [r3, #16]
        offset += sizeof(uint32_t);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3304      	adds	r3, #4
 800665a:	60fb      	str	r3, [r7, #12]
    }

    /* Get Id length */
    if (ndefHeaderIsSetIL(record))
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	f003 0308 	and.w	r3, r3, #8
 8006664:	2b00      	cmp	r3, #0
 8006666:	d012      	beq.n	800668e <ndefRecordDecode+0x138>
    {
        if ((offset + sizeof(uint8_t)) > bufPayload->length)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	429a      	cmp	r2, r3
 8006672:	d901      	bls.n	8006678 <ndefRecordDecode+0x122>
        {
            return ERR_PROTO;
 8006674:	230b      	movs	r3, #11
 8006676:	e067      	b.n	8006748 <ndefRecordDecode+0x1f2>
        }
        record->idLength = bufPayload->buffer[offset];
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	781a      	ldrb	r2, [r3, #0]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	709a      	strb	r2, [r3, #2]
        offset++;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3301      	adds	r3, #1
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	e002      	b.n	8006694 <ndefRecordDecode+0x13e>
    }
    else
    {
        record->idLength = 0;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2200      	movs	r2, #0
 8006692:	709a      	strb	r2, [r3, #2]
    }

    /* Get Type */
    if (record->typeLength > 0U)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	785b      	ldrb	r3, [r3, #1]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d017      	beq.n	80066cc <ndefRecordDecode+0x176>
    {
        if ((offset + record->typeLength) > bufPayload->length)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	785b      	ldrb	r3, [r3, #1]
 80066a0:	461a      	mov	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	441a      	add	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d901      	bls.n	80066b2 <ndefRecordDecode+0x15c>
        {
            return ERR_PROTO;
 80066ae:	230b      	movs	r3, #11
 80066b0:	e04a      	b.n	8006748 <ndefRecordDecode+0x1f2>
        }
        record->type = &bufPayload->buffer[offset];
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	441a      	add	r2, r3
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	605a      	str	r2, [r3, #4]
        offset += record->typeLength;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	785b      	ldrb	r3, [r3, #1]
 80066c2:	461a      	mov	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	e002      	b.n	80066d2 <ndefRecordDecode+0x17c>
    }
    else
    {
        record->type = NULL;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	2200      	movs	r2, #0
 80066d0:	605a      	str	r2, [r3, #4]
    }

    /* Get Id */
    if (record->idLength > 0U)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	789b      	ldrb	r3, [r3, #2]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d017      	beq.n	800670a <ndefRecordDecode+0x1b4>
    {
        if ((offset + record->idLength) > bufPayload->length)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	789b      	ldrb	r3, [r3, #2]
 80066de:	461a      	mov	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	441a      	add	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d901      	bls.n	80066f0 <ndefRecordDecode+0x19a>
        {
            return ERR_PROTO;
 80066ec:	230b      	movs	r3, #11
 80066ee:	e02b      	b.n	8006748 <ndefRecordDecode+0x1f2>
        }
        record->id = &bufPayload->buffer[offset];
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	441a      	add	r2, r3
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	609a      	str	r2, [r3, #8]
        offset += record->idLength;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	789b      	ldrb	r3, [r3, #2]
 8006700:	461a      	mov	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4413      	add	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	e002      	b.n	8006710 <ndefRecordDecode+0x1ba>
    }
    else
    {
        record->id = NULL;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2200      	movs	r2, #0
 800670e:	609a      	str	r2, [r3, #8]
    }

    /* Get Payload */
    if (record->bufPayload.length > 0U)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d010      	beq.n	800673a <ndefRecordDecode+0x1e4>
    {
        if ((offset + record->bufPayload.length) > bufPayload->length)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	691a      	ldr	r2, [r3, #16]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	441a      	add	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	429a      	cmp	r2, r3
 8006726:	d901      	bls.n	800672c <ndefRecordDecode+0x1d6>
        {
            return ERR_PROTO;
 8006728:	230b      	movs	r3, #11
 800672a:	e00d      	b.n	8006748 <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.buffer = &bufPayload->buffer[offset];
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	441a      	add	r2, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	60da      	str	r2, [r3, #12]
 8006738:	e002      	b.n	8006740 <ndefRecordDecode+0x1ea>
    }
    else
    {
        record->bufPayload.buffer = NULL;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2200      	movs	r2, #0
 800673e:	60da      	str	r2, [r3, #12]
    }

    // Doesn't recognize WKT ...

    record->next = NULL;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2200      	movs	r2, #0
 8006744:	619a      	str	r2, [r3, #24]

    return ERR_NONE;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <ndefRecordEncodeHeader>:


/*****************************************************************************/
ReturnCode ndefRecordEncodeHeader(const ndefRecord* record, ndefBuffer* bufHeader)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint32_t payloadLength;

    if ( (record == NULL) || (bufHeader == NULL) || (bufHeader->buffer == NULL) )
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d006      	beq.n	800676e <ndefRecordEncodeHeader+0x1e>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <ndefRecordEncodeHeader+0x1e>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <ndefRecordEncodeHeader+0x22>
    {
        return ERR_PARAM;
 800676e:	2307      	movs	r3, #7
 8006770:	e06f      	b.n	8006852 <ndefRecordEncodeHeader+0x102>
    }

    if (bufHeader->length < NDEF_RECORD_HEADER_LEN)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b06      	cmp	r3, #6
 8006778:	d804      	bhi.n	8006784 <ndefRecordEncodeHeader+0x34>
    {
        bufHeader->length = NDEF_RECORD_HEADER_LEN;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2207      	movs	r2, #7
 800677e:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 8006780:	2301      	movs	r3, #1
 8006782:	e066      	b.n	8006852 <ndefRecordEncodeHeader+0x102>
    }

    /* Start encoding the record */
    offset = 0;
 8006784:	2300      	movs	r3, #0
 8006786:	60fb      	str	r3, [r7, #12]
    bufHeader->buffer[offset] = record->header;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	7812      	ldrb	r2, [r2, #0]
 8006794:	701a      	strb	r2, [r3, #0]
    offset++;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3301      	adds	r3, #1
 800679a:	60fb      	str	r3, [r7, #12]

    /* Set Type length */
    bufHeader->buffer[offset] = record->typeLength;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	7852      	ldrb	r2, [r2, #1]
 80067a8:	701a      	strb	r2, [r3, #0]
    offset++;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]

    /* Encode Payload length */
    payloadLength = ndefRecordGetPayloadLength(record);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f914 	bl	80069de <ndefRecordGetPayloadLength>
 80067b6:	60b8      	str	r0, [r7, #8]

    if (payloadLength <= NDEF_SHORT_RECORD_LENGTH_MAX)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2bff      	cmp	r3, #255	; 0xff
 80067bc:	d80a      	bhi.n	80067d4 <ndefRecordEncodeHeader+0x84>
    {
        /* Short record */
        bufHeader->buffer[offset] = (uint8_t)payloadLength;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4413      	add	r3, r2
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]
        offset++;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3301      	adds	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	e02a      	b.n	800682a <ndefRecordEncodeHeader+0xda>
    }
    else
    {
        /* Standard record */
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 24);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	0e19      	lsrs	r1, r3, #24
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	b2ca      	uxtb	r2, r1
 80067e2:	701a      	strb	r2, [r3, #0]
        offset++;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3301      	adds	r3, #1
 80067e8:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 16);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	0c19      	lsrs	r1, r3, #16
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4413      	add	r3, r2
 80067f6:	b2ca      	uxtb	r2, r1
 80067f8:	701a      	strb	r2, [r3, #0]
        offset++;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3301      	adds	r3, #1
 80067fe:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 8);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	0a19      	lsrs	r1, r3, #8
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4413      	add	r3, r2
 800680c:	b2ca      	uxtb	r2, r1
 800680e:	701a      	strb	r2, [r3, #0]
        offset++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3301      	adds	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4413      	add	r3, r2
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]
        offset++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]
    }

    /* Encode Id length */
    if (ndefHeaderIsSetIL(record))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d009      	beq.n	800684a <ndefRecordEncodeHeader+0xfa>
    {
        bufHeader->buffer[offset] = record->idLength;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	7892      	ldrb	r2, [r2, #2]
 8006842:	701a      	strb	r2, [r3, #0]
        offset++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3301      	adds	r3, #1
 8006848:	60fb      	str	r3, [r7, #12]
    }

    bufHeader->length = offset;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <ndefRecordPayloadEncode>:


/*****************************************************************************/
static ReturnCode ndefRecordPayloadEncode(const ndefRecord* record, ndefBuffer* bufPayload)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b088      	sub	sp, #32
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6039      	str	r1, [r7, #0]
    uint32_t payloadLength;
    uint32_t offset;
    bool     begin;
    ndefConstBuffer bufPayloadItem;

    if ( (record == NULL) || (bufPayload == NULL) )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <ndefRecordPayloadEncode+0x16>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <ndefRecordPayloadEncode+0x1a>
    {
        return ERR_PROTO;
 8006870:	230b      	movs	r3, #11
 8006872:	e02f      	b.n	80068d4 <ndefRecordPayloadEncode+0x7a>
    }

    payloadLength = ndefRecordGetPayloadLength(record);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f8b2 	bl	80069de <ndefRecordGetPayloadLength>
 800687a:	6178      	str	r0, [r7, #20]
    if (payloadLength > bufPayload->length)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	429a      	cmp	r2, r3
 8006884:	d901      	bls.n	800688a <ndefRecordPayloadEncode+0x30>
    {
        return ERR_NOMEM;
 8006886:	2301      	movs	r3, #1
 8006888:	e024      	b.n	80068d4 <ndefRecordPayloadEncode+0x7a>
    }

    begin  = true;
 800688a:	2301      	movs	r3, #1
 800688c:	76fb      	strb	r3, [r7, #27]
    offset = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	61fb      	str	r3, [r7, #28]
    while (ndefRecordGetPayloadItem(record, &bufPayloadItem, begin) != NULL)
 8006892:	e011      	b.n	80068b8 <ndefRecordPayloadEncode+0x5e>
    {
        begin = false;
 8006894:	2300      	movs	r3, #0
 8006896:	76fb      	strb	r3, [r7, #27]
        if (bufPayloadItem.length > 0U)
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d008      	beq.n	80068b0 <ndefRecordPayloadEncode+0x56>
        {
            ST_MEMCPY(&bufPayload->buffer[offset], bufPayloadItem.buffer, bufPayloadItem.length);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	4413      	add	r3, r2
 80068a6:	68f9      	ldr	r1, [r7, #12]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f012 fa30 	bl	8018d10 <memcpy>
        }
        offset += bufPayloadItem.length;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	4413      	add	r3, r2
 80068b6:	61fb      	str	r3, [r7, #28]
    while (ndefRecordGetPayloadItem(record, &bufPayloadItem, begin) != NULL)
 80068b8:	7efa      	ldrb	r2, [r7, #27]
 80068ba:	f107 030c 	add.w	r3, r7, #12
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f8af 	bl	8006a24 <ndefRecordGetPayloadItem>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e3      	bne.n	8006894 <ndefRecordPayloadEncode+0x3a>
    }

    bufPayload->length = offset;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	69fa      	ldr	r2, [r7, #28]
 80068d0:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3720      	adds	r7, #32
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <ndefRecordEncode>:


/*****************************************************************************/
ReturnCode ndefRecordEncode(const ndefRecord* record, ndefBuffer* bufRecord)
{
 80068dc:	b590      	push	{r4, r7, lr}
 80068de:	b089      	sub	sp, #36	; 0x24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    ndefBuffer bufHeader;
    ndefBuffer bufPayload;
    uint32_t   offset;

    if ( (record == NULL) || (bufRecord == NULL) || (bufRecord->buffer == NULL) )
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d006      	beq.n	80068fa <ndefRecordEncode+0x1e>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <ndefRecordEncode+0x1e>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <ndefRecordEncode+0x22>
    {
        return ERR_PARAM;
 80068fa:	2307      	movs	r3, #7
 80068fc:	e06b      	b.n	80069d6 <ndefRecordEncode+0xfa>
    }

    if (bufRecord->length < ndefRecordGetLength(record))
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685c      	ldr	r4, [r3, #4]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff fce6 	bl	80062d4 <ndefRecordGetLength>
 8006908:	4603      	mov	r3, r0
 800690a:	429c      	cmp	r4, r3
 800690c:	d207      	bcs.n	800691e <ndefRecordEncode+0x42>
    {
        bufRecord->length = ndefRecordGetLength(record);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff fce0 	bl	80062d4 <ndefRecordGetLength>
 8006914:	4602      	mov	r2, r0
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 800691a:	2301      	movs	r3, #1
 800691c:	e05b      	b.n	80069d6 <ndefRecordEncode+0xfa>
    }

    /* Encode header at the begining of buffer provided */
    bufHeader.buffer = bufRecord->buffer;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	613b      	str	r3, [r7, #16]
    bufHeader.length = bufRecord->length;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	617b      	str	r3, [r7, #20]
    err = ndefRecordEncodeHeader(record, &bufHeader);
 800692a:	f107 0310 	add.w	r3, r7, #16
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff ff0d 	bl	8006750 <ndefRecordEncodeHeader>
 8006936:	4603      	mov	r3, r0
 8006938:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 800693a:	8b7b      	ldrh	r3, [r7, #26]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <ndefRecordEncode+0x68>
    {
        return err;
 8006940:	8b7b      	ldrh	r3, [r7, #26]
 8006942:	e048      	b.n	80069d6 <ndefRecordEncode+0xfa>
    }

    offset = bufHeader.length;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	61fb      	str	r3, [r7, #28]

    /* Set Type */
    if (record->typeLength > 0U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	785b      	ldrb	r3, [r3, #1]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d010      	beq.n	8006972 <ndefRecordEncode+0x96>
    {
        (void)ST_MEMCPY(&bufRecord->buffer[offset], record->type, record->typeLength);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	18d0      	adds	r0, r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6859      	ldr	r1, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	785b      	ldrb	r3, [r3, #1]
 8006960:	461a      	mov	r2, r3
 8006962:	f012 f9d5 	bl	8018d10 <memcpy>
        offset += record->typeLength;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	785b      	ldrb	r3, [r3, #1]
 800696a:	461a      	mov	r2, r3
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	4413      	add	r3, r2
 8006970:	61fb      	str	r3, [r7, #28]
    }

    /* Set Id */
    if (record->idLength > 0U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	789b      	ldrb	r3, [r3, #2]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d010      	beq.n	800699c <ndefRecordEncode+0xc0>
    {
        (void)ST_MEMCPY(&bufRecord->buffer[offset], record->id, record->idLength);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	18d0      	adds	r0, r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6899      	ldr	r1, [r3, #8]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	789b      	ldrb	r3, [r3, #2]
 800698a:	461a      	mov	r2, r3
 800698c:	f012 f9c0 	bl	8018d10 <memcpy>
        offset += record->idLength;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	789b      	ldrb	r3, [r3, #2]
 8006994:	461a      	mov	r2, r3
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	4413      	add	r3, r2
 800699a:	61fb      	str	r3, [r7, #28]
    }

    /* Set Payload */
    bufPayload.buffer = &bufRecord->buffer[offset];
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	4413      	add	r3, r2
 80069a4:	60bb      	str	r3, [r7, #8]
    bufPayload.length =  bufRecord->length - offset;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	60fb      	str	r3, [r7, #12]
    err = ndefRecordPayloadEncode(record, &bufPayload);
 80069b0:	f107 0308 	add.w	r3, r7, #8
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff ff4f 	bl	800685a <ndefRecordPayloadEncode>
 80069bc:	4603      	mov	r3, r0
 80069be:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 80069c0:	8b7b      	ldrh	r3, [r7, #26]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <ndefRecordEncode+0xee>
    {
        return err;
 80069c6:	8b7b      	ldrh	r3, [r7, #26]
 80069c8:	e005      	b.n	80069d6 <ndefRecordEncode+0xfa>
    }

    bufRecord->length = offset + bufPayload.length;
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	441a      	add	r2, r3
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3724      	adds	r7, #36	; 0x24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd90      	pop	{r4, r7, pc}

080069de <ndefRecordGetPayloadLength>:


/*****************************************************************************/
uint32_t ndefRecordGetPayloadLength(const ndefRecord* record)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
    uint32_t payloadLength;

    if (record == NULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <ndefRecordGetPayloadLength+0x12>
    {
        return 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	e015      	b.n	8006a1c <ndefRecordGetPayloadLength+0x3e>
    }

    if ( (record->ndeftype != NULL) && (record->ndeftype->getPayloadLength != NULL) )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00d      	beq.n	8006a14 <ndefRecordGetPayloadLength+0x36>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d008      	beq.n	8006a14 <ndefRecordGetPayloadLength+0x36>
    {
        payloadLength = record->ndeftype->getPayloadLength(record->ndeftype);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	6952      	ldr	r2, [r2, #20]
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4798      	blx	r3
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	e002      	b.n	8006a1a <ndefRecordGetPayloadLength+0x3c>
    }
    else
    {
        payloadLength = record->bufPayload.length;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	60fb      	str	r3, [r7, #12]
    }

    return payloadLength;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <ndefRecordGetPayloadItem>:


/*****************************************************************************/
const uint8_t* ndefRecordGetPayloadItem(const ndefRecord* record, ndefConstBuffer* bufPayloadItem, bool begin)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	71fb      	strb	r3, [r7, #7]
    if ( (record == NULL) || (bufPayloadItem == NULL) )
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <ndefRecordGetPayloadItem+0x1a>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <ndefRecordGetPayloadItem+0x1e>
    {
        return NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e020      	b.n	8006a84 <ndefRecordGetPayloadItem+0x60>
    }

    bufPayloadItem->buffer = NULL;
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]
    bufPayloadItem->length = 0;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	605a      	str	r2, [r3, #4]

    if ( (record->ndeftype != NULL) && (record->ndeftype->getPayloadItem != NULL) )
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00d      	beq.n	8006a72 <ndefRecordGetPayloadItem+0x4e>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d008      	beq.n	8006a72 <ndefRecordGetPayloadItem+0x4e>
    {
        record->ndeftype->getPayloadItem(record->ndeftype, bufPayloadItem, begin);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	6950      	ldr	r0, [r2, #20]
 8006a6a:	79fa      	ldrb	r2, [r7, #7]
 8006a6c:	68b9      	ldr	r1, [r7, #8]
 8006a6e:	4798      	blx	r3
 8006a70:	e006      	b.n	8006a80 <ndefRecordGetPayloadItem+0x5c>
    }
    else
    {
        if (begin == true)
 8006a72:	79fb      	ldrb	r3, [r7, #7]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <ndefRecordGetPayloadItem+0x5c>
        {
            (void)ndefRecordGetPayload(record, bufPayloadItem);
 8006a78:	68b9      	ldr	r1, [r7, #8]
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f7ff fd4f 	bl	800651e <ndefRecordGetPayload>
        }
    }

    return bufPayloadItem->buffer;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	681b      	ldr	r3, [r3, #0]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <ndefWifiPayloadGetLength>:
  */


/*****************************************************************************/
static uint32_t ndefWifiPayloadGetLength(const ndefType* wifi)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
    const ndefTypeWifi* wifiData;
    uint32_t payloadLength;

    if ( (wifi == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <ndefWifiPayloadGetLength+0x16>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b07      	cmp	r3, #7
 8006aa0:	d001      	beq.n	8006aa6 <ndefWifiPayloadGetLength+0x1a>
    {
        return 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e00a      	b.n	8006abc <ndefWifiPayloadGetLength+0x30>
    }

    wifiData = &wifi->data.wifi;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	330c      	adds	r3, #12
 8006aaa:	60fb      	str	r3, [r7, #12]

    payloadLength = sizeof(wifiConfigToken1)
                  + WIFI_SSID_TYPE_LENGTH    + wifiData->bufNetworkSSID.length
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	685a      	ldr	r2, [r3, #4]
                  + sizeof(wifiConfigToken3)
                  + WIFI_SSID_KEY_TYPE_LENGTH + wifiData->bufNetworkKey.length
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	4413      	add	r3, r2
    payloadLength = sizeof(wifiConfigToken1)
 8006ab6:	3340      	adds	r3, #64	; 0x40
 8006ab8:	60bb      	str	r3, [r7, #8]
                  + sizeof(wifiConfigToken5);

    return payloadLength;
 8006aba:	68bb      	ldr	r3, [r7, #8]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr
	...

08006ac8 <ndefWifiToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefWifiToPayloadItem(const ndefType* wifi, ndefConstBuffer* bufItem, bool begin)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b08b      	sub	sp, #44	; 0x2c
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeWifi* wifiData;
    uint16_t credentialLength;

    uint8_t defaultKey[4] = {0, 0, 0, 0};
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61bb      	str	r3, [r7, #24]
    ndefConstBuffer8 bufDefaultNetworkKey = { defaultKey, sizeof(defaultKey) };
 8006ada:	f107 0318 	add.w	r3, r7, #24
 8006ade:	613b      	str	r3, [r7, #16]
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	753b      	strb	r3, [r7, #20]

    const uint8_t CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX   =  7U;
 8006ae4:	2307      	movs	r3, #7
 8006ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const uint8_t CONFIG_TOKEN_3_AUTHENTICATION_TYPE_INDEX =  5U;
 8006aea:	2305      	movs	r3, #5
 8006aec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    const uint8_t CONFIG_TOKEN_3_ENCRYPTION_TYPE_INDEX     = 11U;
 8006af0:	230b      	movs	r3, #11
 8006af2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    static uint8_t zero[] = { 0 };
    static ndefConstBuffer8 bufZero = { zero, sizeof(zero) };

    if ( (wifi    == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d006      	beq.n	8006b0a <ndefWifiToPayloadItem+0x42>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	2b07      	cmp	r3, #7
 8006b02:	d102      	bne.n	8006b0a <ndefWifiToPayloadItem+0x42>
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <ndefWifiToPayloadItem+0x46>
         (bufItem == NULL) )
    {
        return NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	e0b3      	b.n	8006c76 <ndefWifiToPayloadItem+0x1ae>
    }

    wifiData = &wifi->data.wifi;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	330c      	adds	r3, #12
 8006b12:	623b      	str	r3, [r7, #32]

    if (begin == true)
 8006b14:	79fb      	ldrb	r3, [r7, #7]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <ndefWifiToPayloadItem+0x58>
    {
        item = 0;
 8006b1a:	4b59      	ldr	r3, [pc, #356]	; (8006c80 <ndefWifiToPayloadItem+0x1b8>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	605a      	str	r2, [r3, #4]

    switch (item)
 8006b2c:	4b54      	ldr	r3, [pc, #336]	; (8006c80 <ndefWifiToPayloadItem+0x1b8>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	f200 8092 	bhi.w	8006c5a <ndefWifiToPayloadItem+0x192>
 8006b36:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <ndefWifiToPayloadItem+0x74>)
 8006b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3c:	08006b61 	.word	0x08006b61
 8006b40:	08006ba1 	.word	0x08006ba1
 8006b44:	08006bb5 	.word	0x08006bb5
 8006b48:	08006bc5 	.word	0x08006bc5
 8006b4c:	08006bd7 	.word	0x08006bd7
 8006b50:	08006bfd 	.word	0x08006bfd
 8006b54:	08006c11 	.word	0x08006c11
 8006b58:	08006c23 	.word	0x08006c23
 8006b5c:	08006c4d 	.word	0x08006c4d

        /* Update Token1 with credential length */
        credentialLength = (uint16_t)(5U +                   /* Network index      */
                           2U +                              /* SSID type          */
                           2U +                              /* SSID key length    */
                           wifiData->bufNetworkSSID.length + /* SSID key           */
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	685b      	ldr	r3, [r3, #4]
                           sizeof(wifiConfigToken3) +        /* Token3 length      */
                           2U +                              /* Network key length */
 8006b64:	b29a      	uxth	r2, r3
                           wifiData->bufNetworkKey.length +  /* Network key        */
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	68db      	ldr	r3, [r3, #12]
                           2U +                              /* Network key length */
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	4413      	add	r3, r2
 8006b6e:	b29b      	uxth	r3, r3
        credentialLength = (uint16_t)(5U +                   /* Network index      */
 8006b70:	3337      	adds	r3, #55	; 0x37
 8006b72:	83fb      	strh	r3, [r7, #30]
                           sizeof(wifiConfigToken5));        /* Token5 length      */

        wifiConfigToken1[CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX]      = (uint8_t)(credentialLength >>    8U);
 8006b74:	8bfb      	ldrh	r3, [r7, #30]
 8006b76:	0a1b      	lsrs	r3, r3, #8
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b7e:	b2d1      	uxtb	r1, r2
 8006b80:	4a40      	ldr	r2, [pc, #256]	; (8006c84 <ndefWifiToPayloadItem+0x1bc>)
 8006b82:	54d1      	strb	r1, [r2, r3]
        wifiConfigToken1[CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX + 1U] = (uint8_t)(credentialLength  & 0xFFU);
 8006b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b88:	3301      	adds	r3, #1
 8006b8a:	8bfa      	ldrh	r2, [r7, #30]
 8006b8c:	b2d1      	uxtb	r1, r2
 8006b8e:	4a3d      	ldr	r2, [pc, #244]	; (8006c84 <ndefWifiToPayloadItem+0x1bc>)
 8006b90:	54d1      	strb	r1, [r2, r3]

        bufItem->buffer = wifiConfigToken1;
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	4a3b      	ldr	r2, [pc, #236]	; (8006c84 <ndefWifiToPayloadItem+0x1bc>)
 8006b96:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken1);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2210      	movs	r2, #16
 8006b9c:	605a      	str	r2, [r3, #4]
        break;
 8006b9e:	e063      	b.n	8006c68 <ndefWifiToPayloadItem+0x1a0>

    case 1:
        /* SSID Length (1st byte) */
        bufItem->buffer = bufZero.buffer;
 8006ba0:	4b39      	ldr	r3, [pc, #228]	; (8006c88 <ndefWifiToPayloadItem+0x1c0>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	601a      	str	r2, [r3, #0]
        bufItem->length = bufZero.length;
 8006ba8:	4b37      	ldr	r3, [pc, #220]	; (8006c88 <ndefWifiToPayloadItem+0x1c0>)
 8006baa:	791b      	ldrb	r3, [r3, #4]
 8006bac:	461a      	mov	r2, r3
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	605a      	str	r2, [r3, #4]
        break;
 8006bb2:	e059      	b.n	8006c68 <ndefWifiToPayloadItem+0x1a0>

    case 2:
        /* SSID Length (2nd byte) */
        bufItem->buffer = (const uint8_t*)&wifiData->bufNetworkSSID.length;
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	1d1a      	adds	r2, r3, #4
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	601a      	str	r2, [r3, #0]
        bufItem->length = 1U;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	605a      	str	r2, [r3, #4]
        break;
 8006bc2:	e051      	b.n	8006c68 <ndefWifiToPayloadItem+0x1a0>

    case 3:
        /* SSID Value */
        bufItem->buffer = wifiData->bufNetworkSSID.buffer;
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	601a      	str	r2, [r3, #0]
        bufItem->length = wifiData->bufNetworkSSID.length;
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	605a      	str	r2, [r3, #4]
        break;
 8006bd4:	e048      	b.n	8006c68 <ndefWifiToPayloadItem+0x1a0>

    case 4:
        /* Config Token3 */

        /* Update Token3 with Autentication and Encryption Types */
        wifiConfigToken3[CONFIG_TOKEN_3_AUTHENTICATION_TYPE_INDEX] = wifiData->authentication;
 8006bd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bda:	6a3a      	ldr	r2, [r7, #32]
 8006bdc:	7c11      	ldrb	r1, [r2, #16]
 8006bde:	4a2b      	ldr	r2, [pc, #172]	; (8006c8c <ndefWifiToPayloadItem+0x1c4>)
 8006be0:	54d1      	strb	r1, [r2, r3]
        wifiConfigToken3[CONFIG_TOKEN_3_ENCRYPTION_TYPE_INDEX]     = wifiData->encryption;
 8006be2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006be6:	6a3a      	ldr	r2, [r7, #32]
 8006be8:	7c51      	ldrb	r1, [r2, #17]
 8006bea:	4a28      	ldr	r2, [pc, #160]	; (8006c8c <ndefWifiToPayloadItem+0x1c4>)
 8006bec:	54d1      	strb	r1, [r2, r3]

        bufItem->buffer = wifiConfigToken3;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	4a26      	ldr	r2, [pc, #152]	; (8006c8c <ndefWifiToPayloadItem+0x1c4>)
 8006bf2:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken3);
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	220e      	movs	r2, #14
 8006bf8:	605a      	str	r2, [r3, #4]
        break;
 8006bfa:	e035      	b.n	8006c68 <ndefWifiToPayloadItem+0x1a0>

    case 5:
        /* SSID Key Length (1st byte) */
        bufItem->buffer = bufZero.buffer;
 8006bfc:	4b22      	ldr	r3, [pc, #136]	; (8006c88 <ndefWifiToPayloadItem+0x1c0>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	601a      	str	r2, [r3, #0]
        bufItem->length = bufZero.length;
 8006c04:	4b20      	ldr	r3, [pc, #128]	; (8006c88 <ndefWifiToPayloadItem+0x1c0>)
 8006c06:	791b      	ldrb	r3, [r3, #4]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	605a      	str	r2, [r3, #4]
        break;
 8006c0e:	e02b      	b.n	8006c68 <ndefWifiToPayloadItem+0x1a0>

    case 6:
        /* SSID Key Length (2 bytes) */
        bufItem->buffer = (const uint8_t*)&wifiData->bufNetworkKey.length;
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	f103 020c 	add.w	r2, r3, #12
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	601a      	str	r2, [r3, #0]
        bufItem->length = 1U;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	605a      	str	r2, [r3, #4]
        break;
 8006c20:	e022      	b.n	8006c68 <ndefWifiToPayloadItem+0x1a0>

    case 7:
        /* SSID Key Value */
        if(wifiData->bufNetworkKey.length == 0U)
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d107      	bne.n	8006c3a <ndefWifiToPayloadItem+0x172>
        {
            /* Empty network key is not supported by Phones */
            bufItem->buffer = bufDefaultNetworkKey.buffer;
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDefaultNetworkKey.length;
 8006c30:	7d3b      	ldrb	r3, [r7, #20]
 8006c32:	461a      	mov	r2, r3
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	605a      	str	r2, [r3, #4]
        else
        {
            bufItem->buffer = wifiData->bufNetworkKey.buffer;
            bufItem->length = wifiData->bufNetworkKey.length;
        }
        break;
 8006c38:	e016      	b.n	8006c68 <ndefWifiToPayloadItem+0x1a0>
            bufItem->buffer = wifiData->bufNetworkKey.buffer;
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	601a      	str	r2, [r3, #0]
            bufItem->length = wifiData->bufNetworkKey.length;
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	605a      	str	r2, [r3, #4]
        break;
 8006c4a:	e00d      	b.n	8006c68 <ndefWifiToPayloadItem+0x1a0>

    case 8:
        /* Config Token5 */
        bufItem->buffer = wifiConfigToken5;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4a10      	ldr	r2, [pc, #64]	; (8006c90 <ndefWifiToPayloadItem+0x1c8>)
 8006c50:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken5);
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	221e      	movs	r2, #30
 8006c56:	605a      	str	r2, [r3, #4]
        break;
 8006c58:	e006      	b.n	8006c68 <ndefWifiToPayloadItem+0x1a0>

    default:
        bufItem->buffer = NULL;
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2200      	movs	r2, #0
 8006c64:	605a      	str	r2, [r3, #4]
        break;
 8006c66:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 8006c68:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <ndefWifiToPayloadItem+0x1b8>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	4a04      	ldr	r2, [pc, #16]	; (8006c80 <ndefWifiToPayloadItem+0x1b8>)
 8006c70:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	681b      	ldr	r3, [r3, #0]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	372c      	adds	r7, #44	; 0x2c
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bc80      	pop	{r7}
 8006c7e:	4770      	bx	lr
 8006c80:	200031b4 	.word	0x200031b4
 8006c84:	200000a4 	.word	0x200000a4
 8006c88:	200000e4 	.word	0x200000e4
 8006c8c:	200000b4 	.word	0x200000b4
 8006c90:	200000c4 	.word	0x200000c4

08006c94 <ndefWifi>:


/*****************************************************************************/
ReturnCode ndefWifi(ndefType* wifi, const ndefTypeWifi* wifiConfig)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
    ndefTypeWifi* wifiData;

    if ( (wifi == NULL) || (wifiConfig == NULL) )
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <ndefWifi+0x16>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <ndefWifi+0x1a>
    {
        return ERR_PARAM;
 8006caa:	2307      	movs	r3, #7
 8006cac:	e022      	b.n	8006cf4 <ndefWifi+0x60>
    }

    wifi->id               = NDEF_TYPE_MEDIA_WIFI;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2207      	movs	r2, #7
 8006cb2:	701a      	strb	r2, [r3, #0]
    wifi->getPayloadLength = ndefWifiPayloadGetLength;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a12      	ldr	r2, [pc, #72]	; (8006d00 <ndefWifi+0x6c>)
 8006cb8:	605a      	str	r2, [r3, #4]
    wifi->getPayloadItem   = ndefWifiToPayloadItem;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a11      	ldr	r2, [pc, #68]	; (8006d04 <ndefWifi+0x70>)
 8006cbe:	609a      	str	r2, [r3, #8]
    wifiData               = &wifi->data.wifi;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	330c      	adds	r3, #12
 8006cc4:	60fb      	str	r3, [r7, #12]

    wifiData->bufNetworkSSID = wifiConfig->bufNetworkSSID;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cce:	e883 0003 	stmia.w	r3, {r0, r1}
    wifiData->bufNetworkKey  = wifiConfig->bufNetworkKey;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	3208      	adds	r2, #8
 8006cda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cde:	e883 0003 	stmia.w	r3, {r0, r1}
    wifiData->authentication = wifiConfig->authentication;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	7c1a      	ldrb	r2, [r3, #16]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	741a      	strb	r2, [r3, #16]
    wifiData->encryption     = wifiConfig->encryption;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	7c5a      	ldrb	r2, [r3, #17]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	745a      	strb	r2, [r3, #17]

    return ERR_NONE;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	08006a8d 	.word	0x08006a8d
 8006d04:	08006ac9 	.word	0x08006ac9

08006d08 <ndefGetWifi>:


/*****************************************************************************/
ReturnCode ndefGetWifi(const ndefType* wifi, ndefTypeWifi* wifiConfig)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
    const ndefTypeWifi* wifiData;

    if ( (wifi       == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d006      	beq.n	8006d26 <ndefGetWifi+0x1e>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b07      	cmp	r3, #7
 8006d1e:	d102      	bne.n	8006d26 <ndefGetWifi+0x1e>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <ndefGetWifi+0x22>
         (wifiConfig == NULL) )
    {
        return ERR_PARAM;
 8006d26:	2307      	movs	r3, #7
 8006d28:	e01b      	b.n	8006d62 <ndefGetWifi+0x5a>
    }

    wifiData = &wifi->data.wifi;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	330c      	adds	r3, #12
 8006d2e:	60fb      	str	r3, [r7, #12]

    wifiConfig->bufNetworkSSID.buffer = wifiData->bufNetworkSSID.buffer;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	601a      	str	r2, [r3, #0]
    wifiConfig->bufNetworkSSID.length = wifiData->bufNetworkSSID.length;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	605a      	str	r2, [r3, #4]
    wifiConfig->bufNetworkKey.buffer  = wifiData->bufNetworkKey.buffer;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	609a      	str	r2, [r3, #8]
    wifiConfig->bufNetworkKey.length  = wifiData->bufNetworkKey.length;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	68da      	ldr	r2, [r3, #12]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	60da      	str	r2, [r3, #12]
    wifiConfig->authentication = wifiData->authentication;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	7c1a      	ldrb	r2, [r3, #16]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	741a      	strb	r2, [r3, #16]
    wifiConfig->encryption     = wifiData->encryption;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	7c5a      	ldrb	r2, [r3, #17]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	745a      	strb	r2, [r3, #17]

    return ERR_NONE;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bc80      	pop	{r7}
 8006d6a:	4770      	bx	lr

08006d6c <ndefPayloadToWifi>:


/*****************************************************************************/
static ReturnCode ndefPayloadToWifi(const ndefConstBuffer* bufPayload, ndefType* wifi)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	; 0x28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
    ndefTypeWifi wifiConfig;
    uint32_t offset;

    if ( (bufPayload == NULL) || (wifi == NULL) )
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <ndefPayloadToWifi+0x16>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <ndefPayloadToWifi+0x1a>
    {
        return ERR_PARAM;
 8006d82:	2307      	movs	r3, #7
 8006d84:	e0a2      	b.n	8006ecc <ndefPayloadToWifi+0x160>
    }

    wifiConfig.bufNetworkSSID.buffer = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60bb      	str	r3, [r7, #8]
    wifiConfig.bufNetworkSSID.length = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
    wifiConfig.bufNetworkKey.buffer  = NULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	613b      	str	r3, [r7, #16]
    wifiConfig.bufNetworkKey.length  = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	617b      	str	r3, [r7, #20]
    wifiConfig.authentication        = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	763b      	strb	r3, [r7, #24]
    wifiConfig.encryption            = 0;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	767b      	strb	r3, [r7, #25]

    offset = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
    while (offset < bufPayload->length)
 8006da2:	e086      	b.n	8006eb2 <ndefPayloadToWifi+0x146>
    {
        uint8_t attribute = bufPayload->buffer[offset];
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	4413      	add	r3, r2
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (attribute == NDEF_WIFI_ATTRIBUTE_ID_SSID_LSB)
 8006db2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006db6:	2b10      	cmp	r3, #16
 8006db8:	d178      	bne.n	8006eac <ndefPayloadToWifi+0x140>
        {
            uint8_t data1   = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_LENGTH_MSB_OFFSET];
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	3302      	adds	r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            uint8_t data2   = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_LENGTH_LSB_OFFSET];
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	3303      	adds	r3, #3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            uint32_t length = ((uint32_t)data1 << 8U) | data2;
 8006dda:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006dde:	021a      	lsls	r2, r3, #8
 8006de0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006de4:	4313      	orrs	r3, r2
 8006de6:	61fb      	str	r3, [r7, #28]

            switch (bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_ID_OFFSET])
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	3301      	adds	r3, #1
 8006df0:	4413      	add	r3, r2
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b45      	cmp	r3, #69	; 0x45
 8006df6:	d00a      	beq.n	8006e0e <ndefPayloadToWifi+0xa2>
 8006df8:	2b45      	cmp	r3, #69	; 0x45
 8006dfa:	dc52      	bgt.n	8006ea2 <ndefPayloadToWifi+0x136>
 8006dfc:	2b27      	cmp	r3, #39	; 0x27
 8006dfe:	d019      	beq.n	8006e34 <ndefPayloadToWifi+0xc8>
 8006e00:	2b27      	cmp	r3, #39	; 0x27
 8006e02:	dc4e      	bgt.n	8006ea2 <ndefPayloadToWifi+0x136>
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d028      	beq.n	8006e5a <ndefPayloadToWifi+0xee>
 8006e08:	2b0f      	cmp	r3, #15
 8006e0a:	d038      	beq.n	8006e7e <ndefPayloadToWifi+0x112>
 8006e0c:	e049      	b.n	8006ea2 <ndefPayloadToWifi+0x136>
            {
            case NDEF_WIFI_ATTRIBUTE_ID_SSID_MSB:
                /* Network SSID */
                if (length > NDEF_WIFI_NETWORK_SSID_LENGTH)
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d901      	bls.n	8006e18 <ndefPayloadToWifi+0xac>
                {
                    return ERR_PROTO;
 8006e14:	230b      	movs	r3, #11
 8006e16:	e059      	b.n	8006ecc <ndefPayloadToWifi+0x160>
                }
                wifiConfig.bufNetworkSSID.buffer = &bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_DATA_OFFSET];
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4413      	add	r3, r2
 8006e22:	60bb      	str	r3, [r7, #8]
                wifiConfig.bufNetworkSSID.length = length;
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	60fb      	str	r3, [r7, #12]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 8006e28:	69fa      	ldr	r2, [r7, #28]
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	4413      	add	r3, r2
 8006e2e:	3304      	adds	r3, #4
 8006e30:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006e32:	e03e      	b.n	8006eb2 <ndefPayloadToWifi+0x146>
            case NDEF_WIFI_ATTRIBUTE_ID_NETWORK_MSB:
                /* Network key */
                if (length > NDEF_WIFI_NETWORK_KEY_LENGTH)
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d901      	bls.n	8006e3e <ndefPayloadToWifi+0xd2>
                {
                    return ERR_PROTO;
 8006e3a:	230b      	movs	r3, #11
 8006e3c:	e046      	b.n	8006ecc <ndefPayloadToWifi+0x160>
                }
                wifiConfig.bufNetworkKey.buffer = &bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_DATA_OFFSET];
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	3304      	adds	r3, #4
 8006e46:	4413      	add	r3, r2
 8006e48:	613b      	str	r3, [r7, #16]
                wifiConfig.bufNetworkKey.length = length;
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	617b      	str	r3, [r7, #20]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	4413      	add	r3, r2
 8006e54:	3304      	adds	r3, #4
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006e58:	e02b      	b.n	8006eb2 <ndefPayloadToWifi+0x146>
            case NDEF_WIFI_ATTRIBUTE_AUTHENTICATION:
                /* Authentication */
                if (length != NDEF_WIFI_AUTHENTICATION_TYPE_LENGTH)
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d001      	beq.n	8006e64 <ndefPayloadToWifi+0xf8>
                {
                    return ERR_PROTO;
 8006e60:	230b      	movs	r3, #11
 8006e62:	e033      	b.n	8006ecc <ndefPayloadToWifi+0x160>
                }
                wifiConfig.authentication = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_AUTHENTICATION_LSB_OFFSET];
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	3305      	adds	r3, #5
 8006e6c:	4413      	add	r3, r2
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	763b      	strb	r3, [r7, #24]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 8006e72:	69fa      	ldr	r2, [r7, #28]
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	4413      	add	r3, r2
 8006e78:	3304      	adds	r3, #4
 8006e7a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006e7c:	e019      	b.n	8006eb2 <ndefPayloadToWifi+0x146>
            case NDEF_WIFI_ATTRIBUTE_ENCRYPTION:
                /* Encryption */
                if (length != NDEF_WIFI_ENCRYPTION_TYPE_LENGTH)
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d001      	beq.n	8006e88 <ndefPayloadToWifi+0x11c>
                {
                    return ERR_PROTO;
 8006e84:	230b      	movs	r3, #11
 8006e86:	e021      	b.n	8006ecc <ndefPayloadToWifi+0x160>
                }
                wifiConfig.encryption = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_ENCRYPTION_LSB_OFFSET];
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	3305      	adds	r3, #5
 8006e90:	4413      	add	r3, r2
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	767b      	strb	r3, [r7, #25]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 8006e96:	69fa      	ldr	r2, [r7, #28]
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	4413      	add	r3, r2
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006ea0:	e007      	b.n	8006eb2 <ndefPayloadToWifi+0x146>
            default:
                offset++;
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006ea8:	bf00      	nop
 8006eaa:	e002      	b.n	8006eb2 <ndefPayloadToWifi+0x146>
            }
        }
        else
        {
            offset++;
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	3301      	adds	r3, #1
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
    while (offset < bufPayload->length)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	f4ff af73 	bcc.w	8006da4 <ndefPayloadToWifi+0x38>
        }
    }

    return ndefWifi(wifi, &wifiConfig);
 8006ebe:	f107 0308 	add.w	r3, r7, #8
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6838      	ldr	r0, [r7, #0]
 8006ec6:	f7ff fee5 	bl	8006c94 <ndefWifi>
 8006eca:	4603      	mov	r3, r0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3728      	adds	r7, #40	; 0x28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <ndefRecordToWifi>:


/*****************************************************************************/
ReturnCode ndefRecordToWifi(const ndefRecord* record, ndefType* wifi)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (wifi == NULL) )
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <ndefRecordToWifi+0x16>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <ndefRecordToWifi+0x1a>
    {
        return ERR_PARAM;
 8006eea:	2307      	movs	r3, #7
 8006eec:	e022      	b.n	8006f34 <ndefRecordToWifi+0x60>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeWifi)) /* "application/vnd.wfa.wsc" */
 8006eee:	4a13      	ldr	r2, [pc, #76]	; (8006f3c <ndefRecordToWifi+0x68>)
 8006ef0:	2102      	movs	r1, #2
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff fa5c 	bl	80063b0 <ndefRecordTypeMatch>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f083 0301 	eor.w	r3, r3, #1
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <ndefRecordToWifi+0x34>
    {
        return ERR_PROTO;
 8006f04:	230b      	movs	r3, #11
 8006f06:	e015      	b.n	8006f34 <ndefRecordToWifi+0x60>
    }

    ndeftype = ndefRecordGetNdefType(record);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f95d 	bl	80071c8 <ndefRecordGetNdefType>
 8006f0e:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d007      	beq.n	8006f26 <ndefRecordToWifi+0x52>
    {
        (void)ST_MEMCPY(wifi, ndeftype, sizeof(ndefType));
 8006f16:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8006f1a:	68f9      	ldr	r1, [r7, #12]
 8006f1c:	6838      	ldr	r0, [r7, #0]
 8006f1e:	f011 fef7 	bl	8018d10 <memcpy>
        return ERR_NONE;
 8006f22:	2300      	movs	r3, #0
 8006f24:	e006      	b.n	8006f34 <ndefRecordToWifi+0x60>
    }

    return ndefPayloadToWifi(&record->bufPayload, wifi);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	330c      	adds	r3, #12
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff ff1d 	bl	8006d6c <ndefPayloadToWifi>
 8006f32:	4603      	mov	r3, r0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	0801a9b8 	.word	0x0801a9b8

08006f40 <ndefWifiToRecord>:


/*****************************************************************************/
ReturnCode ndefWifiToRecord(const ndefType* wifi, ndefRecord* record)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
    if ( (wifi   == NULL) ||  (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d006      	beq.n	8006f5e <ndefWifiToRecord+0x1e>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	2b07      	cmp	r3, #7
 8006f56:	d102      	bne.n	8006f5e <ndefWifiToRecord+0x1e>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <ndefWifiToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 8006f5e:	2307      	movs	r3, #7
 8006f60:	e00c      	b.n	8006f7c <ndefWifiToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 8006f62:	6838      	ldr	r0, [r7, #0]
 8006f64:	f7ff f94e 	bl	8006204 <ndefRecordReset>

    (void)ndefRecordSetType(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeWifi);
 8006f68:	4a06      	ldr	r2, [pc, #24]	; (8006f84 <ndefWifiToRecord+0x44>)
 8006f6a:	2102      	movs	r1, #2
 8006f6c:	6838      	ldr	r0, [r7, #0]
 8006f6e:	f7ff f9ca 	bl	8006306 <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, wifi);
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	6838      	ldr	r0, [r7, #0]
 8006f76:	f000 f8ef 	bl	8007158 <ndefRecordSetNdefType>

    return ERR_NONE;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	0801a9b8 	.word	0x0801a9b8

08006f88 <ndefTypeStringToTypeId>:
 */


/*****************************************************************************/
static ReturnCode ndefTypeStringToTypeId(uint8_t tnf, const ndefConstBuffer8* bufTypeString, ndefTypeId* typeId)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	73fb      	strb	r3, [r7, #15]
        { NDEF_TYPE_MEDIA_WIFI,      NDEF_TNF_MEDIA_TYPE,          &bufMediaTypeWifi          },
    };

    uint32_t i;

    if ( (bufTypeString == NULL) || (typeId == NULL) )
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <ndefTypeStringToTypeId+0x1a>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <ndefTypeStringToTypeId+0x1e>
    {
        return ERR_PROTO;
 8006fa2:	230b      	movs	r3, #11
 8006fa4:	e03f      	b.n	8007026 <ndefTypeStringToTypeId+0x9e>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeTable); i++)
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	e038      	b.n	800701e <ndefTypeStringToTypeId+0x96>
    {
        /* Check TNF and length are the same, then compare the content */
        if (typeTable[i].tnf == tnf)
 8006fac:	4a20      	ldr	r2, [pc, #128]	; (8007030 <ndefTypeStringToTypeId+0xa8>)
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	00db      	lsls	r3, r3, #3
 8006fb2:	4413      	add	r3, r2
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	7bfa      	ldrb	r2, [r7, #15]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d12d      	bne.n	8007018 <ndefTypeStringToTypeId+0x90>
        {
            if (bufTypeString->length == typeTable[i].bufTypeString->length)
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	791a      	ldrb	r2, [r3, #4]
 8006fc0:	491b      	ldr	r1, [pc, #108]	; (8007030 <ndefTypeStringToTypeId+0xa8>)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	00db      	lsls	r3, r3, #3
 8006fc6:	440b      	add	r3, r1
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	791b      	ldrb	r3, [r3, #4]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d123      	bne.n	8007018 <ndefTypeStringToTypeId+0x90>
            {
                if (bufTypeString->length == 0U)
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	791b      	ldrb	r3, [r3, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d107      	bne.n	8006fe8 <ndefTypeStringToTypeId+0x60>
                {
                    /* Empty type */
                    *typeId = typeTable[i].typeId;
 8006fd8:	4a15      	ldr	r2, [pc, #84]	; (8007030 <ndefTypeStringToTypeId+0xa8>)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	701a      	strb	r2, [r3, #0]
                    return ERR_NONE;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	e01e      	b.n	8007026 <ndefTypeStringToTypeId+0x9e>
                }
                else
                {
                    if (ST_BYTECMP(typeTable[i].bufTypeString->buffer, bufTypeString->buffer, bufTypeString->length) == 0)
 8006fe8:	4a11      	ldr	r2, [pc, #68]	; (8007030 <ndefTypeStringToTypeId+0xa8>)
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	4413      	add	r3, r2
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	6818      	ldr	r0, [r3, #0]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	6819      	ldr	r1, [r3, #0]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	791b      	ldrb	r3, [r3, #4]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f011 fe77 	bl	8018cf0 <memcmp>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d107      	bne.n	8007018 <ndefTypeStringToTypeId+0x90>
                    {
                        *typeId = typeTable[i].typeId;
 8007008:	4a09      	ldr	r2, [pc, #36]	; (8007030 <ndefTypeStringToTypeId+0xa8>)
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	701a      	strb	r2, [r3, #0]
                        return ERR_NONE;
 8007014:	2300      	movs	r3, #0
 8007016:	e006      	b.n	8007026 <ndefTypeStringToTypeId+0x9e>
    for (i = 0; i < SIZEOF_ARRAY(typeTable); i++)
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	3301      	adds	r3, #1
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b06      	cmp	r3, #6
 8007022:	d9c3      	bls.n	8006fac <ndefTypeStringToTypeId+0x24>
                }
            }
        }
    }

    return ERR_NOTFOUND;
 8007024:	2316      	movs	r3, #22
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	0801aa14 	.word	0x0801aa14

08007034 <ndefRecordTypeStringToTypeId>:


/*****************************************************************************/
ReturnCode ndefRecordTypeStringToTypeId(const ndefRecord* record, ndefTypeId* typeId)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
    ReturnCode err;

    uint8_t          tnf;
    ndefConstBuffer8 bufRecordType;

    if ( (record == NULL) || (typeId == NULL) )
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <ndefRecordTypeStringToTypeId+0x16>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <ndefRecordTypeStringToTypeId+0x1a>
    {
        return ERR_PARAM;
 800704a:	2307      	movs	r3, #7
 800704c:	e029      	b.n	80070a2 <ndefRecordTypeStringToTypeId+0x6e>
    }

    err = ndefRecordGetType(record, &tnf, &bufRecordType);
 800704e:	f107 020c 	add.w	r2, r7, #12
 8007052:	f107 0315 	add.w	r3, r7, #21
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff f983 	bl	8006364 <ndefRecordGetType>
 800705e:	4603      	mov	r3, r0
 8007060:	82fb      	strh	r3, [r7, #22]
    if (err != ERR_NONE)
 8007062:	8afb      	ldrh	r3, [r7, #22]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <ndefRecordTypeStringToTypeId+0x38>
    {
        return err;
 8007068:	8afb      	ldrh	r3, [r7, #22]
 800706a:	e01a      	b.n	80070a2 <ndefRecordTypeStringToTypeId+0x6e>
    }
    if (tnf >= NDEF_TNF_RESERVED)
 800706c:	7d7b      	ldrb	r3, [r7, #21]
 800706e:	2b06      	cmp	r3, #6
 8007070:	d901      	bls.n	8007076 <ndefRecordTypeStringToTypeId+0x42>
    {
        return ERR_INTERNAL;
 8007072:	230c      	movs	r3, #12
 8007074:	e015      	b.n	80070a2 <ndefRecordTypeStringToTypeId+0x6e>
    }

    switch (tnf)
 8007076:	7d7b      	ldrb	r3, [r7, #21]
 8007078:	2b02      	cmp	r3, #2
 800707a:	dc02      	bgt.n	8007082 <ndefRecordTypeStringToTypeId+0x4e>
 800707c:	2b00      	cmp	r3, #0
 800707e:	da02      	bge.n	8007086 <ndefRecordTypeStringToTypeId+0x52>
 8007080:	e00b      	b.n	800709a <ndefRecordTypeStringToTypeId+0x66>
 8007082:	2b04      	cmp	r3, #4
 8007084:	d109      	bne.n	800709a <ndefRecordTypeStringToTypeId+0x66>
    {
    case NDEF_TNF_EMPTY:               /* Fall through */
    case NDEF_TNF_RTD_WELL_KNOWN_TYPE: /* Fall through */
    case NDEF_TNF_RTD_EXTERNAL_TYPE:   /* Fall through */
    case NDEF_TNF_MEDIA_TYPE:          /* Fall through */
        err = ndefTypeStringToTypeId(tnf, &bufRecordType, typeId);
 8007086:	7d7b      	ldrb	r3, [r7, #21]
 8007088:	f107 010c 	add.w	r1, r7, #12
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff ff7a 	bl	8006f88 <ndefTypeStringToTypeId>
 8007094:	4603      	mov	r3, r0
 8007096:	82fb      	strh	r3, [r7, #22]
        break;
 8007098:	e002      	b.n	80070a0 <ndefRecordTypeStringToTypeId+0x6c>
    default:
        err = ERR_NOT_IMPLEMENTED;
 800709a:	230f      	movs	r3, #15
 800709c:	82fb      	strh	r3, [r7, #22]
        break;
 800709e:	bf00      	nop
    }

    return err;
 80070a0:	8afb      	ldrh	r3, [r7, #22]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <ndefRecordToType>:


/*****************************************************************************/
ReturnCode ndefRecordToType(const ndefRecord* record, ndefType* type)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;
    ReturnCode err;
    ndefTypeId typeId;
    uint32_t   i;

    ndeftype = ndefRecordGetNdefType(record);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f886 	bl	80071c8 <ndefRecordGetNdefType>
 80070bc:	6138      	str	r0, [r7, #16]
    if (ndeftype != NULL)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d007      	beq.n	80070d4 <ndefRecordToType+0x28>
    {
        /* Return the well-known type contained in the record */
        (void)ST_MEMCPY(type, ndeftype, sizeof(ndefType));
 80070c4:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80070c8:	6939      	ldr	r1, [r7, #16]
 80070ca:	6838      	ldr	r0, [r7, #0]
 80070cc:	f011 fe20 	bl	8018d10 <memcpy>
        return ERR_NONE;
 80070d0:	2300      	movs	r3, #0
 80070d2:	e03a      	b.n	800714a <ndefRecordToType+0x9e>
    }

    err = ndefRecordTypeStringToTypeId(record, &typeId);
 80070d4:	f107 030d 	add.w	r3, r7, #13
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff ffaa 	bl	8007034 <ndefRecordTypeStringToTypeId>
 80070e0:	4603      	mov	r3, r0
 80070e2:	81fb      	strh	r3, [r7, #14]
    if (err != ERR_NONE)
 80070e4:	89fb      	ldrh	r3, [r7, #14]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <ndefRecordToType+0x42>
    {
        return err;
 80070ea:	89fb      	ldrh	r3, [r7, #14]
 80070ec:	e02d      	b.n	800714a <ndefRecordToType+0x9e>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeConverterTable); i++)
 80070ee:	2300      	movs	r3, #0
 80070f0:	617b      	str	r3, [r7, #20]
 80070f2:	e026      	b.n	8007142 <ndefRecordToType+0x96>
    {
        if (typeId == typeConverterTable[i].typeId)
 80070f4:	4917      	ldr	r1, [pc, #92]	; (8007154 <ndefRecordToType+0xa8>)
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4613      	mov	r3, r2
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	440b      	add	r3, r1
 8007102:	781a      	ldrb	r2, [r3, #0]
 8007104:	7b7b      	ldrb	r3, [r7, #13]
 8007106:	429a      	cmp	r2, r3
 8007108:	d118      	bne.n	800713c <ndefRecordToType+0x90>
        {
            /* Call the appropriate function to the matching type */
            if (typeConverterTable[i].recordToType != NULL)
 800710a:	4912      	ldr	r1, [pc, #72]	; (8007154 <ndefRecordToType+0xa8>)
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4613      	mov	r3, r2
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	4413      	add	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	440b      	add	r3, r1
 8007118:	3304      	adds	r3, #4
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00d      	beq.n	800713c <ndefRecordToType+0x90>
            {
                return typeConverterTable[i].recordToType(record, type);
 8007120:	490c      	ldr	r1, [pc, #48]	; (8007154 <ndefRecordToType+0xa8>)
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	4613      	mov	r3, r2
 8007126:	005b      	lsls	r3, r3, #1
 8007128:	4413      	add	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	440b      	add	r3, r1
 800712e:	3304      	adds	r3, #4
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	4798      	blx	r3
 8007138:	4603      	mov	r3, r0
 800713a:	e006      	b.n	800714a <ndefRecordToType+0x9e>
    for (i = 0; i < SIZEOF_ARRAY(typeConverterTable); i++)
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	3301      	adds	r3, #1
 8007140:	617b      	str	r3, [r7, #20]
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b06      	cmp	r3, #6
 8007146:	d9d5      	bls.n	80070f4 <ndefRecordToType+0x48>
            }
        }
    }

    return ERR_NOT_IMPLEMENTED;
 8007148:	230f      	movs	r3, #15
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	0801a9c0 	.word	0x0801a9c0

08007158 <ndefRecordSetNdefType>:
}


/*****************************************************************************/
ReturnCode ndefRecordSetNdefType(ndefRecord* record, const ndefType* type)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
    uint32_t payloadLength;

    if ( (record == NULL) ||
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00e      	beq.n	8007186 <ndefRecordSetNdefType+0x2e>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00b      	beq.n	8007186 <ndefRecordSetNdefType+0x2e>
         (type                   == NULL)               ||
         (type->id                > NDEF_TYPE_ID_COUNT) ||
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
         (type                   == NULL)               ||
 8007172:	2b08      	cmp	r3, #8
 8007174:	d807      	bhi.n	8007186 <ndefRecordSetNdefType+0x2e>
         (type->getPayloadLength == NULL)               ||
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
         (type->id                > NDEF_TYPE_ID_COUNT) ||
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <ndefRecordSetNdefType+0x2e>
         (type->getPayloadItem   == NULL) )
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
         (type->getPayloadLength == NULL)               ||
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <ndefRecordSetNdefType+0x32>
    {
        return ERR_PARAM;
 8007186:	2307      	movs	r3, #7
 8007188:	e01a      	b.n	80071c0 <ndefRecordSetNdefType+0x68>
    }

    record->ndeftype = type;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	615a      	str	r2, [r3, #20]

    /* Set Short Record bit accordingly */
    payloadLength = ndefRecordGetPayloadLength(record);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff fc24 	bl	80069de <ndefRecordGetPayloadLength>
 8007196:	60f8      	str	r0, [r7, #12]
    ndefHeaderSetValueSR(record, (payloadLength <= NDEF_SHORT_RECORD_LENGTH_MAX) ? 1 : 0);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	f023 0310 	bic.w	r3, r3, #16
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	2aff      	cmp	r2, #255	; 0xff
 80071ae:	d801      	bhi.n	80071b4 <ndefRecordSetNdefType+0x5c>
 80071b0:	2210      	movs	r2, #16
 80071b2:	e000      	b.n	80071b6 <ndefRecordSetNdefType+0x5e>
 80071b4:	2200      	movs	r2, #0
 80071b6:	4313      	orrs	r3, r2
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	701a      	strb	r2, [r3, #0]

    return ERR_NONE;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <ndefRecordGetNdefType>:


/*****************************************************************************/
const ndefType* ndefRecordGetNdefType(const ndefRecord* record)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
    if (record == NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <ndefRecordGetNdefType+0x12>
    {
        return NULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e016      	b.n	8007208 <ndefRecordGetNdefType+0x40>
    }

    if (record->ndeftype != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d011      	beq.n	8007206 <ndefRecordGetNdefType+0x3e>
    {
        /* Check whether it is a valid NDEF type */
        if ( (record->ndeftype->id                < NDEF_TYPE_ID_COUNT) &&
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b07      	cmp	r3, #7
 80071ea:	d80c      	bhi.n	8007206 <ndefRecordGetNdefType+0x3e>
             (record->ndeftype->getPayloadItem   != NULL) &&
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	689b      	ldr	r3, [r3, #8]
        if ( (record->ndeftype->id                < NDEF_TYPE_ID_COUNT) &&
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d007      	beq.n	8007206 <ndefRecordGetNdefType+0x3e>
             (record->ndeftype->getPayloadLength != NULL) )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	685b      	ldr	r3, [r3, #4]
             (record->ndeftype->getPayloadItem   != NULL) &&
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <ndefRecordGetNdefType+0x3e>
        {
            return record->ndeftype;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	e000      	b.n	8007208 <ndefRecordGetNdefType+0x40>
        }
    }

    return NULL;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr

08007212 <ndefVCardPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefVCardPayloadGetLength(const ndefType* vCard)
{
 8007212:	b480      	push	{r7}
 8007214:	b087      	sub	sp, #28
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
    const ndefTypeVCard* vCardData;
    uint32_t payloadLength = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	617b      	str	r3, [r7, #20]
    uint32_t i;

    if ( (vCard == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <ndefVCardPayloadGetLength+0x1a>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	2b06      	cmp	r3, #6
 800722a:	d001      	beq.n	8007230 <ndefVCardPayloadGetLength+0x1e>
    {
        return 0;
 800722c:	2300      	movs	r3, #0
 800722e:	e06e      	b.n	800730e <ndefVCardPayloadGetLength+0xfc>
    }

    vCardData = &vCard->data.vCard;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	330c      	adds	r3, #12
 8007234:	60fb      	str	r3, [r7, #12]

    payloadLength += bufTypeBegin.length;
 8007236:	2205      	movs	r2, #5
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	4413      	add	r3, r2
 800723c:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 800723e:	2201      	movs	r2, #1
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	4413      	add	r3, r2
 8007244:	617b      	str	r3, [r7, #20]
    payloadLength += bufValueVCard.length;
 8007246:	2205      	movs	r2, #5
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	4413      	add	r3, r2
 800724c:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterNewLine.length;
 800724e:	2202      	movs	r2, #2
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	4413      	add	r3, r2
 8007254:	617b      	str	r3, [r7, #20]

    payloadLength += bufTypeVersion.length;
 8007256:	2207      	movs	r2, #7
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	4413      	add	r3, r2
 800725c:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 800725e:	2201      	movs	r2, #1
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	4413      	add	r3, r2
 8007264:	617b      	str	r3, [r7, #20]
    payloadLength += bufValue_2_1.length;
 8007266:	2203      	movs	r2, #3
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	4413      	add	r3, r2
 800726c:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterNewLine.length;
 800726e:	2202      	movs	r2, #2
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	4413      	add	r3, r2
 8007274:	617b      	str	r3, [r7, #20]

    i = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	613b      	str	r3, [r7, #16]
    while (vCardData->entry[i].bufTypeBuffer != NULL)
 800727a:	e034      	b.n	80072e6 <ndefVCardPayloadGetLength+0xd4>
    {
        payloadLength += vCardData->entry[i].bufTypeLength;
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	4413      	add	r3, r2
 8007284:	330c      	adds	r3, #12
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	461a      	mov	r2, r3
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	4413      	add	r3, r2
 800728e:	617b      	str	r3, [r7, #20]

        if (vCardData->entry[i].bufSubTypeBuffer != NULL)
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	4413      	add	r3, r2
 8007298:	3304      	adds	r3, #4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00d      	beq.n	80072bc <ndefVCardPayloadGetLength+0xaa>
        {
            payloadLength += bufDelimiterSemicolon.length;
 80072a0:	2201      	movs	r2, #1
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	4413      	add	r3, r2
 80072a6:	617b      	str	r3, [r7, #20]
            payloadLength += vCardData->entry[i].bufSubTypeLength;
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	011b      	lsls	r3, r3, #4
 80072ae:	4413      	add	r3, r2
 80072b0:	330d      	adds	r3, #13
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	461a      	mov	r2, r3
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	4413      	add	r3, r2
 80072ba:	617b      	str	r3, [r7, #20]
        }

        payloadLength += bufDelimiterColon.length;
 80072bc:	2201      	movs	r2, #1
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	4413      	add	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]

        payloadLength += vCardData->entry[i].bufValueLength;
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	4413      	add	r3, r2
 80072cc:	330e      	adds	r3, #14
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	461a      	mov	r2, r3
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	4413      	add	r3, r2
 80072d6:	617b      	str	r3, [r7, #20]
        payloadLength += bufDelimiterNewLine.length;
 80072d8:	2202      	movs	r2, #2
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	4413      	add	r3, r2
 80072de:	617b      	str	r3, [r7, #20]

        i++;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	3301      	adds	r3, #1
 80072e4:	613b      	str	r3, [r7, #16]
    while (vCardData->entry[i].bufTypeBuffer != NULL)
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	4413      	add	r3, r2
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1c3      	bne.n	800727c <ndefVCardPayloadGetLength+0x6a>
    }

    payloadLength += bufTypeEnd.length;
 80072f4:	2203      	movs	r2, #3
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	4413      	add	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 80072fc:	2201      	movs	r2, #1
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	4413      	add	r3, r2
 8007302:	617b      	str	r3, [r7, #20]
    payloadLength += bufValueVCard.length;
 8007304:	2205      	movs	r2, #5
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	4413      	add	r3, r2
 800730a:	617b      	str	r3, [r7, #20]
    /* No New line after "END:VCARD" */

    return payloadLength;
 800730c:	697b      	ldr	r3, [r7, #20]
}
 800730e:	4618      	mov	r0, r3
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	bc80      	pop	{r7}
 8007316:	4770      	bx	lr

08007318 <ndefVCardToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefVCardToPayloadItem(const ndefType* vCard, ndefConstBuffer* bufItem, bool begin)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	4613      	mov	r3, r2
 8007324:	71fb      	strb	r3, [r7, #7]
    static uint32_t item     = 0;
    static uint32_t userItem = 0;
    static uint32_t index    = 0;
    const ndefTypeVCard* vCardData;

    if ( (vCard   == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d006      	beq.n	800733a <ndefVCardToPayloadItem+0x22>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b06      	cmp	r3, #6
 8007332:	d102      	bne.n	800733a <ndefVCardToPayloadItem+0x22>
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <ndefVCardToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 800733a:	2300      	movs	r3, #0
 800733c:	e17f      	b.n	800763e <ndefVCardToPayloadItem+0x326>
    }

    vCardData = &vCard->data.vCard;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	330c      	adds	r3, #12
 8007342:	617b      	str	r3, [r7, #20]

    if (begin == true)
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d008      	beq.n	800735c <ndefVCardToPayloadItem+0x44>
    {
        item     = 0;
 800734a:	4b8c      	ldr	r3, [pc, #560]	; (800757c <ndefVCardToPayloadItem+0x264>)
 800734c:	2200      	movs	r2, #0
 800734e:	601a      	str	r2, [r3, #0]
        userItem = 0;
 8007350:	4b8b      	ldr	r3, [pc, #556]	; (8007580 <ndefVCardToPayloadItem+0x268>)
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
        index    = 0;
 8007356:	4b8b      	ldr	r3, [pc, #556]	; (8007584 <ndefVCardToPayloadItem+0x26c>)
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2200      	movs	r2, #0
 8007360:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2200      	movs	r2, #0
 8007366:	605a      	str	r2, [r3, #4]

    /* Check for for empty vCard */
    if (vCardData->entry[0].bufTypeBuffer == NULL)
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <ndefVCardToPayloadItem+0x5c>
    {
        return NULL;
 8007370:	2300      	movs	r3, #0
 8007372:	e164      	b.n	800763e <ndefVCardToPayloadItem+0x326>
    }

    switch (item)
 8007374:	4b81      	ldr	r3, [pc, #516]	; (800757c <ndefVCardToPayloadItem+0x264>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b0a      	cmp	r3, #10
 800737a:	f200 8157 	bhi.w	800762c <ndefVCardToPayloadItem+0x314>
 800737e:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <ndefVCardToPayloadItem+0x6c>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	080073b1 	.word	0x080073b1
 8007388:	080073c9 	.word	0x080073c9
 800738c:	080073e1 	.word	0x080073e1
 8007390:	080073f9 	.word	0x080073f9
 8007394:	08007411 	.word	0x08007411
 8007398:	08007429 	.word	0x08007429
 800739c:	08007441 	.word	0x08007441
 80073a0:	08007459 	.word	0x08007459
 80073a4:	0800747d 	.word	0x0800747d
 80073a8:	080075fd 	.word	0x080075fd
 80073ac:	08007615 	.word	0x08007615
    {
    /* BEGIN:VCARD\r\n */
    case 0:
        bufItem->buffer = bufTypeBegin.buffer;
 80073b0:	4a75      	ldr	r2, [pc, #468]	; (8007588 <ndefVCardToPayloadItem+0x270>)
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	601a      	str	r2, [r3, #0]
        bufItem->length = bufTypeBegin.length;
 80073b6:	2205      	movs	r2, #5
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 80073bc:	4b6f      	ldr	r3, [pc, #444]	; (800757c <ndefVCardToPayloadItem+0x264>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3301      	adds	r3, #1
 80073c2:	4a6e      	ldr	r2, [pc, #440]	; (800757c <ndefVCardToPayloadItem+0x264>)
 80073c4:	6013      	str	r3, [r2, #0]
        break;
 80073c6:	e138      	b.n	800763a <ndefVCardToPayloadItem+0x322>
    case 1:
        bufItem->buffer = bufDelimiterColon.buffer;
 80073c8:	4a70      	ldr	r2, [pc, #448]	; (800758c <ndefVCardToPayloadItem+0x274>)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 80073ce:	2201      	movs	r2, #1
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 80073d4:	4b69      	ldr	r3, [pc, #420]	; (800757c <ndefVCardToPayloadItem+0x264>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3301      	adds	r3, #1
 80073da:	4a68      	ldr	r2, [pc, #416]	; (800757c <ndefVCardToPayloadItem+0x264>)
 80073dc:	6013      	str	r3, [r2, #0]
        break;
 80073de:	e12c      	b.n	800763a <ndefVCardToPayloadItem+0x322>
    case 2:
        bufItem->buffer = bufValueVCard.buffer;
 80073e0:	4a6b      	ldr	r2, [pc, #428]	; (8007590 <ndefVCardToPayloadItem+0x278>)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValueVCard.length;
 80073e6:	2205      	movs	r2, #5
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 80073ec:	4b63      	ldr	r3, [pc, #396]	; (800757c <ndefVCardToPayloadItem+0x264>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3301      	adds	r3, #1
 80073f2:	4a62      	ldr	r2, [pc, #392]	; (800757c <ndefVCardToPayloadItem+0x264>)
 80073f4:	6013      	str	r3, [r2, #0]
        break;
 80073f6:	e120      	b.n	800763a <ndefVCardToPayloadItem+0x322>
    case 3:
        bufItem->buffer = bufDelimiterNewLine.buffer;
 80073f8:	4a66      	ldr	r2, [pc, #408]	; (8007594 <ndefVCardToPayloadItem+0x27c>)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterNewLine.length;
 80073fe:	2202      	movs	r2, #2
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8007404:	4b5d      	ldr	r3, [pc, #372]	; (800757c <ndefVCardToPayloadItem+0x264>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3301      	adds	r3, #1
 800740a:	4a5c      	ldr	r2, [pc, #368]	; (800757c <ndefVCardToPayloadItem+0x264>)
 800740c:	6013      	str	r3, [r2, #0]
        break;
 800740e:	e114      	b.n	800763a <ndefVCardToPayloadItem+0x322>

    /* VERSION:2.1\r\n */
    case 4:
        bufItem->buffer = bufTypeVersion.buffer;
 8007410:	4a61      	ldr	r2, [pc, #388]	; (8007598 <ndefVCardToPayloadItem+0x280>)
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	601a      	str	r2, [r3, #0]
        bufItem->length = bufTypeVersion.length;
 8007416:	2207      	movs	r2, #7
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 800741c:	4b57      	ldr	r3, [pc, #348]	; (800757c <ndefVCardToPayloadItem+0x264>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3301      	adds	r3, #1
 8007422:	4a56      	ldr	r2, [pc, #344]	; (800757c <ndefVCardToPayloadItem+0x264>)
 8007424:	6013      	str	r3, [r2, #0]
        break;
 8007426:	e108      	b.n	800763a <ndefVCardToPayloadItem+0x322>
    case 5:
        bufItem->buffer = bufDelimiterColon.buffer;
 8007428:	4a58      	ldr	r2, [pc, #352]	; (800758c <ndefVCardToPayloadItem+0x274>)
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 800742e:	2201      	movs	r2, #1
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8007434:	4b51      	ldr	r3, [pc, #324]	; (800757c <ndefVCardToPayloadItem+0x264>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3301      	adds	r3, #1
 800743a:	4a50      	ldr	r2, [pc, #320]	; (800757c <ndefVCardToPayloadItem+0x264>)
 800743c:	6013      	str	r3, [r2, #0]
        break;
 800743e:	e0fc      	b.n	800763a <ndefVCardToPayloadItem+0x322>
    case 6:
        bufItem->buffer = bufValue_2_1.buffer;
 8007440:	4a56      	ldr	r2, [pc, #344]	; (800759c <ndefVCardToPayloadItem+0x284>)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValue_2_1.length;
 8007446:	2203      	movs	r2, #3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 800744c:	4b4b      	ldr	r3, [pc, #300]	; (800757c <ndefVCardToPayloadItem+0x264>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3301      	adds	r3, #1
 8007452:	4a4a      	ldr	r2, [pc, #296]	; (800757c <ndefVCardToPayloadItem+0x264>)
 8007454:	6013      	str	r3, [r2, #0]
        break;
 8007456:	e0f0      	b.n	800763a <ndefVCardToPayloadItem+0x322>
    case 7:
        bufItem->buffer = bufDelimiterNewLine.buffer;
 8007458:	4a4e      	ldr	r2, [pc, #312]	; (8007594 <ndefVCardToPayloadItem+0x27c>)
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterNewLine.length;
 800745e:	2202      	movs	r2, #2
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8007464:	4b45      	ldr	r3, [pc, #276]	; (800757c <ndefVCardToPayloadItem+0x264>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3301      	adds	r3, #1
 800746a:	4a44      	ldr	r2, [pc, #272]	; (800757c <ndefVCardToPayloadItem+0x264>)
 800746c:	6013      	str	r3, [r2, #0]
        userItem = 0;
 800746e:	4b44      	ldr	r3, [pc, #272]	; (8007580 <ndefVCardToPayloadItem+0x268>)
 8007470:	2200      	movs	r2, #0
 8007472:	601a      	str	r2, [r3, #0]
        index    = 0;
 8007474:	4b43      	ldr	r3, [pc, #268]	; (8007584 <ndefVCardToPayloadItem+0x26c>)
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]
        break;
 800747a:	e0de      	b.n	800763a <ndefVCardToPayloadItem+0x322>
    case 8:
        /* User data */
        switch (userItem)
 800747c:	4b40      	ldr	r3, [pc, #256]	; (8007580 <ndefVCardToPayloadItem+0x268>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b05      	cmp	r3, #5
 8007482:	f200 80b9 	bhi.w	80075f8 <ndefVCardToPayloadItem+0x2e0>
 8007486:	a201      	add	r2, pc, #4	; (adr r2, 800748c <ndefVCardToPayloadItem+0x174>)
 8007488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748c:	080074a5 	.word	0x080074a5
 8007490:	0800751b 	.word	0x0800751b
 8007494:	08007533 	.word	0x08007533
 8007498:	08007565 	.word	0x08007565
 800749c:	080075a9 	.word	0x080075a9
 80074a0:	080075db 	.word	0x080075db
        {
        case 0:
            /* Type */
            if (vCardData->entry[index].bufTypeBuffer == NULL)
 80074a4:	4b37      	ldr	r3, [pc, #220]	; (8007584 <ndefVCardToPayloadItem+0x26c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	4413      	add	r3, r2
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10b      	bne.n	80074cc <ndefVCardToPayloadItem+0x1b4>
            {
                bufItem->buffer = bufTypeEnd.buffer;
 80074b4:	4a3a      	ldr	r2, [pc, #232]	; (80075a0 <ndefVCardToPayloadItem+0x288>)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	601a      	str	r2, [r3, #0]
                bufItem->length = bufTypeEnd.length;
 80074ba:	2203      	movs	r2, #3
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	605a      	str	r2, [r3, #4]
                item++; /* Exit the user item loop */
 80074c0:	4b2e      	ldr	r3, [pc, #184]	; (800757c <ndefVCardToPayloadItem+0x264>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3301      	adds	r3, #1
 80074c6:	4a2d      	ldr	r2, [pc, #180]	; (800757c <ndefVCardToPayloadItem+0x264>)
 80074c8:	6013      	str	r3, [r2, #0]
                break;
 80074ca:	e096      	b.n	80075fa <ndefVCardToPayloadItem+0x2e2>
            }
            bufItem->buffer = vCardData->entry[index].bufTypeBuffer;
 80074cc:	4b2d      	ldr	r3, [pc, #180]	; (8007584 <ndefVCardToPayloadItem+0x26c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	4413      	add	r3, r2
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufTypeLength;
 80074dc:	4b29      	ldr	r3, [pc, #164]	; (8007584 <ndefVCardToPayloadItem+0x26c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	011b      	lsls	r3, r3, #4
 80074e4:	4413      	add	r3, r2
 80074e6:	330c      	adds	r3, #12
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	461a      	mov	r2, r3
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	605a      	str	r2, [r3, #4]

            if (vCardData->entry[index].bufSubTypeBuffer != NULL)
 80074f0:	4b24      	ldr	r3, [pc, #144]	; (8007584 <ndefVCardToPayloadItem+0x26c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	4413      	add	r3, r2
 80074fa:	3304      	adds	r3, #4
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d005      	beq.n	800750e <ndefVCardToPayloadItem+0x1f6>
            {
                userItem++;
 8007502:	4b1f      	ldr	r3, [pc, #124]	; (8007580 <ndefVCardToPayloadItem+0x268>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3301      	adds	r3, #1
 8007508:	4a1d      	ldr	r2, [pc, #116]	; (8007580 <ndefVCardToPayloadItem+0x268>)
 800750a:	6013      	str	r3, [r2, #0]
            }
            else
            {
                userItem += 3U; /* Skip sending semicolon and subtype, move to colon */
            }
            break;
 800750c:	e075      	b.n	80075fa <ndefVCardToPayloadItem+0x2e2>
                userItem += 3U; /* Skip sending semicolon and subtype, move to colon */
 800750e:	4b1c      	ldr	r3, [pc, #112]	; (8007580 <ndefVCardToPayloadItem+0x268>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3303      	adds	r3, #3
 8007514:	4a1a      	ldr	r2, [pc, #104]	; (8007580 <ndefVCardToPayloadItem+0x268>)
 8007516:	6013      	str	r3, [r2, #0]
            break;
 8007518:	e06f      	b.n	80075fa <ndefVCardToPayloadItem+0x2e2>
        case 1:
            bufItem->buffer = bufDelimiterSemicolon.buffer;
 800751a:	4a22      	ldr	r2, [pc, #136]	; (80075a4 <ndefVCardToPayloadItem+0x28c>)
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterSemicolon.length;
 8007520:	2201      	movs	r2, #1
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	605a      	str	r2, [r3, #4]
            userItem++;
 8007526:	4b16      	ldr	r3, [pc, #88]	; (8007580 <ndefVCardToPayloadItem+0x268>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3301      	adds	r3, #1
 800752c:	4a14      	ldr	r2, [pc, #80]	; (8007580 <ndefVCardToPayloadItem+0x268>)
 800752e:	6013      	str	r3, [r2, #0]
            break;
 8007530:	e063      	b.n	80075fa <ndefVCardToPayloadItem+0x2e2>
        case 2:
            /* Subtype */
            bufItem->buffer = vCardData->entry[index].bufSubTypeBuffer;
 8007532:	4b14      	ldr	r3, [pc, #80]	; (8007584 <ndefVCardToPayloadItem+0x26c>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	011b      	lsls	r3, r3, #4
 800753a:	4413      	add	r3, r2
 800753c:	3304      	adds	r3, #4
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufSubTypeLength;
 8007544:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <ndefVCardToPayloadItem+0x26c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	4413      	add	r3, r2
 800754e:	330d      	adds	r3, #13
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	605a      	str	r2, [r3, #4]
            userItem++;
 8007558:	4b09      	ldr	r3, [pc, #36]	; (8007580 <ndefVCardToPayloadItem+0x268>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3301      	adds	r3, #1
 800755e:	4a08      	ldr	r2, [pc, #32]	; (8007580 <ndefVCardToPayloadItem+0x268>)
 8007560:	6013      	str	r3, [r2, #0]
            break;
 8007562:	e04a      	b.n	80075fa <ndefVCardToPayloadItem+0x2e2>
        case 3:
            bufItem->buffer = bufDelimiterColon.buffer;
 8007564:	4a09      	ldr	r2, [pc, #36]	; (800758c <ndefVCardToPayloadItem+0x274>)
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterColon.length;
 800756a:	2201      	movs	r2, #1
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	605a      	str	r2, [r3, #4]
            userItem++;
 8007570:	4b03      	ldr	r3, [pc, #12]	; (8007580 <ndefVCardToPayloadItem+0x268>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3301      	adds	r3, #1
 8007576:	4a02      	ldr	r2, [pc, #8]	; (8007580 <ndefVCardToPayloadItem+0x268>)
 8007578:	6013      	str	r3, [r2, #0]
            break;
 800757a:	e03e      	b.n	80075fa <ndefVCardToPayloadItem+0x2e2>
 800757c:	200031bc 	.word	0x200031bc
 8007580:	200031c0 	.word	0x200031c0
 8007584:	200031c4 	.word	0x200031c4
 8007588:	0801aa8c 	.word	0x0801aa8c
 800758c:	0801aa68 	.word	0x0801aa68
 8007590:	0801aaa0 	.word	0x0801aaa0
 8007594:	0801aa70 	.word	0x0801aa70
 8007598:	0801aa98 	.word	0x0801aa98
 800759c:	0801aaa8 	.word	0x0801aaa8
 80075a0:	0801aa94 	.word	0x0801aa94
 80075a4:	0801aa6c 	.word	0x0801aa6c
        case 4:
            /* Value */
            bufItem->buffer = vCardData->entry[index].bufValueBuffer;
 80075a8:	4b27      	ldr	r3, [pc, #156]	; (8007648 <ndefVCardToPayloadItem+0x330>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	4413      	add	r3, r2
 80075b2:	3308      	adds	r3, #8
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufValueLength;
 80075ba:	4b23      	ldr	r3, [pc, #140]	; (8007648 <ndefVCardToPayloadItem+0x330>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	011b      	lsls	r3, r3, #4
 80075c2:	4413      	add	r3, r2
 80075c4:	330e      	adds	r3, #14
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	605a      	str	r2, [r3, #4]
            userItem++;
 80075ce:	4b1f      	ldr	r3, [pc, #124]	; (800764c <ndefVCardToPayloadItem+0x334>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3301      	adds	r3, #1
 80075d4:	4a1d      	ldr	r2, [pc, #116]	; (800764c <ndefVCardToPayloadItem+0x334>)
 80075d6:	6013      	str	r3, [r2, #0]
            break;
 80075d8:	e00f      	b.n	80075fa <ndefVCardToPayloadItem+0x2e2>
        case 5:
            bufItem->buffer = bufDelimiterNewLine.buffer;
 80075da:	4a1d      	ldr	r2, [pc, #116]	; (8007650 <ndefVCardToPayloadItem+0x338>)
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterNewLine.length;
 80075e0:	2202      	movs	r2, #2
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	605a      	str	r2, [r3, #4]
            index++;
 80075e6:	4b18      	ldr	r3, [pc, #96]	; (8007648 <ndefVCardToPayloadItem+0x330>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3301      	adds	r3, #1
 80075ec:	4a16      	ldr	r2, [pc, #88]	; (8007648 <ndefVCardToPayloadItem+0x330>)
 80075ee:	6013      	str	r3, [r2, #0]
            userItem = 0; /* Looping to case 0 */
 80075f0:	4b16      	ldr	r3, [pc, #88]	; (800764c <ndefVCardToPayloadItem+0x334>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
            break;
 80075f6:	e000      	b.n	80075fa <ndefVCardToPayloadItem+0x2e2>
        default:
            /* MISRA 16.4: mandatory default statement */
            break;
 80075f8:	bf00      	nop
        }
        break;
 80075fa:	e01e      	b.n	800763a <ndefVCardToPayloadItem+0x322>
    case 9:
        bufItem->buffer = bufDelimiterColon.buffer;
 80075fc:	4a15      	ldr	r2, [pc, #84]	; (8007654 <ndefVCardToPayloadItem+0x33c>)
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 8007602:	2201      	movs	r2, #1
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8007608:	4b13      	ldr	r3, [pc, #76]	; (8007658 <ndefVCardToPayloadItem+0x340>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3301      	adds	r3, #1
 800760e:	4a12      	ldr	r2, [pc, #72]	; (8007658 <ndefVCardToPayloadItem+0x340>)
 8007610:	6013      	str	r3, [r2, #0]
        break;
 8007612:	e012      	b.n	800763a <ndefVCardToPayloadItem+0x322>
    case 10:
        bufItem->buffer = bufValueVCard.buffer;
 8007614:	4a11      	ldr	r2, [pc, #68]	; (800765c <ndefVCardToPayloadItem+0x344>)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValueVCard.length;
 800761a:	2205      	movs	r2, #5
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8007620:	4b0d      	ldr	r3, [pc, #52]	; (8007658 <ndefVCardToPayloadItem+0x340>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3301      	adds	r3, #1
 8007626:	4a0c      	ldr	r2, [pc, #48]	; (8007658 <ndefVCardToPayloadItem+0x340>)
 8007628:	6013      	str	r3, [r2, #0]
        break;
 800762a:	e006      	b.n	800763a <ndefVCardToPayloadItem+0x322>
    default:
        bufItem->buffer = NULL;
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2200      	movs	r2, #0
 8007636:	605a      	str	r2, [r3, #4]
        break;
 8007638:	bf00      	nop
    }

    return bufItem->buffer;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	681b      	ldr	r3, [r3, #0]
}
 800763e:	4618      	mov	r0, r3
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	bc80      	pop	{r7}
 8007646:	4770      	bx	lr
 8007648:	200031c4 	.word	0x200031c4
 800764c:	200031c0 	.word	0x200031c0
 8007650:	0801aa70 	.word	0x0801aa70
 8007654:	0801aa68 	.word	0x0801aa68
 8007658:	200031bc 	.word	0x200031bc
 800765c:	0801aaa0 	.word	0x0801aaa0

08007660 <ndefGetVCard>:
}


/*****************************************************************************/
ReturnCode ndefGetVCard(const ndefType* vCard, const ndefConstBuffer* bufType, ndefConstBuffer* bufSubType, ndefConstBuffer* bufValue)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
    const ndefTypeVCard* vCardData;
    uint32_t i;

    if ( (vCard   == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00c      	beq.n	800768e <ndefGetVCard+0x2e>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	2b06      	cmp	r3, #6
 800767a:	d108      	bne.n	800768e <ndefGetVCard+0x2e>
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d005      	beq.n	800768e <ndefGetVCard+0x2e>
         (bufType == NULL) || (bufSubType == NULL) || (bufValue == NULL) )
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <ndefGetVCard+0x2e>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <ndefGetVCard+0x32>
    {
        return ERR_PARAM;
 800768e:	2307      	movs	r3, #7
 8007690:	e062      	b.n	8007758 <ndefGetVCard+0xf8>
    }

    vCardData = &vCard->data.vCard;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	330c      	adds	r3, #12
 8007696:	613b      	str	r3, [r7, #16]

    bufSubType->buffer = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]
    bufSubType->length = 0;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	605a      	str	r2, [r3, #4]

    bufValue->buffer = NULL;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2200      	movs	r2, #0
 80076a8:	601a      	str	r2, [r3, #0]
    bufValue->length = 0;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2200      	movs	r2, #0
 80076ae:	605a      	str	r2, [r3, #4]

    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 80076b0:	2300      	movs	r3, #0
 80076b2:	617b      	str	r3, [r7, #20]
 80076b4:	e04c      	b.n	8007750 <ndefGetVCard+0xf0>
    {
        if ( (vCardData->entry[i].bufTypeLength != 0U) &&
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	011b      	lsls	r3, r3, #4
 80076bc:	4413      	add	r3, r2
 80076be:	330c      	adds	r3, #12
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d041      	beq.n	800774a <ndefGetVCard+0xea>
             (vCardData->entry[i].bufTypeLength == bufType->length) )
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	4413      	add	r3, r2
 80076ce:	330c      	adds	r3, #12
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	685b      	ldr	r3, [r3, #4]
        if ( (vCardData->entry[i].bufTypeLength != 0U) &&
 80076d8:	429a      	cmp	r2, r3
 80076da:	d136      	bne.n	800774a <ndefGetVCard+0xea>
        {
            if (bufType->length > 0U)
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d032      	beq.n	800774a <ndefGetVCard+0xea>
            {
                if (ST_BYTECMP(vCardData->entry[i].bufTypeBuffer, bufType->buffer, bufType->length) == 0)
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	011b      	lsls	r3, r3, #4
 80076ea:	4413      	add	r3, r2
 80076ec:	6818      	ldr	r0, [r3, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	6819      	ldr	r1, [r3, #0]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	461a      	mov	r2, r3
 80076f8:	f011 fafa 	bl	8018cf0 <memcmp>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d123      	bne.n	800774a <ndefGetVCard+0xea>
                {
                    bufSubType->buffer = vCardData->entry[i].bufSubTypeBuffer;
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	4413      	add	r3, r2
 800770a:	3304      	adds	r3, #4
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	601a      	str	r2, [r3, #0]
                    bufSubType->length = vCardData->entry[i].bufSubTypeLength;
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	011b      	lsls	r3, r3, #4
 8007718:	4413      	add	r3, r2
 800771a:	330d      	adds	r3, #13
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	605a      	str	r2, [r3, #4]

                    bufValue->buffer = vCardData->entry[i].bufValueBuffer;
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	011b      	lsls	r3, r3, #4
 800772a:	4413      	add	r3, r2
 800772c:	3308      	adds	r3, #8
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	601a      	str	r2, [r3, #0]
                    bufValue->length = vCardData->entry[i].bufValueLength;
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	011b      	lsls	r3, r3, #4
 800773a:	4413      	add	r3, r2
 800773c:	330e      	adds	r3, #14
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	461a      	mov	r2, r3
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	605a      	str	r2, [r3, #4]

                    return ERR_NONE;
 8007746:	2300      	movs	r3, #0
 8007748:	e006      	b.n	8007758 <ndefGetVCard+0xf8>
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	3301      	adds	r3, #1
 800774e:	617b      	str	r3, [r7, #20]
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	2b0f      	cmp	r3, #15
 8007754:	d9af      	bls.n	80076b6 <ndefGetVCard+0x56>
                }
            }
        }
    }

    return ERR_NOTFOUND;
 8007756:	2316      	movs	r3, #22
}
 8007758:	4618      	mov	r0, r3
 800775a:	3718      	adds	r7, #24
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <ndefVCardFindMarker>:


/*****************************************************************************/
static ReturnCode ndefVCardFindMarker(const ndefConstBuffer* bufPayload, const ndefConstBuffer* bufMarker, uint32_t* offset)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
    uint32_t tempOffset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) ||
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00d      	beq.n	800778e <ndefVCardFindMarker+0x2e>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d009      	beq.n	800778e <ndefVCardFindMarker+0x2e>
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d006      	beq.n	800778e <ndefVCardFindMarker+0x2e>
         (bufMarker  == NULL) || (bufMarker->buffer  == NULL) ||
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <ndefVCardFindMarker+0x2e>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <ndefVCardFindMarker+0x32>
         (offset     == NULL) )
    {
        return ERR_PROTO;
 800778e:	230b      	movs	r3, #11
 8007790:	e025      	b.n	80077de <ndefVCardFindMarker+0x7e>
    }

    tempOffset = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	617b      	str	r3, [r7, #20]
    while (tempOffset < (bufPayload->length - bufMarker->length))
 8007796:	e019      	b.n	80077cc <ndefVCardFindMarker+0x6c>
    {
        if (bufMarker->length > 0U)
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d012      	beq.n	80077c6 <ndefVCardFindMarker+0x66>
        {
            // TODO Convert To Upper to be case insensitive
            if (ST_BYTECMP(&bufPayload->buffer[tempOffset], bufMarker->buffer, bufMarker->length) == 0)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	18d0      	adds	r0, r2, r3
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6819      	ldr	r1, [r3, #0]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	461a      	mov	r2, r3
 80077b2:	f011 fa9d 	bl	8018cf0 <memcmp>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d104      	bne.n	80077c6 <ndefVCardFindMarker+0x66>
            {
                *offset = tempOffset;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	601a      	str	r2, [r3, #0]
                return ERR_NONE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	e00b      	b.n	80077de <ndefVCardFindMarker+0x7e>
            }
        }
        tempOffset++;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	3301      	adds	r3, #1
 80077ca:	617b      	str	r3, [r7, #20]
    while (tempOffset < (bufPayload->length - bufMarker->length))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d3dd      	bcc.n	8007798 <ndefVCardFindMarker+0x38>
    }

    return ERR_NOTFOUND;
 80077dc:	2316      	movs	r3, #22
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <ndefVCardExtractLine>:


/*****************************************************************************/
static ReturnCode ndefVCardExtractLine(const ndefConstBuffer* bufPayload, const ndefConstBuffer* bufMarker, ndefConstBuffer* bufLine)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b086      	sub	sp, #24
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	607a      	str	r2, [r7, #4]
    ReturnCode err;
    uint32_t markerOffset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) ||
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d011      	beq.n	800781c <ndefVCardExtractLine+0x36>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00d      	beq.n	800781c <ndefVCardExtractLine+0x36>
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <ndefVCardExtractLine+0x36>
         (bufMarker  == NULL) || (bufMarker->buffer  == NULL) ||
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d006      	beq.n	800781c <ndefVCardExtractLine+0x36>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <ndefVCardExtractLine+0x36>
         (bufLine    == NULL) || (bufLine->buffer    == NULL) )
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <ndefVCardExtractLine+0x3a>
    {
        return ERR_PROTO;
 800781c:	230b      	movs	r3, #11
 800781e:	e01c      	b.n	800785a <ndefVCardExtractLine+0x74>
    }

    err = ndefVCardFindMarker(bufPayload, bufMarker, &markerOffset);
 8007820:	f107 0310 	add.w	r3, r7, #16
 8007824:	461a      	mov	r2, r3
 8007826:	68b9      	ldr	r1, [r7, #8]
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7ff ff99 	bl	8007760 <ndefVCardFindMarker>
 800782e:	4603      	mov	r3, r0
 8007830:	82fb      	strh	r3, [r7, #22]
    if (err == ERR_NONE)
 8007832:	8afb      	ldrh	r3, [r7, #22]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d107      	bne.n	8007848 <ndefVCardExtractLine+0x62>
    {
        /* Return up to the marker */
        bufLine->buffer = bufPayload->buffer;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	601a      	str	r2, [r3, #0]
        bufLine->length = markerOffset;
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	605a      	str	r2, [r3, #4]
 8007846:	e007      	b.n	8007858 <ndefVCardExtractLine+0x72>
    }
    else
    {
        /* Return up to the end of the payload */
        bufLine->buffer = bufPayload->buffer;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	601a      	str	r2, [r3, #0]
        bufLine->length = bufPayload->length;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	605a      	str	r2, [r3, #4]
    }

    return ERR_NONE;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <ndefVCardParseLine>:


/*****************************************************************************/
static ReturnCode ndefVCardParseLine(const ndefConstBuffer* bufLine, ndefVCardEntry* vCardEntry)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    ndefConstBuffer bufKeyword;
    uint32_t semicolonOffset;
    uint32_t colonOffset;

    if ( (bufLine == NULL) || (bufLine->buffer == NULL) || (vCardEntry == NULL) )
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d006      	beq.n	8007882 <ndefVCardParseLine+0x1e>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <ndefVCardParseLine+0x1e>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <ndefVCardParseLine+0x22>
    {
        return ERR_PROTO;
 8007882:	230b      	movs	r3, #11
 8007884:	e053      	b.n	800792e <ndefVCardParseLine+0xca>
    }

    /* Look for the type delimiter colon ":" */
    err = ndefVCardFindMarker(bufLine, &bufDelimiterColon, &colonOffset);
 8007886:	f107 030c 	add.w	r3, r7, #12
 800788a:	461a      	mov	r2, r3
 800788c:	492a      	ldr	r1, [pc, #168]	; (8007938 <ndefVCardParseLine+0xd4>)
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff ff66 	bl	8007760 <ndefVCardFindMarker>
 8007894:	4603      	mov	r3, r0
 8007896:	83fb      	strh	r3, [r7, #30]
    if (err != ERR_NONE)
 8007898:	8bfb      	ldrh	r3, [r7, #30]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <ndefVCardParseLine+0x3e>
    {
        /* Invalid line */
        return err;
 800789e:	8bfb      	ldrh	r3, [r7, #30]
 80078a0:	e045      	b.n	800792e <ndefVCardParseLine+0xca>
    }

    /* Keyword is located at the begining of the line up to the delimiter colon */
    bufKeyword.buffer = bufLine->buffer;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	617b      	str	r3, [r7, #20]
    bufKeyword.length = colonOffset;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	61bb      	str	r3, [r7, #24]

    vCardEntry->bufTypeBuffer = bufLine->buffer;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	601a      	str	r2, [r3, #0]
    vCardEntry->bufTypeLength = (uint8_t)colonOffset;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	731a      	strb	r2, [r3, #12]

    /* Look for any subtype delimiter semicolon ";" */
    err = ndefVCardFindMarker(&bufKeyword, &bufDelimiterSemicolon, &semicolonOffset);
 80078bc:	f107 0210 	add.w	r2, r7, #16
 80078c0:	f107 0314 	add.w	r3, r7, #20
 80078c4:	491d      	ldr	r1, [pc, #116]	; (800793c <ndefVCardParseLine+0xd8>)
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff ff4a 	bl	8007760 <ndefVCardFindMarker>
 80078cc:	4603      	mov	r3, r0
 80078ce:	83fb      	strh	r3, [r7, #30]
    if (err == ERR_NONE)
 80078d0:	8bfb      	ldrh	r3, [r7, #30]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d11a      	bne.n	800790c <ndefVCardParseLine+0xa8>
    {
        /* Subtype found (remove the leading ";") */
        vCardEntry->bufSubTypeBuffer = &bufLine->buffer[semicolonOffset + 1U];
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	3301      	adds	r3, #1
 80078de:	441a      	add	r2, r3
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	605a      	str	r2, [r3, #4]
        vCardEntry->bufSubTypeLength = (uint8_t)(colonOffset - semicolonOffset - 1U);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	3b01      	subs	r3, #1
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	735a      	strb	r2, [r3, #13]

        /* Adjust the Type length */
        vCardEntry->bufTypeLength -= vCardEntry->bufSubTypeLength + 1U;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	7b1a      	ldrb	r2, [r3, #12]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	7b5b      	ldrb	r3, [r3, #13]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	b2db      	uxtb	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b2da      	uxtb	r2, r3
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	731a      	strb	r2, [r3, #12]
    }

    /* The value follows ":" until the end of the line */
    vCardEntry->bufValueBuffer = &bufLine->buffer[colonOffset + 1U];
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	3301      	adds	r3, #1
 8007914:	441a      	add	r2, r3
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	609a      	str	r2, [r3, #8]
    vCardEntry->bufValueLength = (uint16_t)(bufLine->length - colonOffset);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	b29a      	uxth	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	b29b      	uxth	r3, r3
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	b29a      	uxth	r2, r3
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	81da      	strh	r2, [r3, #14]

    return ERR_NONE;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3720      	adds	r7, #32
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	0801aa74 	.word	0x0801aa74
 800793c:	0801aa7c 	.word	0x0801aa7c

08007940 <ndefIsVCardTypeFound>:


/*****************************************************************************/
static bool ndefIsVCardTypeFound(const ndefTypeVCard* vCard, const uint8_t* typeString)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	e01e      	b.n	800798e <ndefIsVCardTypeFound+0x4e>
    {
        if (vCard->entry[i].bufTypeLength > 0U)
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	4413      	add	r3, r2
 8007958:	330c      	adds	r3, #12
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d013      	beq.n	8007988 <ndefIsVCardTypeFound+0x48>
        {
            if (ST_BYTECMP(typeString, vCard->entry[i].bufTypeBuffer, vCard->entry[i].bufTypeLength) == 0)
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	4413      	add	r3, r2
 8007968:	6819      	ldr	r1, [r3, #0]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	011b      	lsls	r3, r3, #4
 8007970:	4413      	add	r3, r2
 8007972:	330c      	adds	r3, #12
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	6838      	ldr	r0, [r7, #0]
 800797a:	f011 f9b9 	bl	8018cf0 <memcmp>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <ndefIsVCardTypeFound+0x48>
            {
                return true;
 8007984:	2301      	movs	r3, #1
 8007986:	e006      	b.n	8007996 <ndefIsVCardTypeFound+0x56>
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3301      	adds	r3, #1
 800798c:	60fb      	str	r3, [r7, #12]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2b0f      	cmp	r3, #15
 8007992:	d9dd      	bls.n	8007950 <ndefIsVCardTypeFound+0x10>
            }
        }
    }

    return false;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
	...

080079a0 <ndefPayloadToVcard>:


/*****************************************************************************/
static ReturnCode ndefPayloadToVcard(const ndefConstBuffer* bufPayload, ndefType* vCard)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08c      	sub	sp, #48	; 0x30
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint32_t entry_count;
    ndefConstBuffer bufLinePayload;
    ndefConstBuffer bufLine;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (bufPayload->length == 0U) ||
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <ndefPayloadToVcard+0x26>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d006      	beq.n	80079c6 <ndefPayloadToVcard+0x26>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <ndefPayloadToVcard+0x26>
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <ndefPayloadToVcard+0x2a>
         (vCard      == NULL) )
    {
        return ERR_PROTO;
 80079c6:	230b      	movs	r3, #11
 80079c8:	e09c      	b.n	8007b04 <ndefPayloadToVcard+0x164>
    }

    vCard->id               = NDEF_TYPE_MEDIA_VCARD;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2206      	movs	r2, #6
 80079ce:	701a      	strb	r2, [r3, #0]
    vCard->getPayloadLength = ndefVCardPayloadGetLength;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	4a4e      	ldr	r2, [pc, #312]	; (8007b0c <ndefPayloadToVcard+0x16c>)
 80079d4:	605a      	str	r2, [r3, #4]
    vCard->getPayloadItem   = ndefVCardToPayloadItem;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	4a4d      	ldr	r2, [pc, #308]	; (8007b10 <ndefPayloadToVcard+0x170>)
 80079da:	609a      	str	r2, [r3, #8]
    vCardData               = &vCard->data.vCard;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	330c      	adds	r3, #12
 80079e0:	623b      	str	r3, [r7, #32]

    /* Clear the vCard before parsing */
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 80079e2:	2300      	movs	r3, #0
 80079e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079e6:	e02b      	b.n	8007a40 <ndefPayloadToVcard+0xa0>
    {
        vCardData->entry[i].bufTypeBuffer    = NULL;
 80079e8:	6a3a      	ldr	r2, [r7, #32]
 80079ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	4413      	add	r3, r2
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufTypeLength    = 0;
 80079f4:	6a3a      	ldr	r2, [r7, #32]
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	4413      	add	r3, r2
 80079fc:	330c      	adds	r3, #12
 80079fe:	2200      	movs	r2, #0
 8007a00:	701a      	strb	r2, [r3, #0]
        vCardData->entry[i].bufSubTypeBuffer = NULL;
 8007a02:	6a3a      	ldr	r2, [r7, #32]
 8007a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a06:	011b      	lsls	r3, r3, #4
 8007a08:	4413      	add	r3, r2
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufSubTypeLength = 0;
 8007a10:	6a3a      	ldr	r2, [r7, #32]
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	011b      	lsls	r3, r3, #4
 8007a16:	4413      	add	r3, r2
 8007a18:	330d      	adds	r3, #13
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	701a      	strb	r2, [r3, #0]
        vCardData->entry[i].bufValueBuffer   = NULL;
 8007a1e:	6a3a      	ldr	r2, [r7, #32]
 8007a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	4413      	add	r3, r2
 8007a26:	3308      	adds	r3, #8
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufValueLength   = 0;
 8007a2c:	6a3a      	ldr	r2, [r7, #32]
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	011b      	lsls	r3, r3, #4
 8007a32:	4413      	add	r3, r2
 8007a34:	330e      	adds	r3, #14
 8007a36:	2200      	movs	r2, #0
 8007a38:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 8007a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a42:	2b0f      	cmp	r3, #15
 8007a44:	d9d0      	bls.n	80079e8 <ndefPayloadToVcard+0x48>
    }

    offset = 0;
 8007a46:	2300      	movs	r3, #0
 8007a48:	62bb      	str	r3, [r7, #40]	; 0x28
    entry_count = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	627b      	str	r3, [r7, #36]	; 0x24
    while ( (offset < bufPayload->length) && (entry_count < NDEF_VCARD_ENTRY_MAX) )
 8007a4e:	e029      	b.n	8007aa4 <ndefPayloadToVcard+0x104>
    {
        /* Search an "end of line" or end of payload among the remaining to parse */
        bufLinePayload.buffer = &bufPayload->buffer[offset];
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a56:	4413      	add	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]
        bufLinePayload.length = bufPayload->length - offset;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	61bb      	str	r3, [r7, #24]

        (void)ndefVCardExtractLine(&bufLinePayload, &bufDelimiterNewLine, &bufLine);
 8007a64:	f107 020c 	add.w	r2, r7, #12
 8007a68:	f107 0314 	add.w	r3, r7, #20
 8007a6c:	4929      	ldr	r1, [pc, #164]	; (8007b14 <ndefPayloadToVcard+0x174>)
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff feb9 	bl	80077e6 <ndefVCardExtractLine>

        /* Parse line and fill vCard entry */
        err = ndefVCardParseLine(&bufLine, &vCardData->entry[entry_count]);
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	011b      	lsls	r3, r3, #4
 8007a78:	6a3a      	ldr	r2, [r7, #32]
 8007a7a:	441a      	add	r2, r3
 8007a7c:	f107 030c 	add.w	r3, r7, #12
 8007a80:	4611      	mov	r1, r2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff feee 	bl	8007864 <ndefVCardParseLine>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	83fb      	strh	r3, [r7, #30]
        if (err == ERR_NONE)
 8007a8c:	8bfb      	ldrh	r3, [r7, #30]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d102      	bne.n	8007a98 <ndefPayloadToVcard+0xf8>
        {
            entry_count++;
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	3301      	adds	r3, #1
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Move to the next line */
        offset += bufLine.length + bufDelimiterNewLine.length;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	4413      	add	r3, r2
 8007a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa0:	4413      	add	r3, r2
 8007aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    while ( (offset < bufPayload->length) && (entry_count < NDEF_VCARD_ENTRY_MAX) )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d202      	bcs.n	8007ab4 <ndefPayloadToVcard+0x114>
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	2b0f      	cmp	r3, #15
 8007ab2:	d9cd      	bls.n	8007a50 <ndefPayloadToVcard+0xb0>
    }

    /* Check BEGIN, VERSION and END types exist */
    if (ndefIsVCardTypeFound(vCardData, bufTypeBegin.buffer) == false)
 8007ab4:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <ndefPayloadToVcard+0x178>)
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6a38      	ldr	r0, [r7, #32]
 8007aba:	f7ff ff41 	bl	8007940 <ndefIsVCardTypeFound>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	f083 0301 	eor.w	r3, r3, #1
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <ndefPayloadToVcard+0x12e>
    {
        return ERR_SYNTAX;
 8007aca:	2314      	movs	r3, #20
 8007acc:	e01a      	b.n	8007b04 <ndefPayloadToVcard+0x164>
    }
    else if (ndefIsVCardTypeFound(vCardData, bufTypeVersion.buffer) == false)
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <ndefPayloadToVcard+0x17c>)
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6a38      	ldr	r0, [r7, #32]
 8007ad4:	f7ff ff34 	bl	8007940 <ndefIsVCardTypeFound>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	f083 0301 	eor.w	r3, r3, #1
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <ndefPayloadToVcard+0x148>
    {
        return ERR_SYNTAX;
 8007ae4:	2314      	movs	r3, #20
 8007ae6:	e00d      	b.n	8007b04 <ndefPayloadToVcard+0x164>
    }
    else if (ndefIsVCardTypeFound(vCardData, bufTypeEnd.buffer) == false)
 8007ae8:	4b0d      	ldr	r3, [pc, #52]	; (8007b20 <ndefPayloadToVcard+0x180>)
 8007aea:	4619      	mov	r1, r3
 8007aec:	6a38      	ldr	r0, [r7, #32]
 8007aee:	f7ff ff27 	bl	8007940 <ndefIsVCardTypeFound>
 8007af2:	4603      	mov	r3, r0
 8007af4:	f083 0301 	eor.w	r3, r3, #1
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <ndefPayloadToVcard+0x162>
    {
        return ERR_SYNTAX;
 8007afe:	2314      	movs	r3, #20
 8007b00:	e000      	b.n	8007b04 <ndefPayloadToVcard+0x164>
    else
    {
        /* MISRA 15.7 - Empty else */
    }

    return ERR_NONE;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3730      	adds	r7, #48	; 0x30
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	08007213 	.word	0x08007213
 8007b10:	08007319 	.word	0x08007319
 8007b14:	0801aa84 	.word	0x0801aa84
 8007b18:	0801aa8c 	.word	0x0801aa8c
 8007b1c:	0801aa98 	.word	0x0801aa98
 8007b20:	0801aa94 	.word	0x0801aa94

08007b24 <ndefRecordToVCard>:


/*****************************************************************************/
ReturnCode ndefRecordToVCard(const ndefRecord* record, ndefType* vCard)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (vCard == NULL) )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <ndefRecordToVCard+0x16>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <ndefRecordToVCard+0x1a>
    {
        return ERR_PARAM;
 8007b3a:	2307      	movs	r3, #7
 8007b3c:	e022      	b.n	8007b84 <ndefRecordToVCard+0x60>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeVCard)) /* "text/x-vCard" */
 8007b3e:	4a13      	ldr	r2, [pc, #76]	; (8007b8c <ndefRecordToVCard+0x68>)
 8007b40:	2102      	movs	r1, #2
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fe fc34 	bl	80063b0 <ndefRecordTypeMatch>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f083 0301 	eor.w	r3, r3, #1
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <ndefRecordToVCard+0x34>
    {
        return ERR_PROTO;
 8007b54:	230b      	movs	r3, #11
 8007b56:	e015      	b.n	8007b84 <ndefRecordToVCard+0x60>
    }

    ndeftype = ndefRecordGetNdefType(record);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7ff fb35 	bl	80071c8 <ndefRecordGetNdefType>
 8007b5e:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d007      	beq.n	8007b76 <ndefRecordToVCard+0x52>
    {
        (void)ST_MEMCPY(vCard, ndeftype, sizeof(ndefType));
 8007b66:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8007b6a:	68f9      	ldr	r1, [r7, #12]
 8007b6c:	6838      	ldr	r0, [r7, #0]
 8007b6e:	f011 f8cf 	bl	8018d10 <memcpy>
        return ERR_NONE;
 8007b72:	2300      	movs	r3, #0
 8007b74:	e006      	b.n	8007b84 <ndefRecordToVCard+0x60>
    }

    return ndefPayloadToVcard(&record->bufPayload, vCard);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	330c      	adds	r3, #12
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7ff ff0f 	bl	80079a0 <ndefPayloadToVcard>
 8007b82:	4603      	mov	r3, r0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	0801aa60 	.word	0x0801aa60

08007b90 <ndefVCardToRecord>:


/*****************************************************************************/
ReturnCode ndefVCardToRecord(const ndefType* vCard, ndefRecord* record)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
    if ( (vCard  == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d006      	beq.n	8007bae <ndefVCardToRecord+0x1e>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b06      	cmp	r3, #6
 8007ba6:	d102      	bne.n	8007bae <ndefVCardToRecord+0x1e>
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <ndefVCardToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 8007bae:	2307      	movs	r3, #7
 8007bb0:	e00c      	b.n	8007bcc <ndefVCardToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 8007bb2:	6838      	ldr	r0, [r7, #0]
 8007bb4:	f7fe fb26 	bl	8006204 <ndefRecordReset>

    (void)ndefRecordSetType(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeVCard);
 8007bb8:	4a06      	ldr	r2, [pc, #24]	; (8007bd4 <ndefVCardToRecord+0x44>)
 8007bba:	2102      	movs	r1, #2
 8007bbc:	6838      	ldr	r0, [r7, #0]
 8007bbe:	f7fe fba2 	bl	8006306 <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, vCard);
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	6838      	ldr	r0, [r7, #0]
 8007bc6:	f7ff fac7 	bl	8007158 <ndefRecordSetNdefType>

    return ERR_NONE;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	0801aa60 	.word	0x0801aa60

08007bd8 <ndefEmptyTypePayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefEmptyTypePayloadGetLength(const ndefType* empty)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
    if ( (empty == NULL) || (empty->id != NDEF_TYPE_EMPTY) )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <ndefEmptyTypePayloadGetLength+0x16>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <ndefEmptyTypePayloadGetLength+0x1a>
    {
        return 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e000      	b.n	8007bf4 <ndefEmptyTypePayloadGetLength+0x1c>
    }

    return 0;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr

08007bfe <ndefEmptyTypePayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefEmptyTypePayloadItem(const ndefType* empty, ndefConstBuffer* bufItem, bool begin)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	71fb      	strb	r3, [r7, #7]
    if ( (empty == NULL) || (empty->id != NDEF_TYPE_EMPTY) )
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <ndefEmptyTypePayloadItem+0x1c>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <ndefEmptyTypePayloadItem+0x20>
    {
        return NULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	e009      	b.n	8007c32 <ndefEmptyTypePayloadItem+0x34>
    }

    NO_WARNING(begin);

    if (bufItem != NULL)
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d005      	beq.n	8007c30 <ndefEmptyTypePayloadItem+0x32>
    {
        bufItem->buffer = NULL;
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2200      	movs	r2, #0
 8007c28:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	605a      	str	r2, [r3, #4]
    }

    return NULL;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bc80      	pop	{r7}
 8007c3a:	4770      	bx	lr

08007c3c <ndefEmptyType>:


/*****************************************************************************/
ReturnCode ndefEmptyType(ndefType* empty)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
    if (empty == NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <ndefEmptyType+0x12>
    {
        return ERR_PARAM;
 8007c4a:	2307      	movs	r3, #7
 8007c4c:	e009      	b.n	8007c62 <ndefEmptyType+0x26>
    }

    empty->id               = NDEF_TYPE_EMPTY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	701a      	strb	r2, [r3, #0]
    empty->getPayloadLength = ndefEmptyTypePayloadGetLength;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a05      	ldr	r2, [pc, #20]	; (8007c6c <ndefEmptyType+0x30>)
 8007c58:	605a      	str	r2, [r3, #4]
    empty->getPayloadItem   = ndefEmptyTypePayloadItem;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a04      	ldr	r2, [pc, #16]	; (8007c70 <ndefEmptyType+0x34>)
 8007c5e:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr
 8007c6c:	08007bd9 	.word	0x08007bd9
 8007c70:	08007bff 	.word	0x08007bff

08007c74 <ndefRecordToEmptyType>:


/*****************************************************************************/
ReturnCode ndefRecordToEmptyType(const ndefRecord* record, ndefType* empty)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
    ndefConstBuffer8 bufEmpty = { NULL, 0 };
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60bb      	str	r3, [r7, #8]
 8007c82:	2300      	movs	r3, #0
 8007c84:	733b      	strb	r3, [r7, #12]

    if ( (record == NULL) || (empty == NULL) )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <ndefRecordToEmptyType+0x1e>
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <ndefRecordToEmptyType+0x22>
    {
        return ERR_PARAM;
 8007c92:	2307      	movs	r3, #7
 8007c94:	e024      	b.n	8007ce0 <ndefRecordToEmptyType+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_EMPTY, &bufEmpty))
 8007c96:	f107 0308 	add.w	r3, r7, #8
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fe fb86 	bl	80063b0 <ndefRecordTypeMatch>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	f083 0301 	eor.w	r3, r3, #1
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <ndefRecordToEmptyType+0x40>
    {
        return ERR_PARAM;
 8007cb0:	2307      	movs	r3, #7
 8007cb2:	e015      	b.n	8007ce0 <ndefRecordToEmptyType+0x6c>
    }

    if ( (record->idLength          != 0U) || (record->id                != NULL) ||
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	789b      	ldrb	r3, [r3, #2]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10b      	bne.n	8007cd4 <ndefRecordToEmptyType+0x60>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d107      	bne.n	8007cd4 <ndefRecordToEmptyType+0x60>
         (record->bufPayload.length != 0U) || (record->bufPayload.buffer != NULL) )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	691b      	ldr	r3, [r3, #16]
    if ( (record->idLength          != 0U) || (record->id                != NULL) ||
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d103      	bne.n	8007cd4 <ndefRecordToEmptyType+0x60>
         (record->bufPayload.length != 0U) || (record->bufPayload.buffer != NULL) )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <ndefRecordToEmptyType+0x64>
    {
        return ERR_PARAM;
 8007cd4:	2307      	movs	r3, #7
 8007cd6:	e003      	b.n	8007ce0 <ndefRecordToEmptyType+0x6c>
    }

    return ndefEmptyType(empty);
 8007cd8:	6838      	ldr	r0, [r7, #0]
 8007cda:	f7ff ffaf 	bl	8007c3c <ndefEmptyType>
 8007cde:	4603      	mov	r3, r0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <ndefEmptyTypeToRecord>:


/*****************************************************************************/
ReturnCode ndefEmptyTypeToRecord(const ndefType* empty, ndefRecord* record)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
    if ( (empty  == NULL) || (empty->id != NDEF_TYPE_EMPTY) ||
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d006      	beq.n	8007d06 <ndefEmptyTypeToRecord+0x1e>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d102      	bne.n	8007d06 <ndefEmptyTypeToRecord+0x1e>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <ndefEmptyTypeToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 8007d06:	2307      	movs	r3, #7
 8007d08:	e007      	b.n	8007d1a <ndefEmptyTypeToRecord+0x32>
    }

    (void)ndefRecordReset(record);
 8007d0a:	6838      	ldr	r0, [r7, #0]
 8007d0c:	f7fe fa7a 	bl	8006204 <ndefRecordReset>

    (void)ndefRecordSetNdefType(record, empty);
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	6838      	ldr	r0, [r7, #0]
 8007d14:	f7ff fa20 	bl	8007158 <ndefRecordSetNdefType>

    return ERR_NONE;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <ndefRtdDeviceInfoPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdDeviceInfoPayloadGetLength(const ndefType* devInfo)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b087      	sub	sp, #28
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t payloadLength = 0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	617b      	str	r3, [r7, #20]
    uint32_t i;

    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) )
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <ndefRtdDeviceInfoPayloadGetLength+0x1a>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d001      	beq.n	8007d40 <ndefRtdDeviceInfoPayloadGetLength+0x1e>
    {
        return 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	e01d      	b.n	8007d7c <ndefRtdDeviceInfoPayloadGetLength+0x5a>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	330c      	adds	r3, #12
 8007d44:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8007d46:	2300      	movs	r3, #0
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	e013      	b.n	8007d74 <ndefRtdDeviceInfoPayloadGetLength+0x52>
    {
        if (rtdDevInfo->devInfo[i].length != 0U)
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	00db      	lsls	r3, r3, #3
 8007d52:	4413      	add	r3, r2
 8007d54:	785b      	ldrb	r3, [r3, #1]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <ndefRtdDeviceInfoPayloadGetLength+0x4c>
        {
            payloadLength += sizeof(rtdDevInfo->devInfo[i].type) + sizeof(rtdDevInfo->devInfo[i].length) + (uint32_t)rtdDevInfo->devInfo[i].length;
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	00db      	lsls	r3, r3, #3
 8007d60:	4413      	add	r3, r2
 8007d62:	785b      	ldrb	r3, [r3, #1]
 8007d64:	461a      	mov	r2, r3
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	4413      	add	r3, r2
 8007d6a:	3302      	adds	r3, #2
 8007d6c:	617b      	str	r3, [r7, #20]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	3301      	adds	r3, #1
 8007d72:	613b      	str	r3, [r7, #16]
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d9e8      	bls.n	8007d4c <ndefRtdDeviceInfoPayloadGetLength+0x2a>
        }
    }

    return payloadLength;
 8007d7a:	697b      	ldr	r3, [r7, #20]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	371c      	adds	r7, #28
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bc80      	pop	{r7}
 8007d84:	4770      	bx	lr
	...

08007d88 <ndefRtdDeviceInfoToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdDeviceInfoToPayloadItem(const ndefType* devInfo, ndefConstBuffer* bufItem, bool begin)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t index;

    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d006      	beq.n	8007daa <ndefRtdDeviceInfoToPayloadItem+0x22>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d102      	bne.n	8007daa <ndefRtdDeviceInfoToPayloadItem+0x22>
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <ndefRtdDeviceInfoToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	e063      	b.n	8007e76 <ndefRtdDeviceInfoToPayloadItem+0xee>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	330c      	adds	r3, #12
 8007db2:	617b      	str	r3, [r7, #20]

    if (begin == true)
 8007db4:	79fb      	ldrb	r3, [r7, #7]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <ndefRtdDeviceInfoToPayloadItem+0x38>
    {
        item = 0;
 8007dba:	4b31      	ldr	r3, [pc, #196]	; (8007e80 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	605a      	str	r2, [r3, #4]

    index = item / 3U;
 8007dcc:	4b2c      	ldr	r3, [pc, #176]	; (8007e80 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a2c      	ldr	r2, [pc, #176]	; (8007e84 <ndefRtdDeviceInfoToPayloadItem+0xfc>)
 8007dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd6:	085b      	lsrs	r3, r3, #1
 8007dd8:	613b      	str	r3, [r7, #16]

    /* Stop streaming on first empty entry */
    if (rtdDevInfo->devInfo[index].length > 0U)
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	4413      	add	r3, r2
 8007de2:	785b      	ldrb	r3, [r3, #1]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d03e      	beq.n	8007e66 <ndefRtdDeviceInfoToPayloadItem+0xde>
    {
        switch (item % 3U)
 8007de8:	4b25      	ldr	r3, [pc, #148]	; (8007e80 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 8007dea:	6819      	ldr	r1, [r3, #0]
 8007dec:	4b25      	ldr	r3, [pc, #148]	; (8007e84 <ndefRtdDeviceInfoToPayloadItem+0xfc>)
 8007dee:	fba3 2301 	umull	r2, r3, r3, r1
 8007df2:	085b      	lsrs	r3, r3, #1
 8007df4:	461a      	mov	r2, r3
 8007df6:	0052      	lsls	r2, r2, #1
 8007df8:	441a      	add	r2, r3
 8007dfa:	1a8b      	subs	r3, r1, r2
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d01b      	beq.n	8007e38 <ndefRtdDeviceInfoToPayloadItem+0xb0>
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d829      	bhi.n	8007e58 <ndefRtdDeviceInfoToPayloadItem+0xd0>
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d002      	beq.n	8007e0e <ndefRtdDeviceInfoToPayloadItem+0x86>
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d00a      	beq.n	8007e22 <ndefRtdDeviceInfoToPayloadItem+0x9a>
 8007e0c:	e024      	b.n	8007e58 <ndefRtdDeviceInfoToPayloadItem+0xd0>
        {
        case 0:
            bufItem->buffer = &rtdDevInfo->devInfo[index].type;
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	00db      	lsls	r3, r3, #3
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	441a      	add	r2, r3
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	601a      	str	r2, [r3, #0]
            bufItem->length = sizeof(rtdDevInfo->devInfo[index].type);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	605a      	str	r2, [r3, #4]
            break;
 8007e20:	e022      	b.n	8007e68 <ndefRtdDeviceInfoToPayloadItem+0xe0>
        case 1:
            bufItem->buffer = &rtdDevInfo->devInfo[index].length;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	00db      	lsls	r3, r3, #3
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4413      	add	r3, r2
 8007e2a:	1c5a      	adds	r2, r3, #1
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	601a      	str	r2, [r3, #0]
            bufItem->length = sizeof(rtdDevInfo->devInfo[index].length);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2201      	movs	r2, #1
 8007e34:	605a      	str	r2, [r3, #4]
            break;
 8007e36:	e017      	b.n	8007e68 <ndefRtdDeviceInfoToPayloadItem+0xe0>
        case 2:
            bufItem->buffer = rtdDevInfo->devInfo[index].buffer;
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	4413      	add	r3, r2
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	601a      	str	r2, [r3, #0]
            bufItem->length = rtdDevInfo->devInfo[index].length;
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	00db      	lsls	r3, r3, #3
 8007e4c:	4413      	add	r3, r2
 8007e4e:	785b      	ldrb	r3, [r3, #1]
 8007e50:	461a      	mov	r2, r3
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	605a      	str	r2, [r3, #4]
            break;
 8007e56:	e007      	b.n	8007e68 <ndefRtdDeviceInfoToPayloadItem+0xe0>
        default:
            bufItem->buffer = NULL;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]
            bufItem->length = 0;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2200      	movs	r2, #0
 8007e62:	605a      	str	r2, [r3, #4]
            break;
 8007e64:	e000      	b.n	8007e68 <ndefRtdDeviceInfoToPayloadItem+0xe0>
        }
    }
 8007e66:	bf00      	nop

    /* Move to next item for next call */
    item++;
 8007e68:	4b05      	ldr	r3, [pc, #20]	; (8007e80 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	4a04      	ldr	r2, [pc, #16]	; (8007e80 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 8007e70:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	681b      	ldr	r3, [r3, #0]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	371c      	adds	r7, #28
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bc80      	pop	{r7}
 8007e7e:	4770      	bx	lr
 8007e80:	200031c8 	.word	0x200031c8
 8007e84:	aaaaaaab 	.word	0xaaaaaaab

08007e88 <ndefGetRtdDeviceInfo>:
}


/*****************************************************************************/
ReturnCode ndefGetRtdDeviceInfo(const ndefType* devInfo, ndefTypeRtdDeviceInfo* devInfoData)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t i;

    if ( (devInfo     == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d006      	beq.n	8007ea6 <ndefGetRtdDeviceInfo+0x1e>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d102      	bne.n	8007ea6 <ndefGetRtdDeviceInfo+0x1e>
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <ndefGetRtdDeviceInfo+0x22>
         (devInfoData == NULL) )
    {
        return ERR_PARAM;
 8007ea6:	2307      	movs	r3, #7
 8007ea8:	e029      	b.n	8007efe <ndefGetRtdDeviceInfo+0x76>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	330c      	adds	r3, #12
 8007eae:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	e01f      	b.n	8007ef6 <ndefGetRtdDeviceInfo+0x6e>
    {
        devInfoData->devInfo[i].type   = rtdDevInfo->devInfo[i].type;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        devInfoData->devInfo[i].length = rtdDevInfo->devInfo[i].length;
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	4413      	add	r3, r2
 8007ece:	7859      	ldrb	r1, [r3, #1]
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	00db      	lsls	r3, r3, #3
 8007ed6:	4413      	add	r3, r2
 8007ed8:	460a      	mov	r2, r1
 8007eda:	705a      	strb	r2, [r3, #1]
        devInfoData->devInfo[i].buffer = rtdDevInfo->devInfo[i].buffer;
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	00db      	lsls	r3, r3, #3
 8007ee2:	4413      	add	r3, r2
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	440b      	add	r3, r1
 8007eee:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	60fb      	str	r3, [r7, #12]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d9dc      	bls.n	8007eb6 <ndefGetRtdDeviceInfo+0x2e>
    }

    return ERR_NONE;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bc80      	pop	{r7}
 8007f06:	4770      	bx	lr

08007f08 <ndefPayloadToRtdDeviceInfo>:


/*****************************************************************************/
static ReturnCode ndefPayloadToRtdDeviceInfo(const ndefConstBuffer* bufDevInfo, ndefType* devInfo)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b089      	sub	sp, #36	; 0x24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint8_t  count;
    uint8_t  manufacturerNameIndex;
    uint8_t  modelNameIndex;

    if ( (bufDevInfo == NULL) || (bufDevInfo->buffer == NULL) || (bufDevInfo->length == 0U) ||
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00a      	beq.n	8007f2e <ndefPayloadToRtdDeviceInfo+0x26>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d006      	beq.n	8007f2e <ndefPayloadToRtdDeviceInfo+0x26>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d002      	beq.n	8007f2e <ndefPayloadToRtdDeviceInfo+0x26>
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <ndefPayloadToRtdDeviceInfo+0x2a>
         (devInfo    == NULL) )
    {
        return ERR_PARAM;
 8007f2e:	2307      	movs	r3, #7
 8007f30:	e09d      	b.n	800806e <ndefPayloadToRtdDeviceInfo+0x166>
    }

    devInfo->id               = NDEF_TYPE_RTD_DEVICE_INFO;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2201      	movs	r2, #1
 8007f36:	701a      	strb	r2, [r3, #0]
    devInfo->getPayloadLength = ndefRtdDeviceInfoPayloadGetLength;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	4a4f      	ldr	r2, [pc, #316]	; (8008078 <ndefPayloadToRtdDeviceInfo+0x170>)
 8007f3c:	605a      	str	r2, [r3, #4]
    devInfo->getPayloadItem   = ndefRtdDeviceInfoToPayloadItem;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	4a4e      	ldr	r2, [pc, #312]	; (800807c <ndefPayloadToRtdDeviceInfo+0x174>)
 8007f42:	609a      	str	r2, [r3, #8]
    rtdDevInfo                = &devInfo->data.deviceInfo;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	330c      	adds	r3, #12
 8007f48:	613b      	str	r3, [r7, #16]

    if ( (bufDevInfo->length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) ||
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	2b05      	cmp	r3, #5
 8007f50:	d905      	bls.n	8007f5e <ndefPayloadToRtdDeviceInfo+0x56>
         (bufDevInfo->length > NDEF_RTD_DEVICE_INFO_PAYLOAD_MAX) )
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
    if ( (bufDevInfo->length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) ||
 8007f56:	f240 4216 	movw	r2, #1046	; 0x416
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d901      	bls.n	8007f62 <ndefPayloadToRtdDeviceInfo+0x5a>
    {
        return ERR_PROTO;
 8007f5e:	230b      	movs	r3, #11
 8007f60:	e085      	b.n	800806e <ndefPayloadToRtdDeviceInfo+0x166>
    }

    /* Extract device information from the buffer */

    /* Clear the Device Information structure before parsing */
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8007f62:	2300      	movs	r3, #0
 8007f64:	61fb      	str	r3, [r7, #28]
 8007f66:	e013      	b.n	8007f90 <ndefPayloadToRtdDeviceInfo+0x88>
    {
        rtdDevInfo->devInfo[i].type   = 0;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        rtdDevInfo->devInfo[i].length = 0;
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	4413      	add	r3, r2
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	705a      	strb	r2, [r3, #1]
        rtdDevInfo->devInfo[i].buffer = NULL;
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	4413      	add	r3, r2
 8007f86:	2200      	movs	r2, #0
 8007f88:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	61fb      	str	r3, [r7, #28]
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	d9e8      	bls.n	8007f68 <ndefPayloadToRtdDeviceInfo+0x60>
    }

    /* Read Type, Length and Value fields */
    /* Not checking multiple occurences of a given field, use the last one */
    offset = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	61bb      	str	r3, [r7, #24]
    count = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	75fb      	strb	r3, [r7, #23]
    manufacturerNameIndex = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	75bb      	strb	r3, [r7, #22]
    modelNameIndex = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	757b      	strb	r3, [r7, #21]

    while ( ((offset + NDEF_RTD_DEVICE_INFO_TLV_LENGTH_MIN) < bufDevInfo->length)
 8007fa6:	e044      	b.n	8008032 <ndefPayloadToRtdDeviceInfo+0x12a>
            && (count < NDEF_DEVICE_INFO_TYPE_COUNT) )
    {
        uint8_t type   =  bufDevInfo->buffer[offset];
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	4413      	add	r3, r2
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	73fb      	strb	r3, [r7, #15]
        uint8_t length =  bufDevInfo->buffer[offset + 1U];
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	4413      	add	r3, r2
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	73bb      	strb	r3, [r7, #14]
        if ((type == NDEF_DEVICE_INFO_UUID) && (length != NDEF_UUID_LENGTH))
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d104      	bne.n	8007fd2 <ndefPayloadToRtdDeviceInfo+0xca>
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	2b10      	cmp	r3, #16
 8007fcc:	d001      	beq.n	8007fd2 <ndefPayloadToRtdDeviceInfo+0xca>
        {
            return ERR_PROTO;
 8007fce:	230b      	movs	r3, #11
 8007fd0:	e04d      	b.n	800806e <ndefPayloadToRtdDeviceInfo+0x166>
        }
        if ( (type > NDEF_DEVICE_INFO_TYPE_COUNT) || (length == 0U) )
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	2b05      	cmp	r3, #5
 8007fd6:	d802      	bhi.n	8007fde <ndefPayloadToRtdDeviceInfo+0xd6>
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <ndefPayloadToRtdDeviceInfo+0xda>
        {
            return ERR_PROTO;
 8007fde:	230b      	movs	r3, #11
 8007fe0:	e045      	b.n	800806e <ndefPayloadToRtdDeviceInfo+0x166>
        }
        if (type == NDEF_DEVICE_INFO_MANUFACTURER_NAME)
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d102      	bne.n	8007fee <ndefPayloadToRtdDeviceInfo+0xe6>
        {
            manufacturerNameIndex = count;
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	75bb      	strb	r3, [r7, #22]
 8007fec:	e004      	b.n	8007ff8 <ndefPayloadToRtdDeviceInfo+0xf0>
        }
        else
        {
            if (type == NDEF_DEVICE_INFO_MODEL_NAME)
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d101      	bne.n	8007ff8 <ndefPayloadToRtdDeviceInfo+0xf0>
            {
                modelNameIndex = count;
 8007ff4:	7dfb      	ldrb	r3, [r7, #23]
 8007ff6:	757b      	strb	r3, [r7, #21]
            }
        }

        rtdDevInfo->devInfo[count].type   = type;
 8007ff8:	7dfa      	ldrb	r2, [r7, #23]
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	7bf9      	ldrb	r1, [r7, #15]
 8007ffe:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        rtdDevInfo->devInfo[count].length = length;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	4413      	add	r3, r2
 800800a:	7bba      	ldrb	r2, [r7, #14]
 800800c:	705a      	strb	r2, [r3, #1]
        rtdDevInfo->devInfo[count].buffer = &bufDevInfo->buffer[offset + 2U];
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6819      	ldr	r1, [r3, #0]
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	1c9a      	adds	r2, r3, #2
 8008016:	7dfb      	ldrb	r3, [r7, #23]
 8008018:	440a      	add	r2, r1
 800801a:	6939      	ldr	r1, [r7, #16]
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	440b      	add	r3, r1
 8008020:	605a      	str	r2, [r3, #4]
        count++;
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	3301      	adds	r3, #1
 8008026:	75fb      	strb	r3, [r7, #23]

        /* Next entry */
        offset += sizeof(uint8_t) + sizeof(uint8_t) + (uint32_t)length;
 8008028:	7bba      	ldrb	r2, [r7, #14]
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	4413      	add	r3, r2
 800802e:	3302      	adds	r3, #2
 8008030:	61bb      	str	r3, [r7, #24]
    while ( ((offset + NDEF_RTD_DEVICE_INFO_TLV_LENGTH_MIN) < bufDevInfo->length)
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	1c9a      	adds	r2, r3, #2
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	429a      	cmp	r2, r3
 800803c:	d202      	bcs.n	8008044 <ndefPayloadToRtdDeviceInfo+0x13c>
            && (count < NDEF_DEVICE_INFO_TYPE_COUNT) )
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	2b04      	cmp	r3, #4
 8008042:	d9b1      	bls.n	8007fa8 <ndefPayloadToRtdDeviceInfo+0xa0>
    }

    /* Check both required fields are there */
    if ( (manufacturerNameIndex != modelNameIndex) &&
 8008044:	7dba      	ldrb	r2, [r7, #22]
 8008046:	7d7b      	ldrb	r3, [r7, #21]
 8008048:	429a      	cmp	r2, r3
 800804a:	d00f      	beq.n	800806c <ndefPayloadToRtdDeviceInfo+0x164>
         (rtdDevInfo->devInfo[manufacturerNameIndex].buffer != NULL) &&
 800804c:	7dbb      	ldrb	r3, [r7, #22]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	00db      	lsls	r3, r3, #3
 8008052:	4413      	add	r3, r2
 8008054:	685b      	ldr	r3, [r3, #4]
    if ( (manufacturerNameIndex != modelNameIndex) &&
 8008056:	2b00      	cmp	r3, #0
 8008058:	d008      	beq.n	800806c <ndefPayloadToRtdDeviceInfo+0x164>
         (rtdDevInfo->devInfo[modelNameIndex].buffer        != NULL) )
 800805a:	7d7b      	ldrb	r3, [r7, #21]
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	4413      	add	r3, r2
 8008062:	685b      	ldr	r3, [r3, #4]
         (rtdDevInfo->devInfo[manufacturerNameIndex].buffer != NULL) &&
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <ndefPayloadToRtdDeviceInfo+0x164>
    {
        return ERR_NONE;
 8008068:	2300      	movs	r3, #0
 800806a:	e000      	b.n	800806e <ndefPayloadToRtdDeviceInfo+0x166>
    }
    else
    {
        return ERR_PARAM;
 800806c:	2307      	movs	r3, #7
    }
}
 800806e:	4618      	mov	r0, r3
 8008070:	3724      	adds	r7, #36	; 0x24
 8008072:	46bd      	mov	sp, r7
 8008074:	bc80      	pop	{r7}
 8008076:	4770      	bx	lr
 8008078:	08007d23 	.word	0x08007d23
 800807c:	08007d89 	.word	0x08007d89

08008080 <ndefRecordToRtdDeviceInfo>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdDeviceInfo(const ndefRecord* record, ndefType* devInfo)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (devInfo == NULL) )
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <ndefRecordToRtdDeviceInfo+0x16>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <ndefRecordToRtdDeviceInfo+0x1a>
    {
        return ERR_PARAM;
 8008096:	2307      	movs	r3, #7
 8008098:	e028      	b.n	80080ec <ndefRecordToRtdDeviceInfo+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeDeviceInfo)) /* "Di" */
 800809a:	4a16      	ldr	r2, [pc, #88]	; (80080f4 <ndefRecordToRtdDeviceInfo+0x74>)
 800809c:	2101      	movs	r1, #1
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fe f986 	bl	80063b0 <ndefRecordTypeMatch>
 80080a4:	4603      	mov	r3, r0
 80080a6:	f083 0301 	eor.w	r3, r3, #1
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <ndefRecordToRtdDeviceInfo+0x34>
    {
        return ERR_PROTO;
 80080b0:	230b      	movs	r3, #11
 80080b2:	e01b      	b.n	80080ec <ndefRecordToRtdDeviceInfo+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7ff f887 	bl	80071c8 <ndefRecordGetNdefType>
 80080ba:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d007      	beq.n	80080d2 <ndefRecordToRtdDeviceInfo+0x52>
    {
        (void)ST_MEMCPY(devInfo, ndeftype, sizeof(ndefType));
 80080c2:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80080c6:	68f9      	ldr	r1, [r7, #12]
 80080c8:	6838      	ldr	r0, [r7, #0]
 80080ca:	f010 fe21 	bl	8018d10 <memcpy>
        return ERR_NONE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	e00c      	b.n	80080ec <ndefRecordToRtdDeviceInfo+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) /* Device Information Payload Min */
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	2b05      	cmp	r3, #5
 80080d8:	d801      	bhi.n	80080de <ndefRecordToRtdDeviceInfo+0x5e>
    {
        return ERR_PROTO;
 80080da:	230b      	movs	r3, #11
 80080dc:	e006      	b.n	80080ec <ndefRecordToRtdDeviceInfo+0x6c>
    }

    return ndefPayloadToRtdDeviceInfo(&record->bufPayload, devInfo);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	330c      	adds	r3, #12
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7ff ff0f 	bl	8007f08 <ndefPayloadToRtdDeviceInfo>
 80080ea:	4603      	mov	r3, r0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	0801aac8 	.word	0x0801aac8

080080f8 <ndefRtdDeviceInfoToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdDeviceInfoToRecord(const ndefType* devInfo, ndefRecord* record)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d006      	beq.n	8008116 <ndefRtdDeviceInfoToRecord+0x1e>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d102      	bne.n	8008116 <ndefRtdDeviceInfoToRecord+0x1e>
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <ndefRtdDeviceInfoToRecord+0x22>
         (record  == NULL) )
    {
        return ERR_PARAM;
 8008116:	2307      	movs	r3, #7
 8008118:	e00c      	b.n	8008134 <ndefRtdDeviceInfoToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800811a:	6838      	ldr	r0, [r7, #0]
 800811c:	f7fe f872 	bl	8006204 <ndefRecordReset>

    /* "Di" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeDeviceInfo);
 8008120:	4a06      	ldr	r2, [pc, #24]	; (800813c <ndefRtdDeviceInfoToRecord+0x44>)
 8008122:	2101      	movs	r1, #1
 8008124:	6838      	ldr	r0, [r7, #0]
 8008126:	f7fe f8ee 	bl	8006306 <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, devInfo);
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	6838      	ldr	r0, [r7, #0]
 800812e:	f7ff f813 	bl	8007158 <ndefRecordSetNdefType>

    return ERR_NONE;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	0801aac8 	.word	0x0801aac8

08008140 <ndefRtdTextPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdTextPayloadGetLength(const ndefType* text)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdText* rtdText;

    if ( (text == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <ndefRtdTextPayloadGetLength+0x16>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	2b02      	cmp	r3, #2
 8008154:	d001      	beq.n	800815a <ndefRtdTextPayloadGetLength+0x1a>
    {
        return 0;
 8008156:	2300      	movs	r3, #0
 8008158:	e009      	b.n	800816e <ndefRtdTextPayloadGetLength+0x2e>
    }

    rtdText = &text->data.text;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	330c      	adds	r3, #12
 800815e:	60fb      	str	r3, [r7, #12]

    return sizeof(rtdText->status) + rtdText->bufLanguageCode.length + rtdText->bufSentence.length;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	7a1b      	ldrb	r3, [r3, #8]
 8008164:	461a      	mov	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	4413      	add	r3, r2
 800816c:	3301      	adds	r3, #1
}
 800816e:	4618      	mov	r0, r3
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	bc80      	pop	{r7}
 8008176:	4770      	bx	lr

08008178 <ndefRtdTextToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdTextToPayloadItem(const ndefType* text, ndefConstBuffer* bufItem, bool begin)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	4613      	mov	r3, r2
 8008184:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdText* rtdText;

    if ( (text    == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d006      	beq.n	800819a <ndefRtdTextToPayloadItem+0x22>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d102      	bne.n	800819a <ndefRtdTextToPayloadItem+0x22>
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <ndefRtdTextToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 800819a:	2300      	movs	r3, #0
 800819c:	e03b      	b.n	8008216 <ndefRtdTextToPayloadItem+0x9e>
    }

    rtdText = &text->data.text;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	330c      	adds	r3, #12
 80081a2:	617b      	str	r3, [r7, #20]

    if (begin == true)
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <ndefRtdTextToPayloadItem+0x38>
    {
        item = 0;
 80081aa:	4b1d      	ldr	r3, [pc, #116]	; (8008220 <ndefRtdTextToPayloadItem+0xa8>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	601a      	str	r2, [r3, #0]
    }

    switch (item)
 80081b0:	4b1b      	ldr	r3, [pc, #108]	; (8008220 <ndefRtdTextToPayloadItem+0xa8>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d017      	beq.n	80081e8 <ndefRtdTextToPayloadItem+0x70>
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d81e      	bhi.n	80081fa <ndefRtdTextToPayloadItem+0x82>
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <ndefRtdTextToPayloadItem+0x4e>
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d007      	beq.n	80081d4 <ndefRtdTextToPayloadItem+0x5c>
 80081c4:	e019      	b.n	80081fa <ndefRtdTextToPayloadItem+0x82>
    {
    case 0:
        /* Status byte */
        bufItem->buffer = &rtdText->status;
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(rtdText->status);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2201      	movs	r2, #1
 80081d0:	605a      	str	r2, [r3, #4]
        break;
 80081d2:	e019      	b.n	8008208 <ndefRtdTextToPayloadItem+0x90>

    case 1:
        /* Language Code */
        bufItem->buffer = rtdText->bufLanguageCode.buffer;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdText->bufLanguageCode.length;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	7a1b      	ldrb	r3, [r3, #8]
 80081e0:	461a      	mov	r2, r3
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	605a      	str	r2, [r3, #4]
        break;
 80081e6:	e00f      	b.n	8008208 <ndefRtdTextToPayloadItem+0x90>

    case 2:
        /* Actual text */
        bufItem->buffer = rtdText->bufSentence.buffer;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	68da      	ldr	r2, [r3, #12]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdText->bufSentence.length;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	691a      	ldr	r2, [r3, #16]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	605a      	str	r2, [r3, #4]
        break;
 80081f8:	e006      	b.n	8008208 <ndefRtdTextToPayloadItem+0x90>

    default:
        bufItem->buffer = NULL;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2200      	movs	r2, #0
 80081fe:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2200      	movs	r2, #0
 8008204:	605a      	str	r2, [r3, #4]
        break;
 8008206:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 8008208:	4b05      	ldr	r3, [pc, #20]	; (8008220 <ndefRtdTextToPayloadItem+0xa8>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3301      	adds	r3, #1
 800820e:	4a04      	ldr	r2, [pc, #16]	; (8008220 <ndefRtdTextToPayloadItem+0xa8>)
 8008210:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	681b      	ldr	r3, [r3, #0]
}
 8008216:	4618      	mov	r0, r3
 8008218:	371c      	adds	r7, #28
 800821a:	46bd      	mov	sp, r7
 800821c:	bc80      	pop	{r7}
 800821e:	4770      	bx	lr
 8008220:	200031cc 	.word	0x200031cc

08008224 <ndefRtdText>:


/*****************************************************************************/
ReturnCode ndefRtdText(ndefType* text, uint8_t utfEncoding, const ndefConstBuffer8* bufLanguageCode, const ndefConstBuffer* bufSentence)
{
 8008224:	b480      	push	{r7}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	607a      	str	r2, [r7, #4]
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	460b      	mov	r3, r1
 8008232:	72fb      	strb	r3, [r7, #11]
    ndefTypeRtdText* rtdText;

    if ( (text            == NULL) ||
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d015      	beq.n	8008266 <ndefRtdText+0x42>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d012      	beq.n	8008266 <ndefRtdText+0x42>
         (bufLanguageCode == NULL) || (bufLanguageCode->buffer == NULL) || (bufLanguageCode->length == 0U) ||
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00e      	beq.n	8008266 <ndefRtdText+0x42>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	791b      	ldrb	r3, [r3, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00a      	beq.n	8008266 <ndefRtdText+0x42>
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d007      	beq.n	8008266 <ndefRtdText+0x42>
         (bufSentence     == NULL) || (bufSentence->buffer     == NULL) || (bufSentence->length     == 0U) )
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <ndefRtdText+0x42>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <ndefRtdText+0x46>
    {
        return ERR_PARAM;
 8008266:	2307      	movs	r3, #7
 8008268:	e036      	b.n	80082d8 <ndefRtdText+0xb4>
    }

    if (bufLanguageCode->length > NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	791b      	ldrb	r3, [r3, #4]
 800826e:	2b3f      	cmp	r3, #63	; 0x3f
 8008270:	d901      	bls.n	8008276 <ndefRtdText+0x52>
    {
        return ERR_PROTO;
 8008272:	230b      	movs	r3, #11
 8008274:	e030      	b.n	80082d8 <ndefRtdText+0xb4>
    }

    if ( (utfEncoding != TEXT_ENCODING_UTF8) && (utfEncoding != TEXT_ENCODING_UTF16) )
 8008276:	7afb      	ldrb	r3, [r7, #11]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d004      	beq.n	8008286 <ndefRtdText+0x62>
 800827c:	7afb      	ldrb	r3, [r7, #11]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d001      	beq.n	8008286 <ndefRtdText+0x62>
    {
        return ERR_PARAM;
 8008282:	2307      	movs	r3, #7
 8008284:	e028      	b.n	80082d8 <ndefRtdText+0xb4>
    }

    text->id               = NDEF_TYPE_RTD_TEXT;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2202      	movs	r2, #2
 800828a:	701a      	strb	r2, [r3, #0]
    text->getPayloadLength = ndefRtdTextPayloadGetLength;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4a15      	ldr	r2, [pc, #84]	; (80082e4 <ndefRtdText+0xc0>)
 8008290:	605a      	str	r2, [r3, #4]
    text->getPayloadItem   = ndefRtdTextToPayloadItem;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4a14      	ldr	r2, [pc, #80]	; (80082e8 <ndefRtdText+0xc4>)
 8008296:	609a      	str	r2, [r3, #8]
    rtdText                = &text->data.text;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	330c      	adds	r3, #12
 800829c:	617b      	str	r3, [r7, #20]

    rtdText->status = (utfEncoding << NDEF_RTD_TEXT_ENCODING_SHIFT) | (bufLanguageCode->length & NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK);
 800829e:	7afb      	ldrb	r3, [r7, #11]
 80082a0:	01db      	lsls	r3, r3, #7
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	791b      	ldrb	r3, [r3, #4]
 80082a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	4313      	orrs	r3, r2
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	701a      	strb	r2, [r3, #0]

    rtdText->bufLanguageCode.buffer = bufLanguageCode->buffer;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	605a      	str	r2, [r3, #4]
    rtdText->bufLanguageCode.length = bufLanguageCode->length;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	791a      	ldrb	r2, [r3, #4]
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	721a      	strb	r2, [r3, #8]

    rtdText->bufSentence.buffer = bufSentence->buffer;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	60da      	str	r2, [r3, #12]
    rtdText->bufSentence.length = bufSentence->length;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	371c      	adds	r7, #28
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	08008141 	.word	0x08008141
 80082e8:	08008179 	.word	0x08008179

080082ec <ndefGetRtdText>:


/*****************************************************************************/
ReturnCode ndefGetRtdText(const ndefType* text, uint8_t* utfEncoding, ndefConstBuffer8* bufLanguageCode, ndefConstBuffer* bufSentence)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
 80082f8:	603b      	str	r3, [r7, #0]
    const ndefTypeRtdText* rtdText;

    if ( (text        == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00c      	beq.n	800831a <ndefGetRtdText+0x2e>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	2b02      	cmp	r3, #2
 8008306:	d108      	bne.n	800831a <ndefGetRtdText+0x2e>
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d005      	beq.n	800831a <ndefGetRtdText+0x2e>
         (utfEncoding == NULL) || (bufLanguageCode == NULL) || (bufSentence == NULL) )
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <ndefGetRtdText+0x2e>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <ndefGetRtdText+0x32>
    {
        return ERR_PARAM;
 800831a:	2307      	movs	r3, #7
 800831c:	e019      	b.n	8008352 <ndefGetRtdText+0x66>
    }

    rtdText = &text->data.text;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	330c      	adds	r3, #12
 8008322:	617b      	str	r3, [r7, #20]

    *utfEncoding            = (rtdText->status >> NDEF_RTD_TEXT_ENCODING_SHIFT) & 1U;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	09db      	lsrs	r3, r3, #7
 800832a:	b2da      	uxtb	r2, r3
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	701a      	strb	r2, [r3, #0]

    bufLanguageCode->buffer = rtdText->bufLanguageCode.buffer;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	601a      	str	r2, [r3, #0]
    bufLanguageCode->length = rtdText->bufLanguageCode.length;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	7a1a      	ldrb	r2, [r3, #8]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	711a      	strb	r2, [r3, #4]

    bufSentence->buffer     = rtdText->bufSentence.buffer;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	68da      	ldr	r2, [r3, #12]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	601a      	str	r2, [r3, #0]
    bufSentence->length     = rtdText->bufSentence.length;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	691a      	ldr	r2, [r3, #16]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	371c      	adds	r7, #28
 8008356:	46bd      	mov	sp, r7
 8008358:	bc80      	pop	{r7}
 800835a:	4770      	bx	lr

0800835c <ndefPayloadToRtdText>:


/*****************************************************************************/
static ReturnCode ndefPayloadToRtdText(const ndefConstBuffer* bufText, ndefType* text)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
    ndefTypeRtdText* rtdText;
    uint8_t status;
    uint8_t languageCodeLength;

    if ( (bufText == NULL) || (bufText->buffer == NULL) || (bufText->length == 0U) ||
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00a      	beq.n	8008382 <ndefPayloadToRtdText+0x26>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d006      	beq.n	8008382 <ndefPayloadToRtdText+0x26>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <ndefPayloadToRtdText+0x26>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <ndefPayloadToRtdText+0x2a>
         (text    == NULL) )
    {
        return ERR_PARAM;
 8008382:	2307      	movs	r3, #7
 8008384:	e02d      	b.n	80083e2 <ndefPayloadToRtdText+0x86>
    }

    text->id               = NDEF_TYPE_RTD_TEXT;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2202      	movs	r2, #2
 800838a:	701a      	strb	r2, [r3, #0]
    text->getPayloadLength = ndefRtdTextPayloadGetLength;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	4a17      	ldr	r2, [pc, #92]	; (80083ec <ndefPayloadToRtdText+0x90>)
 8008390:	605a      	str	r2, [r3, #4]
    text->getPayloadItem   = ndefRtdTextToPayloadItem;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	4a16      	ldr	r2, [pc, #88]	; (80083f0 <ndefPayloadToRtdText+0x94>)
 8008396:	609a      	str	r2, [r3, #8]
    rtdText                = &text->data.text;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	330c      	adds	r3, #12
 800839c:	60fb      	str	r3, [r7, #12]

    /* Extract info from the payload */
    status = bufText->buffer[NDEF_RTD_TEXT_STATUS_OFFSET];
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	72fb      	strb	r3, [r7, #11]

    rtdText->status = status;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	7afa      	ldrb	r2, [r7, #11]
 80083aa:	701a      	strb	r2, [r3, #0]

    /* Extract info from the status byte */
    //uint8_t textUtfEncoding          = (status & NDEF_RTD_TEXT_ENCODING_MASK) >> NDEF_RTD_TEXT_ENCODING_SHIFT;
    languageCodeLength = (status & NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK);
 80083ac:	7afb      	ldrb	r3, [r7, #11]
 80083ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083b2:	72bb      	strb	r3, [r7, #10]

    rtdText->bufLanguageCode.buffer = &(bufText->buffer[NDEF_RTD_TEXT_LANGUAGE_OFFSET]);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	605a      	str	r2, [r3, #4]
    rtdText->bufLanguageCode.length = languageCodeLength;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	7aba      	ldrb	r2, [r7, #10]
 80083c2:	721a      	strb	r2, [r3, #8]

    rtdText->bufSentence.buffer = &(bufText->buffer[NDEF_RTD_TEXT_LANGUAGE_OFFSET + languageCodeLength]);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	7abb      	ldrb	r3, [r7, #10]
 80083ca:	3301      	adds	r3, #1
 80083cc:	441a      	add	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	60da      	str	r2, [r3, #12]
    rtdText->bufSentence.length = bufText->length - sizeof(status) - languageCodeLength;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	7abb      	ldrb	r3, [r7, #10]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	1e5a      	subs	r2, r3, #1
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bc80      	pop	{r7}
 80083ea:	4770      	bx	lr
 80083ec:	08008141 	.word	0x08008141
 80083f0:	08008179 	.word	0x08008179

080083f4 <ndefRecordToRtdText>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdText(const ndefRecord* record, ndefType* text)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (text == NULL) )
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <ndefRecordToRtdText+0x16>
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <ndefRecordToRtdText+0x1a>
    {
        return ERR_PARAM;
 800840a:	2307      	movs	r3, #7
 800840c:	e028      	b.n	8008460 <ndefRecordToRtdText+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeText)) /* "T" */
 800840e:	4a16      	ldr	r2, [pc, #88]	; (8008468 <ndefRecordToRtdText+0x74>)
 8008410:	2101      	movs	r1, #1
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7fd ffcc 	bl	80063b0 <ndefRecordTypeMatch>
 8008418:	4603      	mov	r3, r0
 800841a:	f083 0301 	eor.w	r3, r3, #1
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <ndefRecordToRtdText+0x34>
    {
        return ERR_PROTO;
 8008424:	230b      	movs	r3, #11
 8008426:	e01b      	b.n	8008460 <ndefRecordToRtdText+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7fe fecd 	bl	80071c8 <ndefRecordGetNdefType>
 800842e:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d007      	beq.n	8008446 <ndefRecordToRtdText+0x52>
    {
        (void)ST_MEMCPY(text, ndeftype, sizeof(ndefType));
 8008436:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800843a:	68f9      	ldr	r1, [r7, #12]
 800843c:	6838      	ldr	r0, [r7, #0]
 800843e:	f010 fc67 	bl	8018d10 <memcpy>
        return ERR_NONE;
 8008442:	2300      	movs	r3, #0
 8008444:	e00c      	b.n	8008460 <ndefRecordToRtdText+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_TEXT_PAYLOAD_LENGTH_MIN) /* Text Payload Min */
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d801      	bhi.n	8008452 <ndefRecordToRtdText+0x5e>
    {
        return ERR_PROTO;
 800844e:	230b      	movs	r3, #11
 8008450:	e006      	b.n	8008460 <ndefRecordToRtdText+0x6c>
    }

    return ndefPayloadToRtdText(&record->bufPayload, text);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	330c      	adds	r3, #12
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff ff7f 	bl	800835c <ndefPayloadToRtdText>
 800845e:	4603      	mov	r3, r0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	0801aad0 	.word	0x0801aad0

0800846c <ndefRtdTextToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdTextToRecord(const ndefType* text, ndefRecord* record)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
    if ( (text   == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d006      	beq.n	800848a <ndefRtdTextToRecord+0x1e>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2b02      	cmp	r3, #2
 8008482:	d102      	bne.n	800848a <ndefRtdTextToRecord+0x1e>
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <ndefRtdTextToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800848a:	2307      	movs	r3, #7
 800848c:	e00c      	b.n	80084a8 <ndefRtdTextToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800848e:	6838      	ldr	r0, [r7, #0]
 8008490:	f7fd feb8 	bl	8006204 <ndefRecordReset>

    /* "T" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeText);
 8008494:	4a06      	ldr	r2, [pc, #24]	; (80084b0 <ndefRtdTextToRecord+0x44>)
 8008496:	2101      	movs	r1, #1
 8008498:	6838      	ldr	r0, [r7, #0]
 800849a:	f7fd ff34 	bl	8006306 <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, text);
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	6838      	ldr	r0, [r7, #0]
 80084a2:	f7fe fe59 	bl	8007158 <ndefRecordSetNdefType>

    return ERR_NONE;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	0801aad0 	.word	0x0801aad0

080084b4 <ndefRtdUriPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdUriPayloadGetLength(const ndefType* uri)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdUri* rtdUri;

    if ( (uri == NULL) || (uri->id != NDEF_TYPE_RTD_URI) )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <ndefRtdUriPayloadGetLength+0x16>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d001      	beq.n	80084ce <ndefRtdUriPayloadGetLength+0x1a>
    {
        return 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	e005      	b.n	80084da <ndefRtdUriPayloadGetLength+0x26>
    }

    rtdUri = &uri->data.uri;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	330c      	adds	r3, #12
 80084d2:	60fb      	str	r3, [r7, #12]

    return sizeof(rtdUri->protocol) + rtdUri->bufUriString.length;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	3301      	adds	r3, #1
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr

080084e4 <ndefRtdUriToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdUriToPayloadItem(const ndefType* uri, ndefConstBuffer* bufItem, bool begin)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4613      	mov	r3, r2
 80084f0:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdUri* rtdUri;

    if ( (uri     == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d006      	beq.n	8008506 <ndefRtdUriToPayloadItem+0x22>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d102      	bne.n	8008506 <ndefRtdUriToPayloadItem+0x22>
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <ndefRtdUriToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 8008506:	2300      	movs	r3, #0
 8008508:	e02d      	b.n	8008566 <ndefRtdUriToPayloadItem+0x82>
    }

    rtdUri = &uri->data.uri;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	330c      	adds	r3, #12
 800850e:	617b      	str	r3, [r7, #20]

    if (begin == true)
 8008510:	79fb      	ldrb	r3, [r7, #7]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <ndefRtdUriToPayloadItem+0x38>
    {
        item = 0;
 8008516:	4b16      	ldr	r3, [pc, #88]	; (8008570 <ndefRtdUriToPayloadItem+0x8c>)
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]
    }

    switch (item)
 800851c:	4b14      	ldr	r3, [pc, #80]	; (8008570 <ndefRtdUriToPayloadItem+0x8c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <ndefRtdUriToPayloadItem+0x46>
 8008524:	2b01      	cmp	r3, #1
 8008526:	d007      	beq.n	8008538 <ndefRtdUriToPayloadItem+0x54>
 8008528:	e00f      	b.n	800854a <ndefRtdUriToPayloadItem+0x66>
    {
    case 0:
        /* Protocol byte */
        bufItem->buffer = &rtdUri->protocol;
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(rtdUri->protocol);
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	2201      	movs	r2, #1
 8008534:	605a      	str	r2, [r3, #4]
        break;
 8008536:	e00f      	b.n	8008558 <ndefRtdUriToPayloadItem+0x74>

    case 1:
        /* URI string */
        bufItem->buffer = rtdUri->bufUriString.buffer;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdUri->bufUriString.length;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	605a      	str	r2, [r3, #4]
        break;
 8008548:	e006      	b.n	8008558 <ndefRtdUriToPayloadItem+0x74>

    default:
        bufItem->buffer = NULL;
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2200      	movs	r2, #0
 800854e:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2200      	movs	r2, #0
 8008554:	605a      	str	r2, [r3, #4]
        break;
 8008556:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 8008558:	4b05      	ldr	r3, [pc, #20]	; (8008570 <ndefRtdUriToPayloadItem+0x8c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3301      	adds	r3, #1
 800855e:	4a04      	ldr	r2, [pc, #16]	; (8008570 <ndefRtdUriToPayloadItem+0x8c>)
 8008560:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	681b      	ldr	r3, [r3, #0]
}
 8008566:	4618      	mov	r0, r3
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	bc80      	pop	{r7}
 800856e:	4770      	bx	lr
 8008570:	200031d0 	.word	0x200031d0

08008574 <ndefRtdUriProtocolAutodetect>:


/*****************************************************************************/
static ReturnCode ndefRtdUriProtocolAutodetect(uint8_t* protocol, ndefConstBuffer* bufUriString)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
    uint8_t i; /* Protocol fits in 1 byte */

    if ( (protocol  == NULL)                       ||
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d006      	beq.n	8008592 <ndefRtdUriProtocolAutodetect+0x1e>
         (*protocol != NDEF_URI_PREFIX_AUTODETECT) ||
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	781b      	ldrb	r3, [r3, #0]
    if ( (protocol  == NULL)                       ||
 8008588:	2b24      	cmp	r3, #36	; 0x24
 800858a:	d102      	bne.n	8008592 <ndefRtdUriProtocolAutodetect+0x1e>
         (*protocol != NDEF_URI_PREFIX_AUTODETECT) ||
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <ndefRtdUriProtocolAutodetect+0x22>
         (bufUriString == NULL) )
    {
        return ERR_PARAM;
 8008592:	2307      	movs	r3, #7
 8008594:	e03d      	b.n	8008612 <ndefRtdUriProtocolAutodetect+0x9e>
    }

    for (i = 0; i < NDEF_URI_PREFIX_COUNT; i++)
 8008596:	2300      	movs	r3, #0
 8008598:	73fb      	strb	r3, [r7, #15]
 800859a:	e033      	b.n	8008604 <ndefRtdUriProtocolAutodetect+0x90>
    {
        if (ndefUriPrefix[i].length > 0U)
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	4a1f      	ldr	r2, [pc, #124]	; (800861c <ndefRtdUriProtocolAutodetect+0xa8>)
 80085a0:	00db      	lsls	r3, r3, #3
 80085a2:	4413      	add	r3, r2
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d029      	beq.n	80085fe <ndefRtdUriProtocolAutodetect+0x8a>
        {
            if (ST_BYTECMP(bufUriString->buffer, ndefUriPrefix[i].buffer, ndefUriPrefix[i].length) == 0)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	7bfb      	ldrb	r3, [r7, #15]
 80085b0:	4a1a      	ldr	r2, [pc, #104]	; (800861c <ndefRtdUriProtocolAutodetect+0xa8>)
 80085b2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	4a18      	ldr	r2, [pc, #96]	; (800861c <ndefRtdUriProtocolAutodetect+0xa8>)
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	4413      	add	r3, r2
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	461a      	mov	r2, r3
 80085c2:	f010 fb95 	bl	8018cf0 <memcmp>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d118      	bne.n	80085fe <ndefRtdUriProtocolAutodetect+0x8a>
            {
                *protocol = i;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	7bfa      	ldrb	r2, [r7, #15]
 80085d0:	701a      	strb	r2, [r3, #0]
                /* Move after the protocol string */
                bufUriString->buffer  = &bufUriString->buffer[ndefUriPrefix[i].length];
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	4910      	ldr	r1, [pc, #64]	; (800861c <ndefRtdUriProtocolAutodetect+0xa8>)
 80085da:	00db      	lsls	r3, r3, #3
 80085dc:	440b      	add	r3, r1
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	441a      	add	r2, r3
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	601a      	str	r2, [r3, #0]
                bufUriString->length -= ndefUriPrefix[i].length;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
 80085ec:	490b      	ldr	r1, [pc, #44]	; (800861c <ndefRtdUriProtocolAutodetect+0xa8>)
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	440b      	add	r3, r1
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	1ad2      	subs	r2, r2, r3
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	605a      	str	r2, [r3, #4]
                return ERR_NONE;
 80085fa:	2300      	movs	r3, #0
 80085fc:	e009      	b.n	8008612 <ndefRtdUriProtocolAutodetect+0x9e>
    for (i = 0; i < NDEF_URI_PREFIX_COUNT; i++)
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	3301      	adds	r3, #1
 8008602:	73fb      	strb	r3, [r7, #15]
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	2b24      	cmp	r3, #36	; 0x24
 8008608:	d9c8      	bls.n	800859c <ndefRtdUriProtocolAutodetect+0x28>
            }
        }
    }

    *protocol = NDEF_URI_PREFIX_NONE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	701a      	strb	r2, [r3, #0]

    return ERR_NOTFOUND;
 8008610:	2316      	movs	r3, #22
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	0801ac68 	.word	0x0801ac68

08008620 <ndefRtdUri>:


/*****************************************************************************/
ReturnCode ndefRtdUri(ndefType* uri, uint8_t protocol, const ndefConstBuffer* bufUriString)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	460b      	mov	r3, r1
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	72fb      	strb	r3, [r7, #11]
    ndefTypeRtdUri* rtdUri;
    ndefConstBuffer bufUri;
    uint8_t protocolDetect;

    if ( (uri == NULL) || (protocol >= NDEF_URI_PREFIX_COUNT) ||
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00d      	beq.n	8008650 <ndefRtdUri+0x30>
 8008634:	7afb      	ldrb	r3, [r7, #11]
 8008636:	2b24      	cmp	r3, #36	; 0x24
 8008638:	d80a      	bhi.n	8008650 <ndefRtdUri+0x30>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d007      	beq.n	8008650 <ndefRtdUri+0x30>
         (bufUriString == NULL) || (bufUriString->buffer == NULL) || (bufUriString->length == 0U) )
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <ndefRtdUri+0x30>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <ndefRtdUri+0x34>
    {
        return ERR_PARAM;
 8008650:	2307      	movs	r3, #7
 8008652:	e028      	b.n	80086a6 <ndefRtdUri+0x86>
    }

    uri->id               = NDEF_TYPE_RTD_URI;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2203      	movs	r2, #3
 8008658:	701a      	strb	r2, [r3, #0]
    uri->getPayloadLength = ndefRtdUriPayloadGetLength;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	4a14      	ldr	r2, [pc, #80]	; (80086b0 <ndefRtdUri+0x90>)
 800865e:	605a      	str	r2, [r3, #4]
    uri->getPayloadItem   = ndefRtdUriToPayloadItem;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4a14      	ldr	r2, [pc, #80]	; (80086b4 <ndefRtdUri+0x94>)
 8008664:	609a      	str	r2, [r3, #8]
    rtdUri                = &uri->data.uri;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	330c      	adds	r3, #12
 800866a:	61fb      	str	r3, [r7, #28]

    bufUri.buffer = bufUriString->buffer;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	617b      	str	r3, [r7, #20]
    bufUri.length = bufUriString->length;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	61bb      	str	r3, [r7, #24]
    protocolDetect = protocol;
 8008678:	7afb      	ldrb	r3, [r7, #11]
 800867a:	74fb      	strb	r3, [r7, #19]
    if (protocol == NDEF_URI_PREFIX_AUTODETECT)
 800867c:	7afb      	ldrb	r3, [r7, #11]
 800867e:	2b24      	cmp	r3, #36	; 0x24
 8008680:	d107      	bne.n	8008692 <ndefRtdUri+0x72>
    {
        /* Update protocol and URI buffer */
        (void)ndefRtdUriProtocolAutodetect(&protocolDetect, &bufUri);
 8008682:	f107 0214 	add.w	r2, r7, #20
 8008686:	f107 0313 	add.w	r3, r7, #19
 800868a:	4611      	mov	r1, r2
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff ff71 	bl	8008574 <ndefRtdUriProtocolAutodetect>
    }
    rtdUri->protocol = protocolDetect;
 8008692:	7cfa      	ldrb	r2, [r7, #19]
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	701a      	strb	r2, [r3, #0]

    rtdUri->bufUriString.buffer = bufUri.buffer;
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	605a      	str	r2, [r3, #4]
    rtdUri->bufUriString.length = bufUri.length;
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3720      	adds	r7, #32
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	080084b5 	.word	0x080084b5
 80086b4:	080084e5 	.word	0x080084e5

080086b8 <ndefGetRtdUri>:


/*****************************************************************************/
ReturnCode ndefGetRtdUri(const ndefType* uri, ndefConstBuffer* bufProtocol, ndefConstBuffer* bufUriString)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
    const ndefTypeRtdUri* rtdUri;

    if ( (uri         == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <ndefGetRtdUri+0x26>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d105      	bne.n	80086de <ndefGetRtdUri+0x26>
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <ndefGetRtdUri+0x26>
         (bufProtocol == NULL) || (bufUriString == NULL) )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <ndefGetRtdUri+0x2a>
    {
        return ERR_PARAM;
 80086de:	2307      	movs	r3, #7
 80086e0:	e01b      	b.n	800871a <ndefGetRtdUri+0x62>
    }

    rtdUri = &uri->data.uri;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	330c      	adds	r3, #12
 80086e6:	617b      	str	r3, [r7, #20]

    bufProtocol->buffer   = ndefUriPrefix[rtdUri->protocol].buffer;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	461a      	mov	r2, r3
 80086ee:	4b0d      	ldr	r3, [pc, #52]	; (8008724 <ndefGetRtdUri+0x6c>)
 80086f0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	601a      	str	r2, [r3, #0]
    bufProtocol->length   = ndefUriPrefix[rtdUri->protocol].length;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	4a09      	ldr	r2, [pc, #36]	; (8008724 <ndefGetRtdUri+0x6c>)
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	4413      	add	r3, r2
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	605a      	str	r2, [r3, #4]

    bufUriString->buffer = rtdUri->bufUriString.buffer;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	601a      	str	r2, [r3, #0]
    bufUriString->length = rtdUri->bufUriString.length;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	371c      	adds	r7, #28
 800871e:	46bd      	mov	sp, r7
 8008720:	bc80      	pop	{r7}
 8008722:	4770      	bx	lr
 8008724:	0801ac68 	.word	0x0801ac68

08008728 <ndefPayloadToRtdUri>:

/*****************************************************************************/
static ReturnCode ndefPayloadToRtdUri(const ndefConstBuffer* bufUri, ndefType* uri)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
    uint8_t protocol;

    if ( (bufUri == NULL) || (bufUri->buffer == NULL) || (bufUri->length == 0U) ||
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00a      	beq.n	800874e <ndefPayloadToRtdUri+0x26>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d006      	beq.n	800874e <ndefPayloadToRtdUri+0x26>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <ndefPayloadToRtdUri+0x26>
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <ndefPayloadToRtdUri+0x2a>
         (uri    == NULL) )
    {
        return ERR_PARAM;
 800874e:	2307      	movs	r3, #7
 8008750:	e013      	b.n	800877a <ndefPayloadToRtdUri+0x52>
    }

    /* Extract info from the payload */
    protocol = bufUri->buffer[NDEF_RTD_URI_ID_CODE_OFFSET];
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	75fb      	strb	r3, [r7, #23]

    ndefConstBuffer bufStringUri;
    bufStringUri.buffer = &bufUri->buffer[NDEF_RTD_URI_FIELD_OFFSET];
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3301      	adds	r3, #1
 8008760:	60fb      	str	r3, [r7, #12]
    bufStringUri.length =  bufUri->length - sizeof(protocol);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	3b01      	subs	r3, #1
 8008768:	613b      	str	r3, [r7, #16]

    return ndefRtdUri(uri, protocol, &bufStringUri);
 800876a:	f107 020c 	add.w	r2, r7, #12
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	4619      	mov	r1, r3
 8008772:	6838      	ldr	r0, [r7, #0]
 8008774:	f7ff ff54 	bl	8008620 <ndefRtdUri>
 8008778:	4603      	mov	r3, r0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3718      	adds	r7, #24
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
	...

08008784 <ndefRecordToRtdUri>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdUri(const ndefRecord* record, ndefType* uri)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (uri == NULL) )
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <ndefRecordToRtdUri+0x16>
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <ndefRecordToRtdUri+0x1a>
    {
        return ERR_PARAM;
 800879a:	2307      	movs	r3, #7
 800879c:	e028      	b.n	80087f0 <ndefRecordToRtdUri+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeUri)) /* "U" */
 800879e:	4a16      	ldr	r2, [pc, #88]	; (80087f8 <ndefRecordToRtdUri+0x74>)
 80087a0:	2101      	movs	r1, #1
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7fd fe04 	bl	80063b0 <ndefRecordTypeMatch>
 80087a8:	4603      	mov	r3, r0
 80087aa:	f083 0301 	eor.w	r3, r3, #1
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <ndefRecordToRtdUri+0x34>
    {
        return ERR_PROTO;
 80087b4:	230b      	movs	r3, #11
 80087b6:	e01b      	b.n	80087f0 <ndefRecordToRtdUri+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7fe fd05 	bl	80071c8 <ndefRecordGetNdefType>
 80087be:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d007      	beq.n	80087d6 <ndefRecordToRtdUri+0x52>
    {
        (void)ST_MEMCPY(uri, ndeftype, sizeof(ndefType));
 80087c6:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80087ca:	68f9      	ldr	r1, [r7, #12]
 80087cc:	6838      	ldr	r0, [r7, #0]
 80087ce:	f010 fa9f 	bl	8018d10 <memcpy>
        return ERR_NONE;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e00c      	b.n	80087f0 <ndefRecordToRtdUri+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_URI_PAYLOAD_LENGTH_MIN)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d801      	bhi.n	80087e2 <ndefRecordToRtdUri+0x5e>
    {
        return ERR_PROTO;
 80087de:	230b      	movs	r3, #11
 80087e0:	e006      	b.n	80087f0 <ndefRecordToRtdUri+0x6c>
    }

    return ndefPayloadToRtdUri(&record->bufPayload, uri);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	330c      	adds	r3, #12
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7ff ff9d 	bl	8008728 <ndefPayloadToRtdUri>
 80087ee:	4603      	mov	r3, r0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	0801aad8 	.word	0x0801aad8

080087fc <ndefRtdUriToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdUriToRecord(const ndefType* uri, ndefRecord* record)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
    if ( (uri    == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d006      	beq.n	800881a <ndefRtdUriToRecord+0x1e>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2b03      	cmp	r3, #3
 8008812:	d102      	bne.n	800881a <ndefRtdUriToRecord+0x1e>
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <ndefRtdUriToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800881a:	2307      	movs	r3, #7
 800881c:	e00c      	b.n	8008838 <ndefRtdUriToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800881e:	6838      	ldr	r0, [r7, #0]
 8008820:	f7fd fcf0 	bl	8006204 <ndefRecordReset>

    /* "U" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeUri);
 8008824:	4a06      	ldr	r2, [pc, #24]	; (8008840 <ndefRtdUriToRecord+0x44>)
 8008826:	2101      	movs	r1, #1
 8008828:	6838      	ldr	r0, [r7, #0]
 800882a:	f7fd fd6c 	bl	8006306 <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, uri);
 800882e:	6879      	ldr	r1, [r7, #4]
 8008830:	6838      	ldr	r0, [r7, #0]
 8008832:	f7fe fc91 	bl	8007158 <ndefRecordSetNdefType>

    return ERR_NONE;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	0801aad8 	.word	0x0801aad8

08008844 <ndefRtdAar>:
 */


/*****************************************************************************/
ReturnCode ndefRtdAar(ndefType* aar, const ndefConstBuffer* bufPayload)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
    ndefTypeRtdAar* rtdAar;

    if ( (aar == NULL) ||
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00a      	beq.n	800886a <ndefRtdAar+0x26>
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d007      	beq.n	800886a <ndefRtdAar+0x26>
         (bufPayload == NULL) || (bufPayload->buffer == NULL) || (bufPayload->length == 0U) )
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <ndefRtdAar+0x26>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <ndefRtdAar+0x2a>
    {
        return ERR_PARAM;
 800886a:	2307      	movs	r3, #7
 800886c:	e01a      	b.n	80088a4 <ndefRtdAar+0x60>
    }

    aar->id               = NDEF_TYPE_RTD_AAR;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2204      	movs	r2, #4
 8008872:	701a      	strb	r2, [r3, #0]
    aar->getPayloadLength = NULL;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	605a      	str	r2, [r3, #4]
    aar->getPayloadItem   = NULL;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	609a      	str	r2, [r3, #8]
    rtdAar                = &aar->data.aar;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	330c      	adds	r3, #12
 8008884:	60fb      	str	r3, [r7, #12]

    rtdAar->bufType.buffer    = bufRtdTypeAar.buffer;
 8008886:	4a0a      	ldr	r2, [pc, #40]	; (80088b0 <ndefRtdAar+0x6c>)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	601a      	str	r2, [r3, #0]
    rtdAar->bufType.length    = bufRtdTypeAar.length;
 800888c:	220f      	movs	r2, #15
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	711a      	strb	r2, [r3, #4]
    rtdAar->bufPayload.buffer = bufPayload->buffer;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	609a      	str	r2, [r3, #8]
    rtdAar->bufPayload.length = bufPayload->length;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	60da      	str	r2, [r3, #12]

    return ERR_NONE;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bc80      	pop	{r7}
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	0801aab8 	.word	0x0801aab8

080088b4 <ndefGetRtdAar>:


/*****************************************************************************/
ReturnCode ndefGetRtdAar(const ndefType* aar, ndefConstBuffer* bufAarString)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdAar* rtdAar;

    if ( (aar          == NULL) || (aar->id != NDEF_TYPE_RTD_AAR) ||
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d006      	beq.n	80088d2 <ndefGetRtdAar+0x1e>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2b04      	cmp	r3, #4
 80088ca:	d102      	bne.n	80088d2 <ndefGetRtdAar+0x1e>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <ndefGetRtdAar+0x22>
         (bufAarString == NULL) )
    {
        return ERR_PARAM;
 80088d2:	2307      	movs	r3, #7
 80088d4:	e00b      	b.n	80088ee <ndefGetRtdAar+0x3a>
    }

    rtdAar = &aar->data.aar;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	330c      	adds	r3, #12
 80088da:	60fb      	str	r3, [r7, #12]

    bufAarString->buffer = rtdAar->bufPayload.buffer;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	689a      	ldr	r2, [r3, #8]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	601a      	str	r2, [r3, #0]
    bufAarString->length = rtdAar->bufPayload.length;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bc80      	pop	{r7}
 80088f6:	4770      	bx	lr

080088f8 <ndefRecordToRtdAar>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdAar(const ndefRecord* record, ndefType* aar)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (aar == NULL) )
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <ndefRecordToRtdAar+0x16>
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <ndefRecordToRtdAar+0x1a>
    {
        return ERR_PARAM;
 800890e:	2307      	movs	r3, #7
 8008910:	e013      	b.n	800893a <ndefRecordToRtdAar+0x42>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_EXTERNAL_TYPE, &bufRtdTypeAar)) /* "android.com:pkg" */
 8008912:	4a0c      	ldr	r2, [pc, #48]	; (8008944 <ndefRecordToRtdAar+0x4c>)
 8008914:	2104      	movs	r1, #4
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7fd fd4a 	bl	80063b0 <ndefRecordTypeMatch>
 800891c:	4603      	mov	r3, r0
 800891e:	f083 0301 	eor.w	r3, r3, #1
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <ndefRecordToRtdAar+0x34>
    {
        return ERR_PROTO;
 8008928:	230b      	movs	r3, #11
 800892a:	e006      	b.n	800893a <ndefRecordToRtdAar+0x42>
    }

    /* No constraint on payload length */

    return ndefRtdAar(aar, &record->bufPayload);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	330c      	adds	r3, #12
 8008930:	4619      	mov	r1, r3
 8008932:	6838      	ldr	r0, [r7, #0]
 8008934:	f7ff ff86 	bl	8008844 <ndefRtdAar>
 8008938:	4603      	mov	r3, r0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	0801aae0 	.word	0x0801aae0

08008948 <ndefRtdAarToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdAarToRecord(const ndefType* aar, ndefRecord* record)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdAar* rtdAar;

    if ( (aar    == NULL) || (aar->id != NDEF_TYPE_RTD_AAR) ||
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d006      	beq.n	8008966 <ndefRtdAarToRecord+0x1e>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2b04      	cmp	r3, #4
 800895e:	d102      	bne.n	8008966 <ndefRtdAarToRecord+0x1e>
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <ndefRtdAarToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 8008966:	2307      	movs	r3, #7
 8008968:	e011      	b.n	800898e <ndefRtdAarToRecord+0x46>
    }

    rtdAar = &aar->data.aar;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	330c      	adds	r3, #12
 800896e:	60fb      	str	r3, [r7, #12]

    (void)ndefRecordReset(record);
 8008970:	6838      	ldr	r0, [r7, #0]
 8008972:	f7fd fc47 	bl	8006204 <ndefRecordReset>

    /* "android.com:pkg" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_EXTERNAL_TYPE, &bufRtdTypeAar);
 8008976:	4a08      	ldr	r2, [pc, #32]	; (8008998 <ndefRtdAarToRecord+0x50>)
 8008978:	2104      	movs	r1, #4
 800897a:	6838      	ldr	r0, [r7, #0]
 800897c:	f7fd fcc3 	bl	8006306 <ndefRecordSetType>

    (void)ndefRecordSetPayload(record, &rtdAar->bufPayload);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3308      	adds	r3, #8
 8008984:	4619      	mov	r1, r3
 8008986:	6838      	ldr	r0, [r7, #0]
 8008988:	f7fd fd92 	bl	80064b0 <ndefRecordSetPayload>

    return ERR_NONE;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	0801aae0 	.word	0x0801aae0

0800899c <ndefPollerContextInitialization>:
 */


/*******************************************************************************/
ReturnCode ndefPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
#else
        NULL,
#endif
    };

    if( (ctx == NULL) || (dev == NULL) )
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <ndefPollerContextInitialization+0x16>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <ndefPollerContextInitialization+0x1a>
    {
        return ERR_PARAM;
 80089b2:	2307      	movs	r3, #7
 80089b4:	e019      	b.n	80089ea <ndefPollerContextInitialization+0x4e>
    }
    
    ctx->ndefPollWrapper = ndefPollerWrappers[ndefPollerGetDeviceType(dev)];
 80089b6:	6838      	ldr	r0, [r7, #0]
 80089b8:	f000 fa02 	bl	8008dc0 <ndefPollerGetDeviceType>
 80089bc:	4603      	mov	r3, r0
 80089be:	461a      	mov	r2, r3
 80089c0:	4b0c      	ldr	r3, [pc, #48]	; (80089f4 <ndefPollerContextInitialization+0x58>)
 80089c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    
    /* ndefPollWrapper is NULL when support of a given tag type is not enabled */
    if( ctx->ndefPollWrapper == NULL )
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <ndefPollerContextInitialization+0x3e>
    {
        return ERR_NOTSUPP;
 80089d6:	2318      	movs	r3, #24
 80089d8:	e007      	b.n	80089ea <ndefPollerContextInitialization+0x4e>
    }
    
    return (ctx->ndefPollWrapper->pollerContextInitialization)(ctx, dev);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	4798      	blx	r3
 80089e8:	4603      	mov	r3, r0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	200000f4 	.word	0x200000f4

080089f8 <ndefPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <ndefPollerNdefDetect+0x14>
    {
        return ERR_PARAM;
 8008a08:	2307      	movs	r3, #7
 8008a0a:	e00e      	b.n	8008a2a <ndefPollerNdefDetect+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <ndefPollerNdefDetect+0x22>
    { 
        return ERR_WRONG_STATE;
 8008a16:	2321      	movs	r3, #33	; 0x21
 8008a18:	e007      	b.n	8008a2a <ndefPollerNdefDetect+0x32>
    }
   
    return (ctx->ndefPollWrapper->pollerNdefDetect)(ctx, info);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	4798      	blx	r3
 8008a28:	4603      	mov	r3, r0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <ndefPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 8008a32:	b590      	push	{r4, r7, lr}
 8008a34:	b085      	sub	sp, #20
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	60f8      	str	r0, [r7, #12]
 8008a3a:	60b9      	str	r1, [r7, #8]
 8008a3c:	607a      	str	r2, [r7, #4]
 8008a3e:	603b      	str	r3, [r7, #0]
    if( ctx == NULL )
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d101      	bne.n	8008a4a <ndefPollerReadRawMessage+0x18>
    {
        return ERR_PARAM;
 8008a46:	2307      	movs	r3, #7
 8008a48:	e010      	b.n	8008a6c <ndefPollerReadRawMessage+0x3a>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <ndefPollerReadRawMessage+0x26>
    { 
        return ERR_WRONG_STATE;
 8008a54:	2321      	movs	r3, #33	; 0x21
 8008a56:	e009      	b.n	8008a6c <ndefPollerReadRawMessage+0x3a>
    }

    return (ctx->ndefPollWrapper->pollerReadRawMessage)(ctx, buf, bufLen, rcvdLen);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a5e:	68dc      	ldr	r4, [r3, #12]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	68b9      	ldr	r1, [r7, #8]
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	47a0      	blx	r4
 8008a6a:	4603      	mov	r3, r0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd90      	pop	{r4, r7, pc}

08008a74 <ndefPollerWriteRawMessage>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
    if( ctx == NULL )
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <ndefPollerWriteRawMessage+0x16>
    {
        return ERR_PARAM;
 8008a86:	2307      	movs	r3, #7
 8008a88:	e00f      	b.n	8008aaa <ndefPollerWriteRawMessage+0x36>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d101      	bne.n	8008a98 <ndefPollerWriteRawMessage+0x24>
    { 
        return ERR_WRONG_STATE;
 8008a94:	2321      	movs	r3, #33	; 0x21
 8008a96:	e008      	b.n	8008aaa <ndefPollerWriteRawMessage+0x36>
    }
  
    return (ctx->ndefPollWrapper->pollerWriteRawMessage)(ctx, buf, bufLen);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	68b9      	ldr	r1, [r7, #8]
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	4798      	blx	r3
 8008aa8:	4603      	mov	r3, r0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <ndefPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	607a      	str	r2, [r7, #4]
    if( ctx == NULL )
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <ndefPollerTagFormat+0x16>
    {
        return ERR_PARAM;
 8008ac4:	2307      	movs	r3, #7
 8008ac6:	e00f      	b.n	8008ae8 <ndefPollerTagFormat+0x36>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <ndefPollerTagFormat+0x24>
    { 
        return ERR_WRONG_STATE;
 8008ad2:	2321      	movs	r3, #33	; 0x21
 8008ad4:	e008      	b.n	8008ae8 <ndefPollerTagFormat+0x36>
    }
  
    return (ctx->ndefPollWrapper->pollerTagFormat)(ctx, cc, options);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	68b9      	ldr	r1, [r7, #8]
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	4798      	blx	r3
 8008ae6:	4603      	mov	r3, r0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <ndefPollerWriteBytes>:
    return (ctx->ndefPollWrapper->pollerWriteRawMessageLen)(ctx, rawMessageLen);
}

/*******************************************************************************/
ReturnCode ndefPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 8008af0:	b590      	push	{r4, r7, lr}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	603b      	str	r3, [r7, #0]
    if( ctx == NULL )
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d101      	bne.n	8008b08 <ndefPollerWriteBytes+0x18>
    {
        return ERR_PARAM;
 8008b04:	2307      	movs	r3, #7
 8008b06:	e010      	b.n	8008b2a <ndefPollerWriteBytes+0x3a>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <ndefPollerWriteBytes+0x26>
    { 
        return ERR_WRONG_STATE;
 8008b12:	2321      	movs	r3, #33	; 0x21
 8008b14:	e009      	b.n	8008b2a <ndefPollerWriteBytes+0x3a>
    }
  
    return (ctx->ndefPollWrapper->pollerWriteBytes)(ctx, offset, buf, len);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b1c:	691c      	ldr	r4, [r3, #16]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	68b9      	ldr	r1, [r7, #8]
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	47a0      	blx	r4
 8008b28:	4603      	mov	r3, r0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd90      	pop	{r4, r7, pc}

08008b32 <ndefPollerCheckAvailableSpace>:
    return (ctx->ndefPollWrapper->pollerCheckPresence)(ctx);
}

/*******************************************************************************/
ReturnCode ndefPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b082      	sub	sp, #8
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d101      	bne.n	8008b46 <ndefPollerCheckAvailableSpace+0x14>
    {
        return ERR_PARAM;
 8008b42:	2307      	movs	r3, #7
 8008b44:	e00e      	b.n	8008b64 <ndefPollerCheckAvailableSpace+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d101      	bne.n	8008b54 <ndefPollerCheckAvailableSpace+0x22>
    { 
        return ERR_WRONG_STATE;
 8008b50:	2321      	movs	r3, #33	; 0x21
 8008b52:	e007      	b.n	8008b64 <ndefPollerCheckAvailableSpace+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerCheckAvailableSpace)(ctx, messageLen);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	4798      	blx	r3
 8008b62:	4603      	mov	r3, r0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <ndefPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <ndefPollerBeginWriteMessage+0x14>
    {
        return ERR_PARAM;
 8008b7c:	2307      	movs	r3, #7
 8008b7e:	e00e      	b.n	8008b9e <ndefPollerBeginWriteMessage+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d101      	bne.n	8008b8e <ndefPollerBeginWriteMessage+0x22>
    { 
        return ERR_WRONG_STATE;
 8008b8a:	2321      	movs	r3, #33	; 0x21
 8008b8c:	e007      	b.n	8008b9e <ndefPollerBeginWriteMessage+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerBeginWriteMessage)(ctx, messageLen);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	4798      	blx	r3
 8008b9c:	4603      	mov	r3, r0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <ndefPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <ndefPollerEndWriteMessage+0x14>
    {
        return ERR_PARAM;
 8008bb6:	2307      	movs	r3, #7
 8008bb8:	e00e      	b.n	8008bd8 <ndefPollerEndWriteMessage+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <ndefPollerEndWriteMessage+0x22>
    { 
        return ERR_WRONG_STATE;
 8008bc4:	2321      	movs	r3, #33	; 0x21
 8008bc6:	e007      	b.n	8008bd8 <ndefPollerEndWriteMessage+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerEndWriteMessage)(ctx, messageLen);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	4798      	blx	r3
 8008bd6:	4603      	mov	r3, r0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <ndefPollerWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerWriteMessage(ndefContext *ctx, const ndefMessage* message)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b08e      	sub	sp, #56	; 0x38
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
    ndefBuffer      bufHeader;
    ndefConstBuffer bufPayloadItem;
    uint32_t        offset;
    bool            firstPayloadItem;

    if ( (ctx == NULL) || (message == NULL) )
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d002      	beq.n	8008bf6 <ndefPollerWriteMessage+0x16>
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <ndefPollerWriteMessage+0x1a>
    {
        return ERR_PARAM;
 8008bf6:	2307      	movs	r3, #7
 8008bf8:	e0de      	b.n	8008db8 <ndefPollerWriteMessage+0x1d8>
    }

    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d006      	beq.n	8008c12 <ndefPollerWriteMessage+0x32>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d001      	beq.n	8008c12 <ndefPollerWriteMessage+0x32>
    {
        return ERR_WRONG_STATE;
 8008c0e:	2321      	movs	r3, #33	; 0x21
 8008c10:	e0d2      	b.n	8008db8 <ndefPollerWriteMessage+0x1d8>
    }

    (void)ndefMessageGetInfo(message, &info);
 8008c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c16:	4619      	mov	r1, r3
 8008c18:	6838      	ldr	r0, [r7, #0]
 8008c1a:	f7fd f9af 	bl	8005f7c <ndefMessageGetInfo>

    /* Verify length of the NDEF message */
    err = ndefPollerCheckAvailableSpace(ctx, info.length);
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff ff85 	bl	8008b32 <ndefPollerCheckAvailableSpace>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (err != ERR_NONE)
 8008c2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <ndefPollerWriteMessage+0x56>
    {
        /* Conclude procedure */
        return ERR_PARAM;
 8008c32:	2307      	movs	r3, #7
 8008c34:	e0c0      	b.n	8008db8 <ndefPollerWriteMessage+0x1d8>
    }

    /* Reset L-Field/NLEN field */
    err = ndefPollerBeginWriteMessage(ctx, info.length);
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7ff ff96 	bl	8008b6c <ndefPollerBeginWriteMessage>
 8008c40:	4603      	mov	r3, r0
 8008c42:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (err != ERR_NONE)
 8008c44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d005      	beq.n	8008c56 <ndefPollerWriteMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return err;
 8008c52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c54:	e0b0      	b.n	8008db8 <ndefPollerWriteMessage+0x1d8>
    }

    if (info.length != 0U)
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 80ac 	beq.w	8008db6 <ndefPollerWriteMessage+0x1d6>
    {
        offset = ctx->messageOffset;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c64:	633b      	str	r3, [r7, #48]	; 0x30
        record = ndefMessageGetFirstRecord(message);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <ndefPollerWriteMessage+0x92>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	e000      	b.n	8008c74 <ndefPollerWriteMessage+0x94>
 8008c72:	2300      	movs	r3, #0
 8008c74:	637b      	str	r3, [r7, #52]	; 0x34

        while (record != NULL)
 8008c76:	e08a      	b.n	8008d8e <ndefPollerWriteMessage+0x1ae>
        {
            bufHeader.buffer = recordHeaderBuf;
 8008c78:	f107 031c 	add.w	r3, r7, #28
 8008c7c:	617b      	str	r3, [r7, #20]
            bufHeader.length = sizeof(recordHeaderBuf);
 8008c7e:	2307      	movs	r3, #7
 8008c80:	61bb      	str	r3, [r7, #24]
            (void)ndefRecordEncodeHeader(record, &bufHeader);
 8008c82:	f107 0314 	add.w	r3, r7, #20
 8008c86:	4619      	mov	r1, r3
 8008c88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008c8a:	f7fd fd61 	bl	8006750 <ndefRecordEncodeHeader>
            err = ndefPollerWriteBytes(ctx, offset, bufHeader.buffer, bufHeader.length);
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7ff ff2b 	bl	8008af0 <ndefPollerWriteBytes>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	85bb      	strh	r3, [r7, #44]	; 0x2c
            if (err != ERR_NONE)
 8008c9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d001      	beq.n	8008ca8 <ndefPollerWriteMessage+0xc8>
            {
                return err;
 8008ca4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008ca6:	e087      	b.n	8008db8 <ndefPollerWriteMessage+0x1d8>
            }
            offset += bufHeader.length;
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cac:	4413      	add	r3, r2
 8008cae:	633b      	str	r3, [r7, #48]	; 0x30
            // TODO Use API to access record internal
            if (record->typeLength != 0U)
 8008cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb2:	785b      	ldrb	r3, [r3, #1]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d018      	beq.n	8008cea <ndefPollerWriteMessage+0x10a>
            {
                err = ndefPollerWriteBytes(ctx, offset, record->type, record->typeLength);
 8008cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cbe:	785b      	ldrb	r3, [r3, #1]
 8008cc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff ff14 	bl	8008af0 <ndefPollerWriteBytes>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	85bb      	strh	r3, [r7, #44]	; 0x2c
                if (err != ERR_NONE)
 8008ccc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d005      	beq.n	8008cde <ndefPollerWriteMessage+0xfe>
                {
                    /* Conclude procedure */
                    ctx->state = NDEF_STATE_INVALID;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    return err;
 8008cda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008cdc:	e06c      	b.n	8008db8 <ndefPollerWriteMessage+0x1d8>
                }
                offset += record->typeLength;
 8008cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce0:	785b      	ldrb	r3, [r3, #1]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce6:	4413      	add	r3, r2
 8008ce8:	633b      	str	r3, [r7, #48]	; 0x30
            }
            if (record->idLength != 0U)
 8008cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cec:	789b      	ldrb	r3, [r3, #2]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d018      	beq.n	8008d24 <ndefPollerWriteMessage+0x144>
            {
                err = ndefPollerWriteBytes(ctx, offset, record->id, record->idLength);
 8008cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf4:	689a      	ldr	r2, [r3, #8]
 8008cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf8:	789b      	ldrb	r3, [r3, #2]
 8008cfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7ff fef7 	bl	8008af0 <ndefPollerWriteBytes>
 8008d02:	4603      	mov	r3, r0
 8008d04:	85bb      	strh	r3, [r7, #44]	; 0x2c
                if (err != ERR_NONE)
 8008d06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d005      	beq.n	8008d18 <ndefPollerWriteMessage+0x138>
                {
                    /* Conclude procedure */
                    ctx->state = NDEF_STATE_INVALID;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    return err;
 8008d14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d16:	e04f      	b.n	8008db8 <ndefPollerWriteMessage+0x1d8>
                }
                offset += record->idLength;
 8008d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1a:	789b      	ldrb	r3, [r3, #2]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d20:	4413      	add	r3, r2
 8008d22:	633b      	str	r3, [r7, #48]	; 0x30
            }
            if (ndefRecordGetPayloadLength(record) != 0U)
 8008d24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008d26:	f7fd fe5a 	bl	80069de <ndefRecordGetPayloadLength>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d026      	beq.n	8008d7e <ndefPollerWriteMessage+0x19e>
            {
                firstPayloadItem = true;
 8008d30:	2301      	movs	r3, #1
 8008d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                while (ndefRecordGetPayloadItem(record, &bufPayloadItem, firstPayloadItem) != NULL)
 8008d36:	e017      	b.n	8008d68 <ndefPollerWriteMessage+0x188>
                {
                    firstPayloadItem = false;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    err = ndefPollerWriteBytes(ctx, offset, bufPayloadItem.buffer, bufPayloadItem.length);
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7ff fed3 	bl	8008af0 <ndefPollerWriteBytes>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    if (err != ERR_NONE)
 8008d4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d005      	beq.n	8008d60 <ndefPollerWriteMessage+0x180>
                    {
                        /* Conclude procedure */
                        ctx->state = NDEF_STATE_INVALID;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        return err;
 8008d5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d5e:	e02b      	b.n	8008db8 <ndefPollerWriteMessage+0x1d8>
                    }
                    offset += bufPayloadItem.length;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d64:	4413      	add	r3, r2
 8008d66:	633b      	str	r3, [r7, #48]	; 0x30
                while (ndefRecordGetPayloadItem(record, &bufPayloadItem, firstPayloadItem) != NULL)
 8008d68:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008d6c:	f107 030c 	add.w	r3, r7, #12
 8008d70:	4619      	mov	r1, r3
 8008d72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008d74:	f7fd fe56 	bl	8006a24 <ndefRecordGetPayloadItem>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1dc      	bne.n	8008d38 <ndefPollerWriteMessage+0x158>
                }
            }
            record = ndefMessageGetNextRecord(record);
 8008d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <ndefPollerWriteMessage+0x1aa>
 8008d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	e000      	b.n	8008d8c <ndefPollerWriteMessage+0x1ac>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	637b      	str	r3, [r7, #52]	; 0x34
        while (record != NULL)
 8008d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f47f af71 	bne.w	8008c78 <ndefPollerWriteMessage+0x98>
        }

        err = ndefPollerEndWriteMessage(ctx, info.length);
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7ff ff03 	bl	8008ba6 <ndefPollerEndWriteMessage>
 8008da0:	4603      	mov	r3, r0
 8008da2:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if (err != ERR_NONE)
 8008da4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d005      	beq.n	8008db6 <ndefPollerWriteMessage+0x1d6>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return err;
 8008db2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008db4:	e000      	b.n	8008db8 <ndefPollerWriteMessage+0x1d8>
        }
    }

    return ERR_NONE;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3738      	adds	r7, #56	; 0x38
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <ndefPollerGetDeviceType>:

#endif /* NDEF_FEATURE_ALL */

/*******************************************************************************/
static ndefDeviceType ndefPollerGetDeviceType(const rfalNfcDevice *dev)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
    ndefDeviceType type;
    
    if( dev == NULL )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d102      	bne.n	8008dd4 <ndefPollerGetDeviceType+0x14>
    {
        type = NDEF_DEV_NONE;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]
 8008dd2:	e032      	b.n	8008e3a <ndefPollerGetDeviceType+0x7a>
    }
    else
    {
        switch( dev->type )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	2b03      	cmp	r3, #3
 8008dda:	d82b      	bhi.n	8008e34 <ndefPollerGetDeviceType+0x74>
 8008ddc:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <ndefPollerGetDeviceType+0x24>)
 8008dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de2:	bf00      	nop
 8008de4:	08008df5 	.word	0x08008df5
 8008de8:	08008e23 	.word	0x08008e23
 8008dec:	08008e29 	.word	0x08008e29
 8008df0:	08008e2f 	.word	0x08008e2f
        {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            switch( dev->dev.nfca.type )
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	785b      	ldrb	r3, [r3, #1]
 8008df8:	2b20      	cmp	r3, #32
 8008dfa:	d00b      	beq.n	8008e14 <ndefPollerGetDeviceType+0x54>
 8008dfc:	2b20      	cmp	r3, #32
 8008dfe:	dc0c      	bgt.n	8008e1a <ndefPollerGetDeviceType+0x5a>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d004      	beq.n	8008e0e <ndefPollerGetDeviceType+0x4e>
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d108      	bne.n	8008e1a <ndefPollerGetDeviceType+0x5a>
            {
                case RFAL_NFCA_T1T:
                    type = NDEF_DEV_T1T;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	73fb      	strb	r3, [r7, #15]
                    break; 
 8008e0c:	e008      	b.n	8008e20 <ndefPollerGetDeviceType+0x60>
                case RFAL_NFCA_T2T:
                    type = NDEF_DEV_T2T;
 8008e0e:	2302      	movs	r3, #2
 8008e10:	73fb      	strb	r3, [r7, #15]
                    break;
 8008e12:	e005      	b.n	8008e20 <ndefPollerGetDeviceType+0x60>
                case RFAL_NFCA_T4T:
                    type = NDEF_DEV_T4T;
 8008e14:	2304      	movs	r3, #4
 8008e16:	73fb      	strb	r3, [r7, #15]
                    break;
 8008e18:	e002      	b.n	8008e20 <ndefPollerGetDeviceType+0x60>
                default:
                    type = NDEF_DEV_NONE;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	73fb      	strb	r3, [r7, #15]
                    break;
 8008e1e:	bf00      	nop
            }
            break;
 8008e20:	e00b      	b.n	8008e3a <ndefPollerGetDeviceType+0x7a>
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            type = NDEF_DEV_T4T;
 8008e22:	2304      	movs	r3, #4
 8008e24:	73fb      	strb	r3, [r7, #15]
            break;
 8008e26:	e008      	b.n	8008e3a <ndefPollerGetDeviceType+0x7a>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            type = NDEF_DEV_T3T;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	73fb      	strb	r3, [r7, #15]
            break;
 8008e2c:	e005      	b.n	8008e3a <ndefPollerGetDeviceType+0x7a>
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            type = NDEF_DEV_T5T;
 8008e2e:	2305      	movs	r3, #5
 8008e30:	73fb      	strb	r3, [r7, #15]
            break;
 8008e32:	e002      	b.n	8008e3a <ndefPollerGetDeviceType+0x7a>
        default:
            type = NDEF_DEV_NONE;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73fb      	strb	r3, [r7, #15]
            break;
 8008e38:	bf00      	nop
        }
    }
    return type;
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bc80      	pop	{r7}
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop

08008e48 <ndefT2TPollerReadBlock>:
 ******************************************************************************
 */

/*******************************************************************************/
static ReturnCode ndefT2TPollerReadBlock(ndefContext *ctx, uint16_t blockAddr, uint8_t *buf)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	460b      	mov	r3, r1
 8008e52:	607a      	str	r2, [r7, #4]
 8008e54:	817b      	strh	r3, [r7, #10]
    ReturnCode           ret;
    uint8_t              secNo;
    uint8_t              blNo;
    uint16_t             rcvdLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00a      	beq.n	8008e72 <ndefT2TPollerReadBlock+0x2a>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d106      	bne.n	8008e72 <ndefT2TPollerReadBlock+0x2a>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d102      	bne.n	8008e72 <ndefT2TPollerReadBlock+0x2a>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <ndefT2TPollerReadBlock+0x2e>
    {
        return ERR_PARAM;
 8008e72:	2307      	movs	r3, #7
 8008e74:	e02c      	b.n	8008ed0 <ndefT2TPollerReadBlock+0x88>
    }

    secNo = (uint8_t)(blockAddr >> 8U);
 8008e76:	897b      	ldrh	r3, [r7, #10]
 8008e78:	0a1b      	lsrs	r3, r3, #8
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	75fb      	strb	r3, [r7, #23]
    blNo  = (uint8_t)blockAddr;
 8008e7e:	897b      	ldrh	r3, [r7, #10]
 8008e80:	75bb      	strb	r3, [r7, #22]

    if( secNo != ctx->subCtx.t2t.currentSecNo )
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8008e88:	7dfa      	ldrb	r2, [r7, #23]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d00e      	beq.n	8008eac <ndefT2TPollerReadBlock+0x64>
    {
        ret = rfalT2TPollerSectorSelect(secNo);
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f00f fbeb 	bl	801866c <rfalT2TPollerSectorSelect>
 8008e96:	4603      	mov	r3, r0
 8008e98:	82bb      	strh	r3, [r7, #20]
        if( ret != ERR_NONE )
 8008e9a:	8abb      	ldrh	r3, [r7, #20]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <ndefT2TPollerReadBlock+0x5c>
        {
            return ret;
 8008ea0:	8abb      	ldrh	r3, [r7, #20]
 8008ea2:	e015      	b.n	8008ed0 <ndefT2TPollerReadBlock+0x88>
        }
        ctx->subCtx.t2t.currentSecNo = secNo;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	7dfa      	ldrb	r2, [r7, #23]
 8008ea8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    }

    ret = rfalT2TPollerRead(blNo, buf, NDEF_T2T_READ_RESP_SIZE, &rcvdLen);
 8008eac:	f107 0312 	add.w	r3, r7, #18
 8008eb0:	7db8      	ldrb	r0, [r7, #22]
 8008eb2:	2210      	movs	r2, #16
 8008eb4:	6879      	ldr	r1, [r7, #4]
 8008eb6:	f00f fb65 	bl	8018584 <rfalT2TPollerRead>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	82bb      	strh	r3, [r7, #20]

    if( (ret == ERR_NONE) && (rcvdLen != NDEF_T2T_READ_RESP_SIZE) )
 8008ebe:	8abb      	ldrh	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d104      	bne.n	8008ece <ndefT2TPollerReadBlock+0x86>
 8008ec4:	8a7b      	ldrh	r3, [r7, #18]
 8008ec6:	2b10      	cmp	r3, #16
 8008ec8:	d001      	beq.n	8008ece <ndefT2TPollerReadBlock+0x86>
    {
        return ERR_PROTO;
 8008eca:	230b      	movs	r3, #11
 8008ecc:	e000      	b.n	8008ed0 <ndefT2TPollerReadBlock+0x88>
    }

    return ret;
 8008ece:	8abb      	ldrh	r3, [r7, #20]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3718      	adds	r7, #24
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <ndefT2TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT2TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b08a      	sub	sp, #40	; 0x28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
 8008ee4:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              le;
    uint32_t             lvOffset = offset;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	623b      	str	r3, [r7, #32]
    uint32_t             lvLen    = len;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	61fb      	str	r3, [r7, #28]
    uint8_t *            lvBuf    = buf;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	61bb      	str	r3, [r7, #24]
    uint16_t             blockAddr;
    uint8_t              byteNo;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (lvLen == 0U) || (offset > NDEF_T2T_MAX_OFFSET) )
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00e      	beq.n	8008f16 <ndefT2TPollerReadBytes+0x3e>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <ndefT2TPollerReadBytes+0x3e>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	785b      	ldrb	r3, [r3, #1]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d106      	bne.n	8008f16 <ndefT2TPollerReadBytes+0x3e>
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <ndefT2TPollerReadBytes+0x3e>
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	f5b3 3f7f 	cmp.w	r3, #261120	; 0x3fc00
 8008f14:	d901      	bls.n	8008f1a <ndefT2TPollerReadBytes+0x42>
    {
        return ERR_PARAM;
 8008f16:	2307      	movs	r3, #7
 8008f18:	e0a7      	b.n	800906a <ndefT2TPollerReadBytes+0x192>
    }

    if( (offset >= ctx->subCtx.t2t.cacheAddr) && (offset < (ctx->subCtx.t2t.cacheAddr + NDEF_T2T_READ_RESP_SIZE)) && ((offset + len) < (ctx->subCtx.t2t.cacheAddr + NDEF_T2T_READ_RESP_SIZE)) )
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d31e      	bcc.n	8008f64 <ndefT2TPollerReadBytes+0x8c>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008f2c:	3310      	adds	r3, #16
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d217      	bcs.n	8008f64 <ndefT2TPollerReadBytes+0x8c>
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	441a      	add	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008f40:	3310      	adds	r3, #16
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d20e      	bcs.n	8008f64 <ndefT2TPollerReadBytes+0x8c>
    {
        /* data in cache buffer */
        (void)ST_MEMCPY(lvBuf, &ctx->subCtx.t2t.cacheBuf[offset - ctx->subCtx.t2t.cacheAddr], len);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	33b0      	adds	r3, #176	; 0xb0
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	4413      	add	r3, r2
 8008f56:	3305      	adds	r3, #5
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	69b8      	ldr	r0, [r7, #24]
 8008f5e:	f00f fed7 	bl	8018d10 <memcpy>
 8008f62:	e07b      	b.n	800905c <ndefT2TPollerReadBytes+0x184>
    }
    else
    {
        do {
            blockAddr = (uint16_t)(lvOffset / NDEF_T2T_BLOCK_SIZE);
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	089b      	lsrs	r3, r3, #2
 8008f68:	82fb      	strh	r3, [r7, #22]
            byteNo    =  (uint8_t)(lvOffset % NDEF_T2T_BLOCK_SIZE);
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	f003 0303 	and.w	r3, r3, #3
 8008f72:	757b      	strb	r3, [r7, #21]
            le = (lvLen < NDEF_T2T_READ_RESP_SIZE) ? (uint8_t)lvLen : (uint8_t)NDEF_T2T_READ_RESP_SIZE;
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	2b0f      	cmp	r3, #15
 8008f78:	d802      	bhi.n	8008f80 <ndefT2TPollerReadBytes+0xa8>
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	e000      	b.n	8008f82 <ndefT2TPollerReadBytes+0xaa>
 8008f80:	2310      	movs	r3, #16
 8008f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if( (byteNo != 0U ) || (lvLen < NDEF_T2T_READ_RESP_SIZE) )
 8008f86:	7d7b      	ldrb	r3, [r7, #21]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d102      	bne.n	8008f92 <ndefT2TPollerReadBytes+0xba>
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	2b0f      	cmp	r3, #15
 8008f90:	d834      	bhi.n	8008ffc <ndefT2TPollerReadBytes+0x124>
            {
                ret = ndefT2TPollerReadBlock(ctx, blockAddr, ctx->subCtx.t2t.cacheBuf);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f103 02b5 	add.w	r2, r3, #181	; 0xb5
 8008f98:	8afb      	ldrh	r3, [r7, #22]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f7ff ff53 	bl	8008e48 <ndefT2TPollerReadBlock>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	827b      	strh	r3, [r7, #18]
                if( ret != ERR_NONE )
 8008fa6:	8a7b      	ldrh	r3, [r7, #18]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d006      	beq.n	8008fba <ndefT2TPollerReadBytes+0xe2>
                {
                    ndefT2TInvalidateCache(ctx);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                    return ret;
 8008fb6:	8a7b      	ldrh	r3, [r7, #18]
 8008fb8:	e057      	b.n	800906a <ndefT2TPollerReadBytes+0x192>
                }
                ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 8008fba:	8afb      	ldrh	r3, [r7, #22]
 8008fbc:	009a      	lsls	r2, r3, #2
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                if( (NDEF_T2T_READ_RESP_SIZE - byteNo) < le )
 8008fc4:	7d7b      	ldrb	r3, [r7, #21]
 8008fc6:	f1c3 0210 	rsb	r2, r3, #16
 8008fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d204      	bcs.n	8008fdc <ndefT2TPollerReadBytes+0x104>
                {
                    le = NDEF_T2T_READ_RESP_SIZE - byteNo;
 8008fd2:	7d7b      	ldrb	r3, [r7, #21]
 8008fd4:	f1c3 0310 	rsb	r3, r3, #16
 8008fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                if( le > 0U)
 8008fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d029      	beq.n	8009038 <ndefT2TPollerReadBytes+0x160>
                {
                    (void)ST_MEMCPY(lvBuf, &ctx->subCtx.t2t.cacheBuf[byteNo], le);
 8008fe4:	7d7b      	ldrb	r3, [r7, #21]
 8008fe6:	33b0      	adds	r3, #176	; 0xb0
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	4413      	add	r3, r2
 8008fec:	3305      	adds	r3, #5
 8008fee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	69b8      	ldr	r0, [r7, #24]
 8008ff6:	f00f fe8b 	bl	8018d10 <memcpy>
                if( le > 0U)
 8008ffa:	e01d      	b.n	8009038 <ndefT2TPollerReadBytes+0x160>
                }
            }
            else
            {
                ret = ndefT2TPollerReadBlock(ctx, blockAddr, lvBuf);
 8008ffc:	8afb      	ldrh	r3, [r7, #22]
 8008ffe:	69ba      	ldr	r2, [r7, #24]
 8009000:	4619      	mov	r1, r3
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f7ff ff20 	bl	8008e48 <ndefT2TPollerReadBlock>
 8009008:	4603      	mov	r3, r0
 800900a:	827b      	strh	r3, [r7, #18]
                if( ret != ERR_NONE )
 800900c:	8a7b      	ldrh	r3, [r7, #18]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <ndefT2TPollerReadBytes+0x13e>
                {
                    return ret;
 8009012:	8a7b      	ldrh	r3, [r7, #18]
 8009014:	e029      	b.n	800906a <ndefT2TPollerReadBytes+0x192>
                }
                if( lvLen == le )
 8009016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	429a      	cmp	r2, r3
 800901e:	d10b      	bne.n	8009038 <ndefT2TPollerReadBytes+0x160>
                {
                    /* cache the last read block */
                    (void)ST_MEMCPY(&ctx->subCtx.t2t.cacheBuf[0], lvBuf, NDEF_T2T_READ_RESP_SIZE);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	33b5      	adds	r3, #181	; 0xb5
 8009024:	2210      	movs	r2, #16
 8009026:	69b9      	ldr	r1, [r7, #24]
 8009028:	4618      	mov	r0, r3
 800902a:	f00f fe71 	bl	8018d10 <memcpy>
                    ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 800902e:	8afb      	ldrh	r3, [r7, #22]
 8009030:	009a      	lsls	r2, r3, #2
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                }
            }
            lvBuf     = &lvBuf[le];
 8009038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	4413      	add	r3, r2
 8009040:	61bb      	str	r3, [r7, #24]
            lvOffset += le;
 8009042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009046:	6a3a      	ldr	r2, [r7, #32]
 8009048:	4413      	add	r3, r2
 800904a:	623b      	str	r3, [r7, #32]
            lvLen    -= le;
 800904c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009050:	69fa      	ldr	r2, [r7, #28]
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	61fb      	str	r3, [r7, #28]

        } while( lvLen != 0U );
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d183      	bne.n	8008f64 <ndefT2TPollerReadBytes+0x8c>
    }

    if( rcvdLen != NULL )
 800905c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905e:	2b00      	cmp	r3, #0
 8009060:	d002      	beq.n	8009068 <ndefT2TPollerReadBytes+0x190>
    {
        *rcvdLen = len;
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	601a      	str	r2, [r3, #0]
    }
    return ERR_NONE;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3728      	adds	r7, #40	; 0x28
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <ndefT2TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT2TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b082      	sub	sp, #8
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT2TisT2TDevice(dev) )
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00a      	beq.n	8009098 <ndefT2TPollerContextInitialization+0x26>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d007      	beq.n	8009098 <ndefT2TPollerContextInitialization+0x26>
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d103      	bne.n	8009098 <ndefT2TPollerContextInitialization+0x26>
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	785b      	ldrb	r3, [r3, #1]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <ndefT2TPollerContextInitialization+0x2a>
    {
        return ERR_PARAM;
 8009098:	2307      	movs	r3, #7
 800909a:	e013      	b.n	80090c4 <ndefT2TPollerContextInitialization+0x52>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2278      	movs	r2, #120	; 0x78
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f00f fe34 	bl	8018d10 <memcpy>

    ctx->state                   = NDEF_STATE_INVALID;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->subCtx.t2t.currentSecNo = 0U;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    ndefT2TInvalidateCache(ctx);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f04f 32ff 	mov.w	r2, #4294967295
 80090be:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

   return ERR_NONE;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <ndefT2TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT2TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b088      	sub	sp, #32
 80090d0:	af02      	add	r7, sp, #8
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
    uint8_t              data[2];
    uint32_t             offset;
    uint16_t             lenTLV;
    uint8_t              typeTLV;

    if( info != NULL )
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d011      	beq.n	8009100 <ndefT2TPollerNdefDetect+0x34>
    {
        info->state                = NDEF_STATE_INVALID;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	2200      	movs	r2, #0
 80090e0:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2200      	movs	r2, #0
 80090e6:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2200      	movs	r2, #0
 80090f2:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2200      	movs	r2, #0
 80090f8:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2200      	movs	r2, #0
 80090fe:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d007      	beq.n	8009116 <ndefT2TPollerNdefDetect+0x4a>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d103      	bne.n	8009116 <ndefT2TPollerNdefDetect+0x4a>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	785b      	ldrb	r3, [r3, #1]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <ndefT2TPollerNdefDetect+0x4e>
    {
        return ERR_PARAM;
 8009116:	2307      	movs	r3, #7
 8009118:	e134      	b.n	8009384 <ndefT2TPollerNdefDetect+0x2b8>
    }

    ctx->state = NDEF_STATE_INVALID;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Read CC TS T2T v1.0 7.5.1.1 */
    ret = ndefT2TPollerReadBytes(ctx, NDEF_T2T_CC_OFFSET, NDEF_T2T_CC_LEN, ctx->ccBuf, NULL);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	339c      	adds	r3, #156	; 0x9c
 8009126:	2200      	movs	r2, #0
 8009128:	9200      	str	r2, [sp, #0]
 800912a:	2204      	movs	r2, #4
 800912c:	210c      	movs	r1, #12
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7ff fed2 	bl	8008ed8 <ndefT2TPollerReadBytes>
 8009134:	4603      	mov	r3, r0
 8009136:	823b      	strh	r3, [r7, #16]
    if( ret != ERR_NONE )
 8009138:	8a3b      	ldrh	r3, [r7, #16]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <ndefT2TPollerNdefDetect+0x76>
    {
        /* Conclude procedure */
        return ret;
 800913e:	8a3b      	ldrh	r3, [r7, #16]
 8009140:	e120      	b.n	8009384 <ndefT2TPollerNdefDetect+0x2b8>
    }
    ctx->cc.t2t.magicNumber  = ctx->ccBuf[NDEF_T2T_CC_0];
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t2t.majorVersion = ndefMajorVersion(ctx->ccBuf[NDEF_T2T_CC_1]);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009154:	091b      	lsrs	r3, r3, #4
 8009156:	b2da      	uxtb	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    ctx->cc.t2t.minorVersion = ndefMinorVersion(ctx->ccBuf[NDEF_T2T_CC_1]);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009164:	f003 030f 	and.w	r3, r3, #15
 8009168:	b2da      	uxtb	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    ctx->cc.t2t.size         = ctx->ccBuf[NDEF_T2T_CC_2];
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    ctx->cc.t2t.readAccess   = (uint8_t)(ctx->ccBuf[NDEF_T2T_CC_3] >> 4U);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8009182:	091b      	lsrs	r3, r3, #4
 8009184:	b2da      	uxtb	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    ctx->cc.t2t.writeAccess  = (uint8_t)(ctx->ccBuf[NDEF_T2T_CC_3] & 0xFU);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8009192:	f003 030f 	and.w	r3, r3, #15
 8009196:	b2da      	uxtb	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    ctx->areaLen = (uint32_t)ctx->cc.t2t.size * NDEF_T2T_SIZE_DIVIDER;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80091a4:	00da      	lsls	r2, r3, #3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    /* Check version number TS T2T v1.0 7.5.1.2 */
    if( (ctx->cc.t2t.magicNumber != NDEF_T2T_MAGIC) || (ctx->cc.t2t.majorVersion > ndefMajorVersion(NDEF_T2T_VERSION_1_0)) )
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80091b2:	2be1      	cmp	r3, #225	; 0xe1
 80091b4:	d104      	bne.n	80091c0 <ndefT2TPollerNdefDetect+0xf4>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d901      	bls.n	80091c4 <ndefT2TPollerNdefDetect+0xf8>
    {
        /* Conclude procedure TS T2T v1.0 7.5.1.2 */
        return ERR_REQUEST;
 80091c0:	2305      	movs	r3, #5
 80091c2:	e0df      	b.n	8009384 <ndefT2TPollerNdefDetect+0x2b8>
    }
    /* Search for NDEF message TLV TS T2T v1.0 7.5.1.3 */
    offset = NDEF_T2T_AREA_OFFSET;
 80091c4:	2310      	movs	r3, #16
 80091c6:	617b      	str	r3, [r7, #20]
    while ( (offset < (NDEF_T2T_AREA_OFFSET + ctx->areaLen)) )
 80091c8:	e0d1      	b.n	800936e <ndefT2TPollerNdefDetect+0x2a2>
    {
        ret = ndefT2TPollerReadBytes(ctx, offset, 1, data, NULL);
 80091ca:	f107 030c 	add.w	r3, r7, #12
 80091ce:	2200      	movs	r2, #0
 80091d0:	9200      	str	r2, [sp, #0]
 80091d2:	2201      	movs	r2, #1
 80091d4:	6979      	ldr	r1, [r7, #20]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7ff fe7e 	bl	8008ed8 <ndefT2TPollerReadBytes>
 80091dc:	4603      	mov	r3, r0
 80091de:	823b      	strh	r3, [r7, #16]
        if( ret != ERR_NONE )
 80091e0:	8a3b      	ldrh	r3, [r7, #16]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <ndefT2TPollerNdefDetect+0x11e>
        {
            /* Conclude procedure */
            return ret;
 80091e6:	8a3b      	ldrh	r3, [r7, #16]
 80091e8:	e0cc      	b.n	8009384 <ndefT2TPollerNdefDetect+0x2b8>
        }
        typeTLV = data[0];
 80091ea:	7b3b      	ldrb	r3, [r7, #12]
 80091ec:	73fb      	strb	r3, [r7, #15]
        if( typeTLV == NDEF_T2T_TLV_NDEF_MESSAGE )
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
 80091f0:	2b03      	cmp	r3, #3
 80091f2:	d103      	bne.n	80091fc <ndefT2TPollerNdefDetect+0x130>
        {
            ctx->subCtx.t2t.offsetNdefTLV = offset;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        }
        offset++;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	3301      	adds	r3, #1
 8009200:	617b      	str	r3, [r7, #20]
        if( typeTLV == NDEF_T2T_TLV_TERMINATOR )
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	2bfe      	cmp	r3, #254	; 0xfe
 8009206:	f000 80bb 	beq.w	8009380 <ndefT2TPollerNdefDetect+0x2b4>
        {
            break;
        }
        if( typeTLV == NDEF_T2T_TLV_NULL )
 800920a:	7bfb      	ldrb	r3, [r7, #15]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d100      	bne.n	8009212 <ndefT2TPollerNdefDetect+0x146>
        {
            continue;
 8009210:	e0ad      	b.n	800936e <ndefT2TPollerNdefDetect+0x2a2>
        }
        /* read TLV Len */
        ret = ndefT2TPollerReadBytes(ctx, offset, 1, data, NULL);
 8009212:	f107 030c 	add.w	r3, r7, #12
 8009216:	2200      	movs	r2, #0
 8009218:	9200      	str	r2, [sp, #0]
 800921a:	2201      	movs	r2, #1
 800921c:	6979      	ldr	r1, [r7, #20]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7ff fe5a 	bl	8008ed8 <ndefT2TPollerReadBytes>
 8009224:	4603      	mov	r3, r0
 8009226:	823b      	strh	r3, [r7, #16]
        if( ret != ERR_NONE )
 8009228:	8a3b      	ldrh	r3, [r7, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <ndefT2TPollerNdefDetect+0x166>
        {
            /* Conclude procedure */
            return ret;
 800922e:	8a3b      	ldrh	r3, [r7, #16]
 8009230:	e0a8      	b.n	8009384 <ndefT2TPollerNdefDetect+0x2b8>
        }
        offset++;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	3301      	adds	r3, #1
 8009236:	617b      	str	r3, [r7, #20]
        lenTLV = data[0];
 8009238:	7b3b      	ldrb	r3, [r7, #12]
 800923a:	827b      	strh	r3, [r7, #18]
        if( lenTLV == NDEF_T2T_3_BYTES_TLV_LEN )
 800923c:	8a7b      	ldrh	r3, [r7, #18]
 800923e:	2bff      	cmp	r3, #255	; 0xff
 8009240:	d11d      	bne.n	800927e <ndefT2TPollerNdefDetect+0x1b2>
        {
            ret = ndefT2TPollerReadBytes(ctx, offset, 2, data, NULL);
 8009242:	f107 030c 	add.w	r3, r7, #12
 8009246:	2200      	movs	r2, #0
 8009248:	9200      	str	r2, [sp, #0]
 800924a:	2202      	movs	r2, #2
 800924c:	6979      	ldr	r1, [r7, #20]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7ff fe42 	bl	8008ed8 <ndefT2TPollerReadBytes>
 8009254:	4603      	mov	r3, r0
 8009256:	823b      	strh	r3, [r7, #16]
            if( ret != ERR_NONE )
 8009258:	8a3b      	ldrh	r3, [r7, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <ndefT2TPollerNdefDetect+0x196>
            {
                /* Conclude procedure */
                return ret;
 800925e:	8a3b      	ldrh	r3, [r7, #16]
 8009260:	e090      	b.n	8009384 <ndefT2TPollerNdefDetect+0x2b8>
            }
            offset += 2U;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	3302      	adds	r3, #2
 8009266:	617b      	str	r3, [r7, #20]
            lenTLV = GETU16(&data[0]);
 8009268:	7b3b      	ldrb	r3, [r7, #12]
 800926a:	021b      	lsls	r3, r3, #8
 800926c:	b21a      	sxth	r2, r3
 800926e:	f107 030c 	add.w	r3, r7, #12
 8009272:	3301      	adds	r3, #1
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	b21b      	sxth	r3, r3
 8009278:	4313      	orrs	r3, r2
 800927a:	b21b      	sxth	r3, r3
 800927c:	827b      	strh	r3, [r7, #18]
        }

        if( (typeTLV == NDEF_T2T_TLV_LOCK_CTRL) || (typeTLV == NDEF_T2T_TLV_MEMORY_CTRL) )
 800927e:	7bfb      	ldrb	r3, [r7, #15]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d002      	beq.n	800928a <ndefT2TPollerNdefDetect+0x1be>
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	2b02      	cmp	r3, #2
 8009288:	d101      	bne.n	800928e <ndefT2TPollerNdefDetect+0x1c2>
        {
            /* No support of Lock control or Memory control in this version */
            return ERR_REQUEST;
 800928a:	2305      	movs	r3, #5
 800928c:	e07a      	b.n	8009384 <ndefT2TPollerNdefDetect+0x2b8>
        }
        /* NDEF message present TLV TS T2T v1.0 7.5.1.4 */
        if( typeTLV == NDEF_T2T_TLV_NDEF_MESSAGE )
 800928e:	7bfb      	ldrb	r3, [r7, #15]
 8009290:	2b03      	cmp	r3, #3
 8009292:	d168      	bne.n	8009366 <ndefT2TPollerNdefDetect+0x29a>
        {
            /* Read length TS T2T v1.0 7.5.1.5 */
            ctx->messageLen    = lenTLV;
 8009294:	8a7a      	ldrh	r2, [r7, #18]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            ctx->messageOffset = offset;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            if( ctx->messageLen == 0U )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d110      	bne.n	80092d0 <ndefT2TPollerNdefDetect+0x204>
            {
                if( !(ndefT2TIsReadWriteAccessGranted(ctx)) )
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d104      	bne.n	80092c2 <ndefT2TPollerNdefDetect+0x1f6>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <ndefT2TPollerNdefDetect+0x1fa>
                {
                    /* Conclude procedure  */
                    return ERR_REQUEST;
 80092c2:	2305      	movs	r3, #5
 80092c4:	e05e      	b.n	8009384 <ndefT2TPollerNdefDetect+0x2b8>
                }
                 /* Empty message found TS T2T v1.0 7.5.1.6 & TS T2T v1.0 7.4.2.1 */
                ctx->state = NDEF_STATE_INITIALIZED;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80092ce:	e01e      	b.n	800930e <ndefT2TPollerNdefDetect+0x242>
            }
            else
            {
                if( (ndefT2TIsReadWriteAccessGranted(ctx)) )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d109      	bne.n	80092ee <ndefT2TPollerNdefDetect+0x222>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d104      	bne.n	80092ee <ndefT2TPollerNdefDetect+0x222>
                {
                    /* Empty message found TS T2T v1.0 7.5.1.7 & TS T2T v1.0 7.4.3.1 */
                    ctx->state = NDEF_STATE_READWRITE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2202      	movs	r2, #2
 80092e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80092ec:	e00f      	b.n	800930e <ndefT2TPollerNdefDetect+0x242>
                }
                else
                {
                    if( !(ndefT2TIsReadOnlyAccessGranted(ctx)) )
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d104      	bne.n	8009302 <ndefT2TPollerNdefDetect+0x236>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80092fe:	2b0f      	cmp	r3, #15
 8009300:	d001      	beq.n	8009306 <ndefT2TPollerNdefDetect+0x23a>
                    {
                        /* Conclude procedure  */
                        return ERR_REQUEST;
 8009302:	2305      	movs	r3, #5
 8009304:	e03e      	b.n	8009384 <ndefT2TPollerNdefDetect+0x2b8>
                    }
                     /* Empty message found TS T2T v1.0 7.5.1.7 & TS T2T v1.0 7.4.4.1 */
                    ctx->state = NDEF_STATE_READONLY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2203      	movs	r2, #3
 800930a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                }
            }
            if( info != NULL )
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d026      	beq.n	8009362 <ndefT2TPollerNdefDetect+0x296>
            {
                info->state                = ctx->state;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	741a      	strb	r2, [r3, #16]
                info->majorVersion         = ndefMajorVersion(ctx->cc.t4t.vNo);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8009324:	091b      	lsrs	r3, r3, #4
 8009326:	b2da      	uxtb	r2, r3
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	701a      	strb	r2, [r3, #0]
                info->minorVersion         = ndefMinorVersion(ctx->cc.t4t.vNo);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8009332:	f003 030f 	and.w	r3, r3, #15
 8009336:	b2da      	uxtb	r2, r3
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	705a      	strb	r2, [r3, #1]
                info->areaLen              = ctx->areaLen;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	605a      	str	r2, [r3, #4]
                info->areaAvalableSpaceLen = ctx->areaLen - ctx->messageOffset;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009352:	1ad2      	subs	r2, r2, r3
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	609a      	str	r2, [r3, #8]
                info->messageLen           = ctx->messageLen;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	60da      	str	r2, [r3, #12]
            }
            return ERR_NONE;
 8009362:	2300      	movs	r3, #0
 8009364:	e00e      	b.n	8009384 <ndefT2TPollerNdefDetect+0x2b8>
        }
        offset += lenTLV;
 8009366:	8a7b      	ldrh	r3, [r7, #18]
 8009368:	697a      	ldr	r2, [r7, #20]
 800936a:	4413      	add	r3, r2
 800936c:	617b      	str	r3, [r7, #20]
    while ( (offset < (NDEF_T2T_AREA_OFFSET + ctx->areaLen)) )
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009374:	3310      	adds	r3, #16
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	429a      	cmp	r2, r3
 800937a:	f4ff af26 	bcc.w	80091ca <ndefT2TPollerNdefDetect+0xfe>
 800937e:	e000      	b.n	8009382 <ndefT2TPollerNdefDetect+0x2b6>
            break;
 8009380:	bf00      	nop
    }
    return ERR_REQUEST;
 8009382:	2305      	movs	r3, #5
}
 8009384:	4618      	mov	r0, r3
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <ndefT2TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af02      	add	r7, sp, #8
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
 8009398:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00a      	beq.n	80093b6 <ndefT2TPollerReadRawMessage+0x2a>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d106      	bne.n	80093b6 <ndefT2TPollerReadRawMessage+0x2a>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	785b      	ldrb	r3, [r3, #1]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d102      	bne.n	80093b6 <ndefT2TPollerReadRawMessage+0x2a>
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d101      	bne.n	80093ba <ndefT2TPollerReadRawMessage+0x2e>
    {
        return ERR_PARAM;
 80093b6:	2307      	movs	r3, #7
 80093b8:	e024      	b.n	8009404 <ndefT2TPollerReadRawMessage+0x78>

    /* TS T2T v1.0 7.5.2.1: T2T NDEF Detect should have been called before NDEF read procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T2T v1.0 7.5.2.3: check presence of NDEF message */
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d801      	bhi.n	80093c8 <ndefT2TPollerReadRawMessage+0x3c>
    {
        /* Conclude procedure TS T4T v1.0 7.2.2.2 */
        return ERR_WRONG_STATE;
 80093c4:	2321      	movs	r3, #33	; 0x21
 80093c6:	e01d      	b.n	8009404 <ndefT2TPollerReadRawMessage+0x78>
    }

    if( ctx->messageLen > bufLen )
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d201      	bcs.n	80093d8 <ndefT2TPollerReadRawMessage+0x4c>
    {
        return ERR_NOMEM;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e015      	b.n	8009404 <ndefT2TPollerReadRawMessage+0x78>
    }

    /* Current implementation does not support Rsvd_area */
    ret = ndefT2TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f7ff fd74 	bl	8008ed8 <ndefT2TPollerReadBytes>
 80093f0:	4603      	mov	r3, r0
 80093f2:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 80093f4:	8afb      	ldrh	r3, [r7, #22]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d003      	beq.n	8009402 <ndefT2TPollerReadRawMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return ret;
 8009402:	8afb      	ldrh	r3, [r7, #22]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <ndefT2TPollerWriteBlock>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
static ReturnCode ndefT2TPollerWriteBlock(ndefContext *ctx, uint16_t blockAddr, const uint8_t *buf)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	460b      	mov	r3, r1
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	817b      	strh	r3, [r7, #10]
    ReturnCode           ret;
    uint8_t              secNo;
    uint8_t              blNo;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00a      	beq.n	8009436 <ndefT2TPollerWriteBlock+0x2a>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d106      	bne.n	8009436 <ndefT2TPollerWriteBlock+0x2a>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	785b      	ldrb	r3, [r3, #1]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d102      	bne.n	8009436 <ndefT2TPollerWriteBlock+0x2a>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <ndefT2TPollerWriteBlock+0x2e>
    {
        return ERR_PARAM;
 8009436:	2307      	movs	r3, #7
 8009438:	e022      	b.n	8009480 <ndefT2TPollerWriteBlock+0x74>
    }

    secNo = (uint8_t)(blockAddr >> 8U);
 800943a:	897b      	ldrh	r3, [r7, #10]
 800943c:	0a1b      	lsrs	r3, r3, #8
 800943e:	b29b      	uxth	r3, r3
 8009440:	75fb      	strb	r3, [r7, #23]
    blNo  = (uint8_t)blockAddr;
 8009442:	897b      	ldrh	r3, [r7, #10]
 8009444:	75bb      	strb	r3, [r7, #22]

    if( secNo != ctx->subCtx.t2t.currentSecNo )
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800944c:	7dfa      	ldrb	r2, [r7, #23]
 800944e:	429a      	cmp	r2, r3
 8009450:	d00e      	beq.n	8009470 <ndefT2TPollerWriteBlock+0x64>
    {
        ret = rfalT2TPollerSectorSelect(secNo);
 8009452:	7dfb      	ldrb	r3, [r7, #23]
 8009454:	4618      	mov	r0, r3
 8009456:	f00f f909 	bl	801866c <rfalT2TPollerSectorSelect>
 800945a:	4603      	mov	r3, r0
 800945c:	82bb      	strh	r3, [r7, #20]
        if( ret != ERR_NONE )
 800945e:	8abb      	ldrh	r3, [r7, #20]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d001      	beq.n	8009468 <ndefT2TPollerWriteBlock+0x5c>
        {
            return ret;
 8009464:	8abb      	ldrh	r3, [r7, #20]
 8009466:	e00b      	b.n	8009480 <ndefT2TPollerWriteBlock+0x74>
        }
        ctx->subCtx.t2t.currentSecNo = secNo;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	7dfa      	ldrb	r2, [r7, #23]
 800946c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    }

    ret = rfalT2TPollerWrite(blNo, buf);
 8009470:	7dbb      	ldrb	r3, [r7, #22]
 8009472:	6879      	ldr	r1, [r7, #4]
 8009474:	4618      	mov	r0, r3
 8009476:	f00f f8c1 	bl	80185fc <rfalT2TPollerWrite>
 800947a:	4603      	mov	r3, r0
 800947c:	82bb      	strh	r3, [r7, #20]

    return ret;
 800947e:	8abb      	ldrh	r3, [r7, #20]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <ndefT2TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b08e      	sub	sp, #56	; 0x38
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
 8009494:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint32_t             lvOffset = offset;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t             lvLen    = len;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	633b      	str	r3, [r7, #48]	; 0x30
    const uint8_t *      lvBuf    = buf;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t             blockAddr;
    uint8_t              byteNo;
    uint8_t              le;
    uint8_t              tempBuf[NDEF_T2T_READ_RESP_SIZE];

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (lvLen == 0U) )
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00a      	beq.n	80094be <ndefT2TPollerWriteBytes+0x36>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d106      	bne.n	80094be <ndefT2TPollerWriteBytes+0x36>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	785b      	ldrb	r3, [r3, #1]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d102      	bne.n	80094be <ndefT2TPollerWriteBytes+0x36>
 80094b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <ndefT2TPollerWriteBytes+0x3a>
    {
        return ERR_PARAM;
 80094be:	2307      	movs	r3, #7
 80094c0:	e076      	b.n	80095b0 <ndefT2TPollerWriteBytes+0x128>
    }

    ndefT2TInvalidateCache(ctx);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f04f 32ff 	mov.w	r2, #4294967295
 80094c8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    do
    {
        blockAddr = (uint16_t)(lvOffset / NDEF_T2T_BLOCK_SIZE);
 80094cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ce:	089b      	lsrs	r3, r3, #2
 80094d0:	853b      	strh	r3, [r7, #40]	; 0x28
        byteNo    =  (uint8_t)(lvOffset % NDEF_T2T_BLOCK_SIZE);
 80094d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	f003 0303 	and.w	r3, r3, #3
 80094da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        le = (lvLen < NDEF_T2T_BLOCK_SIZE) ? (uint8_t)lvLen : (uint8_t)NDEF_T2T_BLOCK_SIZE;
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	2b03      	cmp	r3, #3
 80094e2:	d802      	bhi.n	80094ea <ndefT2TPollerWriteBytes+0x62>
 80094e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	e000      	b.n	80094ec <ndefT2TPollerWriteBytes+0x64>
 80094ea:	2304      	movs	r3, #4
 80094ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if( (byteNo != 0U ) || (lvLen < NDEF_T2T_BLOCK_SIZE) )
 80094f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d102      	bne.n	80094fe <ndefT2TPollerWriteBytes+0x76>
 80094f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d838      	bhi.n	8009570 <ndefT2TPollerWriteBytes+0xe8>
        {
            ret = ndefT2TPollerReadBlock(ctx, blockAddr, tempBuf);
 80094fe:	f107 0214 	add.w	r2, r7, #20
 8009502:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009504:	4619      	mov	r1, r3
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f7ff fc9e 	bl	8008e48 <ndefT2TPollerReadBlock>
 800950c:	4603      	mov	r3, r0
 800950e:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 8009510:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <ndefT2TPollerWriteBytes+0x92>
            {
                return ret;
 8009516:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009518:	e04a      	b.n	80095b0 <ndefT2TPollerWriteBytes+0x128>
            }
            if( (NDEF_T2T_BLOCK_SIZE - byteNo) < le )
 800951a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800951e:	f1c3 0204 	rsb	r2, r3, #4
 8009522:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009526:	429a      	cmp	r2, r3
 8009528:	d205      	bcs.n	8009536 <ndefT2TPollerWriteBytes+0xae>
            {
                le = NDEF_T2T_BLOCK_SIZE - byteNo;
 800952a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800952e:	f1c3 0304 	rsb	r3, r3, #4
 8009532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }
            if( le > 0U )
 8009536:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00a      	beq.n	8009554 <ndefT2TPollerWriteBytes+0xcc>
            {
                (void)ST_MEMCPY(&tempBuf[byteNo], lvBuf, le);
 800953e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009542:	f107 0214 	add.w	r2, r7, #20
 8009546:	4413      	add	r3, r2
 8009548:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800954c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800954e:	4618      	mov	r0, r3
 8009550:	f00f fbde 	bl	8018d10 <memcpy>
            }
            ret = ndefT2TPollerWriteBlock(ctx, blockAddr, tempBuf);
 8009554:	f107 0214 	add.w	r2, r7, #20
 8009558:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800955a:	4619      	mov	r1, r3
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f7ff ff55 	bl	800940c <ndefT2TPollerWriteBlock>
 8009562:	4603      	mov	r3, r0
 8009564:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 8009566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00e      	beq.n	800958a <ndefT2TPollerWriteBytes+0x102>
            {
                return ret;
 800956c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800956e:	e01f      	b.n	80095b0 <ndefT2TPollerWriteBytes+0x128>
            }
        }
        else
        {
            ret = ndefT2TPollerWriteBlock(ctx, blockAddr, lvBuf);
 8009570:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009574:	4619      	mov	r1, r3
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f7ff ff48 	bl	800940c <ndefT2TPollerWriteBlock>
 800957c:	4603      	mov	r3, r0
 800957e:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 8009580:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <ndefT2TPollerWriteBytes+0x102>
            {
                return ret;
 8009586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009588:	e012      	b.n	80095b0 <ndefT2TPollerWriteBytes+0x128>
            }
        }
        lvBuf     = &lvBuf[le];
 800958a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800958e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009590:	4413      	add	r3, r2
 8009592:	62fb      	str	r3, [r7, #44]	; 0x2c
        lvOffset += le;
 8009594:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800959a:	4413      	add	r3, r2
 800959c:	637b      	str	r3, [r7, #52]	; 0x34
        lvLen    -= le;
 800959e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	633b      	str	r3, [r7, #48]	; 0x30

    } while( lvLen != 0U );
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d18e      	bne.n	80094cc <ndefT2TPollerWriteBytes+0x44>

    return ERR_NONE;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3738      	adds	r7, #56	; 0x38
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <ndefT2TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t              buf[NDEF_T2T_BLOCK_SIZE];
    uint8_t              dataIt;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d007      	beq.n	80095d8 <ndefT2TPollerWriteRawMessageLen+0x20>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d103      	bne.n	80095d8 <ndefT2TPollerWriteRawMessageLen+0x20>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	785b      	ldrb	r3, [r3, #1]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <ndefT2TPollerWriteRawMessageLen+0x24>
    {
        return ERR_PARAM;
 80095d8:	2307      	movs	r3, #7
 80095da:	e077      	b.n	80096cc <ndefT2TPollerWriteRawMessageLen+0x114>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d006      	beq.n	80095f4 <ndefT2TPollerWriteRawMessageLen+0x3c>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d001      	beq.n	80095f4 <ndefT2TPollerWriteRawMessageLen+0x3c>
    {
        return ERR_WRONG_STATE;
 80095f0:	2321      	movs	r3, #33	; 0x21
 80095f2:	e06b      	b.n	80096cc <ndefT2TPollerWriteRawMessageLen+0x114>
    }
    dataIt = 0U;
 80095f4:	2300      	movs	r3, #0
 80095f6:	73fb      	strb	r3, [r7, #15]
    buf[dataIt] = NDEF_T2T_TLV_NDEF_MESSAGE;
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	3310      	adds	r3, #16
 80095fc:	443b      	add	r3, r7
 80095fe:	2203      	movs	r2, #3
 8009600:	f803 2c08 	strb.w	r2, [r3, #-8]
    dataIt++;
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	3301      	adds	r3, #1
 8009608:	73fb      	strb	r3, [r7, #15]
    if( rawMessageLen <= NDEF_SHORT_VFIELD_MAX_LEN )
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	2bfe      	cmp	r3, #254	; 0xfe
 800960e:	d80a      	bhi.n	8009626 <ndefT2TPollerWriteRawMessageLen+0x6e>
    {
        buf[dataIt] = (uint8_t) rawMessageLen;
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	b2d2      	uxtb	r2, r2
 8009616:	3310      	adds	r3, #16
 8009618:	443b      	add	r3, r7
 800961a:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	3301      	adds	r3, #1
 8009622:	73fb      	strb	r3, [r7, #15]
 8009624:	e014      	b.n	8009650 <ndefT2TPollerWriteRawMessageLen+0x98>
    }
    else
    {
        buf[dataIt] = (uint8_t) (rawMessageLen >> 8U);
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	0a1a      	lsrs	r2, r3, #8
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	b2d2      	uxtb	r2, r2
 800962e:	3310      	adds	r3, #16
 8009630:	443b      	add	r3, r7
 8009632:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 8009636:	7bfb      	ldrb	r3, [r7, #15]
 8009638:	3301      	adds	r3, #1
 800963a:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t) rawMessageLen;
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	b2d2      	uxtb	r2, r2
 8009642:	3310      	adds	r3, #16
 8009644:	443b      	add	r3, r7
 8009646:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800964a:	7bfb      	ldrb	r3, [r7, #15]
 800964c:	3301      	adds	r3, #1
 800964e:	73fb      	strb	r3, [r7, #15]
    }
    if( rawMessageLen == 0U )
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d108      	bne.n	8009668 <ndefT2TPollerWriteRawMessageLen+0xb0>
    {
        buf[dataIt] = NDEF_T2T_TLV_TERMINATOR;
 8009656:	7bfb      	ldrb	r3, [r7, #15]
 8009658:	3310      	adds	r3, #16
 800965a:	443b      	add	r3, r7
 800965c:	22fe      	movs	r2, #254	; 0xfe
 800965e:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	3301      	adds	r3, #1
 8009666:	73fb      	strb	r3, [r7, #15]
    }

    ret = ndefT2TPollerWriteBytes(ctx, ctx->subCtx.t2t.offsetNdefTLV, buf, dataIt);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	f107 0208 	add.w	r2, r7, #8
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7ff ff07 	bl	8009488 <ndefT2TPollerWriteBytes>
 800967a:	4603      	mov	r3, r0
 800967c:	81bb      	strh	r3, [r7, #12]
    if( (ret != ERR_NONE) && (rawMessageLen != 0U) && ((ctx->messageOffset + rawMessageLen) < ctx->areaLen) )
 800967e:	89bb      	ldrh	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d022      	beq.n	80096ca <ndefT2TPollerWriteRawMessageLen+0x112>
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d01f      	beq.n	80096ca <ndefT2TPollerWriteRawMessageLen+0x112>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	441a      	add	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800969a:	429a      	cmp	r2, r3
 800969c:	d215      	bcs.n	80096ca <ndefT2TPollerWriteRawMessageLen+0x112>
    {
        /* Write Terminator TLV */
        dataIt = 0U;
 800969e:	2300      	movs	r3, #0
 80096a0:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = NDEF_T2T_TLV_TERMINATOR;
 80096a2:	7bfb      	ldrb	r3, [r7, #15]
 80096a4:	3310      	adds	r3, #16
 80096a6:	443b      	add	r3, r7
 80096a8:	22fe      	movs	r2, #254	; 0xfe
 80096aa:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	3301      	adds	r3, #1
 80096b2:	73fb      	strb	r3, [r7, #15]
        (void)ndefT2TPollerWriteBytes(ctx, ctx->messageOffset + rawMessageLen, buf, dataIt );
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	18d1      	adds	r1, r2, r3
 80096be:	7bfb      	ldrb	r3, [r7, #15]
 80096c0:	f107 0208 	add.w	r2, r7, #8
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7ff fedf 	bl	8009488 <ndefT2TPollerWriteBytes>
    }

    return ret;
 80096ca:	89bb      	ldrh	r3, [r7, #12]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <ndefT2TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00d      	beq.n	8009702 <ndefT2TPollerWriteRawMessage+0x2e>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d109      	bne.n	8009702 <ndefT2TPollerWriteRawMessage+0x2e>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	785b      	ldrb	r3, [r3, #1]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d105      	bne.n	8009702 <ndefT2TPollerWriteRawMessage+0x2e>
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d104      	bne.n	8009706 <ndefT2TPollerWriteRawMessage+0x32>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <ndefT2TPollerWriteRawMessage+0x32>
    {
        return ERR_PARAM;
 8009702:	2307      	movs	r3, #7
 8009704:	e04b      	b.n	800979e <ndefT2TPollerWriteRawMessage+0xca>

    /* TS T2T v1.0 7.5.3.1/2: T4T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T2T v1.0 7.5.3.3: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800970c:	2b01      	cmp	r3, #1
 800970e:	d006      	beq.n	800971e <ndefT2TPollerWriteRawMessage+0x4a>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009716:	2b02      	cmp	r3, #2
 8009718:	d001      	beq.n	800971e <ndefT2TPollerWriteRawMessage+0x4a>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 800971a:	2321      	movs	r3, #33	; 0x21
 800971c:	e03f      	b.n	800979e <ndefT2TPollerWriteRawMessage+0xca>
    }

    /* TS T2T v1.0 7.5.3.3: verify available space */
    ret = ndefT2TPollerCheckAvailableSpace(ctx, bufLen);
 800971e:	6879      	ldr	r1, [r7, #4]
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 f92c 	bl	800997e <ndefT2TPollerCheckAvailableSpace>
 8009726:	4603      	mov	r3, r0
 8009728:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800972a:	8afb      	ldrh	r3, [r7, #22]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <ndefT2TPollerWriteRawMessage+0x60>
    {
        /* Conclude procedures */
        return ERR_PARAM;
 8009730:	2307      	movs	r3, #7
 8009732:	e034      	b.n	800979e <ndefT2TPollerWriteRawMessage+0xca>
    }

    /* TS T2T v1.0 7.5.3.4: reset L_Field to 0                */
    /* and update ctx->messageOffset according to L-field len */
    ret = ndefT2TPollerBeginWriteMessage(ctx, bufLen);
 8009734:	6879      	ldr	r1, [r7, #4]
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 f957 	bl	80099ea <ndefT2TPollerBeginWriteMessage>
 800973c:	4603      	mov	r3, r0
 800973e:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8009740:	8afb      	ldrh	r3, [r7, #22]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d005      	beq.n	8009752 <ndefT2TPollerWriteRawMessage+0x7e>
    {
        ctx->state = NDEF_STATE_INVALID;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return ret;
 800974e:	8afb      	ldrh	r3, [r7, #22]
 8009750:	e025      	b.n	800979e <ndefT2TPollerWriteRawMessage+0xca>
    }

    if( bufLen != 0U )
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d021      	beq.n	800979c <ndefT2TPollerWriteRawMessage+0xc8>
    {
       /* TS T2T v1.0 7.5.3.5: write new NDEF message */
        ret = ndefT2TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f7ff fe90 	bl	8009488 <ndefT2TPollerWriteBytes>
 8009768:	4603      	mov	r3, r0
 800976a:	82fb      	strh	r3, [r7, #22]
        if  (ret != ERR_NONE)
 800976c:	8afb      	ldrh	r3, [r7, #22]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d005      	beq.n	800977e <ndefT2TPollerWriteRawMessage+0xaa>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800977a:	8afb      	ldrh	r3, [r7, #22]
 800977c:	e00f      	b.n	800979e <ndefT2TPollerWriteRawMessage+0xca>
        }

        /* TS T2T v1.0 7.5.3.6 & 7.5.3.7: update L_Field and write Terminator TLV */
        ret = ndefT2TPollerEndWriteMessage(ctx, bufLen);
 800977e:	6879      	ldr	r1, [r7, #4]
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f000 f984 	bl	8009a8e <ndefT2TPollerEndWriteMessage>
 8009786:	4603      	mov	r3, r0
 8009788:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800978a:	8afb      	ldrh	r3, [r7, #22]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d005      	beq.n	800979c <ndefT2TPollerWriteRawMessage+0xc8>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 8009798:	8afb      	ldrh	r3, [r7, #22]
 800979a:	e000      	b.n	800979e <ndefT2TPollerWriteRawMessage+0xca>
        }
    }

    return ret;
 800979c:	8afb      	ldrh	r3, [r7, #22]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3718      	adds	r7, #24
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
	...

080097a8 <ndefT2TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT2TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b088      	sub	sp, #32
 80097ac:	af02      	add	r7, sp, #8
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
    uint8_t              dataIt;
    static const uint8_t emptyNdef[] = {NDEF_T2T_TLV_NDEF_MESSAGE, 0x00U, NDEF_T2T_TLV_TERMINATOR, 0x00U};

    NO_WARNING(options);

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d007      	beq.n	80097ca <ndefT2TPollerTagFormat+0x22>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d103      	bne.n	80097ca <ndefT2TPollerTagFormat+0x22>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	785b      	ldrb	r3, [r3, #1]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <ndefT2TPollerTagFormat+0x26>
    {
        return ERR_PARAM;
 80097ca:	2307      	movs	r3, #7
 80097cc:	e0a0      	b.n	8009910 <ndefT2TPollerTagFormat+0x168>
    }

    /*
     * Read CC area
     */
    ret = ndefT2TPollerReadBytes(ctx, NDEF_T2T_CC_OFFSET, NDEF_T2T_CC_LEN, ctx->ccBuf, NULL);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	339c      	adds	r3, #156	; 0x9c
 80097d2:	2200      	movs	r2, #0
 80097d4:	9200      	str	r2, [sp, #0]
 80097d6:	2204      	movs	r2, #4
 80097d8:	210c      	movs	r1, #12
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f7ff fb7c 	bl	8008ed8 <ndefT2TPollerReadBytes>
 80097e0:	4603      	mov	r3, r0
 80097e2:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 80097e4:	8afb      	ldrh	r3, [r7, #22]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <ndefT2TPollerTagFormat+0x46>
    {
        return ret;
 80097ea:	8afb      	ldrh	r3, [r7, #22]
 80097ec:	e090      	b.n	8009910 <ndefT2TPollerTagFormat+0x168>
    }

    ndefT2TInvalidateCache(ctx);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f04f 32ff 	mov.w	r2, #4294967295
 80097f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    /*
     * Write CC only in case of virgin CC area
     */
    if( (ctx->ccBuf[NDEF_T2T_CC_0] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_1] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_2] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_3] == 0U) )
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d17e      	bne.n	8009900 <ndefT2TPollerTagFormat+0x158>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009808:	2b00      	cmp	r3, #0
 800980a:	d179      	bne.n	8009900 <ndefT2TPollerTagFormat+0x158>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8009812:	2b00      	cmp	r3, #0
 8009814:	d174      	bne.n	8009900 <ndefT2TPollerTagFormat+0x158>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800981c:	2b00      	cmp	r3, #0
 800981e:	d16f      	bne.n	8009900 <ndefT2TPollerTagFormat+0x158>
    {
        dataIt = 0U;
 8009820:	2300      	movs	r3, #0
 8009822:	757b      	strb	r3, [r7, #21]
        if( cc == NULL )
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d124      	bne.n	8009874 <ndefT2TPollerTagFormat+0xcc>
        {
            /* Use default values if no cc provided */
            ctx->ccBuf[dataIt] = NDEF_T2T_MAGIC;
 800982a:	7d7b      	ldrb	r3, [r7, #21]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	4413      	add	r3, r2
 8009830:	22e1      	movs	r2, #225	; 0xe1
 8009832:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 8009836:	7d7b      	ldrb	r3, [r7, #21]
 8009838:	3301      	adds	r3, #1
 800983a:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = NDEF_T2T_VERSION_1_0;
 800983c:	7d7b      	ldrb	r3, [r7, #21]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	4413      	add	r3, r2
 8009842:	2210      	movs	r2, #16
 8009844:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 8009848:	7d7b      	ldrb	r3, [r7, #21]
 800984a:	3301      	adds	r3, #1
 800984c:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = NDEF_T2T_STATIC_MEM_SIZE / NDEF_T2T_SIZE_DIVIDER;
 800984e:	7d7b      	ldrb	r3, [r7, #21]
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	4413      	add	r3, r2
 8009854:	2206      	movs	r2, #6
 8009856:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800985a:	7d7b      	ldrb	r3, [r7, #21]
 800985c:	3301      	adds	r3, #1
 800985e:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = 0x00U;
 8009860:	7d7b      	ldrb	r3, [r7, #21]
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	4413      	add	r3, r2
 8009866:	2200      	movs	r2, #0
 8009868:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800986c:	7d7b      	ldrb	r3, [r7, #21]
 800986e:	3301      	adds	r3, #1
 8009870:	757b      	strb	r3, [r7, #21]
 8009872:	e037      	b.n	80098e4 <ndefT2TPollerTagFormat+0x13c>
        }
        else
        {
            ctx->ccBuf[dataIt] = cc->t2t.magicNumber;
 8009874:	7d7b      	ldrb	r3, [r7, #21]
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	7811      	ldrb	r1, [r2, #0]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	4413      	add	r3, r2
 800987e:	460a      	mov	r2, r1
 8009880:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 8009884:	7d7b      	ldrb	r3, [r7, #21]
 8009886:	3301      	adds	r3, #1
 8009888:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = (uint8_t)(cc->t2t.majorVersion << 4U) | cc->t2t.minorVersion;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	785b      	ldrb	r3, [r3, #1]
 800988e:	011b      	lsls	r3, r3, #4
 8009890:	b2d9      	uxtb	r1, r3
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	789a      	ldrb	r2, [r3, #2]
 8009896:	7d7b      	ldrb	r3, [r7, #21]
 8009898:	430a      	orrs	r2, r1
 800989a:	b2d1      	uxtb	r1, r2
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	4413      	add	r3, r2
 80098a0:	460a      	mov	r2, r1
 80098a2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 80098a6:	7d7b      	ldrb	r3, [r7, #21]
 80098a8:	3301      	adds	r3, #1
 80098aa:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = cc->t2t.size;
 80098ac:	7d7b      	ldrb	r3, [r7, #21]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	78d1      	ldrb	r1, [r2, #3]
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	4413      	add	r3, r2
 80098b6:	460a      	mov	r2, r1
 80098b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 80098bc:	7d7b      	ldrb	r3, [r7, #21]
 80098be:	3301      	adds	r3, #1
 80098c0:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = (uint8_t)(cc->t2t.readAccess << 4U) | cc->t2t.writeAccess;
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	791b      	ldrb	r3, [r3, #4]
 80098c6:	011b      	lsls	r3, r3, #4
 80098c8:	b2d9      	uxtb	r1, r3
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	795a      	ldrb	r2, [r3, #5]
 80098ce:	7d7b      	ldrb	r3, [r7, #21]
 80098d0:	430a      	orrs	r2, r1
 80098d2:	b2d1      	uxtb	r1, r2
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	4413      	add	r3, r2
 80098d8:	460a      	mov	r2, r1
 80098da:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 80098de:	7d7b      	ldrb	r3, [r7, #21]
 80098e0:	3301      	adds	r3, #1
 80098e2:	757b      	strb	r3, [r7, #21]
        }
        ret = ndefT2TPollerWriteBlock(ctx, NDEF_T2T_CC_OFFSET/NDEF_T2T_BLOCK_SIZE, ctx->ccBuf);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	339c      	adds	r3, #156	; 0x9c
 80098e8:	461a      	mov	r2, r3
 80098ea:	2103      	movs	r1, #3
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f7ff fd8d 	bl	800940c <ndefT2TPollerWriteBlock>
 80098f2:	4603      	mov	r3, r0
 80098f4:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 80098f6:	8afb      	ldrh	r3, [r7, #22]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <ndefT2TPollerTagFormat+0x158>
        {
            return ret;
 80098fc:	8afb      	ldrh	r3, [r7, #22]
 80098fe:	e007      	b.n	8009910 <ndefT2TPollerTagFormat+0x168>
    }

    /*
     * Write NDEF place holder
     */
    ret = ndefT2TPollerWriteBlock(ctx, NDEF_T2T_AREA_OFFSET/NDEF_T2T_BLOCK_SIZE, emptyNdef);
 8009900:	4a05      	ldr	r2, [pc, #20]	; (8009918 <ndefT2TPollerTagFormat+0x170>)
 8009902:	2104      	movs	r1, #4
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f7ff fd81 	bl	800940c <ndefT2TPollerWriteBlock>
 800990a:	4603      	mov	r3, r0
 800990c:	82fb      	strh	r3, [r7, #22]

    return ret;
 800990e:	8afb      	ldrh	r3, [r7, #22]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	0801ae80 	.word	0x0801ae80

0800991c <ndefT2TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT2TPollerCheckPresence(ndefContext *ctx)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
    ReturnCode           ret;
    uint16_t             blockAddr;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d007      	beq.n	800993a <ndefT2TPollerCheckPresence+0x1e>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d103      	bne.n	800993a <ndefT2TPollerCheckPresence+0x1e>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	785b      	ldrb	r3, [r3, #1]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <ndefT2TPollerCheckPresence+0x22>
    {
        return ERR_PARAM;
 800993a:	2307      	movs	r3, #7
 800993c:	e01b      	b.n	8009976 <ndefT2TPollerCheckPresence+0x5a>
    }

    blockAddr = 0U;
 800993e:	2300      	movs	r3, #0
 8009940:	81fb      	strh	r3, [r7, #14]
    ret = ndefT2TPollerReadBlock(ctx, blockAddr, ctx->subCtx.t2t.cacheBuf);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f103 02b5 	add.w	r2, r3, #181	; 0xb5
 8009948:	89fb      	ldrh	r3, [r7, #14]
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff fa7b 	bl	8008e48 <ndefT2TPollerReadBlock>
 8009952:	4603      	mov	r3, r0
 8009954:	81bb      	strh	r3, [r7, #12]
    if( ret != ERR_NONE )
 8009956:	89bb      	ldrh	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d006      	beq.n	800996a <ndefT2TPollerCheckPresence+0x4e>
    {
        ndefT2TInvalidateCache(ctx);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f04f 32ff 	mov.w	r2, #4294967295
 8009962:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        return ret;
 8009966:	89bb      	ldrh	r3, [r7, #12]
 8009968:	e005      	b.n	8009976 <ndefT2TPollerCheckPresence+0x5a>
    }
    ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 800996a:	89fb      	ldrh	r3, [r7, #14]
 800996c:	009a      	lsls	r2, r3, #2
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    return ERR_NONE;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <ndefT2TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT2TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800997e:	b480      	push	{r7}
 8009980:	b085      	sub	sp, #20
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	6039      	str	r1, [r7, #0]
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d007      	beq.n	800999e <ndefT2TPollerCheckAvailableSpace+0x20>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d103      	bne.n	800999e <ndefT2TPollerCheckAvailableSpace+0x20>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	785b      	ldrb	r3, [r3, #1]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <ndefT2TPollerCheckAvailableSpace+0x24>
    {
        return ERR_PARAM;
 800999e:	2307      	movs	r3, #7
 80099a0:	e01e      	b.n	80099e0 <ndefT2TPollerCheckAvailableSpace+0x62>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d101      	bne.n	80099b0 <ndefT2TPollerCheckAvailableSpace+0x32>
    {
        return ERR_WRONG_STATE;
 80099ac:	2321      	movs	r3, #33	; 0x21
 80099ae:	e017      	b.n	80099e0 <ndefT2TPollerCheckAvailableSpace+0x62>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T2T_TLV_L_3_BYTES_LEN : NDEF_T2T_TLV_L_1_BYTES_LEN;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2bfe      	cmp	r3, #254	; 0xfe
 80099b4:	d901      	bls.n	80099ba <ndefT2TPollerCheckAvailableSpace+0x3c>
 80099b6:	2303      	movs	r3, #3
 80099b8:	e000      	b.n	80099bc <ndefT2TPollerCheckAvailableSpace+0x3e>
 80099ba:	2301      	movs	r3, #1
 80099bc:	60fb      	str	r3, [r7, #12]

    if( (messageLen + ctx->subCtx.t2t.offsetNdefTLV + NDEF_T2T_TLV_T_LEN + lLen) > (ctx->areaLen + NDEF_T2T_AREA_OFFSET) )
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	441a      	add	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4413      	add	r3, r2
 80099cc:	1c5a      	adds	r2, r3, #1
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099d4:	3310      	adds	r3, #16
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d901      	bls.n	80099de <ndefT2TPollerCheckAvailableSpace+0x60>
    {
        return ERR_NOMEM;
 80099da:	2301      	movs	r3, #1
 80099dc:	e000      	b.n	80099e0 <ndefT2TPollerCheckAvailableSpace+0x62>
    }
    return ERR_NONE;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bc80      	pop	{r7}
 80099e8:	4770      	bx	lr

080099ea <ndefT2TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b084      	sub	sp, #16
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d007      	beq.n	8009a0a <ndefT2TPollerBeginWriteMessage+0x20>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d103      	bne.n	8009a0a <ndefT2TPollerBeginWriteMessage+0x20>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	785b      	ldrb	r3, [r3, #1]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <ndefT2TPollerBeginWriteMessage+0x24>
    {
        return ERR_PARAM;
 8009a0a:	2307      	movs	r3, #7
 8009a0c:	e03b      	b.n	8009a86 <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d006      	beq.n	8009a26 <ndefT2TPollerBeginWriteMessage+0x3c>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d001      	beq.n	8009a26 <ndefT2TPollerBeginWriteMessage+0x3c>
    {
        return ERR_WRONG_STATE;
 8009a22:	2321      	movs	r3, #33	; 0x21
 8009a24:	e02f      	b.n	8009a86 <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    /* TS T2T v1.0 7.5.3.4: reset L_Field to 0 */
    ret = ndefT2TPollerWriteRawMessageLen(ctx, 0U);
 8009a26:	2100      	movs	r1, #0
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff fdc5 	bl	80095b8 <ndefT2TPollerWriteRawMessageLen>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 8009a32:	89fb      	ldrh	r3, [r7, #14]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d005      	beq.n	8009a44 <ndefT2TPollerBeginWriteMessage+0x5a>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 8009a40:	89fb      	ldrh	r3, [r7, #14]
 8009a42:	e020      	b.n	8009a86 <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T2T_TLV_L_3_BYTES_LEN : NDEF_T2T_TLV_L_1_BYTES_LEN;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	2bfe      	cmp	r3, #254	; 0xfe
 8009a48:	d901      	bls.n	8009a4e <ndefT2TPollerBeginWriteMessage+0x64>
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e000      	b.n	8009a50 <ndefT2TPollerBeginWriteMessage+0x66>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	60bb      	str	r3, [r7, #8]
    ctx->messageOffset  = ctx->subCtx.t2t.offsetNdefTLV;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += NDEF_T2T_TLV_T_LEN; /* T Len */
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += lLen;               /* L Len */
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	441a      	add	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    ctx->state = NDEF_STATE_INITIALIZED;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <ndefT2TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d007      	beq.n	8009aae <ndefT2TPollerEndWriteMessage+0x20>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d103      	bne.n	8009aae <ndefT2TPollerEndWriteMessage+0x20>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	785b      	ldrb	r3, [r3, #1]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <ndefT2TPollerEndWriteMessage+0x24>
    {
        return ERR_PARAM;
 8009aae:	2307      	movs	r3, #7
 8009ab0:	e025      	b.n	8009afe <ndefT2TPollerEndWriteMessage+0x70>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d001      	beq.n	8009ac0 <ndefT2TPollerEndWriteMessage+0x32>
    {
        return ERR_WRONG_STATE;
 8009abc:	2321      	movs	r3, #33	; 0x21
 8009abe:	e01e      	b.n	8009afe <ndefT2TPollerEndWriteMessage+0x70>
    }

    /* TS T2T v1.0 7.5.3.6 & 7.5.3.7: update L_Field and write Terminator TLV */
    ret = ndefT2TPollerWriteRawMessageLen(ctx, messageLen);
 8009ac0:	6839      	ldr	r1, [r7, #0]
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7ff fd78 	bl	80095b8 <ndefT2TPollerWriteRawMessageLen>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 8009acc:	89fb      	ldrh	r3, [r7, #14]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d005      	beq.n	8009ade <ndefT2TPollerEndWriteMessage+0x50>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 8009ada:	89fb      	ldrh	r3, [r7, #14]
 8009adc:	e00f      	b.n	8009afe <ndefT2TPollerEndWriteMessage+0x70>
    }
    ctx->messageLen = messageLen;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	683a      	ldr	r2, [r7, #0]
 8009ae2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d101      	bne.n	8009af4 <ndefT2TPollerEndWriteMessage+0x66>
 8009af0:	2201      	movs	r2, #1
 8009af2:	e000      	b.n	8009af6 <ndefT2TPollerEndWriteMessage+0x68>
 8009af4:	2202      	movs	r2, #2
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <ndefT3TPollerReadBlocks>:
 ******************************************************************************
 */

/*******************************************************************************/
static ReturnCode ndefT3TPollerReadBlocks( ndefContext *ctx, uint16_t blockNum, uint8_t nbBlocks, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b08e      	sub	sp, #56	; 0x38
 8009b0a:	af02      	add	r7, sp, #8
 8009b0c:	60f8      	str	r0, [r7, #12]
 8009b0e:	607b      	str	r3, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	817b      	strh	r3, [r7, #10]
 8009b14:	4613      	mov	r3, r2
 8009b16:	727b      	strb	r3, [r7, #9]
    ReturnCode                 ret;
    uint16_t                   requestedDataSize;
    rfalNfcfServBlockListParam servBlock;
    rfalNfcfBlockListElem *    listBlocks;
    uint8_t                    index;
    uint16_t                   rcvdLen = 0U;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	827b      	strh	r3, [r7, #18]
    rfalNfcfServ               serviceCodeLst = 0x000BU; /* serviceCodeLst */
 8009b1c:	230b      	movs	r3, #11
 8009b1e:	823b      	strh	r3, [r7, #16]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d003      	beq.n	8009b2e <ndefT3TPollerReadBlocks+0x28>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d001      	beq.n	8009b32 <ndefT3TPollerReadBlocks+0x2c>
    {
        return ERR_PARAM;
 8009b2e:	2307      	movs	r3, #7
 8009b30:	e065      	b.n	8009bfe <ndefT3TPollerReadBlocks+0xf8>
    }

    requestedDataSize = (uint16_t)nbBlocks * NDEF_T3T_BLOCK_SIZE;
 8009b32:	7a7b      	ldrb	r3, [r7, #9]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	011b      	lsls	r3, r3, #4
 8009b38:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if( rxBufLen < requestedDataSize )
 8009b3a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009b3c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d201      	bcs.n	8009b46 <ndefT3TPollerReadBlocks+0x40>
    {
        return ERR_PARAM;
 8009b42:	2307      	movs	r3, #7
 8009b44:	e05b      	b.n	8009bfe <ndefT3TPollerReadBlocks+0xf8>
    }

    listBlocks = ctx->subCtx.t3t.listBlocks;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b4c:	62bb      	str	r3, [r7, #40]	; 0x28

    for (index = 0U; index < nbBlocks; index++ )
 8009b4e:	2300      	movs	r3, #0
 8009b50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009b54:	e017      	b.n	8009b86 <ndefT3TPollerReadBlocks+0x80>
    {
        /* Write each block number (16 bits per block address) */
        listBlocks[index].conf     = (uint8_t) NDEF_T3T_BLOCKNB_CONF;
 8009b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b5e:	4413      	add	r3, r2
 8009b60:	2280      	movs	r2, #128	; 0x80
 8009b62:	701a      	strb	r2, [r3, #0]
        listBlocks[index].blockNum = (uint16_t)( blockNum + (uint16_t) index);
 8009b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b68:	b299      	uxth	r1, r3
 8009b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b72:	4413      	add	r3, r2
 8009b74:	897a      	ldrh	r2, [r7, #10]
 8009b76:	440a      	add	r2, r1
 8009b78:	b292      	uxth	r2, r2
 8009b7a:	805a      	strh	r2, [r3, #2]
    for (index = 0U; index < nbBlocks; index++ )
 8009b7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b80:	3301      	adds	r3, #1
 8009b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009b86:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009b8a:	7a7b      	ldrb	r3, [r7, #9]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d3e2      	bcc.n	8009b56 <ndefT3TPollerReadBlocks+0x50>
    }

    servBlock.numServ   = 1U;
 8009b90:	2301      	movs	r3, #1
 8009b92:	753b      	strb	r3, [r7, #20]
    servBlock.servList  = &serviceCodeLst;
 8009b94:	f107 0310 	add.w	r3, r7, #16
 8009b98:	61bb      	str	r3, [r7, #24]
    servBlock.numBlock  = nbBlocks;
 8009b9a:	7a7b      	ldrb	r3, [r7, #9]
 8009b9c:	773b      	strb	r3, [r7, #28]
    servBlock.blockList = listBlocks;
 8009b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba0:	623b      	str	r3, [r7, #32]

    ret = rfalNfcfPollerCheck(ctx->device.dev.nfcf.sensfRes.NFCID2, &servBlock, ctx->subCtx.t3t.rxbuf, (uint16_t)sizeof(ctx->subCtx.t3t.rxbuf), &rcvdLen);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	1cd8      	adds	r0, r3, #3
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8009bac:	f107 0114 	add.w	r1, r7, #20
 8009bb0:	f107 0312 	add.w	r3, r7, #18
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	2350      	movs	r3, #80	; 0x50
 8009bb8:	f00a fb10 	bl	80141dc <rfalNfcfPollerCheck>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (ret != ERR_NONE)
 8009bc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <ndefT3TPollerReadBlocks+0xc4>
    {
        return ret;
 8009bc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009bc8:	e019      	b.n	8009bfe <ndefT3TPollerReadBlocks+0xf8>
    }
    if( rcvdLen != (uint16_t)(NDEF_T3T_CHECK_NB_BLOCKS_LEN + requestedDataSize) )
 8009bca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009bcc:	3301      	adds	r3, #1
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	8a7b      	ldrh	r3, [r7, #18]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d001      	beq.n	8009bda <ndefT3TPollerReadBlocks+0xd4>
    {
        return ERR_REQUEST;
 8009bd6:	2305      	movs	r3, #5
 8009bd8:	e011      	b.n	8009bfe <ndefT3TPollerReadBlocks+0xf8>
    }
    if( requestedDataSize > 0U )
 8009bda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00d      	beq.n	8009bfc <ndefT3TPollerReadBlocks+0xf6>
    {
        (void)ST_MEMCPY( rxBuf, &ctx->subCtx.t3t.rxbuf[NDEF_T3T_CHECK_NB_BLOCKS_LEN], requestedDataSize );
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f203 1305 	addw	r3, r3, #261	; 0x105
 8009be6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f00f f890 	bl	8018d10 <memcpy>
        if (rcvLen != NULL)
 8009bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d002      	beq.n	8009bfc <ndefT3TPollerReadBlocks+0xf6>
        {
            *rcvLen = requestedDataSize;
 8009bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009bfa:	801a      	strh	r2, [r3, #0]
        }
    }
    return ERR_NONE;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3730      	adds	r7, #48	; 0x30
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <ndefT3TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT3TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 8009c06:	b590      	push	{r4, r7, lr}
 8009c08:	b08f      	sub	sp, #60	; 0x3c
 8009c0a:	af02      	add	r7, sp, #8
 8009c0c:	60f8      	str	r0, [r7, #12]
 8009c0e:	60b9      	str	r1, [r7, #8]
 8009c10:	607a      	str	r2, [r7, #4]
 8009c12:	603b      	str	r3, [r7, #0]
    uint16_t        res;
    uint16_t        nbRead;
    ReturnCode      result     = ERR_NONE;
 8009c14:	2300      	movs	r3, #0
 8009c16:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t        currentLen = len;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t        lvRcvLen   = 0U;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	627b      	str	r3, [r7, #36]	; 0x24
    const uint16_t  blockLen   = (uint16_t) NDEF_T3T_BLOCKLEN;
 8009c20:	2310      	movs	r3, #16
 8009c22:	83fb      	strh	r3, [r7, #30]
    uint16_t        startBlock = (uint16_t) (offset / blockLen);
 8009c24:	8bfb      	ldrh	r3, [r7, #30]
 8009c26:	68ba      	ldr	r2, [r7, #8]
 8009c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c2c:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t        startAddr  = (uint16_t) (startBlock * blockLen);
 8009c2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c30:	8bfa      	ldrh	r2, [r7, #30]
 8009c32:	fb02 f303 	mul.w	r3, r2, r3
 8009c36:	83bb      	strh	r3, [r7, #28]
    uint16_t        startOffset= (uint16_t) (offset -  (uint32_t) startAddr);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	8bbb      	ldrh	r3, [r7, #28]
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	837b      	strh	r3, [r7, #26]
    uint16_t        nbBlocks   = (uint16_t) NDEF_T3T_NBBLOCKSMAX;
 8009c42:	2304      	movs	r3, #4
 8009c44:	843b      	strh	r3, [r7, #32]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (len == 0U) )
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d006      	beq.n	8009c5a <ndefT3TPollerReadBytes+0x54>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d102      	bne.n	8009c5a <ndefT3TPollerReadBytes+0x54>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d101      	bne.n	8009c5e <ndefT3TPollerReadBytes+0x58>
    {
        return ERR_PARAM;
 8009c5a:	2307      	movs	r3, #7
 8009c5c:	e0e3      	b.n	8009e26 <ndefT3TPollerReadBytes+0x220>
    }
    if (ctx->state != NDEF_STATE_INVALID)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d003      	beq.n	8009c70 <ndefT3TPollerReadBytes+0x6a>
    {
        nbBlocks = ctx->cc.t3t.nbR;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8009c6e:	843b      	strh	r3, [r7, #32]
    }

    if ( startOffset != 0U )
 8009c70:	8b7b      	ldrh	r3, [r7, #26]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f000 808e 	beq.w	8009d94 <ndefT3TPollerReadBytes+0x18e>
    {
        /* Unaligned read, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */ , ctx->subCtx.t3t.rxbuf, blockLen, &nbRead);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8009c7e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8009c80:	f107 0316 	add.w	r3, r7, #22
 8009c84:	9301      	str	r3, [sp, #4]
 8009c86:	8bfb      	ldrh	r3, [r7, #30]
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f7ff ff39 	bl	8009b06 <ndefT3TPollerReadBlocks>
 8009c94:	4603      	mov	r3, r0
 8009c96:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 8009c98:	8b3b      	ldrh	r3, [r7, #24]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d002      	beq.n	8009ca4 <ndefT3TPollerReadBytes+0x9e>
        {
            /* Check result */
            result = res;
 8009c9e:	8b3b      	ldrh	r3, [r7, #24]
 8009ca0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009ca2:	e077      	b.n	8009d94 <ndefT3TPollerReadBytes+0x18e>
        }
        else if (nbRead != NDEF_T3T_BLOCKLEN)
 8009ca4:	8afb      	ldrh	r3, [r7, #22]
 8009ca6:	2b10      	cmp	r3, #16
 8009ca8:	d002      	beq.n	8009cb0 <ndefT3TPollerReadBytes+0xaa>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 8009caa:	230e      	movs	r3, #14
 8009cac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009cae:	e071      	b.n	8009d94 <ndefT3TPollerReadBytes+0x18e>
        }
        else
        {
            nbRead = (uint16_t) (nbRead - (uint16_t)startOffset);
 8009cb0:	8afa      	ldrh	r2, [r7, #22]
 8009cb2:	8b7b      	ldrh	r3, [r7, #26]
 8009cb4:	1ad3      	subs	r3, r2, r3
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	82fb      	strh	r3, [r7, #22]
            if ((uint32_t) nbRead > currentLen)
 8009cba:	8afb      	ldrh	r3, [r7, #22]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d202      	bcs.n	8009cca <ndefT3TPollerReadBytes+0xc4>
            {
                nbRead = (uint16_t) currentLen;
 8009cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	82fb      	strh	r3, [r7, #22]
            }
            if (nbRead > 0U)
 8009cca:	8afb      	ldrh	r3, [r7, #22]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00a      	beq.n	8009ce6 <ndefT3TPollerReadBytes+0xe0>
            {
                (void)ST_MEMCPY(buf, &ctx->subCtx.t3t.rxbuf[offset], (uint32_t)nbRead);
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	4413      	add	r3, r2
 8009cda:	3304      	adds	r3, #4
 8009cdc:	8afa      	ldrh	r2, [r7, #22]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6838      	ldr	r0, [r7, #0]
 8009ce2:	f00f f815 	bl	8018d10 <memcpy>
            }
            lvRcvLen   += (uint32_t) nbRead;
 8009ce6:	8afb      	ldrh	r3, [r7, #22]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	4413      	add	r3, r2
 8009cee:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= (uint32_t) nbRead;
 8009cf0:	8afb      	ldrh	r3, [r7, #22]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf6:	1a9b      	subs	r3, r3, r2
 8009cf8:	62bb      	str	r3, [r7, #40]	; 0x28
            startBlock++;
 8009cfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	847b      	strh	r3, [r7, #34]	; 0x22
        }
    }

    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 8009d00:	e048      	b.n	8009d94 <ndefT3TPollerReadBytes+0x18e>
    {
        if ( currentLen <  ((uint32_t)blockLen * nbBlocks) )
 8009d02:	8bfb      	ldrh	r3, [r7, #30]
 8009d04:	8c3a      	ldrh	r2, [r7, #32]
 8009d06:	fb02 f303 	mul.w	r3, r2, r3
 8009d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d204      	bcs.n	8009d1a <ndefT3TPollerReadBytes+0x114>
        {
              /* Reduce the nb of blocks to read */
              nbBlocks =  (uint16_t) (currentLen / blockLen);
 8009d10:	8bfb      	ldrh	r3, [r7, #30]
 8009d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d18:	843b      	strh	r3, [r7, #32]
        }
        res = ndefT3TPollerReadBlocks(ctx, startBlock, (uint8_t)nbBlocks, ctx->subCtx.t3t.rxbuf, blockLen * nbBlocks, &nbRead);
 8009d1a:	8c3b      	ldrh	r3, [r7, #32]
 8009d1c:	b2d8      	uxtb	r0, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f503 7482 	add.w	r4, r3, #260	; 0x104
 8009d24:	8bfb      	ldrh	r3, [r7, #30]
 8009d26:	8c3a      	ldrh	r2, [r7, #32]
 8009d28:	fb02 f303 	mul.w	r3, r2, r3
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8009d30:	f107 0216 	add.w	r2, r7, #22
 8009d34:	9201      	str	r2, [sp, #4]
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	4623      	mov	r3, r4
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f7ff fee2 	bl	8009b06 <ndefT3TPollerReadBlocks>
 8009d42:	4603      	mov	r3, r0
 8009d44:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 8009d46:	8b3b      	ldrh	r3, [r7, #24]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <ndefT3TPollerReadBytes+0x14a>
        {
            /* Check result */
            return res;
 8009d4c:	8b3b      	ldrh	r3, [r7, #24]
 8009d4e:	e06a      	b.n	8009e26 <ndefT3TPollerReadBytes+0x220>
        }
        else if (nbRead != (blockLen * nbBlocks))
 8009d50:	8afb      	ldrh	r3, [r7, #22]
 8009d52:	4619      	mov	r1, r3
 8009d54:	8bfb      	ldrh	r3, [r7, #30]
 8009d56:	8c3a      	ldrh	r2, [r7, #32]
 8009d58:	fb02 f303 	mul.w	r3, r2, r3
 8009d5c:	4299      	cmp	r1, r3
 8009d5e:	d001      	beq.n	8009d64 <ndefT3TPollerReadBytes+0x15e>
        {
            /* Check len */
            return ERR_MEM_CORRUPT;
 8009d60:	230e      	movs	r3, #14
 8009d62:	e060      	b.n	8009e26 <ndefT3TPollerReadBytes+0x220>
        }
        else
        {
            (void)ST_MEMCPY(&buf[lvRcvLen], ctx->subCtx.t3t.rxbuf, (uint32_t)currentLen);
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	18d0      	adds	r0, r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8009d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d72:	4619      	mov	r1, r3
 8009d74:	f00e ffcc 	bl	8018d10 <memcpy>
            lvRcvLen   += nbRead;
 8009d78:	8afb      	ldrh	r3, [r7, #22]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	4413      	add	r3, r2
 8009d80:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= nbRead;
 8009d82:	8afb      	ldrh	r3, [r7, #22]
 8009d84:	461a      	mov	r2, r3
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	1a9b      	subs	r3, r3, r2
 8009d8a:	62bb      	str	r3, [r7, #40]	; 0x28
            startBlock += nbBlocks;
 8009d8c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009d8e:	8c3b      	ldrh	r3, [r7, #32]
 8009d90:	4413      	add	r3, r2
 8009d92:	847b      	strh	r3, [r7, #34]	; 0x22
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 8009d94:	8bfb      	ldrh	r3, [r7, #30]
 8009d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d302      	bcc.n	8009da2 <ndefT3TPollerReadBytes+0x19c>
 8009d9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0af      	beq.n	8009d02 <ndefT3TPollerReadBytes+0xfc>
        }
    }
    if  ( (currentLen > 0U) && (result == ERR_NONE) )
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d02f      	beq.n	8009e08 <ndefT3TPollerReadBytes+0x202>
 8009da8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d12c      	bne.n	8009e08 <ndefT3TPollerReadBytes+0x202>
    {
        /* Unaligned read, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */, ctx->subCtx.t3t.rxbuf, blockLen, &nbRead);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8009db4:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8009db6:	f107 0316 	add.w	r3, r7, #22
 8009dba:	9301      	str	r3, [sp, #4]
 8009dbc:	8bfb      	ldrh	r3, [r7, #30]
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f7ff fe9e 	bl	8009b06 <ndefT3TPollerReadBlocks>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 8009dce:	8b3b      	ldrh	r3, [r7, #24]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <ndefT3TPollerReadBytes+0x1d2>
        {
            /* Check result */
            return res;
 8009dd4:	8b3b      	ldrh	r3, [r7, #24]
 8009dd6:	e026      	b.n	8009e26 <ndefT3TPollerReadBytes+0x220>
        }
        else if (nbRead != NDEF_T3T_BLOCKLEN)
 8009dd8:	8afb      	ldrh	r3, [r7, #22]
 8009dda:	2b10      	cmp	r3, #16
 8009ddc:	d001      	beq.n	8009de2 <ndefT3TPollerReadBytes+0x1dc>
        {
            /* Check len */
            return ERR_MEM_CORRUPT;
 8009dde:	230e      	movs	r3, #14
 8009de0:	e021      	b.n	8009e26 <ndefT3TPollerReadBytes+0x220>
        }
        else
        {
            if (currentLen > 0U)
 8009de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d009      	beq.n	8009dfc <ndefT3TPollerReadBytes+0x1f6>
            {
                (void)ST_MEMCPY(&buf[lvRcvLen], ctx->subCtx.t3t.rxbuf, (uint32_t)currentLen);
 8009de8:	683a      	ldr	r2, [r7, #0]
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	18d0      	adds	r0, r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8009df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009df6:	4619      	mov	r1, r3
 8009df8:	f00e ff8a 	bl	8018d10 <memcpy>
            }
            lvRcvLen   += (uint32_t) currentLen;
 8009dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e00:	4413      	add	r3, r2
 8009e02:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= (uint32_t) currentLen;
 8009e04:	2300      	movs	r3, #0
 8009e06:	62bb      	str	r3, [r7, #40]	; 0x28
        }
    }
    if ( (currentLen == 0U) && (result == ERR_NONE) )
 8009e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d104      	bne.n	8009e18 <ndefT3TPollerReadBytes+0x212>
 8009e0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <ndefT3TPollerReadBytes+0x212>
    {
        result = ERR_NONE;
 8009e14:	2300      	movs	r3, #0
 8009e16:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    if( rcvdLen != NULL )
 8009e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d002      	beq.n	8009e24 <ndefT3TPollerReadBytes+0x21e>
    {
        *rcvdLen = lvRcvLen;
 8009e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e22:	601a      	str	r2, [r3, #0]
    }
    return result;
 8009e24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3734      	adds	r7, #52	; 0x34
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd90      	pop	{r4, r7, pc}

08009e2e <ndefT3TPollerReadAttributeInformationBlock>:

/*******************************************************************************/
static ReturnCode ndefT3TPollerReadAttributeInformationBlock( ndefContext * ctx)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b088      	sub	sp, #32
 8009e32:	af02      	add	r7, sp, #8
 8009e34:	6078      	str	r0, [r7, #4]
    /* Follow 7.4.1 NDEF Detection Procedure */
    ReturnCode   retcode;
    uint8_t    * rxbuf;
    uint16_t     checksum_received;
    uint16_t     checksum_computed = 0U;
 8009e36:	2300      	movs	r3, #0
 8009e38:	82fb      	strh	r3, [r7, #22]
    uint16_t     rcvLen            = 0U;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	817b      	strh	r3, [r7, #10]
    uint8_t      i;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d003      	beq.n	8009e4c <ndefT3TPollerReadAttributeInformationBlock+0x1e>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d001      	beq.n	8009e50 <ndefT3TPollerReadAttributeInformationBlock+0x22>
    {
        return ERR_PARAM;
 8009e4c:	2307      	movs	r3, #7
 8009e4e:	e07d      	b.n	8009f4c <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }
    rxbuf   = ctx->ccBuf;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	339c      	adds	r3, #156	; 0x9c
 8009e54:	613b      	str	r3, [r7, #16]
    retcode = ndefT3TPollerReadBlocks( ctx, NDEF_T3T_ATTRIB_INFO_BLOCK_NB, 1U /* One block */, rxbuf, NDEF_T3T_BLOCK_SIZE, &rcvLen );
 8009e56:	f107 030a 	add.w	r3, r7, #10
 8009e5a:	9301      	str	r3, [sp, #4]
 8009e5c:	2310      	movs	r3, #16
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	2201      	movs	r2, #1
 8009e64:	2100      	movs	r1, #0
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f7ff fe4d 	bl	8009b06 <ndefT3TPollerReadBlocks>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	81fb      	strh	r3, [r7, #14]
    if ( (retcode != ERR_NONE) && (rcvLen != NDEF_T3T_BLOCK_SIZE) )
 8009e70:	89fb      	ldrh	r3, [r7, #14]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <ndefT3TPollerReadAttributeInformationBlock+0x52>
 8009e76:	897b      	ldrh	r3, [r7, #10]
 8009e78:	2b10      	cmp	r3, #16
 8009e7a:	d001      	beq.n	8009e80 <ndefT3TPollerReadAttributeInformationBlock+0x52>
    {
        return retcode;
 8009e7c:	89fb      	ldrh	r3, [r7, #14]
 8009e7e:	e065      	b.n	8009f4c <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }
    /* Now compute checksum */
    for (i = 0U; i < NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN; i++)
 8009e80:	2300      	movs	r3, #0
 8009e82:	757b      	strb	r3, [r7, #21]
 8009e84:	e00a      	b.n	8009e9c <ndefT3TPollerReadAttributeInformationBlock+0x6e>
    {
        checksum_computed += (uint16_t) rxbuf[i];
 8009e86:	7d7b      	ldrb	r3, [r7, #21]
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	8afb      	ldrh	r3, [r7, #22]
 8009e92:	4413      	add	r3, r2
 8009e94:	82fb      	strh	r3, [r7, #22]
    for (i = 0U; i < NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN; i++)
 8009e96:	7d7b      	ldrb	r3, [r7, #21]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	757b      	strb	r3, [r7, #21]
 8009e9c:	7d7b      	ldrb	r3, [r7, #21]
 8009e9e:	2b0d      	cmp	r3, #13
 8009ea0:	d9f1      	bls.n	8009e86 <ndefT3TPollerReadAttributeInformationBlock+0x58>
    }
    checksum_received = ((uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN] << 8U) + (uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN+ 1U];
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	330e      	adds	r3, #14
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	021b      	lsls	r3, r3, #8
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	330f      	adds	r3, #15
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	4413      	add	r3, r2
 8009eb8:	81bb      	strh	r3, [r7, #12]
    if (checksum_received !=  checksum_computed)
 8009eba:	89ba      	ldrh	r2, [r7, #12]
 8009ebc:	8afb      	ldrh	r3, [r7, #22]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d001      	beq.n	8009ec6 <ndefT3TPollerReadAttributeInformationBlock+0x98>
    {
        return ERR_REQUEST;
 8009ec2:	2305      	movs	r3, #5
 8009ec4:	e042      	b.n	8009f4c <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }

    /* Now copy the attribute struct */
    ctx->cc.t3t.majorVersion  = ( rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_VERSION] >> 4U);
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	091b      	lsrs	r3, r3, #4
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t3t.minorVersion  = ( rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_VERSION] & 0xFU);
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	f003 030f 	and.w	r3, r3, #15
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    ctx->cc.t3t.nbR           = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_NBR];
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	785a      	ldrb	r2, [r3, #1]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    ctx->cc.t3t.nbW           = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_NBW];
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	789a      	ldrb	r2, [r3, #2]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    ctx->cc.t3t.nMaxB         = ((uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_MAXB] << 8U) + (uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_MAXB + 1U];
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	3303      	adds	r3, #3
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	021b      	lsls	r3, r3, #8
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	3304      	adds	r3, #4
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	4413      	add	r3, r2
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    ctx->cc.t3t.writeFlag     = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_W];
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	7a5a      	ldrb	r2, [r3, #9]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ctx->cc.t3t.rwFlag        = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_RW];
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	7a9a      	ldrb	r2, [r3, #10]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    ctx->cc.t3t.Ln            =   ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 0U] << 0x10U)
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	330b      	adds	r3, #11
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	041a      	lsls	r2, r3, #16
                                | ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 1U] << 0x8U)
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	330c      	adds	r3, #12
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	021b      	lsls	r3, r3, #8
 8009f3a:	4313      	orrs	r3, r2
                                |  (uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 2U];
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	320d      	adds	r2, #13
 8009f40:	7812      	ldrb	r2, [r2, #0]
 8009f42:	431a      	orrs	r2, r3
    ctx->cc.t3t.Ln            =   ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 0U] << 0x10U)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     return ERR_NONE;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3718      	adds	r7, #24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <ndefT3TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT3TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT3TisT3TDevice(dev) )
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d006      	beq.n	8009f72 <ndefT3TPollerContextInitialization+0x1e>
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d003      	beq.n	8009f72 <ndefT3TPollerContextInitialization+0x1e>
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d001      	beq.n	8009f76 <ndefT3TPollerContextInitialization+0x22>
    {
        return ERR_PARAM;
 8009f72:	2307      	movs	r3, #7
 8009f74:	e00a      	b.n	8009f8c <ndefT3TPollerContextInitialization+0x38>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2278      	movs	r2, #120	; 0x78
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f00e fec7 	bl	8018d10 <memcpy>

    ctx->state                   = NDEF_STATE_INVALID;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <ndefT3TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT3TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b08c      	sub	sp, #48	; 0x30
 8009f98:	af02      	add	r7, sp, #8
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
    ReturnCode        retcode;
    rfalFeliCaPollRes pollRes[NDEF_T3T_MAX_DEVICE];
    uint8_t           devCnt     = NDEF_T3T_MAX_DEVICE;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	73fb      	strb	r3, [r7, #15]
    uint8_t           collisions = 0U;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	73bb      	strb	r3, [r7, #14]

    if( info != NULL )
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d011      	beq.n	8009fd0 <ndefT3TPollerNdefDetect+0x3c>
    {
        info->state                = NDEF_STATE_INVALID;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <ndefT3TPollerNdefDetect+0x4a>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	d001      	beq.n	8009fe2 <ndefT3TPollerNdefDetect+0x4e>
    {
        return ERR_PARAM;
 8009fde:	2307      	movs	r3, #7
 8009fe0:	e087      	b.n	800a0f2 <ndefT3TPollerNdefDetect+0x15e>
    }
    ctx->state = NDEF_STATE_INVALID;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* TS T3T v1.0 7.4.1.1 the Reader/Writer SHALL send a SENSF_REQ Command with System Code set to 12FCh. */
    retcode = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_NO_REQUEST, pollRes, &devCnt, &collisions );
 8009fea:	f107 0210 	add.w	r2, r7, #16
 8009fee:	f107 030e 	add.w	r3, r7, #14
 8009ff2:	9301      	str	r3, [sp, #4]
 8009ff4:	f107 030f 	add.w	r3, r7, #15
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f241 21fc 	movw	r1, #4860	; 0x12fc
 800a002:	2000      	movs	r0, #0
 800a004:	f00a f83c 	bl	8014080 <rfalNfcfPollerPoll>
 800a008:	4603      	mov	r3, r0
 800a00a:	84fb      	strh	r3, [r7, #38]	; 0x26
    if( retcode != ERR_NONE )
 800a00c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <ndefT3TPollerNdefDetect+0x82>
    {
        /* TS T3T v1.0 7.4.1.2 Conclude procedure. */
        return retcode;
 800a012:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a014:	e06d      	b.n	800a0f2 <ndefT3TPollerNdefDetect+0x15e>
    }

    /* Check if UID of the first card is the same */
    if( ST_BYTECMP(&(pollRes[0U][NDEF_T3T_SENSFRES_NFCID2]), ctx->device.dev.nfcf.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) != 0 )
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	1cd9      	adds	r1, r3, #3
 800a01a:	f107 0310 	add.w	r3, r7, #16
 800a01e:	3302      	adds	r3, #2
 800a020:	2208      	movs	r2, #8
 800a022:	4618      	mov	r0, r3
 800a024:	f00e fe64 	bl	8018cf0 <memcmp>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <ndefT3TPollerNdefDetect+0x9e>
    {
        return ERR_REQUEST; /* Wrong UID */
 800a02e:	2305      	movs	r3, #5
 800a030:	e05f      	b.n	800a0f2 <ndefT3TPollerNdefDetect+0x15e>
    }

    /* TS T3T v1.0 7.4.1.3 The Reader/Writer SHALL read the Attribute Information Block using the CHECK Command. */
    /* TS T3T v1.0 7.4.1.4 The Reader/Writer SHALL verify the value of Checksum of the Attribute Information Block. */
    retcode = ndefT3TPollerReadAttributeInformationBlock(ctx);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7ff fefb 	bl	8009e2e <ndefT3TPollerReadAttributeInformationBlock>
 800a038:	4603      	mov	r3, r0
 800a03a:	84fb      	strh	r3, [r7, #38]	; 0x26
    if( retcode != ERR_NONE )
 800a03c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <ndefT3TPollerNdefDetect+0xb2>
    {
        return retcode;
 800a042:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a044:	e055      	b.n	800a0f2 <ndefT3TPollerNdefDetect+0x15e>
    }

    /* TS T3T v1.0 7.4.1.6 The Reader/Writer SHALL check if it supports the NDEF mapping version number based on the rules given in Section 7.3. */
    if( ctx->cc.t3t.majorVersion != ndefMajorVersion(NDEF_T3T_ATTRIB_INFO_VERSION_1_0) )
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d001      	beq.n	800a054 <ndefT3TPollerNdefDetect+0xc0>
    {
        return ERR_REQUEST;
 800a050:	2305      	movs	r3, #5
 800a052:	e04e      	b.n	800a0f2 <ndefT3TPollerNdefDetect+0x15e>
    }

    ctx->messageLen     = ctx->cc.t3t.Ln;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset  = NDEF_T3T_AREA_OFFSET;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2210      	movs	r2, #16
 800a064:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->areaLen        = (uint32_t)ctx->cc.t3t.nMaxB * NDEF_T3T_BLOCK_SIZE;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800a06e:	011a      	lsls	r2, r3, #4
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    ctx->state          = NDEF_STATE_INITIALIZED;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    if (ctx->messageLen > 0U)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a084:	2b00      	cmp	r3, #0
 800a086:	d012      	beq.n	800a0ae <ndefT3TPollerNdefDetect+0x11a>
    {
        if (ctx->cc.t3t.rwFlag == NDEF_T3T_FLAG_RW)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d104      	bne.n	800a09c <ndefT3TPollerNdefDetect+0x108>
        {
            ctx->state = NDEF_STATE_READWRITE;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2202      	movs	r2, #2
 800a096:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800a09a:	e008      	b.n	800a0ae <ndefT3TPollerNdefDetect+0x11a>
        }
        else
        {
            if (ctx->cc.t3t.rwFlag == NDEF_T3T_FLAG_RO)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d103      	bne.n	800a0ae <ndefT3TPollerNdefDetect+0x11a>
            {
                ctx->state = NDEF_STATE_READONLY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2203      	movs	r2, #3
 800a0aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            }
        }
    }

    if( info != NULL )
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d01d      	beq.n	800a0f0 <ndefT3TPollerNdefDetect+0x15c>
    {
        info->state                = ctx->state;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ctx->cc.t3t.majorVersion;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ctx->cc.t3t.minorVersion;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = ctx->areaLen;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	60da      	str	r2, [r3, #12]
    }

    return ERR_NONE;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3728      	adds	r7, #40	; 0x28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <ndefT3TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b088      	sub	sp, #32
 800a0fe:	af02      	add	r7, sp, #8
 800a100:	60f8      	str	r0, [r7, #12]
 800a102:	60b9      	str	r1, [r7, #8]
 800a104:	607a      	str	r2, [r7, #4]
 800a106:	603b      	str	r3, [r7, #0]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (buf == NULL) )
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d006      	beq.n	800a11c <ndefT3TPollerReadRawMessage+0x22>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	2b02      	cmp	r3, #2
 800a114:	d102      	bne.n	800a11c <ndefT3TPollerReadRawMessage+0x22>
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d101      	bne.n	800a120 <ndefT3TPollerReadRawMessage+0x26>
    {
        return ERR_PARAM;
 800a11c:	2307      	movs	r3, #7
 800a11e:	e02b      	b.n	800a178 <ndefT3TPollerReadRawMessage+0x7e>
    }

    /* TS T3T v1.0 7.4.2: This procedure assumes that the Reader/Writer has successfully performed the NDEF detection procedure. */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a126:	2b01      	cmp	r3, #1
 800a128:	d801      	bhi.n	800a12e <ndefT3TPollerReadRawMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800a12a:	2321      	movs	r3, #33	; 0x21
 800a12c:	e024      	b.n	800a178 <ndefT3TPollerReadRawMessage+0x7e>
    }
    /* TS T3T v1.0 7.4.2.1: If the WriteFlag remembered during the NDEF detection procedure is set to ON, the NDEF data may be inconsistent ...*/
    if( ndefT3TIsWriteFlagON(ctx->cc.t3t.writeFlag) )
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a134:	2b0f      	cmp	r3, #15
 800a136:	d101      	bne.n	800a13c <ndefT3TPollerReadRawMessage+0x42>
    {
        /*  TS T3T v1.0 7.4.2.1: ... the Reader/Writer SHALL conclude the NDEF read procedure*/
        return ERR_WRONG_STATE;
 800a138:	2321      	movs	r3, #33	; 0x21
 800a13a:	e01d      	b.n	800a178 <ndefT3TPollerReadRawMessage+0x7e>
    }

    if( ctx->messageLen > bufLen )
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	429a      	cmp	r2, r3
 800a146:	d201      	bcs.n	800a14c <ndefT3TPollerReadRawMessage+0x52>
    {
        return ERR_NOMEM;
 800a148:	2301      	movs	r3, #1
 800a14a:	e015      	b.n	800a178 <ndefT3TPollerReadRawMessage+0x7e>
    }

    /*  TS T3T v1.0 7.4.2.2: Read NDEF data */
    ret = ndefT3TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f7ff fd51 	bl	8009c06 <ndefT3TPollerReadBytes>
 800a164:	4603      	mov	r3, r0
 800a166:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a168:	8afb      	ldrh	r3, [r7, #22]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d003      	beq.n	800a176 <ndefT3TPollerReadRawMessage+0x7c>
    {
        ctx->state = NDEF_STATE_INVALID;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return ret;
 800a176:	8afb      	ldrh	r3, [r7, #22]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <ndefT3TPollerWriteBlocks>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
static ReturnCode ndefT3TPollerWriteBlocks( ndefContext * ctx, uint16_t blockNum, uint8_t nbBlocks, const uint8_t* dataBlocks)
{
 800a180:	b590      	push	{r4, r7, lr}
 800a182:	b091      	sub	sp, #68	; 0x44
 800a184:	af04      	add	r7, sp, #16
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	607b      	str	r3, [r7, #4]
 800a18a:	460b      	mov	r3, r1
 800a18c:	817b      	strh	r3, [r7, #10]
 800a18e:	4613      	mov	r3, r2
 800a190:	727b      	strb	r3, [r7, #9]
    ReturnCode                 ret;
    rfalNfcfServBlockListParam servBlock;
    rfalNfcfBlockListElem  *   listBlocks;
    uint8_t                    index;
    rfalNfcfServ               serviceCodeLst = 0x0009U;
 800a192:	2309      	movs	r3, #9
 800a194:	827b      	strh	r3, [r7, #18]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d003      	beq.n	800a1a4 <ndefT3TPollerWriteBlocks+0x24>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d001      	beq.n	800a1a8 <ndefT3TPollerWriteBlocks+0x28>
    {
        return ERR_PARAM;
 800a1a4:	2307      	movs	r3, #7
 800a1a6:	e042      	b.n	800a22e <ndefT3TPollerWriteBlocks+0xae>
    }

    listBlocks = ctx->subCtx.t3t.listBlocks;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a1ae:	62bb      	str	r3, [r7, #40]	; 0x28

    for (index = 0U; index < nbBlocks; index++)
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a1b6:	e017      	b.n	800a1e8 <ndefT3TPollerWriteBlocks+0x68>
    {
        /* Write each block number (16 bits per block address) */
        listBlocks[index].conf     = (uint8_t) NDEF_T3T_BLOCKNB_CONF;
 800a1b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1c0:	4413      	add	r3, r2
 800a1c2:	2280      	movs	r2, #128	; 0x80
 800a1c4:	701a      	strb	r2, [r3, #0]
        listBlocks[index].blockNum = (uint16_t)( blockNum + (uint16_t) index);
 800a1c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1ca:	b299      	uxth	r1, r3
 800a1cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1d4:	4413      	add	r3, r2
 800a1d6:	897a      	ldrh	r2, [r7, #10]
 800a1d8:	440a      	add	r2, r1
 800a1da:	b292      	uxth	r2, r2
 800a1dc:	805a      	strh	r2, [r3, #2]
    for (index = 0U; index < nbBlocks; index++)
 800a1de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a1e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a1ec:	7a7b      	ldrb	r3, [r7, #9]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d3e2      	bcc.n	800a1b8 <ndefT3TPollerWriteBlocks+0x38>
    }
    servBlock.numServ   = 1U;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	753b      	strb	r3, [r7, #20]
    servBlock.servList  = &serviceCodeLst;
 800a1f6:	f107 0312 	add.w	r3, r7, #18
 800a1fa:	61bb      	str	r3, [r7, #24]
    servBlock.numBlock  = nbBlocks;
 800a1fc:	7a7b      	ldrb	r3, [r7, #9]
 800a1fe:	773b      	strb	r3, [r7, #28]
    servBlock.blockList = listBlocks;
 800a200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a202:	623b      	str	r3, [r7, #32]

    ret = rfalNfcfPollerUpdate( ctx->device.dev.nfcf.sensfRes.NFCID2, &servBlock, ctx->subCtx.t3t.txbuf, (uint16_t)sizeof(ctx->subCtx.t3t.txbuf), dataBlocks, ctx->subCtx.t3t.rxbuf, (uint16_t)sizeof(ctx->subCtx.t3t.rxbuf));
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	1cd8      	adds	r0, r3, #3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800a214:	f107 0114 	add.w	r1, r7, #20
 800a218:	2450      	movs	r4, #80	; 0x50
 800a21a:	9402      	str	r4, [sp, #8]
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	2350      	movs	r3, #80	; 0x50
 800a224:	f00a f916 	bl	8014454 <rfalNfcfPollerUpdate>
 800a228:	4603      	mov	r3, r0
 800a22a:	84fb      	strh	r3, [r7, #38]	; 0x26

    return ret;
 800a22c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3734      	adds	r7, #52	; 0x34
 800a232:	46bd      	mov	sp, r7
 800a234:	bd90      	pop	{r4, r7, pc}

0800a236 <ndefT3TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b092      	sub	sp, #72	; 0x48
 800a23a:	af02      	add	r7, sp, #8
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	607a      	str	r2, [r7, #4]
 800a242:	603b      	str	r3, [r7, #0]
    uint16_t        nbRead;
    uint16_t        nbWrite;
    uint16_t        res;
    ReturnCode      result     = ERR_NONE;
 800a244:	2300      	movs	r3, #0
 800a246:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint32_t        currentLen = len;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	63bb      	str	r3, [r7, #56]	; 0x38
    uint32_t        txtLen     = 0U;
 800a24c:	2300      	movs	r3, #0
 800a24e:	637b      	str	r3, [r7, #52]	; 0x34
    const uint16_t  blockLen   = (uint16_t )NDEF_T3T_BLOCKLEN;
 800a250:	2310      	movs	r3, #16
 800a252:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t        nbBlocks   = (uint16_t ) NDEF_T3T_NBBLOCKSMAX;
 800a254:	2304      	movs	r3, #4
 800a256:	867b      	strh	r3, [r7, #50]	; 0x32
    uint16_t        startBlock = (uint16_t) (offset / blockLen);
 800a258:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a260:	863b      	strh	r3, [r7, #48]	; 0x30
    uint16_t        startAddr  = (uint16_t) (startBlock * blockLen);
 800a262:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a264:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a266:	fb02 f303 	mul.w	r3, r2, r3
 800a26a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t        startOffset= (uint16_t) (offset -  (uint32_t) startAddr);
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	b29a      	uxth	r2, r3
 800a270:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint8_t         tmpBuf[NDEF_T3T_BLOCKLEN];

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (len == 0U) )
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d006      	beq.n	800a28a <ndefT3TPollerWriteBytes+0x54>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	2b02      	cmp	r3, #2
 800a282:	d102      	bne.n	800a28a <ndefT3TPollerWriteBytes+0x54>
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <ndefT3TPollerWriteBytes+0x58>
    {
        return ERR_PARAM;
 800a28a:	2307      	movs	r3, #7
 800a28c:	e0d0      	b.n	800a430 <ndefT3TPollerWriteBytes+0x1fa>
    }
    if (ctx->state != NDEF_STATE_INVALID)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a294:	2b00      	cmp	r3, #0
 800a296:	d003      	beq.n	800a2a0 <ndefT3TPollerWriteBytes+0x6a>
    {
        nbBlocks = ctx->cc.t3t.nbW;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a29e:	867b      	strh	r3, [r7, #50]	; 0x32
    }

    if ( startOffset != 0U )
 800a2a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d078      	beq.n	800a398 <ndefT3TPollerWriteBytes+0x162>
    {
        /* Unaligned write, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1, tmpBuf, blockLen, &nbRead);
 800a2a6:	f107 0214 	add.w	r2, r7, #20
 800a2aa:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800a2ac:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800a2b0:	9301      	str	r3, [sp, #4]
 800a2b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f7ff fc23 	bl	8009b06 <ndefT3TPollerReadBlocks>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 800a2c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <ndefT3TPollerWriteBytes+0x9a>
        {
            /* Check result */
            result = res;
 800a2ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a2cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a2ce:	e063      	b.n	800a398 <ndefT3TPollerWriteBytes+0x162>
        }
        else if (nbRead != blockLen)
 800a2d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a2d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d002      	beq.n	800a2de <ndefT3TPollerWriteBytes+0xa8>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 800a2d8:	230e      	movs	r3, #14
 800a2da:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a2dc:	e05c      	b.n	800a398 <ndefT3TPollerWriteBytes+0x162>
        }
        else
        {
            /* Fill the rest of the buffer with user data */
            nbWrite =  NDEF_T3T_BLOCKLEN - startOffset;
 800a2de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a2e0:	f1c3 0310 	rsb	r3, r3, #16
 800a2e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
            if (nbWrite >  len)
 800a2e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d201      	bcs.n	800a2f2 <ndefT3TPollerWriteBytes+0xbc>
            {
                 nbWrite = (uint16_t) len;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
            (void)ST_MEMCPY(&tmpBuf[startOffset], buf, nbWrite);
 800a2f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a2f4:	f107 0214 	add.w	r2, r7, #20
 800a2f8:	4413      	add	r3, r2
 800a2fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a2fc:	6879      	ldr	r1, [r7, #4]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f00e fd06 	bl	8018d10 <memcpy>
            res = ndefT3TPollerWriteBlocks(ctx, startBlock, 1U /* One block */, tmpBuf);
 800a304:	f107 0314 	add.w	r3, r7, #20
 800a308:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800a30a:	2201      	movs	r2, #1
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f7ff ff37 	bl	800a180 <ndefT3TPollerWriteBlocks>
 800a312:	4603      	mov	r3, r0
 800a314:	853b      	strh	r3, [r7, #40]	; 0x28
            if (res == ERR_NONE)
 800a316:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10b      	bne.n	800a334 <ndefT3TPollerWriteBytes+0xfe>
            {
                txtLen     += (uint32_t) nbWrite;
 800a31c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a31e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a320:	4413      	add	r3, r2
 800a322:	637b      	str	r3, [r7, #52]	; 0x34
                currentLen -= (uint32_t) nbWrite;
 800a324:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	63bb      	str	r3, [r7, #56]	; 0x38
                startBlock++;
 800a32c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a32e:	3301      	adds	r3, #1
 800a330:	863b      	strh	r3, [r7, #48]	; 0x30
 800a332:	e031      	b.n	800a398 <ndefT3TPollerWriteBytes+0x162>
            }
            else
            {
                result = res; /* Copy the error code */
 800a334:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a336:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }
    }
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800a338:	e02e      	b.n	800a398 <ndefT3TPollerWriteBytes+0x162>
    {
        if ( currentLen <  ((uint32_t)blockLen * nbBlocks) )
 800a33a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a33c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a33e:	fb02 f303 	mul.w	r3, r2, r3
 800a342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a344:	429a      	cmp	r2, r3
 800a346:	d204      	bcs.n	800a352 <ndefT3TPollerWriteBytes+0x11c>
        {
              /* Reduce the nb of blocks to read */
              nbBlocks = (uint16_t) (currentLen / blockLen);
 800a348:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a34a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a34c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a350:	867b      	strh	r3, [r7, #50]	; 0x32
        }
        nbWrite = blockLen * nbBlocks;
 800a352:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a354:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a356:	fb02 f303 	mul.w	r3, r2, r3
 800a35a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        res     = ndefT3TPollerWriteBlocks(ctx, startBlock, (uint8_t) nbBlocks, &buf[txtLen]);
 800a35c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a35e:	b2d8      	uxtb	r0, r3
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a364:	4413      	add	r3, r2
 800a366:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800a368:	4602      	mov	r2, r0
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f7ff ff08 	bl	800a180 <ndefT3TPollerWriteBlocks>
 800a370:	4603      	mov	r3, r0
 800a372:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 800a374:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <ndefT3TPollerWriteBytes+0x14a>
        {
            /* Check result */
            result = res;
 800a37a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a37c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a37e:	e00b      	b.n	800a398 <ndefT3TPollerWriteBytes+0x162>
        }
        else
        {
            txtLen     += nbWrite;
 800a380:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a384:	4413      	add	r3, r2
 800a386:	637b      	str	r3, [r7, #52]	; 0x34
            currentLen -= nbWrite;
 800a388:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a38a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	63bb      	str	r3, [r7, #56]	; 0x38
            startBlock += nbBlocks;
 800a390:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a392:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a394:	4413      	add	r3, r2
 800a396:	863b      	strh	r3, [r7, #48]	; 0x30
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800a398:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a39a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d302      	bcc.n	800a3a6 <ndefT3TPollerWriteBytes+0x170>
 800a3a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d0c9      	beq.n	800a33a <ndefT3TPollerWriteBytes+0x104>
        }
    }
    if ( (currentLen > 0U) && (result == ERR_NONE) )
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d038      	beq.n	800a41e <ndefT3TPollerWriteBytes+0x1e8>
 800a3ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d135      	bne.n	800a41e <ndefT3TPollerWriteBytes+0x1e8>
    {
        /* Unaligned write, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */, tmpBuf, blockLen, &nbRead);
 800a3b2:	f107 0214 	add.w	r2, r7, #20
 800a3b6:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800a3b8:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f7ff fb9d 	bl	8009b06 <ndefT3TPollerReadBlocks>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 800a3d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d002      	beq.n	800a3dc <ndefT3TPollerWriteBytes+0x1a6>
        {
            /* Check result */
            result = res;
 800a3d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a3d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a3da:	e020      	b.n	800a41e <ndefT3TPollerWriteBytes+0x1e8>
        }
        else if (nbRead != blockLen)
 800a3dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a3de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d002      	beq.n	800a3ea <ndefT3TPollerWriteBytes+0x1b4>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 800a3e4:	230e      	movs	r3, #14
 800a3e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a3e8:	e019      	b.n	800a41e <ndefT3TPollerWriteBytes+0x1e8>
        }
        else
        {
            /* Fill the beginning of the buffer with user data */
            (void)ST_MEMCPY( tmpBuf, &buf[txtLen], currentLen);
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ee:	18d1      	adds	r1, r2, r3
 800a3f0:	f107 0314 	add.w	r3, r7, #20
 800a3f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f00e fc8a 	bl	8018d10 <memcpy>
            res = ndefT3TPollerWriteBlocks(ctx, startBlock, 1U /* One block */, tmpBuf);
 800a3fc:	f107 0314 	add.w	r3, r7, #20
 800a400:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800a402:	2201      	movs	r2, #1
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f7ff febb 	bl	800a180 <ndefT3TPollerWriteBlocks>
 800a40a:	4603      	mov	r3, r0
 800a40c:	853b      	strh	r3, [r7, #40]	; 0x28
            if (res == ERR_NONE)
 800a40e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a410:	2b00      	cmp	r3, #0
 800a412:	d102      	bne.n	800a41a <ndefT3TPollerWriteBytes+0x1e4>
            {
                currentLen = 0U;
 800a414:	2300      	movs	r3, #0
 800a416:	63bb      	str	r3, [r7, #56]	; 0x38
 800a418:	e001      	b.n	800a41e <ndefT3TPollerWriteBytes+0x1e8>
            }
            else
            {
                result = res; /* Copy the error code */
 800a41a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a41c:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }
    }
    if ( (currentLen == 0U) && (result == ERR_NONE) )
 800a41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a420:	2b00      	cmp	r3, #0
 800a422:	d104      	bne.n	800a42e <ndefT3TPollerWriteBytes+0x1f8>
 800a424:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a426:	2b00      	cmp	r3, #0
 800a428:	d101      	bne.n	800a42e <ndefT3TPollerWriteBytes+0x1f8>
    {
        result = ERR_NONE;
 800a42a:	2300      	movs	r3, #0
 800a42c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    return result;
 800a42e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
}
 800a430:	4618      	mov	r0, r3
 800a432:	3740      	adds	r7, #64	; 0x40
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <ndefT3TPollerWriteAttributeInformationBlock>:

/*******************************************************************************/
static ReturnCode ndefT3TPollerWriteAttributeInformationBlock(ndefContext * ctx)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
    uint8_t    dataIt;
    uint16_t   checksum;
    uint8_t *  buf;
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d003      	beq.n	800a44e <ndefT3TPollerWriteAttributeInformationBlock+0x16>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d001      	beq.n	800a452 <ndefT3TPollerWriteAttributeInformationBlock+0x1a>
    {
        return ERR_PARAM;
 800a44e:	2307      	movs	r3, #7
 800a450:	e10e      	b.n	800a670 <ndefT3TPollerWriteAttributeInformationBlock+0x238>
    }
    if ( ctx->state < NDEF_STATE_INITIALIZED )
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <ndefT3TPollerWriteAttributeInformationBlock+0x28>
    {
        return ERR_WRONG_STATE;
 800a45c:	2321      	movs	r3, #33	; 0x21
 800a45e:	e107      	b.n	800a670 <ndefT3TPollerWriteAttributeInformationBlock+0x238>
    }
    dataIt        = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	75fb      	strb	r3, [r7, #23]
    buf           = ctx->ccBuf;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	339c      	adds	r3, #156	; 0x9c
 800a468:	613b      	str	r3, [r7, #16]
    checksum      = 0U;
 800a46a:	2300      	movs	r3, #0
 800a46c:	81fb      	strh	r3, [r7, #14]
    buf[dataIt]   = ((uint8_t)(ctx->cc.t3t.majorVersion << 4U)) |  ctx->cc.t3t.minorVersion; /* Byte  0 Ver          */
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a474:	011b      	lsls	r3, r3, #4
 800a476:	b2d9      	uxtb	r1, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800a47e:	7dfb      	ldrb	r3, [r7, #23]
 800a480:	6938      	ldr	r0, [r7, #16]
 800a482:	4403      	add	r3, r0
 800a484:	430a      	orrs	r2, r1
 800a486:	b2d2      	uxtb	r2, r2
 800a488:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a48a:	7dfb      	ldrb	r3, [r7, #23]
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	4413      	add	r3, r2
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	b29a      	uxth	r2, r3
 800a494:	89fb      	ldrh	r3, [r7, #14]
 800a496:	4413      	add	r3, r2
 800a498:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a49a:	7dfb      	ldrb	r3, [r7, #23]
 800a49c:	3301      	adds	r3, #1
 800a49e:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.nbR;                                                         /* Byte  1 Nbr          */
 800a4a0:	7dfb      	ldrb	r3, [r7, #23]
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 800a4ac:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a4ae:	7dfb      	ldrb	r3, [r7, #23]
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	89fb      	ldrh	r3, [r7, #14]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a4be:	7dfb      	ldrb	r3, [r7, #23]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.nbW;                                                         /* Byte  2 Nbw          */
 800a4c4:	7dfb      	ldrb	r3, [r7, #23]
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 800a4d0:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a4d2:	7dfb      	ldrb	r3, [r7, #23]
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	89fb      	ldrh	r3, [r7, #14]
 800a4de:	4413      	add	r3, r2
 800a4e0:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a4e2:	7dfb      	ldrb	r3, [r7, #23]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.nMaxB >> 8U);                                      /* Byte  3 NmaxB  (MSB) */
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800a4ee:	0a1b      	lsrs	r3, r3, #8
 800a4f0:	b299      	uxth	r1, r3
 800a4f2:	7dfb      	ldrb	r3, [r7, #23]
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	b2ca      	uxtb	r2, r1
 800a4fa:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a4fc:	7dfb      	ldrb	r3, [r7, #23]
 800a4fe:	693a      	ldr	r2, [r7, #16]
 800a500:	4413      	add	r3, r2
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	b29a      	uxth	r2, r3
 800a506:	89fb      	ldrh	r3, [r7, #14]
 800a508:	4413      	add	r3, r2
 800a50a:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a50c:	7dfb      	ldrb	r3, [r7, #23]
 800a50e:	3301      	adds	r3, #1
 800a510:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.nMaxB >> 0U);                                      /* Byte  4 NmaxB  (LSB) */
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
 800a518:	7dfb      	ldrb	r3, [r7, #23]
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	4413      	add	r3, r2
 800a51e:	b2ca      	uxtb	r2, r1
 800a520:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a522:	7dfb      	ldrb	r3, [r7, #23]
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	4413      	add	r3, r2
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	89fb      	ldrh	r3, [r7, #14]
 800a52e:	4413      	add	r3, r2
 800a530:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a532:	7dfb      	ldrb	r3, [r7, #23]
 800a534:	3301      	adds	r3, #1
 800a536:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  5 RFU          */
 800a538:	7dfb      	ldrb	r3, [r7, #23]
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	4413      	add	r3, r2
 800a53e:	2200      	movs	r2, #0
 800a540:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800a542:	7dfb      	ldrb	r3, [r7, #23]
 800a544:	3301      	adds	r3, #1
 800a546:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  6 RFU          */
 800a548:	7dfb      	ldrb	r3, [r7, #23]
 800a54a:	693a      	ldr	r2, [r7, #16]
 800a54c:	4413      	add	r3, r2
 800a54e:	2200      	movs	r2, #0
 800a550:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800a552:	7dfb      	ldrb	r3, [r7, #23]
 800a554:	3301      	adds	r3, #1
 800a556:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  7 RFU          */
 800a558:	7dfb      	ldrb	r3, [r7, #23]
 800a55a:	693a      	ldr	r2, [r7, #16]
 800a55c:	4413      	add	r3, r2
 800a55e:	2200      	movs	r2, #0
 800a560:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800a562:	7dfb      	ldrb	r3, [r7, #23]
 800a564:	3301      	adds	r3, #1
 800a566:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  8 RFU          */
 800a568:	7dfb      	ldrb	r3, [r7, #23]
 800a56a:	693a      	ldr	r2, [r7, #16]
 800a56c:	4413      	add	r3, r2
 800a56e:	2200      	movs	r2, #0
 800a570:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800a572:	7dfb      	ldrb	r3, [r7, #23]
 800a574:	3301      	adds	r3, #1
 800a576:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.writeFlag;                                                   /* Byte  9 WriteFlag    */
 800a578:	7dfb      	ldrb	r3, [r7, #23]
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	4413      	add	r3, r2
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 800a584:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a586:	7dfb      	ldrb	r3, [r7, #23]
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	4413      	add	r3, r2
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	b29a      	uxth	r2, r3
 800a590:	89fb      	ldrh	r3, [r7, #14]
 800a592:	4413      	add	r3, r2
 800a594:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a596:	7dfb      	ldrb	r3, [r7, #23]
 800a598:	3301      	adds	r3, #1
 800a59a:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.rwFlag;                                                      /* Byte 10 RWFlag       */
 800a59c:	7dfb      	ldrb	r3, [r7, #23]
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 800a5a8:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a5aa:	7dfb      	ldrb	r3, [r7, #23]
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	89fb      	ldrh	r3, [r7, #14]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >> 16U);                                        /* Byte 11 Ln (MSB)     */
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5c6:	0c19      	lsrs	r1, r3, #16
 800a5c8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	b2ca      	uxtb	r2, r1
 800a5d0:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	89fb      	ldrh	r3, [r7, #14]
 800a5de:	4413      	add	r3, r2
 800a5e0:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a5e2:	7dfb      	ldrb	r3, [r7, #23]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >>  8U);                                        /* Byte 12 Ln (middle)  */
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5ee:	0a19      	lsrs	r1, r3, #8
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	b2ca      	uxtb	r2, r1
 800a5f8:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a5fa:	7dfb      	ldrb	r3, [r7, #23]
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	4413      	add	r3, r2
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	b29a      	uxth	r2, r3
 800a604:	89fb      	ldrh	r3, [r7, #14]
 800a606:	4413      	add	r3, r2
 800a608:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a60a:	7dfb      	ldrb	r3, [r7, #23]
 800a60c:	3301      	adds	r3, #1
 800a60e:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >>  0U);                                        /* Byte 13 Ln (LSB)     */
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800a616:	7dfb      	ldrb	r3, [r7, #23]
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	4413      	add	r3, r2
 800a61c:	b2ca      	uxtb	r2, r1
 800a61e:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800a620:	7dfb      	ldrb	r3, [r7, #23]
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	4413      	add	r3, r2
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	b29a      	uxth	r2, r3
 800a62a:	89fb      	ldrh	r3, [r7, #14]
 800a62c:	4413      	add	r3, r2
 800a62e:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800a630:	7dfb      	ldrb	r3, [r7, #23]
 800a632:	3301      	adds	r3, #1
 800a634:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = (uint8_t)(checksum >> 8U);                                                 /* Byte 14 checksum MSB */
 800a636:	89fb      	ldrh	r3, [r7, #14]
 800a638:	0a1b      	lsrs	r3, r3, #8
 800a63a:	b299      	uxth	r1, r3
 800a63c:	7dfb      	ldrb	r3, [r7, #23]
 800a63e:	693a      	ldr	r2, [r7, #16]
 800a640:	4413      	add	r3, r2
 800a642:	b2ca      	uxtb	r2, r1
 800a644:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800a646:	7dfb      	ldrb	r3, [r7, #23]
 800a648:	3301      	adds	r3, #1
 800a64a:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = (uint8_t)(checksum >> 0U);                                                 /* Byte 15 checksum LSB */
 800a64c:	7dfb      	ldrb	r3, [r7, #23]
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	4413      	add	r3, r2
 800a652:	89fa      	ldrh	r2, [r7, #14]
 800a654:	b2d2      	uxtb	r2, r2
 800a656:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	3301      	adds	r3, #1
 800a65c:	75fb      	strb	r3, [r7, #23]

    ret = ndefT3TPollerWriteBlocks(ctx, NDEF_T3T_ATTRIB_INFO_BLOCK_NB, 1U /* One block */, buf);
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	2201      	movs	r2, #1
 800a662:	2100      	movs	r1, #0
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7ff fd8b 	bl	800a180 <ndefT3TPollerWriteBlocks>
 800a66a:	4603      	mov	r3, r0
 800a66c:	81bb      	strh	r3, [r7, #12]
    return ret;
 800a66e:	89bb      	ldrh	r3, [r7, #12]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3718      	adds	r7, #24
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <ndefT3TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d009      	beq.n	800a69e <ndefT3TPollerWriteRawMessage+0x26>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d105      	bne.n	800a69e <ndefT3TPollerWriteRawMessage+0x26>
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d104      	bne.n	800a6a2 <ndefT3TPollerWriteRawMessage+0x2a>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <ndefT3TPollerWriteRawMessage+0x2a>
    {
        return ERR_PARAM;
 800a69e:	2307      	movs	r3, #7
 800a6a0:	e04b      	b.n	800a73a <ndefT3TPollerWriteRawMessage+0xc2>
    }
    /* TS T3T v1.0 7.4.3: This procedure assumes that the Reader/Writer has successfully performed the NDEF detection procedure... */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T3T v1.0 7.4.3: ... and that the RWFlag in the Attribute Information Block is set to 01h. */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d006      	beq.n	800a6ba <ndefT3TPollerWriteRawMessage+0x42>
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d001      	beq.n	800a6ba <ndefT3TPollerWriteRawMessage+0x42>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 800a6b6:	2321      	movs	r3, #33	; 0x21
 800a6b8:	e03f      	b.n	800a73a <ndefT3TPollerWriteRawMessage+0xc2>
    }

    /* TS T3T v1.0 7.4.3.2: verify available space */
    ret = ndefT3TPollerCheckAvailableSpace(ctx, bufLen);
 800a6ba:	6879      	ldr	r1, [r7, #4]
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 f8cb 	bl	800a858 <ndefT3TPollerCheckAvailableSpace>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a6c6:	8afb      	ldrh	r3, [r7, #22]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <ndefT3TPollerWriteRawMessage+0x58>
    {
        /* Conclude procedure */
        return ERR_PARAM;
 800a6cc:	2307      	movs	r3, #7
 800a6ce:	e034      	b.n	800a73a <ndefT3TPollerWriteRawMessage+0xc2>
    }

    /* TS T3T v1.0 7.4.3.3: update WriteFlag */
    ret = ndefT3TPollerBeginWriteMessage(ctx, bufLen);
 800a6d0:	6879      	ldr	r1, [r7, #4]
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f000 f8e3 	bl	800a89e <ndefT3TPollerBeginWriteMessage>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a6dc:	8afb      	ldrh	r3, [r7, #22]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d005      	beq.n	800a6ee <ndefT3TPollerWriteRawMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return ret;
 800a6ea:	8afb      	ldrh	r3, [r7, #22]
 800a6ec:	e025      	b.n	800a73a <ndefT3TPollerWriteRawMessage+0xc2>
    }

    if( bufLen != 0U )
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d012      	beq.n	800a71a <ndefT3TPollerWriteRawMessage+0xa2>
    {
       /* TS T3T v1.0 7.4.3.4: write new NDEF message */
        ret = ndefT3TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f7ff fd99 	bl	800a236 <ndefT3TPollerWriteBytes>
 800a704:	4603      	mov	r3, r0
 800a706:	82fb      	strh	r3, [r7, #22]
        if  (ret != ERR_NONE)
 800a708:	8afb      	ldrh	r3, [r7, #22]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d005      	beq.n	800a71a <ndefT3TPollerWriteRawMessage+0xa2>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800a716:	8afb      	ldrh	r3, [r7, #22]
 800a718:	e00f      	b.n	800a73a <ndefT3TPollerWriteRawMessage+0xc2>
        }
    }
    /* TS T3T v1.0 7.4.3.5: update Ln value and set WriteFlag to OFF */
    ret = ndefT3TPollerEndWriteMessage(ctx, bufLen);
 800a71a:	6879      	ldr	r1, [r7, #4]
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f000 f8f3 	bl	800a908 <ndefT3TPollerEndWriteMessage>
 800a722:	4603      	mov	r3, r0
 800a724:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a726:	8afb      	ldrh	r3, [r7, #22]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d005      	beq.n	800a738 <ndefT3TPollerWriteRawMessage+0xc0>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800a734:	8afb      	ldrh	r3, [r7, #22]
 800a736:	e000      	b.n	800a73a <ndefT3TPollerWriteRawMessage+0xc2>
    }
    return ret;
 800a738:	8afb      	ldrh	r3, [r7, #22]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3718      	adds	r7, #24
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <ndefT3TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT3TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer * cc, uint32_t options)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b08e      	sub	sp, #56	; 0x38
 800a746:	af02      	add	r7, sp, #8
 800a748:	60f8      	str	r0, [r7, #12]
 800a74a:	60b9      	str	r1, [r7, #8]
 800a74c:	607a      	str	r2, [r7, #4]
    ReturnCode        res;
    rfalFeliCaPollRes buffOut [NDEF_T3T_MAX_DEVICE];
    uint8_t           devCnt     = NDEF_T3T_MAX_DEVICE;
 800a74e:	2301      	movs	r3, #1
 800a750:	75fb      	strb	r3, [r7, #23]
    uint8_t           collisions = 0U;
 800a752:	2300      	movs	r3, #0
 800a754:	75bb      	strb	r3, [r7, #22]
    NO_WARNING(options); /* options not used in T3T */

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d003      	beq.n	800a764 <ndefT3TPollerTagFormat+0x22>
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	2b02      	cmp	r3, #2
 800a762:	d001      	beq.n	800a768 <ndefT3TPollerTagFormat+0x26>
    {
        return ERR_PARAM;
 800a764:	2307      	movs	r3, #7
 800a766:	e051      	b.n	800a80c <ndefT3TPollerTagFormat+0xca>
    }
    if ( cc == NULL)
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d109      	bne.n	800a782 <ndefT3TPollerTagFormat+0x40>
    {
        /* No default CC found so have to analyse the tag */
        res = ndefT3TPollerReadAttributeInformationBlock(ctx);  /* Read current cc */
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f7ff fb5d 	bl	8009e2e <ndefT3TPollerReadAttributeInformationBlock>
 800a774:	4603      	mov	r3, r0
 800a776:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if (res != ERR_NONE)
 800a778:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d008      	beq.n	800a790 <ndefT3TPollerTagFormat+0x4e>
        {
            return res;
 800a77e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a780:	e044      	b.n	800a80c <ndefT3TPollerTagFormat+0xca>
        }
    }
    else
    {
        /* Nothing to do */
        (void)ST_MEMCPY(&ctx->cc, cc, sizeof(ndefCapabilityContainer));
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	337c      	adds	r3, #124	; 0x7c
 800a786:	2214      	movs	r2, #20
 800a788:	68b9      	ldr	r1, [r7, #8]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f00e fac0 	bl	8018d10 <memcpy>
    }

    /* 4.3.3 System Definition Information for SystemCode = 0x12FC (NDEF) */
    res = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_NO_REQUEST, buffOut, &devCnt, &collisions );
 800a790:	f107 0218 	add.w	r2, r7, #24
 800a794:	f107 0316 	add.w	r3, r7, #22
 800a798:	9301      	str	r3, [sp, #4]
 800a79a:	f107 0317 	add.w	r3, r7, #23
 800a79e:	9300      	str	r3, [sp, #0]
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f241 21fc 	movw	r1, #4860	; 0x12fc
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	f009 fc69 	bl	8014080 <rfalNfcfPollerPoll>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (res != ERR_NONE)
 800a7b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <ndefT3TPollerTagFormat+0x7a>
    {
        return res;
 800a7b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7ba:	e027      	b.n	800a80c <ndefT3TPollerTagFormat+0xca>
    }
    res = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_SYSTEM_CODE, buffOut, &devCnt, &collisions );
 800a7bc:	f107 0218 	add.w	r2, r7, #24
 800a7c0:	f107 0316 	add.w	r3, r7, #22
 800a7c4:	9301      	str	r3, [sp, #4]
 800a7c6:	f107 0317 	add.w	r3, r7, #23
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f241 21fc 	movw	r1, #4860	; 0x12fc
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	f009 fc53 	bl	8014080 <rfalNfcfPollerPoll>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (res != ERR_NONE)
 800a7de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <ndefT3TPollerTagFormat+0xa6>
    {
        return res;
 800a7e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7e6:	e011      	b.n	800a80c <ndefT3TPollerTagFormat+0xca>
    }
    ctx->state            = NDEF_STATE_INITIALIZED; /* to be sure that the block will be written */
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->cc.t3t.Ln        = 0U; /* Force actual stored NDEF size to 0 */
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ctx->cc.t3t.writeFlag = 0U; /* Force WriteFlag to 0 */
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    res = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f7ff fe19 	bl	800a438 <ndefT3TPollerWriteAttributeInformationBlock>
 800a806:	4603      	mov	r3, r0
 800a808:	85fb      	strh	r3, [r7, #46]	; 0x2e
    return res;
 800a80a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3730      	adds	r7, #48	; 0x30
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <ndefT3TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT3TPollerCheckPresence(ndefContext *ctx)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af02      	add	r7, sp, #8
 800a81a:	6078      	str	r0, [r7, #4]
    ReturnCode        retcode;
    uint16_t          nbRead;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d003      	beq.n	800a82a <ndefT3TPollerCheckPresence+0x16>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	2b02      	cmp	r3, #2
 800a828:	d001      	beq.n	800a82e <ndefT3TPollerCheckPresence+0x1a>
    {
        return ERR_PARAM;
 800a82a:	2307      	movs	r3, #7
 800a82c:	e010      	b.n	800a850 <ndefT3TPollerCheckPresence+0x3c>
    }
    /* Perform a simple readblock */
    retcode = ndefT3TPollerReadBlocks(ctx, 0U /* First block */, 1U /* One Block */, ctx->subCtx.t3t.rxbuf, NDEF_T3T_BLOCKLEN, &nbRead);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800a834:	f107 030c 	add.w	r3, r7, #12
 800a838:	9301      	str	r3, [sp, #4]
 800a83a:	2310      	movs	r3, #16
 800a83c:	9300      	str	r3, [sp, #0]
 800a83e:	4613      	mov	r3, r2
 800a840:	2201      	movs	r2, #1
 800a842:	2100      	movs	r1, #0
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7ff f95e 	bl	8009b06 <ndefT3TPollerReadBlocks>
 800a84a:	4603      	mov	r3, r0
 800a84c:	81fb      	strh	r3, [r7, #14]
    return retcode;
 800a84e:	89fb      	ldrh	r3, [r7, #14]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <ndefT3TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT3TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d003      	beq.n	800a870 <ndefT3TPollerCheckAvailableSpace+0x18>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d001      	beq.n	800a874 <ndefT3TPollerCheckAvailableSpace+0x1c>
    {
        return ERR_PARAM;
 800a870:	2307      	movs	r3, #7
 800a872:	e00f      	b.n	800a894 <ndefT3TPollerCheckAvailableSpace+0x3c>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <ndefT3TPollerCheckAvailableSpace+0x2a>
    {
        return ERR_WRONG_STATE;
 800a87e:	2321      	movs	r3, #33	; 0x21
 800a880:	e008      	b.n	800a894 <ndefT3TPollerCheckAvailableSpace+0x3c>
    }
    if( messageLen  > ctx->areaLen )
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d901      	bls.n	800a892 <ndefT3TPollerCheckAvailableSpace+0x3a>
    {
        return ERR_NOMEM;
 800a88e:	2301      	movs	r3, #1
 800a890:	e000      	b.n	800a894 <ndefT3TPollerCheckAvailableSpace+0x3c>
    }
    return ERR_NONE;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	bc80      	pop	{r7}
 800a89c:	4770      	bx	lr

0800a89e <ndefT3TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
 800a8a6:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    NO_WARNING(messageLen);

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d003      	beq.n	800a8b6 <ndefT3TPollerBeginWriteMessage+0x18>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d001      	beq.n	800a8ba <ndefT3TPollerBeginWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800a8b6:	2307      	movs	r3, #7
 800a8b8:	e022      	b.n	800a900 <ndefT3TPollerBeginWriteMessage+0x62>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d006      	beq.n	800a8d2 <ndefT3TPollerBeginWriteMessage+0x34>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d001      	beq.n	800a8d2 <ndefT3TPollerBeginWriteMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800a8ce:	2321      	movs	r3, #33	; 0x21
 800a8d0:	e016      	b.n	800a900 <ndefT3TPollerBeginWriteMessage+0x62>
    }
    /* Update WriteFlag */
    ctx->cc.t3t.writeFlag = NDEF_T3T_WRITEFLAG_ON;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	220f      	movs	r2, #15
 800a8d6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ret                   = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f7ff fdac 	bl	800a438 <ndefT3TPollerWriteAttributeInformationBlock>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800a8e4:	89fb      	ldrh	r3, [r7, #14]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d005      	beq.n	800a8f6 <ndefT3TPollerBeginWriteMessage+0x58>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800a8f2:	89fb      	ldrh	r3, [r7, #14]
 800a8f4:	e004      	b.n	800a900 <ndefT3TPollerBeginWriteMessage+0x62>
    }
    ctx->state = NDEF_STATE_INITIALIZED;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <ndefT3TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d003      	beq.n	800a920 <ndefT3TPollerEndWriteMessage+0x18>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	d001      	beq.n	800a924 <ndefT3TPollerEndWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800a920:	2307      	movs	r3, #7
 800a922:	e02c      	b.n	800a97e <ndefT3TPollerEndWriteMessage+0x76>
    }
    if( ctx->state != NDEF_STATE_INITIALIZED )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d001      	beq.n	800a932 <ndefT3TPollerEndWriteMessage+0x2a>
    {
        return ERR_WRONG_STATE;
 800a92e:	2321      	movs	r3, #33	; 0x21
 800a930:	e025      	b.n	800a97e <ndefT3TPollerEndWriteMessage+0x76>
    }
    /* TS T3T v1.0 7.4.3.5 Update Attribute Information Block */
    ctx->cc.t3t.writeFlag = NDEF_T3T_WRITEFLAG_OFF;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ctx->cc.t3t.Ln        = messageLen;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	683a      	ldr	r2, [r7, #0]
 800a93e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ret                   = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f7ff fd78 	bl	800a438 <ndefT3TPollerWriteAttributeInformationBlock>
 800a948:	4603      	mov	r3, r0
 800a94a:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800a94c:	89fb      	ldrh	r3, [r7, #14]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d005      	beq.n	800a95e <ndefT3TPollerEndWriteMessage+0x56>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800a95a:	89fb      	ldrh	r3, [r7, #14]
 800a95c:	e00f      	b.n	800a97e <ndefT3TPollerEndWriteMessage+0x76>
    }
    ctx->messageLen = messageLen;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state      = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d101      	bne.n	800a974 <ndefT3TPollerEndWriteMessage+0x6c>
 800a970:	2201      	movs	r2, #1
 800a972:	e000      	b.n	800a976 <ndefT3TPollerEndWriteMessage+0x6e>
 800a974:	2202      	movs	r2, #2
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <ndefT3TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b082      	sub	sp, #8
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d003      	beq.n	800a99e <ndefT3TPollerWriteRawMessageLen+0x18>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d001      	beq.n	800a9a2 <ndefT3TPollerWriteRawMessageLen+0x1c>
    {
        return ERR_PARAM;
 800a99e:	2307      	movs	r3, #7
 800a9a0:	e010      	b.n	800a9c4 <ndefT3TPollerWriteRawMessageLen+0x3e>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d006      	beq.n	800a9ba <ndefT3TPollerWriteRawMessageLen+0x34>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a9b2:	2b02      	cmp	r3, #2
 800a9b4:	d001      	beq.n	800a9ba <ndefT3TPollerWriteRawMessageLen+0x34>
    {
        return ERR_WRONG_STATE;
 800a9b6:	2321      	movs	r3, #33	; 0x21
 800a9b8:	e004      	b.n	800a9c4 <ndefT3TPollerWriteRawMessageLen+0x3e>
    }
    return ndefT3TPollerEndWriteMessage(ctx, rawMessageLen);
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f7ff ffa3 	bl	800a908 <ndefT3TPollerEndWriteMessage>
 800a9c2:	4603      	mov	r3, r0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <ndefT4TInitializeIsoDepTxRxParam>:
 ******************************************************************************
 */

/*******************************************************************************/
static void ndefT4TInitializeIsoDepTxRxParam(ndefContext *ctx, rfalIsoDepApduTxRxParam *isoDepAPDU)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
    /* Initialize the ISO-DEP protocol transceive context */
    isoDepAPDU->txBuf        = &ctx->subCtx.t4t.cApduBuf;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f103 02b7 	add.w	r2, r3, #183	; 0xb7
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	601a      	str	r2, [r3, #0]
    isoDepAPDU->DID          = ctx->device.proto.isoDep.info.DID;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	f883 2020 	strb.w	r2, [r3, #32]
    isoDepAPDU->FWT          = ctx->device.proto.isoDep.info.FWT;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	615a      	str	r2, [r3, #20]
    isoDepAPDU->dFWT         = ctx->device.proto.isoDep.info.dFWT;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	619a      	str	r2, [r3, #24]
    isoDepAPDU->FSx          = ctx->device.proto.isoDep.info.FSx;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	839a      	strh	r2, [r3, #28]
    isoDepAPDU->ourFSx       = RFAL_ISODEP_FSX_KEEP;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	22ff      	movs	r2, #255	; 0xff
 800aa0a:	83da      	strh	r2, [r3, #30]
    isoDepAPDU->rxBuf        = &ctx->subCtx.t4t.rApduBuf;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	609a      	str	r2, [r3, #8]
    isoDepAPDU->tmpBuf       = &ctx->subCtx.t4t.tmpBuf;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f603 02cc 	addw	r2, r3, #2252	; 0x8cc
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	611a      	str	r2, [r3, #16]
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bc80      	pop	{r7}
 800aa28:	4770      	bx	lr

0800aa2a <ndefT4TTransceiveTxRx>:

/*******************************************************************************/
static ReturnCode ndefT4TTransceiveTxRx(ndefContext *ctx, rfalIsoDepApduTxRxParam *isoDepAPDU)
{
 800aa2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa2c:	b08b      	sub	sp, #44	; 0x2c
 800aa2e:	af06      	add	r7, sp, #24
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	6039      	str	r1, [r7, #0]
    ReturnCode               ret;

    /* Initialize respAPDU */
    ctx->subCtx.t4t.respAPDU.rApduBuf = &ctx->subCtx.t4t.rApduBuf;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8c3 28c0 	str.w	r2, [r3, #2240]	; 0x8c0
    isoDepAPDU->rxLen                 = &ctx->subCtx.t4t.respAPDU.rcvdLen;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f603 02c4 	addw	r2, r3, #2244	; 0x8c4
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	60da      	str	r2, [r3, #12]

    ret = rfalIsoDepStartApduTransceive(*isoDepAPDU);
 800aa4a:	683e      	ldr	r6, [r7, #0]
 800aa4c:	466d      	mov	r5, sp
 800aa4e:	f106 0410 	add.w	r4, r6, #16
 800aa52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	602b      	str	r3, [r5, #0]
 800aa5a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800aa5e:	f004 fa67 	bl	800ef30 <rfalIsoDepStartApduTransceive>
 800aa62:	4603      	mov	r3, r0
 800aa64:	81fb      	strh	r3, [r7, #14]
    if( ret == ERR_NONE )
 800aa66:	89fb      	ldrh	r3, [r7, #14]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d108      	bne.n	800aa7e <ndefT4TTransceiveTxRx+0x54>
    {
        do {
            /* Blocking implementation, T4T may define rather long timeouts */
            rfalWorker();
 800aa6c:	f00b faaa 	bl	8015fc4 <rfalWorker>
            ret = rfalIsoDepGetApduTransceiveStatus();
 800aa70:	f004 faae 	bl	800efd0 <rfalIsoDepGetApduTransceiveStatus>
 800aa74:	4603      	mov	r3, r0
 800aa76:	81fb      	strh	r3, [r7, #14]
        } while (ret == ERR_BUSY);
 800aa78:	89fb      	ldrh	r3, [r7, #14]
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d0f6      	beq.n	800aa6c <ndefT4TTransceiveTxRx+0x42>
    }
    
    if (ret != ERR_NONE)
 800aa7e:	89fb      	ldrh	r3, [r7, #14]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d001      	beq.n	800aa88 <ndefT4TTransceiveTxRx+0x5e>
    {
        return ret;
 800aa84:	89fb      	ldrh	r3, [r7, #14]
 800aa86:	e00e      	b.n	800aaa6 <ndefT4TTransceiveTxRx+0x7c>
    }

    ret = rfalT4TPollerParseRAPDU(&ctx->subCtx.t4t.respAPDU);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f00d fee5 	bl	801885e <rfalT4TPollerParseRAPDU>
 800aa94:	4603      	mov	r3, r0
 800aa96:	81fb      	strh	r3, [r7, #14]
    ctx->subCtx.t4t.rApduBodyLen = ctx->subCtx.t4t.respAPDU.rApduBodyLen;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8b3 28c6 	ldrh.w	r2, [r3, #2246]	; 0x8c6
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8a3 29d0 	strh.w	r2, [r3, #2512]	; 0x9d0
    
    return ret;
 800aaa4:	89fb      	ldrh	r3, [r7, #14]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800aab0 <ndefT4TReadAndParseCCFile>:

/*******************************************************************************/
static ReturnCode ndefT4TReadAndParseCCFile(ndefContext *ctx)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
    
    ReturnCode           ret;
    uint8_t              dataIt;
    
    /* Select CCFILE TS T4T v1.0 7.2.1.3 */
    ret =  ndefT4TPollerSelectFile(ctx, RFAL_T4T_FID_CC);
 800aab8:	49a0      	ldr	r1, [pc, #640]	; (800ad3c <ndefT4TReadAndParseCCFile+0x28c>)
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 f9e6 	bl	800ae8c <ndefT4TPollerSelectFile>
 800aac0:	4603      	mov	r3, r0
 800aac2:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800aac4:	89fb      	ldrh	r3, [r7, #14]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <ndefT4TReadAndParseCCFile+0x1e>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.4 */
        return ret;
 800aaca:	89fb      	ldrh	r3, [r7, #14]
 800aacc:	e180      	b.n	800add0 <ndefT4TReadAndParseCCFile+0x320>
    }

    /* Read CCFILE TS T4T v1.0 7.2.1.5 */
    /* read CCFILE assuming at least 15 bytes are available. If V3 found will read the extra bytes in a second step */
    ret = ndefT4TPollerReadBinary(ctx, 0U, NDEF_T4T_CCFILEV2_LEN);
 800aace:	220f      	movs	r2, #15
 800aad0:	2100      	movs	r1, #0
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fa19 	bl	800af0a <ndefT4TPollerReadBinary>
 800aad8:	4603      	mov	r3, r0
 800aada:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800aadc:	89fb      	ldrh	r3, [r7, #14]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <ndefT4TReadAndParseCCFile+0x36>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.6 */
        return ret;
 800aae2:	89fb      	ldrh	r3, [r7, #14]
 800aae4:	e174      	b.n	800add0 <ndefT4TReadAndParseCCFile+0x320>
    }
    (void)ST_MEMCPY(ctx->ccBuf, ctx->subCtx.t4t.rApduBuf.apdu, NDEF_T4T_CCFILEV2_LEN);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f203 43bd 	addw	r3, r3, #1213	; 0x4bd
 800aaf2:	220f      	movs	r2, #15
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	f00e f90b 	bl	8018d10 <memcpy>
    dataIt = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.ccLen = GETU16(&ctx->ccBuf[dataIt]);
 800aafe:	7b7b      	ldrb	r3, [r7, #13]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	4413      	add	r3, r2
 800ab04:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ab08:	021b      	lsls	r3, r3, #8
 800ab0a:	b21a      	sxth	r2, r3
 800ab0c:	7b7b      	ldrb	r3, [r7, #13]
 800ab0e:	3398      	adds	r3, #152	; 0x98
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	440b      	add	r3, r1
 800ab14:	3304      	adds	r3, #4
 800ab16:	3301      	adds	r3, #1
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	b21b      	sxth	r3, r3
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	b21b      	sxth	r3, r3
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    dataIt += (uint8_t)sizeof(uint16_t);
 800ab28:	7b7b      	ldrb	r3, [r7, #13]
 800ab2a:	3302      	adds	r3, #2
 800ab2c:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.vNo   = ctx->ccBuf[dataIt];
 800ab2e:	7b7b      	ldrb	r3, [r7, #13]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	4413      	add	r3, r2
 800ab34:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    dataIt++;
 800ab3e:	7b7b      	ldrb	r3, [r7, #13]
 800ab40:	3301      	adds	r3, #1
 800ab42:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.mLe   = GETU16(&ctx->ccBuf[dataIt]);
 800ab44:	7b7b      	ldrb	r3, [r7, #13]
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	4413      	add	r3, r2
 800ab4a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ab4e:	021b      	lsls	r3, r3, #8
 800ab50:	b21a      	sxth	r2, r3
 800ab52:	7b7b      	ldrb	r3, [r7, #13]
 800ab54:	3398      	adds	r3, #152	; 0x98
 800ab56:	6879      	ldr	r1, [r7, #4]
 800ab58:	440b      	add	r3, r1
 800ab5a:	3304      	adds	r3, #4
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	b21b      	sxth	r3, r3
 800ab62:	4313      	orrs	r3, r2
 800ab64:	b21b      	sxth	r3, r3
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    dataIt += (uint8_t)sizeof(uint16_t);
 800ab6e:	7b7b      	ldrb	r3, [r7, #13]
 800ab70:	3302      	adds	r3, #2
 800ab72:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.mLc   = GETU16(&ctx->ccBuf[dataIt]);
 800ab74:	7b7b      	ldrb	r3, [r7, #13]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ab7e:	021b      	lsls	r3, r3, #8
 800ab80:	b21a      	sxth	r2, r3
 800ab82:	7b7b      	ldrb	r3, [r7, #13]
 800ab84:	3398      	adds	r3, #152	; 0x98
 800ab86:	6879      	ldr	r1, [r7, #4]
 800ab88:	440b      	add	r3, r1
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	b21b      	sxth	r3, r3
 800ab92:	4313      	orrs	r3, r2
 800ab94:	b21b      	sxth	r3, r3
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    dataIt += (uint8_t)sizeof(uint16_t);
 800ab9e:	7b7b      	ldrb	r3, [r7, #13]
 800aba0:	3302      	adds	r3, #2
 800aba2:	737b      	strb	r3, [r7, #13]
    
    /* TS T4T v1.0 7.2.1.7 verify MLe and MLc are within the valid range */
    if( (ctx->cc.t4t.mLe < NDEF_T4T_MIN_VALID_MLE) || (ctx->cc.t4t.mLc < NDEF_T4T_MIN_VALID_MLC) )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800abaa:	2b0e      	cmp	r3, #14
 800abac:	d904      	bls.n	800abb8 <ndefT4TReadAndParseCCFile+0x108>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800abb4:	2b0c      	cmp	r3, #12
 800abb6:	d801      	bhi.n	800abbc <ndefT4TReadAndParseCCFile+0x10c>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800abb8:	2305      	movs	r3, #5
 800abba:	e109      	b.n	800add0 <ndefT4TReadAndParseCCFile+0x320>
    }

    ctx->subCtx.t4t.curMLe   = (uint8_t)MIN(ctx->cc.t4t.mLe, NDEF_T4T_MAX_MLE); /* Only short field codind supported */
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800abc2:	2bfe      	cmp	r3, #254	; 0xfe
 800abc4:	d804      	bhi.n	800abd0 <ndefT4TReadAndParseCCFile+0x120>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	e000      	b.n	800abd2 <ndefT4TReadAndParseCCFile+0x122>
 800abd0:	22ff      	movs	r2, #255	; 0xff
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    ctx->subCtx.t4t.curMLc   = (uint8_t)MIN(ctx->cc.t4t.mLc, NDEF_T4T_MAX_MLC); /* Only short field codind supported */
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800abde:	2bfe      	cmp	r3, #254	; 0xfe
 800abe0:	d804      	bhi.n	800abec <ndefT4TReadAndParseCCFile+0x13c>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	e000      	b.n	800abee <ndefT4TReadAndParseCCFile+0x13e>
 800abec:	22ff      	movs	r2, #255	; 0xff
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    /* TS T4T v1.0 7.2.1.7 and 4.3.2.4 verify support of mapping version */
    if( ndefMajorVersion(ctx->cc.t4t.vNo) > ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800abfa:	091b      	lsrs	r3, r3, #4
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	2b03      	cmp	r3, #3
 800ac00:	d901      	bls.n	800ac06 <ndefT4TReadAndParseCCFile+0x156>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800ac02:	2305      	movs	r3, #5
 800ac04:	e0e4      	b.n	800add0 <ndefT4TReadAndParseCCFile+0x320>
    }
    if( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ac0c:	091b      	lsrs	r3, r3, #4
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	2b03      	cmp	r3, #3
 800ac12:	d17e      	bne.n	800ad12 <ndefT4TReadAndParseCCFile+0x262>
    {
        /* V3 found: read remainng bytes */
        ret = ndefT4TPollerReadBinary(ctx, NDEF_T4T_CCFILEV2_LEN, NDEF_T4T_CCFILEV3_LEN - NDEF_T4T_CCFILEV2_LEN);
 800ac14:	2202      	movs	r2, #2
 800ac16:	210f      	movs	r1, #15
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 f976 	bl	800af0a <ndefT4TPollerReadBinary>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	81fb      	strh	r3, [r7, #14]
        if( ret != ERR_NONE )
 800ac22:	89fb      	ldrh	r3, [r7, #14]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d001      	beq.n	800ac2c <ndefT4TReadAndParseCCFile+0x17c>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.6 */
            return ret;
 800ac28:	89fb      	ldrh	r3, [r7, #14]
 800ac2a:	e0d1      	b.n	800add0 <ndefT4TReadAndParseCCFile+0x320>
        }
        (void)ST_MEMCPY(&ctx->ccBuf[NDEF_T4T_CCFILEV2_LEN], ctx->subCtx.t4t.rApduBuf.apdu, NDEF_T4T_CCFILEV3_LEN - NDEF_T4T_CCFILEV2_LEN);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	33ab      	adds	r3, #171	; 0xab
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	f202 42bd 	addw	r2, r2, #1213	; 0x4bd
 800ac36:	8812      	ldrh	r2, [r2, #0]
 800ac38:	b292      	uxth	r2, r2
 800ac3a:	801a      	strh	r2, [r3, #0]
                
        /* TS T4T v1.0 7.2.1.7 verify coding as in table 5 */
        if( ctx->ccBuf[dataIt] != NDEF_T4T_ENDEF_CTLV_T )
 800ac3c:	7b7b      	ldrb	r3, [r7, #13]
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	4413      	add	r3, r2
 800ac42:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ac46:	2b06      	cmp	r3, #6
 800ac48:	d001      	beq.n	800ac4e <ndefT4TReadAndParseCCFile+0x19e>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.8 */
            return ERR_REQUEST;
 800ac4a:	2305      	movs	r3, #5
 800ac4c:	e0c0      	b.n	800add0 <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 800ac4e:	7b7b      	ldrb	r3, [r7, #13]
 800ac50:	3301      	adds	r3, #1
 800ac52:	737b      	strb	r3, [r7, #13]
        if( ctx->ccBuf[dataIt] < NDEF_T4T_ENDEF_CTLV_L )
 800ac54:	7b7b      	ldrb	r3, [r7, #13]
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	4413      	add	r3, r2
 800ac5a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ac5e:	2b07      	cmp	r3, #7
 800ac60:	d801      	bhi.n	800ac66 <ndefT4TReadAndParseCCFile+0x1b6>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.8 */
            return ERR_REQUEST;
 800ac62:	2305      	movs	r3, #5
 800ac64:	e0b4      	b.n	800add0 <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 800ac66:	7b7b      	ldrb	r3, [r7, #13]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[0U]   = ctx->ccBuf[dataIt];
 800ac6c:	7b7b      	ldrb	r3, [r7, #13]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	4413      	add	r3, r2
 800ac72:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        dataIt++;
 800ac7c:	7b7b      	ldrb	r3, [r7, #13]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[1U]   = ctx->ccBuf[dataIt];
 800ac82:	7b7b      	ldrb	r3, [r7, #13]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	4413      	add	r3, r2
 800ac88:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        dataIt++;
 800ac92:	7b7b      	ldrb	r3, [r7, #13]
 800ac94:	3301      	adds	r3, #1
 800ac96:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileSize    = GETU32(&ctx->ccBuf[dataIt]);
 800ac98:	7b7b      	ldrb	r3, [r7, #13]
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800aca2:	061a      	lsls	r2, r3, #24
 800aca4:	7b7b      	ldrb	r3, [r7, #13]
 800aca6:	3398      	adds	r3, #152	; 0x98
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	440b      	add	r3, r1
 800acac:	3304      	adds	r3, #4
 800acae:	3301      	adds	r3, #1
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	041b      	lsls	r3, r3, #16
 800acb4:	431a      	orrs	r2, r3
 800acb6:	7b7b      	ldrb	r3, [r7, #13]
 800acb8:	3398      	adds	r3, #152	; 0x98
 800acba:	6879      	ldr	r1, [r7, #4]
 800acbc:	440b      	add	r3, r1
 800acbe:	3304      	adds	r3, #4
 800acc0:	3302      	adds	r3, #2
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	021b      	lsls	r3, r3, #8
 800acc6:	4313      	orrs	r3, r2
 800acc8:	7b7a      	ldrb	r2, [r7, #13]
 800acca:	3298      	adds	r2, #152	; 0x98
 800accc:	6879      	ldr	r1, [r7, #4]
 800acce:	440a      	add	r2, r1
 800acd0:	3204      	adds	r2, #4
 800acd2:	3203      	adds	r2, #3
 800acd4:	7812      	ldrb	r2, [r2, #0]
 800acd6:	431a      	orrs	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        dataIt += (uint8_t)sizeof(uint32_t);
 800acde:	7b7b      	ldrb	r3, [r7, #13]
 800ace0:	3304      	adds	r3, #4
 800ace2:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.readAccess  = ctx->ccBuf[dataIt];
 800ace4:	7b7b      	ldrb	r3, [r7, #13]
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	4413      	add	r3, r2
 800acea:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        dataIt++;
 800acf4:	7b7b      	ldrb	r3, [r7, #13]
 800acf6:	3301      	adds	r3, #1
 800acf8:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.writeAccess = ctx->ccBuf[dataIt];
 800acfa:	7b7b      	ldrb	r3, [r7, #13]
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	4413      	add	r3, r2
 800ad00:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        dataIt++;
 800ad0a:	7b7b      	ldrb	r3, [r7, #13]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	737b      	strb	r3, [r7, #13]
 800ad10:	e05d      	b.n	800adce <ndefT4TReadAndParseCCFile+0x31e>
    }
    else
    {
        if( ctx->ccBuf[dataIt] != NDEF_T4T_NDEF_CTLV_T )
 800ad12:	7b7b      	ldrb	r3, [r7, #13]
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	4413      	add	r3, r2
 800ad18:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ad1c:	2b04      	cmp	r3, #4
 800ad1e:	d001      	beq.n	800ad24 <ndefT4TReadAndParseCCFile+0x274>
        {
            return ERR_REQUEST;
 800ad20:	2305      	movs	r3, #5
 800ad22:	e055      	b.n	800add0 <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 800ad24:	7b7b      	ldrb	r3, [r7, #13]
 800ad26:	3301      	adds	r3, #1
 800ad28:	737b      	strb	r3, [r7, #13]
        if( ctx->ccBuf[dataIt] < NDEF_T4T_NDEF_CTLV_L )
 800ad2a:	7b7b      	ldrb	r3, [r7, #13]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	4413      	add	r3, r2
 800ad30:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ad34:	2b05      	cmp	r3, #5
 800ad36:	d803      	bhi.n	800ad40 <ndefT4TReadAndParseCCFile+0x290>
        {
            return ERR_REQUEST;
 800ad38:	2305      	movs	r3, #5
 800ad3a:	e049      	b.n	800add0 <ndefT4TReadAndParseCCFile+0x320>
 800ad3c:	0801ae84 	.word	0x0801ae84
        }
        dataIt++;
 800ad40:	7b7b      	ldrb	r3, [r7, #13]
 800ad42:	3301      	adds	r3, #1
 800ad44:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[0U]   = ctx->ccBuf[dataIt];
 800ad46:	7b7b      	ldrb	r3, [r7, #13]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        dataIt++;
 800ad56:	7b7b      	ldrb	r3, [r7, #13]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[1U]   = ctx->ccBuf[dataIt];
 800ad5c:	7b7b      	ldrb	r3, [r7, #13]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	4413      	add	r3, r2
 800ad62:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        dataIt++;
 800ad6c:	7b7b      	ldrb	r3, [r7, #13]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileSize    = ndefBytes2Uint16(ctx->ccBuf[dataIt], ctx->ccBuf[dataIt + 1U]);
 800ad72:	7b7b      	ldrb	r3, [r7, #13]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	4413      	add	r3, r2
 800ad78:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	021b      	lsls	r3, r3, #8
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	7b7b      	ldrb	r3, [r7, #13]
 800ad84:	3301      	adds	r3, #1
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	440b      	add	r3, r1
 800ad8a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	4313      	orrs	r3, r2
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	461a      	mov	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        dataIt += (uint8_t)sizeof(uint16_t);
 800ad9c:	7b7b      	ldrb	r3, [r7, #13]
 800ad9e:	3302      	adds	r3, #2
 800ada0:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.readAccess  = ctx->ccBuf[dataIt];
 800ada2:	7b7b      	ldrb	r3, [r7, #13]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	4413      	add	r3, r2
 800ada8:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        dataIt++;
 800adb2:	7b7b      	ldrb	r3, [r7, #13]
 800adb4:	3301      	adds	r3, #1
 800adb6:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.writeAccess = ctx->ccBuf[dataIt];
 800adb8:	7b7b      	ldrb	r3, [r7, #13]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	4413      	add	r3, r2
 800adbe:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        dataIt++;
 800adc8:	7b7b      	ldrb	r3, [r7, #13]
 800adca:	3301      	adds	r3, #1
 800adcc:	737b      	strb	r3, [r7, #13]
    }
    return ERR_NONE;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <ndefT4TPollerSelectNdefTagApplication>:

/*******************************************************************************/
ReturnCode ndefT4TPollerSelectNdefTagApplication(ndefContext *ctx)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b08c      	sub	sp, #48	; 0x30
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    static const uint8_t NDEF_T4T_AID_NDEF[]    = {0xD2, 0x76, 0x00, 0x00, 0x85, 0x01, 0x01};  /*!< AID_NDEF v2.0 or higher   T4T 1.0  4.3.3 */
    static const uint8_t NDEF_T4T_AID_NDEF_V1[] = {0xD2, 0x76, 0x00, 0x00, 0x85, 0x01, 0x00};  /*!< AID_NDEF v1.0             T4T 1.0  4.3.3 */

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00b      	beq.n	800adfe <ndefT4TPollerSelectNdefTagApplication+0x26>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d103      	bne.n	800adf6 <ndefT4TPollerSelectNdefTagApplication+0x1e>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	785b      	ldrb	r3, [r3, #1]
 800adf2:	2b20      	cmp	r3, #32
 800adf4:	d005      	beq.n	800ae02 <ndefT4TPollerSelectNdefTagApplication+0x2a>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d001      	beq.n	800ae02 <ndefT4TPollerSelectNdefTagApplication+0x2a>
    {
        return ERR_PARAM;
 800adfe:	2307      	movs	r3, #7
 800ae00:	e03b      	b.n	800ae7a <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }
    
    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800ae02:	f107 0308 	add.w	r3, r7, #8
 800ae06:	4619      	mov	r1, r3
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7ff fddf 	bl	800a9cc <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeSelectAppl(isoDepAPDU.txBuf, NDEF_T4T_AID_NDEF, (uint8_t)sizeof(NDEF_T4T_AID_NDEF), &isoDepAPDU.txBufLen);
 800ae0e:	68b8      	ldr	r0, [r7, #8]
 800ae10:	f107 0308 	add.w	r3, r7, #8
 800ae14:	3304      	adds	r3, #4
 800ae16:	2207      	movs	r2, #7
 800ae18:	491a      	ldr	r1, [pc, #104]	; (800ae84 <ndefT4TPollerSelectNdefTagApplication+0xac>)
 800ae1a:	f00d fd5c 	bl	80188d6 <rfalT4TPollerComposeSelectAppl>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800ae1e:	f107 0308 	add.w	r3, r7, #8
 800ae22:	4619      	mov	r1, r3
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7ff fe00 	bl	800aa2a <ndefT4TTransceiveTxRx>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    if( ret == ERR_NONE )
 800ae2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d105      	bne.n	800ae40 <ndefT4TPollerSelectNdefTagApplication+0x68>
    {
        /* application v2 or higher found */
        ctx->subCtx.t4t.mv1Flag = false;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
        return ret;
 800ae3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae3e:	e01c      	b.n	800ae7a <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }
    
    if( ret != ERR_REQUEST )
 800ae40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae42:	2b05      	cmp	r3, #5
 800ae44:	d001      	beq.n	800ae4a <ndefT4TPollerSelectNdefTagApplication+0x72>
    {
        return ret;
 800ae46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae48:	e017      	b.n	800ae7a <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }

    /* if v2 application not found, try v1 */
    (void)rfalT4TPollerComposeSelectAppl(isoDepAPDU.txBuf, NDEF_T4T_AID_NDEF_V1, (uint8_t)sizeof(NDEF_T4T_AID_NDEF_V1), &isoDepAPDU.txBufLen);
 800ae4a:	68b8      	ldr	r0, [r7, #8]
 800ae4c:	f107 0308 	add.w	r3, r7, #8
 800ae50:	3304      	adds	r3, #4
 800ae52:	2207      	movs	r2, #7
 800ae54:	490c      	ldr	r1, [pc, #48]	; (800ae88 <ndefT4TPollerSelectNdefTagApplication+0xb0>)
 800ae56:	f00d fd3e 	bl	80188d6 <rfalT4TPollerComposeSelectAppl>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800ae5a:	f107 0308 	add.w	r3, r7, #8
 800ae5e:	4619      	mov	r1, r3
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff fde2 	bl	800aa2a <ndefT4TTransceiveTxRx>
 800ae66:	4603      	mov	r3, r0
 800ae68:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    if( ret == ERR_NONE )
 800ae6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d103      	bne.n	800ae78 <ndefT4TPollerSelectNdefTagApplication+0xa0>
    {
        /* application v1 found */
        ctx->subCtx.t4t.mv1Flag = true;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    }
    return ret;
 800ae78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3730      	adds	r7, #48	; 0x30
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	0801ae88 	.word	0x0801ae88
 800ae88:	0801ae90 	.word	0x0801ae90

0800ae8c <ndefT4TPollerSelectFile>:

/*******************************************************************************/
ReturnCode ndefT4TPollerSelectFile(ndefContext *ctx, const uint8_t *fileId)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b08c      	sub	sp, #48	; 0x30
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d00b      	beq.n	800aeb4 <ndefT4TPollerSelectFile+0x28>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d103      	bne.n	800aeac <ndefT4TPollerSelectFile+0x20>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	785b      	ldrb	r3, [r3, #1]
 800aea8:	2b20      	cmp	r3, #32
 800aeaa:	d005      	beq.n	800aeb8 <ndefT4TPollerSelectFile+0x2c>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d001      	beq.n	800aeb8 <ndefT4TPollerSelectFile+0x2c>
    {
        return ERR_PARAM;
 800aeb4:	2307      	movs	r3, #7
 800aeb6:	e024      	b.n	800af02 <ndefT4TPollerSelectFile+0x76>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800aeb8:	f107 0308 	add.w	r3, r7, #8
 800aebc:	4619      	mov	r1, r3
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7ff fd84 	bl	800a9cc <ndefT4TInitializeIsoDepTxRxParam>

    if (ctx->subCtx.t4t.mv1Flag)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d008      	beq.n	800aee0 <ndefT4TPollerSelectFile+0x54>
    {
        (void)rfalT4TPollerComposeSelectFileV1Mapping(isoDepAPDU.txBuf, fileId, (uint8_t)sizeof(fileId), &isoDepAPDU.txBufLen);
 800aece:	68b8      	ldr	r0, [r7, #8]
 800aed0:	f107 0308 	add.w	r3, r7, #8
 800aed4:	3304      	adds	r3, #4
 800aed6:	2204      	movs	r2, #4
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	f00d fd5c 	bl	8018996 <rfalT4TPollerComposeSelectFileV1Mapping>
 800aede:	e007      	b.n	800aef0 <ndefT4TPollerSelectFile+0x64>
    }
    else
    {
        (void)rfalT4TPollerComposeSelectFile(isoDepAPDU.txBuf, fileId, NDEF_T4T_FID_SIZE, &isoDepAPDU.txBufLen);
 800aee0:	68b8      	ldr	r0, [r7, #8]
 800aee2:	f107 0308 	add.w	r3, r7, #8
 800aee6:	3304      	adds	r3, #4
 800aee8:	2202      	movs	r2, #2
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	f00d fd23 	bl	8018936 <rfalT4TPollerComposeSelectFile>
    }
       
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800aef0:	f107 0308 	add.w	r3, r7, #8
 800aef4:	4619      	mov	r1, r3
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7ff fd97 	bl	800aa2a <ndefT4TTransceiveTxRx>
 800aefc:	4603      	mov	r3, r0
 800aefe:	85fb      	strh	r3, [r7, #46]	; 0x2e

    return ret;
 800af00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800af02:	4618      	mov	r0, r3
 800af04:	3730      	adds	r7, #48	; 0x30
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <ndefT4TPollerReadBinary>:


/*******************************************************************************/
ReturnCode ndefT4TPollerReadBinary(ndefContext *ctx, uint16_t offset, uint8_t len)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b08c      	sub	sp, #48	; 0x30
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	460b      	mov	r3, r1
 800af14:	807b      	strh	r3, [r7, #2]
 800af16:	4613      	mov	r3, r2
 800af18:	707b      	strb	r3, [r7, #1]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLe) || (offset > NDEF_T4T_OFFSET_MAX) )
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d015      	beq.n	800af4c <ndefT4TPollerReadBinary+0x42>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d103      	bne.n	800af30 <ndefT4TPollerReadBinary+0x26>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	785b      	ldrb	r3, [r3, #1]
 800af2c:	2b20      	cmp	r3, #32
 800af2e:	d003      	beq.n	800af38 <ndefT4TPollerReadBinary+0x2e>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d109      	bne.n	800af4c <ndefT4TPollerReadBinary+0x42>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800af3e:	787a      	ldrb	r2, [r7, #1]
 800af40:	429a      	cmp	r2, r3
 800af42:	d803      	bhi.n	800af4c <ndefT4TPollerReadBinary+0x42>
 800af44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	da01      	bge.n	800af50 <ndefT4TPollerReadBinary+0x46>
    {
        return ERR_PARAM;
 800af4c:	2307      	movs	r3, #7
 800af4e:	e016      	b.n	800af7e <ndefT4TPollerReadBinary+0x74>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800af50:	f107 0308 	add.w	r3, r7, #8
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7ff fd38 	bl	800a9cc <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadData(isoDepAPDU.txBuf, offset, len, &isoDepAPDU.txBufLen);
 800af5c:	68b8      	ldr	r0, [r7, #8]
 800af5e:	f107 0308 	add.w	r3, r7, #8
 800af62:	3304      	adds	r3, #4
 800af64:	787a      	ldrb	r2, [r7, #1]
 800af66:	8879      	ldrh	r1, [r7, #2]
 800af68:	f00d fd45 	bl	80189f6 <rfalT4TPollerComposeReadData>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800af6c:	f107 0308 	add.w	r3, r7, #8
 800af70:	4619      	mov	r1, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f7ff fd59 	bl	800aa2a <ndefT4TTransceiveTxRx>
 800af78:	4603      	mov	r3, r0
 800af7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   
    return ret;
 800af7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3730      	adds	r7, #48	; 0x30
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <ndefT4TPollerReadBinaryODO>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadBinaryODO(ndefContext *ctx, uint32_t offset, uint8_t len)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b08e      	sub	sp, #56	; 0x38
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	60f8      	str	r0, [r7, #12]
 800af8e:	60b9      	str	r1, [r7, #8]
 800af90:	4613      	mov	r3, r2
 800af92:	71fb      	strb	r3, [r7, #7]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLe)  || (offset > NDEF_T4T_ODO_OFFSET_MAX) )
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d016      	beq.n	800afc8 <ndefT4TPollerReadBinaryODO+0x42>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d103      	bne.n	800afaa <ndefT4TPollerReadBinaryODO+0x24>
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	785b      	ldrb	r3, [r3, #1]
 800afa6:	2b20      	cmp	r3, #32
 800afa8:	d003      	beq.n	800afb2 <ndefT4TPollerReadBinaryODO+0x2c>
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d10a      	bne.n	800afc8 <ndefT4TPollerReadBinaryODO+0x42>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800afb8:	79fa      	ldrb	r2, [r7, #7]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d804      	bhi.n	800afc8 <ndefT4TPollerReadBinaryODO+0x42>
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d301      	bcc.n	800afcc <ndefT4TPollerReadBinaryODO+0x46>
    {
        return ERR_PARAM;
 800afc8:	2307      	movs	r3, #7
 800afca:	e016      	b.n	800affa <ndefT4TPollerReadBinaryODO+0x74>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800afcc:	f107 0310 	add.w	r3, r7, #16
 800afd0:	4619      	mov	r1, r3
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f7ff fcfa 	bl	800a9cc <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadDataODO(isoDepAPDU.txBuf, offset, len, &isoDepAPDU.txBufLen);
 800afd8:	6938      	ldr	r0, [r7, #16]
 800afda:	f107 0310 	add.w	r3, r7, #16
 800afde:	3304      	adds	r3, #4
 800afe0:	79fa      	ldrb	r2, [r7, #7]
 800afe2:	68b9      	ldr	r1, [r7, #8]
 800afe4:	f00d fd30 	bl	8018a48 <rfalT4TPollerComposeReadDataODO>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800afe8:	f107 0310 	add.w	r3, r7, #16
 800afec:	4619      	mov	r1, r3
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f7ff fd1b 	bl	800aa2a <ndefT4TTransceiveTxRx>
 800aff4:	4603      	mov	r3, r0
 800aff6:	86fb      	strh	r3, [r7, #54]	; 0x36

    return ret;
 800aff8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 }
 800affa:	4618      	mov	r0, r3
 800affc:	3738      	adds	r7, #56	; 0x38
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <ndefT4TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b08a      	sub	sp, #40	; 0x28
 800b006:	af00      	add	r7, sp, #0
 800b008:	60f8      	str	r0, [r7, #12]
 800b00a:	60b9      	str	r1, [r7, #8]
 800b00c:	607a      	str	r2, [r7, #4]
 800b00e:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              le;
    uint32_t             lvOffset = offset;
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	623b      	str	r3, [r7, #32]
    uint32_t             lvLen    = len;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	61fb      	str	r3, [r7, #28]
    uint8_t *            lvBuf    = buf;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	61bb      	str	r3, [r7, #24]

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (lvLen == 0U) )
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00e      	beq.n	800b040 <ndefT4TPollerReadBytes+0x3e>
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d103      	bne.n	800b032 <ndefT4TPollerReadBytes+0x30>
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	785b      	ldrb	r3, [r3, #1]
 800b02e:	2b20      	cmp	r3, #32
 800b030:	d003      	beq.n	800b03a <ndefT4TPollerReadBytes+0x38>
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	2b01      	cmp	r3, #1
 800b038:	d102      	bne.n	800b040 <ndefT4TPollerReadBytes+0x3e>
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d101      	bne.n	800b044 <ndefT4TPollerReadBytes+0x42>
    {
        return ERR_PARAM;
 800b040:	2307      	movs	r3, #7
 800b042:	e06c      	b.n	800b11e <ndefT4TPollerReadBytes+0x11c>
    }
    if( rcvdLen != NULL )
 800b044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b046:	2b00      	cmp	r3, #0
 800b048:	d002      	beq.n	800b050 <ndefT4TPollerReadBytes+0x4e>
    {
        *rcvdLen = 0U;
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	2200      	movs	r2, #0
 800b04e:	601a      	str	r2, [r3, #0]
    }

    do {
        le = ( lvLen > ctx->subCtx.t4t.curMLe ) ? ctx->subCtx.t4t.curMLe : (uint8_t)lvLen;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800b056:	461a      	mov	r2, r3
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d903      	bls.n	800b066 <ndefT4TPollerReadBytes+0x64>
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800b064:	e001      	b.n	800b06a <ndefT4TPollerReadBytes+0x68>
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	75fb      	strb	r3, [r7, #23]
        if( lvOffset > NDEF_T4T_MV2_MAX_OFSSET )
 800b06c:	6a3b      	ldr	r3, [r7, #32]
 800b06e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b072:	d308      	bcc.n	800b086 <ndefT4TPollerReadBytes+0x84>
        {
            ret = ndefT4TPollerReadBinaryODO(ctx, lvOffset, le);
 800b074:	7dfb      	ldrb	r3, [r7, #23]
 800b076:	461a      	mov	r2, r3
 800b078:	6a39      	ldr	r1, [r7, #32]
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f7ff ff83 	bl	800af86 <ndefT4TPollerReadBinaryODO>
 800b080:	4603      	mov	r3, r0
 800b082:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b084:	e008      	b.n	800b098 <ndefT4TPollerReadBytes+0x96>
        }
        else
        {
            ret = ndefT4TPollerReadBinary(ctx, (uint16_t)lvOffset, le);
 800b086:	6a3b      	ldr	r3, [r7, #32]
 800b088:	b29b      	uxth	r3, r3
 800b08a:	7dfa      	ldrb	r2, [r7, #23]
 800b08c:	4619      	mov	r1, r3
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f7ff ff3b 	bl	800af0a <ndefT4TPollerReadBinary>
 800b094:	4603      	mov	r3, r0
 800b096:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if( ret != ERR_NONE )
 800b098:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <ndefT4TPollerReadBytes+0xa0>
        {
            return ret;
 800b09e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b0a0:	e03d      	b.n	800b11e <ndefT4TPollerReadBytes+0x11c>
        }
        if( ctx->subCtx.t4t.rApduBodyLen == 0U )
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d036      	beq.n	800b11a <ndefT4TPollerReadBytes+0x118>
        {
            break; /* no more to read */
        }
        if( ctx->subCtx.t4t.rApduBodyLen >  lvLen )
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d201      	bcs.n	800b0be <ndefT4TPollerReadBytes+0xbc>
        {
            return ERR_SYSTEM;
 800b0ba:	2308      	movs	r3, #8
 800b0bc:	e02f      	b.n	800b11e <ndefT4TPollerReadBytes+0x11c>
        }
        (void)ST_MEMCPY(lvBuf, ctx->subCtx.t4t.rApduBuf.apdu, ctx->subCtx.t4t.rApduBodyLen);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f203 41bd 	addw	r1, r3, #1213	; 0x4bd
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	69b8      	ldr	r0, [r7, #24]
 800b0ce:	f00d fe1f 	bl	8018d10 <memcpy>
        lvBuf     = &lvBuf[ctx->subCtx.t4t.rApduBodyLen];
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800b0d8:	461a      	mov	r2, r3
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	4413      	add	r3, r2
 800b0de:	61bb      	str	r3, [r7, #24]
        lvOffset += ctx->subCtx.t4t.rApduBodyLen;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	6a3b      	ldr	r3, [r7, #32]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	623b      	str	r3, [r7, #32]
        lvLen    -= ctx->subCtx.t4t.rApduBodyLen;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	1a9b      	subs	r3, r3, r2
 800b0fa:	61fb      	str	r3, [r7, #28]
        if( rcvdLen != NULL )
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d007      	beq.n	800b112 <ndefT4TPollerReadBytes+0x110>
        {
            *rcvdLen += ctx->subCtx.t4t.rApduBodyLen;
 800b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	f8b2 29d0 	ldrh.w	r2, [r2, #2512]	; 0x9d0
 800b10c:	441a      	add	r2, r3
 800b10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b110:	601a      	str	r2, [r3, #0]
        }
    } while( lvLen != 0U );
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d19b      	bne.n	800b050 <ndefT4TPollerReadBytes+0x4e>
 800b118:	e000      	b.n	800b11c <ndefT4TPollerReadBytes+0x11a>
            break; /* no more to read */
 800b11a:	bf00      	nop

    return ERR_NONE;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3728      	adds	r7, #40	; 0x28
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <ndefT4TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT4TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b082      	sub	sp, #8
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT4TisT4TDevice(dev) )
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00e      	beq.n	800b154 <ndefT4TPollerContextInitialization+0x2e>
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00b      	beq.n	800b154 <ndefT4TPollerContextInitialization+0x2e>
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d103      	bne.n	800b14c <ndefT4TPollerContextInitialization+0x26>
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	785b      	ldrb	r3, [r3, #1]
 800b148:	2b20      	cmp	r3, #32
 800b14a:	d005      	beq.n	800b158 <ndefT4TPollerContextInitialization+0x32>
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d001      	beq.n	800b158 <ndefT4TPollerContextInitialization+0x32>
    {
        return ERR_PARAM;
 800b154:	2307      	movs	r3, #7
 800b156:	e012      	b.n	800b17e <ndefT4TPollerContextInitialization+0x58>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2278      	movs	r2, #120	; 0x78
 800b15c:	6839      	ldr	r1, [r7, #0]
 800b15e:	4618      	mov	r0, r3
 800b160:	f00d fdd6 	bl	8018d10 <memcpy>

    ctx->state             = NDEF_STATE_INVALID;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->subCtx.t4t.curMLc = NDEF_T4T_DEFAULT_MLC;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	220d      	movs	r2, #13
 800b170:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
    ctx->subCtx.t4t.curMLe = NDEF_T4T_DEFAULT_MLE;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	220f      	movs	r2, #15
 800b178:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    return ERR_NONE;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <ndefT4TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT4TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t*             nLen;
    uint8_t              nlenLen;

    if( info != NULL )
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d011      	beq.n	800b1ba <ndefT4TPollerNdefDetect+0x34>
    {
        info->state                = NDEF_STATE_INVALID;
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	2200      	movs	r2, #0
 800b19a:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00b      	beq.n	800b1d8 <ndefT4TPollerNdefDetect+0x52>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d103      	bne.n	800b1d0 <ndefT4TPollerNdefDetect+0x4a>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	785b      	ldrb	r3, [r3, #1]
 800b1cc:	2b20      	cmp	r3, #32
 800b1ce:	d005      	beq.n	800b1dc <ndefT4TPollerNdefDetect+0x56>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d001      	beq.n	800b1dc <ndefT4TPollerNdefDetect+0x56>
    {
        return ERR_PARAM;
 800b1d8:	2307      	movs	r3, #7
 800b1da:	e0fa      	b.n	800b3d2 <ndefT4TPollerNdefDetect+0x24c>
    }

    ctx->state = NDEF_STATE_INVALID;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Select NDEF Tag application TS T4T v1.0 7.2.1.1 */
    ret =  ndefT4TPollerSelectNdefTagApplication(ctx);
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff fdf7 	bl	800add8 <ndefT4TPollerSelectNdefTagApplication>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800b1ee:	89fb      	ldrh	r3, [r7, #14]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <ndefT4TPollerNdefDetect+0x72>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.2 */
        return ret; 
 800b1f4:	89fb      	ldrh	r3, [r7, #14]
 800b1f6:	e0ec      	b.n	800b3d2 <ndefT4TPollerNdefDetect+0x24c>
    }
    
    /* TS T4T v1.0 7.2.1.3 and following */
    ret = ndefT4TReadAndParseCCFile(ctx);
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f7ff fc59 	bl	800aab0 <ndefT4TReadAndParseCCFile>
 800b1fe:	4603      	mov	r3, r0
 800b200:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800b202:	89fb      	ldrh	r3, [r7, #14]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d001      	beq.n	800b20c <ndefT4TPollerNdefDetect+0x86>
    {
        return ret;
 800b208:	89fb      	ldrh	r3, [r7, #14]
 800b20a:	e0e2      	b.n	800b3d2 <ndefT4TPollerNdefDetect+0x24c>
    }
    nlenLen = ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b212:	091b      	lsrs	r3, r3, #4
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b03      	cmp	r3, #3
 800b218:	d101      	bne.n	800b21e <ndefT4TPollerNdefDetect+0x98>
 800b21a:	2304      	movs	r3, #4
 800b21c:	e000      	b.n	800b220 <ndefT4TPollerNdefDetect+0x9a>
 800b21e:	2302      	movs	r3, #2
 800b220:	737b      	strb	r3, [r7, #13]
    
    /* TS T4T v1.0 7.2.1.7 verify file READ access */
    if( !(ndefT4TIsReadAccessGranted(ctx->cc.t4t.readAccess)) )
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00c      	beq.n	800b246 <ndefT4TPollerNdefDetect+0xc0>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b232:	b25b      	sxtb	r3, r3
 800b234:	2b00      	cmp	r3, #0
 800b236:	da04      	bge.n	800b242 <ndefT4TPollerNdefDetect+0xbc>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b23e:	2bff      	cmp	r3, #255	; 0xff
 800b240:	d101      	bne.n	800b246 <ndefT4TPollerNdefDetect+0xc0>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800b242:	2305      	movs	r3, #5
 800b244:	e0c5      	b.n	800b3d2 <ndefT4TPollerNdefDetect+0x24c>
    }
    /* File size need at least be enough to store NLEN or ENLEN */
    if( ctx->cc.t4t.fileSize < nlenLen)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b24c:	7b7b      	ldrb	r3, [r7, #13]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d201      	bcs.n	800b256 <ndefT4TPollerNdefDetect+0xd0>
    {
        return ERR_REQUEST;
 800b252:	2305      	movs	r3, #5
 800b254:	e0bd      	b.n	800b3d2 <ndefT4TPollerNdefDetect+0x24c>
    }

    /* Select NDEF File TS T4T v1.0 7.2.1.9 */
    ret =  ndefT4TPollerSelectFile(ctx, ctx->cc.t4t.fileId);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	3384      	adds	r3, #132	; 0x84
 800b25a:	4619      	mov	r1, r3
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f7ff fe15 	bl	800ae8c <ndefT4TPollerSelectFile>
 800b262:	4603      	mov	r3, r0
 800b264:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800b266:	89fb      	ldrh	r3, [r7, #14]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d001      	beq.n	800b270 <ndefT4TPollerNdefDetect+0xea>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.10 */
        return ret;
 800b26c:	89fb      	ldrh	r3, [r7, #14]
 800b26e:	e0b0      	b.n	800b3d2 <ndefT4TPollerNdefDetect+0x24c>
    }
    /* Read NLEN/ENLEN TS T4T v1.0 7.2.1.11 */
    ret = ndefT4TPollerReadBinary(ctx, 0U, nlenLen);
 800b270:	7b7b      	ldrb	r3, [r7, #13]
 800b272:	461a      	mov	r2, r3
 800b274:	2100      	movs	r1, #0
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f7ff fe47 	bl	800af0a <ndefT4TPollerReadBinary>
 800b27c:	4603      	mov	r3, r0
 800b27e:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800b280:	89fb      	ldrh	r3, [r7, #14]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d001      	beq.n	800b28a <ndefT4TPollerNdefDetect+0x104>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.11 */
        return ret;
 800b286:	89fb      	ldrh	r3, [r7, #14]
 800b288:	e0a3      	b.n	800b3d2 <ndefT4TPollerNdefDetect+0x24c>
    }
    nLen = ctx->subCtx.t4t.rApduBuf.apdu;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f203 43bd 	addw	r3, r3, #1213	; 0x4bd
 800b290:	60bb      	str	r3, [r7, #8]
    ctx->messageLen    = (nlenLen == NDEF_T4T_ENLEN_LEN) ?  GETU32(&nLen[0]) : (uint32_t)ndefBytes2Uint16(nLen[0], nLen[1]);
 800b292:	7b7b      	ldrb	r3, [r7, #13]
 800b294:	2b04      	cmp	r3, #4
 800b296:	d111      	bne.n	800b2bc <ndefT4TPollerNdefDetect+0x136>
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	061a      	lsls	r2, r3, #24
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	041b      	lsls	r3, r3, #16
 800b2a6:	431a      	orrs	r2, r3
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	3302      	adds	r3, #2
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	021b      	lsls	r3, r3, #8
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	3203      	adds	r2, #3
 800b2b6:	7812      	ldrb	r2, [r2, #0]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	e00a      	b.n	800b2d2 <ndefT4TPollerNdefDetect+0x14c>
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	021b      	lsls	r3, r3, #8
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    ctx->messageOffset = nlenLen;
 800b2d8:	7b7a      	ldrb	r2, [r7, #13]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->areaLen       = ctx->cc.t4t.fileSize;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    if ( (ctx->messageLen > (ctx->cc.t4t.fileSize - nlenLen)) || ((ctx->messageLen > 0U) && (ctx->messageLen < NDEF_T4T_MIN_NLEN)) )
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800b2f8:	7b7b      	ldrb	r3, [r7, #13]
 800b2fa:	1acb      	subs	r3, r1, r3
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d809      	bhi.n	800b314 <ndefT4TPollerNdefDetect+0x18e>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b306:	2b00      	cmp	r3, #0
 800b308:	d006      	beq.n	800b318 <ndefT4TPollerNdefDetect+0x192>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b310:	2b02      	cmp	r3, #2
 800b312:	d801      	bhi.n	800b318 <ndefT4TPollerNdefDetect+0x192>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.11 */
        return ERR_REQUEST;
 800b314:	2305      	movs	r3, #5
 800b316:	e05c      	b.n	800b3d2 <ndefT4TPollerNdefDetect+0x24c>
    }
    
    if( ctx->messageLen == 0U ) 
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d116      	bne.n	800b350 <ndefT4TPollerNdefDetect+0x1ca>
    {
        if( !(ndefT4TIsWriteAccessGranted(ctx->cc.t4t.writeAccess)) )
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00c      	beq.n	800b346 <ndefT4TPollerNdefDetect+0x1c0>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b332:	b25b      	sxtb	r3, r3
 800b334:	2b00      	cmp	r3, #0
 800b336:	da04      	bge.n	800b342 <ndefT4TPollerNdefDetect+0x1bc>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b33e:	2bff      	cmp	r3, #255	; 0xff
 800b340:	d101      	bne.n	800b346 <ndefT4TPollerNdefDetect+0x1c0>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.11 */
            return ERR_REQUEST;
 800b342:	2305      	movs	r3, #5
 800b344:	e045      	b.n	800b3d2 <ndefT4TPollerNdefDetect+0x24c>
        }
        ctx->state = NDEF_STATE_INITIALIZED;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2201      	movs	r2, #1
 800b34a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800b34e:	e015      	b.n	800b37c <ndefT4TPollerNdefDetect+0x1f6>
    }
    else
    {
        ctx->state = (ndefT4TIsWriteAccessGranted(ctx->cc.t4t.writeAccess)) ? NDEF_STATE_READWRITE : NDEF_STATE_READONLY;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00a      	beq.n	800b370 <ndefT4TPollerNdefDetect+0x1ea>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b360:	b25b      	sxtb	r3, r3
 800b362:	2b00      	cmp	r3, #0
 800b364:	da06      	bge.n	800b374 <ndefT4TPollerNdefDetect+0x1ee>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b36c:	2bff      	cmp	r3, #255	; 0xff
 800b36e:	d001      	beq.n	800b374 <ndefT4TPollerNdefDetect+0x1ee>
 800b370:	2202      	movs	r2, #2
 800b372:	e000      	b.n	800b376 <ndefT4TPollerNdefDetect+0x1f0>
 800b374:	2203      	movs	r2, #3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    if( info != NULL )
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d026      	beq.n	800b3d0 <ndefT4TPollerNdefDetect+0x24a>
    {
        info->state                = ctx->state; 
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ndefMajorVersion(ctx->cc.t4t.vNo);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b392:	091b      	lsrs	r3, r3, #4
 800b394:	b2da      	uxtb	r2, r3
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ndefMinorVersion(ctx->cc.t4t.vNo);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b3a0:	f003 030f 	and.w	r3, r3, #15
 800b3a4:	b2da      	uxtb	r2, r3
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = ctx->areaLen - ctx->messageOffset;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3c0:	1ad2      	subs	r2, r2, r3
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	60da      	str	r2, [r3, #12]
    }

    return ERR_NONE;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <ndefT4TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b088      	sub	sp, #32
 800b3de:	af02      	add	r7, sp, #8
 800b3e0:	60f8      	str	r0, [r7, #12]
 800b3e2:	60b9      	str	r1, [r7, #8]
 800b3e4:	607a      	str	r2, [r7, #4]
 800b3e6:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (buf == NULL) )
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00e      	beq.n	800b40c <ndefT4TPollerReadRawMessage+0x32>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d103      	bne.n	800b3fe <ndefT4TPollerReadRawMessage+0x24>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	785b      	ldrb	r3, [r3, #1]
 800b3fa:	2b20      	cmp	r3, #32
 800b3fc:	d003      	beq.n	800b406 <ndefT4TPollerReadRawMessage+0x2c>
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	2b01      	cmp	r3, #1
 800b404:	d102      	bne.n	800b40c <ndefT4TPollerReadRawMessage+0x32>
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <ndefT4TPollerReadRawMessage+0x36>
    {
        return ERR_PARAM;
 800b40c:	2307      	movs	r3, #7
 800b40e:	e024      	b.n	800b45a <ndefT4TPollerReadRawMessage+0x80>
    }
    /* TS T4T v1.0 7.2.2.1: T4T NDEF Detect should have been called before NDEF read procedure */
    /* Warning: current selected file must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T4T v1.0 7.3.3.2: check presence of NDEF message */
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b416:	2b01      	cmp	r3, #1
 800b418:	d801      	bhi.n	800b41e <ndefT4TPollerReadRawMessage+0x44>
    {
        /* Conclude procedure TS T4T v1.0 7.2.2.2 */
        return ERR_WRONG_STATE;
 800b41a:	2321      	movs	r3, #33	; 0x21
 800b41c:	e01d      	b.n	800b45a <ndefT4TPollerReadRawMessage+0x80>
    }

    if( ctx->messageLen > bufLen )
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	429a      	cmp	r2, r3
 800b428:	d201      	bcs.n	800b42e <ndefT4TPollerReadRawMessage+0x54>
    {
        return ERR_NOMEM;
 800b42a:	2301      	movs	r3, #1
 800b42c:	e015      	b.n	800b45a <ndefT4TPollerReadRawMessage+0x80>
    }

    /* TS T4T v1.0 7.3.3.3: read the NDEF message */
    ret = ndefT4TPollerReadBytes(ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f7ff fdde 	bl	800b002 <ndefT4TPollerReadBytes>
 800b446:	4603      	mov	r3, r0
 800b448:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800b44a:	8afb      	ldrh	r3, [r7, #22]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d003      	beq.n	800b458 <ndefT4TPollerReadRawMessage+0x7e>
    {
        ctx->state = NDEF_STATE_INVALID;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }

    return ret;
 800b458:	8afb      	ldrh	r3, [r7, #22]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3718      	adds	r7, #24
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <ndefT4TPollerWriteBinary>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBinary(ndefContext *ctx, uint16_t offset, const uint8_t *data, uint8_t len)
{
 800b462:	b580      	push	{r7, lr}
 800b464:	b090      	sub	sp, #64	; 0x40
 800b466:	af02      	add	r7, sp, #8
 800b468:	60f8      	str	r0, [r7, #12]
 800b46a:	607a      	str	r2, [r7, #4]
 800b46c:	461a      	mov	r2, r3
 800b46e:	460b      	mov	r3, r1
 800b470:	817b      	strh	r3, [r7, #10]
 800b472:	4613      	mov	r3, r2
 800b474:	727b      	strb	r3, [r7, #9]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLc) || (offset > NDEF_T4T_OFFSET_MAX) )
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d015      	beq.n	800b4a8 <ndefT4TPollerWriteBinary+0x46>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d103      	bne.n	800b48c <ndefT4TPollerWriteBinary+0x2a>
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	785b      	ldrb	r3, [r3, #1]
 800b488:	2b20      	cmp	r3, #32
 800b48a:	d003      	beq.n	800b494 <ndefT4TPollerWriteBinary+0x32>
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	2b01      	cmp	r3, #1
 800b492:	d109      	bne.n	800b4a8 <ndefT4TPollerWriteBinary+0x46>
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b49a:	7a7a      	ldrb	r2, [r7, #9]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d803      	bhi.n	800b4a8 <ndefT4TPollerWriteBinary+0x46>
 800b4a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	da01      	bge.n	800b4ac <ndefT4TPollerWriteBinary+0x4a>
    {
        return ERR_PARAM;
 800b4a8:	2307      	movs	r3, #7
 800b4aa:	e019      	b.n	800b4e0 <ndefT4TPollerWriteBinary+0x7e>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800b4ac:	f107 0310 	add.w	r3, r7, #16
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f7ff fa8a 	bl	800a9cc <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeWriteData(isoDepAPDU.txBuf, offset, data, len, &isoDepAPDU.txBufLen);
 800b4b8:	6938      	ldr	r0, [r7, #16]
 800b4ba:	7a7a      	ldrb	r2, [r7, #9]
 800b4bc:	8979      	ldrh	r1, [r7, #10]
 800b4be:	f107 0310 	add.w	r3, r7, #16
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	f00d fb1e 	bl	8018b0a <rfalT4TPollerComposeWriteData>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800b4ce:	f107 0310 	add.w	r3, r7, #16
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f7ff faa8 	bl	800aa2a <ndefT4TTransceiveTxRx>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	86fb      	strh	r3, [r7, #54]	; 0x36
   
    return ret;
 800b4de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3738      	adds	r7, #56	; 0x38
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <ndefT4TPollerWriteBinaryODO>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBinaryODO(ndefContext *ctx, uint32_t offset, const uint8_t *data, uint8_t len)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b090      	sub	sp, #64	; 0x40
 800b4ec:	af02      	add	r7, sp, #8
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
 800b4f4:	70fb      	strb	r3, [r7, #3]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLc) || (offset > NDEF_T4T_ODO_OFFSET_MAX) )
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d016      	beq.n	800b52a <ndefT4TPollerWriteBinaryODO+0x42>
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d103      	bne.n	800b50c <ndefT4TPollerWriteBinaryODO+0x24>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	785b      	ldrb	r3, [r3, #1]
 800b508:	2b20      	cmp	r3, #32
 800b50a:	d003      	beq.n	800b514 <ndefT4TPollerWriteBinaryODO+0x2c>
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d10a      	bne.n	800b52a <ndefT4TPollerWriteBinaryODO+0x42>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b51a:	78fa      	ldrb	r2, [r7, #3]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d804      	bhi.n	800b52a <ndefT4TPollerWriteBinaryODO+0x42>
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800b526:	4293      	cmp	r3, r2
 800b528:	d301      	bcc.n	800b52e <ndefT4TPollerWriteBinaryODO+0x46>
    {
        return ERR_PARAM;
 800b52a:	2307      	movs	r3, #7
 800b52c:	e019      	b.n	800b562 <ndefT4TPollerWriteBinaryODO+0x7a>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800b52e:	f107 0310 	add.w	r3, r7, #16
 800b532:	4619      	mov	r1, r3
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f7ff fa49 	bl	800a9cc <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeWriteDataODO(isoDepAPDU.txBuf, offset, data, len, &isoDepAPDU.txBufLen);
 800b53a:	6938      	ldr	r0, [r7, #16]
 800b53c:	78fa      	ldrb	r2, [r7, #3]
 800b53e:	f107 0310 	add.w	r3, r7, #16
 800b542:	3304      	adds	r3, #4
 800b544:	9300      	str	r3, [sp, #0]
 800b546:	4613      	mov	r3, r2
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	68b9      	ldr	r1, [r7, #8]
 800b54c:	f00d fb11 	bl	8018b72 <rfalT4TPollerComposeWriteDataODO>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800b550:	f107 0310 	add.w	r3, r7, #16
 800b554:	4619      	mov	r1, r3
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f7ff fa67 	bl	800aa2a <ndefT4TTransceiveTxRx>
 800b55c:	4603      	mov	r3, r0
 800b55e:	86fb      	strh	r3, [r7, #54]	; 0x36

    return ret;
 800b560:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800b562:	4618      	mov	r0, r3
 800b564:	3738      	adds	r7, #56	; 0x38
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <ndefT4TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b088      	sub	sp, #32
 800b56e:	af00      	add	r7, sp, #0
 800b570:	60f8      	str	r0, [r7, #12]
 800b572:	60b9      	str	r1, [r7, #8]
 800b574:	607a      	str	r2, [r7, #4]
 800b576:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              lc;
    uint32_t             lvOffset = offset;
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	61bb      	str	r3, [r7, #24]
    uint32_t             lvLen    = len;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	617b      	str	r3, [r7, #20]
    const uint8_t *      lvBuf    = buf;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	613b      	str	r3, [r7, #16]

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (lvLen == 0U) )
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00e      	beq.n	800b5a8 <ndefT4TPollerWriteBytes+0x3e>
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d103      	bne.n	800b59a <ndefT4TPollerWriteBytes+0x30>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	785b      	ldrb	r3, [r3, #1]
 800b596:	2b20      	cmp	r3, #32
 800b598:	d003      	beq.n	800b5a2 <ndefT4TPollerWriteBytes+0x38>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d102      	bne.n	800b5a8 <ndefT4TPollerWriteBytes+0x3e>
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d101      	bne.n	800b5ac <ndefT4TPollerWriteBytes+0x42>
    {
        return ERR_PARAM;
 800b5a8:	2307      	movs	r3, #7
 800b5aa:	e048      	b.n	800b63e <ndefT4TPollerWriteBytes+0xd4>
    }

    do {

        if( lvOffset > NDEF_T4T_MV2_MAX_OFSSET )
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5b2:	d318      	bcc.n	800b5e6 <ndefT4TPollerWriteBytes+0x7c>
        {
            lc = ( lvLen > ((uint32_t)ctx->subCtx.t4t.curMLc - NDEF_T4T_WRITE_ODO_PREFIX_SIZE) ) ? (uint8_t)(ctx->subCtx.t4t.curMLc - NDEF_T4T_WRITE_ODO_PREFIX_SIZE) : (uint8_t)lvLen;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b5ba:	3b07      	subs	r3, #7
 800b5bc:	697a      	ldr	r2, [r7, #20]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d905      	bls.n	800b5ce <ndefT4TPollerWriteBytes+0x64>
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b5c8:	3b07      	subs	r3, #7
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	e001      	b.n	800b5d2 <ndefT4TPollerWriteBytes+0x68>
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	777b      	strb	r3, [r7, #29]
            ret = ndefT4TPollerWriteBinaryODO(ctx, lvOffset, lvBuf, lc);
 800b5d4:	7f7b      	ldrb	r3, [r7, #29]
 800b5d6:	693a      	ldr	r2, [r7, #16]
 800b5d8:	69b9      	ldr	r1, [r7, #24]
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f7ff ff84 	bl	800b4e8 <ndefT4TPollerWriteBinaryODO>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	83fb      	strh	r3, [r7, #30]
 800b5e4:	e016      	b.n	800b614 <ndefT4TPollerWriteBytes+0xaa>
        }
        else
        {
            lc = ( lvLen > ctx->subCtx.t4t.curMLc ) ? ctx->subCtx.t4t.curMLc : (uint8_t)lvLen;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d903      	bls.n	800b5fc <ndefT4TPollerWriteBytes+0x92>
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b5fa:	e001      	b.n	800b600 <ndefT4TPollerWriteBytes+0x96>
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	777b      	strb	r3, [r7, #29]
            ret = ndefT4TPollerWriteBinary(ctx, (uint16_t)lvOffset, lvBuf, lc);
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	b299      	uxth	r1, r3
 800b606:	7f7b      	ldrb	r3, [r7, #29]
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f7ff ff29 	bl	800b462 <ndefT4TPollerWriteBinary>
 800b610:	4603      	mov	r3, r0
 800b612:	83fb      	strh	r3, [r7, #30]
        }
        if( ret != ERR_NONE )
 800b614:	8bfb      	ldrh	r3, [r7, #30]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d001      	beq.n	800b61e <ndefT4TPollerWriteBytes+0xb4>
        {
            return ret;
 800b61a:	8bfb      	ldrh	r3, [r7, #30]
 800b61c:	e00f      	b.n	800b63e <ndefT4TPollerWriteBytes+0xd4>
        }
        lvBuf     = &lvBuf[lc];
 800b61e:	7f7b      	ldrb	r3, [r7, #29]
 800b620:	693a      	ldr	r2, [r7, #16]
 800b622:	4413      	add	r3, r2
 800b624:	613b      	str	r3, [r7, #16]
        lvOffset += lc;
 800b626:	7f7b      	ldrb	r3, [r7, #29]
 800b628:	69ba      	ldr	r2, [r7, #24]
 800b62a:	4413      	add	r3, r2
 800b62c:	61bb      	str	r3, [r7, #24]
        lvLen    -= lc; 
 800b62e:	7f7b      	ldrb	r3, [r7, #29]
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	1ad3      	subs	r3, r2, r3
 800b634:	617b      	str	r3, [r7, #20]
    } while( lvLen != 0U );
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1b7      	bne.n	800b5ac <ndefT4TPollerWriteBytes+0x42>

    return ERR_NONE;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3720      	adds	r7, #32
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <ndefT4TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b084      	sub	sp, #16
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t              buf[NDEF_T4T_ENLEN_LEN];
    uint8_t              dataIt;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00b      	beq.n	800b66e <ndefT4TPollerWriteRawMessageLen+0x28>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d103      	bne.n	800b666 <ndefT4TPollerWriteRawMessageLen+0x20>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	785b      	ldrb	r3, [r3, #1]
 800b662:	2b20      	cmp	r3, #32
 800b664:	d005      	beq.n	800b672 <ndefT4TPollerWriteRawMessageLen+0x2c>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d001      	beq.n	800b672 <ndefT4TPollerWriteRawMessageLen+0x2c>
    {
        return ERR_PARAM;
 800b66e:	2307      	movs	r3, #7
 800b670:	e05f      	b.n	800b732 <ndefT4TPollerWriteRawMessageLen+0xec>
    }
    
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d006      	beq.n	800b68a <ndefT4TPollerWriteRawMessageLen+0x44>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b682:	2b02      	cmp	r3, #2
 800b684:	d001      	beq.n	800b68a <ndefT4TPollerWriteRawMessageLen+0x44>
    {
        return ERR_WRONG_STATE;
 800b686:	2321      	movs	r3, #33	; 0x21
 800b688:	e053      	b.n	800b732 <ndefT4TPollerWriteRawMessageLen+0xec>
    }

    dataIt = 0U;
 800b68a:	2300      	movs	r3, #0
 800b68c:	73fb      	strb	r3, [r7, #15]
    if( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b694:	091b      	lsrs	r3, r3, #4
 800b696:	b2db      	uxtb	r3, r3
 800b698:	2b03      	cmp	r3, #3
 800b69a:	d12b      	bne.n	800b6f4 <ndefT4TPollerWriteRawMessageLen+0xae>
    {
        buf[dataIt] = (uint8_t)(rawMessageLen >> 24U);
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	0e1a      	lsrs	r2, r3, #24
 800b6a0:	7bfb      	ldrb	r3, [r7, #15]
 800b6a2:	b2d2      	uxtb	r2, r2
 800b6a4:	3310      	adds	r3, #16
 800b6a6:	443b      	add	r3, r7
 800b6a8:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800b6ac:	7bfb      	ldrb	r3, [r7, #15]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen >> 16U);
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	0c1a      	lsrs	r2, r3, #16
 800b6b6:	7bfb      	ldrb	r3, [r7, #15]
 800b6b8:	b2d2      	uxtb	r2, r2
 800b6ba:	3310      	adds	r3, #16
 800b6bc:	443b      	add	r3, r7
 800b6be:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800b6c2:	7bfb      	ldrb	r3, [r7, #15]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen >>  8U);
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	0a1a      	lsrs	r2, r3, #8
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	b2d2      	uxtb	r2, r2
 800b6d0:	3310      	adds	r3, #16
 800b6d2:	443b      	add	r3, r7
 800b6d4:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800b6d8:	7bfb      	ldrb	r3, [r7, #15]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen);
 800b6de:	7bfb      	ldrb	r3, [r7, #15]
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	b2d2      	uxtb	r2, r2
 800b6e4:	3310      	adds	r3, #16
 800b6e6:	443b      	add	r3, r7
 800b6e8:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800b6ec:	7bfb      	ldrb	r3, [r7, #15]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	73fb      	strb	r3, [r7, #15]
 800b6f2:	e014      	b.n	800b71e <ndefT4TPollerWriteRawMessageLen+0xd8>
    }
    else
    {
        buf[dataIt] = (uint8_t)(rawMessageLen >>  8U);
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	0a1a      	lsrs	r2, r3, #8
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
 800b6fa:	b2d2      	uxtb	r2, r2
 800b6fc:	3310      	adds	r3, #16
 800b6fe:	443b      	add	r3, r7
 800b700:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800b704:	7bfb      	ldrb	r3, [r7, #15]
 800b706:	3301      	adds	r3, #1
 800b708:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen);
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
 800b70c:	683a      	ldr	r2, [r7, #0]
 800b70e:	b2d2      	uxtb	r2, r2
 800b710:	3310      	adds	r3, #16
 800b712:	443b      	add	r3, r7
 800b714:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800b718:	7bfb      	ldrb	r3, [r7, #15]
 800b71a:	3301      	adds	r3, #1
 800b71c:	73fb      	strb	r3, [r7, #15]
    }

    ret = ndefT4TPollerWriteBytes(ctx, 0U, buf, dataIt);
 800b71e:	7bfb      	ldrb	r3, [r7, #15]
 800b720:	f107 0208 	add.w	r2, r7, #8
 800b724:	2100      	movs	r1, #0
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7ff ff1f 	bl	800b56a <ndefT4TPollerWriteBytes>
 800b72c:	4603      	mov	r3, r0
 800b72e:	81bb      	strh	r3, [r7, #12]
    return ret;
 800b730:	89bb      	ldrh	r3, [r7, #12]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <ndefT4TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b086      	sub	sp, #24
 800b73e:	af00      	add	r7, sp, #0
 800b740:	60f8      	str	r0, [r7, #12]
 800b742:	60b9      	str	r1, [r7, #8]
 800b744:	607a      	str	r2, [r7, #4]
    ReturnCode           ret;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d011      	beq.n	800b770 <ndefT4TPollerWriteRawMessage+0x36>
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d103      	bne.n	800b75c <ndefT4TPollerWriteRawMessage+0x22>
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	785b      	ldrb	r3, [r3, #1]
 800b758:	2b20      	cmp	r3, #32
 800b75a:	d003      	beq.n	800b764 <ndefT4TPollerWriteRawMessage+0x2a>
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	2b01      	cmp	r3, #1
 800b762:	d105      	bne.n	800b770 <ndefT4TPollerWriteRawMessage+0x36>
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d104      	bne.n	800b774 <ndefT4TPollerWriteRawMessage+0x3a>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d001      	beq.n	800b774 <ndefT4TPollerWriteRawMessage+0x3a>
    {
        return ERR_PARAM;
 800b770:	2307      	movs	r3, #7
 800b772:	e04b      	b.n	800b80c <ndefT4TPollerWriteRawMessage+0xd2>

    /* TS T4T v1.0 7.2.3.1: T4T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current selected file must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T4T v1.0 7.3.3.2: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d006      	beq.n	800b78c <ndefT4TPollerWriteRawMessage+0x52>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b784:	2b02      	cmp	r3, #2
 800b786:	d001      	beq.n	800b78c <ndefT4TPollerWriteRawMessage+0x52>
    {
        /* Conclude procedure TS T4T v1.0 7.2.3.2 */
        return ERR_WRONG_STATE;
 800b788:	2321      	movs	r3, #33	; 0x21
 800b78a:	e03f      	b.n	800b80c <ndefT4TPollerWriteRawMessage+0xd2>

    /* TS T4T v1.0 7.2.3.3: check Mapping Version    */
   /* Done automatically inside underlying fucntions */
    
    /* TS T4T v1.0 7.2.3.4/8 verify length of the NDEF message */
    ret = ndefT4TPollerCheckAvailableSpace(ctx, bufLen);
 800b78c:	6879      	ldr	r1, [r7, #4]
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f000 f8dd 	bl	800b94e <ndefT4TPollerCheckAvailableSpace>
 800b794:	4603      	mov	r3, r0
 800b796:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800b798:	8afb      	ldrh	r3, [r7, #22]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d001      	beq.n	800b7a2 <ndefT4TPollerWriteRawMessage+0x68>
    {
        /* Conclude procedure TS T4T v1.0 7.2.3.4/8 */
        return ERR_PARAM;
 800b79e:	2307      	movs	r3, #7
 800b7a0:	e034      	b.n	800b80c <ndefT4TPollerWriteRawMessage+0xd2>
    }

    /* TS T4T v1.0 7.2.3.5/9 Write value 0000h in NLEN field (resp. 00000000h in ENLEN field) */
    ret = ndefT4TPollerBeginWriteMessage(ctx, bufLen);
 800b7a2:	6879      	ldr	r1, [r7, #4]
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f000 f90a 	bl	800b9be <ndefT4TPollerBeginWriteMessage>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800b7ae:	8afb      	ldrh	r3, [r7, #22]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d005      	beq.n	800b7c0 <ndefT4TPollerWriteRawMessage+0x86>
    {
        ctx->state = NDEF_STATE_INVALID;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure TS T4T v1.0 7.2.3.5/9 */
        return ret;
 800b7bc:	8afb      	ldrh	r3, [r7, #22]
 800b7be:	e025      	b.n	800b80c <ndefT4TPollerWriteRawMessage+0xd2>
    }

    if( bufLen != 0U )
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d021      	beq.n	800b80a <ndefT4TPollerWriteRawMessage+0xd0>
    {
        /* TS T4T v1.0 7.2.3.6/10 Write NDEF message) */
        ret = ndefT4TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen); 
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	68ba      	ldr	r2, [r7, #8]
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f7ff feca 	bl	800b56a <ndefT4TPollerWriteBytes>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800b7da:	8afb      	ldrh	r3, [r7, #22]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d005      	beq.n	800b7ec <ndefT4TPollerWriteRawMessage+0xb2>
        {
            /* Conclude procedure TS T4T v1.0 7.2.3.6/10 */
            ctx->state = NDEF_STATE_INVALID;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800b7e8:	8afb      	ldrh	r3, [r7, #22]
 800b7ea:	e00f      	b.n	800b80c <ndefT4TPollerWriteRawMessage+0xd2>
        }

        /* TS T4T v1.0 7.2.3.7/11 Write value length in NLEN field (resp. in ENLEN field) */
        ret = ndefT4TPollerEndWriteMessage(ctx, bufLen);
 800b7ec:	6879      	ldr	r1, [r7, #4]
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f000 f91f 	bl	800ba32 <ndefT4TPollerEndWriteMessage>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800b7f8:	8afb      	ldrh	r3, [r7, #22]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d005      	beq.n	800b80a <ndefT4TPollerWriteRawMessage+0xd0>
        {
            /* Conclude procedure TS T4T v1.0 7.2.3.7/11 */
            ctx->state = NDEF_STATE_INVALID;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800b806:	8afb      	ldrh	r3, [r7, #22]
 800b808:	e000      	b.n	800b80c <ndefT4TPollerWriteRawMessage+0xd2>
        }
    }

    return ret;
 800b80a:	8afb      	ldrh	r3, [r7, #22]
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3718      	adds	r7, #24
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <ndefT4TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT4TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b086      	sub	sp, #24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
    uint8_t              buf[NDEF_T4T_ENLEN_LEN];

    NO_WARNING(cc);
    NO_WARNING(options);

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device)  )
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00b      	beq.n	800b83e <ndefT4TPollerTagFormat+0x2a>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d103      	bne.n	800b836 <ndefT4TPollerTagFormat+0x22>
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	785b      	ldrb	r3, [r3, #1]
 800b832:	2b20      	cmp	r3, #32
 800b834:	d005      	beq.n	800b842 <ndefT4TPollerTagFormat+0x2e>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d001      	beq.n	800b842 <ndefT4TPollerTagFormat+0x2e>
    {
        return ERR_PARAM;
 800b83e:	2307      	movs	r3, #7
 800b840:	e03a      	b.n	800b8b8 <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TPollerSelectNdefTagApplication(ctx);
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f7ff fac8 	bl	800add8 <ndefT4TPollerSelectNdefTagApplication>
 800b848:	4603      	mov	r3, r0
 800b84a:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800b84c:	8afb      	ldrh	r3, [r7, #22]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d001      	beq.n	800b856 <ndefT4TPollerTagFormat+0x42>
    {
        return ret; 
 800b852:	8afb      	ldrh	r3, [r7, #22]
 800b854:	e030      	b.n	800b8b8 <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TReadAndParseCCFile(ctx);
 800b856:	68f8      	ldr	r0, [r7, #12]
 800b858:	f7ff f92a 	bl	800aab0 <ndefT4TReadAndParseCCFile>
 800b85c:	4603      	mov	r3, r0
 800b85e:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800b860:	8afb      	ldrh	r3, [r7, #22]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d001      	beq.n	800b86a <ndefT4TPollerTagFormat+0x56>
    {
        return ret;
 800b866:	8afb      	ldrh	r3, [r7, #22]
 800b868:	e026      	b.n	800b8b8 <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TPollerSelectFile(ctx, ctx->cc.t4t.fileId);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	3384      	adds	r3, #132	; 0x84
 800b86e:	4619      	mov	r1, r3
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f7ff fb0b 	bl	800ae8c <ndefT4TPollerSelectFile>
 800b876:	4603      	mov	r3, r0
 800b878:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800b87a:	8afb      	ldrh	r3, [r7, #22]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d001      	beq.n	800b884 <ndefT4TPollerTagFormat+0x70>
    {
        return ret;
 800b880:	8afb      	ldrh	r3, [r7, #22]
 800b882:	e019      	b.n	800b8b8 <ndefT4TPollerTagFormat+0xa4>
    }
    (void)ST_MEMSET(buf, 0x00, sizeof(buf));
 800b884:	f107 0310 	add.w	r3, r7, #16
 800b888:	2204      	movs	r2, #4
 800b88a:	2100      	movs	r1, #0
 800b88c:	4618      	mov	r0, r3
 800b88e:	f00d fa67 	bl	8018d60 <memset>
    ret = ndefT4TPollerWriteBytes(ctx, 0U, buf, ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b898:	091b      	lsrs	r3, r3, #4
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	2b03      	cmp	r3, #3
 800b89e:	d101      	bne.n	800b8a4 <ndefT4TPollerTagFormat+0x90>
 800b8a0:	2304      	movs	r3, #4
 800b8a2:	e000      	b.n	800b8a6 <ndefT4TPollerTagFormat+0x92>
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	f107 0210 	add.w	r2, r7, #16
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f7ff fe5c 	bl	800b56a <ndefT4TPollerWriteBytes>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	82fb      	strh	r3, [r7, #22]
    return ret;
 800b8b6:	8afb      	ldrh	r3, [r7, #22]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <ndefT4TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT4TPollerCheckPresence(ndefContext *ctx)
{
 800b8c0:	b5b0      	push	{r4, r5, r7, lr}
 800b8c2:	b092      	sub	sp, #72	; 0x48
 800b8c4:	af06      	add	r7, sp, #24
 800b8c6:	6078      	str	r0, [r7, #4]
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    ReturnCode               ret;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00b      	beq.n	800b8e6 <ndefT4TPollerCheckPresence+0x26>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d103      	bne.n	800b8de <ndefT4TPollerCheckPresence+0x1e>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	785b      	ldrb	r3, [r3, #1]
 800b8da:	2b20      	cmp	r3, #32
 800b8dc:	d005      	beq.n	800b8ea <ndefT4TPollerCheckPresence+0x2a>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d001      	beq.n	800b8ea <ndefT4TPollerCheckPresence+0x2a>
    {
        return ERR_PARAM;
 800b8e6:	2307      	movs	r3, #7
 800b8e8:	e02d      	b.n	800b946 <ndefT4TPollerCheckPresence+0x86>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800b8ea:	f107 0308 	add.w	r3, r7, #8
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f7ff f86b 	bl	800a9cc <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadData(isoDepAPDU.txBuf, 0, 1, &isoDepAPDU.txBufLen);
 800b8f6:	68b8      	ldr	r0, [r7, #8]
 800b8f8:	f107 0308 	add.w	r3, r7, #8
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	2201      	movs	r2, #1
 800b900:	2100      	movs	r1, #0
 800b902:	f00d f878 	bl	80189f6 <rfalT4TPollerComposeReadData>

    /* Initialize respAPDU */
    ctx->subCtx.t4t.respAPDU.rApduBuf = &ctx->subCtx.t4t.rApduBuf;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8c3 28c0 	str.w	r2, [r3, #2240]	; 0x8c0
    isoDepAPDU.rxLen                  = &ctx->subCtx.t4t.respAPDU.rcvdLen;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 800b918:	617b      	str	r3, [r7, #20]

    (void)rfalIsoDepStartApduTransceive(isoDepAPDU);
 800b91a:	466d      	mov	r5, sp
 800b91c:	f107 0418 	add.w	r4, r7, #24
 800b920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b924:	6823      	ldr	r3, [r4, #0]
 800b926:	602b      	str	r3, [r5, #0]
 800b928:	f107 0308 	add.w	r3, r7, #8
 800b92c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b92e:	f003 faff 	bl	800ef30 <rfalIsoDepStartApduTransceive>
    do {
        /* Blocking implementation, T4T may define rather long timeouts */
        rfalWorker();
 800b932:	f00a fb47 	bl	8015fc4 <rfalWorker>
        ret = rfalIsoDepGetApduTransceiveStatus();
 800b936:	f003 fb4b 	bl	800efd0 <rfalIsoDepGetApduTransceiveStatus>
 800b93a:	4603      	mov	r3, r0
 800b93c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    } while (ret == ERR_BUSY);
 800b93e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b940:	2b02      	cmp	r3, #2
 800b942:	d0f6      	beq.n	800b932 <ndefT4TPollerCheckPresence+0x72>

    return ret;
 800b944:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800b946:	4618      	mov	r0, r3
 800b948:	3730      	adds	r7, #48	; 0x30
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bdb0      	pop	{r4, r5, r7, pc}

0800b94e <ndefT4TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT4TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800b94e:	b480      	push	{r7}
 800b950:	b085      	sub	sp, #20
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	6039      	str	r1, [r7, #0]
    uint8_t              nlenLen;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00b      	beq.n	800b976 <ndefT4TPollerCheckAvailableSpace+0x28>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d103      	bne.n	800b96e <ndefT4TPollerCheckAvailableSpace+0x20>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	785b      	ldrb	r3, [r3, #1]
 800b96a:	2b20      	cmp	r3, #32
 800b96c:	d005      	beq.n	800b97a <ndefT4TPollerCheckAvailableSpace+0x2c>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d001      	beq.n	800b97a <ndefT4TPollerCheckAvailableSpace+0x2c>
    {
        return ERR_PARAM;
 800b976:	2307      	movs	r3, #7
 800b978:	e01c      	b.n	800b9b4 <ndefT4TPollerCheckAvailableSpace+0x66>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b980:	2b00      	cmp	r3, #0
 800b982:	d101      	bne.n	800b988 <ndefT4TPollerCheckAvailableSpace+0x3a>
    {
        return ERR_WRONG_STATE;
 800b984:	2321      	movs	r3, #33	; 0x21
 800b986:	e015      	b.n	800b9b4 <ndefT4TPollerCheckAvailableSpace+0x66>
    }

    nlenLen = ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b98e:	091b      	lsrs	r3, r3, #4
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b03      	cmp	r3, #3
 800b994:	d101      	bne.n	800b99a <ndefT4TPollerCheckAvailableSpace+0x4c>
 800b996:	2304      	movs	r3, #4
 800b998:	e000      	b.n	800b99c <ndefT4TPollerCheckAvailableSpace+0x4e>
 800b99a:	2302      	movs	r3, #2
 800b99c:	73fb      	strb	r3, [r7, #15]
    if( (messageLen + (uint32_t)nlenLen) > ctx->cc.t4t.fileSize )
 800b99e:	7bfa      	ldrb	r2, [r7, #15]
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	441a      	add	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d901      	bls.n	800b9b2 <ndefT4TPollerCheckAvailableSpace+0x64>
    {
        return ERR_NOMEM;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e000      	b.n	800b9b4 <ndefT4TPollerCheckAvailableSpace+0x66>
    }
    return ERR_NONE;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3714      	adds	r7, #20
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bc80      	pop	{r7}
 800b9bc:	4770      	bx	lr

0800b9be <ndefT4TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    NO_WARNING(messageLen);

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00b      	beq.n	800b9e6 <ndefT4TPollerBeginWriteMessage+0x28>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d103      	bne.n	800b9de <ndefT4TPollerBeginWriteMessage+0x20>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	785b      	ldrb	r3, [r3, #1]
 800b9da:	2b20      	cmp	r3, #32
 800b9dc:	d005      	beq.n	800b9ea <ndefT4TPollerBeginWriteMessage+0x2c>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d001      	beq.n	800b9ea <ndefT4TPollerBeginWriteMessage+0x2c>
    {
        return ERR_PARAM;
 800b9e6:	2307      	movs	r3, #7
 800b9e8:	e01f      	b.n	800ba2a <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d006      	beq.n	800ba02 <ndefT4TPollerBeginWriteMessage+0x44>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d001      	beq.n	800ba02 <ndefT4TPollerBeginWriteMessage+0x44>
    {
        return ERR_WRONG_STATE;
 800b9fe:	2321      	movs	r3, #33	; 0x21
 800ba00:	e013      	b.n	800ba2a <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    /* TS T4T v1.0 7.2.3.5/9 Write value 0000h in NLEN field (resp. 00000000h in ENLEN field) */
    ret = ndefT4TPollerWriteRawMessageLen(ctx, 0U);
 800ba02:	2100      	movs	r1, #0
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f7ff fe1e 	bl	800b646 <ndefT4TPollerWriteRawMessageLen>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800ba0e:	89fb      	ldrh	r3, [r7, #14]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d005      	beq.n	800ba20 <ndefT4TPollerBeginWriteMessage+0x62>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800ba1c:	89fb      	ldrh	r3, [r7, #14]
 800ba1e:	e004      	b.n	800ba2a <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    ctx->state = NDEF_STATE_INITIALIZED;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <ndefT4TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b084      	sub	sp, #16
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00b      	beq.n	800ba5a <ndefT4TPollerEndWriteMessage+0x28>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d103      	bne.n	800ba52 <ndefT4TPollerEndWriteMessage+0x20>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	785b      	ldrb	r3, [r3, #1]
 800ba4e:	2b20      	cmp	r3, #32
 800ba50:	d005      	beq.n	800ba5e <ndefT4TPollerEndWriteMessage+0x2c>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d001      	beq.n	800ba5e <ndefT4TPollerEndWriteMessage+0x2c>
    {
        return ERR_PARAM;
 800ba5a:	2307      	movs	r3, #7
 800ba5c:	e025      	b.n	800baaa <ndefT4TPollerEndWriteMessage+0x78>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d001      	beq.n	800ba6c <ndefT4TPollerEndWriteMessage+0x3a>
    {
        return ERR_WRONG_STATE;
 800ba68:	2321      	movs	r3, #33	; 0x21
 800ba6a:	e01e      	b.n	800baaa <ndefT4TPollerEndWriteMessage+0x78>
    }

    /* TS T4T v1.0 7.2.3.7/11 Write value length in NLEN field (resp. in ENLEN field) */
    ret = ndefT4TPollerWriteRawMessageLen(ctx, messageLen);
 800ba6c:	6839      	ldr	r1, [r7, #0]
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7ff fde9 	bl	800b646 <ndefT4TPollerWriteRawMessageLen>
 800ba74:	4603      	mov	r3, r0
 800ba76:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800ba78:	89fb      	ldrh	r3, [r7, #14]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d005      	beq.n	800ba8a <ndefT4TPollerEndWriteMessage+0x58>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800ba86:	89fb      	ldrh	r3, [r7, #14]
 800ba88:	e00f      	b.n	800baaa <ndefT4TPollerEndWriteMessage+0x78>
    }
    ctx->messageLen = messageLen;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	683a      	ldr	r2, [r7, #0]
 800ba8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE; 
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d101      	bne.n	800baa0 <ndefT4TPollerEndWriteMessage+0x6e>
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	e000      	b.n	800baa2 <ndefT4TPollerEndWriteMessage+0x70>
 800baa0:	2202      	movs	r2, #2
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <ndefT5TPollerReadBytes>:
 ******************************************************************************
 */

/*******************************************************************************/
ReturnCode ndefT5TPollerReadBytes(ndefContext * ctx, uint32_t offset, uint32_t len, uint8_t* buf, uint32_t * rcvdLen )
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b08c      	sub	sp, #48	; 0x30
 800bab6:	af02      	add	r7, sp, #8
 800bab8:	60f8      	str	r0, [r7, #12]
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	607a      	str	r2, [r7, #4]
 800babe:	603b      	str	r3, [r7, #0]
    uint16_t        res;
    uint16_t        nbRead;
    uint16_t        blockLen;
    uint16_t        startBlock;
    uint16_t        startAddr;
    ReturnCode      result     = ERR_PARAM;
 800bac0:	2307      	movs	r3, #7
 800bac2:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint32_t        currentLen = len;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	623b      	str	r3, [r7, #32]
    uint32_t        lvRcvLen   = 0U;
 800bac8:	2300      	movs	r3, #0
 800baca:	61fb      	str	r3, [r7, #28]

    if ( ( ctx != NULL) && (ctx->subCtx.t5t.blockLen > 0U) && (buf != NULL) && (len > 0U) )
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	f000 80ef 	beq.w	800bcb2 <ndefT5TPollerReadBytes+0x200>
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800bada:	2b00      	cmp	r3, #0
 800badc:	f000 80e9 	beq.w	800bcb2 <ndefT5TPollerReadBytes+0x200>
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	f000 80e5 	beq.w	800bcb2 <ndefT5TPollerReadBytes+0x200>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b00      	cmp	r3, #0
 800baec:	f000 80e1 	beq.w	800bcb2 <ndefT5TPollerReadBytes+0x200>
    {
        blockLen   = (uint16_t )ctx->subCtx.t5t.blockLen;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800baf6:	837b      	strh	r3, [r7, #26]
        if( blockLen == 0U )
 800baf8:	8b7b      	ldrh	r3, [r7, #26]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d101      	bne.n	800bb02 <ndefT5TPollerReadBytes+0x50>
        {
            return ERR_SYSTEM;
 800bafe:	2308      	movs	r3, #8
 800bb00:	e0e3      	b.n	800bcca <ndefT5TPollerReadBytes+0x218>
        }
        startBlock = (uint16_t) (offset / blockLen);
 800bb02:	8b7b      	ldrh	r3, [r7, #26]
 800bb04:	68ba      	ldr	r2, [r7, #8]
 800bb06:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb0a:	84fb      	strh	r3, [r7, #38]	; 0x26
        startAddr  = (uint16_t) (startBlock * blockLen);
 800bb0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb0e:	8b7a      	ldrh	r2, [r7, #26]
 800bb10:	fb02 f303 	mul.w	r3, r2, r3
 800bb14:	833b      	strh	r3, [r7, #24]

        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen + 3U, &nbRead);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800bb1c:	8b7b      	ldrh	r3, [r7, #26]
 800bb1e:	3303      	adds	r3, #3
 800bb20:	b298      	uxth	r0, r3
 800bb22:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800bb24:	f107 0312 	add.w	r3, r7, #18
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	f001 f932 	bl	800cd96 <ndefT5TPollerReadSingleBlock>
 800bb32:	4603      	mov	r3, r0
 800bb34:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 800bb36:	8afb      	ldrh	r3, [r7, #22]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f040 80ba 	bne.w	800bcb2 <ndefT5TPollerReadBytes+0x200>
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f040 80b4 	bne.w	800bcb2 <ndefT5TPollerReadBytes+0x200>
 800bb4a:	8a7b      	ldrh	r3, [r7, #18]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f000 80b0 	beq.w	800bcb2 <ndefT5TPollerReadBytes+0x200>
        {
            nbRead = (uint16_t) (nbRead  + startAddr - (uint16_t)offset - 1U );
 800bb52:	8a7a      	ldrh	r2, [r7, #18]
 800bb54:	8b3b      	ldrh	r3, [r7, #24]
 800bb56:	4413      	add	r3, r2
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	3b01      	subs	r3, #1
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	827b      	strh	r3, [r7, #18]
            if ((uint32_t) nbRead > currentLen)
 800bb68:	8a7b      	ldrh	r3, [r7, #18]
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	6a3b      	ldr	r3, [r7, #32]
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d202      	bcs.n	800bb78 <ndefT5TPollerReadBytes+0xc6>
            {
                nbRead = (uint16_t) currentLen;
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	827b      	strh	r3, [r7, #18]
            }
            if (nbRead > 0U)
 800bb78:	8a7b      	ldrh	r3, [r7, #18]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00e      	beq.n	800bb9c <ndefT5TPollerReadBytes+0xea>
            {
                (void)ST_MEMCPY(buf, &ctx->subCtx.t5t.txrxBuf[1U - startAddr + (uint16_t)offset], (uint32_t)nbRead);
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	461a      	mov	r2, r3
 800bb84:	8b3b      	ldrh	r3, [r7, #24]
 800bb86:	1ad3      	subs	r3, r2, r3
 800bb88:	3301      	adds	r3, #1
 800bb8a:	33d0      	adds	r3, #208	; 0xd0
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	4413      	add	r3, r2
 800bb90:	3304      	adds	r3, #4
 800bb92:	8a7a      	ldrh	r2, [r7, #18]
 800bb94:	4619      	mov	r1, r3
 800bb96:	6838      	ldr	r0, [r7, #0]
 800bb98:	f00d f8ba 	bl	8018d10 <memcpy>
            }
            lvRcvLen   += (uint32_t) nbRead;
 800bb9c:	8a7b      	ldrh	r3, [r7, #18]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	4413      	add	r3, r2
 800bba4:	61fb      	str	r3, [r7, #28]
            currentLen -= (uint32_t) nbRead;
 800bba6:	8a7b      	ldrh	r3, [r7, #18]
 800bba8:	461a      	mov	r2, r3
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	1a9b      	subs	r3, r3, r2
 800bbae:	623b      	str	r3, [r7, #32]
            while (currentLen >= ((uint32_t)blockLen + 2U) )
 800bbb0:	e036      	b.n	800bc20 <ndefT5TPollerReadBytes+0x16e>
            {
                startBlock++;
 800bbb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	84fb      	strh	r3, [r7, #38]	; 0x26
                lastVal = buf[lvRcvLen - 1U];
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	683a      	ldr	r2, [r7, #0]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	757b      	strb	r3, [r7, #21]
                res = ndefT5TPollerReadSingleBlock(ctx, startBlock, &buf[lvRcvLen - 1U], blockLen + 3U, &nbRead);
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	441a      	add	r2, r3
 800bbcc:	8b7b      	ldrh	r3, [r7, #26]
 800bbce:	3303      	adds	r3, #3
 800bbd0:	b298      	uxth	r0, r3
 800bbd2:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800bbd4:	f107 0312 	add.w	r3, r7, #18
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	4603      	mov	r3, r0
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f001 f8da 	bl	800cd96 <ndefT5TPollerReadSingleBlock>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	82fb      	strh	r3, [r7, #22]
                status  = buf[lvRcvLen - 1U]; /* Keep status */
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	683a      	ldr	r2, [r7, #0]
 800bbec:	4413      	add	r3, r2
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	753b      	strb	r3, [r7, #20]
                buf[lvRcvLen - 1U] = lastVal; /* Restore previous value */
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	7d7a      	ldrb	r2, [r7, #21]
 800bbfc:	701a      	strb	r2, [r3, #0]
                if ( (res == ERR_NONE) && (nbRead > 0U) && (status == 0U))
 800bbfe:	8afb      	ldrh	r3, [r7, #22]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d153      	bne.n	800bcac <ndefT5TPollerReadBytes+0x1fa>
 800bc04:	8a7b      	ldrh	r3, [r7, #18]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d050      	beq.n	800bcac <ndefT5TPollerReadBytes+0x1fa>
 800bc0a:	7d3b      	ldrb	r3, [r7, #20]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d14d      	bne.n	800bcac <ndefT5TPollerReadBytes+0x1fa>
                {
                    lvRcvLen   += blockLen;
 800bc10:	8b7b      	ldrh	r3, [r7, #26]
 800bc12:	69fa      	ldr	r2, [r7, #28]
 800bc14:	4413      	add	r3, r2
 800bc16:	61fb      	str	r3, [r7, #28]
                    currentLen -= blockLen;
 800bc18:	8b7b      	ldrh	r3, [r7, #26]
 800bc1a:	6a3a      	ldr	r2, [r7, #32]
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	623b      	str	r3, [r7, #32]
            while (currentLen >= ((uint32_t)blockLen + 2U) )
 800bc20:	8b7b      	ldrh	r3, [r7, #26]
 800bc22:	3302      	adds	r3, #2
 800bc24:	6a3a      	ldr	r2, [r7, #32]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d2c3      	bcs.n	800bbb2 <ndefT5TPollerReadBytes+0x100>
                else
                {
                    break;
                }
            }
            while (currentLen > 0U)
 800bc2a:	e03f      	b.n	800bcac <ndefT5TPollerReadBytes+0x1fa>
            {
                startBlock++;
 800bc2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc2e:	3301      	adds	r3, #1
 800bc30:	84fb      	strh	r3, [r7, #38]	; 0x26
                res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen + 3U, &nbRead);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800bc38:	8b7b      	ldrh	r3, [r7, #26]
 800bc3a:	3303      	adds	r3, #3
 800bc3c:	b298      	uxth	r0, r3
 800bc3e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800bc40:	f107 0312 	add.w	r3, r7, #18
 800bc44:	9300      	str	r3, [sp, #0]
 800bc46:	4603      	mov	r3, r0
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f001 f8a4 	bl	800cd96 <ndefT5TPollerReadSingleBlock>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	82fb      	strh	r3, [r7, #22]
                if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U))
 800bc52:	8afb      	ldrh	r3, [r7, #22]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d12c      	bne.n	800bcb2 <ndefT5TPollerReadBytes+0x200>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d127      	bne.n	800bcb2 <ndefT5TPollerReadBytes+0x200>
 800bc62:	8a7b      	ldrh	r3, [r7, #18]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d024      	beq.n	800bcb2 <ndefT5TPollerReadBytes+0x200>
                {
                    -- nbRead; /* remove status char */
 800bc68:	8a7b      	ldrh	r3, [r7, #18]
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	827b      	strh	r3, [r7, #18]
                    if (nbRead > currentLen)
 800bc70:	8a7b      	ldrh	r3, [r7, #18]
 800bc72:	461a      	mov	r2, r3
 800bc74:	6a3b      	ldr	r3, [r7, #32]
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d202      	bcs.n	800bc80 <ndefT5TPollerReadBytes+0x1ce>
                    {
                        nbRead = (uint16_t)currentLen;
 800bc7a:	6a3b      	ldr	r3, [r7, #32]
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	827b      	strh	r3, [r7, #18]
                    }
                    if (nbRead > 0U)
 800bc80:	8a7b      	ldrh	r3, [r7, #18]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d008      	beq.n	800bc98 <ndefT5TPollerReadBytes+0x1e6>
                    {
                        (void)ST_MEMCPY(&buf[lvRcvLen], & ctx->subCtx.t5t.txrxBuf[1U], nbRead);
 800bc86:	683a      	ldr	r2, [r7, #0]
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	18d0      	adds	r0, r2, r3
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	33d5      	adds	r3, #213	; 0xd5
 800bc90:	8a7a      	ldrh	r2, [r7, #18]
 800bc92:	4619      	mov	r1, r3
 800bc94:	f00d f83c 	bl	8018d10 <memcpy>
                    }
                    lvRcvLen   += nbRead;
 800bc98:	8a7b      	ldrh	r3, [r7, #18]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	4413      	add	r3, r2
 800bca0:	61fb      	str	r3, [r7, #28]
                    currentLen -= nbRead;
 800bca2:	8a7b      	ldrh	r3, [r7, #18]
 800bca4:	461a      	mov	r2, r3
 800bca6:	6a3b      	ldr	r3, [r7, #32]
 800bca8:	1a9b      	subs	r3, r3, r2
 800bcaa:	623b      	str	r3, [r7, #32]
            while (currentLen > 0U)
 800bcac:	6a3b      	ldr	r3, [r7, #32]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1bc      	bne.n	800bc2c <ndefT5TPollerReadBytes+0x17a>
                    break;
                }
            }
        }
    }
    if (currentLen == 0U)
 800bcb2:	6a3b      	ldr	r3, [r7, #32]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d101      	bne.n	800bcbc <ndefT5TPollerReadBytes+0x20a>
    {
        result = ERR_NONE;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    if( rcvdLen != NULL )
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d002      	beq.n	800bcc8 <ndefT5TPollerReadBytes+0x216>
    {
        * rcvdLen = lvRcvLen;
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc4:	69fa      	ldr	r2, [r7, #28]
 800bcc6:	601a      	str	r2, [r3, #0]
    }
    return result;
 800bcc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3728      	adds	r7, #40	; 0x28
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <ndefT5TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT5TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b086      	sub	sp, #24
 800bcd6:	af02      	add	r7, sp, #8
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	6039      	str	r1, [r7, #0]
    ReturnCode    result;
    uint16_t      rcvLen;

    if( (ctx == NULL) || (dev == NULL) || !ndefT5TisT5TDevice(dev) )
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d006      	beq.n	800bcf0 <ndefT5TPollerContextInitialization+0x1e>
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d003      	beq.n	800bcf0 <ndefT5TPollerContextInitialization+0x1e>
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	2b03      	cmp	r3, #3
 800bcee:	d001      	beq.n	800bcf4 <ndefT5TPollerContextInitialization+0x22>
    {
        return ERR_PARAM;
 800bcf0:	2307      	movs	r3, #7
 800bcf2:	e096      	b.n	800be22 <ndefT5TPollerContextInitialization+0x150>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2278      	movs	r2, #120	; 0x78
 800bcf8:	6839      	ldr	r1, [r7, #0]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f00d f808 	bl	8018d10 <memcpy>

    /* Reset info about the card */
    ctx->state                    = NDEF_STATE_INVALID;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->messageOffset            = 0U;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageLen               = 0U;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->subCtx.t5t.blockLen      = 0U;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    ctx->subCtx.t5t.pAddressedUid = ctx->device.dev.nfcv.InvRes.UID; /* By default work in addressed mode */
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	1cda      	adds	r2, r3, #3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    ctx->subCtx.t5t.TlvNDEFOffset = 0U; /* Offset for TLV */
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    ctx->subCtx.t5t.legacySTHighDensity = false;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
    result = ndefT5TPollerReadSingleBlock( ctx, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800bd40:	f107 030c 	add.w	r3, r7, #12
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	2323      	movs	r3, #35	; 0x23
 800bd48:	2100      	movs	r1, #0
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f001 f823 	bl	800cd96 <ndefT5TPollerReadSingleBlock>
 800bd50:	4603      	mov	r3, r0
 800bd52:	81fb      	strh	r3, [r7, #14]
    if( (result != ERR_NONE) && (ctx->device.dev.nfcv.InvRes.UID[NDEF_T5T_UID_MANUFACTURER_ID_POS] == NDEF_T5T_MANUFACTURER_ID_ST) )
 800bd54:	89fb      	ldrh	r3, [r7, #14]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d019      	beq.n	800bd8e <ndefT5TPollerContextInitialization+0xbc>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	7a5b      	ldrb	r3, [r3, #9]
 800bd5e:	2b02      	cmp	r3, #2
 800bd60:	d115      	bne.n	800bd8e <ndefT5TPollerContextInitialization+0xbc>
    {
        /* Try High Density Legacy mode */
        ctx->subCtx.t5t.legacySTHighDensity = true;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2201      	movs	r2, #1
 800bd66:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
        result = ndefT5TPollerReadSingleBlock( ctx, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800bd70:	f107 030c 	add.w	r3, r7, #12
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	2323      	movs	r3, #35	; 0x23
 800bd78:	2100      	movs	r1, #0
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f001 f80b 	bl	800cd96 <ndefT5TPollerReadSingleBlock>
 800bd80:	4603      	mov	r3, r0
 800bd82:	81fb      	strh	r3, [r7, #14]
        if( result != ERR_NONE )
 800bd84:	89fb      	ldrh	r3, [r7, #14]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <ndefT5TPollerContextInitialization+0xbc>
        {
            return result;
 800bd8a:	89fb      	ldrh	r3, [r7, #14]
 800bd8c:	e049      	b.n	800be22 <ndefT5TPollerContextInitialization+0x150>
        }
    }

    if( (rcvLen > 1U) && (ctx->subCtx.t5t.txrxBuf[0U] == (uint8_t) 0U) )
 800bd8e:	89bb      	ldrh	r3, [r7, #12]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d915      	bls.n	800bdc0 <ndefT5TPollerContextInitialization+0xee>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d110      	bne.n	800bdc0 <ndefT5TPollerContextInitialization+0xee>
    {
        ctx->subCtx.t5t.blockLen = (uint8_t) (rcvLen - 1U);
 800bd9e:	89bb      	ldrh	r3, [r7, #12]
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	3b01      	subs	r3, #1
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    else
    {
        return ERR_PROTO;
    }

    if (rfalNfcvPollerSelect( (uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->device.dev.nfcv.InvRes.UID)  == ERR_NONE)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	3303      	adds	r3, #3
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	2002      	movs	r0, #2
 800bdb4:	f008 fef2 	bl	8014b9c <rfalNfcvPollerSelect>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d002      	beq.n	800bdc4 <ndefT5TPollerContextInitialization+0xf2>
 800bdbe:	e005      	b.n	800bdcc <ndefT5TPollerContextInitialization+0xfa>
        return ERR_PROTO;
 800bdc0:	230b      	movs	r3, #11
 800bdc2:	e02e      	b.n	800be22 <ndefT5TPollerContextInitialization+0x150>
    {
        ctx->subCtx.t5t.pAddressedUid = NULL; /* Switch to selected mode */
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    }

    ctx->subCtx.t5t.sysInfoSupported = false;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2

    if( !ctx->subCtx.t5t.legacySTHighDensity)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800bdda:	f083 0301 	eor.w	r3, r3, #1
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00a      	beq.n	800bdfa <ndefT5TPollerContextInitialization+0x128>
    {
        /* Extended Get System Info */
        if( ndefT5TGetSystemInformation(ctx, true) == ERR_NONE )
 800bde4:	2101      	movs	r1, #1
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f001 f822 	bl	800ce30 <ndefT5TGetSystemInformation>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d103      	bne.n	800bdfa <ndefT5TPollerContextInitialization+0x128>
        {
            ctx->subCtx.t5t.sysInfoSupported = true;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
    }
    if( !ctx->subCtx.t5t.sysInfoSupported )
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800be00:	f083 0301 	eor.w	r3, r3, #1
 800be04:	b2db      	uxtb	r3, r3
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00a      	beq.n	800be20 <ndefT5TPollerContextInitialization+0x14e>
    {
        /* Get System Info */
        if( ndefT5TGetSystemInformation(ctx, false) == ERR_NONE )
 800be0a:	2100      	movs	r1, #0
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f001 f80f 	bl	800ce30 <ndefT5TGetSystemInformation>
 800be12:	4603      	mov	r3, r0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d103      	bne.n	800be20 <ndefT5TPollerContextInitialization+0x14e>
        {
            ctx->subCtx.t5t.sysInfoSupported = true;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
    }
    return result;
 800be20:	89fb      	ldrh	r3, [r7, #14]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <ndefT5TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT5TPollerNdefDetect(ndefContext * ctx, ndefInfo *info)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b08a      	sub	sp, #40	; 0x28
 800be2e:	af02      	add	r7, sp, #8
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	6039      	str	r1, [r7, #0]
    ReturnCode result;
    uint8_t    tmpBuf[NDEF_T5T_TL_MAX_SIZE];
    ReturnCode returnCode = ERR_REQUEST; /* Default return code */
 800be34:	2305      	movs	r3, #5
 800be36:	83fb      	strh	r3, [r7, #30]
    uint16_t   length;
    uint32_t   TlvOffset;
    bool       bExit;
    uint32_t   rcvLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d003      	beq.n	800be46 <ndefT5TPollerNdefDetect+0x1c>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	2b03      	cmp	r3, #3
 800be44:	d001      	beq.n	800be4a <ndefT5TPollerNdefDetect+0x20>
    {
        return ERR_PARAM;
 800be46:	2307      	movs	r3, #7
 800be48:	e203      	b.n	800c252 <ndefT5TPollerNdefDetect+0x428>
    }

    ctx->state                           = NDEF_STATE_INVALID;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->cc.t5t.ccLen                    = 0U;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t5t.memoryLen                = 0U;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2200      	movs	r2, #0
 800be5e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    ctx->messageLen                      = 0U;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset                   = 0U;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2200      	movs	r2, #0
 800be6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    if( info != NULL )
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d011      	beq.n	800be9c <ndefT5TPollerNdefDetect+0x72>
    {
        info->state                = NDEF_STATE_INVALID;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2200      	movs	r2, #0
 800be7c:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	2200      	movs	r2, #0
 800be82:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2200      	movs	r2, #0
 800be88:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	2200      	movs	r2, #0
 800be8e:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	2200      	movs	r2, #0
 800be94:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	2200      	movs	r2, #0
 800be9a:	60da      	str	r2, [r3, #12]
    }

    result = ndefT5TPollerReadBytes(ctx, 0U, 8U, ctx->ccBuf, &rcvLen);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800bea2:	f107 0308 	add.w	r3, r7, #8
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	4613      	mov	r3, r2
 800beaa:	2208      	movs	r2, #8
 800beac:	2100      	movs	r1, #0
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f7ff fdff 	bl	800bab2 <ndefT5TPollerReadBytes>
 800beb4:	4603      	mov	r3, r0
 800beb6:	823b      	strh	r3, [r7, #16]
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 800beb8:	8a3b      	ldrh	r3, [r7, #16]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f040 818e 	bne.w	800c1dc <ndefT5TPollerNdefDetect+0x3b2>
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	2b08      	cmp	r3, #8
 800bec4:	f040 818a 	bne.w	800c1dc <ndefT5TPollerNdefDetect+0x3b2>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800bece:	2be1      	cmp	r3, #225	; 0xe1
 800bed0:	d005      	beq.n	800bede <ndefT5TPollerNdefDetect+0xb4>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800bed8:	2be2      	cmp	r3, #226	; 0xe2
 800beda:	f040 817f 	bne.w	800c1dc <ndefT5TPollerNdefDetect+0x3b2>
    {
        ctx->cc.t5t.magicNumber           =  ctx->ccBuf[0U];
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        ctx->cc.t5t.majorVersion          = (ctx->ccBuf[1U] >> 6U ) & 0x03U;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bef0:	099b      	lsrs	r3, r3, #6
 800bef2:	b2da      	uxtb	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        ctx->cc.t5t.minorVersion          = (ctx->ccBuf[1U] >> 4U ) & 0x03U;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bf00:	091b      	lsrs	r3, r3, #4
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	f003 0303 	and.w	r3, r3, #3
 800bf08:	b2da      	uxtb	r2, r3
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        ctx->cc.t5t.readAccess            = (ctx->ccBuf[1U] >> 2U ) & 0x03U;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bf16:	089b      	lsrs	r3, r3, #2
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	f003 0303 	and.w	r3, r3, #3
 800bf1e:	b2da      	uxtb	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        ctx->cc.t5t.writeAccess           = (ctx->ccBuf[1U] >> 0U ) & 0x03U;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bf2c:	f003 0303 	and.w	r3, r3, #3
 800bf30:	b2da      	uxtb	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        ctx->cc.t5t.memoryLen             =  ctx->ccBuf[2U];
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800bf3e:	b29a      	uxth	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        ctx->cc.t5t.multipleBlockRead     = (((ctx->ccBuf[3U] >> 0U ) & 0x01U) != 0U);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800bf4c:	f003 0301 	and.w	r3, r3, #1
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	bf14      	ite	ne
 800bf54:	2301      	movne	r3, #1
 800bf56:	2300      	moveq	r3, #0
 800bf58:	b2da      	uxtb	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        ctx->cc.t5t.mlenOverflow          = (((ctx->ccBuf[3U] >> 2U ) & 0x01U) != 0U);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800bf66:	089b      	lsrs	r3, r3, #2
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	f003 0301 	and.w	r3, r3, #1
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	bf14      	ite	ne
 800bf72:	2301      	movne	r3, #1
 800bf74:	2300      	moveq	r3, #0
 800bf76:	b2da      	uxtb	r2, r3
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        ctx->cc.t5t.lockBlock             = (((ctx->ccBuf[3U] >> 3U ) & 0x01U) != 0U);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800bf84:	08db      	lsrs	r3, r3, #3
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	f003 0301 	and.w	r3, r3, #1
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	bf14      	ite	ne
 800bf90:	2301      	movne	r3, #1
 800bf92:	2300      	moveq	r3, #0
 800bf94:	b2da      	uxtb	r2, r3
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
        ctx->cc.t5t.specialFrame          = (((ctx->ccBuf[3U] >> 4U ) & 0x01U) != 0U);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800bfa2:	091b      	lsrs	r3, r3, #4
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	f003 0301 	and.w	r3, r3, #1
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	bf14      	ite	ne
 800bfae:	2301      	movne	r3, #1
 800bfb0:	2300      	moveq	r3, #0
 800bfb2:	b2da      	uxtb	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
        ctx->state                        = NDEF_STATE_INITIALIZED;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        if ( ctx->cc.t5t.memoryLen != 0U)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d02a      	beq.n	800c022 <ndefT5TPollerNdefDetect+0x1f8>
        {
            ctx->cc.t5t.ccLen             = NDEF_T5T_CC_LEN_4_BYTES;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2204      	movs	r2, #4
 800bfd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            if( (ctx->cc.t5t.memoryLen == 0xFFU) && ctx->cc.t5t.mlenOverflow )
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800bfda:	2bff      	cmp	r3, #255	; 0xff
 800bfdc:	d134      	bne.n	800c048 <ndefT5TPollerNdefDetect+0x21e>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d02f      	beq.n	800c048 <ndefT5TPollerNdefDetect+0x21e>
            {
                if( (ctx->subCtx.t5t.sysInfoSupported==true) && ( ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d02a      	beq.n	800c048 <ndefT5TPollerNdefDetect+0x21e>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800bff8:	089b      	lsrs	r3, r3, #2
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	f003 0301 	and.w	r3, r3, #1
 800c000:	2b00      	cmp	r3, #0
 800c002:	d021      	beq.n	800c048 <ndefT5TPollerNdefDetect+0x21e>
                {
                    ctx->cc.t5t.memoryLen = (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800c00a:	461a      	mov	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800c012:	fb02 f303 	mul.w	r3, r2, r3
 800c016:	08db      	lsrs	r3, r3, #3
 800c018:	b29a      	uxth	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800c020:	e012      	b.n	800c048 <ndefT5TPollerNdefDetect+0x21e>
                }
            }
        }
        else
        {
            ctx->cc.t5t.ccLen             = NDEF_T5T_CC_LEN_8_BYTES;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2208      	movs	r2, #8
 800c026:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            ctx->cc.t5t.memoryLen         = ((uint16_t)ctx->ccBuf[6U] << 8U) + (uint16_t)ctx->ccBuf[7U];
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800c030:	b29b      	uxth	r3, r3
 800c032:	021b      	lsls	r3, r3, #8
 800c034:	b29a      	uxth	r2, r3
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	4413      	add	r3, r2
 800c040:	b29a      	uxth	r2, r3
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        }
        if( (ctx->subCtx.t5t.sysInfoSupported==true) &&
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d025      	beq.n	800c09e <ndefT5TPollerNdefDetect+0x274>
            (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!= 0U) &&
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800c058:	089b      	lsrs	r3, r3, #2
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	f003 0301 	and.w	r3, r3, #1
        if( (ctx->subCtx.t5t.sysInfoSupported==true) &&
 800c060:	2b00      	cmp	r3, #0
 800c062:	d01c      	beq.n	800c09e <ndefT5TPollerNdefDetect+0x274>
            (ctx->cc.t5t.memoryLen == (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER)) &&
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800c070:	4619      	mov	r1, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800c078:	fb01 f303 	mul.w	r3, r1, r3
 800c07c:	08db      	lsrs	r3, r3, #3
 800c07e:	b29b      	uxth	r3, r3
            (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!= 0U) &&
 800c080:	429a      	cmp	r2, r3
 800c082:	d10c      	bne.n	800c09e <ndefT5TPollerNdefDetect+0x274>
            (ctx->cc.t5t.memoryLen > 0U) )
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
            (ctx->cc.t5t.memoryLen == (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER)) &&
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d007      	beq.n	800c09e <ndefT5TPollerNdefDetect+0x274>
        {
            ctx->cc.t5t.memoryLen--; /* remove CC area from memory len */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c094:	3b01      	subs	r3, #1
 800c096:	b29a      	uxth	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        }
        ctx->messageLen     = 0U;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        ctx->messageOffset  = ctx->cc.t5t.ccLen;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        TlvOffset = ctx->cc.t5t.ccLen;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c0ba:	617b      	str	r3, [r7, #20]
        bExit     = false;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	74fb      	strb	r3, [r7, #19]
        do
        {
            result = ndefT5TPollerReadBytes(ctx, TlvOffset, NDEF_T5T_TL_MAX_SIZE, tmpBuf, &rcvLen);
 800c0c0:	f107 020c 	add.w	r2, r7, #12
 800c0c4:	f107 0308 	add.w	r3, r7, #8
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	2204      	movs	r2, #4
 800c0ce:	6979      	ldr	r1, [r7, #20]
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f7ff fcee 	bl	800bab2 <ndefT5TPollerReadBytes>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	823b      	strh	r3, [r7, #16]
            if ( (result != ERR_NONE) || ( rcvLen != NDEF_T5T_TL_MAX_SIZE) )
 800c0da:	8a3b      	ldrh	r3, [r7, #16]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f040 8085 	bne.w	800c1ec <ndefT5TPollerNdefDetect+0x3c2>
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	2b04      	cmp	r3, #4
 800c0e6:	f040 8081 	bne.w	800c1ec <ndefT5TPollerNdefDetect+0x3c2>
            {
                break;
            }
            offset = 2U;
 800c0ea:	2302      	movs	r3, #2
 800c0ec:	83bb      	strh	r3, [r7, #28]
            length = tmpBuf[1U];
 800c0ee:	7b7b      	ldrb	r3, [r7, #13]
 800c0f0:	837b      	strh	r3, [r7, #26]
            if ( length == (NDEF_SHORT_VFIELD_MAX_LEN + 1U) )
 800c0f2:	8b7b      	ldrh	r3, [r7, #26]
 800c0f4:	2bff      	cmp	r3, #255	; 0xff
 800c0f6:	d10a      	bne.n	800c10e <ndefT5TPollerNdefDetect+0x2e4>
            {
                /* Size is encoded in 1 + 2 bytes */
                length = (((uint16_t)tmpBuf[2U]) << 8U) + (uint16_t)tmpBuf[3U];
 800c0f8:	7bbb      	ldrb	r3, [r7, #14]
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	021b      	lsls	r3, r3, #8
 800c0fe:	b29a      	uxth	r2, r3
 800c100:	7bfb      	ldrb	r3, [r7, #15]
 800c102:	b29b      	uxth	r3, r3
 800c104:	4413      	add	r3, r2
 800c106:	837b      	strh	r3, [r7, #26]
                offset += 2U;
 800c108:	8bbb      	ldrh	r3, [r7, #28]
 800c10a:	3302      	adds	r3, #2
 800c10c:	83bb      	strh	r3, [r7, #28]
            }
            if (tmpBuf[0U] == (uint8_t)NDEF_T5T_TLV_NDEF)
 800c10e:	7b3b      	ldrb	r3, [r7, #12]
 800c110:	2b03      	cmp	r3, #3
 800c112:	d142      	bne.n	800c19a <ndefT5TPollerNdefDetect+0x370>
            {
                /* NDEF record return it */
                returnCode                    = ERR_NONE;  /* Default */
 800c114:	2300      	movs	r3, #0
 800c116:	83fb      	strh	r3, [r7, #30]
                ctx->subCtx.t5t.TlvNDEFOffset = TlvOffset; /* Offset for TLV */
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	697a      	ldr	r2, [r7, #20]
 800c11c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
                ctx->messageOffset            = TlvOffset + offset;
 800c120:	8bba      	ldrh	r2, [r7, #28]
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	441a      	add	r2, r3
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                ctx->messageLen               = length;
 800c12c:	8b7a      	ldrh	r2, [r7, #26]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                TlvOffset = 0U;
 800c134:	2300      	movs	r3, #0
 800c136:	617b      	str	r3, [r7, #20]
                if (length == 0U)
 800c138:	8b7b      	ldrh	r3, [r7, #26]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d117      	bne.n	800c16e <ndefT5TPollerNdefDetect+0x344>
                {
                    /* Req 40 7.5.1.6 */
                    if ( (ctx->cc.t5t.readAccess == 0U) && (ctx->cc.t5t.writeAccess == 0U) )
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c144:	2b00      	cmp	r3, #0
 800c146:	d109      	bne.n	800c15c <ndefT5TPollerNdefDetect+0x332>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d104      	bne.n	800c15c <ndefT5TPollerNdefDetect+0x332>
                    {
                        ctx->state = NDEF_STATE_INITIALIZED;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2201      	movs	r2, #1
 800c156:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800c15a:	e005      	b.n	800c168 <ndefT5TPollerNdefDetect+0x33e>
                    }
                    else
                    {
                        ctx->state = NDEF_STATE_INVALID;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        returnCode = ERR_REQUEST; /* Default */
 800c164:	2305      	movs	r3, #5
 800c166:	83fb      	strh	r3, [r7, #30]
                    }
                    bExit = true;
 800c168:	2301      	movs	r3, #1
 800c16a:	74fb      	strb	r3, [r7, #19]
 800c16c:	e02b      	b.n	800c1c6 <ndefT5TPollerNdefDetect+0x39c>
                }
                else
                {
                    if (ctx->cc.t5t.readAccess == 0U)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c174:	2b00      	cmp	r3, #0
 800c176:	d10d      	bne.n	800c194 <ndefT5TPollerNdefDetect+0x36a>
                    {
                        if (ctx->cc.t5t.writeAccess == 0U)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d104      	bne.n	800c18c <ndefT5TPollerNdefDetect+0x362>
                        {
                            ctx->state = NDEF_STATE_READWRITE;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2202      	movs	r2, #2
 800c186:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800c18a:	e003      	b.n	800c194 <ndefT5TPollerNdefDetect+0x36a>
                        }
                        else
                        {
                            ctx->state = NDEF_STATE_READONLY;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2203      	movs	r2, #3
 800c190:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        }
                    }
                    bExit = true;
 800c194:	2301      	movs	r3, #1
 800c196:	74fb      	strb	r3, [r7, #19]
 800c198:	e015      	b.n	800c1c6 <ndefT5TPollerNdefDetect+0x39c>
                }
            }
            else if (tmpBuf[0U]== (uint8_t) NDEF_T5T_TLV_TERMINATOR)
 800c19a:	7b3b      	ldrb	r3, [r7, #12]
 800c19c:	2bfe      	cmp	r3, #254	; 0xfe
 800c19e:	d104      	bne.n	800c1aa <ndefT5TPollerNdefDetect+0x380>
            {
                /* NDEF end */
                TlvOffset = 0U;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	617b      	str	r3, [r7, #20]
                bExit     = true;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	74fb      	strb	r3, [r7, #19]
 800c1a8:	e00d      	b.n	800c1c6 <ndefT5TPollerNdefDetect+0x39c>
            }
            else if (tmpBuf[0U]== (uint8_t) NDEF_T5T_TLV_PROPRIETARY)
 800c1aa:	7b3b      	ldrb	r3, [r7, #12]
 800c1ac:	2bfd      	cmp	r3, #253	; 0xfd
 800c1ae:	d106      	bne.n	800c1be <ndefT5TPollerNdefDetect+0x394>
            {   /* proprietary go next, nothing to do */
                TlvOffset +=  (uint32_t)offset + (uint32_t)length;
 800c1b0:	8bba      	ldrh	r2, [r7, #28]
 800c1b2:	8b7b      	ldrh	r3, [r7, #26]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	697a      	ldr	r2, [r7, #20]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	617b      	str	r3, [r7, #20]
 800c1bc:	e003      	b.n	800c1c6 <ndefT5TPollerNdefDetect+0x39c>
            }
            else
            {
                /* RFU value */
                TlvOffset = 0U;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	617b      	str	r3, [r7, #20]
                bExit = true;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	74fb      	strb	r3, [r7, #19]
            }
        } while ( ( TlvOffset > 0U) && (bExit == false) );
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d00f      	beq.n	800c1ec <ndefT5TPollerNdefDetect+0x3c2>
 800c1cc:	7cfb      	ldrb	r3, [r7, #19]
 800c1ce:	f083 0301 	eor.w	r3, r3, #1
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f47f af73 	bne.w	800c0c0 <ndefT5TPollerNdefDetect+0x296>
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 800c1da:	e007      	b.n	800c1ec <ndefT5TPollerNdefDetect+0x3c2>
    }
    else
    {
        /* No CCFile */
        returnCode = ERR_REQUEST;
 800c1dc:	2305      	movs	r3, #5
 800c1de:	83fb      	strh	r3, [r7, #30]
        if (result != ERR_NONE)
 800c1e0:	8a3b      	ldrh	r3, [r7, #16]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d003      	beq.n	800c1ee <ndefT5TPollerNdefDetect+0x3c4>
        {
            returnCode = result;
 800c1e6:	8a3b      	ldrh	r3, [r7, #16]
 800c1e8:	83fb      	strh	r3, [r7, #30]
 800c1ea:	e000      	b.n	800c1ee <ndefT5TPollerNdefDetect+0x3c4>
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 800c1ec:	bf00      	nop
        }
    }

    /* TS T5T v1.0 4.3.1.17 T5T_area size is measured in bytes is equal to 8 * MLEN */
    ctx->areaLen               = (uint32_t)ctx->cc.t5t.memoryLen * NDEF_T5T_MLEN_DIVIDER;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c1f4:	00da      	lsls	r2, r3, #3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    if( info != NULL )
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d026      	beq.n	800c250 <ndefT5TPollerNdefDetect+0x426>
    {
        info->state                = ctx->state;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ctx->cc.t5t.majorVersion;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ctx->cc.t5t.minorVersion;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = (uint32_t)ctx->cc.t5t.ccLen + ctx->areaLen - ctx->messageOffset;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c230:	461a      	mov	r2, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c238:	441a      	add	r2, r3
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c240:	1ad2      	subs	r2, r2, r3
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	60da      	str	r2, [r3, #12]
    }
    return returnCode;
 800c250:	8bfb      	ldrh	r3, [r7, #30]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3720      	adds	r7, #32
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <ndefT5TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b088      	sub	sp, #32
 800c25e:	af02      	add	r7, sp, #8
 800c260:	60f8      	str	r0, [r7, #12]
 800c262:	60b9      	str	r1, [r7, #8]
 800c264:	607a      	str	r2, [r7, #4]
 800c266:	603b      	str	r3, [r7, #0]
    ReturnCode result;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (buf == NULL) )
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d006      	beq.n	800c27c <ndefT5TPollerReadRawMessage+0x22>
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	2b03      	cmp	r3, #3
 800c274:	d102      	bne.n	800c27c <ndefT5TPollerReadRawMessage+0x22>
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d101      	bne.n	800c280 <ndefT5TPollerReadRawMessage+0x26>
    {
        return ERR_PARAM;
 800c27c:	2307      	movs	r3, #7
 800c27e:	e016      	b.n	800c2ae <ndefT5TPollerReadRawMessage+0x54>
    }

    if( ctx->messageLen > bufLen )
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d201      	bcs.n	800c290 <ndefT5TPollerReadRawMessage+0x36>
    {
        return ERR_NOMEM;
 800c28c:	2301      	movs	r3, #1
 800c28e:	e00e      	b.n	800c2ae <ndefT5TPollerReadRawMessage+0x54>
    }

    result = ndefT5TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f7ff fc05 	bl	800bab2 <ndefT5TPollerReadBytes>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	82fb      	strh	r3, [r7, #22]
    return result;
 800c2ac:	8afb      	ldrh	r3, [r7, #22]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3718      	adds	r7, #24
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <ndefT5TPollerWriteBytes>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t * buf, uint32_t len)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b08c      	sub	sp, #48	; 0x30
 800c2ba:	af02      	add	r7, sp, #8
 800c2bc:	60f8      	str	r0, [r7, #12]
 800c2be:	60b9      	str	r1, [r7, #8]
 800c2c0:	607a      	str	r2, [r7, #4]
 800c2c2:	603b      	str	r3, [r7, #0]
    ReturnCode      result = ERR_REQUEST;
 800c2c4:	2305      	movs	r3, #5
 800c2c6:	84fb      	strh	r3, [r7, #38]	; 0x26
    ReturnCode      res;
    uint16_t        nbRead;
    uint16_t        blockLen16;
    uint16_t        startBlock;
    uint16_t        startAddr ;
    const uint8_t * wrbuf      = buf;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	623b      	str	r3, [r7, #32]
    uint32_t        currentLen = len;
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	61fb      	str	r3, [r7, #28]

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (len == 0U) || (ctx->subCtx.t5t.blockLen == 0U))
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00b      	beq.n	800c2ee <ndefT5TPollerWriteBytes+0x38>
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	2b03      	cmp	r3, #3
 800c2dc:	d107      	bne.n	800c2ee <ndefT5TPollerWriteBytes+0x38>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d004      	beq.n	800c2ee <ndefT5TPollerWriteBytes+0x38>
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d101      	bne.n	800c2f2 <ndefT5TPollerWriteBytes+0x3c>
    {
        return ERR_PARAM;
 800c2ee:	2307      	movs	r3, #7
 800c2f0:	e0eb      	b.n	800c4ca <ndefT5TPollerWriteBytes+0x214>
    }
    blockLen16 = (uint16_t )ctx->subCtx.t5t.blockLen;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800c2f8:	837b      	strh	r3, [r7, #26]
    if( blockLen16 == 0U )
 800c2fa:	8b7b      	ldrh	r3, [r7, #26]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d101      	bne.n	800c304 <ndefT5TPollerWriteBytes+0x4e>
    {
        return ERR_SYSTEM;
 800c300:	2308      	movs	r3, #8
 800c302:	e0e2      	b.n	800c4ca <ndefT5TPollerWriteBytes+0x214>
    }
    startBlock = (uint16_t) (offset     / blockLen16);
 800c304:	8b7b      	ldrh	r3, [r7, #26]
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	fbb2 f3f3 	udiv	r3, r2, r3
 800c30c:	84bb      	strh	r3, [r7, #36]	; 0x24
    startAddr  = (uint16_t) (startBlock * blockLen16);
 800c30e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c310:	8b7a      	ldrh	r2, [r7, #26]
 800c312:	fb02 f303 	mul.w	r3, r2, r3
 800c316:	833b      	strh	r3, [r7, #24]

    if (startAddr != offset)
 800c318:	8b3b      	ldrh	r3, [r7, #24]
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	f000 8081 	beq.w	800c424 <ndefT5TPollerWriteBytes+0x16e>
    {
        /* Unaligned start offset must read the first block before */
        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen16 + 3U, &nbRead);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800c328:	8b7b      	ldrh	r3, [r7, #26]
 800c32a:	3303      	adds	r3, #3
 800c32c:	b298      	uxth	r0, r3
 800c32e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800c330:	f107 0314 	add.w	r3, r7, #20
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	4603      	mov	r3, r0
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f000 fd2c 	bl	800cd96 <ndefT5TPollerReadSingleBlock>
 800c33e:	4603      	mov	r3, r0
 800c340:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 800c342:	8afb      	ldrh	r3, [r7, #22]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d13b      	bne.n	800c3c0 <ndefT5TPollerWriteBytes+0x10a>
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d136      	bne.n	800c3c0 <ndefT5TPollerWriteBytes+0x10a>
 800c352:	8abb      	ldrh	r3, [r7, #20]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d033      	beq.n	800c3c0 <ndefT5TPollerWriteBytes+0x10a>
        {
            nbRead = (uint16_t) ((uint32_t)nbRead - 1U  + startAddr - offset);
 800c358:	8aba      	ldrh	r2, [r7, #20]
 800c35a:	8b3b      	ldrh	r3, [r7, #24]
 800c35c:	4413      	add	r3, r2
 800c35e:	b29a      	uxth	r2, r3
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	b29b      	uxth	r3, r3
 800c364:	1ad3      	subs	r3, r2, r3
 800c366:	b29b      	uxth	r3, r3
 800c368:	3b01      	subs	r3, #1
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	82bb      	strh	r3, [r7, #20]
            if (nbRead > (uint32_t) currentLen)
 800c36e:	8abb      	ldrh	r3, [r7, #20]
 800c370:	461a      	mov	r2, r3
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	4293      	cmp	r3, r2
 800c376:	d202      	bcs.n	800c37e <ndefT5TPollerWriteBytes+0xc8>
            {
                nbRead = (uint16_t) currentLen;
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	82bb      	strh	r3, [r7, #20]
            }
            if (nbRead > 0U)
 800c37e:	8abb      	ldrh	r3, [r7, #20]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d00e      	beq.n	800c3a2 <ndefT5TPollerWriteBytes+0xec>
            {
                (void)ST_MEMCPY(&ctx->subCtx.t5t.txrxBuf[1U - startAddr + (uint16_t)offset], wrbuf, nbRead);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	b29b      	uxth	r3, r3
 800c388:	461a      	mov	r2, r3
 800c38a:	8b3b      	ldrh	r3, [r7, #24]
 800c38c:	1ad3      	subs	r3, r2, r3
 800c38e:	3301      	adds	r3, #1
 800c390:	33d0      	adds	r3, #208	; 0xd0
 800c392:	68fa      	ldr	r2, [r7, #12]
 800c394:	4413      	add	r3, r2
 800c396:	3304      	adds	r3, #4
 800c398:	8aba      	ldrh	r2, [r7, #20]
 800c39a:	6a39      	ldr	r1, [r7, #32]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f00c fcb7 	bl	8018d10 <memcpy>
            }
            res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, &ctx->subCtx.t5t.txrxBuf[1U]);
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f103 02d5 	add.w	r2, r3, #213	; 0xd5
 800c3a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f000 fc49 	bl	800cc44 <ndefT5TPollerWriteSingleBlock>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	82fb      	strh	r3, [r7, #22]
            if (res != ERR_NONE)
 800c3b6:	8afb      	ldrh	r3, [r7, #22]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00b      	beq.n	800c3d4 <ndefT5TPollerWriteBytes+0x11e>
            {
                return res;
 800c3bc:	8afb      	ldrh	r3, [r7, #22]
 800c3be:	e084      	b.n	800c4ca <ndefT5TPollerWriteBytes+0x214>
            }
        }
        else
        {
            if (res != ERR_NONE)
 800c3c0:	8afb      	ldrh	r3, [r7, #22]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d002      	beq.n	800c3cc <ndefT5TPollerWriteBytes+0x116>
            {
                result = res;
 800c3c6:	8afb      	ldrh	r3, [r7, #22]
 800c3c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c3ca:	e001      	b.n	800c3d0 <ndefT5TPollerWriteBytes+0x11a>
            }
            else
            {
                result = ERR_PARAM;
 800c3cc:	2307      	movs	r3, #7
 800c3ce:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            return result;
 800c3d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c3d2:	e07a      	b.n	800c4ca <ndefT5TPollerWriteBytes+0x214>
        }
        currentLen -= nbRead;
 800c3d4:	8abb      	ldrh	r3, [r7, #20]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	1a9b      	subs	r3, r3, r2
 800c3dc:	61fb      	str	r3, [r7, #28]
        wrbuf       = &wrbuf[nbRead];
 800c3de:	8abb      	ldrh	r3, [r7, #20]
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	6a3b      	ldr	r3, [r7, #32]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	623b      	str	r3, [r7, #32]
        startBlock++;
 800c3e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    while (currentLen >= blockLen16)
 800c3ee:	e019      	b.n	800c424 <ndefT5TPollerWriteBytes+0x16e>
    {
        res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, wrbuf);
 800c3f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3f2:	6a3a      	ldr	r2, [r7, #32]
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f000 fc24 	bl	800cc44 <ndefT5TPollerWriteSingleBlock>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	82fb      	strh	r3, [r7, #22]
        if (res == ERR_NONE)
 800c400:	8afb      	ldrh	r3, [r7, #22]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d10b      	bne.n	800c41e <ndefT5TPollerWriteBytes+0x168>
        {
            currentLen -= blockLen16;
 800c406:	8b7b      	ldrh	r3, [r7, #26]
 800c408:	69fa      	ldr	r2, [r7, #28]
 800c40a:	1ad3      	subs	r3, r2, r3
 800c40c:	61fb      	str	r3, [r7, #28]
            wrbuf       = &wrbuf[blockLen16];
 800c40e:	8b7b      	ldrh	r3, [r7, #26]
 800c410:	6a3a      	ldr	r2, [r7, #32]
 800c412:	4413      	add	r3, r2
 800c414:	623b      	str	r3, [r7, #32]
            startBlock++;
 800c416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c418:	3301      	adds	r3, #1
 800c41a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c41c:	e002      	b.n	800c424 <ndefT5TPollerWriteBytes+0x16e>
        }
        else
        {
            result = res;
 800c41e:	8afb      	ldrh	r3, [r7, #22]
 800c420:	84fb      	strh	r3, [r7, #38]	; 0x26
            break;
 800c422:	e003      	b.n	800c42c <ndefT5TPollerWriteBytes+0x176>
    while (currentLen >= blockLen16)
 800c424:	8b7b      	ldrh	r3, [r7, #26]
 800c426:	69fa      	ldr	r2, [r7, #28]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d2e1      	bcs.n	800c3f0 <ndefT5TPollerWriteBytes+0x13a>
        }
    }
    if ( (currentLen != 0U) && (currentLen < blockLen16) )
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d045      	beq.n	800c4be <ndefT5TPollerWriteBytes+0x208>
 800c432:	8b7b      	ldrh	r3, [r7, #26]
 800c434:	69fa      	ldr	r2, [r7, #28]
 800c436:	429a      	cmp	r2, r3
 800c438:	d241      	bcs.n	800c4be <ndefT5TPollerWriteBytes+0x208>
    {
        /* Unaligned end, must read the first block before */
        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen16 + 3U, &nbRead);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800c440:	8b7b      	ldrh	r3, [r7, #26]
 800c442:	3303      	adds	r3, #3
 800c444:	b298      	uxth	r0, r3
 800c446:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800c448:	f107 0314 	add.w	r3, r7, #20
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	4603      	mov	r3, r0
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f000 fca0 	bl	800cd96 <ndefT5TPollerReadSingleBlock>
 800c456:	4603      	mov	r3, r0
 800c458:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 800c45a:	8afb      	ldrh	r3, [r7, #22]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d124      	bne.n	800c4aa <ndefT5TPollerWriteBytes+0x1f4>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800c466:	2b00      	cmp	r3, #0
 800c468:	d11f      	bne.n	800c4aa <ndefT5TPollerWriteBytes+0x1f4>
 800c46a:	8abb      	ldrh	r3, [r7, #20]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d01c      	beq.n	800c4aa <ndefT5TPollerWriteBytes+0x1f4>
        {
            if (currentLen > 0U) { (void)ST_MEMCPY(&ctx->subCtx.t5t.txrxBuf[1U], wrbuf, currentLen); }
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d006      	beq.n	800c484 <ndefT5TPollerWriteBytes+0x1ce>
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	33d5      	adds	r3, #213	; 0xd5
 800c47a:	69fa      	ldr	r2, [r7, #28]
 800c47c:	6a39      	ldr	r1, [r7, #32]
 800c47e:	4618      	mov	r0, r3
 800c480:	f00c fc46 	bl	8018d10 <memcpy>
            res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, &ctx->subCtx.t5t.txrxBuf[1U]);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f103 02d5 	add.w	r2, r3, #213	; 0xd5
 800c48a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c48c:	4619      	mov	r1, r3
 800c48e:	68f8      	ldr	r0, [r7, #12]
 800c490:	f000 fbd8 	bl	800cc44 <ndefT5TPollerWriteSingleBlock>
 800c494:	4603      	mov	r3, r0
 800c496:	82fb      	strh	r3, [r7, #22]
            if (res != ERR_NONE)
 800c498:	8afb      	ldrh	r3, [r7, #22]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d002      	beq.n	800c4a4 <ndefT5TPollerWriteBytes+0x1ee>
            {
                result = res;
 800c49e:	8afb      	ldrh	r3, [r7, #22]
 800c4a0:	84fb      	strh	r3, [r7, #38]	; 0x26
            if (res != ERR_NONE)
 800c4a2:	e00c      	b.n	800c4be <ndefT5TPollerWriteBytes+0x208>
            }
            else
            {
                currentLen = 0U;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	61fb      	str	r3, [r7, #28]
            if (res != ERR_NONE)
 800c4a8:	e009      	b.n	800c4be <ndefT5TPollerWriteBytes+0x208>
            }
        }
        else
        {
            if (res != ERR_NONE)
 800c4aa:	8afb      	ldrh	r3, [r7, #22]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d002      	beq.n	800c4b6 <ndefT5TPollerWriteBytes+0x200>
            {
                result = res;
 800c4b0:	8afb      	ldrh	r3, [r7, #22]
 800c4b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c4b4:	e001      	b.n	800c4ba <ndefT5TPollerWriteBytes+0x204>
            }
            else
            {
                result = ERR_PARAM;
 800c4b6:	2307      	movs	r3, #7
 800c4b8:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            return result;
 800c4ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c4bc:	e005      	b.n	800c4ca <ndefT5TPollerWriteBytes+0x214>
        }
    }
    if (currentLen == 0U)
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d101      	bne.n	800c4c8 <ndefT5TPollerWriteBytes+0x212>
    {
        result = ERR_NONE;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    return result;
 800c4c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3728      	adds	r7, #40	; 0x28
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <ndefT5TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b086      	sub	sp, #24
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	6039      	str	r1, [r7, #0]
    uint8_t    TLV[8U];
    ReturnCode result = ERR_PARAM;
 800c4dc:	2307      	movs	r3, #7
 800c4de:	82fb      	strh	r3, [r7, #22]
    uint8_t     len    = 0U;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	757b      	strb	r3, [r7, #21]

    if( (ctx != NULL) && ndefT5TisT5TDevice(&ctx->device))
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d071      	beq.n	800c5ce <ndefT5TPollerWriteRawMessageLen+0xfc>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	2b03      	cmp	r3, #3
 800c4f0:	d16d      	bne.n	800c5ce <ndefT5TPollerWriteRawMessageLen+0xfc>
    {
        if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d007      	beq.n	800c50c <ndefT5TPollerWriteRawMessageLen+0x3a>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c502:	2b02      	cmp	r3, #2
 800c504:	d002      	beq.n	800c50c <ndefT5TPollerWriteRawMessageLen+0x3a>
        {
            result = ERR_WRONG_STATE;
 800c506:	2321      	movs	r3, #33	; 0x21
 800c508:	82fb      	strh	r3, [r7, #22]
 800c50a:	e060      	b.n	800c5ce <ndefT5TPollerWriteRawMessageLen+0xfc>
        }
        else
        {
            TLV[len] = NDEF_T5T_TLV_NDEF;
 800c50c:	7d7b      	ldrb	r3, [r7, #21]
 800c50e:	3318      	adds	r3, #24
 800c510:	443b      	add	r3, r7
 800c512:	2203      	movs	r2, #3
 800c514:	f803 2c0c 	strb.w	r2, [r3, #-12]
            len++;
 800c518:	7d7b      	ldrb	r3, [r7, #21]
 800c51a:	3301      	adds	r3, #1
 800c51c:	757b      	strb	r3, [r7, #21]
            if (rawMessageLen <= NDEF_SHORT_VFIELD_MAX_LEN)
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2bfe      	cmp	r3, #254	; 0xfe
 800c522:	d80a      	bhi.n	800c53a <ndefT5TPollerWriteRawMessageLen+0x68>
            {
                TLV[len] = (uint8_t) rawMessageLen;
 800c524:	7d7b      	ldrb	r3, [r7, #21]
 800c526:	683a      	ldr	r2, [r7, #0]
 800c528:	b2d2      	uxtb	r2, r2
 800c52a:	3318      	adds	r3, #24
 800c52c:	443b      	add	r3, r7
 800c52e:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800c532:	7d7b      	ldrb	r3, [r7, #21]
 800c534:	3301      	adds	r3, #1
 800c536:	757b      	strb	r3, [r7, #21]
 800c538:	e014      	b.n	800c564 <ndefT5TPollerWriteRawMessageLen+0x92>
            }
            else
            {
                TLV[len] = (uint8_t) (rawMessageLen >> 8U);
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	0a1a      	lsrs	r2, r3, #8
 800c53e:	7d7b      	ldrb	r3, [r7, #21]
 800c540:	b2d2      	uxtb	r2, r2
 800c542:	3318      	adds	r3, #24
 800c544:	443b      	add	r3, r7
 800c546:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800c54a:	7d7b      	ldrb	r3, [r7, #21]
 800c54c:	3301      	adds	r3, #1
 800c54e:	757b      	strb	r3, [r7, #21]
                TLV[len] = (uint8_t) rawMessageLen;
 800c550:	7d7b      	ldrb	r3, [r7, #21]
 800c552:	683a      	ldr	r2, [r7, #0]
 800c554:	b2d2      	uxtb	r2, r2
 800c556:	3318      	adds	r3, #24
 800c558:	443b      	add	r3, r7
 800c55a:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800c55e:	7d7b      	ldrb	r3, [r7, #21]
 800c560:	3301      	adds	r3, #1
 800c562:	757b      	strb	r3, [r7, #21]
            }
            if (rawMessageLen == 0U)
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d108      	bne.n	800c57c <ndefT5TPollerWriteRawMessageLen+0xaa>
            {
                TLV[len] = NDEF_TERMINATOR_TLV_T; /* TLV terminator */
 800c56a:	7d7b      	ldrb	r3, [r7, #21]
 800c56c:	3318      	adds	r3, #24
 800c56e:	443b      	add	r3, r7
 800c570:	22fe      	movs	r2, #254	; 0xfe
 800c572:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800c576:	7d7b      	ldrb	r3, [r7, #21]
 800c578:	3301      	adds	r3, #1
 800c57a:	757b      	strb	r3, [r7, #21]
            }

            result = ndefT5TPollerWriteBytes(ctx, ctx->subCtx.t5t.TlvNDEFOffset, TLV, len);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800c582:	7d7b      	ldrb	r3, [r7, #21]
 800c584:	f107 020c 	add.w	r2, r7, #12
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f7ff fe94 	bl	800c2b6 <ndefT5TPollerWriteBytes>
 800c58e:	4603      	mov	r3, r0
 800c590:	82fb      	strh	r3, [r7, #22]
            if ((result == ERR_NONE) && (rawMessageLen != 0U))
 800c592:	8afb      	ldrh	r3, [r7, #22]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d11a      	bne.n	800c5ce <ndefT5TPollerWriteRawMessageLen+0xfc>
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d017      	beq.n	800c5ce <ndefT5TPollerWriteRawMessageLen+0xfc>
            {  /* T5T need specific terminator */
               len = 0U;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	757b      	strb	r3, [r7, #21]
               TLV[len] = NDEF_TERMINATOR_TLV_T; /* TLV terminator */
 800c5a2:	7d7b      	ldrb	r3, [r7, #21]
 800c5a4:	3318      	adds	r3, #24
 800c5a6:	443b      	add	r3, r7
 800c5a8:	22fe      	movs	r2, #254	; 0xfe
 800c5aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
               len++;
 800c5ae:	7d7b      	ldrb	r3, [r7, #21]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	757b      	strb	r3, [r7, #21]
               result = ndefT5TPollerWriteBytes(ctx, ctx->messageOffset + rawMessageLen, TLV, len );
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	18d1      	adds	r1, r2, r3
 800c5be:	7d7b      	ldrb	r3, [r7, #21]
 800c5c0:	f107 020c 	add.w	r2, r7, #12
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f7ff fe76 	bl	800c2b6 <ndefT5TPollerWriteBytes>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	82fb      	strh	r3, [r7, #22]
            }
        }
    }
    return result;
 800c5ce:	8afb      	ldrh	r3, [r7, #22]
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3718      	adds	r7, #24
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <ndefT5TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteRawMessage(ndefContext *ctx, const uint8_t * buf, uint32_t bufLen)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b086      	sub	sp, #24
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	607a      	str	r2, [r7, #4]
    uint32_t   len = bufLen ;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	613b      	str	r3, [r7, #16]
    ReturnCode result;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (buf == NULL) )
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d006      	beq.n	800c5fc <ndefT5TPollerWriteRawMessage+0x24>
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	2b03      	cmp	r3, #3
 800c5f4:	d102      	bne.n	800c5fc <ndefT5TPollerWriteRawMessage+0x24>
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d101      	bne.n	800c600 <ndefT5TPollerWriteRawMessage+0x28>
    {
        return ERR_PARAM;
 800c5fc:	2307      	movs	r3, #7
 800c5fe:	e04b      	b.n	800c698 <ndefT5TPollerWriteRawMessage+0xc0>

    /* TS T5T v1.0 7.5.3.1/2: T5T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T5T v1.0 7.5.3.3: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c606:	2b01      	cmp	r3, #1
 800c608:	d006      	beq.n	800c618 <ndefT5TPollerWriteRawMessage+0x40>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c610:	2b02      	cmp	r3, #2
 800c612:	d001      	beq.n	800c618 <ndefT5TPollerWriteRawMessage+0x40>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 800c614:	2321      	movs	r3, #33	; 0x21
 800c616:	e03f      	b.n	800c698 <ndefT5TPollerWriteRawMessage+0xc0>
    }

    /* TS T5T v1.0 7.5.3.3: verify available space */
    result = ndefT5TPollerCheckAvailableSpace(ctx, bufLen);
 800c618:	6879      	ldr	r1, [r7, #4]
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f000 fa57 	bl	800cace <ndefT5TPollerCheckAvailableSpace>
 800c620:	4603      	mov	r3, r0
 800c622:	82fb      	strh	r3, [r7, #22]
    if( result != ERR_NONE )
 800c624:	8afb      	ldrh	r3, [r7, #22]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d001      	beq.n	800c62e <ndefT5TPollerWriteRawMessage+0x56>
    {
        /* Conclude procedures */
        return ERR_PARAM;
 800c62a:	2307      	movs	r3, #7
 800c62c:	e034      	b.n	800c698 <ndefT5TPollerWriteRawMessage+0xc0>
    }
    /* TS T5T v1.0 7.5.3.4: reset L-Field to 0 */
    /* and update ctx->messageOffset according to L-field len */
    result = ndefT5TPollerBeginWriteMessage(ctx, bufLen);
 800c62e:	6879      	ldr	r1, [r7, #4]
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f000 fa81 	bl	800cb38 <ndefT5TPollerBeginWriteMessage>
 800c636:	4603      	mov	r3, r0
 800c638:	82fb      	strh	r3, [r7, #22]
    if  (result != ERR_NONE)
 800c63a:	8afb      	ldrh	r3, [r7, #22]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d005      	beq.n	800c64c <ndefT5TPollerWriteRawMessage+0x74>
    {
        ctx->state = NDEF_STATE_INVALID;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2200      	movs	r2, #0
 800c644:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return result;
 800c648:	8afb      	ldrh	r3, [r7, #22]
 800c64a:	e025      	b.n	800c698 <ndefT5TPollerWriteRawMessage+0xc0>
    }
    if( bufLen != 0U )
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d021      	beq.n	800c696 <ndefT5TPollerWriteRawMessage+0xbe>
    {
        /* TS T5T v1.0 7.5.3.5: write new NDEF message */
        result = ndefT5TPollerWriteBytes(ctx, ctx->messageOffset, buf, len);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	68ba      	ldr	r2, [r7, #8]
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	f7ff fe2a 	bl	800c2b6 <ndefT5TPollerWriteBytes>
 800c662:	4603      	mov	r3, r0
 800c664:	82fb      	strh	r3, [r7, #22]
        if  (result != ERR_NONE)
 800c666:	8afb      	ldrh	r3, [r7, #22]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d005      	beq.n	800c678 <ndefT5TPollerWriteRawMessage+0xa0>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2200      	movs	r2, #0
 800c670:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return result;
 800c674:	8afb      	ldrh	r3, [r7, #22]
 800c676:	e00f      	b.n	800c698 <ndefT5TPollerWriteRawMessage+0xc0>
        }
        /* TS T5T v1.0 7.5.3.6 & 7.5.3.7: update L-Field and write Terminator TLV */
        result = ndefT5TPollerEndWriteMessage(ctx, len);
 800c678:	6939      	ldr	r1, [r7, #16]
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f000 faaa 	bl	800cbd4 <ndefT5TPollerEndWriteMessage>
 800c680:	4603      	mov	r3, r0
 800c682:	82fb      	strh	r3, [r7, #22]
        if  (result != ERR_NONE)
 800c684:	8afb      	ldrh	r3, [r7, #22]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d005      	beq.n	800c696 <ndefT5TPollerWriteRawMessage+0xbe>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2200      	movs	r2, #0
 800c68e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return result;
 800c692:	8afb      	ldrh	r3, [r7, #22]
 800c694:	e000      	b.n	800c698 <ndefT5TPollerWriteRawMessage+0xc0>
        }
    }
    return result;
 800c696:	8afb      	ldrh	r3, [r7, #22]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3718      	adds	r7, #24
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <ndefT5TWriteCC>:

/*******************************************************************************/
static ReturnCode ndefT5TWriteCC(ndefContext *ctx)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
    ReturnCode  ret;
    uint8_t*    buf;
    uint8_t     dataIt;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d003      	beq.n	800c6b6 <ndefT5TWriteCC+0x16>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	2b03      	cmp	r3, #3
 800c6b4:	d001      	beq.n	800c6ba <ndefT5TWriteCC+0x1a>
    {
        return ERR_PARAM;
 800c6b6:	2307      	movs	r3, #7
 800c6b8:	e0c9      	b.n	800c84e <ndefT5TWriteCC+0x1ae>
    }

    buf    = ctx->ccBuf;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	339c      	adds	r3, #156	; 0x9c
 800c6be:	60fb      	str	r3, [r7, #12]
    dataIt = 0U;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	72fb      	strb	r3, [r7, #11]
    /* Encode CC */
    buf[dataIt] = ctx->cc.t5t.magicNumber;                                                                /* Byte 0 */
 800c6c4:	7afb      	ldrb	r3, [r7, #11]
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	f892 207d 	ldrb.w	r2, [r2, #125]	; 0x7d
 800c6d0:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800c6d2:	7afb      	ldrb	r3, [r7, #11]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	72fb      	strb	r3, [r7, #11]
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800c6de:	019b      	lsls	r3, r3, #6
 800c6e0:	b2da      	uxtb	r2, r3
                            ((ctx->cc.t5t.minorVersion  & 0x03U) << 4) |                                  /*        */
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800c6e8:	011b      	lsls	r3, r3, #4
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c6f0:	b2db      	uxtb	r3, r3
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	b2da      	uxtb	r2, r3
                            ((ctx->cc.t5t.readAccess    & 0x03U) << 2) |                                  /*        */
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	f003 030c 	and.w	r3, r3, #12
 800c704:	b2db      	uxtb	r3, r3
                            ((ctx->cc.t5t.minorVersion  & 0x03U) << 4) |                                  /*        */
 800c706:	4313      	orrs	r3, r2
 800c708:	b2d9      	uxtb	r1, r3
                            ((ctx->cc.t5t.writeAccess   & 0x03U) << 0));                                  /*        */
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c710:	f003 0303 	and.w	r3, r3, #3
 800c714:	b2da      	uxtb	r2, r3
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 800c716:	7afb      	ldrb	r3, [r7, #11]
 800c718:	68f8      	ldr	r0, [r7, #12]
 800c71a:	4403      	add	r3, r0
 800c71c:	430a      	orrs	r2, r1
 800c71e:	b2d2      	uxtb	r2, r2
 800c720:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800c722:	7afb      	ldrb	r3, [r7, #11]
 800c724:	3301      	adds	r3, #1
 800c726:	72fb      	strb	r3, [r7, #11]
    buf[dataIt] = (ctx->cc.t5t.ccLen == NDEF_T5T_CC_LEN_8_BYTES) ? 0U : (uint8_t)ctx->cc.t5t.memoryLen;   /* Byte 2 */
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c72e:	2b08      	cmp	r3, #8
 800c730:	d004      	beq.n	800c73c <ndefT5TWriteCC+0x9c>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c738:	b2d9      	uxtb	r1, r3
 800c73a:	e000      	b.n	800c73e <ndefT5TWriteCC+0x9e>
 800c73c:	2100      	movs	r1, #0
 800c73e:	7afb      	ldrb	r3, [r7, #11]
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	4413      	add	r3, r2
 800c744:	460a      	mov	r2, r1
 800c746:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800c748:	7afb      	ldrb	r3, [r7, #11]
 800c74a:	3301      	adds	r3, #1
 800c74c:	72fb      	strb	r3, [r7, #11]
    buf[dataIt]   = 0U;                                                                                   /* Byte 3 */
 800c74e:	7afb      	ldrb	r3, [r7, #11]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	4413      	add	r3, r2
 800c754:	2200      	movs	r2, #0
 800c756:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.multipleBlockRead ) { buf[dataIt] |= 0x01U; }                                         /* Byte 3  b0 MBREAD                */
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d00a      	beq.n	800c778 <ndefT5TWriteCC+0xd8>
 800c762:	7afb      	ldrb	r3, [r7, #11]
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	4413      	add	r3, r2
 800c768:	781a      	ldrb	r2, [r3, #0]
 800c76a:	7afb      	ldrb	r3, [r7, #11]
 800c76c:	68f9      	ldr	r1, [r7, #12]
 800c76e:	440b      	add	r3, r1
 800c770:	f042 0201 	orr.w	r2, r2, #1
 800c774:	b2d2      	uxtb	r2, r2
 800c776:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.mlenOverflow )      { buf[dataIt] |= 0x04U; }                                         /* Byte 3  b2 Android MLEN overflow */
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d00a      	beq.n	800c798 <ndefT5TWriteCC+0xf8>
 800c782:	7afb      	ldrb	r3, [r7, #11]
 800c784:	68fa      	ldr	r2, [r7, #12]
 800c786:	4413      	add	r3, r2
 800c788:	781a      	ldrb	r2, [r3, #0]
 800c78a:	7afb      	ldrb	r3, [r7, #11]
 800c78c:	68f9      	ldr	r1, [r7, #12]
 800c78e:	440b      	add	r3, r1
 800c790:	f042 0204 	orr.w	r2, r2, #4
 800c794:	b2d2      	uxtb	r2, r2
 800c796:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.lockBlock )         { buf[dataIt] |= 0x08U; }                                         /* Byte 3  b3 Lock Block            */
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00a      	beq.n	800c7b8 <ndefT5TWriteCC+0x118>
 800c7a2:	7afb      	ldrb	r3, [r7, #11]
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	781a      	ldrb	r2, [r3, #0]
 800c7aa:	7afb      	ldrb	r3, [r7, #11]
 800c7ac:	68f9      	ldr	r1, [r7, #12]
 800c7ae:	440b      	add	r3, r1
 800c7b0:	f042 0208 	orr.w	r2, r2, #8
 800c7b4:	b2d2      	uxtb	r2, r2
 800c7b6:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.specialFrame )      { buf[dataIt] |= 0x10U; }                                         /* Byte 3  b4 Special Frame         */
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00a      	beq.n	800c7d8 <ndefT5TWriteCC+0x138>
 800c7c2:	7afb      	ldrb	r3, [r7, #11]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	781a      	ldrb	r2, [r3, #0]
 800c7ca:	7afb      	ldrb	r3, [r7, #11]
 800c7cc:	68f9      	ldr	r1, [r7, #12]
 800c7ce:	440b      	add	r3, r1
 800c7d0:	f042 0210 	orr.w	r2, r2, #16
 800c7d4:	b2d2      	uxtb	r2, r2
 800c7d6:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800c7d8:	7afb      	ldrb	r3, [r7, #11]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	72fb      	strb	r3, [r7, #11]
    if( ctx->cc.t5t.ccLen == NDEF_T5T_CC_LEN_8_BYTES )
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c7e4:	2b08      	cmp	r3, #8
 800c7e6:	d127      	bne.n	800c838 <ndefT5TWriteCC+0x198>
    {
        buf[dataIt] = 0U;                                                                                 /* Byte 4 */
 800c7e8:	7afb      	ldrb	r3, [r7, #11]
 800c7ea:	68fa      	ldr	r2, [r7, #12]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800c7f2:	7afb      	ldrb	r3, [r7, #11]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = 0U;                                                                                 /* Byte 5 */
 800c7f8:	7afb      	ldrb	r3, [r7, #11]
 800c7fa:	68fa      	ldr	r2, [r7, #12]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	2200      	movs	r2, #0
 800c800:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800c802:	7afb      	ldrb	r3, [r7, #11]
 800c804:	3301      	adds	r3, #1
 800c806:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = (uint8_t)(ctx->cc.t5t.memoryLen >> 8);                                              /* Byte 6 */
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c80e:	0a1b      	lsrs	r3, r3, #8
 800c810:	b299      	uxth	r1, r3
 800c812:	7afb      	ldrb	r3, [r7, #11]
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	4413      	add	r3, r2
 800c818:	b2ca      	uxtb	r2, r1
 800c81a:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800c81c:	7afb      	ldrb	r3, [r7, #11]
 800c81e:	3301      	adds	r3, #1
 800c820:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = (uint8_t)(ctx->cc.t5t.memoryLen >> 0);                                              /* Byte 7 */
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800c828:	7afb      	ldrb	r3, [r7, #11]
 800c82a:	68fa      	ldr	r2, [r7, #12]
 800c82c:	4413      	add	r3, r2
 800c82e:	b2ca      	uxtb	r2, r1
 800c830:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800c832:	7afb      	ldrb	r3, [r7, #11]
 800c834:	3301      	adds	r3, #1
 800c836:	72fb      	strb	r3, [r7, #11]
    }

    ret = ndefT5TPollerWriteBytes(ctx, 0U, buf, ctx->cc.t5t.ccLen );
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c83e:	68fa      	ldr	r2, [r7, #12]
 800c840:	2100      	movs	r1, #0
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f7ff fd37 	bl	800c2b6 <ndefT5TPollerWriteBytes>
 800c848:	4603      	mov	r3, r0
 800c84a:	813b      	strh	r3, [r7, #8]
    return ret;
 800c84c:	893b      	ldrh	r3, [r7, #8]
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
	...

0800c858 <ndefT5TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT5TPollerTagFormat(ndefContext * ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b088      	sub	sp, #32
 800c85c:	af02      	add	r7, sp, #8
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	607a      	str	r2, [r7, #4]
    uint16_t                 rcvdLen;
    ReturnCode               result;
    static const uint8_t     emptyNDEF[] = { 0x03U, 0x00U, 0xFEU, 0x00U};

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d003      	beq.n	800c872 <ndefT5TPollerTagFormat+0x1a>
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	2b03      	cmp	r3, #3
 800c870:	d001      	beq.n	800c876 <ndefT5TPollerTagFormat+0x1e>
    {
        return ERR_PARAM;
 800c872:	2307      	movs	r3, #7
 800c874:	e103      	b.n	800ca7e <ndefT5TPollerTagFormat+0x226>
    }

    /* Reset previous potential info about NDEF messages */
    ctx->messageLen               = 0U;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2200      	movs	r2, #0
 800c87a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset            = 0U;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2200      	movs	r2, #0
 800c882:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->subCtx.t5t.TlvNDEFOffset = 0U;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2200      	movs	r2, #0
 800c88a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    if( cc != NULL )
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d011      	beq.n	800c8b8 <ndefT5TPollerTagFormat+0x60>
    {
        if( (cc->t5t.ccLen != NDEF_T5T_CC_LEN_8_BYTES) && (cc->t5t.ccLen != NDEF_T5T_CC_LEN_4_BYTES) )
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	2b08      	cmp	r3, #8
 800c89a:	d005      	beq.n	800c8a8 <ndefT5TPollerTagFormat+0x50>
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	2b04      	cmp	r3, #4
 800c8a2:	d001      	beq.n	800c8a8 <ndefT5TPollerTagFormat+0x50>
        {
            return ERR_PARAM;
 800c8a4:	2307      	movs	r3, #7
 800c8a6:	e0ea      	b.n	800ca7e <ndefT5TPollerTagFormat+0x226>
        }
        (void)ST_MEMCPY(&ctx->cc, cc, sizeof(ndefCapabilityContainer));
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	337c      	adds	r3, #124	; 0x7c
 800c8ac:	2214      	movs	r2, #20
 800c8ae:	68b9      	ldr	r1, [r7, #8]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f00c fa2d 	bl	8018d10 <memcpy>
 800c8b6:	e09b      	b.n	800c9f0 <ndefT5TPollerTagFormat+0x198>
    }
    else
    {
        /* Try to find the appropriate cc values */
        ctx->cc.t5t.magicNumber  = NDEF_T5T_CC_MAGIC_1_BYTE_ADDR_MODE; /* E1 */
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	22e1      	movs	r2, #225	; 0xe1
 800c8bc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        ctx->cc.t5t.majorVersion = 1U;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        ctx->cc.t5t.minorVersion = 0U;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        ctx->cc.t5t.readAccess   = 0U;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        ctx->cc.t5t.writeAccess  = 0U;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        ctx->cc.t5t.lockBlock    = false;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
        ctx->cc.t5t.specialFrame = false;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
        ctx->cc.t5t.memoryLen    = 0U;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        ctx->cc.t5t.mlenOverflow = false;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85

        result = ndefT5TPollerReadMultipleBlocks(ctx, 0U, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvdLen);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800c906:	f107 0314 	add.w	r3, r7, #20
 800c90a:	9301      	str	r3, [sp, #4]
 800c90c:	2323      	movs	r3, #35	; 0x23
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	4613      	mov	r3, r2
 800c912:	2200      	movs	r2, #0
 800c914:	2100      	movs	r1, #0
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f000 f9e7 	bl	800ccea <ndefT5TPollerReadMultipleBlocks>
 800c91c:	4603      	mov	r3, r0
 800c91e:	82fb      	strh	r3, [r7, #22]
        ctx->cc.t5t.multipleBlockRead = (result ==  ERR_NONE) ? true : false;
 800c920:	8afb      	ldrh	r3, [r7, #22]
 800c922:	2b00      	cmp	r3, #0
 800c924:	bf0c      	ite	eq
 800c926:	2301      	moveq	r3, #1
 800c928:	2300      	movne	r3, #0
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        /* Try to retrieve the tag's size using getSystemInfo and GetExtSystemInfo */

        if ( (ctx->subCtx.t5t.sysInfoSupported==true) && (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!=0U) )
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d056      	beq.n	800c9ea <ndefT5TPollerTagFormat+0x192>
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800c942:	089b      	lsrs	r3, r3, #2
 800c944:	b2db      	uxtb	r3, r3
 800c946:	f003 0301 	and.w	r3, r3, #1
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d04d      	beq.n	800c9ea <ndefT5TPollerTagFormat+0x192>
        {
            ctx->cc.t5t.memoryLen =  (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800c954:	461a      	mov	r2, r3
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800c95c:	fb02 f303 	mul.w	r3, r2, r3
 800c960:	08db      	lsrs	r3, r3, #3
 800c962:	b29a      	uxth	r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

            if( (options & NDEF_T5T_FORMAT_OPTION_NFC_FORUM) == NDEF_T5T_FORMAT_OPTION_NFC_FORUM ) /* NFC Forum format */
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f003 0301 	and.w	r3, r3, #1
 800c970:	2b00      	cmp	r3, #0
 800c972:	d016      	beq.n	800c9a2 <ndefT5TPollerTagFormat+0x14a>
            {
                if( ctx->cc.t5t.memoryLen >= NDEF_T5T_MAX_MLEN_1_BYTE_ENCODING )
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c97a:	2bff      	cmp	r3, #255	; 0xff
 800c97c:	d903      	bls.n	800c986 <ndefT5TPollerTagFormat+0x12e>
                {
                    ctx->cc.t5t.ccLen =  NDEF_T5T_CC_LEN_8_BYTES;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2208      	movs	r2, #8
 800c982:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                }
                if( ctx->cc.t5t.memoryLen > 0U )
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d019      	beq.n	800c9c4 <ndefT5TPollerTagFormat+0x16c>
                {
                    ctx->cc.t5t.memoryLen--; /* remove CC area from memory len */
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c996:	3b01      	subs	r3, #1
 800c998:	b29a      	uxth	r2, r3
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800c9a0:	e010      	b.n	800c9c4 <ndefT5TPollerTagFormat+0x16c>
                }
            }
            else /* Android format */
            {
                ctx->cc.t5t.ccLen = NDEF_T5T_CC_LEN_4_BYTES;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2204      	movs	r2, #4
 800c9a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                 if( ctx->cc.t5t.memoryLen >= NDEF_T5T_MAX_MLEN_1_BYTE_ENCODING )
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c9b0:	2bff      	cmp	r3, #255	; 0xff
 800c9b2:	d907      	bls.n	800c9c4 <ndefT5TPollerTagFormat+0x16c>
                {
                    ctx->cc.t5t.mlenOverflow = true;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                    ctx->cc.t5t.memoryLen    = 0xFFU;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	22ff      	movs	r2, #255	; 0xff
 800c9c0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                }
            }

            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800c9ca:	f083 0301 	eor.w	r3, r3, #1
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d00c      	beq.n	800c9ee <ndefT5TPollerTagFormat+0x196>
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800c9da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9de:	d906      	bls.n	800c9ee <ndefT5TPollerTagFormat+0x196>
            {
                ctx->cc.t5t.magicNumber = NDEF_T5T_CC_MAGIC_2_BYTE_ADDR_MODE; /* E2 */
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	22e2      	movs	r2, #226	; 0xe2
 800c9e4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 800c9e8:	e001      	b.n	800c9ee <ndefT5TPollerTagFormat+0x196>
            }
        }
        else
        {
            return ERR_REQUEST;
 800c9ea:	2305      	movs	r3, #5
 800c9ec:	e047      	b.n	800ca7e <ndefT5TPollerTagFormat+0x226>
            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 800c9ee:	bf00      	nop
        }
    }

    result = ndefT5TWriteCC(ctx);
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f7ff fe55 	bl	800c6a0 <ndefT5TWriteCC>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	82fb      	strh	r3, [r7, #22]
    if( result != ERR_NONE )
 800c9fa:	8afb      	ldrh	r3, [r7, #22]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d01e      	beq.n	800ca3e <ndefT5TPollerTagFormat+0x1e6>
    {
        /* If write fails, try to use special frame if not yet used */
        if( !ctx->cc.t5t.specialFrame )
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800ca06:	f083 0301 	eor.w	r3, r3, #1
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d014      	beq.n	800ca3a <ndefT5TPollerTagFormat+0x1e2>
        {
            platformDelay(20U); /* Wait to be sure that previous command has ended */
 800ca10:	2014      	movs	r0, #20
 800ca12:	f7f7 fc53 	bl	80042bc <HAL_Delay>
            ctx->cc.t5t.specialFrame = true; /* Add option flag */
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2201      	movs	r2, #1
 800ca1a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
            result = ndefT5TWriteCC(ctx);
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	f7ff fe3e 	bl	800c6a0 <ndefT5TWriteCC>
 800ca24:	4603      	mov	r3, r0
 800ca26:	82fb      	strh	r3, [r7, #22]
            if( result != ERR_NONE )
 800ca28:	8afb      	ldrh	r3, [r7, #22]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d007      	beq.n	800ca3e <ndefT5TPollerTagFormat+0x1e6>
            {
                ctx->cc.t5t.specialFrame = false; /* Add option flag */
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2200      	movs	r2, #0
 800ca32:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                return result;
 800ca36:	8afb      	ldrh	r3, [r7, #22]
 800ca38:	e021      	b.n	800ca7e <ndefT5TPollerTagFormat+0x226>
            }
        }
        else
        {
           return result;
 800ca3a:	8afb      	ldrh	r3, [r7, #22]
 800ca3c:	e01f      	b.n	800ca7e <ndefT5TPollerTagFormat+0x226>
        }
    }
    /* Update info about current NDEF */

    ctx->subCtx.t5t.TlvNDEFOffset = ctx->cc.t5t.ccLen;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ca44:	461a      	mov	r2, r3
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    result = ndefT5TPollerWriteBytes(ctx, ctx->subCtx.t5t.TlvNDEFOffset, emptyNDEF, sizeof(emptyNDEF) );
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800ca52:	2304      	movs	r3, #4
 800ca54:	4a0c      	ldr	r2, [pc, #48]	; (800ca88 <ndefT5TPollerTagFormat+0x230>)
 800ca56:	68f8      	ldr	r0, [r7, #12]
 800ca58:	f7ff fc2d 	bl	800c2b6 <ndefT5TPollerWriteBytes>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	82fb      	strh	r3, [r7, #22]
    if (result == ERR_NONE)
 800ca60:	8afb      	ldrh	r3, [r7, #22]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d10a      	bne.n	800ca7c <ndefT5TPollerTagFormat+0x224>
    {
        /* Update info about current NDEF */
        ctx->messageOffset = (uint32_t)ctx->cc.t5t.ccLen + 0x02U;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ca6c:	1c9a      	adds	r2, r3, #2
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        ctx->state         = NDEF_STATE_INITIALIZED;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return result;
 800ca7c:	8afb      	ldrh	r3, [r7, #22]
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3718      	adds	r7, #24
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	0801ae98 	.word	0x0801ae98

0800ca8c <ndefT5TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT5TPollerCheckPresence(ndefContext *ctx)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b086      	sub	sp, #24
 800ca90:	af02      	add	r7, sp, #8
 800ca92:	6078      	str	r0, [r7, #4]
    ReturnCode          ret;
    uint16_t            blockAddr;
    uint16_t            rcvLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d003      	beq.n	800caa2 <ndefT5TPollerCheckPresence+0x16>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	2b03      	cmp	r3, #3
 800caa0:	d001      	beq.n	800caa6 <ndefT5TPollerCheckPresence+0x1a>
    {
        return ERR_PARAM;
 800caa2:	2307      	movs	r3, #7
 800caa4:	e00f      	b.n	800cac6 <ndefT5TPollerCheckPresence+0x3a>
    }

    blockAddr = 0U;
 800caa6:	2300      	movs	r3, #0
 800caa8:	81fb      	strh	r3, [r7, #14]

    ret = ndefT5TPollerReadSingleBlock( ctx, blockAddr, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800cab0:	89f9      	ldrh	r1, [r7, #14]
 800cab2:	f107 030a 	add.w	r3, r7, #10
 800cab6:	9300      	str	r3, [sp, #0]
 800cab8:	2323      	movs	r3, #35	; 0x23
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 f96b 	bl	800cd96 <ndefT5TPollerReadSingleBlock>
 800cac0:	4603      	mov	r3, r0
 800cac2:	81bb      	strh	r3, [r7, #12]

    return ret;
 800cac4:	89bb      	ldrh	r3, [r7, #12]
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <ndefT5TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT5TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800cace:	b480      	push	{r7}
 800cad0:	b085      	sub	sp, #20
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	6039      	str	r1, [r7, #0]
    uint32_t            lLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <ndefT5TPollerCheckAvailableSpace+0x18>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	2b03      	cmp	r3, #3
 800cae4:	d001      	beq.n	800caea <ndefT5TPollerCheckAvailableSpace+0x1c>
    {
        return ERR_PARAM;
 800cae6:	2307      	movs	r3, #7
 800cae8:	e021      	b.n	800cb2e <ndefT5TPollerCheckAvailableSpace+0x60>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d101      	bne.n	800caf8 <ndefT5TPollerCheckAvailableSpace+0x2a>
    {
        return ERR_WRONG_STATE;
 800caf4:	2321      	movs	r3, #33	; 0x21
 800caf6:	e01a      	b.n	800cb2e <ndefT5TPollerCheckAvailableSpace+0x60>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T5T_TLV_L_3_BYTES_LEN : NDEF_T5T_TLV_L_1_BYTES_LEN;
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	2bfe      	cmp	r3, #254	; 0xfe
 800cafc:	d901      	bls.n	800cb02 <ndefT5TPollerCheckAvailableSpace+0x34>
 800cafe:	2303      	movs	r3, #3
 800cb00:	e000      	b.n	800cb04 <ndefT5TPollerCheckAvailableSpace+0x36>
 800cb02:	2301      	movs	r3, #1
 800cb04:	60fb      	str	r3, [r7, #12]

    if( (messageLen + ctx->subCtx.t5t.TlvNDEFOffset + NDEF_T5T_TLV_T_LEN + lLen) > (ctx->areaLen + ctx->cc.t5t.ccLen) )
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	441a      	add	r2, r3
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	4413      	add	r3, r2
 800cb14:	1c5a      	adds	r2, r3, #1
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cb1c:	6879      	ldr	r1, [r7, #4]
 800cb1e:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
 800cb22:	440b      	add	r3, r1
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d901      	bls.n	800cb2c <ndefT5TPollerCheckAvailableSpace+0x5e>
    {
        return ERR_NOMEM;
 800cb28:	2301      	movs	r3, #1
 800cb2a:	e000      	b.n	800cb2e <ndefT5TPollerCheckAvailableSpace+0x60>
    }
    return ERR_NONE;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3714      	adds	r7, #20
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bc80      	pop	{r7}
 800cb36:	4770      	bx	lr

0800cb38 <ndefT5TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d003      	beq.n	800cb50 <ndefT5TPollerBeginWriteMessage+0x18>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	2b03      	cmp	r3, #3
 800cb4e:	d001      	beq.n	800cb54 <ndefT5TPollerBeginWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800cb50:	2307      	movs	r3, #7
 800cb52:	e03b      	b.n	800cbcc <ndefT5TPollerBeginWriteMessage+0x94>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d006      	beq.n	800cb6c <ndefT5TPollerBeginWriteMessage+0x34>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	d001      	beq.n	800cb6c <ndefT5TPollerBeginWriteMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800cb68:	2321      	movs	r3, #33	; 0x21
 800cb6a:	e02f      	b.n	800cbcc <ndefT5TPollerBeginWriteMessage+0x94>
    }

    /* TS T5T v1.0 7.5.3.4: reset L-Field to 0 */
    ret = ndefT5TPollerWriteRawMessageLen(ctx, 0U);
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f7ff fcaf 	bl	800c4d2 <ndefT5TPollerWriteRawMessageLen>
 800cb74:	4603      	mov	r3, r0
 800cb76:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800cb78:	89fb      	ldrh	r3, [r7, #14]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d005      	beq.n	800cb8a <ndefT5TPollerBeginWriteMessage+0x52>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800cb86:	89fb      	ldrh	r3, [r7, #14]
 800cb88:	e020      	b.n	800cbcc <ndefT5TPollerBeginWriteMessage+0x94>
    }

    lLen                = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T5T_TLV_L_3_BYTES_LEN : NDEF_T5T_TLV_L_1_BYTES_LEN;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	2bfe      	cmp	r3, #254	; 0xfe
 800cb8e:	d901      	bls.n	800cb94 <ndefT5TPollerBeginWriteMessage+0x5c>
 800cb90:	2303      	movs	r3, #3
 800cb92:	e000      	b.n	800cb96 <ndefT5TPollerBeginWriteMessage+0x5e>
 800cb94:	2301      	movs	r3, #1
 800cb96:	60bb      	str	r3, [r7, #8]
    ctx->messageOffset  = ctx->subCtx.t5t.TlvNDEFOffset;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += NDEF_T5T_TLV_T_LEN; /* T Len */
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cbaa:	1c5a      	adds	r2, r3, #1
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += lLen;               /* L Len */
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	441a      	add	r2, r3
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->state          = NDEF_STATE_INITIALIZED;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <ndefT5TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d003      	beq.n	800cbec <ndefT5TPollerEndWriteMessage+0x18>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	2b03      	cmp	r3, #3
 800cbea:	d001      	beq.n	800cbf0 <ndefT5TPollerEndWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800cbec:	2307      	movs	r3, #7
 800cbee:	e025      	b.n	800cc3c <ndefT5TPollerEndWriteMessage+0x68>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d001      	beq.n	800cbfe <ndefT5TPollerEndWriteMessage+0x2a>
    {
        return ERR_WRONG_STATE;
 800cbfa:	2321      	movs	r3, #33	; 0x21
 800cbfc:	e01e      	b.n	800cc3c <ndefT5TPollerEndWriteMessage+0x68>
    }

    /* TS T5T v1.0 7.5.3.6 & 7.5.3.7: update L-Field and write Terminator TLV */
    ret = ndefT5TPollerWriteRawMessageLen(ctx, messageLen);
 800cbfe:	6839      	ldr	r1, [r7, #0]
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f7ff fc66 	bl	800c4d2 <ndefT5TPollerWriteRawMessageLen>
 800cc06:	4603      	mov	r3, r0
 800cc08:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800cc0a:	89fb      	ldrh	r3, [r7, #14]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d005      	beq.n	800cc1c <ndefT5TPollerEndWriteMessage+0x48>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2200      	movs	r2, #0
 800cc14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800cc18:	89fb      	ldrh	r3, [r7, #14]
 800cc1a:	e00f      	b.n	800cc3c <ndefT5TPollerEndWriteMessage+0x68>
    }
    ctx->messageLen = messageLen;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	683a      	ldr	r2, [r7, #0]
 800cc20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state      = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d101      	bne.n	800cc32 <ndefT5TPollerEndWriteMessage+0x5e>
 800cc2e:	2201      	movs	r2, #1
 800cc30:	e000      	b.n	800cc34 <ndefT5TPollerEndWriteMessage+0x60>
 800cc32:	2202      	movs	r2, #2
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800cc3a:	2300      	movs	r3, #0
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3710      	adds	r7, #16
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <ndefT5TPollerWriteSingleBlock>:

/*******************************************************************************/
static ReturnCode ndefT5TPollerWriteSingleBlock(ndefContext *ctx, uint16_t blockNum, const uint8_t* wrData)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b088      	sub	sp, #32
 800cc48:	af02      	add	r7, sp, #8
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	607a      	str	r2, [r7, #4]
 800cc50:	817b      	strh	r3, [r7, #10]
    ReturnCode                ret;
    uint8_t                   flags;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d003      	beq.n	800cc60 <ndefT5TPollerWriteSingleBlock+0x1c>
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	2b03      	cmp	r3, #3
 800cc5e:	d001      	beq.n	800cc64 <ndefT5TPollerWriteSingleBlock+0x20>
    {
        return ERR_PARAM;
 800cc60:	2307      	movs	r3, #7
 800cc62:	e03e      	b.n	800cce2 <ndefT5TPollerWriteSingleBlock+0x9e>
    }

    flags = ctx->cc.t5t.specialFrame ? ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT | (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION): (uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d001      	beq.n	800cc72 <ndefT5TPollerWriteSingleBlock+0x2e>
 800cc6e:	2342      	movs	r3, #66	; 0x42
 800cc70:	e000      	b.n	800cc74 <ndefT5TPollerWriteSingleBlock+0x30>
 800cc72:	2302      	movs	r3, #2
 800cc74:	757b      	strb	r3, [r7, #21]

    if( ctx->subCtx.t5t.legacySTHighDensity )
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00e      	beq.n	800cc9e <ndefT5TPollerWriteSingleBlock+0x5a>
    {
        ret = rfalST25xVPollerM24LRWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, blockNum, wrData, ctx->subCtx.t5t.blockLen);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800cc8c:	897a      	ldrh	r2, [r7, #10]
 800cc8e:	7d78      	ldrb	r0, [r7, #21]
 800cc90:	9300      	str	r3, [sp, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f00b fb78 	bl	8018388 <rfalST25xVPollerM24LRWriteSingleBlock>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	82fb      	strh	r3, [r7, #22]
 800cc9c:	e020      	b.n	800cce0 <ndefT5TPollerWriteSingleBlock+0x9c>
    }
    else
    {
        if( blockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 800cc9e:	897b      	ldrh	r3, [r7, #10]
 800cca0:	2bff      	cmp	r3, #255	; 0xff
 800cca2:	d80f      	bhi.n	800ccc4 <ndefT5TPollerWriteSingleBlock+0x80>
        {
            ret = rfalNfcvPollerWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, (uint8_t)blockNum, wrData, ctx->subCtx.t5t.blockLen);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ccaa:	897b      	ldrh	r3, [r7, #10]
 800ccac:	b2da      	uxtb	r2, r3
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800ccb4:	7d78      	ldrb	r0, [r7, #21]
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f007 ffb2 	bl	8014c22 <rfalNfcvPollerWriteSingleBlock>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	82fb      	strh	r3, [r7, #22]
 800ccc2:	e00d      	b.n	800cce0 <ndefT5TPollerWriteSingleBlock+0x9c>
        }
        else
        {
            ret = rfalNfcvPollerExtendedWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, blockNum, wrData, ctx->subCtx.t5t.blockLen);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800ccd0:	897a      	ldrh	r2, [r7, #10]
 800ccd2:	7d78      	ldrb	r0, [r7, #21]
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f008 f85d 	bl	8014d96 <rfalNfcvPollerExtendedWriteSingleBlock>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 800cce0:	8afb      	ldrh	r3, [r7, #22]
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3718      	adds	r7, #24
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <ndefT5TPollerReadMultipleBlocks>:

/*******************************************************************************/
static ReturnCode ndefT5TPollerReadMultipleBlocks(ndefContext *ctx, uint16_t firstBlockNum, uint8_t numOfBlocks, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen)
{
 800ccea:	b580      	push	{r7, lr}
 800ccec:	b08a      	sub	sp, #40	; 0x28
 800ccee:	af04      	add	r7, sp, #16
 800ccf0:	60f8      	str	r0, [r7, #12]
 800ccf2:	607b      	str	r3, [r7, #4]
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	817b      	strh	r3, [r7, #10]
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	727b      	strb	r3, [r7, #9]
    ReturnCode                ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d003      	beq.n	800cd0a <ndefT5TPollerReadMultipleBlocks+0x20>
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	2b03      	cmp	r3, #3
 800cd08:	d001      	beq.n	800cd0e <ndefT5TPollerReadMultipleBlocks+0x24>
    {
        return ERR_PARAM;
 800cd0a:	2307      	movs	r3, #7
 800cd0c:	e03f      	b.n	800cd8e <ndefT5TPollerReadMultipleBlocks+0xa4>
    }

    if( ctx->subCtx.t5t.legacySTHighDensity )
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d011      	beq.n	800cd3c <ndefT5TPollerReadMultipleBlocks+0x52>
    {

        ret = rfalST25xVPollerM24LRReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800cd1e:	7a78      	ldrb	r0, [r7, #9]
 800cd20:	897a      	ldrh	r2, [r7, #10]
 800cd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd24:	9302      	str	r3, [sp, #8]
 800cd26:	8c3b      	ldrh	r3, [r7, #32]
 800cd28:	9301      	str	r3, [sp, #4]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	9300      	str	r3, [sp, #0]
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2002      	movs	r0, #2
 800cd32:	f00b fb89 	bl	8018448 <rfalST25xVPollerM24LRReadMultipleBlocks>
 800cd36:	4603      	mov	r3, r0
 800cd38:	82fb      	strh	r3, [r7, #22]
 800cd3a:	e027      	b.n	800cd8c <ndefT5TPollerReadMultipleBlocks+0xa2>
    }
    else
    {
        if( firstBlockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 800cd3c:	897b      	ldrh	r3, [r7, #10]
 800cd3e:	2bff      	cmp	r3, #255	; 0xff
 800cd40:	d812      	bhi.n	800cd68 <ndefT5TPollerReadMultipleBlocks+0x7e>
        {
            ret = rfalNfcvPollerReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800cd48:	897b      	ldrh	r3, [r7, #10]
 800cd4a:	b2da      	uxtb	r2, r3
 800cd4c:	7a78      	ldrb	r0, [r7, #9]
 800cd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd50:	9302      	str	r3, [sp, #8]
 800cd52:	8c3b      	ldrh	r3, [r7, #32]
 800cd54:	9301      	str	r3, [sp, #4]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	9300      	str	r3, [sp, #0]
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2002      	movs	r0, #2
 800cd5e:	f007 ffaf 	bl	8014cc0 <rfalNfcvPollerReadMultipleBlocks>
 800cd62:	4603      	mov	r3, r0
 800cd64:	82fb      	strh	r3, [r7, #22]
 800cd66:	e011      	b.n	800cd8c <ndefT5TPollerReadMultipleBlocks+0xa2>
        }
        else
        {
            ret = rfalNfcvPollerExtendedReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800cd6e:	7a7b      	ldrb	r3, [r7, #9]
 800cd70:	b298      	uxth	r0, r3
 800cd72:	897a      	ldrh	r2, [r7, #10]
 800cd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd76:	9302      	str	r3, [sp, #8]
 800cd78:	8c3b      	ldrh	r3, [r7, #32]
 800cd7a:	9301      	str	r3, [sp, #4]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	4603      	mov	r3, r0
 800cd82:	2002      	movs	r0, #2
 800cd84:	f008 f861 	bl	8014e4a <rfalNfcvPollerExtendedReadMultipleBlocks>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 800cd8c:	8afb      	ldrh	r3, [r7, #22]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3718      	adds	r7, #24
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <ndefT5TPollerReadSingleBlock>:

#endif /* NDEF_FEATURE_ALL */

/*******************************************************************************/
static ReturnCode ndefT5TPollerReadSingleBlock(ndefContext *ctx, uint16_t blockNum, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b088      	sub	sp, #32
 800cd9a:	af02      	add	r7, sp, #8
 800cd9c:	60f8      	str	r0, [r7, #12]
 800cd9e:	607a      	str	r2, [r7, #4]
 800cda0:	461a      	mov	r2, r3
 800cda2:	460b      	mov	r3, r1
 800cda4:	817b      	strh	r3, [r7, #10]
 800cda6:	4613      	mov	r3, r2
 800cda8:	813b      	strh	r3, [r7, #8]
    ReturnCode                ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d003      	beq.n	800cdb8 <ndefT5TPollerReadSingleBlock+0x22>
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	2b03      	cmp	r3, #3
 800cdb6:	d001      	beq.n	800cdbc <ndefT5TPollerReadSingleBlock+0x26>
    {
        return ERR_PARAM;
 800cdb8:	2307      	movs	r3, #7
 800cdba:	e035      	b.n	800ce28 <ndefT5TPollerReadSingleBlock+0x92>
    }

    if( ctx->subCtx.t5t.legacySTHighDensity )
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d00e      	beq.n	800cde4 <ndefT5TPollerReadSingleBlock+0x4e>
    {

        ret = rfalST25xVPollerM24LRReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, blockNum, rxBuf, rxBufLen, rcvLen);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800cdcc:	897a      	ldrh	r2, [r7, #10]
 800cdce:	6a3b      	ldr	r3, [r7, #32]
 800cdd0:	9301      	str	r3, [sp, #4]
 800cdd2:	893b      	ldrh	r3, [r7, #8]
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2002      	movs	r0, #2
 800cdda:	f00b fa9c 	bl	8018316 <rfalST25xVPollerM24LRReadSingleBlock>
 800cdde:	4603      	mov	r3, r0
 800cde0:	82fb      	strh	r3, [r7, #22]
 800cde2:	e020      	b.n	800ce26 <ndefT5TPollerReadSingleBlock+0x90>
    }
    else
    {
        if( blockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 800cde4:	897b      	ldrh	r3, [r7, #10]
 800cde6:	2bff      	cmp	r3, #255	; 0xff
 800cde8:	d80f      	bhi.n	800ce0a <ndefT5TPollerReadSingleBlock+0x74>
        {
            ret = rfalNfcvPollerReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)blockNum, rxBuf, rxBufLen, rcvLen);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800cdf0:	897b      	ldrh	r3, [r7, #10]
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	6a3b      	ldr	r3, [r7, #32]
 800cdf6:	9301      	str	r3, [sp, #4]
 800cdf8:	893b      	ldrh	r3, [r7, #8]
 800cdfa:	9300      	str	r3, [sp, #0]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2002      	movs	r0, #2
 800ce00:	f007 feee 	bl	8014be0 <rfalNfcvPollerReadSingleBlock>
 800ce04:	4603      	mov	r3, r0
 800ce06:	82fb      	strh	r3, [r7, #22]
 800ce08:	e00d      	b.n	800ce26 <ndefT5TPollerReadSingleBlock+0x90>
        }
        else
        {
            ret = rfalNfcvPollerExtendedReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, blockNum, rxBuf, rxBufLen, rcvLen);
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ce10:	897a      	ldrh	r2, [r7, #10]
 800ce12:	6a3b      	ldr	r3, [r7, #32]
 800ce14:	9301      	str	r3, [sp, #4]
 800ce16:	893b      	ldrh	r3, [r7, #8]
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2002      	movs	r0, #2
 800ce1e:	f007 ff84 	bl	8014d2a <rfalNfcvPollerExtendedReadSingleBlock>
 800ce22:	4603      	mov	r3, r0
 800ce24:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 800ce26:	8afb      	ldrh	r3, [r7, #22]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3718      	adds	r7, #24
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <ndefT5TGetSystemInformation>:

/*******************************************************************************/
static ReturnCode ndefT5TGetSystemInformation(ndefContext *ctx, bool extended)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b08e      	sub	sp, #56	; 0x38
 800ce34:	af02      	add	r7, sp, #8
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	460b      	mov	r3, r1
 800ce3a:	70fb      	strb	r3, [r7, #3]
    ReturnCode                ret;
    uint8_t                   rxBuf[NDEF_T5T_SYSINFO_MAX_LEN];
    uint16_t                  rcvLen;
    uint8_t*                  resp;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d003      	beq.n	800ce4a <ndefT5TGetSystemInformation+0x1a>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	2b03      	cmp	r3, #3
 800ce48:	d001      	beq.n	800ce4e <ndefT5TGetSystemInformation+0x1e>
    {
        return ERR_PARAM;
 800ce4a:	2307      	movs	r3, #7
 800ce4c:	e0ff      	b.n	800d04e <ndefT5TGetSystemInformation+0x21e>
    }

    if( extended )
 800ce4e:	78fb      	ldrb	r3, [r7, #3]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d011      	beq.n	800ce78 <ndefT5TGetSystemInformation+0x48>
    {
        ret = rfalNfcvPollerExtendedGetSystemInformation((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)RFAL_NFCV_SYSINFO_REQ_ALL, rxBuf, (uint16_t)sizeof(rxBuf), &rcvLen);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ce5a:	f107 0210 	add.w	r2, r7, #16
 800ce5e:	f107 030e 	add.w	r3, r7, #14
 800ce62:	9301      	str	r3, [sp, #4]
 800ce64:	2316      	movs	r3, #22
 800ce66:	9300      	str	r3, [sp, #0]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	227f      	movs	r2, #127	; 0x7f
 800ce6c:	2002      	movs	r0, #2
 800ce6e:	f008 f858 	bl	8014f22 <rfalNfcvPollerExtendedGetSystemInformation>
 800ce72:	4603      	mov	r3, r0
 800ce74:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ce76:	e014      	b.n	800cea2 <ndefT5TGetSystemInformation+0x72>
    }
    else
    {
        ret = rfalNfcvPollerGetSystemInformation(ctx->subCtx.t5t.legacySTHighDensity ? ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT) : ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT), ctx->subCtx.t5t.pAddressedUid, rxBuf, (uint16_t)sizeof(rxBuf), &rcvLen);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d001      	beq.n	800ce86 <ndefT5TGetSystemInformation+0x56>
 800ce82:	200a      	movs	r0, #10
 800ce84:	e000      	b.n	800ce88 <ndefT5TGetSystemInformation+0x58>
 800ce86:	2002      	movs	r0, #2
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ce8e:	f107 0210 	add.w	r2, r7, #16
 800ce92:	f107 030e 	add.w	r3, r7, #14
 800ce96:	9300      	str	r3, [sp, #0]
 800ce98:	2316      	movs	r3, #22
 800ce9a:	f008 f823 	bl	8014ee4 <rfalNfcvPollerGetSystemInformation>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if( ret != ERR_NONE )
 800cea2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d001      	beq.n	800ceac <ndefT5TGetSystemInformation+0x7c>
    {
        return ret;
 800cea8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ceaa:	e0d0      	b.n	800d04e <ndefT5TGetSystemInformation+0x21e>
    }

    /* FIXME check buf rcvLen */
    resp = &rxBuf[0U];
 800ceac:	f107 0310 	add.w	r3, r7, #16
 800ceb0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* skip Flags */
    resp++;
 800ceb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* get Info flags */
    ctx->subCtx.t5t.sysInfo.infoFlags = *resp;
 800ceb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceba:	781a      	ldrb	r2, [r3, #0]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    resp++;
 800cec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec4:	3301      	adds	r3, #1
 800cec6:	62bb      	str	r3, [r7, #40]	; 0x28
    if( extended && (ndefT5TSysInfoLenValue(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 800cec8:	78fb      	ldrb	r3, [r7, #3]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00a      	beq.n	800cee4 <ndefT5TGetSystemInformation+0xb4>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800ced4:	09db      	lsrs	r3, r3, #7
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	f003 0301 	and.w	r3, r3, #1
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d001      	beq.n	800cee4 <ndefT5TGetSystemInformation+0xb4>
    {
        return ERR_PROTO;
 800cee0:	230b      	movs	r3, #11
 800cee2:	e0b4      	b.n	800d04e <ndefT5TGetSystemInformation+0x21e>
    }
    /* get UID */
    (void)ST_MEMCPY(ctx->subCtx.t5t.sysInfo.UID, resp, RFAL_NFCV_UID_LEN);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	33c0      	adds	r3, #192	; 0xc0
 800cee8:	2208      	movs	r2, #8
 800ceea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ceec:	4618      	mov	r0, r3
 800ceee:	f00b ff0f 	bl	8018d10 <memcpy>
    resp = &resp[RFAL_NFCV_UID_LEN];
 800cef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef4:	3308      	adds	r3, #8
 800cef6:	62bb      	str	r3, [r7, #40]	; 0x28
    if( ndefT5TSysInfoDFSIDPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800cefe:	f003 0301 	and.w	r3, r3, #1
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d007      	beq.n	800cf16 <ndefT5TGetSystemInformation+0xe6>
    {
        ctx->subCtx.t5t.sysInfo.DFSID = *resp;
 800cf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf08:	781a      	ldrb	r2, [r3, #0]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
        resp++;
 800cf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf12:	3301      	adds	r3, #1
 800cf14:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( ndefT5TSysInfoAFIPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800cf1c:	085b      	lsrs	r3, r3, #1
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	f003 0301 	and.w	r3, r3, #1
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d007      	beq.n	800cf38 <ndefT5TGetSystemInformation+0x108>
    {
        ctx->subCtx.t5t.sysInfo.AFI = *resp;
 800cf28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2a:	781a      	ldrb	r2, [r3, #0]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
        resp++;
 800cf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf34:	3301      	adds	r3, #1
 800cf36:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800cf3e:	089b      	lsrs	r3, r3, #2
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	f003 0301 	and.w	r3, r3, #1
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d043      	beq.n	800cfd2 <ndefT5TGetSystemInformation+0x1a2>
    {
        if ( ctx->subCtx.t5t.legacySTHighDensity || extended )
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d102      	bne.n	800cf5a <ndefT5TGetSystemInformation+0x12a>
 800cf54:	78fb      	ldrb	r3, [r7, #3]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d01a      	beq.n	800cf90 <ndefT5TGetSystemInformation+0x160>
        {
            /* LRIS64K/M24LR16/M24LR64 */
            ctx->subCtx.t5t.sysInfo.numberOfBlock =  *resp;
 800cf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	b29a      	uxth	r2, r3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 800cf66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf68:	3301      	adds	r3, #1
 800cf6a:	62bb      	str	r3, [r7, #40]	; 0x28
            ctx->subCtx.t5t.sysInfo.numberOfBlock |= (((uint16_t)*resp) << 8U);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800cf72:	b21a      	sxth	r2, r3
 800cf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	021b      	lsls	r3, r3, #8
 800cf7a:	b21b      	sxth	r3, r3
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	b21b      	sxth	r3, r3
 800cf80:	b29a      	uxth	r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 800cf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf8e:	e008      	b.n	800cfa2 <ndefT5TGetSystemInformation+0x172>
        }
        else
        {
            ctx->subCtx.t5t.sysInfo.numberOfBlock = *resp;
 800cf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 800cf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        ctx->subCtx.t5t.sysInfo.blockSize = *resp;
 800cfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa4:	781a      	ldrb	r2, [r3, #0]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
        resp++;
 800cfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfae:	3301      	adds	r3, #1
 800cfb0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Add 1 to get real values*/
        ctx->subCtx.t5t.sysInfo.numberOfBlock++;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800cfb8:	3301      	adds	r3, #1
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
        ctx->subCtx.t5t.sysInfo.blockSize++;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800cfc8:	3301      	adds	r3, #1
 800cfca:	b2da      	uxtb	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
    }
    if( ndefT5TSysInfoICRefPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800cfd8:	08db      	lsrs	r3, r3, #3
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	f003 0301 	and.w	r3, r3, #1
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d007      	beq.n	800cff4 <ndefT5TGetSystemInformation+0x1c4>
    {
        ctx->subCtx.t5t.sysInfo.ICRef = *resp;
 800cfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe6:	781a      	ldrb	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
        resp++;
 800cfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff0:	3301      	adds	r3, #1
 800cff2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( extended && (ndefT5TSysInfoCmdListPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 800cff4:	78fb      	ldrb	r3, [r7, #3]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d028      	beq.n	800d04c <ndefT5TGetSystemInformation+0x21c>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800d000:	095b      	lsrs	r3, r3, #5
 800d002:	b2db      	uxtb	r3, r3
 800d004:	f003 0301 	and.w	r3, r3, #1
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d01f      	beq.n	800d04c <ndefT5TGetSystemInformation+0x21c>
    {
        ctx->subCtx.t5t.sysInfo.supportedCmd[0U] = *resp;
 800d00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00e:	781a      	ldrb	r2, [r3, #0]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
        resp++;
 800d016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d018:	3301      	adds	r3, #1
 800d01a:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[1U] = *resp;
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	781a      	ldrb	r2, [r3, #0]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
        resp++;
 800d026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d028:	3301      	adds	r3, #1
 800d02a:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[2U] = *resp;
 800d02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02e:	781a      	ldrb	r2, [r3, #0]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
        resp++;
 800d036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d038:	3301      	adds	r3, #1
 800d03a:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[3U] = *resp;
 800d03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03e:	781a      	ldrb	r2, [r3, #0]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        resp++;
 800d046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d048:	3301      	adds	r3, #1
 800d04a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    return ERR_NONE;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3730      	adds	r7, #48	; 0x30
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
	...

0800d058 <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 800d058:	b480      	push	{r7}
 800d05a:	af00      	add	r7, sp, #0
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 800d05c:	4b06      	ldr	r3, [pc, #24]	; (800d078 <rfalAnalogConfigInitialize+0x20>)
 800d05e:	4a07      	ldr	r2, [pc, #28]	; (800d07c <rfalAnalogConfigInitialize+0x24>)
 800d060:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 800d062:	4b05      	ldr	r3, [pc, #20]	; (800d078 <rfalAnalogConfigInitialize+0x20>)
 800d064:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 800d068:	809a      	strh	r2, [r3, #4]
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800d06a:	4b03      	ldr	r3, [pc, #12]	; (800d078 <rfalAnalogConfigInitialize+0x20>)
 800d06c:	2201      	movs	r2, #1
 800d06e:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 800d070:	bf00      	nop
 800d072:	46bd      	mov	sp, r7
 800d074:	bc80      	pop	{r7}
 800d076:	4770      	bx	lr
 800d078:	200031d4 	.word	0x200031d4
 800d07c:	0801ae9c 	.word	0x0801ae9c

0800d080 <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	4603      	mov	r3, r0
 800d088:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 800d08a:	2300      	movs	r3, #0
 800d08c:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 800d08e:	2300      	movs	r3, #0
 800d090:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 800d092:	4b4b      	ldr	r3, [pc, #300]	; (800d1c0 <rfalSetAnalogConfig+0x140>)
 800d094:	799b      	ldrb	r3, [r3, #6]
 800d096:	f083 0301 	eor.w	r3, r3, #1
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d001      	beq.n	800d0a4 <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 800d0a0:	2305      	movs	r3, #5
 800d0a2:	e089      	b.n	800d1b8 <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800d0a4:	f107 020e 	add.w	r2, r7, #14
 800d0a8:	88fb      	ldrh	r3, [r7, #6]
 800d0aa:	4611      	mov	r1, r2
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f000 f889 	bl	800d1c4 <rfalAnalogConfigSearch>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800d0b6:	7d3b      	ldrb	r3, [r7, #20]
 800d0b8:	2bff      	cmp	r3, #255	; 0xff
 800d0ba:	d07b      	beq.n	800d1b4 <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 800d0bc:	4b40      	ldr	r3, [pc, #256]	; (800d1c0 <rfalSetAnalogConfig+0x140>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	89fb      	ldrh	r3, [r7, #14]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800d0c8:	7d3b      	ldrb	r3, [r7, #20]
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	b29a      	uxth	r2, r3
 800d0d0:	89fb      	ldrh	r3, [r7, #14]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 800d0d8:	4b39      	ldr	r3, [pc, #228]	; (800d1c0 <rfalSetAnalogConfig+0x140>)
 800d0da:	889b      	ldrh	r3, [r3, #4]
 800d0dc:	3301      	adds	r3, #1
 800d0de:	89fa      	ldrh	r2, [r7, #14]
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d201      	bcs.n	800d0e8 <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e067      	b.n	800d1b8 <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	757b      	strb	r3, [r7, #21]
 800d0ec:	e05d      	b.n	800d1aa <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 800d0ee:	7d7b      	ldrb	r3, [r7, #21]
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	693a      	ldr	r2, [r7, #16]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	021b      	lsls	r3, r3, #8
 800d0fa:	7d7a      	ldrb	r2, [r7, #21]
 800d0fc:	0092      	lsls	r2, r2, #2
 800d0fe:	6939      	ldr	r1, [r7, #16]
 800d100:	440a      	add	r2, r1
 800d102:	7852      	ldrb	r2, [r2, #1]
 800d104:	4313      	orrs	r3, r2
 800d106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d026      	beq.n	800d15c <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 800d10e:	7d7b      	ldrb	r3, [r7, #21]
 800d110:	009b      	lsls	r3, r3, #2
 800d112:	693a      	ldr	r2, [r7, #16]
 800d114:	4413      	add	r3, r2
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	021b      	lsls	r3, r3, #8
 800d11a:	b21a      	sxth	r2, r3
 800d11c:	7d7b      	ldrb	r3, [r7, #21]
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	6939      	ldr	r1, [r7, #16]
 800d122:	440b      	add	r3, r1
 800d124:	785b      	ldrb	r3, [r3, #1]
 800d126:	b21b      	sxth	r3, r3
 800d128:	4313      	orrs	r3, r2
 800d12a:	b21b      	sxth	r3, r3
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d132:	b298      	uxth	r0, r3
 800d134:	7d7b      	ldrb	r3, [r7, #21]
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	693a      	ldr	r2, [r7, #16]
 800d13a:	4413      	add	r3, r2
 800d13c:	7899      	ldrb	r1, [r3, #2]
 800d13e:	7d7b      	ldrb	r3, [r7, #21]
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	693a      	ldr	r2, [r7, #16]
 800d144:	4413      	add	r3, r2
 800d146:	78db      	ldrb	r3, [r3, #3]
 800d148:	461a      	mov	r2, r3
 800d14a:	f00a fed6 	bl	8017efa <rfalChipChangeTestRegBits>
 800d14e:	4603      	mov	r3, r0
 800d150:	82fb      	strh	r3, [r7, #22]
 800d152:	8afb      	ldrh	r3, [r7, #22]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d025      	beq.n	800d1a4 <rfalSetAnalogConfig+0x124>
 800d158:	8afb      	ldrh	r3, [r7, #22]
 800d15a:	e02d      	b.n	800d1b8 <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 800d15c:	7d7b      	ldrb	r3, [r7, #21]
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	693a      	ldr	r2, [r7, #16]
 800d162:	4413      	add	r3, r2
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	021b      	lsls	r3, r3, #8
 800d168:	b21a      	sxth	r2, r3
 800d16a:	7d7b      	ldrb	r3, [r7, #21]
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	6939      	ldr	r1, [r7, #16]
 800d170:	440b      	add	r3, r1
 800d172:	785b      	ldrb	r3, [r3, #1]
 800d174:	b21b      	sxth	r3, r3
 800d176:	4313      	orrs	r3, r2
 800d178:	b21b      	sxth	r3, r3
 800d17a:	b298      	uxth	r0, r3
 800d17c:	7d7b      	ldrb	r3, [r7, #21]
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	693a      	ldr	r2, [r7, #16]
 800d182:	4413      	add	r3, r2
 800d184:	7899      	ldrb	r1, [r3, #2]
 800d186:	7d7b      	ldrb	r3, [r7, #21]
 800d188:	009b      	lsls	r3, r3, #2
 800d18a:	693a      	ldr	r2, [r7, #16]
 800d18c:	4413      	add	r3, r2
 800d18e:	78db      	ldrb	r3, [r3, #3]
 800d190:	461a      	mov	r2, r3
 800d192:	f00a fe9d 	bl	8017ed0 <rfalChipChangeRegBits>
 800d196:	4603      	mov	r3, r0
 800d198:	82fb      	strh	r3, [r7, #22]
 800d19a:	8afb      	ldrh	r3, [r7, #22]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <rfalSetAnalogConfig+0x124>
 800d1a0:	8afb      	ldrh	r3, [r7, #22]
 800d1a2:	e009      	b.n	800d1b8 <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 800d1a4:	7d7b      	ldrb	r3, [r7, #21]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	757b      	strb	r3, [r7, #21]
 800d1aa:	7d7a      	ldrb	r2, [r7, #21]
 800d1ac:	7d3b      	ldrb	r3, [r7, #20]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d39d      	bcc.n	800d0ee <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800d1b2:	e777      	b.n	800d0a4 <rfalSetAnalogConfig+0x24>
            break;
 800d1b4:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 800d1b6:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3718      	adds	r7, #24
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	200031d4 	.word	0x200031d4

0800d1c4 <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b089      	sub	sp, #36	; 0x24
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	6039      	str	r1, [r7, #0]
 800d1ce:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 800d1d0:	4b2c      	ldr	r3, [pc, #176]	; (800d284 <rfalAnalogConfigSearch+0xc0>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	61bb      	str	r3, [r7, #24]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 800d1d6:	88fb      	ldrh	r3, [r7, #6]
 800d1d8:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800d1dc:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00a      	beq.n	800d1f8 <rfalAnalogConfigSearch+0x34>
 800d1e2:	88fb      	ldrh	r3, [r7, #6]
 800d1e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1f0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800d1f4:	b29a      	uxth	r2, r3
 800d1f6:	e001      	b.n	800d1fc <rfalAnalogConfigSearch+0x38>
 800d1f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1fc:	88fb      	ldrh	r3, [r7, #6]
 800d1fe:	f003 0303 	and.w	r3, r3, #3
 800d202:	b29b      	uxth	r3, r3
 800d204:	2b00      	cmp	r3, #0
 800d206:	d001      	beq.n	800d20c <rfalAnalogConfigSearch+0x48>
 800d208:	88fb      	ldrh	r3, [r7, #6]
 800d20a:	e000      	b.n	800d20e <rfalAnalogConfigSearch+0x4a>
 800d20c:	2303      	movs	r3, #3
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 800d20e:	4313      	orrs	r3, r2
 800d210:	82fb      	strh	r3, [r7, #22]
                       );
    
    i = *configOffset;
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	881b      	ldrh	r3, [r3, #0]
 800d216:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800d218:	e029      	b.n	800d26e <rfalAnalogConfigSearch+0xaa>
    {
        configTbl = &currentConfigTbl[i];
 800d21a:	8bfb      	ldrh	r3, [r7, #30]
 800d21c:	69ba      	ldr	r2, [r7, #24]
 800d21e:	4413      	add	r3, r2
 800d220:	613b      	str	r3, [r7, #16]
        foundConfigId = GETU16(configTbl);
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	021b      	lsls	r3, r3, #8
 800d228:	b21a      	sxth	r2, r3
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	3301      	adds	r3, #1
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	b21b      	sxth	r3, r3
 800d232:	4313      	orrs	r3, r2
 800d234:	b21b      	sxth	r3, r3
 800d236:	81fb      	strh	r3, [r7, #14]
        if (configId == (foundConfigId & configIdMaskVal))
 800d238:	89fa      	ldrh	r2, [r7, #14]
 800d23a:	8afb      	ldrh	r3, [r7, #22]
 800d23c:	4013      	ands	r3, r2
 800d23e:	b29b      	uxth	r3, r3
 800d240:	88fa      	ldrh	r2, [r7, #6]
 800d242:	429a      	cmp	r2, r3
 800d244:	d108      	bne.n	800d258 <rfalAnalogConfigSearch+0x94>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800d246:	8bfb      	ldrh	r3, [r7, #30]
 800d248:	3303      	adds	r3, #3
 800d24a:	b29a      	uxth	r2, r3
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	3302      	adds	r3, #2
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	e010      	b.n	800d27a <rfalAnalogConfigSearch+0xb6>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	3302      	adds	r3, #2
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	b29b      	uxth	r3, r3
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 800d264:	8bfb      	ldrh	r3, [r7, #30]
 800d266:	4413      	add	r3, r2
 800d268:	b29b      	uxth	r3, r3
 800d26a:	3303      	adds	r3, #3
 800d26c:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800d26e:	4b05      	ldr	r3, [pc, #20]	; (800d284 <rfalAnalogConfigSearch+0xc0>)
 800d270:	889b      	ldrh	r3, [r3, #4]
 800d272:	8bfa      	ldrh	r2, [r7, #30]
 800d274:	429a      	cmp	r2, r3
 800d276:	d3d0      	bcc.n	800d21a <rfalAnalogConfigSearch+0x56>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 800d278:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 800d27a:	4618      	mov	r0, r3
 800d27c:	3724      	adds	r7, #36	; 0x24
 800d27e:	46bd      	mov	sp, r7
 800d280:	bc80      	pop	{r7}
 800d282:	4770      	bx	lr
 800d284:	200031d4 	.word	0x200031d4

0800d288 <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	4603      	mov	r3, r0
 800d290:	6039      	str	r1, [r7, #0]
 800d292:	80fb      	strh	r3, [r7, #6]
 800d294:	4613      	mov	r3, r2
 800d296:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 800d298:	88fb      	ldrh	r3, [r7, #6]
 800d29a:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 800d29c:	2300      	movs	r3, #0
 800d29e:	81bb      	strh	r3, [r7, #12]
 800d2a0:	e00d      	b.n	800d2be <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 800d2a2:	89bb      	ldrh	r3, [r7, #12]
 800d2a4:	683a      	ldr	r2, [r7, #0]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	781a      	ldrb	r2, [r3, #0]
 800d2aa:	89fb      	ldrh	r3, [r7, #14]
 800d2ac:	4611      	mov	r1, r2
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f000 f80e 	bl	800d2d0 <rfalCrcUpdateCcitt>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 800d2b8:	89bb      	ldrh	r3, [r7, #12]
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	81bb      	strh	r3, [r7, #12]
 800d2be:	89ba      	ldrh	r2, [r7, #12]
 800d2c0:	88bb      	ldrh	r3, [r7, #4]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d3ed      	bcc.n	800d2a2 <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 800d2c6:	89fb      	ldrh	r3, [r7, #14]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3710      	adds	r7, #16
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b085      	sub	sp, #20
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	460a      	mov	r2, r1
 800d2da:	80fb      	strh	r3, [r7, #6]
 800d2dc:	4613      	mov	r3, r2
 800d2de:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 800d2e0:	88fb      	ldrh	r3, [r7, #6]
 800d2e2:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 800d2e4:	797b      	ldrb	r3, [r7, #5]
 800d2e6:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 800d2e8:	89fb      	ldrh	r3, [r7, #14]
 800d2ea:	b2da      	uxtb	r2, r3
 800d2ec:	7b7b      	ldrb	r3, [r7, #13]
 800d2ee:	4053      	eors	r3, r2
 800d2f0:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 800d2f2:	7b7b      	ldrb	r3, [r7, #13]
 800d2f4:	011b      	lsls	r3, r3, #4
 800d2f6:	b25a      	sxtb	r2, r3
 800d2f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d2fc:	4053      	eors	r3, r2
 800d2fe:	b25b      	sxtb	r3, r3
 800d300:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 800d302:	89fb      	ldrh	r3, [r7, #14]
 800d304:	0a1b      	lsrs	r3, r3, #8
 800d306:	b29b      	uxth	r3, r3
 800d308:	b21a      	sxth	r2, r3
 800d30a:	7b7b      	ldrb	r3, [r7, #13]
 800d30c:	021b      	lsls	r3, r3, #8
 800d30e:	b21b      	sxth	r3, r3
 800d310:	4053      	eors	r3, r2
 800d312:	b21a      	sxth	r2, r3
 800d314:	7b7b      	ldrb	r3, [r7, #13]
 800d316:	00db      	lsls	r3, r3, #3
 800d318:	b21b      	sxth	r3, r3
 800d31a:	4053      	eors	r3, r2
 800d31c:	b21a      	sxth	r2, r3
 800d31e:	7b7b      	ldrb	r3, [r7, #13]
 800d320:	091b      	lsrs	r3, r3, #4
 800d322:	b2db      	uxtb	r3, r3
 800d324:	b21b      	sxth	r3, r3
 800d326:	4053      	eors	r3, r2
 800d328:	b21b      	sxth	r3, r3
 800d32a:	81fb      	strh	r3, [r7, #14]

    return crc;
 800d32c:	89fb      	ldrh	r3, [r7, #14]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3714      	adds	r7, #20
 800d332:	46bd      	mov	sp, r7
 800d334:	bc80      	pop	{r7}
 800d336:	4770      	bx	lr

0800d338 <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 800d342:	2208      	movs	r2, #8
 800d344:	6879      	ldr	r1, [r7, #4]
 800d346:	480d      	ldr	r0, [pc, #52]	; (800d37c <iso15693PhyConfigure+0x44>)
 800d348:	f00b fce2 	bl	8018d10 <memcpy>
    
    if ( config->speedMode <= 3U)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	2b03      	cmp	r3, #3
 800d352:	d808      	bhi.n	800d366 <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	f1c3 0303 	rsb	r3, r3, #3
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	4b07      	ldr	r3, [pc, #28]	; (800d380 <iso15693PhyConfigure+0x48>)
 800d362:	70da      	strb	r2, [r3, #3]
 800d364:	e002      	b.n	800d36c <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 800d366:	4b06      	ldr	r3, [pc, #24]	; (800d380 <iso15693PhyConfigure+0x48>)
 800d368:	2203      	movs	r2, #3
 800d36a:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	4a04      	ldr	r2, [pc, #16]	; (800d380 <iso15693PhyConfigure+0x48>)
 800d370:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 800d372:	2300      	movs	r3, #0
}
 800d374:	4618      	mov	r0, r3
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	200031dc 	.word	0x200031dc
 800d380:	2000010c 	.word	0x2000010c

0800d384 <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 800d384:	b590      	push	{r4, r7, lr}
 800d386:	b08b      	sub	sp, #44	; 0x2c
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	4608      	mov	r0, r1
 800d38e:	4611      	mov	r1, r2
 800d390:	461a      	mov	r2, r3
 800d392:	4603      	mov	r3, r0
 800d394:	807b      	strh	r3, [r7, #2]
 800d396:	460b      	mov	r3, r1
 800d398:	707b      	strb	r3, [r7, #1]
 800d39a:	4613      	mov	r3, r2
 800d39c:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 800d3a6:	787b      	ldrb	r3, [r7, #1]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d001      	beq.n	800d3b0 <iso15693VCDCode+0x2c>
 800d3ac:	2302      	movs	r3, #2
 800d3ae:	e000      	b.n	800d3b2 <iso15693VCDCode+0x2e>
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 800d3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 800d3ba:	4b93      	ldr	r3, [pc, #588]	; (800d608 <iso15693VCDCode+0x284>)
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d117      	bne.n	800d3f2 <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 800d3c2:	2321      	movs	r3, #33	; 0x21
 800d3c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 800d3c8:	2304      	movs	r3, #4
 800d3ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 800d3ce:	4b8f      	ldr	r3, [pc, #572]	; (800d60c <iso15693VCDCode+0x288>)
 800d3d0:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 800d3d2:	887a      	ldrh	r2, [r7, #2]
 800d3d4:	7d7b      	ldrb	r3, [r7, #21]
 800d3d6:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	3302      	adds	r3, #2
 800d3e0:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800d3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3e4:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 800d3e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d3ea:	2b04      	cmp	r3, #4
 800d3ec:	d823      	bhi.n	800d436 <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e138      	b.n	800d664 <iso15693VCDCode+0x2e0>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 800d3f2:	2381      	movs	r3, #129	; 0x81
 800d3f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 800d3f8:	2304      	movs	r3, #4
 800d3fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 800d3fe:	4b84      	ldr	r3, [pc, #528]	; (800d610 <iso15693VCDCode+0x28c>)
 800d400:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 800d402:	887a      	ldrh	r2, [r7, #2]
 800d404:	7d7b      	ldrb	r3, [r7, #21]
 800d406:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800d408:	b29b      	uxth	r3, r3
 800d40a:	019b      	lsls	r3, r3, #6
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	3302      	adds	r3, #2
 800d410:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800d412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d414:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 800d416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d418:	881b      	ldrh	r3, [r3, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d005      	beq.n	800d42a <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 800d41e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d422:	2b3f      	cmp	r3, #63	; 0x3f
 800d424:	d807      	bhi.n	800d436 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800d426:	2301      	movs	r3, #1
 800d428:	e11c      	b.n	800d664 <iso15693VCDCode+0x2e0>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 800d42a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d42e:	2b40      	cmp	r3, #64	; 0x40
 800d430:	d801      	bhi.n	800d436 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800d432:	2301      	movs	r3, #1
 800d434:	e116      	b.n	800d664 <iso15693VCDCode+0x2e0>
            }
        }
    }

    if (length == 0U)
 800d436:	887b      	ldrh	r3, [r7, #2]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d102      	bne.n	800d442 <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 800d43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d43e:	2201      	movs	r2, #1
 800d440:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 800d442:	887b      	ldrh	r3, [r7, #2]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d01b      	beq.n	800d480 <iso15693VCDCode+0xfc>
 800d448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d44a:	881b      	ldrh	r3, [r3, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d117      	bne.n	800d480 <iso15693VCDCode+0xfc>
 800d450:	783b      	ldrb	r3, [r7, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d014      	beq.n	800d480 <iso15693VCDCode+0xfc>
 800d456:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d45a:	f083 0301 	eor.w	r3, r3, #1
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00d      	beq.n	800d480 <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	f043 0302 	orr.w	r3, r3, #2
 800d46c:	b2da      	uxtb	r2, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	f023 0301 	bic.w	r3, r3, #1
 800d47a:	b2da      	uxtb	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 800d480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d482:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 800d484:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d488:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 800d48a:	887b      	ldrh	r3, [r7, #2]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d03b      	beq.n	800d508 <iso15693VCDCode+0x184>
 800d490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d492:	881b      	ldrh	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d137      	bne.n	800d508 <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800d49e:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800d4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4a2:	881b      	ldrh	r3, [r3, #0]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4aa:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800d4ac:	8afb      	ldrh	r3, [r7, #22]
 800d4ae:	3b01      	subs	r3, #1
 800d4b0:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 800d4b8:	e026      	b.n	800d508 <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 800d4ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4bc:	881b      	ldrh	r3, [r3, #0]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	4413      	add	r3, r2
 800d4c4:	7818      	ldrb	r0, [r3, #0]
 800d4c6:	f107 030e 	add.w	r3, r7, #14
 800d4ca:	8afa      	ldrh	r2, [r7, #22]
 800d4cc:	69fc      	ldr	r4, [r7, #28]
 800d4ce:	69b9      	ldr	r1, [r7, #24]
 800d4d0:	47a0      	blx	r4
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800d4d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4d8:	881a      	ldrh	r2, [r3, #0]
 800d4da:	89fb      	ldrh	r3, [r7, #14]
 800d4dc:	4413      	add	r3, r2
 800d4de:	b29a      	uxth	r2, r3
 800d4e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4e2:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800d4e4:	89fb      	ldrh	r3, [r7, #14]
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	69bb      	ldr	r3, [r7, #24]
 800d4ea:	4413      	add	r3, r2
 800d4ec:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800d4ee:	89fb      	ldrh	r3, [r7, #14]
 800d4f0:	8afa      	ldrh	r2, [r7, #22]
 800d4f2:	1ad3      	subs	r3, r2, r3
 800d4f4:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800d4f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d105      	bne.n	800d508 <iso15693VCDCode+0x184>
            (*offset)++;
 800d4fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4fe:	881b      	ldrh	r3, [r3, #0]
 800d500:	3301      	adds	r3, #1
 800d502:	b29a      	uxth	r2, r3
 800d504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d506:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 800d508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d50a:	881b      	ldrh	r3, [r3, #0]
 800d50c:	887a      	ldrh	r2, [r7, #2]
 800d50e:	429a      	cmp	r2, r3
 800d510:	d902      	bls.n	800d518 <iso15693VCDCode+0x194>
 800d512:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d514:	2b00      	cmp	r3, #0
 800d516:	d0d0      	beq.n	800d4ba <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 800d518:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d062      	beq.n	800d5e4 <iso15693VCDCode+0x260>
        return ERR_AGAIN;
 800d51e:	230d      	movs	r3, #13
 800d520:	e0a0      	b.n	800d664 <iso15693VCDCode+0x2e0>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 800d522:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d524:	2b00      	cmp	r3, #0
 800d526:	d12b      	bne.n	800d580 <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800d528:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d002      	beq.n	800d536 <iso15693VCDCode+0x1b2>
 800d530:	f24e 0012 	movw	r0, #57362	; 0xe012
 800d534:	e001      	b.n	800d53a <iso15693VCDCode+0x1b6>
 800d536:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d53a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d002      	beq.n	800d548 <iso15693VCDCode+0x1c4>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	3301      	adds	r3, #1
 800d546:	e000      	b.n	800d54a <iso15693VCDCode+0x1c6>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d54e:	2a00      	cmp	r2, #0
 800d550:	d003      	beq.n	800d55a <iso15693VCDCode+0x1d6>
 800d552:	887a      	ldrh	r2, [r7, #2]
 800d554:	3a01      	subs	r2, #1
 800d556:	b292      	uxth	r2, r2
 800d558:	e000      	b.n	800d55c <iso15693VCDCode+0x1d8>
 800d55a:	887a      	ldrh	r2, [r7, #2]
 800d55c:	4619      	mov	r1, r3
 800d55e:	f7ff fe93 	bl	800d288 <rfalCrcCalculateCcitt>
 800d562:	4603      	mov	r3, r0
 800d564:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800d566:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d56a:	f083 0301 	eor.w	r3, r3, #1
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	2b00      	cmp	r3, #0
 800d572:	d003      	beq.n	800d57c <iso15693VCDCode+0x1f8>
 800d574:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d576:	43db      	mvns	r3, r3
 800d578:	b29b      	uxth	r3, r3
 800d57a:	e000      	b.n	800d57e <iso15693VCDCode+0x1fa>
 800d57c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d57e:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800d580:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d582:	b2db      	uxtb	r3, r3
 800d584:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 800d586:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d588:	0a1b      	lsrs	r3, r3, #8
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800d590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d592:	881b      	ldrh	r3, [r3, #0]
 800d594:	461a      	mov	r2, r3
 800d596:	887b      	ldrh	r3, [r7, #2]
 800d598:	1ad3      	subs	r3, r2, r3
 800d59a:	3328      	adds	r3, #40	; 0x28
 800d59c:	443b      	add	r3, r7
 800d59e:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 800d5a2:	f107 030c 	add.w	r3, r7, #12
 800d5a6:	8afa      	ldrh	r2, [r7, #22]
 800d5a8:	69fc      	ldr	r4, [r7, #28]
 800d5aa:	69b9      	ldr	r1, [r7, #24]
 800d5ac:	47a0      	blx	r4
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800d5b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5b4:	881a      	ldrh	r2, [r3, #0]
 800d5b6:	89bb      	ldrh	r3, [r7, #12]
 800d5b8:	4413      	add	r3, r2
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5be:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800d5c0:	89bb      	ldrh	r3, [r7, #12]
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800d5ca:	89bb      	ldrh	r3, [r7, #12]
 800d5cc:	8afa      	ldrh	r2, [r7, #22]
 800d5ce:	1ad3      	subs	r3, r2, r3
 800d5d0:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800d5d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d105      	bne.n	800d5e4 <iso15693VCDCode+0x260>
            (*offset)++;
 800d5d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5da:	881b      	ldrh	r3, [r3, #0]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	b29a      	uxth	r2, r3
 800d5e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5e2:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800d5e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d109      	bne.n	800d5fe <iso15693VCDCode+0x27a>
 800d5ea:	787b      	ldrb	r3, [r7, #1]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d006      	beq.n	800d5fe <iso15693VCDCode+0x27a>
 800d5f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5f2:	881b      	ldrh	r3, [r3, #0]
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	887b      	ldrh	r3, [r7, #2]
 800d5f8:	3302      	adds	r3, #2
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d391      	bcc.n	800d522 <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 800d5fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d600:	2b00      	cmp	r3, #0
 800d602:	d007      	beq.n	800d614 <iso15693VCDCode+0x290>
        return ERR_AGAIN;
 800d604:	230d      	movs	r3, #13
 800d606:	e02d      	b.n	800d664 <iso15693VCDCode+0x2e0>
 800d608:	200031dc 	.word	0x200031dc
 800d60c:	0800d8a9 	.word	0x0800d8a9
 800d610:	0800d951 	.word	0x0800d951
    }

    if ((!sendCrc && (*offset == length))
 800d614:	787b      	ldrb	r3, [r7, #1]
 800d616:	f083 0301 	eor.w	r3, r3, #1
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d004      	beq.n	800d62a <iso15693VCDCode+0x2a6>
 800d620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d622:	881b      	ldrh	r3, [r3, #0]
 800d624:	887a      	ldrh	r2, [r7, #2]
 800d626:	429a      	cmp	r2, r3
 800d628:	d009      	beq.n	800d63e <iso15693VCDCode+0x2ba>
            || (sendCrc && (*offset == (length + 2U))))
 800d62a:	787b      	ldrb	r3, [r7, #1]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d018      	beq.n	800d662 <iso15693VCDCode+0x2de>
 800d630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d632:	881b      	ldrh	r3, [r3, #0]
 800d634:	461a      	mov	r2, r3
 800d636:	887b      	ldrh	r3, [r7, #2]
 800d638:	3302      	adds	r3, #2
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d111      	bne.n	800d662 <iso15693VCDCode+0x2de>
    {
        *outputBuf = eof; 
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800d644:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800d646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d648:	881b      	ldrh	r3, [r3, #0]
 800d64a:	3301      	adds	r3, #1
 800d64c:	b29a      	uxth	r2, r3
 800d64e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d650:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800d652:	8afb      	ldrh	r3, [r7, #22]
 800d654:	3b01      	subs	r3, #1
 800d656:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	3301      	adds	r3, #1
 800d65c:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 800d65e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d660:	e000      	b.n	800d664 <iso15693VCDCode+0x2e0>
        return ERR_AGAIN;
 800d662:	230d      	movs	r3, #13
}
 800d664:	4618      	mov	r0, r3
 800d666:	372c      	adds	r7, #44	; 0x2c
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd90      	pop	{r4, r7, pc}

0800d66c <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b088      	sub	sp, #32
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	607a      	str	r2, [r7, #4]
 800d676:	461a      	mov	r2, r3
 800d678:	460b      	mov	r3, r1
 800d67a:	817b      	strh	r3, [r7, #10]
 800d67c:	4613      	mov	r3, r2
 800d67e:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 800d680:	2300      	movs	r3, #0
 800d682:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 800d684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d686:	2200      	movs	r2, #0
 800d688:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 800d68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68c:	2200      	movs	r2, #0
 800d68e:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	f003 031f 	and.w	r3, r3, #31
 800d698:	2b17      	cmp	r3, #23
 800d69a:	d001      	beq.n	800d6a0 <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 800d69c:	2309      	movs	r3, #9
 800d69e:	e0ff      	b.n	800d8a0 <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 800d6a0:	893b      	ldrh	r3, [r7, #8]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d101      	bne.n	800d6aa <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	e0fa      	b.n	800d8a0 <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 800d6aa:	2305      	movs	r3, #5
 800d6ac:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 800d6b2:	893b      	ldrh	r3, [r7, #8]
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f00b fb51 	bl	8018d60 <memset>

    if (inBufLen == 0U)
 800d6be:	897b      	ldrh	r3, [r7, #10]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f040 808e 	bne.w	800d7e2 <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 800d6c6:	2315      	movs	r3, #21
 800d6c8:	e0ea      	b.n	800d8a0 <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800d6ce:	8bbb      	ldrh	r3, [r7, #28]
 800d6d0:	08db      	lsrs	r3, r3, #3
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	4413      	add	r3, r2
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	461a      	mov	r2, r3
 800d6de:	8bbb      	ldrh	r3, [r7, #28]
 800d6e0:	f003 0307 	and.w	r3, r3, #7
 800d6e4:	fa42 f303 	asr.w	r3, r2, r3
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	f003 0301 	and.w	r3, r3, #1
 800d6ee:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 800d6f0:	8bbb      	ldrh	r3, [r7, #28]
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	08db      	lsrs	r3, r3, #3
 800d6f6:	68fa      	ldr	r2, [r7, #12]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	8bbb      	ldrh	r3, [r7, #28]
 800d700:	3301      	adds	r3, #1
 800d702:	f003 0307 	and.w	r3, r3, #7
 800d706:	fa42 f303 	asr.w	r3, r2, r3
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	005b      	lsls	r3, r3, #1
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	f003 0302 	and.w	r3, r3, #2
 800d714:	b2da      	uxtb	r2, r3
 800d716:	7e3b      	ldrb	r3, [r7, #24]
 800d718:	4313      	orrs	r3, r2
 800d71a:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 800d71c:	7e3b      	ldrb	r3, [r7, #24]
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d102      	bne.n	800d728 <iso15693VICCDecode+0xbc>
        {
            bp++;
 800d722:	8b7b      	ldrh	r3, [r7, #26]
 800d724:	3301      	adds	r3, #1
 800d726:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 800d728:	7e3b      	ldrb	r3, [r7, #24]
 800d72a:	2b02      	cmp	r3, #2
 800d72c:	d119      	bne.n	800d762 <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 800d72e:	8b7b      	ldrh	r3, [r7, #26]
 800d730:	08db      	lsrs	r3, r3, #3
 800d732:	b29b      	uxth	r3, r3
 800d734:	461a      	mov	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	4413      	add	r3, r2
 800d73a:	7819      	ldrb	r1, [r3, #0]
 800d73c:	8b7b      	ldrh	r3, [r7, #26]
 800d73e:	f003 0307 	and.w	r3, r3, #7
 800d742:	2201      	movs	r2, #1
 800d744:	fa02 f303 	lsl.w	r3, r2, r3
 800d748:	b2da      	uxtb	r2, r3
 800d74a:	8b7b      	ldrh	r3, [r7, #26]
 800d74c:	08db      	lsrs	r3, r3, #3
 800d74e:	b29b      	uxth	r3, r3
 800d750:	4618      	mov	r0, r3
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	4403      	add	r3, r0
 800d756:	430a      	orrs	r2, r1
 800d758:	b2d2      	uxtb	r2, r2
 800d75a:	701a      	strb	r2, [r3, #0]
            bp++;
 800d75c:	8b7b      	ldrh	r3, [r7, #26]
 800d75e:	3301      	adds	r3, #1
 800d760:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 800d762:	8b7b      	ldrh	r3, [r7, #26]
 800d764:	f003 0307 	and.w	r3, r3, #7
 800d768:	b29b      	uxth	r3, r3
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d115      	bne.n	800d79a <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 800d76e:	8bbb      	ldrh	r3, [r7, #28]
 800d770:	08db      	lsrs	r3, r3, #3
 800d772:	b29b      	uxth	r3, r3
 800d774:	461a      	mov	r2, r3
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	4413      	add	r3, r2
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d780:	2ba0      	cmp	r3, #160	; 0xa0
 800d782:	d10a      	bne.n	800d79a <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 800d784:	8bbb      	ldrh	r3, [r7, #28]
 800d786:	08db      	lsrs	r3, r3, #3
 800d788:	b29b      	uxth	r3, r3
 800d78a:	3301      	adds	r3, #1
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	4413      	add	r3, r2
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	2b03      	cmp	r3, #3
 800d794:	d101      	bne.n	800d79a <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 800d796:	2301      	movs	r3, #1
 800d798:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 800d79a:	7e3b      	ldrb	r3, [r7, #24]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d002      	beq.n	800d7a6 <iso15693VICCDecode+0x13a>
 800d7a0:	7e3b      	ldrb	r3, [r7, #24]
 800d7a2:	2b03      	cmp	r3, #3
 800d7a4:	d10f      	bne.n	800d7c6 <iso15693VICCDecode+0x15a>
 800d7a6:	7e7b      	ldrb	r3, [r7, #25]
 800d7a8:	f083 0301 	eor.w	r3, r3, #1
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d009      	beq.n	800d7c6 <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 800d7b2:	8b7a      	ldrh	r2, [r7, #26]
 800d7b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d302      	bcc.n	800d7c0 <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 800d7ba:	231d      	movs	r3, #29
 800d7bc:	83fb      	strh	r3, [r7, #30]
 800d7be:	e002      	b.n	800d7c6 <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 800d7c0:	8b7b      	ldrh	r3, [r7, #26]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 800d7c6:	8b7a      	ldrh	r2, [r7, #26]
 800d7c8:	893b      	ldrh	r3, [r7, #8]
 800d7ca:	00db      	lsls	r3, r3, #3
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d20f      	bcs.n	800d7f0 <iso15693VICCDecode+0x184>
 800d7d0:	8bfb      	ldrh	r3, [r7, #30]
 800d7d2:	2b1d      	cmp	r3, #29
 800d7d4:	d00c      	beq.n	800d7f0 <iso15693VICCDecode+0x184>
 800d7d6:	7e7b      	ldrb	r3, [r7, #25]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d109      	bne.n	800d7f0 <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 800d7dc:	8bbb      	ldrh	r3, [r7, #28]
 800d7de:	3302      	adds	r3, #2
 800d7e0:	83bb      	strh	r3, [r7, #28]
 800d7e2:	8bba      	ldrh	r2, [r7, #28]
 800d7e4:	897b      	ldrh	r3, [r7, #10]
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	3b02      	subs	r3, #2
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	f4ff af6d 	bcc.w	800d6ca <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 800d7f0:	8b7b      	ldrh	r3, [r7, #26]
 800d7f2:	08db      	lsrs	r3, r3, #3
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f8:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 800d7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7fc:	8b7a      	ldrh	r2, [r7, #26]
 800d7fe:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 800d800:	8bfb      	ldrh	r3, [r7, #30]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d001      	beq.n	800d80a <iso15693VICCDecode+0x19e>
    {
        return err;
 800d806:	8bfb      	ldrh	r3, [r7, #30]
 800d808:	e04a      	b.n	800d8a0 <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 800d80a:	8b7b      	ldrh	r3, [r7, #26]
 800d80c:	f003 0307 	and.w	r3, r3, #7
 800d810:	b29b      	uxth	r3, r3
 800d812:	2b00      	cmp	r3, #0
 800d814:	d001      	beq.n	800d81a <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 800d816:	2315      	movs	r3, #21
 800d818:	e042      	b.n	800d8a0 <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 800d81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81c:	881b      	ldrh	r3, [r3, #0]
 800d81e:	2b02      	cmp	r3, #2
 800d820:	d93b      	bls.n	800d89a <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 800d822:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d826:	2b00      	cmp	r3, #0
 800d828:	d002      	beq.n	800d830 <iso15693VICCDecode+0x1c4>
 800d82a:	f24e 0012 	movw	r0, #57362	; 0xe012
 800d82e:	e001      	b.n	800d834 <iso15693VICCDecode+0x1c8>
 800d830:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d836:	881b      	ldrh	r3, [r3, #0]
 800d838:	3b02      	subs	r3, #2
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	461a      	mov	r2, r3
 800d83e:	6879      	ldr	r1, [r7, #4]
 800d840:	f7ff fd22 	bl	800d288 <rfalCrcCalculateCcitt>
 800d844:	4603      	mov	r3, r0
 800d846:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800d848:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d84c:	f083 0301 	eor.w	r3, r3, #1
 800d850:	b2db      	uxtb	r3, r3
 800d852:	2b00      	cmp	r3, #0
 800d854:	d003      	beq.n	800d85e <iso15693VICCDecode+0x1f2>
 800d856:	8afb      	ldrh	r3, [r7, #22]
 800d858:	43db      	mvns	r3, r3
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	e000      	b.n	800d860 <iso15693VICCDecode+0x1f4>
 800d85e:	8afb      	ldrh	r3, [r7, #22]
 800d860:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800d862:	8afb      	ldrh	r3, [r7, #22]
 800d864:	b2db      	uxtb	r3, r3
 800d866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d868:	8812      	ldrh	r2, [r2, #0]
 800d86a:	3a02      	subs	r2, #2
 800d86c:	6879      	ldr	r1, [r7, #4]
 800d86e:	440a      	add	r2, r1
 800d870:	7812      	ldrb	r2, [r2, #0]
 800d872:	4293      	cmp	r3, r2
 800d874:	d10e      	bne.n	800d894 <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 800d876:	8afb      	ldrh	r3, [r7, #22]
 800d878:	0a1b      	lsrs	r3, r3, #8
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d880:	8812      	ldrh	r2, [r2, #0]
 800d882:	3a01      	subs	r2, #1
 800d884:	6879      	ldr	r1, [r7, #4]
 800d886:	440a      	add	r2, r1
 800d888:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d102      	bne.n	800d894 <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 800d88e:	2300      	movs	r3, #0
 800d890:	83fb      	strh	r3, [r7, #30]
 800d892:	e004      	b.n	800d89e <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 800d894:	2315      	movs	r3, #21
 800d896:	83fb      	strh	r3, [r7, #30]
 800d898:	e001      	b.n	800d89e <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 800d89a:	2315      	movs	r3, #21
 800d89c:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 800d89e:	8bfb      	ldrh	r3, [r7, #30]
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3720      	adds	r7, #32
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b089      	sub	sp, #36	; 0x24
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60b9      	str	r1, [r7, #8]
 800d8b0:	607b      	str	r3, [r7, #4]
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	73fb      	strb	r3, [r7, #15]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 800d8c8:	89bb      	ldrh	r3, [r7, #12]
 800d8ca:	2b03      	cmp	r3, #3
 800d8cc:	d801      	bhi.n	800d8d2 <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e038      	b.n	800d944 <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
 800d8d4:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	83bb      	strh	r3, [r7, #28]
 800d8da:	e02f      	b.n	800d93c <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 800d8dc:	7ffb      	ldrb	r3, [r7, #31]
 800d8de:	f003 0303 	and.w	r3, r3, #3
 800d8e2:	2b03      	cmp	r3, #3
 800d8e4:	d81a      	bhi.n	800d91c <iso15693PhyVCDCode1Of4+0x74>
 800d8e6:	a201      	add	r2, pc, #4	; (adr r2, 800d8ec <iso15693PhyVCDCode1Of4+0x44>)
 800d8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ec:	0800d8fd 	.word	0x0800d8fd
 800d8f0:	0800d905 	.word	0x0800d905
 800d8f4:	0800d90d 	.word	0x0800d90d
 800d8f8:	0800d915 	.word	0x0800d915
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	2202      	movs	r2, #2
 800d900:	701a      	strb	r2, [r3, #0]
                break;
 800d902:	e00c      	b.n	800d91e <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	2208      	movs	r2, #8
 800d908:	701a      	strb	r2, [r3, #0]
                break;
 800d90a:	e008      	b.n	800d91e <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	2220      	movs	r2, #32
 800d910:	701a      	strb	r2, [r3, #0]
                break;
 800d912:	e004      	b.n	800d91e <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	2280      	movs	r2, #128	; 0x80
 800d918:	701a      	strb	r2, [r3, #0]
                break;
 800d91a:	e000      	b.n	800d91e <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 800d91c:	bf00      	nop
        }
        outbuf++;
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	3301      	adds	r3, #1
 800d922:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	881b      	ldrh	r3, [r3, #0]
 800d928:	3301      	adds	r3, #1
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 800d930:	7ffb      	ldrb	r3, [r7, #31]
 800d932:	089b      	lsrs	r3, r3, #2
 800d934:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800d936:	8bbb      	ldrh	r3, [r7, #28]
 800d938:	3301      	adds	r3, #1
 800d93a:	83bb      	strh	r3, [r7, #28]
 800d93c:	8bbb      	ldrh	r3, [r7, #28]
 800d93e:	2b03      	cmp	r3, #3
 800d940:	d9cc      	bls.n	800d8dc <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 800d942:	8afb      	ldrh	r3, [r7, #22]
}
 800d944:	4618      	mov	r0, r3
 800d946:	3724      	adds	r7, #36	; 0x24
 800d948:	46bd      	mov	sp, r7
 800d94a:	bc80      	pop	{r7}
 800d94c:	4770      	bx	lr
 800d94e:	bf00      	nop

0800d950 <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800d950:	b480      	push	{r7}
 800d952:	b089      	sub	sp, #36	; 0x24
 800d954:	af00      	add	r7, sp, #0
 800d956:	60b9      	str	r1, [r7, #8]
 800d958:	607b      	str	r3, [r7, #4]
 800d95a:	4603      	mov	r3, r0
 800d95c:	73fb      	strb	r3, [r7, #15]
 800d95e:	4613      	mov	r3, r2
 800d960:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800d962:	2300      	movs	r3, #0
 800d964:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 800d970:	89bb      	ldrh	r3, [r7, #12]
 800d972:	2b3f      	cmp	r3, #63	; 0x3f
 800d974:	d801      	bhi.n	800d97a <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 800d976:	2301      	movs	r3, #1
 800d978:	e039      	b.n	800d9ee <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 800d97a:	7bfb      	ldrb	r3, [r7, #15]
 800d97c:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800d97e:	2300      	movs	r3, #0
 800d980:	83bb      	strh	r3, [r7, #28]
 800d982:	e030      	b.n	800d9e6 <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 800d984:	7ffb      	ldrb	r3, [r7, #31]
 800d986:	2b03      	cmp	r3, #3
 800d988:	d81a      	bhi.n	800d9c0 <iso15693PhyVCDCode1Of256+0x70>
 800d98a:	a201      	add	r2, pc, #4	; (adr r2, 800d990 <iso15693PhyVCDCode1Of256+0x40>)
 800d98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d990:	0800d9a1 	.word	0x0800d9a1
 800d994:	0800d9a9 	.word	0x0800d9a9
 800d998:	0800d9b1 	.word	0x0800d9b1
 800d99c:	0800d9b9 	.word	0x0800d9b9
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	2202      	movs	r2, #2
 800d9a4:	701a      	strb	r2, [r3, #0]
                break;
 800d9a6:	e00f      	b.n	800d9c8 <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	2208      	movs	r2, #8
 800d9ac:	701a      	strb	r2, [r3, #0]
                break;
 800d9ae:	e00b      	b.n	800d9c8 <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 800d9b0:	69bb      	ldr	r3, [r7, #24]
 800d9b2:	2220      	movs	r2, #32
 800d9b4:	701a      	strb	r2, [r3, #0]
                break;
 800d9b6:	e007      	b.n	800d9c8 <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	2280      	movs	r2, #128	; 0x80
 800d9bc:	701a      	strb	r2, [r3, #0]
                break;
 800d9be:	e003      	b.n	800d9c8 <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 800d9c0:	69bb      	ldr	r3, [r7, #24]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	701a      	strb	r2, [r3, #0]
                break;               
 800d9c6:	bf00      	nop
        }
        outbuf++;
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	881b      	ldrh	r3, [r3, #0]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 800d9da:	7ffb      	ldrb	r3, [r7, #31]
 800d9dc:	3b04      	subs	r3, #4
 800d9de:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800d9e0:	8bbb      	ldrh	r3, [r7, #28]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	83bb      	strh	r3, [r7, #28]
 800d9e6:	8bbb      	ldrh	r3, [r7, #28]
 800d9e8:	2b3f      	cmp	r3, #63	; 0x3f
 800d9ea:	d9cb      	bls.n	800d984 <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 800d9ec:	8afb      	ldrh	r3, [r7, #22]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3724      	adds	r7, #36	; 0x24
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bc80      	pop	{r7}
 800d9f6:	4770      	bx	lr

0800d9f8 <isoDepClearCounters>:
 ******************************************************************************
 */

/*******************************************************************************/
static void isoDepClearCounters( void )
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	af00      	add	r7, sp, #0
    gIsoDep.cntIRetrys   = 0;
 800d9fc:	4b06      	ldr	r3, [pc, #24]	; (800da18 <isoDepClearCounters+0x20>)
 800d9fe:	2200      	movs	r2, #0
 800da00:	715a      	strb	r2, [r3, #5]
    gIsoDep.cntRRetrys   = 0;
 800da02:	4b05      	ldr	r3, [pc, #20]	; (800da18 <isoDepClearCounters+0x20>)
 800da04:	2200      	movs	r2, #0
 800da06:	719a      	strb	r2, [r3, #6]
    gIsoDep.cntSRetrys   = 0;
 800da08:	4b03      	ldr	r3, [pc, #12]	; (800da18 <isoDepClearCounters+0x20>)
 800da0a:	2200      	movs	r2, #0
 800da0c:	71da      	strb	r2, [r3, #7]
}
 800da0e:	bf00      	nop
 800da10:	46bd      	mov	sp, r7
 800da12:	bc80      	pop	{r7}
 800da14:	4770      	bx	lr
 800da16:	bf00      	nop
 800da18:	200031e4 	.word	0x200031e4

0800da1c <isoDepTx>:

/*******************************************************************************/
static ReturnCode isoDepTx( uint8_t pcb, const uint8_t* txBuf, uint8_t *infBuf, uint16_t infLen, uint32_t fwt )
{
 800da1c:	b590      	push	{r4, r7, lr}
 800da1e:	b08b      	sub	sp, #44	; 0x2c
 800da20:	af04      	add	r7, sp, #16
 800da22:	60b9      	str	r1, [r7, #8]
 800da24:	607a      	str	r2, [r7, #4]
 800da26:	461a      	mov	r2, r3
 800da28:	4603      	mov	r3, r0
 800da2a:	73fb      	strb	r3, [r7, #15]
 800da2c:	4613      	mov	r3, r2
 800da2e:	81bb      	strh	r3, [r7, #12]
    uint8_t    *txBlock;
    uint16_t   txBufLen;
    uint8_t    computedPcb;

    
    txBlock         = infBuf;                      /* Point to beginning of the INF, and go backwards     */
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	617b      	str	r3, [r7, #20]
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 800da34:	4a44      	ldr	r2, [pc, #272]	; (800db48 <isoDepTx+0x12c>)
 800da36:	7bfb      	ldrb	r3, [r7, #15]
 800da38:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    
    
    if ( infLen > 0U )
 800da3c:	89bb      	ldrh	r3, [r7, #12]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d009      	beq.n	800da56 <isoDepTx+0x3a>
    {
        if ( ((uint32_t)infBuf - (uint32_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	1ad3      	subs	r3, r2, r3
 800da48:	4a3f      	ldr	r2, [pc, #252]	; (800db48 <isoDepTx+0x12c>)
 800da4a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800da4e:	4293      	cmp	r3, r2
 800da50:	d201      	bcs.n	800da56 <isoDepTx+0x3a>
        {
            return ERR_NOMEM;
 800da52:	2301      	movs	r3, #1
 800da54:	e074      	b.n	800db40 <isoDepTx+0x124>
    }
    
    
    /*******************************************************************************/
    /* Compute optional PCB bits */
    computedPcb = pcb;
 800da56:	7bfb      	ldrb	r3, [r7, #15]
 800da58:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 800da5a:	4b3b      	ldr	r3, [pc, #236]	; (800db48 <isoDepTx+0x12c>)
 800da5c:	78db      	ldrb	r3, [r3, #3]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d108      	bne.n	800da74 <isoDepTx+0x58>
 800da62:	4b39      	ldr	r3, [pc, #228]	; (800db48 <isoDepTx+0x12c>)
 800da64:	78db      	ldrb	r3, [r3, #3]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d108      	bne.n	800da7c <isoDepTx+0x60>
 800da6a:	4b37      	ldr	r3, [pc, #220]	; (800db48 <isoDepTx+0x12c>)
 800da6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800da70:	2b00      	cmp	r3, #0
 800da72:	d003      	beq.n	800da7c <isoDepTx+0x60>
 800da74:	7cfb      	ldrb	r3, [r7, #19]
 800da76:	f043 0308 	orr.w	r3, r3, #8
 800da7a:	74fb      	strb	r3, [r7, #19]
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 800da7c:	4b32      	ldr	r3, [pc, #200]	; (800db48 <isoDepTx+0x12c>)
 800da7e:	791b      	ldrb	r3, [r3, #4]
 800da80:	2bff      	cmp	r3, #255	; 0xff
 800da82:	d003      	beq.n	800da8c <isoDepTx+0x70>
 800da84:	7cfb      	ldrb	r3, [r7, #19]
 800da86:	f043 0304 	orr.w	r3, r3, #4
 800da8a:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.isTxChaining) && (isoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 800da8c:	4b2e      	ldr	r3, [pc, #184]	; (800db48 <isoDepTx+0x12c>)
 800da8e:	7c9b      	ldrb	r3, [r3, #18]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d008      	beq.n	800daa6 <isoDepTx+0x8a>
 800da94:	7cfb      	ldrb	r3, [r7, #19]
 800da96:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	d103      	bne.n	800daa6 <isoDepTx+0x8a>
 800da9e:	7cfb      	ldrb	r3, [r7, #19]
 800daa0:	f043 0310 	orr.w	r3, r3, #16
 800daa4:	74fb      	strb	r3, [r7, #19]

    
    /*******************************************************************************/
    /* Compute Payload on the given txBuf, start by the PCB | DID | NAD | before INF */
    
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD) 
 800daa6:	4b28      	ldr	r3, [pc, #160]	; (800db48 <isoDepTx+0x12c>)
 800daa8:	791b      	ldrb	r3, [r3, #4]
 800daaa:	2bff      	cmp	r3, #255	; 0xff
 800daac:	d006      	beq.n	800dabc <isoDepTx+0xa0>
    {
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	3b01      	subs	r3, #1
 800dab2:	617b      	str	r3, [r7, #20]
 800dab4:	4b24      	ldr	r3, [pc, #144]	; (800db48 <isoDepTx+0x12c>)
 800dab6:	791a      	ldrb	r2, [r3, #4]
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	701a      	strb	r2, [r3, #0]
    }
    
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 800dabc:	4b22      	ldr	r3, [pc, #136]	; (800db48 <isoDepTx+0x12c>)
 800dabe:	78db      	ldrb	r3, [r3, #3]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d108      	bne.n	800dad6 <isoDepTx+0xba>
 800dac4:	4b20      	ldr	r3, [pc, #128]	; (800db48 <isoDepTx+0x12c>)
 800dac6:	78db      	ldrb	r3, [r3, #3]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10b      	bne.n	800dae4 <isoDepTx+0xc8>
 800dacc:	4b1e      	ldr	r3, [pc, #120]	; (800db48 <isoDepTx+0x12c>)
 800dace:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d006      	beq.n	800dae4 <isoDepTx+0xc8>
    {
        *(--txBlock)  = gIsoDep.did;               /* DID is optional */
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	3b01      	subs	r3, #1
 800dada:	617b      	str	r3, [r7, #20]
 800dadc:	4b1a      	ldr	r3, [pc, #104]	; (800db48 <isoDepTx+0x12c>)
 800dade:	78da      	ldrb	r2, [r3, #3]
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	701a      	strb	r2, [r3, #0]
    }
    
    *(--txBlock)      = computedPcb;               /* PCB always present */
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	3b01      	subs	r3, #1
 800dae8:	617b      	str	r3, [r7, #20]
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	7cfa      	ldrb	r2, [r7, #19]
 800daee:	701a      	strb	r2, [r3, #0]
    
    txBufLen = (infLen + (uint16_t)((uint32_t)infBuf - (uint32_t)txBlock)); /* Calculate overall buffer size */
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	1ad3      	subs	r3, r2, r3
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	89bb      	ldrh	r3, [r7, #12]
 800dafa:	4413      	add	r3, r2
 800dafc:	823b      	strh	r3, [r7, #16]
    
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 800dafe:	8a3a      	ldrh	r2, [r7, #16]
 800db00:	4b11      	ldr	r3, [pc, #68]	; (800db48 <isoDepTx+0x12c>)
 800db02:	8a1b      	ldrh	r3, [r3, #16]
 800db04:	3b02      	subs	r3, #2
 800db06:	429a      	cmp	r2, r3
 800db08:	d901      	bls.n	800db0e <isoDepTx+0xf2>
    {
        return ERR_NOTSUPP;
 800db0a:	2318      	movs	r3, #24
 800db0c:	e018      	b.n	800db40 <isoDepTx+0x124>
    }
        
    return rfalTransceiveBlockingTx( txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 800db0e:	4b0e      	ldr	r3, [pc, #56]	; (800db48 <isoDepTx+0x12c>)
 800db10:	6998      	ldr	r0, [r3, #24]
 800db12:	4b0d      	ldr	r3, [pc, #52]	; (800db48 <isoDepTx+0x12c>)
 800db14:	8bdc      	ldrh	r4, [r3, #30]
 800db16:	4b0c      	ldr	r3, [pc, #48]	; (800db48 <isoDepTx+0x12c>)
 800db18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db1a:	4b0b      	ldr	r3, [pc, #44]	; (800db48 <isoDepTx+0x12c>)
 800db1c:	785b      	ldrb	r3, [r3, #1]
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d001      	beq.n	800db26 <isoDepTx+0x10a>
 800db22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db24:	e001      	b.n	800db2a <isoDepTx+0x10e>
 800db26:	f04f 33ff 	mov.w	r3, #4294967295
 800db2a:	8a39      	ldrh	r1, [r7, #16]
 800db2c:	9302      	str	r3, [sp, #8]
 800db2e:	2300      	movs	r3, #0
 800db30:	9301      	str	r3, [sp, #4]
 800db32:	9200      	str	r2, [sp, #0]
 800db34:	4623      	mov	r3, r4
 800db36:	4602      	mov	r2, r0
 800db38:	6978      	ldr	r0, [r7, #20]
 800db3a:	f008 f97d 	bl	8015e38 <rfalTransceiveBlockingTx>
 800db3e:	4603      	mov	r3, r0
}
 800db40:	4618      	mov	r0, r3
 800db42:	371c      	adds	r7, #28
 800db44:	46bd      	mov	sp, r7
 800db46:	bd90      	pop	{r4, r7, pc}
 800db48:	200031e4 	.word	0x200031e4

0800db4c <isoDepHandleControlMsg>:

/*******************************************************************************/
static ReturnCode isoDepHandleControlMsg( rfalIsoDepControlMsg controlMsg, uint8_t param )
{
 800db4c:	b590      	push	{r4, r7, lr}
 800db4e:	b089      	sub	sp, #36	; 0x24
 800db50:	af02      	add	r7, sp, #8
 800db52:	4603      	mov	r3, r0
 800db54:	460a      	mov	r2, r1
 800db56:	71fb      	strb	r3, [r7, #7]
 800db58:	4613      	mov	r3, r2
 800db5a:	71bb      	strb	r3, [r7, #6]
    uint8_t  pcb;   
    uint8_t  ctrlMsgBuf[ISODEP_CONTROLMSG_BUF_LEN];
    uint8_t  infLen;
    uint32_t fwtTemp;
    
    infLen  = 0;
 800db5c:	2300      	movs	r3, #0
 800db5e:	75bb      	strb	r3, [r7, #22]
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 800db60:	4b56      	ldr	r3, [pc, #344]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800db62:	689a      	ldr	r2, [r3, #8]
 800db64:	4b55      	ldr	r3, [pc, #340]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	4413      	add	r3, r2
 800db6a:	613b      	str	r3, [r7, #16]
    ST_MEMSET( ctrlMsgBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 800db6c:	f107 030c 	add.w	r3, r7, #12
 800db70:	2204      	movs	r2, #4
 800db72:	2100      	movs	r1, #0
 800db74:	4618      	mov	r0, r3
 800db76:	f00b f8f3 	bl	8018d60 <memset>
    
    switch( controlMsg )
 800db7a:	79fb      	ldrb	r3, [r7, #7]
 800db7c:	2b03      	cmp	r3, #3
 800db7e:	f200 8088 	bhi.w	800dc92 <isoDepHandleControlMsg+0x146>
 800db82:	a201      	add	r2, pc, #4	; (adr r2, 800db88 <isoDepHandleControlMsg+0x3c>)
 800db84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db88:	0800db99 	.word	0x0800db99
 800db8c:	0800dbc5 	.word	0x0800dbc5
 800db90:	0800dbf1 	.word	0x0800dbf1
 800db94:	0800dc5f 	.word	0x0800dc5f
    {
        /*******************************************************************************/
        case ISODEP_R_ACK:
            
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 800db98:	4b48      	ldr	r3, [pc, #288]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800db9a:	799b      	ldrb	r3, [r3, #6]
 800db9c:	1c5a      	adds	r2, r3, #1
 800db9e:	b2d1      	uxtb	r1, r2
 800dba0:	4a46      	ldr	r2, [pc, #280]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dba2:	7191      	strb	r1, [r2, #6]
 800dba4:	4a45      	ldr	r2, [pc, #276]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dba6:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d901      	bls.n	800dbb2 <isoDepHandleControlMsg+0x66>
            {
                return ERR_PROTO;
 800dbae:	230b      	movs	r3, #11
 800dbb0:	e07f      	b.n	800dcb2 <isoDepHandleControlMsg+0x166>
            }
            
            pcb = isoDep_PCBRACK( gIsoDep.blockNumber );
 800dbb2:	4b42      	ldr	r3, [pc, #264]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dbb4:	789b      	ldrb	r3, [r3, #2]
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	f063 035d 	orn	r3, r3, #93	; 0x5d
 800dbc0:	75fb      	strb	r3, [r7, #23]
            break;
 800dbc2:	e068      	b.n	800dc96 <isoDepHandleControlMsg+0x14a>
            
        /*******************************************************************************/
        case ISODEP_R_NAK:
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 800dbc4:	4b3d      	ldr	r3, [pc, #244]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dbc6:	799b      	ldrb	r3, [r3, #6]
 800dbc8:	1c5a      	adds	r2, r3, #1
 800dbca:	b2d1      	uxtb	r1, r2
 800dbcc:	4a3b      	ldr	r2, [pc, #236]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dbce:	7191      	strb	r1, [r2, #6]
 800dbd0:	4a3a      	ldr	r2, [pc, #232]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dbd2:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d901      	bls.n	800dbde <isoDepHandleControlMsg+0x92>
            {
                return ERR_TIMEOUT;
 800dbda:	2304      	movs	r3, #4
 800dbdc:	e069      	b.n	800dcb2 <isoDepHandleControlMsg+0x166>
            }
            
            pcb = isoDep_PCBRNAK( gIsoDep.blockNumber );            
 800dbde:	4b37      	ldr	r3, [pc, #220]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dbe0:	789b      	ldrb	r3, [r3, #2]
 800dbe2:	f003 0301 	and.w	r3, r3, #1
 800dbe6:	b2db      	uxtb	r3, r3
 800dbe8:	f063 034d 	orn	r3, r3, #77	; 0x4d
 800dbec:	75fb      	strb	r3, [r7, #23]
            break;
 800dbee:	e052      	b.n	800dc96 <isoDepHandleControlMsg+0x14a>
            
        /*******************************************************************************/
        case ISODEP_S_WTX:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 800dbf0:	4b32      	ldr	r3, [pc, #200]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dbf2:	79db      	ldrb	r3, [r3, #7]
 800dbf4:	1c5a      	adds	r2, r3, #1
 800dbf6:	b2d1      	uxtb	r1, r2
 800dbf8:	4a30      	ldr	r2, [pc, #192]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dbfa:	71d1      	strb	r1, [r2, #7]
 800dbfc:	4a2f      	ldr	r2, [pc, #188]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dbfe:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d901      	bls.n	800dc0a <isoDepHandleControlMsg+0xbe>
            {
                return ERR_PROTO;
 800dc06:	230b      	movs	r3, #11
 800dc08:	e053      	b.n	800dcb2 <isoDepHandleControlMsg+0x166>
            }
            
            /* Check if WTXM is valid */
            if( ! isoDep_isWTXMValid(param) )
 800dc0a:	79bb      	ldrb	r3, [r7, #6]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d002      	beq.n	800dc16 <isoDepHandleControlMsg+0xca>
 800dc10:	79bb      	ldrb	r3, [r7, #6]
 800dc12:	2b3b      	cmp	r3, #59	; 0x3b
 800dc14:	d901      	bls.n	800dc1a <isoDepHandleControlMsg+0xce>
            {
                return ERR_PROTO;
 800dc16:	230b      	movs	r3, #11
 800dc18:	e04b      	b.n	800dcb2 <isoDepHandleControlMsg+0x166>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 800dc1a:	4b28      	ldr	r3, [pc, #160]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dc1c:	785b      	ldrb	r3, [r3, #1]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d111      	bne.n	800dc46 <isoDepHandleControlMsg+0xfa>
            {
                /* Calculate temp Wait Time eXtension */ 
                fwtTemp = (gIsoDep.fwt * param);
 800dc22:	4b26      	ldr	r3, [pc, #152]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	79ba      	ldrb	r2, [r7, #6]
 800dc28:	fb02 f303 	mul.w	r3, r2, r3
 800dc2c:	613b      	str	r3, [r7, #16]
                fwtTemp = MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dc34:	bf28      	it	cs
 800dc36:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 800dc3a:	613b      	str	r3, [r7, #16]
                fwtTemp += gIsoDep.dFwt;
 800dc3c:	4b1f      	ldr	r3, [pc, #124]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	693a      	ldr	r2, [r7, #16]
 800dc42:	4413      	add	r3, r2
 800dc44:	613b      	str	r3, [r7, #16]
            }
            
            pcb = ISODEP_PCB_SWTX;
 800dc46:	23f2      	movs	r3, #242	; 0xf2
 800dc48:	75fb      	strb	r3, [r7, #23]
            ctrlMsgBuf[ RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN + infLen++] = param;
 800dc4a:	7dbb      	ldrb	r3, [r7, #22]
 800dc4c:	1c5a      	adds	r2, r3, #1
 800dc4e:	75ba      	strb	r2, [r7, #22]
 800dc50:	3302      	adds	r3, #2
 800dc52:	3318      	adds	r3, #24
 800dc54:	443b      	add	r3, r7
 800dc56:	79ba      	ldrb	r2, [r7, #6]
 800dc58:	f803 2c0c 	strb.w	r2, [r3, #-12]
            break;
 800dc5c:	e01b      	b.n	800dc96 <isoDepHandleControlMsg+0x14a>
            
        /*******************************************************************************/
        case ISODEP_S_DSL:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 800dc5e:	4b17      	ldr	r3, [pc, #92]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dc60:	79db      	ldrb	r3, [r3, #7]
 800dc62:	1c5a      	adds	r2, r3, #1
 800dc64:	b2d1      	uxtb	r1, r2
 800dc66:	4a15      	ldr	r2, [pc, #84]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dc68:	71d1      	strb	r1, [r2, #7]
 800dc6a:	4a14      	ldr	r2, [pc, #80]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dc6c:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d901      	bls.n	800dc78 <isoDepHandleControlMsg+0x12c>
            {
                return ERR_PROTO;
 800dc74:	230b      	movs	r3, #11
 800dc76:	e01c      	b.n	800dcb2 <isoDepHandleControlMsg+0x166>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 800dc78:	4b10      	ldr	r3, [pc, #64]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dc7a:	785b      	ldrb	r3, [r3, #1]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d105      	bne.n	800dc8c <isoDepHandleControlMsg+0x140>
            {
                /* Digital 1.0 - 13.2.7.3 Poller must wait fwtDEACTIVATION */
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 800dc80:	f44f 338c 	mov.w	r3, #71680	; 0x11800
 800dc84:	613b      	str	r3, [r7, #16]
                gIsoDep.state = ISODEP_ST_PCD_WAIT_DSL;
 800dc86:	4b0d      	ldr	r3, [pc, #52]	; (800dcbc <isoDepHandleControlMsg+0x170>)
 800dc88:	2203      	movs	r2, #3
 800dc8a:	701a      	strb	r2, [r3, #0]
            }
            pcb = ISODEP_PCB_SDSL;
 800dc8c:	23c2      	movs	r3, #194	; 0xc2
 800dc8e:	75fb      	strb	r3, [r7, #23]
            break;
 800dc90:	e001      	b.n	800dc96 <isoDepHandleControlMsg+0x14a>
        
        /*******************************************************************************/
        default:
            return ERR_INTERNAL;
 800dc92:	230c      	movs	r3, #12
 800dc94:	e00d      	b.n	800dcb2 <isoDepHandleControlMsg+0x166>
    }
    
    return isoDepTx( pcb, ctrlMsgBuf, &ctrlMsgBuf[RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN], infLen, fwtTemp );
 800dc96:	7dbb      	ldrb	r3, [r7, #22]
 800dc98:	b29c      	uxth	r4, r3
 800dc9a:	f107 030c 	add.w	r3, r7, #12
 800dc9e:	1c9a      	adds	r2, r3, #2
 800dca0:	f107 010c 	add.w	r1, r7, #12
 800dca4:	7df8      	ldrb	r0, [r7, #23]
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	9300      	str	r3, [sp, #0]
 800dcaa:	4623      	mov	r3, r4
 800dcac:	f7ff feb6 	bl	800da1c <isoDepTx>
 800dcb0:	4603      	mov	r3, r0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	371c      	adds	r7, #28
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd90      	pop	{r4, r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	200031e4 	.word	0x200031e4

0800dcc0 <rfalIsoDepInitialize>:
 */


/*******************************************************************************/
void rfalIsoDepInitialize( void )
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	af00      	add	r7, sp, #0
    gIsoDep.state        = ISODEP_ST_IDLE;
 800dcc4:	4b26      	ldr	r3, [pc, #152]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	701a      	strb	r2, [r3, #0]
    gIsoDep.role         = ISODEP_ROLE_PCD;
 800dcca:	4b25      	ldr	r3, [pc, #148]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dccc:	2200      	movs	r2, #0
 800dcce:	705a      	strb	r2, [r3, #1]
    gIsoDep.did          = RFAL_ISODEP_NO_DID;
 800dcd0:	4b23      	ldr	r3, [pc, #140]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	70da      	strb	r2, [r3, #3]
    gIsoDep.nad          = RFAL_ISODEP_NO_NAD;
 800dcd6:	4b22      	ldr	r3, [pc, #136]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dcd8:	22ff      	movs	r2, #255	; 0xff
 800dcda:	711a      	strb	r2, [r3, #4]
    gIsoDep.blockNumber  = 0;
 800dcdc:	4b20      	ldr	r3, [pc, #128]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dcde:	2200      	movs	r2, #0
 800dce0:	709a      	strb	r2, [r3, #2]
    gIsoDep.isTxChaining = false;
 800dce2:	4b1f      	ldr	r3, [pc, #124]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dce4:	2200      	movs	r2, #0
 800dce6:	749a      	strb	r2, [r3, #18]
    gIsoDep.isRxChaining = false;
 800dce8:	4b1d      	ldr	r3, [pc, #116]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dcea:	2200      	movs	r2, #0
 800dcec:	74da      	strb	r2, [r3, #19]
    gIsoDep.lastDID00    = false;
 800dcee:	4b1c      	ldr	r3, [pc, #112]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 800dcf6:	4b1a      	ldr	r3, [pc, #104]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dcf8:	2240      	movs	r2, #64	; 0x40
 800dcfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 800dcfe:	4b18      	ldr	r3, [pc, #96]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dd00:	2210      	movs	r2, #16
 800dd02:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx       = (uint16_t)RFAL_ISODEP_FSX_16;
 800dd04:	4b16      	ldr	r3, [pc, #88]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dd06:	2210      	movs	r2, #16
 800dd08:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 800dd0a:	4b15      	ldr	r3, [pc, #84]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    
    gIsoDep.rxLen        = NULL;
 800dd12:	4b13      	ldr	r3, [pc, #76]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dd14:	2200      	movs	r2, #0
 800dd16:	62da      	str	r2, [r3, #44]	; 0x2c
    gIsoDep.rxBuf        = NULL;
 800dd18:	4b11      	ldr	r3, [pc, #68]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	619a      	str	r2, [r3, #24]
    
    gIsoDep.isTxPending  = false;
 800dd1e:	4b10      	ldr	r3, [pc, #64]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dd20:	2200      	movs	r2, #0
 800dd22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    gIsoDep.isWait4WTX   = false;
 800dd26:	4b0e      	ldr	r3, [pc, #56]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    gIsoDep.compMode       = RFAL_COMPLIANCE_MODE_NFC;
 800dd2e:	4b0c      	ldr	r3, [pc, #48]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gIsoDep.maxRetriesR    = RFAL_ISODEP_MAX_R_RETRYS;
 800dd36:	4b0a      	ldr	r3, [pc, #40]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dd38:	2203      	movs	r2, #3
 800dd3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    gIsoDep.maxRetriesS    = RFAL_ISODEP_MAX_S_RETRYS;
 800dd3e:	4b08      	ldr	r3, [pc, #32]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dd40:	2203      	movs	r2, #3
 800dd42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    gIsoDep.maxRetriesI    = RFAL_ISODEP_MAX_I_RETRYS;
 800dd46:	4b06      	ldr	r3, [pc, #24]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dd48:	2202      	movs	r2, #2
 800dd4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    gIsoDep.maxRetriesRATS = RFAL_ISODEP_RATS_RETRIES;
 800dd4e:	4b04      	ldr	r3, [pc, #16]	; (800dd60 <rfalIsoDepInitialize+0xa0>)
 800dd50:	2201      	movs	r2, #1
 800dd52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    
    isoDepClearCounters();
 800dd56:	f7ff fe4f 	bl	800d9f8 <isoDepClearCounters>
}
 800dd5a:	bf00      	nop
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	200031e4 	.word	0x200031e4

0800dd64 <isoDepDataExchangePCD>:


#if RFAL_FEATURE_ISO_DEP_POLL
/*******************************************************************************/
static ReturnCode isoDepDataExchangePCD( uint16_t *outActRxLen, bool *outIsChaining )
{
 800dd64:	b5b0      	push	{r4, r5, r7, lr}
 800dd66:	b086      	sub	sp, #24
 800dd68:	af02      	add	r7, sp, #8
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    uint8_t    rxPCB;
    
    /* Check out parameters */
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d002      	beq.n	800dd7a <isoDepDataExchangePCD+0x16>
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d101      	bne.n	800dd7e <isoDepDataExchangePCD+0x1a>
    {
        return ERR_PARAM;
 800dd7a:	2307      	movs	r3, #7
 800dd7c:	e290      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
    }    
    
    *outIsChaining = false;
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	2200      	movs	r2, #0
 800dd82:	701a      	strb	r2, [r3, #0]
        
    /* Calculate header required and check if the buffers InfPositions are suitable */    
    gIsoDep.hdrLen = RFAL_ISODEP_PCB_LEN;
 800dd84:	4ba1      	ldr	r3, [pc, #644]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800dd86:	2201      	movs	r2, #1
 800dd88:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 800dd8c:	4b9f      	ldr	r3, [pc, #636]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800dd8e:	78db      	ldrb	r3, [r3, #3]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d007      	beq.n	800dda4 <isoDepDataExchangePCD+0x40>
 800dd94:	4b9d      	ldr	r3, [pc, #628]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800dd96:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	b2da      	uxtb	r2, r3
 800dd9e:	4b9b      	ldr	r3, [pc, #620]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800dda0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)  { gIsoDep.hdrLen  += RFAL_ISODEP_NAD_LEN;  }
 800dda4:	4b99      	ldr	r3, [pc, #612]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800dda6:	791b      	ldrb	r3, [r3, #4]
 800dda8:	2bff      	cmp	r3, #255	; 0xff
 800ddaa:	d007      	beq.n	800ddbc <isoDepDataExchangePCD+0x58>
 800ddac:	4b97      	ldr	r3, [pc, #604]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800ddae:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	b2da      	uxtb	r2, r3
 800ddb6:	4b95      	ldr	r3, [pc, #596]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800ddb8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    
    /* check if there is enough space before the infPos to append ISO-DEP headers on rx and tx */
    if( (gIsoDep.rxBufInfPos < gIsoDep.hdrLen) || (gIsoDep.txBufInfPos < gIsoDep.hdrLen) )
 800ddbc:	4b93      	ldr	r3, [pc, #588]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800ddbe:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800ddc2:	4b92      	ldr	r3, [pc, #584]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800ddc4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d307      	bcc.n	800dddc <isoDepDataExchangePCD+0x78>
 800ddcc:	4b8f      	ldr	r3, [pc, #572]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800ddce:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ddd2:	4b8e      	ldr	r3, [pc, #568]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800ddd4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d201      	bcs.n	800dde0 <isoDepDataExchangePCD+0x7c>
    {
        return ERR_PARAM;
 800dddc:	2307      	movs	r3, #7
 800ddde:	e25f      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
    }
    
    /*******************************************************************************/
    /* Wait until SFGT has been fulfilled (as a PCD) */
    if(gIsoDep.SFGTTimer != 0U)
 800dde0:	4b8a      	ldr	r3, [pc, #552]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800dde2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d00c      	beq.n	800de02 <isoDepDataExchangePCD+0x9e>
    {
        if( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) )
 800dde8:	4b88      	ldr	r3, [pc, #544]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800ddea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7f6 f9e1 	bl	80041b4 <timerIsExpired>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	f083 0301 	eor.w	r3, r3, #1
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d001      	beq.n	800de02 <isoDepDataExchangePCD+0x9e>
        {
            return ERR_BUSY;
 800ddfe:	2302      	movs	r3, #2
 800de00:	e24e      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
        }
    }
    /* Once done, clear SFGT timer */
    gIsoDep.SFGTTimer = 0;
 800de02:	4b82      	ldr	r3, [pc, #520]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800de04:	2200      	movs	r2, #0
 800de06:	63da      	str	r2, [r3, #60]	; 0x3c
    
    
    /*******************************************************************************/
    switch( gIsoDep.state )
 800de08:	4b80      	ldr	r3, [pc, #512]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	2b03      	cmp	r3, #3
 800de0e:	f300 8245 	bgt.w	800e29c <isoDepDataExchangePCD+0x538>
 800de12:	2b02      	cmp	r3, #2
 800de14:	da2d      	bge.n	800de72 <isoDepDataExchangePCD+0x10e>
 800de16:	2b00      	cmp	r3, #0
 800de18:	d002      	beq.n	800de20 <isoDepDataExchangePCD+0xbc>
 800de1a:	2b01      	cmp	r3, #1
 800de1c:	d002      	beq.n	800de24 <isoDepDataExchangePCD+0xc0>
            /* fall through */
          
        /*******************************************************************************/
        default:               /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            /* MISRA 16.4: no empty default (comment will suffice) */
            break;
 800de1e:	e23d      	b.n	800e29c <isoDepDataExchangePCD+0x538>
            return ERR_NONE;
 800de20:	2300      	movs	r3, #0
 800de22:	e23d      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
            ret = isoDepTx( isoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, (gIsoDep.fwt + gIsoDep.dFwt) );
 800de24:	4b79      	ldr	r3, [pc, #484]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800de26:	789b      	ldrb	r3, [r3, #2]
 800de28:	f003 0301 	and.w	r3, r3, #1
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	f043 0302 	orr.w	r3, r3, #2
 800de32:	b2d8      	uxtb	r0, r3
 800de34:	4b75      	ldr	r3, [pc, #468]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800de36:	6959      	ldr	r1, [r3, #20]
 800de38:	4b74      	ldr	r3, [pc, #464]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800de3a:	695b      	ldr	r3, [r3, #20]
 800de3c:	4a73      	ldr	r2, [pc, #460]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800de3e:	f892 2020 	ldrb.w	r2, [r2, #32]
 800de42:	189c      	adds	r4, r3, r2
 800de44:	4b71      	ldr	r3, [pc, #452]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800de46:	8b9d      	ldrh	r5, [r3, #28]
 800de48:	4b70      	ldr	r3, [pc, #448]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800de4a:	689a      	ldr	r2, [r3, #8]
 800de4c:	4b6f      	ldr	r3, [pc, #444]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	4413      	add	r3, r2
 800de52:	9300      	str	r3, [sp, #0]
 800de54:	462b      	mov	r3, r5
 800de56:	4622      	mov	r2, r4
 800de58:	f7ff fde0 	bl	800da1c <isoDepTx>
 800de5c:	4603      	mov	r3, r0
 800de5e:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 800de60:	89fb      	ldrh	r3, [r7, #14]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d103      	bne.n	800de6e <isoDepDataExchangePCD+0x10a>
                  gIsoDep.state = ISODEP_ST_PCD_RX;
 800de66:	4b69      	ldr	r3, [pc, #420]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800de68:	2202      	movs	r2, #2
 800de6a:	701a      	strb	r2, [r3, #0]
                  break;
 800de6c:	e001      	b.n	800de72 <isoDepDataExchangePCD+0x10e>
                  return ret;
 800de6e:	89fb      	ldrh	r3, [r7, #14]
 800de70:	e216      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
            ret = rfalGetTransceiveStatus();
 800de72:	f008 f897 	bl	8015fa4 <rfalGetTransceiveStatus>
 800de76:	4603      	mov	r3, r0
 800de78:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 800de7a:	89fb      	ldrh	r3, [r7, #14]
 800de7c:	2b28      	cmp	r3, #40	; 0x28
 800de7e:	f200 8082 	bhi.w	800df86 <isoDepDataExchangePCD+0x222>
 800de82:	a201      	add	r2, pc, #4	; (adr r2, 800de88 <isoDepDataExchangePCD+0x124>)
 800de84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de88:	0800df8b 	.word	0x0800df8b
 800de8c:	0800df87 	.word	0x0800df87
 800de90:	0800df83 	.word	0x0800df83
 800de94:	0800df87 	.word	0x0800df87
 800de98:	0800df2d 	.word	0x0800df2d
 800de9c:	0800df87 	.word	0x0800df87
 800dea0:	0800df87 	.word	0x0800df87
 800dea4:	0800df87 	.word	0x0800df87
 800dea8:	0800df87 	.word	0x0800df87
 800deac:	0800df2d 	.word	0x0800df2d
 800deb0:	0800df87 	.word	0x0800df87
 800deb4:	0800df87 	.word	0x0800df87
 800deb8:	0800df87 	.word	0x0800df87
 800debc:	0800df87 	.word	0x0800df87
 800dec0:	0800df87 	.word	0x0800df87
 800dec4:	0800df87 	.word	0x0800df87
 800dec8:	0800df87 	.word	0x0800df87
 800decc:	0800df87 	.word	0x0800df87
 800ded0:	0800df87 	.word	0x0800df87
 800ded4:	0800df87 	.word	0x0800df87
 800ded8:	0800df87 	.word	0x0800df87
 800dedc:	0800df2d 	.word	0x0800df2d
 800dee0:	0800df87 	.word	0x0800df87
 800dee4:	0800df87 	.word	0x0800df87
 800dee8:	0800df87 	.word	0x0800df87
 800deec:	0800df87 	.word	0x0800df87
 800def0:	0800df87 	.word	0x0800df87
 800def4:	0800df2d 	.word	0x0800df2d
 800def8:	0800df87 	.word	0x0800df87
 800defc:	0800df87 	.word	0x0800df87
 800df00:	0800df87 	.word	0x0800df87
 800df04:	0800df87 	.word	0x0800df87
 800df08:	0800df87 	.word	0x0800df87
 800df0c:	0800df87 	.word	0x0800df87
 800df10:	0800df87 	.word	0x0800df87
 800df14:	0800df87 	.word	0x0800df87
 800df18:	0800df87 	.word	0x0800df87
 800df1c:	0800df87 	.word	0x0800df87
 800df20:	0800df87 	.word	0x0800df87
 800df24:	0800df87 	.word	0x0800df87
 800df28:	0800df2d 	.word	0x0800df2d
                    if( gIsoDep.isRxChaining )
 800df2c:	4b37      	ldr	r3, [pc, #220]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800df2e:	7cdb      	ldrb	r3, [r3, #19]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00a      	beq.n	800df4a <isoDepDataExchangePCD+0x1e6>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 800df34:	2100      	movs	r1, #0
 800df36:	2000      	movs	r0, #0
 800df38:	f7ff fe08 	bl	800db4c <isoDepHandleControlMsg>
 800df3c:	4603      	mov	r3, r0
 800df3e:	81fb      	strh	r3, [r7, #14]
 800df40:	89fb      	ldrh	r3, [r7, #14]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d01b      	beq.n	800df7e <isoDepDataExchangePCD+0x21a>
 800df46:	89fb      	ldrh	r3, [r7, #14]
 800df48:	e1aa      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                    else if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 800df4a:	4b30      	ldr	r3, [pc, #192]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	2b03      	cmp	r3, #3
 800df50:	d10a      	bne.n	800df68 <isoDepDataExchangePCD+0x204>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ) );
 800df52:	2100      	movs	r1, #0
 800df54:	2003      	movs	r0, #3
 800df56:	f7ff fdf9 	bl	800db4c <isoDepHandleControlMsg>
 800df5a:	4603      	mov	r3, r0
 800df5c:	81fb      	strh	r3, [r7, #14]
 800df5e:	89fb      	ldrh	r3, [r7, #14]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d00c      	beq.n	800df7e <isoDepDataExchangePCD+0x21a>
 800df64:	89fb      	ldrh	r3, [r7, #14]
 800df66:	e19b      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 800df68:	2100      	movs	r1, #0
 800df6a:	2001      	movs	r0, #1
 800df6c:	f7ff fdee 	bl	800db4c <isoDepHandleControlMsg>
 800df70:	4603      	mov	r3, r0
 800df72:	81fb      	strh	r3, [r7, #14]
 800df74:	89fb      	ldrh	r3, [r7, #14]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <isoDepDataExchangePCD+0x21a>
 800df7a:	89fb      	ldrh	r3, [r7, #14]
 800df7c:	e190      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 800df7e:	2302      	movs	r3, #2
 800df80:	e18e      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;  /* Debug purposes */
 800df82:	2302      	movs	r3, #2
 800df84:	e18c      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                    return ret;
 800df86:	89fb      	ldrh	r3, [r7, #14]
 800df88:	e18a      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                    break;
 800df8a:	bf00      	nop
            (*outActRxLen) = rfalConvBitsToBytes( *outActRxLen );
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	881b      	ldrh	r3, [r3, #0]
 800df90:	3307      	adds	r3, #7
 800df92:	08db      	lsrs	r3, r3, #3
 800df94:	b29a      	uxth	r2, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	801a      	strh	r2, [r3, #0]
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	881a      	ldrh	r2, [r3, #0]
 800df9e:	4b1b      	ldr	r3, [pc, #108]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800dfa0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d305      	bcc.n	800dfb6 <isoDepDataExchangePCD+0x252>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	881a      	ldrh	r2, [r3, #0]
 800dfae:	4b17      	ldr	r3, [pc, #92]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800dfb0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d301      	bcc.n	800dfba <isoDepDataExchangePCD+0x256>
                return ERR_PROTO;
 800dfb6:	230b      	movs	r3, #11
 800dfb8:	e172      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 800dfba:	4b14      	ldr	r3, [pc, #80]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800dfbc:	699b      	ldr	r3, [r3, #24]
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	737b      	strb	r3, [r7, #13]
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( isoDep_PCBhasDID(rxPCB) || isoDep_PCBhasNAD(rxPCB)) )
 800dfc2:	4b12      	ldr	r3, [pc, #72]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800dfc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d10b      	bne.n	800dfe4 <isoDepDataExchangePCD+0x280>
 800dfcc:	7b7b      	ldrb	r3, [r7, #13]
 800dfce:	f003 0308 	and.w	r3, r3, #8
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d104      	bne.n	800dfe0 <isoDepDataExchangePCD+0x27c>
 800dfd6:	7b7b      	ldrb	r3, [r7, #13]
 800dfd8:	f003 0304 	and.w	r3, r3, #4
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d001      	beq.n	800dfe4 <isoDepDataExchangePCD+0x280>
                return ERR_PROTO;
 800dfe0:	230b      	movs	r3, #11
 800dfe2:	e15d      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
            if( (gIsoDep.did != RFAL_ISODEP_NO_DID) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])) )
 800dfe4:	4b09      	ldr	r3, [pc, #36]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800dfe6:	78db      	ldrb	r3, [r3, #3]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d011      	beq.n	800e010 <isoDepDataExchangePCD+0x2ac>
 800dfec:	7b7b      	ldrb	r3, [r7, #13]
 800dfee:	f003 0308 	and.w	r3, r3, #8
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d007      	beq.n	800e006 <isoDepDataExchangePCD+0x2a2>
 800dff6:	4b05      	ldr	r3, [pc, #20]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800dff8:	78da      	ldrb	r2, [r3, #3]
 800dffa:	4b04      	ldr	r3, [pc, #16]	; (800e00c <isoDepDataExchangePCD+0x2a8>)
 800dffc:	699b      	ldr	r3, [r3, #24]
 800dffe:	3301      	adds	r3, #1
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	429a      	cmp	r2, r3
 800e004:	d004      	beq.n	800e010 <isoDepDataExchangePCD+0x2ac>
                return ERR_PROTO;
 800e006:	230b      	movs	r3, #11
 800e008:	e14a      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
 800e00a:	bf00      	nop
 800e00c:	200031e4 	.word	0x200031e4
            if( isoDep_PCBisSBlock(rxPCB) )
 800e010:	7b7b      	ldrb	r3, [r7, #13]
 800e012:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800e016:	2bc2      	cmp	r3, #194	; 0xc2
 800e018:	d134      	bne.n	800e084 <isoDepDataExchangePCD+0x320>
                if( isoDep_PCBisSWTX(rxPCB) )
 800e01a:	7b7b      	ldrb	r3, [r7, #13]
 800e01c:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800e020:	2bc2      	cmp	r3, #194	; 0xc2
 800e022:	d11b      	bne.n	800e05c <isoDepDataExchangePCD+0x2f8>
 800e024:	7b7b      	ldrb	r3, [r7, #13]
 800e026:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e02a:	2b30      	cmp	r3, #48	; 0x30
 800e02c:	d116      	bne.n	800e05c <isoDepDataExchangePCD+0x2f8>
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_WTX, isoDep_GetWTXM(gIsoDep.rxBuf[gIsoDep.hdrLen]) ) );                    
 800e02e:	4b9e      	ldr	r3, [pc, #632]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e030:	699b      	ldr	r3, [r3, #24]
 800e032:	4a9d      	ldr	r2, [pc, #628]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e034:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800e038:	4413      	add	r3, r2
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e040:	b2db      	uxtb	r3, r3
 800e042:	4619      	mov	r1, r3
 800e044:	2002      	movs	r0, #2
 800e046:	f7ff fd81 	bl	800db4c <isoDepHandleControlMsg>
 800e04a:	4603      	mov	r3, r0
 800e04c:	81fb      	strh	r3, [r7, #14]
 800e04e:	89fb      	ldrh	r3, [r7, #14]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d001      	beq.n	800e058 <isoDepDataExchangePCD+0x2f4>
 800e054:	89fb      	ldrh	r3, [r7, #14]
 800e056:	e123      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 800e058:	2302      	movs	r3, #2
 800e05a:	e121      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                if( isoDep_PCBisSDeselect(rxPCB) )
 800e05c:	7b7b      	ldrb	r3, [r7, #13]
 800e05e:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800e062:	2bc2      	cmp	r3, #194	; 0xc2
 800e064:	d10c      	bne.n	800e080 <isoDepDataExchangePCD+0x31c>
 800e066:	7b7b      	ldrb	r3, [r7, #13]
 800e068:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d107      	bne.n	800e080 <isoDepDataExchangePCD+0x31c>
                    if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 800e070:	4b8d      	ldr	r3, [pc, #564]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	2b03      	cmp	r3, #3
 800e076:	d103      	bne.n	800e080 <isoDepDataExchangePCD+0x31c>
                        rfalIsoDepInitialize();         /* Session finished reInit vars */
 800e078:	f7ff fe22 	bl	800dcc0 <rfalIsoDepInitialize>
                        return ERR_NONE;
 800e07c:	2300      	movs	r3, #0
 800e07e:	e10f      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                return ERR_PROTO;
 800e080:	230b      	movs	r3, #11
 800e082:	e10d      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
            else if( isoDep_PCBisRBlock(rxPCB) )
 800e084:	7b7b      	ldrb	r3, [r7, #13]
 800e086:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 800e08a:	2ba2      	cmp	r3, #162	; 0xa2
 800e08c:	d141      	bne.n	800e112 <isoDepDataExchangePCD+0x3ae>
                if( isoDep_PCBisRACK(rxPCB) )                            /* Check if is a R-ACK */
 800e08e:	7b7b      	ldrb	r3, [r7, #13]
 800e090:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 800e094:	2ba2      	cmp	r3, #162	; 0xa2
 800e096:	d13a      	bne.n	800e10e <isoDepDataExchangePCD+0x3aa>
 800e098:	7b7b      	ldrb	r3, [r7, #13]
 800e09a:	f003 0310 	and.w	r3, r3, #16
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d135      	bne.n	800e10e <isoDepDataExchangePCD+0x3aa>
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Expected block number  */
 800e0a2:	7b7b      	ldrb	r3, [r7, #13]
 800e0a4:	f003 0301 	and.w	r3, r3, #1
 800e0a8:	4a7f      	ldr	r2, [pc, #508]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e0aa:	7892      	ldrb	r2, [r2, #2]
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d119      	bne.n	800e0e4 <isoDepDataExchangePCD+0x380>
                        gIsoDep.blockNumber = isoDep_PCBNextBN( gIsoDep.blockNumber );
 800e0b0:	4b7d      	ldr	r3, [pc, #500]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e0b2:	789b      	ldrb	r3, [r3, #2]
 800e0b4:	f003 0301 	and.w	r3, r3, #1
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	bf0c      	ite	eq
 800e0be:	2301      	moveq	r3, #1
 800e0c0:	2300      	movne	r3, #0
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	4b78      	ldr	r3, [pc, #480]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e0c8:	709a      	strb	r2, [r3, #2]
                        if( !gIsoDep.isTxChaining )
 800e0ca:	4b77      	ldr	r3, [pc, #476]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e0cc:	7c9b      	ldrb	r3, [r3, #18]
 800e0ce:	f083 0301 	eor.w	r3, r3, #1
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d001      	beq.n	800e0dc <isoDepDataExchangePCD+0x378>
                            return ERR_PROTO;
 800e0d8:	230b      	movs	r3, #11
 800e0da:	e0e1      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                        isoDepClearCounters();
 800e0dc:	f7ff fc8c 	bl	800d9f8 <isoDepClearCounters>
                        return ERR_NONE;  /* This block has been transmitted */
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	e0dd      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                        if( gIsoDep.cntIRetrys++ < gIsoDep.maxRetriesI )
 800e0e4:	4b70      	ldr	r3, [pc, #448]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e0e6:	795b      	ldrb	r3, [r3, #5]
 800e0e8:	1c5a      	adds	r2, r3, #1
 800e0ea:	b2d1      	uxtb	r1, r2
 800e0ec:	4a6e      	ldr	r2, [pc, #440]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e0ee:	7151      	strb	r1, [r2, #5]
 800e0f0:	4a6d      	ldr	r2, [pc, #436]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e0f2:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d207      	bcs.n	800e10a <isoDepDataExchangePCD+0x3a6>
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 800e0fa:	4b6b      	ldr	r3, [pc, #428]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	719a      	strb	r2, [r3, #6]
                            gIsoDep.state = ISODEP_ST_PCD_TX;
 800e100:	4b69      	ldr	r3, [pc, #420]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e102:	2201      	movs	r2, #1
 800e104:	701a      	strb	r2, [r3, #0]
                            return ERR_BUSY;
 800e106:	2302      	movs	r3, #2
 800e108:	e0ca      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                        return ERR_PROTO;
 800e10a:	230b      	movs	r3, #11
 800e10c:	e0c8      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                    return ERR_PROTO;
 800e10e:	230b      	movs	r3, #11
 800e110:	e0c6      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
            else if( isoDep_PCBisIBlock(rxPCB) )
 800e112:	7b7b      	ldrb	r3, [r7, #13]
 800e114:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 800e118:	2b02      	cmp	r3, #2
 800e11a:	f040 80bd 	bne.w	800e298 <isoDepDataExchangePCD+0x534>
                if( isoDep_PCBisChaining(rxPCB) )
 800e11e:	7b7b      	ldrb	r3, [r7, #13]
 800e120:	f003 0310 	and.w	r3, r3, #16
 800e124:	2b00      	cmp	r3, #0
 800e126:	d05e      	beq.n	800e1e6 <isoDepDataExchangePCD+0x482>
                    gIsoDep.isRxChaining = true;
 800e128:	4b5f      	ldr	r3, [pc, #380]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e12a:	2201      	movs	r2, #1
 800e12c:	74da      	strb	r2, [r3, #19]
                    *outIsChaining       = true;
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	2201      	movs	r2, #1
 800e132:	701a      	strb	r2, [r3, #0]
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 800e134:	7b7b      	ldrb	r3, [r7, #13]
 800e136:	f003 0301 	and.w	r3, r3, #1
 800e13a:	4a5b      	ldr	r2, [pc, #364]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e13c:	7892      	ldrb	r2, [r2, #2]
 800e13e:	4293      	cmp	r3, r2
 800e140:	d144      	bne.n	800e1cc <isoDepDataExchangePCD+0x468>
                        isoDep_ToggleBN( gIsoDep.blockNumber );
 800e142:	4b59      	ldr	r3, [pc, #356]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e144:	789b      	ldrb	r3, [r3, #2]
 800e146:	f003 0301 	and.w	r3, r3, #1
 800e14a:	b2db      	uxtb	r3, r3
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	bf0c      	ite	eq
 800e150:	2301      	moveq	r3, #1
 800e152:	2300      	movne	r3, #0
 800e154:	b2db      	uxtb	r3, r3
 800e156:	461a      	mov	r2, r3
 800e158:	4b53      	ldr	r3, [pc, #332]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e15a:	709a      	strb	r2, [r3, #2]
                        isoDepClearCounters();  /* Clear counters in case R counter is already at max */
 800e15c:	f7ff fc4c 	bl	800d9f8 <isoDepClearCounters>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 800e160:	2100      	movs	r1, #0
 800e162:	2000      	movs	r0, #0
 800e164:	f7ff fcf2 	bl	800db4c <isoDepHandleControlMsg>
 800e168:	4603      	mov	r3, r0
 800e16a:	81fb      	strh	r3, [r7, #14]
 800e16c:	89fb      	ldrh	r3, [r7, #14]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <isoDepDataExchangePCD+0x412>
 800e172:	89fb      	ldrh	r3, [r7, #14]
 800e174:	e094      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                        *outActRxLen -= gIsoDep.hdrLen;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	881a      	ldrh	r2, [r3, #0]
 800e17a:	4b4b      	ldr	r3, [pc, #300]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e17c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e180:	b29b      	uxth	r3, r3
 800e182:	1ad3      	subs	r3, r2, r3
 800e184:	b29a      	uxth	r2, r3
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	801a      	strh	r2, [r3, #0]
                        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 800e18a:	4b47      	ldr	r3, [pc, #284]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e18c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800e190:	4b45      	ldr	r3, [pc, #276]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e192:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e196:	429a      	cmp	r2, r3
 800e198:	d014      	beq.n	800e1c4 <isoDepDataExchangePCD+0x460>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	881b      	ldrh	r3, [r3, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d010      	beq.n	800e1c4 <isoDepDataExchangePCD+0x460>
                            ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 800e1a2:	4b41      	ldr	r3, [pc, #260]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e1a4:	699b      	ldr	r3, [r3, #24]
 800e1a6:	4a40      	ldr	r2, [pc, #256]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e1a8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800e1ac:	1898      	adds	r0, r3, r2
 800e1ae:	4b3e      	ldr	r3, [pc, #248]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e1b0:	699b      	ldr	r3, [r3, #24]
 800e1b2:	4a3d      	ldr	r2, [pc, #244]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e1b4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800e1b8:	1899      	adds	r1, r3, r2
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	881b      	ldrh	r3, [r3, #0]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	f00a fdb4 	bl	8018d2c <memmove>
                        isoDepClearCounters();
 800e1c4:	f7ff fc18 	bl	800d9f8 <isoDepClearCounters>
                        return ERR_AGAIN;       /* Send Again signalling to run again, but some chaining data has arrived */
 800e1c8:	230d      	movs	r3, #13
 800e1ca:	e069      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );                        
 800e1cc:	2100      	movs	r1, #0
 800e1ce:	2000      	movs	r0, #0
 800e1d0:	f7ff fcbc 	bl	800db4c <isoDepHandleControlMsg>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	81fb      	strh	r3, [r7, #14]
 800e1d8:	89fb      	ldrh	r3, [r7, #14]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <isoDepDataExchangePCD+0x47e>
 800e1de:	89fb      	ldrh	r3, [r7, #14]
 800e1e0:	e05e      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 800e1e2:	2302      	movs	r3, #2
 800e1e4:	e05c      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                gIsoDep.isRxChaining = false; /* clear PICC chaining flag */                
 800e1e6:	4b30      	ldr	r3, [pc, #192]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	74da      	strb	r2, [r3, #19]
                if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 800e1ec:	7b7b      	ldrb	r3, [r7, #13]
 800e1ee:	f003 0301 	and.w	r3, r3, #1
 800e1f2:	4a2d      	ldr	r2, [pc, #180]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e1f4:	7892      	ldrb	r2, [r2, #2]
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d13a      	bne.n	800e270 <isoDepDataExchangePCD+0x50c>
                    isoDep_ToggleBN( gIsoDep.blockNumber );
 800e1fa:	4b2b      	ldr	r3, [pc, #172]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e1fc:	789b      	ldrb	r3, [r3, #2]
 800e1fe:	f003 0301 	and.w	r3, r3, #1
 800e202:	b2db      	uxtb	r3, r3
 800e204:	2b00      	cmp	r3, #0
 800e206:	bf0c      	ite	eq
 800e208:	2301      	moveq	r3, #1
 800e20a:	2300      	movne	r3, #0
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	461a      	mov	r2, r3
 800e210:	4b25      	ldr	r3, [pc, #148]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e212:	709a      	strb	r2, [r3, #2]
                    *outActRxLen -= gIsoDep.hdrLen;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	881a      	ldrh	r2, [r3, #0]
 800e218:	4b23      	ldr	r3, [pc, #140]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e21a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e21e:	b29b      	uxth	r3, r3
 800e220:	1ad3      	subs	r3, r2, r3
 800e222:	b29a      	uxth	r2, r3
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	801a      	strh	r2, [r3, #0]
                    if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 800e228:	4b1f      	ldr	r3, [pc, #124]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e22a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800e22e:	4b1e      	ldr	r3, [pc, #120]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e230:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e234:	429a      	cmp	r2, r3
 800e236:	d014      	beq.n	800e262 <isoDepDataExchangePCD+0x4fe>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	881b      	ldrh	r3, [r3, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d010      	beq.n	800e262 <isoDepDataExchangePCD+0x4fe>
                        ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 800e240:	4b19      	ldr	r3, [pc, #100]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e242:	699b      	ldr	r3, [r3, #24]
 800e244:	4a18      	ldr	r2, [pc, #96]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e246:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800e24a:	1898      	adds	r0, r3, r2
 800e24c:	4b16      	ldr	r3, [pc, #88]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e24e:	699b      	ldr	r3, [r3, #24]
 800e250:	4a15      	ldr	r2, [pc, #84]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e252:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800e256:	1899      	adds	r1, r3, r2
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	881b      	ldrh	r3, [r3, #0]
 800e25c:	461a      	mov	r2, r3
 800e25e:	f00a fd65 	bl	8018d2c <memmove>
                    gIsoDep.state = ISODEP_ST_IDLE;
 800e262:	4b11      	ldr	r3, [pc, #68]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e264:	2200      	movs	r2, #0
 800e266:	701a      	strb	r2, [r3, #0]
                    isoDepClearCounters();
 800e268:	f7ff fbc6 	bl	800d9f8 <isoDepClearCounters>
                    return ERR_NONE;
 800e26c:	2300      	movs	r3, #0
 800e26e:	e017      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                    if( (gIsoDep.compMode != RFAL_COMPLIANCE_MODE_ISO) )
 800e270:	4b0d      	ldr	r3, [pc, #52]	; (800e2a8 <isoDepDataExchangePCD+0x544>)
 800e272:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e276:	2b02      	cmp	r3, #2
 800e278:	d001      	beq.n	800e27e <isoDepDataExchangePCD+0x51a>
                        return ERR_PROTO;
 800e27a:	230b      	movs	r3, #11
 800e27c:	e010      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 800e27e:	2100      	movs	r1, #0
 800e280:	2001      	movs	r0, #1
 800e282:	f7ff fc63 	bl	800db4c <isoDepHandleControlMsg>
 800e286:	4603      	mov	r3, r0
 800e288:	81fb      	strh	r3, [r7, #14]
 800e28a:	89fb      	ldrh	r3, [r7, #14]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d001      	beq.n	800e294 <isoDepDataExchangePCD+0x530>
 800e290:	89fb      	ldrh	r3, [r7, #14]
 800e292:	e005      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 800e294:	2302      	movs	r3, #2
 800e296:	e003      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
                return ERR_PROTO;
 800e298:	230b      	movs	r3, #11
 800e29a:	e001      	b.n	800e2a0 <isoDepDataExchangePCD+0x53c>
            break;
 800e29c:	bf00      	nop
    }
    
    return ERR_INTERNAL;
 800e29e:	230c      	movs	r3, #12
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3710      	adds	r7, #16
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bdb0      	pop	{r4, r5, r7, pc}
 800e2a8:	200031e4 	.word	0x200031e4

0800e2ac <rfalIsoDepDeselect>:

/*******************************************************************************/
ReturnCode rfalIsoDepDeselect( void )
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
    bool       dummyB;
    
    /*******************************************************************************/
    /* Check if  rx parameters have been set before, otherwise use global variable *
     * To cope with a Deselect after RATS\ATTRIB without any I-Block exchanged     */
    if( (gIsoDep.rxLen == NULL) || (gIsoDep.rxBuf == NULL) )
 800e2b2:	4b23      	ldr	r3, [pc, #140]	; (800e340 <rfalIsoDepDeselect+0x94>)
 800e2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d003      	beq.n	800e2c2 <rfalIsoDepDeselect+0x16>
 800e2ba:	4b21      	ldr	r3, [pc, #132]	; (800e340 <rfalIsoDepDeselect+0x94>)
 800e2bc:	699b      	ldr	r3, [r3, #24]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d110      	bne.n	800e2e4 <rfalIsoDepDeselect+0x38>
    {
        /* Using local vars would be safe as rfalIsoDepInitialize will clear the   *
         * reference to local vars before exiting (no EXIT_ON_ERR),                *
         * but MISRA 18.6 3217 would be still be flagged. Using static variables   */
        gIsoDep.rxLen       = &gIsoDep.ctrlRxLen;
 800e2c2:	4b1f      	ldr	r3, [pc, #124]	; (800e340 <rfalIsoDepDeselect+0x94>)
 800e2c4:	4a1f      	ldr	r2, [pc, #124]	; (800e344 <rfalIsoDepDeselect+0x98>)
 800e2c6:	62da      	str	r2, [r3, #44]	; 0x2c
        gIsoDep.rxBuf       = gIsoDep.ctrlRxBuf;
 800e2c8:	4b1d      	ldr	r3, [pc, #116]	; (800e340 <rfalIsoDepDeselect+0x94>)
 800e2ca:	4a1f      	ldr	r2, [pc, #124]	; (800e348 <rfalIsoDepDeselect+0x9c>)
 800e2cc:	619a      	str	r2, [r3, #24]
        
        gIsoDep.rxBufLen    = ISODEP_CONTROLMSG_BUF_LEN;
 800e2ce:	4b1c      	ldr	r3, [pc, #112]	; (800e340 <rfalIsoDepDeselect+0x94>)
 800e2d0:	2204      	movs	r2, #4
 800e2d2:	83da      	strh	r2, [r3, #30]
        gIsoDep.rxBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 800e2d4:	4b1a      	ldr	r3, [pc, #104]	; (800e340 <rfalIsoDepDeselect+0x94>)
 800e2d6:	2202      	movs	r2, #2
 800e2d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 800e2dc:	4b18      	ldr	r3, [pc, #96]	; (800e340 <rfalIsoDepDeselect+0x94>)
 800e2de:	2202      	movs	r2, #2
 800e2e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    
    /*******************************************************************************/
    /* The Deselect process is being done blocking, Digital 1.0 - 13.2.7.1 MUST wait response and retry*/
    /* Set the maximum reruns while we will wait for a response */
    cntRerun = ISODEP_MAX_RERUNS;
 800e2e4:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800e2e8:	607b      	str	r3, [r7, #4]
    
    /* Send DSL request and run protocol until get a response, error or "timeout" */    
    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ));
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	2003      	movs	r0, #3
 800e2ee:	f7ff fc2d 	bl	800db4c <isoDepHandleControlMsg>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	807b      	strh	r3, [r7, #2]
 800e2f6:	887b      	ldrh	r3, [r7, #2]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d001      	beq.n	800e300 <rfalIsoDepDeselect+0x54>
 800e2fc:	887b      	ldrh	r3, [r7, #2]
 800e2fe:	e01a      	b.n	800e336 <rfalIsoDepDeselect+0x8a>
    do{
        ret = isoDepDataExchangePCD( gIsoDep.rxLen, &dummyB );
 800e300:	4b0f      	ldr	r3, [pc, #60]	; (800e340 <rfalIsoDepDeselect+0x94>)
 800e302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e304:	1c7a      	adds	r2, r7, #1
 800e306:	4611      	mov	r1, r2
 800e308:	4618      	mov	r0, r3
 800e30a:	f7ff fd2b 	bl	800dd64 <isoDepDataExchangePCD>
 800e30e:	4603      	mov	r3, r0
 800e310:	807b      	strh	r3, [r7, #2]
        rfalWorker();
 800e312:	f007 fe57 	bl	8015fc4 <rfalWorker>
    }
    while( ((cntRerun--) != 0U) && (ret == ERR_BUSY) );
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	1e5a      	subs	r2, r3, #1
 800e31a:	607a      	str	r2, [r7, #4]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d002      	beq.n	800e326 <rfalIsoDepDeselect+0x7a>
 800e320:	887b      	ldrh	r3, [r7, #2]
 800e322:	2b02      	cmp	r3, #2
 800e324:	d0ec      	beq.n	800e300 <rfalIsoDepDeselect+0x54>
        
    rfalIsoDepInitialize();
 800e326:	f7ff fccb 	bl	800dcc0 <rfalIsoDepInitialize>
    return ((cntRerun == 0U) ? ERR_TIMEOUT : ret);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d001      	beq.n	800e334 <rfalIsoDepDeselect+0x88>
 800e330:	887b      	ldrh	r3, [r7, #2]
 800e332:	e000      	b.n	800e336 <rfalIsoDepDeselect+0x8a>
 800e334:	2304      	movs	r3, #4
}
 800e336:	4618      	mov	r0, r3
 800e338:	3708      	adds	r7, #8
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	200031e4 	.word	0x200031e4
 800e344:	2000322e 	.word	0x2000322e
 800e348:	20003229 	.word	0x20003229

0800e34c <rfalIsoDepFWI2FWT>:
#endif /* RFAL_FEATURE_ISO_DEP_POLL */


/*******************************************************************************/
uint32_t rfalIsoDepFWI2FWT( uint8_t fwi )
{
 800e34c:	b480      	push	{r7}
 800e34e:	b085      	sub	sp, #20
 800e350:	af00      	add	r7, sp, #0
 800e352:	4603      	mov	r3, r0
 800e354:	71fb      	strb	r3, [r7, #7]
    uint32_t result;
    uint8_t  tmpFWI;
    
    tmpFWI = fwi;
 800e356:	79fb      	ldrb	r3, [r7, #7]
 800e358:	73fb      	strb	r3, [r7, #15]
    
    /* RFU values -> take the default value  
     * Digital 1.0  11.6.2.17  FWI[1,14]
     * Digital 1.1  7.6.2.22   FWI[0,14]
     * EMVCo 2.6    Table A.5  FWI[0,14] */
    if( tmpFWI > ISODEP_FWI_MAX )
 800e35a:	7bfb      	ldrb	r3, [r7, #15]
 800e35c:	2b0e      	cmp	r3, #14
 800e35e:	d901      	bls.n	800e364 <rfalIsoDepFWI2FWT+0x18>
    {
        tmpFWI = RFAL_ISODEP_FWI_DEFAULT;
 800e360:	2304      	movs	r3, #4
 800e362:	73fb      	strb	r3, [r7, #15]
    }

    /* FWT = (256 x 16/fC) x 2^FWI => 2^(FWI+12)  Digital 1.1  13.8.1 & 7.9.1 */
    
    result = ((uint32_t)1U << (tmpFWI + 12U));
 800e364:	7bfb      	ldrb	r3, [r7, #15]
 800e366:	330c      	adds	r3, #12
 800e368:	2201      	movs	r2, #1
 800e36a:	fa02 f303 	lsl.w	r3, r2, r3
 800e36e:	60bb      	str	r3, [r7, #8]
    result = MIN( RFAL_ISODEP_MAX_FWT, result);  /* Maximum Frame Waiting Time must be fulfilled */
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e376:	bf28      	it	cs
 800e378:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 800e37c:	60bb      	str	r3, [r7, #8]
    
    return result;
 800e37e:	68bb      	ldr	r3, [r7, #8]
}
 800e380:	4618      	mov	r0, r3
 800e382:	3714      	adds	r7, #20
 800e384:	46bd      	mov	sp, r7
 800e386:	bc80      	pop	{r7}
 800e388:	4770      	bx	lr
	...

0800e38c <rfalIsoDepFSxI2FSx>:


/*******************************************************************************/
uint16_t rfalIsoDepFSxI2FSx( uint8_t FSxI )
{
 800e38c:	b480      	push	{r7}
 800e38e:	b085      	sub	sp, #20
 800e390:	af00      	add	r7, sp, #0
 800e392:	4603      	mov	r3, r0
 800e394:	71fb      	strb	r3, [r7, #7]
    uint16_t fsx;
    uint8_t  fsi;
    
    /* Enforce maximum FSxI/FSx allowed - NFC Forum and EMVCo differ */
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 800e396:	4b33      	ldr	r3, [pc, #204]	; (800e464 <rfalIsoDepFSxI2FSx+0xd8>)
 800e398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d105      	bne.n	800e3ac <rfalIsoDepFSxI2FSx+0x20>
 800e3a0:	79fb      	ldrb	r3, [r7, #7]
 800e3a2:	2b0c      	cmp	r3, #12
 800e3a4:	bf28      	it	cs
 800e3a6:	230c      	movcs	r3, #12
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	e004      	b.n	800e3b6 <rfalIsoDepFSxI2FSx+0x2a>
 800e3ac:	79fb      	ldrb	r3, [r7, #7]
 800e3ae:	2b08      	cmp	r3, #8
 800e3b0:	bf28      	it	cs
 800e3b2:	2308      	movcs	r3, #8
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	737b      	strb	r3, [r7, #13]
    
    switch( fsi )
 800e3b8:	7b7b      	ldrb	r3, [r7, #13]
 800e3ba:	2b0c      	cmp	r3, #12
 800e3bc:	d848      	bhi.n	800e450 <rfalIsoDepFSxI2FSx+0xc4>
 800e3be:	a201      	add	r2, pc, #4	; (adr r2, 800e3c4 <rfalIsoDepFSxI2FSx+0x38>)
 800e3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c4:	0800e3f9 	.word	0x0800e3f9
 800e3c8:	0800e3ff 	.word	0x0800e3ff
 800e3cc:	0800e405 	.word	0x0800e405
 800e3d0:	0800e40b 	.word	0x0800e40b
 800e3d4:	0800e411 	.word	0x0800e411
 800e3d8:	0800e417 	.word	0x0800e417
 800e3dc:	0800e41d 	.word	0x0800e41d
 800e3e0:	0800e423 	.word	0x0800e423
 800e3e4:	0800e429 	.word	0x0800e429
 800e3e8:	0800e431 	.word	0x0800e431
 800e3ec:	0800e439 	.word	0x0800e439
 800e3f0:	0800e441 	.word	0x0800e441
 800e3f4:	0800e449 	.word	0x0800e449
    {
        case (uint8_t)RFAL_ISODEP_FSXI_16:           fsx = (uint16_t)RFAL_ISODEP_FSX_16;   break;
 800e3f8:	2310      	movs	r3, #16
 800e3fa:	81fb      	strh	r3, [r7, #14]
 800e3fc:	e02c      	b.n	800e458 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_24:           fsx = (uint16_t)RFAL_ISODEP_FSX_24;   break;
 800e3fe:	2318      	movs	r3, #24
 800e400:	81fb      	strh	r3, [r7, #14]
 800e402:	e029      	b.n	800e458 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_32:           fsx = (uint16_t)RFAL_ISODEP_FSX_32;   break;
 800e404:	2320      	movs	r3, #32
 800e406:	81fb      	strh	r3, [r7, #14]
 800e408:	e026      	b.n	800e458 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_40:           fsx = (uint16_t)RFAL_ISODEP_FSX_40;   break;
 800e40a:	2328      	movs	r3, #40	; 0x28
 800e40c:	81fb      	strh	r3, [r7, #14]
 800e40e:	e023      	b.n	800e458 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_48:           fsx = (uint16_t)RFAL_ISODEP_FSX_48;   break;
 800e410:	2330      	movs	r3, #48	; 0x30
 800e412:	81fb      	strh	r3, [r7, #14]
 800e414:	e020      	b.n	800e458 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_64:           fsx = (uint16_t)RFAL_ISODEP_FSX_64;   break;
 800e416:	2340      	movs	r3, #64	; 0x40
 800e418:	81fb      	strh	r3, [r7, #14]
 800e41a:	e01d      	b.n	800e458 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_96:           fsx = (uint16_t)RFAL_ISODEP_FSX_96;   break;
 800e41c:	2360      	movs	r3, #96	; 0x60
 800e41e:	81fb      	strh	r3, [r7, #14]
 800e420:	e01a      	b.n	800e458 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_128:          fsx = (uint16_t)RFAL_ISODEP_FSX_128;  break;
 800e422:	2380      	movs	r3, #128	; 0x80
 800e424:	81fb      	strh	r3, [r7, #14]
 800e426:	e017      	b.n	800e458 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_256:          fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 800e428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e42c:	81fb      	strh	r3, [r7, #14]
 800e42e:	e013      	b.n	800e458 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_512:          fsx = (uint16_t)RFAL_ISODEP_FSX_512;  break;
 800e430:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e434:	81fb      	strh	r3, [r7, #14]
 800e436:	e00f      	b.n	800e458 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_1024:         fsx = (uint16_t)RFAL_ISODEP_FSX_1024; break;
 800e438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e43c:	81fb      	strh	r3, [r7, #14]
 800e43e:	e00b      	b.n	800e458 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_2048:         fsx = (uint16_t)RFAL_ISODEP_FSX_2048; break;
 800e440:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e444:	81fb      	strh	r3, [r7, #14]
 800e446:	e007      	b.n	800e458 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_4096:         fsx = (uint16_t)RFAL_ISODEP_FSX_4096; break;
 800e448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e44c:	81fb      	strh	r3, [r7, #14]
 800e44e:	e003      	b.n	800e458 <rfalIsoDepFSxI2FSx+0xcc>
        default:                                     fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 800e450:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e454:	81fb      	strh	r3, [r7, #14]
 800e456:	bf00      	nop
    }
    return fsx;
 800e458:	89fb      	ldrh	r3, [r7, #14]
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3714      	adds	r7, #20
 800e45e:	46bd      	mov	sp, r7
 800e460:	bc80      	pop	{r7}
 800e462:	4770      	bx	lr
 800e464:	200031e4 	.word	0x200031e4

0800e468 <rfalIsoDepGetMaxInfLen>:
#endif  /* RFAL_FEATURE_ISO_DEP_LISTEN */


/*******************************************************************************/
uint16_t rfalIsoDepGetMaxInfLen( void )
{
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
    /* Check whether all parameters are valid, otherwise return minimum default value */
    if( (gIsoDep.fsx < (uint16_t)RFAL_ISODEP_FSX_16) || (gIsoDep.fsx > (uint16_t)RFAL_ISODEP_FSX_4096) || (gIsoDep.hdrLen > ISODEP_HDR_MAX_LEN) )
 800e46e:	4b11      	ldr	r3, [pc, #68]	; (800e4b4 <rfalIsoDepGetMaxInfLen+0x4c>)
 800e470:	8a1b      	ldrh	r3, [r3, #16]
 800e472:	2b0f      	cmp	r3, #15
 800e474:	d909      	bls.n	800e48a <rfalIsoDepGetMaxInfLen+0x22>
 800e476:	4b0f      	ldr	r3, [pc, #60]	; (800e4b4 <rfalIsoDepGetMaxInfLen+0x4c>)
 800e478:	8a1b      	ldrh	r3, [r3, #16]
 800e47a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e47e:	d804      	bhi.n	800e48a <rfalIsoDepGetMaxInfLen+0x22>
 800e480:	4b0c      	ldr	r3, [pc, #48]	; (800e4b4 <rfalIsoDepGetMaxInfLen+0x4c>)
 800e482:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e486:	2b03      	cmp	r3, #3
 800e488:	d905      	bls.n	800e496 <rfalIsoDepGetMaxInfLen+0x2e>
    {
        uint16_t isodepFsx16 = (uint16_t)RFAL_ISODEP_FSX_16;  /* MISRA 10.1 */
 800e48a:	2310      	movs	r3, #16
 800e48c:	80fb      	strh	r3, [r7, #6]
        return (isodepFsx16 - RFAL_ISODEP_PCB_LEN - ISODEP_CRC_LEN);
 800e48e:	88fb      	ldrh	r3, [r7, #6]
 800e490:	3b03      	subs	r3, #3
 800e492:	b29b      	uxth	r3, r3
 800e494:	e009      	b.n	800e4aa <rfalIsoDepGetMaxInfLen+0x42>
    }
    
    return (gIsoDep.fsx - gIsoDep.hdrLen - ISODEP_CRC_LEN);
 800e496:	4b07      	ldr	r3, [pc, #28]	; (800e4b4 <rfalIsoDepGetMaxInfLen+0x4c>)
 800e498:	8a1a      	ldrh	r2, [r3, #16]
 800e49a:	4b06      	ldr	r3, [pc, #24]	; (800e4b4 <rfalIsoDepGetMaxInfLen+0x4c>)
 800e49c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	1ad3      	subs	r3, r2, r3
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	3b02      	subs	r3, #2
 800e4a8:	b29b      	uxth	r3, r3
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	370c      	adds	r7, #12
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bc80      	pop	{r7}
 800e4b2:	4770      	bx	lr
 800e4b4:	200031e4 	.word	0x200031e4

0800e4b8 <rfalIsoDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalIsoDepStartTransceive( rfalIsoDepTxRxParam param )
{
 800e4b8:	b084      	sub	sp, #16
 800e4ba:	b580      	push	{r7, lr}
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	f107 0c08 	add.w	ip, r7, #8
 800e4c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    gIsoDep.txBuf        = param.txBuf->prologue;
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	4b30      	ldr	r3, [pc, #192]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e4cc:	615a      	str	r2, [r3, #20]
    gIsoDep.txBufInfPos  = (uint8_t)((uint32_t)param.txBuf->inf - (uint32_t)param.txBuf->prologue);
 800e4ce:	4b2f      	ldr	r3, [pc, #188]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e4d0:	2203      	movs	r2, #3
 800e4d2:	f883 2020 	strb.w	r2, [r3, #32]
    gIsoDep.txBufLen     = param.txBufLen;
 800e4d6:	89ba      	ldrh	r2, [r7, #12]
 800e4d8:	4b2c      	ldr	r3, [pc, #176]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e4da:	839a      	strh	r2, [r3, #28]
    gIsoDep.isTxChaining = param.isTxChaining;
 800e4dc:	7bba      	ldrb	r2, [r7, #14]
 800e4de:	4b2b      	ldr	r3, [pc, #172]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e4e0:	749a      	strb	r2, [r3, #18]
    
    gIsoDep.rxBuf        = param.rxBuf->prologue;
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	4b29      	ldr	r3, [pc, #164]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e4e8:	619a      	str	r2, [r3, #24]
    gIsoDep.rxBufInfPos  = (uint8_t)((uint32_t)param.rxBuf->inf - (uint32_t)param.rxBuf->prologue);
 800e4ea:	4b28      	ldr	r3, [pc, #160]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e4ec:	2203      	movs	r2, #3
 800e4ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    gIsoDep.rxBufLen     = sizeof(rfalIsoDepBufFormat);
 800e4f2:	4b26      	ldr	r3, [pc, #152]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e4f4:	f240 1203 	movw	r2, #259	; 0x103
 800e4f8:	83da      	strh	r2, [r3, #30]
    
    gIsoDep.rxLen        = param.rxLen;
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	4a23      	ldr	r2, [pc, #140]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e4fe:	62d3      	str	r3, [r2, #44]	; 0x2c
    gIsoDep.rxChaining   = param.isRxChaining;
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	4a22      	ldr	r2, [pc, #136]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e504:	6313      	str	r3, [r2, #48]	; 0x30
    
    
    gIsoDep.fwt          = param.FWT;
 800e506:	69fb      	ldr	r3, [r7, #28]
 800e508:	4a20      	ldr	r2, [pc, #128]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e50a:	6093      	str	r3, [r2, #8]
    gIsoDep.dFwt         = param.dFWT;
 800e50c:	6a3b      	ldr	r3, [r7, #32]
 800e50e:	4a1f      	ldr	r2, [pc, #124]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e510:	60d3      	str	r3, [r2, #12]
    gIsoDep.fsx          = param.FSx;
 800e512:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e514:	4b1d      	ldr	r3, [pc, #116]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e516:	821a      	strh	r2, [r3, #16]
    gIsoDep.did          = param.DID;
 800e518:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e51c:	4b1b      	ldr	r3, [pc, #108]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e51e:	70da      	strb	r2, [r3, #3]
    
    /* Only change the FSx from activation if no to Keep */
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 800e520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e522:	2bff      	cmp	r3, #255	; 0xff
 800e524:	d001      	beq.n	800e52a <rfalIsoDepStartTransceive+0x72>
 800e526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e528:	e001      	b.n	800e52e <rfalIsoDepStartTransceive+0x76>
 800e52a:	4b18      	ldr	r3, [pc, #96]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e52c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e52e:	4a17      	ldr	r2, [pc, #92]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e530:	8453      	strh	r3, [r2, #34]	; 0x22
    
    /* Clear inner control params for next dataExchange */
    gIsoDep.isRxChaining  = false;
 800e532:	4b16      	ldr	r3, [pc, #88]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e534:	2200      	movs	r2, #0
 800e536:	74da      	strb	r2, [r3, #19]
    isoDepClearCounters();
 800e538:	f7ff fa5e 	bl	800d9f8 <isoDepClearCounters>
    
    if(gIsoDep.role == ISODEP_ROLE_PICC)
 800e53c:	4b13      	ldr	r3, [pc, #76]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e53e:	785b      	ldrb	r3, [r3, #1]
 800e540:	2b01      	cmp	r3, #1
 800e542:	d119      	bne.n	800e578 <rfalIsoDepStartTransceive+0xc0>
    {
       if(gIsoDep.txBufLen > 0U)
 800e544:	4b11      	ldr	r3, [pc, #68]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e546:	8b9b      	ldrh	r3, [r3, #28]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d010      	beq.n	800e56e <rfalIsoDepStartTransceive+0xb6>
       {
           /* Ensure that an RTOX Ack is not being expected at moment */
           if( !gIsoDep.isWait4WTX )
 800e54c:	4b0f      	ldr	r3, [pc, #60]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e54e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e552:	f083 0301 	eor.w	r3, r3, #1
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d004      	beq.n	800e566 <rfalIsoDepStartTransceive+0xae>
           {
               gIsoDep.state = ISODEP_ST_PICC_TX;
 800e55c:	4b0b      	ldr	r3, [pc, #44]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e55e:	2208      	movs	r2, #8
 800e560:	701a      	strb	r2, [r3, #0]
               return ERR_NONE;
 800e562:	2300      	movs	r3, #0
 800e564:	e00c      	b.n	800e580 <rfalIsoDepStartTransceive+0xc8>
           }
           else
           {
               /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
               gIsoDep.isTxPending = true;
 800e566:	4b09      	ldr	r3, [pc, #36]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e568:	2201      	movs	r2, #1
 800e56a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
           }
       }
       
       /* Digital 1.1  15.2.5.1 The first block SHALL be sent by the Reader/Writer */
       gIsoDep.state = ISODEP_ST_PICC_RX;
 800e56e:	4b07      	ldr	r3, [pc, #28]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e570:	2206      	movs	r2, #6
 800e572:	701a      	strb	r2, [r3, #0]
       return ERR_NONE;
 800e574:	2300      	movs	r3, #0
 800e576:	e003      	b.n	800e580 <rfalIsoDepStartTransceive+0xc8>
    }
    
    gIsoDep.state = ISODEP_ST_PCD_TX;
 800e578:	4b04      	ldr	r3, [pc, #16]	; (800e58c <rfalIsoDepStartTransceive+0xd4>)
 800e57a:	2201      	movs	r2, #1
 800e57c:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 800e57e:	2300      	movs	r3, #0
}
 800e580:	4618      	mov	r0, r3
 800e582:	46bd      	mov	sp, r7
 800e584:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e588:	b004      	add	sp, #16
 800e58a:	4770      	bx	lr
 800e58c:	200031e4 	.word	0x200031e4

0800e590 <rfalIsoDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalIsoDepGetTransceiveStatus( void )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	af00      	add	r7, sp, #0
    if( gIsoDep.role == ISODEP_ROLE_PICC)
 800e594:	4b08      	ldr	r3, [pc, #32]	; (800e5b8 <rfalIsoDepGetTransceiveStatus+0x28>)
 800e596:	785b      	ldrb	r3, [r3, #1]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d101      	bne.n	800e5a0 <rfalIsoDepGetTransceiveStatus+0x10>
    {
#if RFAL_FEATURE_ISO_DEP_LISTEN
        return isoDepDataExchangePICC();
#else
        return ERR_NOTSUPP;
 800e59c:	2318      	movs	r3, #24
 800e59e:	e008      	b.n	800e5b2 <rfalIsoDepGetTransceiveStatus+0x22>
#endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
    }
    else
    {
#if RFAL_FEATURE_ISO_DEP_POLL
        return isoDepDataExchangePCD( gIsoDep.rxLen, gIsoDep.rxChaining );
 800e5a0:	4b05      	ldr	r3, [pc, #20]	; (800e5b8 <rfalIsoDepGetTransceiveStatus+0x28>)
 800e5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a4:	4a04      	ldr	r2, [pc, #16]	; (800e5b8 <rfalIsoDepGetTransceiveStatus+0x28>)
 800e5a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e5a8:	4611      	mov	r1, r2
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7ff fbda 	bl	800dd64 <isoDepDataExchangePCD>
 800e5b0:	4603      	mov	r3, r0
#else
        return ERR_NOTSUPP;
#endif /* RFAL_FEATURE_ISO_DEP_POLL */
    }
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	200031e4 	.word	0x200031e4

0800e5bc <rfalIsoDepRATS>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepRATS( rfalIsoDepFSxI FSDI, uint8_t DID, rfalIsoDepAts *ats , uint8_t *atsLen)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b08a      	sub	sp, #40	; 0x28
 800e5c0:	af04      	add	r7, sp, #16
 800e5c2:	60ba      	str	r2, [r7, #8]
 800e5c4:	607b      	str	r3, [r7, #4]
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	73fb      	strb	r3, [r7, #15]
 800e5ca:	460b      	mov	r3, r1
 800e5cc:	73bb      	strb	r3, [r7, #14]
    uint16_t       rcvLen;
    ReturnCode     ret;
    rfalIsoDepRats ratsReq;
    
    if( ats == NULL )
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d101      	bne.n	800e5d8 <rfalIsoDepRATS+0x1c>
    {
        return ERR_PARAM;
 800e5d4:	2307      	movs	r3, #7
 800e5d6:	e03c      	b.n	800e652 <rfalIsoDepRATS+0x96>
    }
    
    /*******************************************************************************/
    /* Compose RATS */
    ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 800e5d8:	23e0      	movs	r3, #224	; 0xe0
 800e5da:	743b      	strb	r3, [r7, #16]
    ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 800e5dc:	7bfb      	ldrb	r3, [r7, #15]
 800e5de:	011b      	lsls	r3, r3, #4
 800e5e0:	b2da      	uxtb	r2, r3
 800e5e2:	7bbb      	ldrb	r3, [r7, #14]
 800e5e4:	f003 030f 	and.w	r3, r3, #15
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	4313      	orrs	r3, r2
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	747b      	strb	r3, [r7, #17]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800e5f0:	f107 0010 	add.w	r0, r7, #16
 800e5f4:	4b19      	ldr	r3, [pc, #100]	; (800e65c <rfalIsoDepRATS+0xa0>)
 800e5f6:	9302      	str	r3, [sp, #8]
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	9301      	str	r3, [sp, #4]
 800e5fc:	f107 0314 	add.w	r3, r7, #20
 800e600:	9300      	str	r3, [sp, #0]
 800e602:	2314      	movs	r3, #20
 800e604:	68ba      	ldr	r2, [r7, #8]
 800e606:	2102      	movs	r1, #2
 800e608:	f007 fc78 	bl	8015efc <rfalTransceiveBlockingTxRx>
 800e60c:	4603      	mov	r3, r0
 800e60e:	82fb      	strh	r3, [r7, #22]
    
    if( ret == ERR_NONE )
 800e610:	8afb      	ldrh	r3, [r7, #22]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d115      	bne.n	800e642 <rfalIsoDepRATS+0x86>
    {
        /* Check for valid ATS length  Digital 1.1  13.6.2.1 & 13.6.2.3 */
        if( (rcvLen < RFAL_ISODEP_ATS_MIN_LEN) || (rcvLen > RFAL_ISODEP_ATS_MAX_LEN) || (ats->TL != rcvLen) )
 800e616:	8abb      	ldrh	r3, [r7, #20]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d008      	beq.n	800e62e <rfalIsoDepRATS+0x72>
 800e61c:	8abb      	ldrh	r3, [r7, #20]
 800e61e:	2b14      	cmp	r3, #20
 800e620:	d805      	bhi.n	800e62e <rfalIsoDepRATS+0x72>
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	b29a      	uxth	r2, r3
 800e628:	8abb      	ldrh	r3, [r7, #20]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d001      	beq.n	800e632 <rfalIsoDepRATS+0x76>
        {
            return ERR_PROTO;
 800e62e:	230b      	movs	r3, #11
 800e630:	e00f      	b.n	800e652 <rfalIsoDepRATS+0x96>
        }
        
        /* Assign our FSx, in case the a Deselect is send without Transceive */
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 800e632:	7bfb      	ldrb	r3, [r7, #15]
 800e634:	4618      	mov	r0, r3
 800e636:	f7ff fea9 	bl	800e38c <rfalIsoDepFSxI2FSx>
 800e63a:	4603      	mov	r3, r0
 800e63c:	461a      	mov	r2, r3
 800e63e:	4b08      	ldr	r3, [pc, #32]	; (800e660 <rfalIsoDepRATS+0xa4>)
 800e640:	845a      	strh	r2, [r3, #34]	; 0x22
    }
    
    /* Check and assign if ATS length was requested (length also available on TL) */
    if( atsLen != NULL )
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d003      	beq.n	800e650 <rfalIsoDepRATS+0x94>
    {
        *atsLen = (uint8_t)rcvLen;
 800e648:	8abb      	ldrh	r3, [r7, #20]
 800e64a:	b2da      	uxtb	r2, r3
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 800e650:	8afb      	ldrh	r3, [r7, #22]
}
 800e652:	4618      	mov	r0, r3
 800e654:	3718      	adds	r7, #24
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	00046780 	.word	0x00046780
 800e660:	200031e4 	.word	0x200031e4

0800e664 <rfalIsoDepPPS>:


/*******************************************************************************/
ReturnCode rfalIsoDepPPS( uint8_t DID, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepPpsRes *ppsRes )
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b088      	sub	sp, #32
 800e668:	af04      	add	r7, sp, #16
 800e66a:	603b      	str	r3, [r7, #0]
 800e66c:	4603      	mov	r3, r0
 800e66e:	71fb      	strb	r3, [r7, #7]
 800e670:	460b      	mov	r3, r1
 800e672:	71bb      	strb	r3, [r7, #6]
 800e674:	4613      	mov	r3, r2
 800e676:	717b      	strb	r3, [r7, #5]
    uint16_t         rcvLen;
    ReturnCode       ret;
    rfalIsoDepPpsReq ppsReq;
    
    if( (ppsRes == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d008      	beq.n	800e690 <rfalIsoDepPPS+0x2c>
 800e67e:	79bb      	ldrb	r3, [r7, #6]
 800e680:	2b03      	cmp	r3, #3
 800e682:	d805      	bhi.n	800e690 <rfalIsoDepPPS+0x2c>
 800e684:	797b      	ldrb	r3, [r7, #5]
 800e686:	2b03      	cmp	r3, #3
 800e688:	d802      	bhi.n	800e690 <rfalIsoDepPPS+0x2c>
 800e68a:	79fb      	ldrb	r3, [r7, #7]
 800e68c:	2b0e      	cmp	r3, #14
 800e68e:	d901      	bls.n	800e694 <rfalIsoDepPPS+0x30>
    {
        return ERR_PARAM;
 800e690:	2307      	movs	r3, #7
 800e692:	e033      	b.n	800e6fc <rfalIsoDepPPS+0x98>
    }
    
    /*******************************************************************************/
    /* Compose PPS Request */
    ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 800e694:	79fb      	ldrb	r3, [r7, #7]
 800e696:	f003 030f 	and.w	r3, r3, #15
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	723b      	strb	r3, [r7, #8]
    ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 800e6a4:	2311      	movs	r3, #17
 800e6a6:	727b      	strb	r3, [r7, #9]
    ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 800e6a8:	79bb      	ldrb	r3, [r7, #6]
 800e6aa:	009b      	lsls	r3, r3, #2
 800e6ac:	b25a      	sxtb	r2, r3
 800e6ae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800e6b2:	4313      	orrs	r3, r2
 800e6b4:	b25b      	sxtb	r3, r3
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	f003 030f 	and.w	r3, r3, #15
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	72bb      	strb	r3, [r7, #10]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800e6c0:	f107 0008 	add.w	r0, r7, #8
 800e6c4:	4b0f      	ldr	r3, [pc, #60]	; (800e704 <rfalIsoDepPPS+0xa0>)
 800e6c6:	9302      	str	r3, [sp, #8]
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	9301      	str	r3, [sp, #4]
 800e6cc:	f107 030c 	add.w	r3, r7, #12
 800e6d0:	9300      	str	r3, [sp, #0]
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	683a      	ldr	r2, [r7, #0]
 800e6d6:	2103      	movs	r1, #3
 800e6d8:	f007 fc10 	bl	8015efc <rfalTransceiveBlockingTxRx>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	81fb      	strh	r3, [r7, #14]
    
    if( ret == ERR_NONE )
 800e6e0:	89fb      	ldrh	r3, [r7, #14]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d109      	bne.n	800e6fa <rfalIsoDepPPS+0x96>
    {
        /* Check for valid PPS Response   */
        if( (rcvLen != RFAL_ISODEP_PPS_RES_LEN) || (ppsRes->PPSS != ppsReq.PPSS) )
 800e6e6:	89bb      	ldrh	r3, [r7, #12]
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d104      	bne.n	800e6f6 <rfalIsoDepPPS+0x92>
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	781a      	ldrb	r2, [r3, #0]
 800e6f0:	7a3b      	ldrb	r3, [r7, #8]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d001      	beq.n	800e6fa <rfalIsoDepPPS+0x96>
        {
            return ERR_PROTO;
 800e6f6:	230b      	movs	r3, #11
 800e6f8:	e000      	b.n	800e6fc <rfalIsoDepPPS+0x98>
        }
    }
    return ret;
 800e6fa:	89fb      	ldrh	r3, [r7, #14]
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3710      	adds	r7, #16
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	00046780 	.word	0x00046780

0800e708 <rfalIsoDepATTRIB>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepATTRIB( const uint8_t* nfcid0, uint8_t PARAM1, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepFSxI FSDI, uint8_t PARAM3, uint8_t DID, const uint8_t* HLInfo, uint8_t HLInfoLen, uint32_t fwt, rfalIsoDepAttribRes *attribRes, uint8_t *attribResLen )
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b092      	sub	sp, #72	; 0x48
 800e70c:	af04      	add	r7, sp, #16
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	4608      	mov	r0, r1
 800e712:	4611      	mov	r1, r2
 800e714:	461a      	mov	r2, r3
 800e716:	4603      	mov	r3, r0
 800e718:	70fb      	strb	r3, [r7, #3]
 800e71a:	460b      	mov	r3, r1
 800e71c:	70bb      	strb	r3, [r7, #2]
 800e71e:	4613      	mov	r3, r2
 800e720:	707b      	strb	r3, [r7, #1]
    uint16_t            rcvLen;
    ReturnCode          ret;
    rfalIsoDepAttribCmd attribCmd;
    
    
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 800e722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e724:	2b00      	cmp	r3, #0
 800e726:	d00c      	beq.n	800e742 <rfalIsoDepATTRIB+0x3a>
 800e728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d009      	beq.n	800e742 <rfalIsoDepATTRIB+0x3a>
 800e72e:	78bb      	ldrb	r3, [r7, #2]
 800e730:	2b03      	cmp	r3, #3
 800e732:	d806      	bhi.n	800e742 <rfalIsoDepATTRIB+0x3a>
 800e734:	787b      	ldrb	r3, [r7, #1]
 800e736:	2b03      	cmp	r3, #3
 800e738:	d803      	bhi.n	800e742 <rfalIsoDepATTRIB+0x3a>
 800e73a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e73e:	2b0e      	cmp	r3, #14
 800e740:	d901      	bls.n	800e746 <rfalIsoDepATTRIB+0x3e>
    {
        return ERR_NONE;
 800e742:	2300      	movs	r3, #0
 800e744:	e066      	b.n	800e814 <rfalIsoDepATTRIB+0x10c>
    }
    
    /*******************************************************************************/
    /* Compose ATTRIB command */
    attribCmd.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 800e746:	231d      	movs	r3, #29
 800e748:	723b      	strb	r3, [r7, #8]
    attribCmd.Param.PARAM1 = PARAM1;
 800e74a:	78fb      	ldrb	r3, [r7, #3]
 800e74c:	737b      	strb	r3, [r7, #13]
    attribCmd.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 800e74e:	78bb      	ldrb	r3, [r7, #2]
 800e750:	019b      	lsls	r3, r3, #6
 800e752:	b25a      	sxtb	r2, r3
 800e754:	787b      	ldrb	r3, [r7, #1]
 800e756:	011b      	lsls	r3, r3, #4
 800e758:	b25b      	sxtb	r3, r3
 800e75a:	4313      	orrs	r3, r2
 800e75c:	b25b      	sxtb	r3, r3
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	f023 030f 	bic.w	r3, r3, #15
 800e764:	b2da      	uxtb	r2, r3
 800e766:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e76a:	f003 030f 	and.w	r3, r3, #15
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	4313      	orrs	r3, r2
 800e772:	b2db      	uxtb	r3, r3
 800e774:	73bb      	strb	r3, [r7, #14]
    attribCmd.Param.PARAM3 = PARAM3;
 800e776:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800e77a:	73fb      	strb	r3, [r7, #15]
    attribCmd.Param.PARAM4 = (DID & RFAL_ISODEP_ATTRIB_PARAM4_DID_MASK);
 800e77c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e780:	f003 030f 	and.w	r3, r3, #15
 800e784:	b2db      	uxtb	r3, r3
 800e786:	743b      	strb	r3, [r7, #16]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
    ST_MEMCPY(attribCmd.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN);
 800e78c:	f8c7 3009 	str.w	r3, [r7, #9]
    
    /* Append the Higher layer Info if provided */
    if( (HLInfo != NULL) && (HLInfoLen > 0U) )
 800e790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e792:	2b00      	cmp	r3, #0
 800e794:	d011      	beq.n	800e7ba <rfalIsoDepATTRIB+0xb2>
 800e796:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d00d      	beq.n	800e7ba <rfalIsoDepATTRIB+0xb2>
    {
        ST_MEMCPY(attribCmd.HLInfo, HLInfo, MIN(HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN) );
 800e79e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800e7a2:	2b20      	cmp	r3, #32
 800e7a4:	bf28      	it	cs
 800e7a6:	2320      	movcs	r3, #32
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	f107 0308 	add.w	r3, r7, #8
 800e7b0:	3309      	adds	r3, #9
 800e7b2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f00a faab 	bl	8018d10 <memcpy>
    }
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&attribCmd, (RFAL_ISODEP_ATTRIB_HDR_LEN + MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)attribRes, sizeof(rfalIsoDepAttribRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 800e7ba:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800e7be:	2b20      	cmp	r3, #32
 800e7c0:	bf28      	it	cs
 800e7c2:	2320      	movcs	r3, #32
 800e7c4:	b2db      	uxtb	r3, r3
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	3309      	adds	r3, #9
 800e7ca:	b299      	uxth	r1, r3
 800e7cc:	f107 0008 	add.w	r0, r7, #8
 800e7d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7d2:	9302      	str	r3, [sp, #8]
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	9301      	str	r3, [sp, #4]
 800e7d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e7dc:	9300      	str	r3, [sp, #0]
 800e7de:	2321      	movs	r3, #33	; 0x21
 800e7e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e7e2:	f007 fb8b 	bl	8015efc <rfalTransceiveBlockingTxRx>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	86fb      	strh	r3, [r7, #54]	; 0x36
       
    *attribResLen = (uint8_t)rcvLen;
 800e7ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e7ec:	b2da      	uxtb	r2, r3
 800e7ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7f0:	701a      	strb	r2, [r3, #0]
    
    if( ret == ERR_NONE )
 800e7f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d10c      	bne.n	800e812 <rfalIsoDepATTRIB+0x10a>
    {
        /* Check a for valid ATTRIB Response   Digital 1.1  15.6.2.1 */
        if( (rcvLen < RFAL_ISODEP_ATTRIB_RES_HDR_LEN) || ((attribRes->mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID) )
 800e7f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d007      	beq.n	800e80e <rfalIsoDepATTRIB+0x106>
 800e7fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	f003 020f 	and.w	r2, r3, #15
 800e806:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d001      	beq.n	800e812 <rfalIsoDepATTRIB+0x10a>
        {
           return ERR_PROTO;
 800e80e:	230b      	movs	r3, #11
 800e810:	e000      	b.n	800e814 <rfalIsoDepATTRIB+0x10c>
        }
    }
   
   return ret;
 800e812:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800e814:	4618      	mov	r0, r3
 800e816:	3738      	adds	r7, #56	; 0x38
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <rfalIsoDepPollAHandleActivation>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepPollAHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, rfalIsoDepDevice *isoDepDev )
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	603b      	str	r3, [r7, #0]
 800e824:	4603      	mov	r3, r0
 800e826:	71fb      	strb	r3, [r7, #7]
 800e828:	460b      	mov	r3, r1
 800e82a:	71bb      	strb	r3, [r7, #6]
 800e82c:	4613      	mov	r3, r2
 800e82e:	717b      	strb	r3, [r7, #5]
    uint8_t          RATSretries;
    uint8_t          msgIt;
    ReturnCode       ret;
    rfalIsoDepPpsRes ppsRes;
    
    if( isoDepDev == NULL )
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d101      	bne.n	800e83a <rfalIsoDepPollAHandleActivation+0x1e>
    {
        return ERR_PARAM;
 800e836:	2307      	movs	r3, #7
 800e838:	e143      	b.n	800eac2 <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /* Enable EMD handling according   Digital 1.1  4.1.1.1 ; EMVCo 2.6  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 800e83a:	2002      	movs	r0, #2
 800e83c:	f007 f8ca 	bl	80159d4 <rfalSetErrorHandling>
    
    RATSretries = gIsoDep.maxRetriesRATS;
 800e840:	4ba2      	ldr	r3, [pc, #648]	; (800eacc <rfalIsoDepPollAHandleActivation+0x2b0>)
 800e842:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e846:	73fb      	strb	r3, [r7, #15]
    /***************************************************************************/
    /* Send RATS                                                               */
    do
    {
        /* Digital 1.1 13.7.1.1 and ISO 14443-4 5.6.1.1 - Upon a failed RATS it may be retransmited [0,1] */
        ret = rfalIsoDepRATS( FSDI, DID, &isoDepDev->activation.A.Listener.ATS, &isoDepDev->activation.A.Listener.ATSLen );
 800e848:	683a      	ldr	r2, [r7, #0]
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	3314      	adds	r3, #20
 800e84e:	79b9      	ldrb	r1, [r7, #6]
 800e850:	79f8      	ldrb	r0, [r7, #7]
 800e852:	f7ff feb3 	bl	800e5bc <rfalIsoDepRATS>
 800e856:	4603      	mov	r3, r0
 800e858:	81bb      	strh	r3, [r7, #12]
        
        /* EMVCo 2.6  9.6.1.1 & 9.6.1.2  If a timeout error is detected retransmit, on transmission error abort */
        if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != ERR_NONE) && (ret != ERR_TIMEOUT) )
 800e85a:	4b9c      	ldr	r3, [pc, #624]	; (800eacc <rfalIsoDepPollAHandleActivation+0x2b0>)
 800e85c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e860:	2b01      	cmp	r3, #1
 800e862:	d105      	bne.n	800e870 <rfalIsoDepPollAHandleActivation+0x54>
 800e864:	89bb      	ldrh	r3, [r7, #12]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d002      	beq.n	800e870 <rfalIsoDepPollAHandleActivation+0x54>
 800e86a:	89bb      	ldrh	r3, [r7, #12]
 800e86c:	2b04      	cmp	r3, #4
 800e86e:	d10b      	bne.n	800e888 <rfalIsoDepPollAHandleActivation+0x6c>
        {
            break;
        }
        
        platformDelay(1);
 800e870:	2001      	movs	r0, #1
 800e872:	f7f5 fd23 	bl	80042bc <HAL_Delay>
    }
    while( ((RATSretries--) != 0U) && (ret != ERR_NONE) );
 800e876:	7bfb      	ldrb	r3, [r7, #15]
 800e878:	1e5a      	subs	r2, r3, #1
 800e87a:	73fa      	strb	r2, [r7, #15]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d004      	beq.n	800e88a <rfalIsoDepPollAHandleActivation+0x6e>
 800e880:	89bb      	ldrh	r3, [r7, #12]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d1e0      	bne.n	800e848 <rfalIsoDepPollAHandleActivation+0x2c>
 800e886:	e000      	b.n	800e88a <rfalIsoDepPollAHandleActivation+0x6e>
            break;
 800e888:	bf00      	nop
    
    
    /* Switch between NFC Forum and ISO14443-4 behaviour #595
     *   ISO14443-4  5.6.1  If RATS fails, a Deactivation sequence should be performed as defined on clause 8  
     *   Activity 1.1  9.6  Device Deactivation Activity is to be only performed when there's an active device */
    if( ret != ERR_NONE )
 800e88a:	89bb      	ldrh	r3, [r7, #12]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d008      	beq.n	800e8a2 <rfalIsoDepPollAHandleActivation+0x86>
    {
        if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_ISO )
 800e890:	4b8e      	ldr	r3, [pc, #568]	; (800eacc <rfalIsoDepPollAHandleActivation+0x2b0>)
 800e892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e896:	2b02      	cmp	r3, #2
 800e898:	d101      	bne.n	800e89e <rfalIsoDepPollAHandleActivation+0x82>
        {
            rfalIsoDepDeselect();
 800e89a:	f7ff fd07 	bl	800e2ac <rfalIsoDepDeselect>
        }
        return ret;
 800e89e:	89bb      	ldrh	r3, [r7, #12]
 800e8a0:	e10f      	b.n	800eac2 <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /*******************************************************************************/
    /* Process ATS Response                                                        */
    isoDepDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	2204      	movs	r2, #4
 800e8a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.SFGI = 0;
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.MBL  = 0;
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	645a      	str	r2, [r3, #68]	; 0x44
    isoDepDev->info.DSI  = RFAL_BR_106;
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    isoDepDev->info.DRI  = RFAL_BR_106;
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    isoDepDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	2202      	movs	r2, #2
 800e8ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    
    /*******************************************************************************/
    /* Check for ATS optional fields                                               */
    if( isoDepDev->activation.A.Listener.ATS.TL > RFAL_ISODEP_ATS_MIN_LEN )
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d973      	bls.n	800e9be <rfalIsoDepPollAHandleActivation+0x1a2>
    {
        msgIt = RFAL_ISODEP_ATS_MIN_LEN;
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	73bb      	strb	r3, [r7, #14]
        
        /* Format byte T0 is optional, if present assign FSDI */
        isoDepDev->info.FSxI = (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_FSCI_MASK);
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	785b      	ldrb	r3, [r3, #1]
 800e8de:	f003 030f 	and.w	r3, r3, #15
 800e8e2:	b2da      	uxtb	r2, r3
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        /* T0 has already been processed, always the same position */
        msgIt++; 
 800e8ea:	7bbb      	ldrb	r3, [r7, #14]
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	73bb      	strb	r3, [r7, #14]
        
        /* Check if TA is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK) != 0U )
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	785b      	ldrb	r3, [r3, #1]
 800e8f4:	f003 0310 	and.w	r3, r3, #16
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d00d      	beq.n	800e918 <rfalIsoDepPollAHandleActivation+0xfc>
        {
            rfalIsoDepCalcBitRate( maxBR, ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++], &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 800e8fc:	683a      	ldr	r2, [r7, #0]
 800e8fe:	7bbb      	ldrb	r3, [r7, #14]
 800e900:	1c59      	adds	r1, r3, #1
 800e902:	73b9      	strb	r1, [r7, #14]
 800e904:	4413      	add	r3, r2
 800e906:	7819      	ldrb	r1, [r3, #0]
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	3349      	adds	r3, #73	; 0x49
 800e912:	7978      	ldrb	r0, [r7, #5]
 800e914:	f000 f9f6 	bl	800ed04 <rfalIsoDepCalcBitRate>
        }
        
        /* Check if TB is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK) != 0U )
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	785b      	ldrb	r3, [r3, #1]
 800e91c:	f003 0320 	and.w	r3, r3, #32
 800e920:	2b00      	cmp	r3, #0
 800e922:	d018      	beq.n	800e956 <rfalIsoDepPollAHandleActivation+0x13a>
        {
            isoDepDev->info.SFGI  = ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++];
 800e924:	683a      	ldr	r2, [r7, #0]
 800e926:	7bbb      	ldrb	r3, [r7, #14]
 800e928:	1c59      	adds	r1, r3, #1
 800e92a:	73b9      	strb	r1, [r7, #14]
 800e92c:	4413      	add	r3, r2
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	461a      	mov	r2, r3
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	639a      	str	r2, [r3, #56]	; 0x38
            isoDepDev->info.FWI   = (uint8_t)((isoDepDev->info.SFGI >> RFAL_ISODEP_ATS_TB_FWI_SHIFT) & RFAL_ISODEP_ATS_FWI_MASK);
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93a:	091b      	lsrs	r3, r3, #4
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	f003 030f 	and.w	r3, r3, #15
 800e942:	b2da      	uxtb	r2, r3
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            isoDepDev->info.SFGI &= RFAL_ISODEP_ATS_TB_SFGI_MASK;
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e94e:	f003 020f 	and.w	r2, r3, #15
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	639a      	str	r2, [r3, #56]	; 0x38
        }
        
        /* Check if TC is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK) != 0U )
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	785b      	ldrb	r3, [r3, #1]
 800e95a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d02d      	beq.n	800e9be <rfalIsoDepPollAHandleActivation+0x1a2>
        {
            /* Check for Protocol features support */
            /* Advanced protocol features defined on Digital 1.0 Table 69, removed after */
            isoDepDev->info.supAdFt = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_ADV_FEAT) != 0U)  ? true : false);
 800e962:	683a      	ldr	r2, [r7, #0]
 800e964:	7bbb      	ldrb	r3, [r7, #14]
 800e966:	4413      	add	r3, r2
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	091b      	lsrs	r3, r3, #4
 800e96c:	f003 0301 	and.w	r3, r3, #1
 800e970:	2b00      	cmp	r3, #0
 800e972:	bf14      	ite	ne
 800e974:	2301      	movne	r3, #1
 800e976:	2300      	moveq	r3, #0
 800e978:	b2da      	uxtb	r2, r3
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            isoDepDev->info.supDID  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_DID)      != 0U)  ? true : false);
 800e980:	683a      	ldr	r2, [r7, #0]
 800e982:	7bbb      	ldrb	r3, [r7, #14]
 800e984:	4413      	add	r3, r2
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	085b      	lsrs	r3, r3, #1
 800e98a:	f003 0301 	and.w	r3, r3, #1
 800e98e:	2b00      	cmp	r3, #0
 800e990:	bf14      	ite	ne
 800e992:	2301      	movne	r3, #1
 800e994:	2300      	moveq	r3, #0
 800e996:	b2da      	uxtb	r2, r3
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            isoDepDev->info.supNAD  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++] & RFAL_ISODEP_ATS_TC_NAD)      != 0U)  ? true : false);
 800e99e:	683a      	ldr	r2, [r7, #0]
 800e9a0:	7bbb      	ldrb	r3, [r7, #14]
 800e9a2:	1c59      	adds	r1, r3, #1
 800e9a4:	73b9      	strb	r1, [r7, #14]
 800e9a6:	4413      	add	r3, r2
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	f003 0301 	and.w	r3, r3, #1
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	bf14      	ite	ne
 800e9b2:	2301      	movne	r3, #1
 800e9b4:	2300      	moveq	r3, #0
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        }
    }
    
    isoDepDev->info.FSx  = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7ff fce1 	bl	800e38c <rfalIsoDepFSxI2FSx>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    
    isoDepDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f000 fa34 	bl	800ee48 <rfalIsoDepSFGI2SFGT>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7f5 fbd3 	bl	8004198 <timerCalculateTimer>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	4a35      	ldr	r2, [pc, #212]	; (800eacc <rfalIsoDepPollAHandleActivation+0x2b0>)
 800e9f6:	63d3      	str	r3, [r2, #60]	; 0x3c
    
    isoDepDev->info.FWT  = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7ff fca4 	bl	800e34c <rfalIsoDepFWI2FWT>
 800ea04:	4602      	mov	r2, r0
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT = RFAL_ISODEP_DFWT_20;
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ea10:	635a      	str	r2, [r3, #52]	; 0x34
    
    isoDepDev->info.DID = ( (isoDepDev->info.supDID) ? DID : RFAL_ISODEP_NO_DID);
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d001      	beq.n	800ea20 <rfalIsoDepPollAHandleActivation+0x204>
 800ea1c:	79ba      	ldrb	r2, [r7, #6]
 800ea1e:	e000      	b.n	800ea22 <rfalIsoDepPollAHandleActivation+0x206>
 800ea20:	2200      	movs	r2, #0
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.NAD = RFAL_ISODEP_NO_NAD;
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	22ff      	movs	r2, #255	; 0xff
 800ea2c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    
    
    /*******************************************************************************/
    /* If higher bit rates are supported by both devices, send PPS                 */
    if( (isoDepDev->info.DSI != RFAL_BR_106) || (isoDepDev->info.DRI != RFAL_BR_106) )
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d104      	bne.n	800ea44 <rfalIsoDepPollAHandleActivation+0x228>
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d030      	beq.n	800eaa6 <rfalIsoDepPollAHandleActivation+0x28a>
    {
        /* Wait until SFGT has been fulfilled */
        while( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) ) { /* MISRA 15.6: mandatory brackets */ };
 800ea44:	bf00      	nop
 800ea46:	4b21      	ldr	r3, [pc, #132]	; (800eacc <rfalIsoDepPollAHandleActivation+0x2b0>)
 800ea48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7f5 fbb2 	bl	80041b4 <timerIsExpired>
 800ea50:	4603      	mov	r3, r0
 800ea52:	f083 0301 	eor.w	r3, r3, #1
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d1f4      	bne.n	800ea46 <rfalIsoDepPollAHandleActivation+0x22a>
        
        ret = rfalIsoDepPPS( isoDepDev->info.DID, isoDepDev->info.DSI, isoDepDev->info.DRI, &ppsRes );
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800ea6e:	f107 0308 	add.w	r3, r7, #8
 800ea72:	f7ff fdf7 	bl	800e664 <rfalIsoDepPPS>
 800ea76:	4603      	mov	r3, r0
 800ea78:	81bb      	strh	r3, [r7, #12]
        
        if( ret == ERR_NONE )
 800ea7a:	89bb      	ldrh	r3, [r7, #12]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d10a      	bne.n	800ea96 <rfalIsoDepPollAHandleActivation+0x27a>
        {
            /* DSI code the divisor from PICC to PCD */
            /* DRI code the divisor from PCD to PICC */
            rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	4610      	mov	r0, r2
 800ea90:	f006 fd16 	bl	80154c0 <rfalSetBitRate>
 800ea94:	e007      	b.n	800eaa6 <rfalIsoDepPollAHandleActivation+0x28a>
        }
        else
        {
            isoDepDev->info.DSI = RFAL_BR_106;
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            isoDepDev->info.DRI = RFAL_BR_106;
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        }
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800eaac:	4b07      	ldr	r3, [pc, #28]	; (800eacc <rfalIsoDepPollAHandleActivation+0x2b0>)
 800eaae:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 800eab0:	79fb      	ldrb	r3, [r7, #7]
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7ff fc6a 	bl	800e38c <rfalIsoDepFSxI2FSx>
 800eab8:	4603      	mov	r3, r0
 800eaba:	461a      	mov	r2, r3
 800eabc:	4b03      	ldr	r3, [pc, #12]	; (800eacc <rfalIsoDepPollAHandleActivation+0x2b0>)
 800eabe:	845a      	strh	r2, [r3, #34]	; 0x22
    
    return ERR_NONE;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	200031e4 	.word	0x200031e4

0800ead0 <rfalIsoDepPollBHandleActivation>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepPollBHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, uint8_t PARAM1, const rfalNfcbListenDevice *nfcbDev, const uint8_t* HLInfo, uint8_t HLInfoLen, rfalIsoDepDevice *isoDepDev )
{
 800ead0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ead2:	b08d      	sub	sp, #52	; 0x34
 800ead4:	af08      	add	r7, sp, #32
 800ead6:	4604      	mov	r4, r0
 800ead8:	4608      	mov	r0, r1
 800eada:	4611      	mov	r1, r2
 800eadc:	461a      	mov	r2, r3
 800eade:	4623      	mov	r3, r4
 800eae0:	71fb      	strb	r3, [r7, #7]
 800eae2:	4603      	mov	r3, r0
 800eae4:	71bb      	strb	r3, [r7, #6]
 800eae6:	460b      	mov	r3, r1
 800eae8:	717b      	strb	r3, [r7, #5]
 800eaea:	4613      	mov	r3, r2
 800eaec:	713b      	strb	r3, [r7, #4]
    ReturnCode ret;
    uint8_t    mbli;
    
    /***************************************************************************/
    /* Initialize ISO-DEP Device with info from SENSB_RES                      */
    isoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 800eaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf0:	7b1b      	ldrb	r3, [r3, #12]
 800eaf2:	091b      	lsrs	r3, r3, #4
 800eaf4:	b2da      	uxtb	r2, r3
 800eaf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.FWT     = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 800eafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eafe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7ff fc22 	bl	800e34c <rfalIsoDepFWI2FWT>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb0c:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT    = RFAL_NFCB_DFWT;
 800eb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb10:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800eb14:	635a      	str	r2, [r3, #52]	; 0x34
    isoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 800eb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb18:	7b5b      	ldrb	r3, [r3, #13]
 800eb1a:	091b      	lsrs	r3, r3, #4
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	f003 020f 	and.w	r2, r3, #15
 800eb22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb24:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.SFGT    = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 800eb26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f000 f98b 	bl	800ee48 <rfalIsoDepSFGI2SFGT>
 800eb32:	4602      	mov	r2, r0
 800eb34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb36:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 800eb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb3a:	7adb      	ldrb	r3, [r3, #11]
 800eb3c:	091b      	lsrs	r3, r3, #4
 800eb3e:	b2da      	uxtb	r2, r3
 800eb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    isoDepDev->info.FSx     = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 800eb46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7ff fc1d 	bl	800e38c <rfalIsoDepFSxI2FSx>
 800eb52:	4603      	mov	r3, r0
 800eb54:	461a      	mov	r2, r3
 800eb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb58:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    isoDepDev->info.DID     = DID;
 800eb5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb5e:	79ba      	ldrb	r2, [r7, #6]
 800eb60:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 800eb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb66:	7b1b      	ldrb	r3, [r3, #12]
 800eb68:	f003 0301 	and.w	r3, r3, #1
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	bf14      	ite	ne
 800eb70:	2301      	movne	r3, #1
 800eb72:	2300      	moveq	r3, #0
 800eb74:	b2da      	uxtb	r2, r3
 800eb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    isoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 800eb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7e:	7b1b      	ldrb	r3, [r3, #12]
 800eb80:	085b      	lsrs	r3, r3, #1
 800eb82:	f003 0301 	and.w	r3, r3, #1
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	bf14      	ite	ne
 800eb8a:	2301      	movne	r3, #1
 800eb8c:	2300      	moveq	r3, #0
 800eb8e:	b2da      	uxtb	r2, r3
 800eb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb92:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    
    
    /* Check if DID requested is supported by PICC */
    if( (DID != RFAL_ISODEP_NO_DID) && (!isoDepDev->info.supDID) )
 800eb96:	79bb      	ldrb	r3, [r7, #6]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d009      	beq.n	800ebb0 <rfalIsoDepPollBHandleActivation+0xe0>
 800eb9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb9e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800eba2:	f083 0301 	eor.w	r3, r3, #1
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d001      	beq.n	800ebb0 <rfalIsoDepPollBHandleActivation+0xe0>
    {
        return ERR_PARAM;
 800ebac:	2307      	movs	r3, #7
 800ebae:	e0a3      	b.n	800ecf8 <rfalIsoDepPollBHandleActivation+0x228>
    }
    
    /* Enable EMD handling according   Digital 2.1  4.1.1.1 ; EMVCo 3.0  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 800ebb0:	2002      	movs	r0, #2
 800ebb2:	f006 ff0f 	bl	80159d4 <rfalSetErrorHandling>
    
    /***************************************************************************/
    /* Set FDT Poll to be used on upcoming communications                      */
    if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV )
 800ebb6:	4b52      	ldr	r3, [pc, #328]	; (800ed00 <rfalIsoDepPollBHandleActivation+0x230>)
 800ebb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d104      	bne.n	800ebca <rfalIsoDepPollBHandleActivation+0xfa>
    {
        /* Disregard Minimum TR2 returned by PICC, always use FDTb MIN   EMVCo 3.0  6.3.2.10  */
        rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 800ebc0:	f641 207c 	movw	r0, #6780	; 0x1a7c
 800ebc4:	f006 ff16 	bl	80159f4 <rfalSetFDTPoll>
 800ebc8:	e00d      	b.n	800ebe6 <rfalIsoDepPollBHandleActivation+0x116>
    }
    else
    {
        /* Apply minimum TR2 from SENSB_RES   Digital 2.1  7.6.2.23 */
        rfalSetFDTPoll( rfalNfcbTR2ToFDT(((nfcbDev->sensbRes.protInfo.FsciProType >>RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK)) );
 800ebca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebcc:	7adb      	ldrb	r3, [r3, #11]
 800ebce:	085b      	lsrs	r3, r3, #1
 800ebd0:	b2db      	uxtb	r3, r3
 800ebd2:	f003 0303 	and.w	r3, r3, #3
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f005 f903 	bl	8013de4 <rfalNfcbTR2ToFDT>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f006 ff07 	bl	80159f4 <rfalSetFDTPoll>
    }
    
    
    /* Calculate max Bit Rate */
    rfalIsoDepCalcBitRate( maxBR, nfcbDev->sensbRes.protInfo.BRC, &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 800ebe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe8:	7a99      	ldrb	r1, [r3, #10]
 800ebea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebec:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800ebf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebf2:	3349      	adds	r3, #73	; 0x49
 800ebf4:	7978      	ldrb	r0, [r7, #5]
 800ebf6:	f000 f885 	bl	800ed04 <rfalIsoDepCalcBitRate>
    
    /***************************************************************************/
    /* Send ATTRIB Command                                                     */
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800ebfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfc:	1c9d      	adds	r5, r3, #2
                           (((nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_ADC_ADV_FEATURE_MASK) != 0U) ? PARAM1 : RFAL_ISODEP_ATTRIB_REQ_PARAM1_DEFAULT),
 800ebfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec00:	7b1b      	ldrb	r3, [r3, #12]
 800ec02:	f003 0308 	and.w	r3, r3, #8
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d001      	beq.n	800ec0e <rfalIsoDepPollBHandleActivation+0x13e>
 800ec0a:	7939      	ldrb	r1, [r7, #4]
 800ec0c:	e000      	b.n	800ec10 <rfalIsoDepPollBHandleActivation+0x140>
 800ec0e:	2100      	movs	r1, #0
 800ec10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec12:	f893 6048 	ldrb.w	r6, [r3, #72]	; 0x48
 800ec16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec18:	f893 c049 	ldrb.w	ip, [r3, #73]	; 0x49
                           isoDepDev->info.DSI,
                           isoDepDev->info.DRI,
                           FSDI,
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 800ec1c:	4b38      	ldr	r3, [pc, #224]	; (800ed00 <rfalIsoDepPollBHandleActivation+0x230>)
 800ec1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800ec22:	2b01      	cmp	r3, #1
 800ec24:	d005      	beq.n	800ec32 <rfalIsoDepPollBHandleActivation+0x162>
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 800ec26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec28:	7adb      	ldrb	r3, [r3, #11]
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800ec2a:	f003 0307 	and.w	r3, r3, #7
 800ec2e:	b2db      	uxtb	r3, r3
 800ec30:	e000      	b.n	800ec34 <rfalIsoDepPollBHandleActivation+0x164>
 800ec32:	2301      	movs	r3, #1
                           DID,
                           HLInfo,
                           HLInfoLen,
                           (isoDepDev->info.FWT + isoDepDev->info.dFWT),
 800ec34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec36:	6b10      	ldr	r0, [r2, #48]	; 0x30
 800ec38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800ec3c:	4402      	add	r2, r0
 800ec3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec40:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800ec42:	3421      	adds	r4, #33	; 0x21
 800ec44:	9407      	str	r4, [sp, #28]
 800ec46:	9006      	str	r0, [sp, #24]
 800ec48:	9205      	str	r2, [sp, #20]
 800ec4a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800ec4e:	9204      	str	r2, [sp, #16]
 800ec50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec52:	9203      	str	r2, [sp, #12]
 800ec54:	79ba      	ldrb	r2, [r7, #6]
 800ec56:	9202      	str	r2, [sp, #8]
 800ec58:	9301      	str	r3, [sp, #4]
 800ec5a:	79fb      	ldrb	r3, [r7, #7]
 800ec5c:	9300      	str	r3, [sp, #0]
 800ec5e:	4663      	mov	r3, ip
 800ec60:	4632      	mov	r2, r6
 800ec62:	4628      	mov	r0, r5
 800ec64:	f7ff fd50 	bl	800e708 <rfalIsoDepATTRIB>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	81fb      	strh	r3, [r7, #14]
                           &isoDepDev->activation.B.Listener.ATTRIB_RESLen
                         );
    
    /***************************************************************************/
    /* Process ATTRIB Response                                                 */
    if( ret == ERR_NONE )
 800ec6c:	89fb      	ldrh	r3, [r7, #14]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d12c      	bne.n	800eccc <rfalIsoDepPollBHandleActivation+0x1fc>
    {
        /* Digital 1.1 14.6.2.3 - Check if received DID match */
        if( (isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID )
 800ec72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	f003 020f 	and.w	r2, r3, #15
 800ec7a:	79bb      	ldrb	r3, [r7, #6]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d001      	beq.n	800ec84 <rfalIsoDepPollBHandleActivation+0x1b4>
        {
            return ERR_PROTO;
 800ec80:	230b      	movs	r3, #11
 800ec82:	e039      	b.n	800ecf8 <rfalIsoDepPollBHandleActivation+0x228>
        }
                
        /* Retrieve MBLI and calculate new FDS/MBL (Maximum Buffer Length) */
        mbli = ((isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid >> RFAL_ISODEP_ATTRIB_RES_MBLI_SHIFT) & RFAL_ISODEP_ATTRIB_RES_MBLI_MASK);
 800ec84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	091b      	lsrs	r3, r3, #4
 800ec8a:	737b      	strb	r3, [r7, #13]
        if( mbli > 0U)
 800ec8c:	7b7b      	ldrb	r3, [r7, #13]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d008      	beq.n	800eca4 <rfalIsoDepPollBHandleActivation+0x1d4>
        {
            /* Digital 1.1  14.6.2  Calculate Maximum Buffer Length MBL = FSC x 2^(MBLI-1) */
            isoDepDev->info.MBL = (isoDepDev->info.FSx * ((uint32_t)1U<<(mbli-1U)));
 800ec92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec94:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800ec98:	461a      	mov	r2, r3
 800ec9a:	7b7b      	ldrb	r3, [r7, #13]
 800ec9c:	3b01      	subs	r3, #1
 800ec9e:	409a      	lsls	r2, r3
 800eca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eca2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* DSI code the divisor from PICC to PCD */
        /* DRI code the divisor from PCD to PICC */
        rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 800eca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eca6:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800ecaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	4610      	mov	r0, r2
 800ecb4:	f006 fc04 	bl	80154c0 <rfalSetBitRate>
        {
            /* REMARK: SoF EoF TR0 and TR1 are not passed on to RF layer */
        }
        
        /* Start the SFGT timer */
        isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 800ecb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7f5 fa6a 	bl	8004198 <timerCalculateTimer>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	4a0e      	ldr	r2, [pc, #56]	; (800ed00 <rfalIsoDepPollBHandleActivation+0x230>)
 800ecc8:	63d3      	str	r3, [r2, #60]	; 0x3c
 800ecca:	e007      	b.n	800ecdc <rfalIsoDepPollBHandleActivation+0x20c>
    }
    else
    {
        isoDepDev->info.DSI = RFAL_BR_106;
 800eccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecce:	2200      	movs	r2, #0
 800ecd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        isoDepDev->info.DRI = RFAL_BR_106;
 800ecd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 800ecdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecde:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800ece2:	4b07      	ldr	r3, [pc, #28]	; (800ed00 <rfalIsoDepPollBHandleActivation+0x230>)
 800ece4:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 800ece6:	79fb      	ldrb	r3, [r7, #7]
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7ff fb4f 	bl	800e38c <rfalIsoDepFSxI2FSx>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	4b03      	ldr	r3, [pc, #12]	; (800ed00 <rfalIsoDepPollBHandleActivation+0x230>)
 800ecf4:	845a      	strh	r2, [r3, #34]	; 0x22
    
    return ret;
 800ecf6:	89fb      	ldrh	r3, [r7, #14]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3714      	adds	r7, #20
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed00:	200031e4 	.word	0x200031e4

0800ed04 <rfalIsoDepCalcBitRate>:
}


/*******************************************************************************/
static void rfalIsoDepCalcBitRate( rfalBitRate maxAllowedBR, uint8_t piccBRCapability, rfalBitRate *dsi, rfalBitRate *dri )
{
 800ed04:	b480      	push	{r7}
 800ed06:	b087      	sub	sp, #28
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60ba      	str	r2, [r7, #8]
 800ed0c:	607b      	str	r3, [r7, #4]
 800ed0e:	4603      	mov	r3, r0
 800ed10:	73fb      	strb	r3, [r7, #15]
 800ed12:	460b      	mov	r3, r1
 800ed14:	73bb      	strb	r3, [r7, #14]
    uint8_t     dsiMask;
    int8_t      i;
    bool        bitrateFound;
    rfalBitRate curMaxBR;
    
    curMaxBR = maxAllowedBR;
 800ed16:	7bfb      	ldrb	r3, [r7, #15]
 800ed18:	757b      	strb	r3, [r7, #21]
    
    do
    {
        bitrateFound = true;
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	75bb      	strb	r3, [r7, #22]
        
        (*dsi) = RFAL_BR_106;
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	2200      	movs	r2, #0
 800ed22:	701a      	strb	r2, [r3, #0]
        (*dri) = RFAL_BR_106;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	701a      	strb	r2, [r3, #0]
        
        /* Digital 1.0  5.6.2.5 & 11.6.2.14: A received RFU value of b4 = 1b MUST be interpreted as if b7 to b1 ? 0000000b (only 106 kbits/s in both direction) */
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 800ed2a:	7bbb      	ldrb	r3, [r7, #14]
 800ed2c:	f003 0308 	and.w	r3, r3, #8
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	f040 8083 	bne.w	800ee3e <rfalIsoDepCalcBitRate+0x13a>
 800ed38:	7d7b      	ldrb	r3, [r7, #21]
 800ed3a:	2b03      	cmp	r3, #3
 800ed3c:	d87f      	bhi.n	800ee3e <rfalIsoDepCalcBitRate+0x13a>
            return;
        }
        
        /***************************************************************************/
        /* Determine Listen->Poll bit rate */
        dsiMask = (piccBRCapability & RFAL_ISODEP_BSI_MASK);
 800ed3e:	7bbb      	ldrb	r3, [r7, #14]
 800ed40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ed44:	753b      	strb	r3, [r7, #20]
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 800ed46:	2302      	movs	r3, #2
 800ed48:	75fb      	strb	r3, [r7, #23]
 800ed4a:	e019      	b.n	800ed80 <rfalIsoDepCalcBitRate+0x7c>
        {
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800ed4c:	7d3a      	ldrb	r2, [r7, #20]
 800ed4e:	7dfb      	ldrb	r3, [r7, #23]
 800ed50:	4619      	mov	r1, r3
 800ed52:	2310      	movs	r3, #16
 800ed54:	408b      	lsls	r3, r1
 800ed56:	4013      	ands	r3, r2
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00b      	beq.n	800ed74 <rfalIsoDepCalcBitRate+0x70>
 800ed5c:	7dfb      	ldrb	r3, [r7, #23]
 800ed5e:	1c5a      	adds	r2, r3, #1
 800ed60:	7d7b      	ldrb	r3, [r7, #21]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d806      	bhi.n	800ed74 <rfalIsoDepCalcBitRate+0x70>
            {
                uint8_t newdsi = ((uint8_t) i) + 1U;
 800ed66:	7dfb      	ldrb	r3, [r7, #23]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	74fb      	strb	r3, [r7, #19]
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	7cfa      	ldrb	r2, [r7, #19]
 800ed70:	701a      	strb	r2, [r3, #0]
                break;
 800ed72:	e009      	b.n	800ed88 <rfalIsoDepCalcBitRate+0x84>
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 800ed74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed78:	b2db      	uxtb	r3, r3
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	75fb      	strb	r3, [r7, #23]
 800ed80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	dae1      	bge.n	800ed4c <rfalIsoDepCalcBitRate+0x48>
            }
        }
        
        /***************************************************************************/
        /* Determine Poll->Listen bit rate */ 
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
 800ed88:	7bbb      	ldrb	r3, [r7, #14]
 800ed8a:	f003 0307 	and.w	r3, r3, #7
 800ed8e:	74bb      	strb	r3, [r7, #18]
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 800ed90:	2302      	movs	r3, #2
 800ed92:	75fb      	strb	r3, [r7, #23]
 800ed94:	e018      	b.n	800edc8 <rfalIsoDepCalcBitRate+0xc4>
        {
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800ed96:	7cbb      	ldrb	r3, [r7, #18]
 800ed98:	7dfa      	ldrb	r2, [r7, #23]
 800ed9a:	40d3      	lsrs	r3, r2
 800ed9c:	f003 0301 	and.w	r3, r3, #1
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d00b      	beq.n	800edbc <rfalIsoDepCalcBitRate+0xb8>
 800eda4:	7dfb      	ldrb	r3, [r7, #23]
 800eda6:	1c5a      	adds	r2, r3, #1
 800eda8:	7d7b      	ldrb	r3, [r7, #21]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d806      	bhi.n	800edbc <rfalIsoDepCalcBitRate+0xb8>
            {
                uint8_t newdri = ((uint8_t) i) + 1U;
 800edae:	7dfb      	ldrb	r3, [r7, #23]
 800edb0:	3301      	adds	r3, #1
 800edb2:	747b      	strb	r3, [r7, #17]
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	7c7a      	ldrb	r2, [r7, #17]
 800edb8:	701a      	strb	r2, [r3, #0]
                break;
 800edba:	e009      	b.n	800edd0 <rfalIsoDepCalcBitRate+0xcc>
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 800edbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	3b01      	subs	r3, #1
 800edc4:	b2db      	uxtb	r3, r3
 800edc6:	75fb      	strb	r3, [r7, #23]
 800edc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	dae2      	bge.n	800ed96 <rfalIsoDepCalcBitRate+0x92>
        
        /***************************************************************************/
        /* Check if different bit rate is supported */
        
        /* Digital 1.0 Table 67: if b8=1b, then only the same bit rate divisor for both directions is supported */
        if( (piccBRCapability & RFAL_ISODEP_SAME_BITRATE_MASK) != 0U )
 800edd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	da2a      	bge.n	800ee2e <rfalIsoDepCalcBitRate+0x12a>
        {   
            (*dsi) = MIN((*dsi), (*dri));
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	781a      	ldrb	r2, [r3, #0]
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	4293      	cmp	r3, r2
 800ede2:	bf28      	it	cs
 800ede4:	4613      	movcs	r3, r2
 800ede6:	b2da      	uxtb	r2, r3
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	701a      	strb	r2, [r3, #0]
            (*dri) = (*dsi);
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	781a      	ldrb	r2, [r3, #0]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	701a      	strb	r2, [r3, #0]
            /* Check that the baudrate is supported */
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d018      	beq.n	800ee2e <rfalIsoDepCalcBitRate+0x12a>
 800edfc:	7d3a      	ldrb	r2, [r7, #20]
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	3b01      	subs	r3, #1
 800ee04:	2110      	movs	r1, #16
 800ee06:	fa01 f303 	lsl.w	r3, r1, r3
 800ee0a:	4013      	ands	r3, r2
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d009      	beq.n	800ee24 <rfalIsoDepCalcBitRate+0x120>
 800ee10:	7cba      	ldrb	r2, [r7, #18]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	3b01      	subs	r3, #1
 800ee18:	fa22 f303 	lsr.w	r3, r2, r3
 800ee1c:	f003 0301 	and.w	r3, r3, #1
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d104      	bne.n	800ee2e <rfalIsoDepCalcBitRate+0x12a>
            {
                bitrateFound = false;
 800ee24:	2300      	movs	r3, #0
 800ee26:	75bb      	strb	r3, [r7, #22]
                curMaxBR     = (*dsi); /* set allowed bitrate to be lowest and determine bit rate again */
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	757b      	strb	r3, [r7, #21]
            }
        }
    } while (!(bitrateFound));
 800ee2e:	7dbb      	ldrb	r3, [r7, #22]
 800ee30:	f083 0301 	eor.w	r3, r3, #1
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	f47f af6f 	bne.w	800ed1a <rfalIsoDepCalcBitRate+0x16>
 800ee3c:	e000      	b.n	800ee40 <rfalIsoDepCalcBitRate+0x13c>
            return;
 800ee3e:	bf00      	nop
    
}
 800ee40:	371c      	adds	r7, #28
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bc80      	pop	{r7}
 800ee46:	4770      	bx	lr

0800ee48 <rfalIsoDepSFGI2SFGT>:

/*******************************************************************************/
static uint32_t rfalIsoDepSFGI2SFGT( uint8_t sfgi )
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	4603      	mov	r3, r0
 800ee50:	71fb      	strb	r3, [r7, #7]
    uint32_t sfgt;
    uint8_t tmpSFGI;
    
    tmpSFGI = sfgi;
 800ee52:	79fb      	ldrb	r3, [r7, #7]
 800ee54:	72fb      	strb	r3, [r7, #11]
 
    if (tmpSFGI > ISODEP_SFGI_MAX)
 800ee56:	7afb      	ldrb	r3, [r7, #11]
 800ee58:	2b0e      	cmp	r3, #14
 800ee5a:	d901      	bls.n	800ee60 <rfalIsoDepSFGI2SFGT+0x18>
    {
        tmpSFGI = ISODEP_SFGI_MIN;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	72fb      	strb	r3, [r7, #11]
    }
        
    if (tmpSFGI != ISODEP_SFGI_MIN)
 800ee60:	7afb      	ldrb	r3, [r7, #11]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d00b      	beq.n	800ee7e <rfalIsoDepSFGI2SFGT+0x36>
    {
        /* If sfgi != 0 wait SFGT + dSFGT   Digital 1.1  13.8.2.1 */
        sfgt  = isoDepCalcSGFT(sfgi) + isoDepCalcdSGFT(sfgi);
 800ee66:	79fb      	ldrb	r3, [r7, #7]
 800ee68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ee6c:	409a      	lsls	r2, r3
 800ee6e:	79fb      	ldrb	r3, [r7, #7]
 800ee70:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800ee74:	fa01 f303 	lsl.w	r3, r1, r3
 800ee78:	4413      	add	r3, r2
 800ee7a:	60fb      	str	r3, [r7, #12]
 800ee7c:	e002      	b.n	800ee84 <rfalIsoDepSFGI2SFGT+0x3c>
    }
    /* Otherwise use FDTPoll min Digital  1.1  13.8.2.3*/
    else
    {
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
 800ee7e:	f641 237c 	movw	r3, #6780	; 0x1a7c
 800ee82:	60fb      	str	r3, [r7, #12]
    }

    /* Convert carrier cycles to milli seconds */
    return (rfalConv1fcToMs(sfgt) + 1U);
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	4a05      	ldr	r2, [pc, #20]	; (800ee9c <rfalIsoDepSFGI2SFGT+0x54>)
 800ee88:	fba2 2303 	umull	r2, r3, r2, r3
 800ee8c:	0b1b      	lsrs	r3, r3, #12
 800ee8e:	3301      	adds	r3, #1
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3714      	adds	r7, #20
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bc80      	pop	{r7}
 800ee98:	4770      	bx	lr
 800ee9a:	bf00      	nop
 800ee9c:	4d542005 	.word	0x4d542005

0800eea0 <rfalIsoDepApdu2IBLockParam>:
#endif  /* RFAL_FEATURE_ISO_DEP_POLL */
 

 /*******************************************************************************/
 static void rfalIsoDepApdu2IBLockParam( rfalIsoDepApduTxRxParam apduParam, rfalIsoDepTxRxParam *iBlockParam, uint16_t txPos, uint16_t rxPos )
{
 800eea0:	b084      	sub	sp, #16
 800eea2:	b598      	push	{r3, r4, r7, lr}
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	f107 0410 	add.w	r4, r7, #16
 800eeaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     NO_WARNING(rxPos); /* Keep this param for future use */
     
     iBlockParam->DID    = apduParam.DID;
 800eeae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800eeb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeb4:	f883 2020 	strb.w	r2, [r3, #32]
     iBlockParam->FSx    = apduParam.FSx;
 800eeb8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800eeba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eebc:	83da      	strh	r2, [r3, #30]
     iBlockParam->ourFSx = apduParam.ourFSx;
 800eebe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eec2:	839a      	strh	r2, [r3, #28]
     iBlockParam->FWT    = apduParam.FWT;
 800eec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eec8:	615a      	str	r2, [r3, #20]
     iBlockParam->dFWT   = apduParam.dFWT;
 800eeca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eece:	619a      	str	r2, [r3, #24]
     
     if( (apduParam.txBufLen - txPos) > rfalIsoDepGetMaxInfLen() )
 800eed0:	8abb      	ldrh	r3, [r7, #20]
 800eed2:	461a      	mov	r2, r3
 800eed4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800eed6:	1ad4      	subs	r4, r2, r3
 800eed8:	f7ff fac6 	bl	800e468 <rfalIsoDepGetMaxInfLen>
 800eedc:	4603      	mov	r3, r0
 800eede:	429c      	cmp	r4, r3
 800eee0:	dd09      	ble.n	800eef6 <rfalIsoDepApdu2IBLockParam+0x56>
     {
         iBlockParam->isTxChaining = true;
 800eee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eee4:	2201      	movs	r2, #1
 800eee6:	719a      	strb	r2, [r3, #6]
         iBlockParam->txBufLen     = rfalIsoDepGetMaxInfLen();
 800eee8:	f7ff fabe 	bl	800e468 <rfalIsoDepGetMaxInfLen>
 800eeec:	4603      	mov	r3, r0
 800eeee:	461a      	mov	r2, r3
 800eef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eef2:	809a      	strh	r2, [r3, #4]
 800eef4:	e008      	b.n	800ef08 <rfalIsoDepApdu2IBLockParam+0x68>
     }
     else
     {
         iBlockParam->isTxChaining = false;
 800eef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eef8:	2200      	movs	r2, #0
 800eefa:	719a      	strb	r2, [r3, #6]
         iBlockParam->txBufLen     = (apduParam.txBufLen - txPos);
 800eefc:	8aba      	ldrh	r2, [r7, #20]
 800eefe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ef00:	1ad3      	subs	r3, r2, r3
 800ef02:	b29a      	uxth	r2, r3
 800ef04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef06:	809a      	strh	r2, [r3, #4]
     }
     
     /* TxBuf is moved to the beginning for every I-Block */
     iBlockParam->txBuf        = (rfalIsoDepBufFormat*)apduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800ef08:	693a      	ldr	r2, [r7, #16]
 800ef0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef0c:	601a      	str	r2, [r3, #0]
     iBlockParam->rxBuf        = apduParam.tmpBuf;                        /* Simply using the apdu buffer is not possible because of current ACK handling */
 800ef0e:	6a3a      	ldr	r2, [r7, #32]
 800ef10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef12:	609a      	str	r2, [r3, #8]
     iBlockParam->isRxChaining = &gIsoDep.isAPDURxChaining;
 800ef14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef16:	4a05      	ldr	r2, [pc, #20]	; (800ef2c <rfalIsoDepApdu2IBLockParam+0x8c>)
 800ef18:	611a      	str	r2, [r3, #16]
     iBlockParam->rxLen        = apduParam.rxLen;
 800ef1a:	69fa      	ldr	r2, [r7, #28]
 800ef1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef1e:	60da      	str	r2, [r3, #12]
}
 800ef20:	bf00      	nop
 800ef22:	46bd      	mov	sp, r7
 800ef24:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 800ef28:	b004      	add	sp, #16
 800ef2a:	4770      	bx	lr
 800ef2c:	20003268 	.word	0x20003268

0800ef30 <rfalIsoDepStartApduTransceive>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepStartApduTransceive( rfalIsoDepApduTxRxParam param )
{
 800ef30:	b084      	sub	sp, #16
 800ef32:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef34:	b093      	sub	sp, #76	; 0x4c
 800ef36:	af08      	add	r7, sp, #32
 800ef38:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800ef3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    rfalIsoDepTxRxParam txRxParam;
    
    /* Initialize and store APDU context */
    gIsoDep.APDUParam = param;
 800ef40:	4b22      	ldr	r3, [pc, #136]	; (800efcc <rfalIsoDepStartApduTransceive+0x9c>)
 800ef42:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 800ef46:	f107 0540 	add.w	r5, r7, #64	; 0x40
 800ef4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef52:	682b      	ldr	r3, [r5, #0]
 800ef54:	6023      	str	r3, [r4, #0]
    gIsoDep.APDUTxPos = 0;
 800ef56:	4b1d      	ldr	r3, [pc, #116]	; (800efcc <rfalIsoDepStartApduTransceive+0x9c>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    gIsoDep.APDURxPos = 0;
 800ef5e:	4b1b      	ldr	r3, [pc, #108]	; (800efcc <rfalIsoDepStartApduTransceive+0x9c>)
 800ef60:	2200      	movs	r2, #0
 800ef62:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    
    /* Assign current FSx to calculate INF length */
    gIsoDep.ourFsx = param.ourFSx;
 800ef66:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800ef6a:	4b18      	ldr	r3, [pc, #96]	; (800efcc <rfalIsoDepStartApduTransceive+0x9c>)
 800ef6c:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.fsx    = param.FSx;
 800ef6e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800ef72:	4b16      	ldr	r3, [pc, #88]	; (800efcc <rfalIsoDepStartApduTransceive+0x9c>)
 800ef74:	821a      	strh	r2, [r3, #16]
    
    /* Convert APDU TxRxParams to I-Block TxRxParams */
    rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 800ef76:	4b15      	ldr	r3, [pc, #84]	; (800efcc <rfalIsoDepStartApduTransceive+0x9c>)
 800ef78:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800ef7c:	4a13      	ldr	r2, [pc, #76]	; (800efcc <rfalIsoDepStartApduTransceive+0x9c>)
 800ef7e:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 800ef82:	4e12      	ldr	r6, [pc, #72]	; (800efcc <rfalIsoDepStartApduTransceive+0x9c>)
 800ef84:	9207      	str	r2, [sp, #28]
 800ef86:	9306      	str	r3, [sp, #24]
 800ef88:	1d3b      	adds	r3, r7, #4
 800ef8a:	9305      	str	r3, [sp, #20]
 800ef8c:	466d      	mov	r5, sp
 800ef8e:	f106 046c 	add.w	r4, r6, #108	; 0x6c
 800ef92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ef96:	6823      	ldr	r3, [r4, #0]
 800ef98:	602b      	str	r3, [r5, #0]
 800ef9a:	f106 035c 	add.w	r3, r6, #92	; 0x5c
 800ef9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800efa0:	f7ff ff7e 	bl	800eea0 <rfalIsoDepApdu2IBLockParam>
    
    return rfalIsoDepStartTransceive( txRxParam );
 800efa4:	466d      	mov	r5, sp
 800efa6:	f107 0414 	add.w	r4, r7, #20
 800efaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800efac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800efae:	6823      	ldr	r3, [r4, #0]
 800efb0:	602b      	str	r3, [r5, #0]
 800efb2:	1d3b      	adds	r3, r7, #4
 800efb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800efb6:	f7ff fa7f 	bl	800e4b8 <rfalIsoDepStartTransceive>
 800efba:	4603      	mov	r3, r0
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	372c      	adds	r7, #44	; 0x2c
 800efc0:	46bd      	mov	sp, r7
 800efc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800efc6:	b004      	add	sp, #16
 800efc8:	4770      	bx	lr
 800efca:	bf00      	nop
 800efcc:	200031e4 	.word	0x200031e4

0800efd0 <rfalIsoDepGetApduTransceiveStatus>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepGetApduTransceiveStatus( void )
{
 800efd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efd2:	b093      	sub	sp, #76	; 0x4c
 800efd4:	af08      	add	r7, sp, #32
    ReturnCode          ret;
    rfalIsoDepTxRxParam txRxParam;
    
    ret = rfalIsoDepGetTransceiveStatus();
 800efd6:	f7ff fadb 	bl	800e590 <rfalIsoDepGetTransceiveStatus>
 800efda:	4603      	mov	r3, r0
 800efdc:	84fb      	strh	r3, [r7, #38]	; 0x26
    switch( ret )
 800efde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d002      	beq.n	800efea <rfalIsoDepGetApduTransceiveStatus+0x1a>
 800efe4:	2b0d      	cmp	r3, #13
 800efe6:	d064      	beq.n	800f0b2 <rfalIsoDepGetApduTransceiveStatus+0xe2>
 800efe8:	e085      	b.n	800f0f6 <rfalIsoDepGetApduTransceiveStatus+0x126>
    {
        /*******************************************************************************/
        case ERR_NONE:
         
            /* Check if we are still doing chaining on Tx */
            if( gIsoDep.isTxChaining )
 800efea:	4b4a      	ldr	r3, [pc, #296]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800efec:	7c9b      	ldrb	r3, [r3, #18]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d03e      	beq.n	800f070 <rfalIsoDepGetApduTransceiveStatus+0xa0>
            {
                /* Add already Tx bytes */
                gIsoDep.APDUTxPos += gIsoDep.txBufLen;
 800eff2:	4b48      	ldr	r3, [pc, #288]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800eff4:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 800eff8:	4b46      	ldr	r3, [pc, #280]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800effa:	8b9b      	ldrh	r3, [r3, #28]
 800effc:	4413      	add	r3, r2
 800effe:	b29a      	uxth	r2, r3
 800f000:	4b44      	ldr	r3, [pc, #272]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f002:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
                
                /* Convert APDU TxRxParams to I-Block TxRxParams */
                rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 800f006:	4b43      	ldr	r3, [pc, #268]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f008:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800f00c:	4a41      	ldr	r2, [pc, #260]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f00e:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 800f012:	4e40      	ldr	r6, [pc, #256]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f014:	9207      	str	r2, [sp, #28]
 800f016:	9306      	str	r3, [sp, #24]
 800f018:	463b      	mov	r3, r7
 800f01a:	9305      	str	r3, [sp, #20]
 800f01c:	466d      	mov	r5, sp
 800f01e:	f106 046c 	add.w	r4, r6, #108	; 0x6c
 800f022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f026:	6823      	ldr	r3, [r4, #0]
 800f028:	602b      	str	r3, [r5, #0]
 800f02a:	f106 035c 	add.w	r3, r6, #92	; 0x5c
 800f02e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f030:	f7ff ff36 	bl	800eea0 <rfalIsoDepApdu2IBLockParam>
                
                if( txRxParam.txBufLen > 0U )      /* MISRA 21.18 */
 800f034:	88bb      	ldrh	r3, [r7, #4]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d00d      	beq.n	800f056 <rfalIsoDepGetApduTransceiveStatus+0x86>
                {
                    /* Move next I-Block to beginning of APDU Tx buffer */
                    ST_MEMCPY( gIsoDep.APDUParam.txBuf->apdu, &gIsoDep.APDUParam.txBuf->apdu[gIsoDep.APDUTxPos], txRxParam.txBufLen );
 800f03a:	4b36      	ldr	r3, [pc, #216]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f03c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f03e:	1cd8      	adds	r0, r3, #3
 800f040:	4b34      	ldr	r3, [pc, #208]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f044:	4a33      	ldr	r2, [pc, #204]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f046:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 800f04a:	4413      	add	r3, r2
 800f04c:	3303      	adds	r3, #3
 800f04e:	88ba      	ldrh	r2, [r7, #4]
 800f050:	4619      	mov	r1, r3
 800f052:	f009 fe5d 	bl	8018d10 <memcpy>
                }
                
                rfalIsoDepStartTransceive( txRxParam );
 800f056:	466d      	mov	r5, sp
 800f058:	f107 0410 	add.w	r4, r7, #16
 800f05c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f05e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f060:	6823      	ldr	r3, [r4, #0]
 800f062:	602b      	str	r3, [r5, #0]
 800f064:	463b      	mov	r3, r7
 800f066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f068:	f7ff fa26 	bl	800e4b8 <rfalIsoDepStartTransceive>
                return ERR_BUSY;
 800f06c:	2302      	movs	r3, #2
 800f06e:	e04c      	b.n	800f10a <rfalIsoDepGetApduTransceiveStatus+0x13a>
            }
            
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 800f070:	4b28      	ldr	r3, [pc, #160]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f074:	881b      	ldrh	r3, [r3, #0]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d03f      	beq.n	800f0fa <rfalIsoDepGetApduTransceiveStatus+0x12a>
            {
                /* Copy packet from tmp buffer to APDU buffer */
                ST_MEMCPY( &gIsoDep.APDUParam.rxBuf->apdu[gIsoDep.APDURxPos], gIsoDep.APDUParam.tmpBuf->inf, *gIsoDep.APDUParam.rxLen );
 800f07a:	4b26      	ldr	r3, [pc, #152]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f07c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f07e:	4a25      	ldr	r2, [pc, #148]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f080:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 800f084:	4413      	add	r3, r2
 800f086:	1cd8      	adds	r0, r3, #3
 800f088:	4b22      	ldr	r3, [pc, #136]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f08a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f08c:	1cd9      	adds	r1, r3, #3
 800f08e:	4b21      	ldr	r3, [pc, #132]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f090:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f092:	881b      	ldrh	r3, [r3, #0]
 800f094:	461a      	mov	r2, r3
 800f096:	f009 fe3b 	bl	8018d10 <memcpy>
                gIsoDep.APDURxPos += *gIsoDep.APDUParam.rxLen;
 800f09a:	4b1e      	ldr	r3, [pc, #120]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f09c:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800f0a0:	4b1c      	ldr	r3, [pc, #112]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0a4:	881b      	ldrh	r3, [r3, #0]
 800f0a6:	4413      	add	r3, r2
 800f0a8:	b29a      	uxth	r2, r3
 800f0aa:	4b1a      	ldr	r3, [pc, #104]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0ac:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
            }
             
            /* APDU TxRx is done */
            break;
 800f0b0:	e023      	b.n	800f0fa <rfalIsoDepGetApduTransceiveStatus+0x12a>
         
        /*******************************************************************************/
        case ERR_AGAIN:
            
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 800f0b2:	4b18      	ldr	r3, [pc, #96]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0b6:	881b      	ldrh	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d01a      	beq.n	800f0f2 <rfalIsoDepGetApduTransceiveStatus+0x122>
            {
                /* Copy chained packet from tmp buffer to APDU buffer */
                ST_MEMCPY( &gIsoDep.APDUParam.rxBuf->apdu[gIsoDep.APDURxPos], gIsoDep.APDUParam.tmpBuf->inf, *gIsoDep.APDUParam.rxLen );
 800f0bc:	4b15      	ldr	r3, [pc, #84]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0c0:	4a14      	ldr	r2, [pc, #80]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0c2:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 800f0c6:	4413      	add	r3, r2
 800f0c8:	1cd8      	adds	r0, r3, #3
 800f0ca:	4b12      	ldr	r3, [pc, #72]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0ce:	1cd9      	adds	r1, r3, #3
 800f0d0:	4b10      	ldr	r3, [pc, #64]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0d4:	881b      	ldrh	r3, [r3, #0]
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	f009 fe1a 	bl	8018d10 <memcpy>
                gIsoDep.APDURxPos += *gIsoDep.APDUParam.rxLen;
 800f0dc:	4b0d      	ldr	r3, [pc, #52]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0de:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800f0e2:	4b0c      	ldr	r3, [pc, #48]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0e6:	881b      	ldrh	r3, [r3, #0]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	4b09      	ldr	r3, [pc, #36]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0ee:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
            }
            
            /* Wait for next I-Block */
            return ERR_BUSY;
 800f0f2:	2302      	movs	r3, #2
 800f0f4:	e009      	b.n	800f10a <rfalIsoDepGetApduTransceiveStatus+0x13a>
        
        /*******************************************************************************/
        default:
            return ret;
 800f0f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f0f8:	e007      	b.n	800f10a <rfalIsoDepGetApduTransceiveStatus+0x13a>
            break;
 800f0fa:	bf00      	nop
    }
    
    *gIsoDep.APDUParam.rxLen = gIsoDep.APDURxPos;
 800f0fc:	4b05      	ldr	r3, [pc, #20]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f0fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f100:	4a04      	ldr	r2, [pc, #16]	; (800f114 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 800f102:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 800f106:	801a      	strh	r2, [r3, #0]
    
    return ERR_NONE;
 800f108:	2300      	movs	r3, #0
 }
 800f10a:	4618      	mov	r0, r3
 800f10c:	372c      	adds	r7, #44	; 0x2c
 800f10e:	46bd      	mov	sp, r7
 800f110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f112:	bf00      	nop
 800f114:	200031e4 	.word	0x200031e4

0800f118 <rfalNfcInitialize>:
#endif /* RFAL_FEATURE_LISTEN_MODE*/


/*******************************************************************************/
ReturnCode rfalNfcInitialize( void )
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    gNfcDev.state = RFAL_NFC_STATE_NOTINIT;
 800f11e:	4b0b      	ldr	r3, [pc, #44]	; (800f14c <rfalNfcInitialize+0x34>)
 800f120:	2200      	movs	r2, #0
 800f122:	701a      	strb	r2, [r3, #0]
    
    rfalAnalogConfigInitialize();              /* Initialize RFAL's Analog Configs */
 800f124:	f7fd ff98 	bl	800d058 <rfalAnalogConfigInitialize>
    EXIT_ON_ERR( err, rfalInitialize() );      /* Initialize RFAL */
 800f128:	f006 f814 	bl	8015154 <rfalInitialize>
 800f12c:	4603      	mov	r3, r0
 800f12e:	80fb      	strh	r3, [r7, #6]
 800f130:	88fb      	ldrh	r3, [r7, #6]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d001      	beq.n	800f13a <rfalNfcInitialize+0x22>
 800f136:	88fb      	ldrh	r3, [r7, #6]
 800f138:	e003      	b.n	800f142 <rfalNfcInitialize+0x2a>

    gNfcDev.state = RFAL_NFC_STATE_IDLE;         /* Go to initialized */
 800f13a:	4b04      	ldr	r3, [pc, #16]	; (800f14c <rfalNfcInitialize+0x34>)
 800f13c:	2201      	movs	r2, #1
 800f13e:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 800f140:	2300      	movs	r3, #0
}
 800f142:	4618      	mov	r0, r3
 800f144:	3708      	adds	r7, #8
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	2000326c 	.word	0x2000326c

0800f150 <rfalNfcDiscover>:

/*******************************************************************************/
ReturnCode rfalNfcDiscover( const rfalNfcDiscoverParam *disParams )
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
    /* Check if initialization has been performed */
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 800f158:	4b42      	ldr	r3, [pc, #264]	; (800f264 <rfalNfcDiscover+0x114>)
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d001      	beq.n	800f164 <rfalNfcDiscover+0x14>
    {
        return ERR_WRONG_STATE;
 800f160:	2321      	movs	r3, #33	; 0x21
 800f162:	e07a      	b.n	800f25a <rfalNfcDiscover+0x10a>
    }
    
    /* Check valid parameters */
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d025      	beq.n	800f1b6 <rfalNfcDiscover+0x66>
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	799b      	ldrb	r3, [r3, #6]
 800f16e:	2b05      	cmp	r3, #5
 800f170:	d821      	bhi.n	800f1b6 <rfalNfcDiscover+0x66>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	799b      	ldrb	r3, [r3, #6]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d01d      	beq.n	800f1b6 <rfalNfcDiscover+0x66>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	885b      	ldrh	r3, [r3, #2]
 800f17e:	f003 0304 	and.w	r3, r3, #4
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 800f182:	2b00      	cmp	r3, #0
 800f184:	d007      	beq.n	800f196 <rfalNfcDiscover+0x46>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	79db      	ldrb	r3, [r3, #7]
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d003      	beq.n	800f196 <rfalNfcDiscover+0x46>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	79db      	ldrb	r3, [r3, #7]
 800f192:	2b02      	cmp	r3, #2
 800f194:	d10f      	bne.n	800f1b6 <rfalNfcDiscover+0x66>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	885b      	ldrh	r3, [r3, #2]
 800f19a:	f003 0310 	and.w	r3, r3, #16
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d004      	beq.n	800f1ac <rfalNfcDiscover+0x5c>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f1a8:	2b02      	cmp	r3, #2
 800f1aa:	d804      	bhi.n	800f1b6 <rfalNfcDiscover+0x66>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f1b2:	2b30      	cmp	r3, #48	; 0x30
 800f1b4:	d901      	bls.n	800f1ba <rfalNfcDiscover+0x6a>
    {
        return ERR_PARAM;
 800f1b6:	2307      	movs	r3, #7
 800f1b8:	e04f      	b.n	800f25a <rfalNfcDiscover+0x10a>
    {
        return ERR_DISABLED;   /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
    }
    
    /* Initialize context for discovery */
    gNfcDev.activeDev       = NULL;
 800f1ba:	4b2a      	ldr	r3, [pc, #168]	; (800f264 <rfalNfcDiscover+0x114>)
 800f1bc:	2200      	movs	r2, #0
 800f1be:	609a      	str	r2, [r3, #8]
    gNfcDev.techsFound      = RFAL_NFC_TECH_NONE;
 800f1c0:	4b28      	ldr	r3, [pc, #160]	; (800f264 <rfalNfcDiscover+0x114>)
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	805a      	strh	r2, [r3, #2]
    gNfcDev.devCnt          = 0;
 800f1c6:	4b27      	ldr	r3, [pc, #156]	; (800f264 <rfalNfcDiscover+0x114>)
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
    gNfcDev.discRestart     = true;
 800f1ce:	4b25      	ldr	r3, [pc, #148]	; (800f264 <rfalNfcDiscover+0x114>)
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
    gNfcDev.disc            = *disParams;
 800f1d6:	4b23      	ldr	r3, [pc, #140]	; (800f264 <rfalNfcDiscover+0x114>)
 800f1d8:	687a      	ldr	r2, [r7, #4]
 800f1da:	330c      	adds	r3, #12
 800f1dc:	4611      	mov	r1, r2
 800f1de:	2284      	movs	r2, #132	; 0x84
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f009 fd95 	bl	8018d10 <memcpy>
    
    
    /* Calculate Listen Mask */
    gNfcDev.lmMask  = 0U;
 800f1e6:	4b1f      	ldr	r3, [pc, #124]	; (800f264 <rfalNfcDiscover+0x114>)
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_A) != 0U) ? RFAL_LM_MASK_NFCA : 0U);
 800f1ee:	4b1d      	ldr	r3, [pc, #116]	; (800f264 <rfalNfcDiscover+0x114>)
 800f1f0:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800f1f4:	4b1b      	ldr	r3, [pc, #108]	; (800f264 <rfalNfcDiscover+0x114>)
 800f1f6:	89db      	ldrh	r3, [r3, #14]
 800f1f8:	089b      	lsrs	r3, r3, #2
 800f1fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f1fe:	4313      	orrs	r3, r2
 800f200:	4a18      	ldr	r2, [pc, #96]	; (800f264 <rfalNfcDiscover+0x114>)
 800f202:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_B) != 0U) ? RFAL_LM_MASK_NFCB : 0U);
 800f206:	4b17      	ldr	r3, [pc, #92]	; (800f264 <rfalNfcDiscover+0x114>)
 800f208:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800f20c:	4b15      	ldr	r3, [pc, #84]	; (800f264 <rfalNfcDiscover+0x114>)
 800f20e:	89db      	ldrh	r3, [r3, #14]
 800f210:	089b      	lsrs	r3, r3, #2
 800f212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f216:	4313      	orrs	r3, r2
 800f218:	4a12      	ldr	r2, [pc, #72]	; (800f264 <rfalNfcDiscover+0x114>)
 800f21a:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_F) != 0U) ? RFAL_LM_MASK_NFCF : 0U);
 800f21e:	4b11      	ldr	r3, [pc, #68]	; (800f264 <rfalNfcDiscover+0x114>)
 800f220:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800f224:	4b0f      	ldr	r3, [pc, #60]	; (800f264 <rfalNfcDiscover+0x114>)
 800f226:	89db      	ldrh	r3, [r3, #14]
 800f228:	089b      	lsrs	r3, r3, #2
 800f22a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f22e:	4313      	orrs	r3, r2
 800f230:	4a0c      	ldr	r2, [pc, #48]	; (800f264 <rfalNfcDiscover+0x114>)
 800f232:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 800f236:	4b0b      	ldr	r3, [pc, #44]	; (800f264 <rfalNfcDiscover+0x114>)
 800f238:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800f23c:	4b09      	ldr	r3, [pc, #36]	; (800f264 <rfalNfcDiscover+0x114>)
 800f23e:	89db      	ldrh	r3, [r3, #14]
 800f240:	b21b      	sxth	r3, r3
 800f242:	109b      	asrs	r3, r3, #2
 800f244:	b21b      	sxth	r3, r3
 800f246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f24a:	4313      	orrs	r3, r2
 800f24c:	4a05      	ldr	r2, [pc, #20]	; (800f264 <rfalNfcDiscover+0x114>)
 800f24e:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    {
        return ERR_NOTSUPP;
    }
#endif
    
    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;
 800f252:	4b04      	ldr	r3, [pc, #16]	; (800f264 <rfalNfcDiscover+0x114>)
 800f254:	2202      	movs	r2, #2
 800f256:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 800f258:	2300      	movs	r3, #0
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3708      	adds	r7, #8
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
 800f262:	bf00      	nop
 800f264:	2000326c 	.word	0x2000326c

0800f268 <rfalNfcDeactivate>:

/*******************************************************************************/
ReturnCode rfalNfcDeactivate( bool discovery )
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	4603      	mov	r3, r0
 800f270:	71fb      	strb	r3, [r7, #7]
    /* Check for valid state */
    if( gNfcDev.state <= RFAL_NFC_STATE_IDLE )
 800f272:	4b0d      	ldr	r3, [pc, #52]	; (800f2a8 <rfalNfcDeactivate+0x40>)
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	2b01      	cmp	r3, #1
 800f278:	d801      	bhi.n	800f27e <rfalNfcDeactivate+0x16>
    {
        return ERR_WRONG_STATE;
 800f27a:	2321      	movs	r3, #33	; 0x21
 800f27c:	e010      	b.n	800f2a0 <rfalNfcDeactivate+0x38>
    }
    
    /* Check if discovery is to continue afterwards */
    if( discovery == true )
 800f27e:	79fb      	ldrb	r3, [r7, #7]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d007      	beq.n	800f294 <rfalNfcDeactivate+0x2c>
    {
        /* If so let the state machine continue*/
        gNfcDev.discRestart = discovery;
 800f284:	4a08      	ldr	r2, [pc, #32]	; (800f2a8 <rfalNfcDeactivate+0x40>)
 800f286:	79fb      	ldrb	r3, [r7, #7]
 800f288:	f882 32f2 	strb.w	r3, [r2, #754]	; 0x2f2
        gNfcDev.state       = RFAL_NFC_STATE_DEACTIVATION;
 800f28c:	4b06      	ldr	r3, [pc, #24]	; (800f2a8 <rfalNfcDeactivate+0x40>)
 800f28e:	2222      	movs	r2, #34	; 0x22
 800f290:	701a      	strb	r2, [r3, #0]
 800f292:	e004      	b.n	800f29e <rfalNfcDeactivate+0x36>
    }
    else
    {
        /* Otherwise deactivate immediately and go to IDLE */
        rfalNfcDeactivation();
 800f294:	f001 fcc2 	bl	8010c1c <rfalNfcDeactivation>
        gNfcDev.state = RFAL_NFC_STATE_IDLE;
 800f298:	4b03      	ldr	r3, [pc, #12]	; (800f2a8 <rfalNfcDeactivate+0x40>)
 800f29a:	2201      	movs	r2, #1
 800f29c:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 800f29e:	2300      	movs	r3, #0
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3708      	adds	r7, #8
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}
 800f2a8:	2000326c 	.word	0x2000326c

0800f2ac <rfalNfcGetState>:
    return ERR_NONE;
}

/*******************************************************************************/
rfalNfcState rfalNfcGetState( void )
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	af00      	add	r7, sp, #0
    return gNfcDev.state;
 800f2b0:	4b02      	ldr	r3, [pc, #8]	; (800f2bc <rfalNfcGetState+0x10>)
 800f2b2:	781b      	ldrb	r3, [r3, #0]
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bc80      	pop	{r7}
 800f2ba:	4770      	bx	lr
 800f2bc:	2000326c 	.word	0x2000326c

0800f2c0 <rfalNfcGetActiveDevice>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcGetActiveDevice( rfalNfcDevice **dev )
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b083      	sub	sp, #12
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
    /* Check for valid state */
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 800f2c8:	4b0f      	ldr	r3, [pc, #60]	; (800f308 <rfalNfcGetActiveDevice+0x48>)
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	2b1d      	cmp	r3, #29
 800f2ce:	d801      	bhi.n	800f2d4 <rfalNfcGetActiveDevice+0x14>
    {
        return ERR_WRONG_STATE;
 800f2d0:	2321      	movs	r3, #33	; 0x21
 800f2d2:	e014      	b.n	800f2fe <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check valid parameter */
    if( dev == NULL )
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d101      	bne.n	800f2de <rfalNfcGetActiveDevice+0x1e>
    {
        return ERR_PARAM;
 800f2da:	2307      	movs	r3, #7
 800f2dc:	e00f      	b.n	800f2fe <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check for valid state */
    if( (gNfcDev.devCnt == 0U) || (gNfcDev.activeDev == NULL)  )
 800f2de:	4b0a      	ldr	r3, [pc, #40]	; (800f308 <rfalNfcGetActiveDevice+0x48>)
 800f2e0:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d003      	beq.n	800f2f0 <rfalNfcGetActiveDevice+0x30>
 800f2e8:	4b07      	ldr	r3, [pc, #28]	; (800f308 <rfalNfcGetActiveDevice+0x48>)
 800f2ea:	689b      	ldr	r3, [r3, #8]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d101      	bne.n	800f2f4 <rfalNfcGetActiveDevice+0x34>
    {
        return ERR_REQUEST;
 800f2f0:	2305      	movs	r3, #5
 800f2f2:	e004      	b.n	800f2fe <rfalNfcGetActiveDevice+0x3e>
    }
    
    *dev = gNfcDev.activeDev;
 800f2f4:	4b04      	ldr	r3, [pc, #16]	; (800f308 <rfalNfcGetActiveDevice+0x48>)
 800f2f6:	689a      	ldr	r2, [r3, #8]
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	601a      	str	r2, [r3, #0]
    return ERR_NONE;
 800f2fc:	2300      	movs	r3, #0
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	370c      	adds	r7, #12
 800f302:	46bd      	mov	sp, r7
 800f304:	bc80      	pop	{r7}
 800f306:	4770      	bx	lr
 800f308:	2000326c 	.word	0x2000326c

0800f30c <rfalNfcWorker>:

/*******************************************************************************/
void rfalNfcWorker( void )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b086      	sub	sp, #24
 800f310:	af04      	add	r7, sp, #16
    ReturnCode err;
   
    rfalWorker();                                                                     /* Execute RFAL process  */
 800f312:	f006 fe57 	bl	8015fc4 <rfalWorker>
    
    switch( gNfcDev.state )
 800f316:	4bae      	ldr	r3, [pc, #696]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	2b22      	cmp	r3, #34	; 0x22
 800f31c:	f200 81b6 	bhi.w	800f68c <rfalNfcWorker+0x380>
 800f320:	a201      	add	r2, pc, #4	; (adr r2, 800f328 <rfalNfcWorker+0x1c>)
 800f322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f326:	bf00      	nop
 800f328:	0800f68d 	.word	0x0800f68d
 800f32c:	0800f68d 	.word	0x0800f68d
 800f330:	0800f3b5 	.word	0x0800f3b5
 800f334:	0800f423 	.word	0x0800f423
 800f338:	0800f68d 	.word	0x0800f68d
 800f33c:	0800f68d 	.word	0x0800f68d
 800f340:	0800f68d 	.word	0x0800f68d
 800f344:	0800f68d 	.word	0x0800f68d
 800f348:	0800f68d 	.word	0x0800f68d
 800f34c:	0800f68d 	.word	0x0800f68d
 800f350:	0800f451 	.word	0x0800f451
 800f354:	0800f49d 	.word	0x0800f49d
 800f358:	0800f68d 	.word	0x0800f68d
 800f35c:	0800f4f9 	.word	0x0800f4f9
 800f360:	0800f68d 	.word	0x0800f68d
 800f364:	0800f68d 	.word	0x0800f68d
 800f368:	0800f68d 	.word	0x0800f68d
 800f36c:	0800f68d 	.word	0x0800f68d
 800f370:	0800f68d 	.word	0x0800f68d
 800f374:	0800f68d 	.word	0x0800f68d
 800f378:	0800f5b1 	.word	0x0800f5b1
 800f37c:	0800f607 	.word	0x0800f607
 800f380:	0800f63b 	.word	0x0800f63b
 800f384:	0800f63b 	.word	0x0800f63b
 800f388:	0800f68d 	.word	0x0800f68d
 800f38c:	0800f68d 	.word	0x0800f68d
 800f390:	0800f68d 	.word	0x0800f68d
 800f394:	0800f68d 	.word	0x0800f68d
 800f398:	0800f68d 	.word	0x0800f68d
 800f39c:	0800f68d 	.word	0x0800f68d
 800f3a0:	0800f68d 	.word	0x0800f68d
 800f3a4:	0800f52f 	.word	0x0800f52f
 800f3a8:	0800f68d 	.word	0x0800f68d
 800f3ac:	0800f68d 	.word	0x0800f68d
 800f3b0:	0800f581 	.word	0x0800f581
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_START_DISCOVERY:
        
            /* Initialize context for discovery cycle */
            gNfcDev.devCnt      = 0;
 800f3b4:	4b86      	ldr	r3, [pc, #536]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            gNfcDev.selDevIdx   = 0;
 800f3bc:	4b84      	ldr	r3, [pc, #528]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f3be:	2200      	movs	r2, #0
 800f3c0:	71da      	strb	r2, [r3, #7]
            gNfcDev.techsFound  = RFAL_NFC_TECH_NONE;
 800f3c2:	4b83      	ldr	r3, [pc, #524]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	805a      	strh	r2, [r3, #2]
            gNfcDev.techs2do    = gNfcDev.disc.techs2Find;
 800f3c8:	4b81      	ldr	r3, [pc, #516]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f3ca:	89da      	ldrh	r2, [r3, #14]
 800f3cc:	4b80      	ldr	r3, [pc, #512]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f3ce:	809a      	strh	r2, [r3, #4]
            gNfcDev.state       = RFAL_NFC_STATE_POLL_TECHDETECT;
 800f3d0:	4b7f      	ldr	r3, [pc, #508]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f3d2:	220a      	movs	r2, #10
 800f3d4:	701a      	strb	r2, [r3, #0]
        
        #if RFAL_FEATURE_WAKEUP_MODE    
            /* Check if Low power Wake-Up is to be performed */
            if( gNfcDev.disc.wakeupEnabled )
 800f3d6:	4b7e      	ldr	r3, [pc, #504]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f3d8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	f000 8157 	beq.w	800f690 <rfalNfcWorker+0x384>
            {
                /* Initialize Low power Wake-up mode and wait */
                err = rfalWakeUpModeStart( (gNfcDev.disc.wakeupConfigDefault ? NULL : &gNfcDev.disc.wakeupConfig) );
 800f3e2:	4b7b      	ldr	r3, [pc, #492]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f3e4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d001      	beq.n	800f3f0 <rfalNfcWorker+0xe4>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	e000      	b.n	800f3f2 <rfalNfcWorker+0xe6>
 800f3f0:	4b78      	ldr	r3, [pc, #480]	; (800f5d4 <rfalNfcWorker+0x2c8>)
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f008 fb2c 	bl	8017a50 <rfalWakeUpModeStart>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	80fb      	strh	r3, [r7, #6]
                if( err == ERR_NONE )
 800f3fc:	88fb      	ldrh	r3, [r7, #6]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	f040 8146 	bne.w	800f690 <rfalNfcWorker+0x384>
                {
                    gNfcDev.state = RFAL_NFC_STATE_WAKEUP_MODE;
 800f404:	4b72      	ldr	r3, [pc, #456]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f406:	2203      	movs	r2, #3
 800f408:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller that WU was started */
 800f40a:	4b71      	ldr	r3, [pc, #452]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f40c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f40e:	2b00      	cmp	r3, #0
 800f410:	f000 813e 	beq.w	800f690 <rfalNfcWorker+0x384>
 800f414:	4b6e      	ldr	r3, [pc, #440]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f418:	4a6d      	ldr	r2, [pc, #436]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f41a:	7812      	ldrb	r2, [r2, #0]
 800f41c:	4610      	mov	r0, r2
 800f41e:	4798      	blx	r3
                }
            }
        #endif /* RFAL_FEATURE_WAKEUP_MODE */
            break;
 800f420:	e136      	b.n	800f690 <rfalNfcWorker+0x384>
        /*******************************************************************************/
        case RFAL_NFC_STATE_WAKEUP_MODE:
            
    #if RFAL_FEATURE_WAKEUP_MODE
            /* Check if the Wake-up mode has woke */
            if( rfalWakeUpModeHasWoke() )
 800f422:	f008 fce3 	bl	8017dec <rfalWakeUpModeHasWoke>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	f000 8133 	beq.w	800f694 <rfalNfcWorker+0x388>
            {
                rfalWakeUpModeStop();                                                 /* Disable Wake-up mode           */
 800f42e:	f008 fd2b 	bl	8017e88 <rfalWakeUpModeStop>
                gNfcDev.state = RFAL_NFC_STATE_POLL_TECHDETECT;                       /* Go to Technology detection     */
 800f432:	4b67      	ldr	r3, [pc, #412]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f434:	220a      	movs	r2, #10
 800f436:	701a      	strb	r2, [r3, #0]
                
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller that WU has woke */
 800f438:	4b65      	ldr	r3, [pc, #404]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f43a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f000 8129 	beq.w	800f694 <rfalNfcWorker+0x388>
 800f442:	4b63      	ldr	r3, [pc, #396]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f446:	4a62      	ldr	r2, [pc, #392]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f448:	7812      	ldrb	r2, [r2, #0]
 800f44a:	4610      	mov	r0, r2
 800f44c:	4798      	blx	r3
            }
    #endif /* RFAL_FEATURE_WAKEUP_MODE */

            break;
 800f44e:	e121      	b.n	800f694 <rfalNfcWorker+0x388>
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_TECHDETECT:
            
            /* Start total duration timer */
            gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 800f450:	4b5f      	ldr	r3, [pc, #380]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f452:	8a1b      	ldrh	r3, [r3, #16]
 800f454:	4618      	mov	r0, r3
 800f456:	f7f4 fe9f 	bl	8004198 <timerCalculateTimer>
 800f45a:	4603      	mov	r3, r0
 800f45c:	4a5c      	ldr	r2, [pc, #368]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f45e:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
        
            err = rfalNfcPollTechDetetection();                                       /* Perform Technology Detection                         */
 800f462:	f000 fad5 	bl	800fa10 <rfalNfcPollTechDetetection>
 800f466:	4603      	mov	r3, r0
 800f468:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 800f46a:	88fb      	ldrh	r3, [r7, #6]
 800f46c:	2b02      	cmp	r3, #2
 800f46e:	f000 8113 	beq.w	800f698 <rfalNfcWorker+0x38c>
            {
                if( ( err != ERR_NONE) || (gNfcDev.techsFound == RFAL_NFC_TECH_NONE) )/* Check if any error occurred or no techs were found   */
 800f472:	88fb      	ldrh	r3, [r7, #6]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d103      	bne.n	800f480 <rfalNfcWorker+0x174>
 800f478:	4b55      	ldr	r3, [pc, #340]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f47a:	885b      	ldrh	r3, [r3, #2]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d105      	bne.n	800f48c <rfalNfcWorker+0x180>
                {
                    rfalFieldOff();
 800f480:	f006 fb6e 	bl	8015b60 <rfalFieldOff>
                    gNfcDev.state = RFAL_NFC_STATE_LISTEN_TECHDETECT;                 /* Nothing found as poller, go to listener */
 800f484:	4b52      	ldr	r3, [pc, #328]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f486:	2214      	movs	r2, #20
 800f488:	701a      	strb	r2, [r3, #0]
                    break;
 800f48a:	e114      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
                }
                
                gNfcDev.techs2do = gNfcDev.techsFound;                                /* Store the found technologies for collision resolution */
 800f48c:	4b50      	ldr	r3, [pc, #320]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f48e:	885a      	ldrh	r2, [r3, #2]
 800f490:	4b4f      	ldr	r3, [pc, #316]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f492:	809a      	strh	r2, [r3, #4]
                gNfcDev.state    = RFAL_NFC_STATE_POLL_COLAVOIDANCE;                  /* One or more devices found, go to Collision Avoidance  */
 800f494:	4b4e      	ldr	r3, [pc, #312]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f496:	220b      	movs	r2, #11
 800f498:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f49a:	e0fd      	b.n	800f698 <rfalNfcWorker+0x38c>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_COLAVOIDANCE:
        
            err = rfalNfcPollCollResolution();                                        /* Resolve any eventual collision                       */
 800f49c:	f000 fc46 	bl	800fd2c <rfalNfcPollCollResolution>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 800f4a4:	88fb      	ldrh	r3, [r7, #6]
 800f4a6:	2b02      	cmp	r3, #2
 800f4a8:	f000 80f8 	beq.w	800f69c <rfalNfcWorker+0x390>
            {
                if( (err != ERR_NONE) || (gNfcDev.devCnt == 0U) )                     /* Check if any error occurred or no devices were found */
 800f4ac:	88fb      	ldrh	r3, [r7, #6]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d104      	bne.n	800f4bc <rfalNfcWorker+0x1b0>
 800f4b2:	4b47      	ldr	r3, [pc, #284]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f4b4:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d103      	bne.n	800f4c4 <rfalNfcWorker+0x1b8>
                {
                    gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;
 800f4bc:	4b44      	ldr	r3, [pc, #272]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f4be:	2222      	movs	r2, #34	; 0x22
 800f4c0:	701a      	strb	r2, [r3, #0]
                    break;                                                            /* Unable to retrieve any device, restart loop          */
 800f4c2:	e0f8      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
                }
                
                /* Check if more than one device has been found */
                if( gNfcDev.devCnt > 1U )
 800f4c4:	4b42      	ldr	r3, [pc, #264]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f4c6:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800f4ca:	2b01      	cmp	r3, #1
 800f4cc:	d90d      	bls.n	800f4ea <rfalNfcWorker+0x1de>
                {
                    /* If more than one device was found inform upper layer to choose which one to activate */
                    if( gNfcDev.disc.notifyCb != NULL )
 800f4ce:	4b40      	ldr	r3, [pc, #256]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f4d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d009      	beq.n	800f4ea <rfalNfcWorker+0x1de>
                    {
                        gNfcDev.state = RFAL_NFC_STATE_POLL_SELECT;
 800f4d6:	4b3e      	ldr	r3, [pc, #248]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f4d8:	220c      	movs	r2, #12
 800f4da:	701a      	strb	r2, [r3, #0]
                        gNfcDev.disc.notifyCb( gNfcDev.state );
 800f4dc:	4b3c      	ldr	r3, [pc, #240]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f4de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4e0:	4a3b      	ldr	r2, [pc, #236]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f4e2:	7812      	ldrb	r2, [r2, #0]
 800f4e4:	4610      	mov	r0, r2
 800f4e6:	4798      	blx	r3
                        break;
 800f4e8:	e0e5      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
                    }
                }
                
                /* If only one device or no callback has been set, activate the first device found */
                gNfcDev.selDevIdx = 0U;
 800f4ea:	4b39      	ldr	r3, [pc, #228]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	71da      	strb	r2, [r3, #7]
                gNfcDev.state = RFAL_NFC_STATE_POLL_ACTIVATION;
 800f4f0:	4b37      	ldr	r3, [pc, #220]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f4f2:	220d      	movs	r2, #13
 800f4f4:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f4f6:	e0d1      	b.n	800f69c <rfalNfcWorker+0x390>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_ACTIVATION:
            
            if( rfalNfcPollActivation( gNfcDev.selDevIdx ) != ERR_NONE )              /* Activate selected device           */
 800f4f8:	4b35      	ldr	r3, [pc, #212]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f4fa:	79db      	ldrb	r3, [r3, #7]
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f000 fee3 	bl	80102c8 <rfalNfcPollActivation>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d003      	beq.n	800f510 <rfalNfcWorker+0x204>
            {
                gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;                          /* If Activation failed, restart loop */
 800f508:	4b31      	ldr	r3, [pc, #196]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f50a:	2222      	movs	r2, #34	; 0x22
 800f50c:	701a      	strb	r2, [r3, #0]
                break;
 800f50e:	e0d2      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
            }
            
            gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                                 /* Device has been properly activated */
 800f510:	4b2f      	ldr	r3, [pc, #188]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f512:	221e      	movs	r2, #30
 800f514:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Inform upper layer that a device has been activated */
 800f516:	4b2e      	ldr	r3, [pc, #184]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	f000 80c0 	beq.w	800f6a0 <rfalNfcWorker+0x394>
 800f520:	4b2b      	ldr	r3, [pc, #172]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f524:	4a2a      	ldr	r2, [pc, #168]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f526:	7812      	ldrb	r2, [r2, #0]
 800f528:	4610      	mov	r0, r2
 800f52a:	4798      	blx	r3
            break;
 800f52c:	e0b8      	b.n	800f6a0 <rfalNfcWorker+0x394>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DATAEXCHANGE:

            rfalNfcDataExchangeGetStatus();                                           /* Run the internal state machine */
 800f52e:	f000 f9eb 	bl	800f908 <rfalNfcDataExchangeGetStatus>
            
            if( gNfcDev.dataExErr != ERR_BUSY )                                       /* If Dataexchange has terminated */
 800f532:	4b27      	ldr	r3, [pc, #156]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f534:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800f538:	2b02      	cmp	r3, #2
 800f53a:	d00c      	beq.n	800f556 <rfalNfcWorker+0x24a>
            {
                gNfcDev.state = RFAL_NFC_STATE_DATAEXCHANGE_DONE;                     /* Go to done state               */
 800f53c:	4b24      	ldr	r3, [pc, #144]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f53e:	2221      	movs	r2, #33	; 0x21
 800f540:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 800f542:	4b23      	ldr	r3, [pc, #140]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f546:	2b00      	cmp	r3, #0
 800f548:	d005      	beq.n	800f556 <rfalNfcWorker+0x24a>
 800f54a:	4b21      	ldr	r3, [pc, #132]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f54c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f54e:	4a20      	ldr	r2, [pc, #128]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f550:	7812      	ldrb	r2, [r2, #0]
 800f552:	4610      	mov	r0, r2
 800f554:	4798      	blx	r3
            }
            if( gNfcDev.dataExErr == ERR_SLEEP_REQ )                                  /* Check if Listen mode has to go to Sleep */
 800f556:	4b1e      	ldr	r3, [pc, #120]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f558:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800f55c:	2b20      	cmp	r3, #32
 800f55e:	f040 80a1 	bne.w	800f6a4 <rfalNfcWorker+0x398>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_SLEEP;                          /* Go to Listen Sleep state       */
 800f562:	4b1b      	ldr	r3, [pc, #108]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f564:	2217      	movs	r2, #23
 800f566:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 800f568:	4b19      	ldr	r3, [pc, #100]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f56a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	f000 8099 	beq.w	800f6a4 <rfalNfcWorker+0x398>
 800f572:	4b17      	ldr	r3, [pc, #92]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f576:	4a16      	ldr	r2, [pc, #88]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f578:	7812      	ldrb	r2, [r2, #0]
 800f57a:	4610      	mov	r0, r2
 800f57c:	4798      	blx	r3
            }
            break;
 800f57e:	e091      	b.n	800f6a4 <rfalNfcWorker+0x398>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DEACTIVATION:
            
            rfalNfcDeactivation();                                                    /* Deactivate current device */
 800f580:	f001 fb4c 	bl	8010c1c <rfalNfcDeactivation>
        
            gNfcDev.state = ((gNfcDev.discRestart) ? RFAL_NFC_STATE_START_DISCOVERY : RFAL_NFC_STATE_IDLE);
 800f584:	4b12      	ldr	r3, [pc, #72]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f586:	f893 32f2 	ldrb.w	r3, [r3, #754]	; 0x2f2
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d001      	beq.n	800f592 <rfalNfcWorker+0x286>
 800f58e:	2202      	movs	r2, #2
 800f590:	e000      	b.n	800f594 <rfalNfcWorker+0x288>
 800f592:	2201      	movs	r2, #1
 800f594:	4b0e      	ldr	r3, [pc, #56]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f596:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Notify caller             */
 800f598:	4b0d      	ldr	r3, [pc, #52]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f59a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f000 8083 	beq.w	800f6a8 <rfalNfcWorker+0x39c>
 800f5a2:	4b0b      	ldr	r3, [pc, #44]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f5a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5a6:	4a0a      	ldr	r2, [pc, #40]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f5a8:	7812      	ldrb	r2, [r2, #0]
 800f5aa:	4610      	mov	r0, r2
 800f5ac:	4798      	blx	r3
            break;
 800f5ae:	e07b      	b.n	800f6a8 <rfalNfcWorker+0x39c>
        
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_TECHDETECT:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )
 800f5b0:	4b07      	ldr	r3, [pc, #28]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f5b2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7f4 fdfc 	bl	80041b4 <timerIsExpired>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d00a      	beq.n	800f5d8 <rfalNfcWorker+0x2cc>
            {
                #if RFAL_FEATURE_LISTEN_MODE
                    rfalListenStop();
 800f5c2:	f008 f929 	bl	8017818 <rfalListenStop>
                #else
                    rfalFieldOff();
                #endif /* RFAL_FEATURE_LISTEN_MODE */
                
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 800f5c6:	4b02      	ldr	r3, [pc, #8]	; (800f5d0 <rfalNfcWorker+0x2c4>)
 800f5c8:	2202      	movs	r2, #2
 800f5ca:	701a      	strb	r2, [r3, #0]
                break;
 800f5cc:	e073      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
 800f5ce:	bf00      	nop
 800f5d0:	2000326c 	.word	0x2000326c
 800f5d4:	200032e6 	.word	0x200032e6
            }

    #if RFAL_FEATURE_LISTEN_MODE
            err = rfalListenStart( gNfcDev.lmMask, &gNfcDev.disc.lmConfigPA, NULL, &gNfcDev.disc.lmConfigPF, (uint8_t*)&gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen );
 800f5d8:	4b38      	ldr	r3, [pc, #224]	; (800f6bc <rfalNfcWorker+0x3b0>)
 800f5da:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800f5de:	4b38      	ldr	r3, [pc, #224]	; (800f6c0 <rfalNfcWorker+0x3b4>)
 800f5e0:	9302      	str	r3, [sp, #8]
 800f5e2:	23ff      	movs	r3, #255	; 0xff
 800f5e4:	9301      	str	r3, [sp, #4]
 800f5e6:	4b37      	ldr	r3, [pc, #220]	; (800f6c4 <rfalNfcWorker+0x3b8>)
 800f5e8:	9300      	str	r3, [sp, #0]
 800f5ea:	4b37      	ldr	r3, [pc, #220]	; (800f6c8 <rfalNfcWorker+0x3bc>)
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	4937      	ldr	r1, [pc, #220]	; (800f6cc <rfalNfcWorker+0x3c0>)
 800f5f0:	f007 ffac 	bl	801754c <rfalListenStart>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	80fb      	strh	r3, [r7, #6]
            if( err == ERR_NONE )
 800f5f8:	88fb      	ldrh	r3, [r7, #6]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d156      	bne.n	800f6ac <rfalNfcWorker+0x3a0>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_COLAVOIDANCE;                   /* Wait for listen mode to be activated */
 800f5fe:	4b2f      	ldr	r3, [pc, #188]	; (800f6bc <rfalNfcWorker+0x3b0>)
 800f600:	2215      	movs	r2, #21
 800f602:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f604:	e052      	b.n	800f6ac <rfalNfcWorker+0x3a0>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_COLAVOIDANCE:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )                           /* Check if the total duration has been reached */
 800f606:	4b2d      	ldr	r3, [pc, #180]	; (800f6bc <rfalNfcWorker+0x3b0>)
 800f608:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7f4 fdd1 	bl	80041b4 <timerIsExpired>
 800f612:	4603      	mov	r3, r0
 800f614:	2b00      	cmp	r3, #0
 800f616:	d005      	beq.n	800f624 <rfalNfcWorker+0x318>
            {
                rfalListenStop();
 800f618:	f008 f8fe 	bl	8017818 <rfalListenStop>
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 800f61c:	4b27      	ldr	r3, [pc, #156]	; (800f6bc <rfalNfcWorker+0x3b0>)
 800f61e:	2202      	movs	r2, #2
 800f620:	701a      	strb	r2, [r3, #0]
                break;
 800f622:	e048      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
            }
            
            /* Check for external field */
            if( rfalListenGetState( NULL, NULL ) >= RFAL_LM_STATE_IDLE )
 800f624:	2100      	movs	r1, #0
 800f626:	2000      	movs	r0, #0
 800f628:	f008 f922 	bl	8017870 <rfalListenGetState>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d93e      	bls.n	800f6b0 <rfalNfcWorker+0x3a4>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_ACTIVATION;                     /* Wait for listen mode to be activated */
 800f632:	4b22      	ldr	r3, [pc, #136]	; (800f6bc <rfalNfcWorker+0x3b0>)
 800f634:	2216      	movs	r2, #22
 800f636:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f638:	e03a      	b.n	800f6b0 <rfalNfcWorker+0x3a4>
        
        /*******************************************************************************/    
        case RFAL_NFC_STATE_LISTEN_ACTIVATION:
        case RFAL_NFC_STATE_LISTEN_SLEEP:
            
            err = rfalNfcListenActivation();
 800f63a:	f001 f8f7 	bl	801082c <rfalNfcListenActivation>
 800f63e:	4603      	mov	r3, r0
 800f640:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )
 800f642:	88fb      	ldrh	r3, [r7, #6]
 800f644:	2b02      	cmp	r3, #2
 800f646:	d035      	beq.n	800f6b4 <rfalNfcWorker+0x3a8>
            {
                if( err == ERR_NONE )
 800f648:	88fb      	ldrh	r3, [r7, #6]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d118      	bne.n	800f680 <rfalNfcWorker+0x374>
                {
                    gNfcDev.activeDev = gNfcDev.devList;                              /* Assign the active device to be used further on */
 800f64e:	4b1b      	ldr	r3, [pc, #108]	; (800f6bc <rfalNfcWorker+0x3b0>)
 800f650:	4a1f      	ldr	r2, [pc, #124]	; (800f6d0 <rfalNfcWorker+0x3c4>)
 800f652:	609a      	str	r2, [r3, #8]
                    gNfcDev.devCnt++;
 800f654:	4b19      	ldr	r3, [pc, #100]	; (800f6bc <rfalNfcWorker+0x3b0>)
 800f656:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800f65a:	3301      	adds	r3, #1
 800f65c:	b2da      	uxtb	r2, r3
 800f65e:	4b17      	ldr	r3, [pc, #92]	; (800f6bc <rfalNfcWorker+0x3b0>)
 800f660:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
                    
                    gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                         /* Device has been properly activated */
 800f664:	4b15      	ldr	r3, [pc, #84]	; (800f6bc <rfalNfcWorker+0x3b0>)
 800f666:	221e      	movs	r2, #30
 800f668:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Inform upper layer that a device has been activated */
 800f66a:	4b14      	ldr	r3, [pc, #80]	; (800f6bc <rfalNfcWorker+0x3b0>)
 800f66c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d020      	beq.n	800f6b4 <rfalNfcWorker+0x3a8>
 800f672:	4b12      	ldr	r3, [pc, #72]	; (800f6bc <rfalNfcWorker+0x3b0>)
 800f674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f676:	4a11      	ldr	r2, [pc, #68]	; (800f6bc <rfalNfcWorker+0x3b0>)
 800f678:	7812      	ldrb	r2, [r2, #0]
 800f67a:	4610      	mov	r0, r2
 800f67c:	4798      	blx	r3
                    rfalListenStop();
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
                }
            }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
            break;
 800f67e:	e019      	b.n	800f6b4 <rfalNfcWorker+0x3a8>
                    rfalListenStop();
 800f680:	f008 f8ca 	bl	8017818 <rfalListenStop>
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
 800f684:	4b0d      	ldr	r3, [pc, #52]	; (800f6bc <rfalNfcWorker+0x3b0>)
 800f686:	2202      	movs	r2, #2
 800f688:	701a      	strb	r2, [r3, #0]
            break;
 800f68a:	e013      	b.n	800f6b4 <rfalNfcWorker+0x3a8>
        /*******************************************************************************/
        case RFAL_NFC_STATE_ACTIVATED:
        case RFAL_NFC_STATE_POLL_SELECT:
        case RFAL_NFC_STATE_DATAEXCHANGE_DONE:
        default:
            return;
 800f68c:	bf00      	nop
 800f68e:	e012      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
            break;
 800f690:	bf00      	nop
 800f692:	e010      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
            break;
 800f694:	bf00      	nop
 800f696:	e00e      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
            break;
 800f698:	bf00      	nop
 800f69a:	e00c      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
            break;
 800f69c:	bf00      	nop
 800f69e:	e00a      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
            break;
 800f6a0:	bf00      	nop
 800f6a2:	e008      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
            break;
 800f6a4:	bf00      	nop
 800f6a6:	e006      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
            break;
 800f6a8:	bf00      	nop
 800f6aa:	e004      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
            break;
 800f6ac:	bf00      	nop
 800f6ae:	e002      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
            break;
 800f6b0:	bf00      	nop
 800f6b2:	e000      	b.n	800f6b6 <rfalNfcWorker+0x3aa>
            break;
 800f6b4:	bf00      	nop
    }
}
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	2000326c 	.word	0x2000326c
 800f6c0:	2000376a 	.word	0x2000376a
 800f6c4:	20003667 	.word	0x20003667
 800f6c8:	200032ca 	.word	0x200032ca
 800f6cc:	200032bc 	.word	0x200032bc
 800f6d0:	200032fc 	.word	0x200032fc

0800f6d4 <rfalNfcDataExchangeStart>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeStart( uint8_t *txData, uint16_t txDataLen, uint8_t **rxData, uint16_t **rvdLen, uint32_t fwt )
{
 800f6d4:	b5b0      	push	{r4, r5, r7, lr}
 800f6d6:	b09c      	sub	sp, #112	; 0x70
 800f6d8:	af06      	add	r7, sp, #24
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	607a      	str	r2, [r7, #4]
 800f6de:	603b      	str	r3, [r7, #0]
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	817b      	strh	r3, [r7, #10]
    rfalTransceiveContext ctx;
    
    /*******************************************************************************/
    /* The Data Exchange is divided in two different moments, the trigger/Start of *
     *  the transfer followed by the check until its completion                    */
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 800f6e4:	4b7f      	ldr	r3, [pc, #508]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	2b1d      	cmp	r3, #29
 800f6ea:	f240 80f5 	bls.w	800f8d8 <rfalNfcDataExchangeStart+0x204>
 800f6ee:	4b7d      	ldr	r3, [pc, #500]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f6f0:	689b      	ldr	r3, [r3, #8]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	f000 80f0 	beq.w	800f8d8 <rfalNfcDataExchangeStart+0x204>
        
        /*******************************************************************************/
        /* In Listen mode is the Poller that initiates the communicatation             */
        /* Assign output parameters and rfalNfcDataExchangeGetStatus will return       */
        /* incoming data from Poller/Initiator                                         */
        if( (gNfcDev.state == RFAL_NFC_STATE_ACTIVATED) && rfalNfcIsRemDevPoller( gNfcDev.activeDev->type ) )
 800f6f8:	4b7a      	ldr	r3, [pc, #488]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	2b1e      	cmp	r3, #30
 800f6fe:	d124      	bne.n	800f74a <rfalNfcDataExchangeStart+0x76>
 800f700:	4b78      	ldr	r3, [pc, #480]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f702:	689b      	ldr	r3, [r3, #8]
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	2b09      	cmp	r3, #9
 800f708:	d91f      	bls.n	800f74a <rfalNfcDataExchangeStart+0x76>
 800f70a:	4b76      	ldr	r3, [pc, #472]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f70c:	689b      	ldr	r3, [r3, #8]
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	2b0f      	cmp	r3, #15
 800f712:	d81a      	bhi.n	800f74a <rfalNfcDataExchangeStart+0x76>
        {
            if( txDataLen > 0U )
 800f714:	897b      	ldrh	r3, [r7, #10]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d001      	beq.n	800f71e <rfalNfcDataExchangeStart+0x4a>
            {
                return ERR_WRONG_STATE;
 800f71a:	2321      	movs	r3, #33	; 0x21
 800f71c:	e0dd      	b.n	800f8da <rfalNfcDataExchangeStart+0x206>
            }
            
            *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	4a71      	ldr	r2, [pc, #452]	; (800f8e8 <rfalNfcDataExchangeStart+0x214>)
 800f722:	601a      	str	r2, [r3, #0]
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.inf : 
 800f724:	4b6f      	ldr	r3, [pc, #444]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f726:	689b      	ldr	r3, [r3, #8]
 800f728:	7f5b      	ldrb	r3, [r3, #29]
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d008      	beq.n	800f740 <rfalNfcDataExchangeStart+0x6c>
                                  ((gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_NFCDEP) ? gNfcDev.rxBuf.nfcDepBuf.inf : gNfcDev.rxBuf.rfBuf) );
 800f72e:	4b6d      	ldr	r3, [pc, #436]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f730:	689b      	ldr	r3, [r3, #8]
 800f732:	7f5b      	ldrb	r3, [r3, #29]
 800f734:	2b02      	cmp	r3, #2
 800f736:	d101      	bne.n	800f73c <rfalNfcDataExchangeStart+0x68>
 800f738:	4b6c      	ldr	r3, [pc, #432]	; (800f8ec <rfalNfcDataExchangeStart+0x218>)
 800f73a:	e002      	b.n	800f742 <rfalNfcDataExchangeStart+0x6e>
 800f73c:	4b6c      	ldr	r3, [pc, #432]	; (800f8f0 <rfalNfcDataExchangeStart+0x21c>)
 800f73e:	e000      	b.n	800f742 <rfalNfcDataExchangeStart+0x6e>
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.inf : 
 800f740:	4b6c      	ldr	r3, [pc, #432]	; (800f8f4 <rfalNfcDataExchangeStart+0x220>)
 800f742:	687a      	ldr	r2, [r7, #4]
 800f744:	6013      	str	r3, [r2, #0]
            return ERR_NONE;
 800f746:	2300      	movs	r3, #0
 800f748:	e0c7      	b.n	800f8da <rfalNfcDataExchangeStart+0x206>
        }
        
        
        /*******************************************************************************/
        switch( gNfcDev.activeDev->rfInterface )                                      /* Check which RF interface shall be used/has been activated */
 800f74a:	4b66      	ldr	r3, [pc, #408]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	7f5b      	ldrb	r3, [r3, #29]
 800f750:	2b02      	cmp	r3, #2
 800f752:	d065      	beq.n	800f820 <rfalNfcDataExchangeStart+0x14c>
 800f754:	2b02      	cmp	r3, #2
 800f756:	f300 80ad 	bgt.w	800f8b4 <rfalNfcDataExchangeStart+0x1e0>
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d002      	beq.n	800f764 <rfalNfcDataExchangeStart+0x90>
 800f75e:	2b01      	cmp	r3, #1
 800f760:	d021      	beq.n	800f7a6 <rfalNfcDataExchangeStart+0xd2>
 800f762:	e0a7      	b.n	800f8b4 <rfalNfcDataExchangeStart+0x1e0>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
    
                rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)txData, txDataLen, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	63bb      	str	r3, [r7, #56]	; 0x38
 800f768:	897b      	ldrh	r3, [r7, #10]
 800f76a:	00db      	lsls	r3, r3, #3
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f770:	4b5f      	ldr	r3, [pc, #380]	; (800f8f0 <rfalNfcDataExchangeStart+0x21c>)
 800f772:	643b      	str	r3, [r7, #64]	; 0x40
 800f774:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 800f778:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f77c:	4b5a      	ldr	r3, [pc, #360]	; (800f8e8 <rfalNfcDataExchangeStart+0x214>)
 800f77e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f780:	2300      	movs	r3, #0
 800f782:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f786:	653b      	str	r3, [r7, #80]	; 0x50
                *rxData = (uint8_t*)gNfcDev.rxBuf.rfBuf;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	4a59      	ldr	r2, [pc, #356]	; (800f8f0 <rfalNfcDataExchangeStart+0x21c>)
 800f78c:	601a      	str	r2, [r3, #0]
                *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	4a55      	ldr	r2, [pc, #340]	; (800f8e8 <rfalNfcDataExchangeStart+0x214>)
 800f792:	601a      	str	r2, [r3, #0]
                err = rfalStartTransceive( &ctx );
 800f794:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f798:	4618      	mov	r0, r3
 800f79a:	f006 f9f7 	bl	8015b8c <rfalStartTransceive>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 800f7a4:	e08a      	b.n	800f8bc <rfalNfcDataExchangeStart+0x1e8>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
            {
                rfalIsoDepTxRxParam isoDepTxRx;
                
                if( txDataLen > 0U )
 800f7a6:	897b      	ldrh	r3, [r7, #10]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d005      	beq.n	800f7b8 <rfalNfcDataExchangeStart+0xe4>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.isoDepBuf.inf, txData, txDataLen );
 800f7ac:	897b      	ldrh	r3, [r7, #10]
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	68f9      	ldr	r1, [r7, #12]
 800f7b2:	4851      	ldr	r0, [pc, #324]	; (800f8f8 <rfalNfcDataExchangeStart+0x224>)
 800f7b4:	f009 faac 	bl	8018d10 <memcpy>
                }
                
                isoDepTxRx.DID          = RFAL_ISODEP_NO_DID;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                isoDepTxRx.ourFSx       = RFAL_ISODEP_FSX_KEEP;
 800f7be:	23ff      	movs	r3, #255	; 0xff
 800f7c0:	863b      	strh	r3, [r7, #48]	; 0x30
                isoDepTxRx.FSx          = gNfcDev.activeDev->proto.isoDep.info.FSx;
 800f7c2:	4b48      	ldr	r3, [pc, #288]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f7c4:	689b      	ldr	r3, [r3, #8]
 800f7c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f7ca:	867b      	strh	r3, [r7, #50]	; 0x32
                isoDepTxRx.dFWT         = gNfcDev.activeDev->proto.isoDep.info.dFWT;
 800f7cc:	4b45      	ldr	r3, [pc, #276]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f7ce:	689b      	ldr	r3, [r3, #8]
 800f7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                isoDepTxRx.FWT          = gNfcDev.activeDev->proto.isoDep.info.FWT;
 800f7d4:	4b43      	ldr	r3, [pc, #268]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f7d6:	689b      	ldr	r3, [r3, #8]
 800f7d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7da:	62bb      	str	r3, [r7, #40]	; 0x28
                isoDepTxRx.txBuf        = &gNfcDev.txBuf.isoDepBuf;
 800f7dc:	4b47      	ldr	r3, [pc, #284]	; (800f8fc <rfalNfcDataExchangeStart+0x228>)
 800f7de:	617b      	str	r3, [r7, #20]
                isoDepTxRx.txBufLen     = txDataLen;
 800f7e0:	897b      	ldrh	r3, [r7, #10]
 800f7e2:	833b      	strh	r3, [r7, #24]
                isoDepTxRx.isTxChaining = false;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	76bb      	strb	r3, [r7, #26]
                isoDepTxRx.rxBuf        = &gNfcDev.rxBuf.isoDepBuf;
 800f7e8:	4b41      	ldr	r3, [pc, #260]	; (800f8f0 <rfalNfcDataExchangeStart+0x21c>)
 800f7ea:	61fb      	str	r3, [r7, #28]
                isoDepTxRx.rxLen        = &gNfcDev.rxLen;
 800f7ec:	4b3e      	ldr	r3, [pc, #248]	; (800f8e8 <rfalNfcDataExchangeStart+0x214>)
 800f7ee:	623b      	str	r3, [r7, #32]
                isoDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 800f7f0:	4b43      	ldr	r3, [pc, #268]	; (800f900 <rfalNfcDataExchangeStart+0x22c>)
 800f7f2:	627b      	str	r3, [r7, #36]	; 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.isoDepBuf.inf;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	4a3f      	ldr	r2, [pc, #252]	; (800f8f4 <rfalNfcDataExchangeStart+0x220>)
 800f7f8:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	4a3a      	ldr	r2, [pc, #232]	; (800f8e8 <rfalNfcDataExchangeStart+0x214>)
 800f7fe:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL ISO-DEP Transceive                                           */
                err = rfalIsoDepStartTransceive( isoDepTxRx );
 800f800:	466d      	mov	r5, sp
 800f802:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800f806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f80a:	6823      	ldr	r3, [r4, #0]
 800f80c:	602b      	str	r3, [r5, #0]
 800f80e:	f107 0314 	add.w	r3, r7, #20
 800f812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f814:	f7fe fe50 	bl	800e4b8 <rfalIsoDepStartTransceive>
 800f818:	4603      	mov	r3, r0
 800f81a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 800f81e:	e04d      	b.n	800f8bc <rfalNfcDataExchangeStart+0x1e8>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_NFCDEP:
            {
                rfalNfcDepTxRxParam nfcDepTxRx;
                
                if( txDataLen > 0U)
 800f820:	897b      	ldrh	r3, [r7, #10]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d005      	beq.n	800f832 <rfalNfcDataExchangeStart+0x15e>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.nfcDepBuf.inf, txData, txDataLen );
 800f826:	897b      	ldrh	r3, [r7, #10]
 800f828:	461a      	mov	r2, r3
 800f82a:	68f9      	ldr	r1, [r7, #12]
 800f82c:	4835      	ldr	r0, [pc, #212]	; (800f904 <rfalNfcDataExchangeStart+0x230>)
 800f82e:	f009 fa6f 	bl	8018d10 <memcpy>
                }
                
                nfcDepTxRx.DID          = RFAL_NFCDEP_DID_KEEP;
 800f832:	23ff      	movs	r3, #255	; 0xff
 800f834:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                nfcDepTxRx.FSx          = rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Target.ATR_RES.PPt ) );
 800f838:	4b2a      	ldr	r3, [pc, #168]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f83a:	689b      	ldr	r3, [r3, #8]
 800f83c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f840:	091b      	lsrs	r3, r3, #4
 800f842:	b2db      	uxtb	r3, r3
 800f844:	f003 0303 	and.w	r3, r3, #3
 800f848:	3301      	adds	r3, #1
 800f84a:	019b      	lsls	r3, r3, #6
 800f84c:	2bfd      	cmp	r3, #253	; 0xfd
 800f84e:	d80c      	bhi.n	800f86a <rfalNfcDataExchangeStart+0x196>
 800f850:	4b24      	ldr	r3, [pc, #144]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f852:	689b      	ldr	r3, [r3, #8]
 800f854:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f858:	091b      	lsrs	r3, r3, #4
 800f85a:	b2db      	uxtb	r3, r3
 800f85c:	f003 0303 	and.w	r3, r3, #3
 800f860:	3301      	adds	r3, #1
 800f862:	b29b      	uxth	r3, r3
 800f864:	019b      	lsls	r3, r3, #6
 800f866:	b29b      	uxth	r3, r3
 800f868:	e000      	b.n	800f86c <rfalNfcDataExchangeStart+0x198>
 800f86a:	23fe      	movs	r3, #254	; 0xfe
 800f86c:	863b      	strh	r3, [r7, #48]	; 0x30
                nfcDepTxRx.dFWT         = gNfcDev.activeDev->proto.nfcDep.info.dFWT;
 800f86e:	4b1d      	ldr	r3, [pc, #116]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f870:	689b      	ldr	r3, [r3, #8]
 800f872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f874:	62fb      	str	r3, [r7, #44]	; 0x2c
                nfcDepTxRx.FWT          = gNfcDev.activeDev->proto.nfcDep.info.FWT;
 800f876:	4b1b      	ldr	r3, [pc, #108]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f87c:	62bb      	str	r3, [r7, #40]	; 0x28
                nfcDepTxRx.txBuf        = &gNfcDev.txBuf.nfcDepBuf;
 800f87e:	4b1f      	ldr	r3, [pc, #124]	; (800f8fc <rfalNfcDataExchangeStart+0x228>)
 800f880:	617b      	str	r3, [r7, #20]
                nfcDepTxRx.txBufLen     = txDataLen;
 800f882:	897b      	ldrh	r3, [r7, #10]
 800f884:	833b      	strh	r3, [r7, #24]
                nfcDepTxRx.isTxChaining = false;
 800f886:	2300      	movs	r3, #0
 800f888:	76bb      	strb	r3, [r7, #26]
                nfcDepTxRx.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 800f88a:	4b19      	ldr	r3, [pc, #100]	; (800f8f0 <rfalNfcDataExchangeStart+0x21c>)
 800f88c:	61fb      	str	r3, [r7, #28]
                nfcDepTxRx.rxLen        = &gNfcDev.rxLen;
 800f88e:	4b16      	ldr	r3, [pc, #88]	; (800f8e8 <rfalNfcDataExchangeStart+0x214>)
 800f890:	623b      	str	r3, [r7, #32]
                nfcDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 800f892:	4b1b      	ldr	r3, [pc, #108]	; (800f900 <rfalNfcDataExchangeStart+0x22c>)
 800f894:	627b      	str	r3, [r7, #36]	; 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.nfcDepBuf.inf;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	4a14      	ldr	r2, [pc, #80]	; (800f8ec <rfalNfcDataExchangeStart+0x218>)
 800f89a:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	4a12      	ldr	r2, [pc, #72]	; (800f8e8 <rfalNfcDataExchangeStart+0x214>)
 800f8a0:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL NFC-DEP Transceive                                           */
                err = rfalNfcDepStartTransceive( &nfcDepTxRx );                          
 800f8a2:	f107 0314 	add.w	r3, r7, #20
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f003 fb64 	bl	8012f74 <rfalNfcDepStartTransceive>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 800f8b2:	e003      	b.n	800f8bc <rfalNfcDataExchangeStart+0x1e8>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */

            /*******************************************************************************/
            default:
                err = ERR_PARAM;
 800f8b4:	2307      	movs	r3, #7
 800f8b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 800f8ba:	bf00      	nop
        }
        
        /* If a transceive has succesfully started flag Data Exchange as ongoing */
        if( err == ERR_NONE )
 800f8bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d106      	bne.n	800f8d2 <rfalNfcDataExchangeStart+0x1fe>
        {
            gNfcDev.dataExErr = ERR_BUSY;
 800f8c4:	4b07      	ldr	r3, [pc, #28]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f8c6:	2202      	movs	r2, #2
 800f8c8:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
            gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 800f8cc:	4b05      	ldr	r3, [pc, #20]	; (800f8e4 <rfalNfcDataExchangeStart+0x210>)
 800f8ce:	221f      	movs	r2, #31
 800f8d0:	701a      	strb	r2, [r3, #0]
        }
        
        return err;
 800f8d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f8d6:	e000      	b.n	800f8da <rfalNfcDataExchangeStart+0x206>
    }
    
    return ERR_WRONG_STATE;
 800f8d8:	2321      	movs	r3, #33	; 0x21
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3758      	adds	r7, #88	; 0x58
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bdb0      	pop	{r4, r5, r7, pc}
 800f8e2:	bf00      	nop
 800f8e4:	2000326c 	.word	0x2000326c
 800f8e8:	2000376a 	.word	0x2000376a
 800f8ec:	2000366c 	.word	0x2000366c
 800f8f0:	20003667 	.word	0x20003667
 800f8f4:	2000366a 	.word	0x2000366a
 800f8f8:	20003567 	.word	0x20003567
 800f8fc:	20003564 	.word	0x20003564
 800f900:	2000355f 	.word	0x2000355f
 800f904:	20003569 	.word	0x20003569

0800f908 <rfalNfcDataExchangeGetStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeGetStatus( void )
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Check if it's the first frame received in Listen mode */
    if( gNfcDev.state == RFAL_NFC_STATE_ACTIVATED )
 800f90c:	4b3d      	ldr	r3, [pc, #244]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	2b1e      	cmp	r3, #30
 800f912:	d114      	bne.n	800f93e <rfalNfcDataExchangeGetStatus+0x36>
    {
        /* Continue data exchange as normal */
        gNfcDev.dataExErr = ERR_BUSY;
 800f914:	4b3b      	ldr	r3, [pc, #236]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f916:	2202      	movs	r2, #2
 800f918:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
        gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 800f91c:	4b39      	ldr	r3, [pc, #228]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f91e:	221f      	movs	r2, #31
 800f920:	701a      	strb	r2, [r3, #0]
        
        /* Check if we performing in T3T CE */
        if( (gNfcDev.activeDev->type == RFAL_NFC_POLL_TYPE_NFCF) && (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_RF) )
 800f922:	4b38      	ldr	r3, [pc, #224]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f924:	689b      	ldr	r3, [r3, #8]
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	2b0c      	cmp	r3, #12
 800f92a:	d108      	bne.n	800f93e <rfalNfcDataExchangeGetStatus+0x36>
 800f92c:	4b35      	ldr	r3, [pc, #212]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f92e:	689b      	ldr	r3, [r3, #8]
 800f930:	7f5b      	ldrb	r3, [r3, #29]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d103      	bne.n	800f93e <rfalNfcDataExchangeGetStatus+0x36>
        {
            /* The first frame has been retrieved by rfalListenMode, flag data immediately                  */
            /* Can only call rfalGetTransceiveStatus() after starting a transceive with rfalStartTransceive */
            gNfcDev.dataExErr = ERR_NONE;
 800f936:	4b33      	ldr	r3, [pc, #204]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f938:	2200      	movs	r2, #0
 800f93a:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
    }
    
    
    /*******************************************************************************/
    /* Check if we are in we have been placed to sleep, and return last error     */
    if( gNfcDev.state == RFAL_NFC_STATE_LISTEN_SLEEP )
 800f93e:	4b31      	ldr	r3, [pc, #196]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	2b17      	cmp	r3, #23
 800f944:	d103      	bne.n	800f94e <rfalNfcDataExchangeGetStatus+0x46>
    {
        return gNfcDev.dataExErr;                                /* ERR_SLEEP_REQ */
 800f946:	4b2f      	ldr	r3, [pc, #188]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f948:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800f94c:	e057      	b.n	800f9fe <rfalNfcDataExchangeGetStatus+0xf6>
    }

    
    /*******************************************************************************/    
    /* Check if Data exchange has been started */
    if( (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE) && (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE_DONE)  )
 800f94e:	4b2d      	ldr	r3, [pc, #180]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	2b1f      	cmp	r3, #31
 800f954:	d005      	beq.n	800f962 <rfalNfcDataExchangeGetStatus+0x5a>
 800f956:	4b2b      	ldr	r3, [pc, #172]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	2b21      	cmp	r3, #33	; 0x21
 800f95c:	d001      	beq.n	800f962 <rfalNfcDataExchangeGetStatus+0x5a>
    {
        return ERR_WRONG_STATE;
 800f95e:	2321      	movs	r3, #33	; 0x21
 800f960:	e04d      	b.n	800f9fe <rfalNfcDataExchangeGetStatus+0xf6>
    }
    
    /* Check if Data exchange is still ongoing */
    if( gNfcDev.dataExErr == ERR_BUSY )
 800f962:	4b28      	ldr	r3, [pc, #160]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f964:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800f968:	2b02      	cmp	r3, #2
 800f96a:	d145      	bne.n	800f9f8 <rfalNfcDataExchangeGetStatus+0xf0>
    {
        switch( gNfcDev.activeDev->rfInterface )
 800f96c:	4b25      	ldr	r3, [pc, #148]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	7f5b      	ldrb	r3, [r3, #29]
 800f972:	2b02      	cmp	r3, #2
 800f974:	d016      	beq.n	800f9a4 <rfalNfcDataExchangeGetStatus+0x9c>
 800f976:	2b02      	cmp	r3, #2
 800f978:	dc1c      	bgt.n	800f9b4 <rfalNfcDataExchangeGetStatus+0xac>
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d002      	beq.n	800f984 <rfalNfcDataExchangeGetStatus+0x7c>
 800f97e:	2b01      	cmp	r3, #1
 800f980:	d008      	beq.n	800f994 <rfalNfcDataExchangeGetStatus+0x8c>
 800f982:	e017      	b.n	800f9b4 <rfalNfcDataExchangeGetStatus+0xac>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
                gNfcDev.dataExErr = rfalGetTransceiveStatus();
 800f984:	f006 fb0e 	bl	8015fa4 <rfalGetTransceiveStatus>
 800f988:	4603      	mov	r3, r0
 800f98a:	461a      	mov	r2, r3
 800f98c:	4b1d      	ldr	r3, [pc, #116]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f98e:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 800f992:	e014      	b.n	800f9be <rfalNfcDataExchangeGetStatus+0xb6>
        
        #if RFAL_FEATURE_ISO_DEP
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
                gNfcDev.dataExErr = rfalIsoDepGetTransceiveStatus();
 800f994:	f7fe fdfc 	bl	800e590 <rfalIsoDepGetTransceiveStatus>
 800f998:	4603      	mov	r3, r0
 800f99a:	461a      	mov	r2, r3
 800f99c:	4b19      	ldr	r3, [pc, #100]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f99e:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 800f9a2:	e00c      	b.n	800f9be <rfalNfcDataExchangeGetStatus+0xb6>
        #endif /* RFAL_FEATURE_ISO_DEP */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                gNfcDev.dataExErr = rfalNfcDepGetTransceiveStatus();
 800f9a4:	f003 fb1c 	bl	8012fe0 <rfalNfcDepGetTransceiveStatus>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	4b15      	ldr	r3, [pc, #84]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f9ae:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 800f9b2:	e004      	b.n	800f9be <rfalNfcDataExchangeGetStatus+0xb6>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            /*******************************************************************************/
            default:
                gNfcDev.dataExErr = ERR_PARAM;
 800f9b4:	4b13      	ldr	r3, [pc, #76]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f9b6:	2207      	movs	r2, #7
 800f9b8:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 800f9bc:	bf00      	nop
        
        
    #if  RFAL_FEATURE_LISTEN_MODE
        /*******************************************************************************/
        /* If a Sleep request has been received (Listen Mode) go to sleep immediately  */
        if( gNfcDev.dataExErr == ERR_SLEEP_REQ )
 800f9be:	4b11      	ldr	r3, [pc, #68]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f9c0:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800f9c4:	2b20      	cmp	r3, #32
 800f9c6:	d117      	bne.n	800f9f8 <rfalNfcDataExchangeGetStatus+0xf0>
        {
            EXIT_ON_ERR( gNfcDev.dataExErr, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 800f9c8:	4b0f      	ldr	r3, [pc, #60]	; (800fa08 <rfalNfcDataExchangeGetStatus+0x100>)
 800f9ca:	22ff      	movs	r2, #255	; 0xff
 800f9cc:	490f      	ldr	r1, [pc, #60]	; (800fa0c <rfalNfcDataExchangeGetStatus+0x104>)
 800f9ce:	200c      	movs	r0, #12
 800f9d0:	f007 ff3e 	bl	8017850 <rfalListenSleepStart>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	461a      	mov	r2, r3
 800f9d8:	4b0a      	ldr	r3, [pc, #40]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f9da:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
 800f9de:	4b09      	ldr	r3, [pc, #36]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f9e0:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d003      	beq.n	800f9f0 <rfalNfcDataExchangeGetStatus+0xe8>
 800f9e8:	4b06      	ldr	r3, [pc, #24]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f9ea:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800f9ee:	e006      	b.n	800f9fe <rfalNfcDataExchangeGetStatus+0xf6>
            
            /* If set Sleep was succesfull keep restore the Sleep request signal */
            gNfcDev.dataExErr = ERR_SLEEP_REQ;
 800f9f0:	4b04      	ldr	r3, [pc, #16]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f9f2:	2220      	movs	r2, #32
 800f9f4:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
        }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
        
    }
    
    return gNfcDev.dataExErr;
 800f9f8:	4b02      	ldr	r3, [pc, #8]	; (800fa04 <rfalNfcDataExchangeGetStatus+0xfc>)
 800f9fa:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	2000326c 	.word	0x2000326c
 800fa08:	2000376a 	.word	0x2000376a
 800fa0c:	20003667 	.word	0x20003667

0800fa10 <rfalNfcPollTechDetetection>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollTechDetetection( void )
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b08a      	sub	sp, #40	; 0x28
 800fa14:	af00      	add	r7, sp, #0
    ReturnCode           err;
    
    err = ERR_NONE;
 800fa16:	2300      	movs	r3, #0
 800fa18:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    
    /*******************************************************************************/
    /* AP2P Technology Detection                                                   */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_AP2P) != 0U) )
 800fa1a:	4b9a      	ldr	r3, [pc, #616]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fa1c:	89db      	ldrh	r3, [r3, #14]
 800fa1e:	f003 0310 	and.w	r3, r3, #16
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d05a      	beq.n	800fadc <rfalNfcPollTechDetetection+0xcc>
 800fa26:	4b97      	ldr	r3, [pc, #604]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fa28:	889b      	ldrh	r3, [r3, #4]
 800fa2a:	f003 0310 	and.w	r3, r3, #16
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d054      	beq.n	800fadc <rfalNfcPollTechDetetection+0xcc>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 800fa32:	4b94      	ldr	r3, [pc, #592]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fa34:	889b      	ldrh	r3, [r3, #4]
 800fa36:	f023 0310 	bic.w	r3, r3, #16
 800fa3a:	b29a      	uxth	r2, r3
 800fa3c:	4b91      	ldr	r3, [pc, #580]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fa3e:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFC_DEP
    
        EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_POLL_ACTIVE_P2P, gNfcDev.disc.ap2pBR, gNfcDev.disc.ap2pBR ) );
 800fa40:	4b90      	ldr	r3, [pc, #576]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fa42:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800fa46:	4a8f      	ldr	r2, [pc, #572]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fa48:	f892 204f 	ldrb.w	r2, [r2, #79]	; 0x4f
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	2009      	movs	r0, #9
 800fa50:	f005 fc24 	bl	801529c <rfalSetMode>
 800fa54:	4603      	mov	r3, r0
 800fa56:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fa58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d001      	beq.n	800fa62 <rfalNfcPollTechDetetection+0x52>
 800fa5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fa60:	e15d      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
        rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800fa62:	2001      	movs	r0, #1
 800fa64:	f005 ffb6 	bl	80159d4 <rfalSetErrorHandling>
        rfalSetFDTListen( RFAL_FDT_LISTEN_AP2P_POLLER );
 800fa68:	2040      	movs	r0, #64	; 0x40
 800fa6a:	f005 ffd7 	bl	8015a1c <rfalSetFDTListen>
        rfalSetFDTPoll( RFAL_TIMING_NONE );
 800fa6e:	2000      	movs	r0, #0
 800fa70:	f005 ffc0 	bl	80159f4 <rfalSetFDTPoll>
        rfalSetGT( RFAL_GT_AP2P_ADJUSTED );
 800fa74:	4884      	ldr	r0, [pc, #528]	; (800fc88 <rfalNfcPollTechDetetection+0x278>)
 800fa76:	f005 ffe5 	bl	8015a44 <rfalSetGT>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                     /* Turns the Field On and starts GT timer */
 800fa7a:	f006 f80f 	bl	8015a9c <rfalFieldOnAndStartGT>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fa82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d001      	beq.n	800fa8c <rfalNfcPollTechDetetection+0x7c>
 800fa88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fa8a:	e148      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, NULL, 0 );/* Poll for NFC-A devices */
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	2200      	movs	r2, #0
 800fa90:	2101      	movs	r1, #1
 800fa92:	487e      	ldr	r0, [pc, #504]	; (800fc8c <rfalNfcPollTechDetetection+0x27c>)
 800fa94:	f001 f81e 	bl	8010ad4 <rfalNfcNfcDepActivate>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 800fa9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d118      	bne.n	800fad4 <rfalNfcPollTechDetetection+0xc4>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 800faa2:	4b78      	ldr	r3, [pc, #480]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800faa4:	885b      	ldrh	r3, [r3, #2]
 800faa6:	f043 0310 	orr.w	r3, r3, #16
 800faaa:	b29a      	uxth	r2, r3
 800faac:	4b75      	ldr	r3, [pc, #468]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800faae:	805a      	strh	r2, [r3, #2]
            
            gNfcDev.devList->type        = RFAL_NFC_LISTEN_TYPE_AP2P;
 800fab0:	4b74      	ldr	r3, [pc, #464]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fab2:	2205      	movs	r2, #5
 800fab4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 800fab8:	4b72      	ldr	r3, [pc, #456]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800faba:	2202      	movs	r2, #2
 800fabc:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
            gNfcDev.devCnt++;
 800fac0:	4b70      	ldr	r3, [pc, #448]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fac2:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800fac6:	3301      	adds	r3, #1
 800fac8:	b2da      	uxtb	r2, r3
 800faca:	4b6e      	ldr	r3, [pc, #440]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800facc:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            
            return ERR_NONE;
 800fad0:	2300      	movs	r3, #0
 800fad2:	e124      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
        }
        
        rfalFieldOff();
 800fad4:	f006 f844 	bl	8015b60 <rfalFieldOff>
        return ERR_BUSY;
 800fad8:	2302      	movs	r3, #2
 800fada:	e120      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-A Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )
 800fadc:	4b69      	ldr	r3, [pc, #420]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fade:	89db      	ldrh	r3, [r3, #14]
 800fae0:	f003 0301 	and.w	r3, r3, #1
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d034      	beq.n	800fb52 <rfalNfcPollTechDetetection+0x142>
 800fae8:	4b66      	ldr	r3, [pc, #408]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800faea:	889b      	ldrh	r3, [r3, #4]
 800faec:	f003 0301 	and.w	r3, r3, #1
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d02e      	beq.n	800fb52 <rfalNfcPollTechDetetection+0x142>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 800faf4:	4b63      	ldr	r3, [pc, #396]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800faf6:	889b      	ldrh	r3, [r3, #4]
 800faf8:	f023 0301 	bic.w	r3, r3, #1
 800fafc:	b29a      	uxth	r2, r3
 800fafe:	4b61      	ldr	r3, [pc, #388]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fb00:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCA
        {
            rfalNfcaSensRes sensRes;            
        
            EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                            /* Initialize RFAL for NFC-A */
 800fb02:	f003 fa9d 	bl	8013040 <rfalNfcaPollerInitialize>
 800fb06:	4603      	mov	r3, r0
 800fb08:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d001      	beq.n	800fb14 <rfalNfcPollTechDetetection+0x104>
 800fb10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb12:	e104      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                               /* Turns the Field On and starts GT timer */
 800fb14:	f005 ffc2 	bl	8015a9c <rfalFieldOnAndStartGT>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d001      	beq.n	800fb26 <rfalNfcPollTechDetetection+0x116>
 800fb22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb24:	e0fb      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
                                                                                       
            err = rfalNfcaPollerTechnologyDetection( gNfcDev.disc.compMode, &sensRes );/* Poll for NFC-A devices */
 800fb26:	4b57      	ldr	r3, [pc, #348]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fb28:	7b1b      	ldrb	r3, [r3, #12]
 800fb2a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fb2e:	4611      	mov	r1, r2
 800fb30:	4618      	mov	r0, r3
 800fb32:	f003 fad1 	bl	80130d8 <rfalNfcaPollerTechnologyDetection>
 800fb36:	4603      	mov	r3, r0
 800fb38:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 800fb3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d106      	bne.n	800fb4e <rfalNfcPollTechDetetection+0x13e>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_A;
 800fb40:	4b50      	ldr	r3, [pc, #320]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fb42:	885b      	ldrh	r3, [r3, #2]
 800fb44:	f043 0301 	orr.w	r3, r3, #1
 800fb48:	b29a      	uxth	r2, r3
 800fb4a:	4b4e      	ldr	r3, [pc, #312]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fb4c:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 800fb4e:	2302      	movs	r3, #2
 800fb50:	e0e5      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-B Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )
 800fb52:	4b4c      	ldr	r3, [pc, #304]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fb54:	89db      	ldrh	r3, [r3, #14]
 800fb56:	f003 0302 	and.w	r3, r3, #2
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d035      	beq.n	800fbca <rfalNfcPollTechDetetection+0x1ba>
 800fb5e:	4b49      	ldr	r3, [pc, #292]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fb60:	889b      	ldrh	r3, [r3, #4]
 800fb62:	f003 0302 	and.w	r3, r3, #2
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d02f      	beq.n	800fbca <rfalNfcPollTechDetetection+0x1ba>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 800fb6a:	4b46      	ldr	r3, [pc, #280]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fb6c:	889b      	ldrh	r3, [r3, #4]
 800fb6e:	f023 0302 	bic.w	r3, r3, #2
 800fb72:	b29a      	uxth	r2, r3
 800fb74:	4b43      	ldr	r3, [pc, #268]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fb76:	809a      	strh	r2, [r3, #4]
    #if RFAL_FEATURE_NFCB
        {
            rfalNfcbSensbRes sensbRes;
            uint8_t          sensbResLen;            
        
            EXIT_ON_ERR( err, rfalNfcbPollerInitialize() );                           /* Initialize RFAL for NFC-B */
 800fb78:	f003 fe7e 	bl	8013878 <rfalNfcbPollerInitialize>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d001      	beq.n	800fb8a <rfalNfcPollTechDetetection+0x17a>
 800fb86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb88:	e0c9      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* As field is already On only starts GT timer */
 800fb8a:	f005 ff87 	bl	8015a9c <rfalFieldOnAndStartGT>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d001      	beq.n	800fb9c <rfalNfcPollTechDetetection+0x18c>
 800fb98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb9a:	e0c0      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
                                                                                                       
            err = rfalNfcbPollerTechnologyDetection( gNfcDev.disc.compMode, &sensbRes, &sensbResLen ); /* Poll for NFC-B devices */
 800fb9c:	4b39      	ldr	r3, [pc, #228]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fb9e:	7b1b      	ldrb	r3, [r3, #12]
 800fba0:	f107 0213 	add.w	r2, r7, #19
 800fba4:	f107 0114 	add.w	r1, r7, #20
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f003 ff77 	bl	8013a9c <rfalNfcbPollerTechnologyDetection>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 800fbb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d106      	bne.n	800fbc6 <rfalNfcPollTechDetetection+0x1b6>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_B;
 800fbb8:	4b32      	ldr	r3, [pc, #200]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fbba:	885b      	ldrh	r3, [r3, #2]
 800fbbc:	f043 0302 	orr.w	r3, r3, #2
 800fbc0:	b29a      	uxth	r2, r3
 800fbc2:	4b30      	ldr	r3, [pc, #192]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fbc4:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 800fbc6:	2302      	movs	r3, #2
 800fbc8:	e0a9      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
    }
    
    /*******************************************************************************/
    /* Passive NFC-F Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )
 800fbca:	4b2e      	ldr	r3, [pc, #184]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fbcc:	89db      	ldrh	r3, [r3, #14]
 800fbce:	f003 0304 	and.w	r3, r3, #4
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d031      	beq.n	800fc3a <rfalNfcPollTechDetetection+0x22a>
 800fbd6:	4b2b      	ldr	r3, [pc, #172]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fbd8:	889b      	ldrh	r3, [r3, #4]
 800fbda:	f003 0304 	and.w	r3, r3, #4
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d02b      	beq.n	800fc3a <rfalNfcPollTechDetetection+0x22a>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 800fbe2:	4b28      	ldr	r3, [pc, #160]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fbe4:	889b      	ldrh	r3, [r3, #4]
 800fbe6:	f023 0304 	bic.w	r3, r3, #4
 800fbea:	b29a      	uxth	r2, r3
 800fbec:	4b25      	ldr	r3, [pc, #148]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fbee:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCF
    
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ) );          /* Initialize RFAL for NFC-F */
 800fbf0:	4b24      	ldr	r3, [pc, #144]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fbf2:	7cdb      	ldrb	r3, [r3, #19]
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f004 fa13 	bl	8014020 <rfalNfcfPollerInitialize>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fbfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d001      	beq.n	800fc08 <rfalNfcPollTechDetetection+0x1f8>
 800fc04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc06:	e08a      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 800fc08:	f005 ff48 	bl	8015a9c <rfalFieldOnAndStartGT>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d001      	beq.n	800fc1a <rfalNfcPollTechDetetection+0x20a>
 800fc16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc18:	e081      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
                                                                                      
        err = rfalNfcfPollerCheckPresence();                                          /* Poll for NFC-F devices */
 800fc1a:	f004 fa4f 	bl	80140bc <rfalNfcfPollerCheckPresence>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 800fc22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d106      	bne.n	800fc36 <rfalNfcPollTechDetetection+0x226>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_F;
 800fc28:	4b16      	ldr	r3, [pc, #88]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fc2a:	885b      	ldrh	r3, [r3, #2]
 800fc2c:	f043 0304 	orr.w	r3, r3, #4
 800fc30:	b29a      	uxth	r2, r3
 800fc32:	4b14      	ldr	r3, [pc, #80]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fc34:	805a      	strh	r2, [r3, #2]
        }
        
        return ERR_BUSY;
 800fc36:	2302      	movs	r3, #2
 800fc38:	e071      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-V Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )
 800fc3a:	4b12      	ldr	r3, [pc, #72]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fc3c:	89db      	ldrh	r3, [r3, #14]
 800fc3e:	f003 0308 	and.w	r3, r3, #8
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d036      	beq.n	800fcb4 <rfalNfcPollTechDetetection+0x2a4>
 800fc46:	4b0f      	ldr	r3, [pc, #60]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fc48:	889b      	ldrh	r3, [r3, #4]
 800fc4a:	f003 0308 	and.w	r3, r3, #8
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d030      	beq.n	800fcb4 <rfalNfcPollTechDetetection+0x2a4>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 800fc52:	4b0c      	ldr	r3, [pc, #48]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fc54:	889b      	ldrh	r3, [r3, #4]
 800fc56:	f023 0308 	bic.w	r3, r3, #8
 800fc5a:	b29a      	uxth	r2, r3
 800fc5c:	4b09      	ldr	r3, [pc, #36]	; (800fc84 <rfalNfcPollTechDetetection+0x274>)
 800fc5e:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCV
        {
            rfalNfcvInventoryRes invRes;
        
            EXIT_ON_ERR( err, rfalNfcvPollerInitialize() );                               /* Initialize RFAL for NFC-V */
 800fc60:	f004 fd58 	bl	8014714 <rfalNfcvPollerInitialize>
 800fc64:	4603      	mov	r3, r0
 800fc66:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d001      	beq.n	800fc72 <rfalNfcPollTechDetetection+0x262>
 800fc6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc70:	e055      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 800fc72:	f005 ff13 	bl	8015a9c <rfalFieldOnAndStartGT>
 800fc76:	4603      	mov	r3, r0
 800fc78:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d007      	beq.n	800fc90 <rfalNfcPollTechDetetection+0x280>
 800fc80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc82:	e04c      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
 800fc84:	2000326c 	.word	0x2000326c
 800fc88:	00063510 	.word	0x00063510
 800fc8c:	200032fc 	.word	0x200032fc
                                                                                          
            err = rfalNfcvPollerCheckPresence( &invRes );                                 /* Poll for NFC-V devices */
 800fc90:	1d3b      	adds	r3, r7, #4
 800fc92:	4618      	mov	r0, r3
 800fc94:	f004 fd62 	bl	801475c <rfalNfcvPollerCheckPresence>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 800fc9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d106      	bne.n	800fcb0 <rfalNfcPollTechDetetection+0x2a0>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_V;
 800fca2:	4b21      	ldr	r3, [pc, #132]	; (800fd28 <rfalNfcPollTechDetetection+0x318>)
 800fca4:	885b      	ldrh	r3, [r3, #2]
 800fca6:	f043 0308 	orr.w	r3, r3, #8
 800fcaa:	b29a      	uxth	r2, r3
 800fcac:	4b1e      	ldr	r3, [pc, #120]	; (800fd28 <rfalNfcPollTechDetetection+0x318>)
 800fcae:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 800fcb0:	2302      	movs	r3, #2
 800fcb2:	e034      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive Proprietary Technology ST25TB                                       */
    /*******************************************************************************/  
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) )
 800fcb4:	4b1c      	ldr	r3, [pc, #112]	; (800fd28 <rfalNfcPollTechDetetection+0x318>)
 800fcb6:	89db      	ldrh	r3, [r3, #14]
 800fcb8:	f003 0320 	and.w	r3, r3, #32
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d02d      	beq.n	800fd1c <rfalNfcPollTechDetetection+0x30c>
 800fcc0:	4b19      	ldr	r3, [pc, #100]	; (800fd28 <rfalNfcPollTechDetetection+0x318>)
 800fcc2:	889b      	ldrh	r3, [r3, #4]
 800fcc4:	f003 0320 	and.w	r3, r3, #32
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d027      	beq.n	800fd1c <rfalNfcPollTechDetetection+0x30c>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 800fccc:	4b16      	ldr	r3, [pc, #88]	; (800fd28 <rfalNfcPollTechDetetection+0x318>)
 800fcce:	889b      	ldrh	r3, [r3, #4]
 800fcd0:	f023 0320 	bic.w	r3, r3, #32
 800fcd4:	b29a      	uxth	r2, r3
 800fcd6:	4b14      	ldr	r3, [pc, #80]	; (800fd28 <rfalNfcPollTechDetetection+0x318>)
 800fcd8:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_ST25TB
        
        EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                             /* Initialize RFAL for NFC-V */
 800fcda:	f008 f9ac 	bl	8018036 <rfalSt25tbPollerInitialize>
 800fcde:	4603      	mov	r3, r0
 800fce0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fce2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d001      	beq.n	800fcec <rfalNfcPollTechDetetection+0x2dc>
 800fce8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcea:	e018      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 800fcec:	f005 fed6 	bl	8015a9c <rfalFieldOnAndStartGT>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fcf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d001      	beq.n	800fcfe <rfalNfcPollTechDetetection+0x2ee>
 800fcfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcfc:	e00f      	b.n	800fd1e <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalSt25tbPollerCheckPresence( NULL );                                  /* Poll for ST25TB devices */
 800fcfe:	2000      	movs	r0, #0
 800fd00:	f008 f9a0 	bl	8018044 <rfalSt25tbPollerCheckPresence>
 800fd04:	4603      	mov	r3, r0
 800fd06:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 800fd08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d106      	bne.n	800fd1c <rfalNfcPollTechDetetection+0x30c>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_ST25TB;
 800fd0e:	4b06      	ldr	r3, [pc, #24]	; (800fd28 <rfalNfcPollTechDetetection+0x318>)
 800fd10:	885b      	ldrh	r3, [r3, #2]
 800fd12:	f043 0320 	orr.w	r3, r3, #32
 800fd16:	b29a      	uxth	r2, r3
 800fd18:	4b03      	ldr	r3, [pc, #12]	; (800fd28 <rfalNfcPollTechDetetection+0x318>)
 800fd1a:	805a      	strh	r2, [r3, #2]
        }
        
    #endif /* RFAL_FEATURE_ST25TB */
    }
    
    return ERR_NONE;
 800fd1c:	2300      	movs	r3, #0
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3728      	adds	r7, #40	; 0x28
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
 800fd26:	bf00      	nop
 800fd28:	2000326c 	.word	0x2000326c

0800fd2c <rfalNfcPollCollResolution>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollCollResolution( void )
{
 800fd2c:	b5b0      	push	{r4, r5, r7, lr}
 800fd2e:	b09e      	sub	sp, #120	; 0x78
 800fd30:	af00      	add	r7, sp, #0
    uint8_t    i;
    uint8_t    devCnt;
    ReturnCode err;
    
    err    = ERR_NONE;
 800fd32:	2300      	movs	r3, #0
 800fd34:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    devCnt = 0;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    i      = 0;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    NO_WARNING(err);
    NO_WARNING(devCnt);
    NO_WARNING(i);
    
    /* Check if device limit has been reached */
    if( gNfcDev.devCnt >= gNfcDev.disc.devLimit )
 800fd44:	4bb5      	ldr	r3, [pc, #724]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fd46:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
 800fd4a:	4bb4      	ldr	r3, [pc, #720]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fd4c:	7c9b      	ldrb	r3, [r3, #18]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d301      	bcc.n	800fd56 <rfalNfcPollCollResolution+0x2a>
    {
        return ERR_NONE;
 800fd52:	2300      	movs	r3, #0
 800fd54:	e2b1      	b.n	80102ba <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-A Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCA
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )   /* If a NFC-A device was found/detected, perform Collision Resolution */
 800fd56:	4bb1      	ldr	r3, [pc, #708]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fd58:	885b      	ldrh	r3, [r3, #2]
 800fd5a:	f003 0301 	and.w	r3, r3, #1
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	f000 8084 	beq.w	800fe6c <rfalNfcPollCollResolution+0x140>
 800fd64:	4bad      	ldr	r3, [pc, #692]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fd66:	889b      	ldrh	r3, [r3, #4]
 800fd68:	f003 0301 	and.w	r3, r3, #1
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d07d      	beq.n	800fe6c <rfalNfcPollCollResolution+0x140>
    {
        rfalNfcaListenDevice nfcaDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 800fd70:	4baa      	ldr	r3, [pc, #680]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fd72:	889b      	ldrh	r3, [r3, #4]
 800fd74:	f023 0301 	bic.w	r3, r3, #1
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	4ba8      	ldr	r3, [pc, #672]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fd7c:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcaPollerInitialize());                                /* Initialize RFAL for NFC-A */
 800fd7e:	f003 f95f 	bl	8013040 <rfalNfcaPollerInitialize>
 800fd82:	4603      	mov	r3, r0
 800fd84:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800fd88:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d002      	beq.n	800fd96 <rfalNfcPollCollResolution+0x6a>
 800fd90:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800fd94:	e291      	b.n	80102ba <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 800fd96:	f005 fe81 	bl	8015a9c <rfalFieldOnAndStartGT>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800fda0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d002      	beq.n	800fdae <rfalNfcPollCollResolution+0x82>
 800fda8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800fdac:	e285      	b.n	80102ba <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcaPollerFullCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcaDevList, &devCnt );
 800fdae:	4b9b      	ldr	r3, [pc, #620]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fdb0:	7b18      	ldrb	r0, [r3, #12]
 800fdb2:	4b9a      	ldr	r3, [pc, #616]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fdb4:	7c9a      	ldrb	r2, [r3, #18]
 800fdb6:	4b99      	ldr	r3, [pc, #612]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fdb8:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800fdbc:	1ad3      	subs	r3, r2, r3
 800fdbe:	b2d9      	uxtb	r1, r3
 800fdc0:	f107 0373 	add.w	r3, r7, #115	; 0x73
 800fdc4:	1d3a      	adds	r2, r7, #4
 800fdc6:	f003 fb76 	bl	80134b6 <rfalNfcaPollerFullCollisionResolution>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 800fdd0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d147      	bne.n	800fe68 <rfalNfcPollCollResolution+0x13c>
 800fdd8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d043      	beq.n	800fe68 <rfalNfcPollCollResolution+0x13c>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 800fde0:	2300      	movs	r3, #0
 800fde2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800fde6:	e039      	b.n	800fe5c <rfalNfcPollCollResolution+0x130>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 800fde8:	4b8c      	ldr	r3, [pc, #560]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fdea:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800fdee:	4619      	mov	r1, r3
 800fdf0:	4a8a      	ldr	r2, [pc, #552]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fdf2:	460b      	mov	r3, r1
 800fdf4:	011b      	lsls	r3, r3, #4
 800fdf6:	1a5b      	subs	r3, r3, r1
 800fdf8:	00db      	lsls	r3, r3, #3
 800fdfa:	4413      	add	r3, r2
 800fdfc:	3390      	adds	r3, #144	; 0x90
 800fdfe:	2200      	movs	r2, #0
 800fe00:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 800fe02:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800fe06:	4b85      	ldr	r3, [pc, #532]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fe08:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	4983      	ldr	r1, [pc, #524]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fe10:	4603      	mov	r3, r0
 800fe12:	011b      	lsls	r3, r3, #4
 800fe14:	1a1b      	subs	r3, r3, r0
 800fe16:	00db      	lsls	r3, r3, #3
 800fe18:	440b      	add	r3, r1
 800fe1a:	3390      	adds	r3, #144	; 0x90
 800fe1c:	2116      	movs	r1, #22
 800fe1e:	fb01 f202 	mul.w	r2, r1, r2
 800fe22:	3278      	adds	r2, #120	; 0x78
 800fe24:	443a      	add	r2, r7
 800fe26:	3a74      	subs	r2, #116	; 0x74
 800fe28:	3301      	adds	r3, #1
 800fe2a:	6811      	ldr	r1, [r2, #0]
 800fe2c:	6855      	ldr	r5, [r2, #4]
 800fe2e:	6894      	ldr	r4, [r2, #8]
 800fe30:	68d0      	ldr	r0, [r2, #12]
 800fe32:	6019      	str	r1, [r3, #0]
 800fe34:	605d      	str	r5, [r3, #4]
 800fe36:	609c      	str	r4, [r3, #8]
 800fe38:	60d8      	str	r0, [r3, #12]
 800fe3a:	6911      	ldr	r1, [r2, #16]
 800fe3c:	6119      	str	r1, [r3, #16]
 800fe3e:	8a92      	ldrh	r2, [r2, #20]
 800fe40:	829a      	strh	r2, [r3, #20]
                gNfcDev.devCnt++;
 800fe42:	4b76      	ldr	r3, [pc, #472]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fe44:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800fe48:	3301      	adds	r3, #1
 800fe4a:	b2da      	uxtb	r2, r3
 800fe4c:	4b73      	ldr	r3, [pc, #460]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fe4e:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 800fe52:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fe56:	3301      	adds	r3, #1
 800fe58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800fe5c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800fe60:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d3bf      	bcc.n	800fde8 <rfalNfcPollCollResolution+0xbc>
            }
        }
        
        return ERR_BUSY;
 800fe68:	2302      	movs	r3, #2
 800fe6a:	e226      	b.n	80102ba <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-B Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )   /* If a NFC-B device was found/detected, perform Collision Resolution */
 800fe6c:	4b6b      	ldr	r3, [pc, #428]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fe6e:	885b      	ldrh	r3, [r3, #2]
 800fe70:	f003 0302 	and.w	r3, r3, #2
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f000 8084 	beq.w	800ff82 <rfalNfcPollCollResolution+0x256>
 800fe7a:	4b68      	ldr	r3, [pc, #416]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fe7c:	889b      	ldrh	r3, [r3, #4]
 800fe7e:	f003 0302 	and.w	r3, r3, #2
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d07d      	beq.n	800ff82 <rfalNfcPollCollResolution+0x256>
    {
        rfalNfcbListenDevice nfcbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 800fe86:	4b65      	ldr	r3, [pc, #404]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fe88:	889b      	ldrh	r3, [r3, #4]
 800fe8a:	f023 0302 	bic.w	r3, r3, #2
 800fe8e:	b29a      	uxth	r2, r3
 800fe90:	4b62      	ldr	r3, [pc, #392]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fe92:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcbPollerInitialize());                                /* Initialize RFAL for NFC-B */
 800fe94:	f003 fcf0 	bl	8013878 <rfalNfcbPollerInitialize>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800fe9e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d002      	beq.n	800feac <rfalNfcPollCollResolution+0x180>
 800fea6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800feaa:	e206      	b.n	80102ba <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 800feac:	f005 fdf6 	bl	8015a9c <rfalFieldOnAndStartGT>
 800feb0:	4603      	mov	r3, r0
 800feb2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800feb6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800feba:	2b00      	cmp	r3, #0
 800febc:	d002      	beq.n	800fec4 <rfalNfcPollCollResolution+0x198>
 800febe:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800fec2:	e1fa      	b.n	80102ba <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcbPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcbDevList, &devCnt );
 800fec4:	4b55      	ldr	r3, [pc, #340]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fec6:	7b18      	ldrb	r0, [r3, #12]
 800fec8:	4b54      	ldr	r3, [pc, #336]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800feca:	7c9a      	ldrb	r2, [r3, #18]
 800fecc:	4b53      	ldr	r3, [pc, #332]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800fece:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800fed2:	1ad3      	subs	r3, r2, r3
 800fed4:	b2d9      	uxtb	r1, r3
 800fed6:	f107 0373 	add.w	r3, r7, #115	; 0x73
 800feda:	1d3a      	adds	r2, r7, #4
 800fedc:	f003 fdf0 	bl	8013ac0 <rfalNfcbPollerCollisionResolution>
 800fee0:	4603      	mov	r3, r0
 800fee2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 800fee6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800feea:	2b00      	cmp	r3, #0
 800feec:	d147      	bne.n	800ff7e <rfalNfcPollCollResolution+0x252>
 800feee:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d043      	beq.n	800ff7e <rfalNfcPollCollResolution+0x252>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 800fef6:	2300      	movs	r3, #0
 800fef8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800fefc:	e039      	b.n	800ff72 <rfalNfcPollCollResolution+0x246>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 800fefe:	4b47      	ldr	r3, [pc, #284]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800ff00:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800ff04:	4619      	mov	r1, r3
 800ff06:	4a45      	ldr	r2, [pc, #276]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800ff08:	460b      	mov	r3, r1
 800ff0a:	011b      	lsls	r3, r3, #4
 800ff0c:	1a5b      	subs	r3, r3, r1
 800ff0e:	00db      	lsls	r3, r3, #3
 800ff10:	4413      	add	r3, r2
 800ff12:	3390      	adds	r3, #144	; 0x90
 800ff14:	2201      	movs	r2, #1
 800ff16:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 800ff18:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800ff1c:	4b3f      	ldr	r3, [pc, #252]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800ff1e:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800ff22:	4618      	mov	r0, r3
 800ff24:	493d      	ldr	r1, [pc, #244]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800ff26:	4603      	mov	r3, r0
 800ff28:	011b      	lsls	r3, r3, #4
 800ff2a:	1a1b      	subs	r3, r3, r0
 800ff2c:	00db      	lsls	r3, r3, #3
 800ff2e:	440b      	add	r3, r1
 800ff30:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800ff34:	4613      	mov	r3, r2
 800ff36:	011b      	lsls	r3, r3, #4
 800ff38:	1a9b      	subs	r3, r3, r2
 800ff3a:	3378      	adds	r3, #120	; 0x78
 800ff3c:	443b      	add	r3, r7
 800ff3e:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 800ff42:	1c4b      	adds	r3, r1, #1
 800ff44:	6814      	ldr	r4, [r2, #0]
 800ff46:	6850      	ldr	r0, [r2, #4]
 800ff48:	6891      	ldr	r1, [r2, #8]
 800ff4a:	601c      	str	r4, [r3, #0]
 800ff4c:	6058      	str	r0, [r3, #4]
 800ff4e:	6099      	str	r1, [r3, #8]
 800ff50:	8991      	ldrh	r1, [r2, #12]
 800ff52:	7b92      	ldrb	r2, [r2, #14]
 800ff54:	8199      	strh	r1, [r3, #12]
 800ff56:	739a      	strb	r2, [r3, #14]
                gNfcDev.devCnt++;
 800ff58:	4b30      	ldr	r3, [pc, #192]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800ff5a:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800ff5e:	3301      	adds	r3, #1
 800ff60:	b2da      	uxtb	r2, r3
 800ff62:	4b2e      	ldr	r3, [pc, #184]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800ff64:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 800ff68:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ff72:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800ff76:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d3bf      	bcc.n	800fefe <rfalNfcPollCollResolution+0x1d2>
            }
        }
        
        return ERR_BUSY;
 800ff7e:	2302      	movs	r3, #2
 800ff80:	e19b      	b.n	80102ba <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-F Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCF
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )  /* If a NFC-F device was found/detected, perform Collision Resolution */
 800ff82:	4b26      	ldr	r3, [pc, #152]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800ff84:	885b      	ldrh	r3, [r3, #2]
 800ff86:	f003 0304 	and.w	r3, r3, #4
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	f000 808e 	beq.w	80100ac <rfalNfcPollCollResolution+0x380>
 800ff90:	4b22      	ldr	r3, [pc, #136]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800ff92:	889b      	ldrh	r3, [r3, #4]
 800ff94:	f003 0304 	and.w	r3, r3, #4
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	f000 8087 	beq.w	80100ac <rfalNfcPollCollResolution+0x380>
    {
        rfalNfcfListenDevice nfcfDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 800ff9e:	4b1f      	ldr	r3, [pc, #124]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800ffa0:	889b      	ldrh	r3, [r3, #4]
 800ffa2:	f023 0304 	bic.w	r3, r3, #4
 800ffa6:	b29a      	uxth	r2, r3
 800ffa8:	4b1c      	ldr	r3, [pc, #112]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800ffaa:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ));           /* Initialize RFAL for NFC-F */
 800ffac:	4b1b      	ldr	r3, [pc, #108]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800ffae:	7cdb      	ldrb	r3, [r3, #19]
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f004 f835 	bl	8014020 <rfalNfcfPollerInitialize>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800ffbc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d002      	beq.n	800ffca <rfalNfcPollCollResolution+0x29e>
 800ffc4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ffc8:	e177      	b.n	80102ba <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 800ffca:	f005 fd67 	bl	8015a9c <rfalFieldOnAndStartGT>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800ffd4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d002      	beq.n	800ffe2 <rfalNfcPollCollResolution+0x2b6>
 800ffdc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ffe0:	e16b      	b.n	80102ba <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcfPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcfDevList, &devCnt );
 800ffe2:	4b0e      	ldr	r3, [pc, #56]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800ffe4:	7b18      	ldrb	r0, [r3, #12]
 800ffe6:	4b0d      	ldr	r3, [pc, #52]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800ffe8:	7c9a      	ldrb	r2, [r3, #18]
 800ffea:	4b0c      	ldr	r3, [pc, #48]	; (801001c <rfalNfcPollCollResolution+0x2f0>)
 800ffec:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800fff0:	1ad3      	subs	r3, r2, r3
 800fff2:	b2d9      	uxtb	r1, r3
 800fff4:	f107 0373 	add.w	r3, r7, #115	; 0x73
 800fff8:	1d3a      	adds	r2, r7, #4
 800fffa:	f004 f87f 	bl	80140fc <rfalNfcfPollerCollisionResolution>
 800fffe:	4603      	mov	r3, r0
 8010000:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8010004:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8010008:	2b00      	cmp	r3, #0
 801000a:	d14d      	bne.n	80100a8 <rfalNfcPollCollResolution+0x37c>
 801000c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010010:	2b00      	cmp	r3, #0
 8010012:	d049      	beq.n	80100a8 <rfalNfcPollCollResolution+0x37c>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8010014:	2300      	movs	r3, #0
 8010016:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801001a:	e03f      	b.n	801009c <rfalNfcPollCollResolution+0x370>
 801001c:	2000326c 	.word	0x2000326c
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8010020:	4ba8      	ldr	r3, [pc, #672]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 8010022:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8010026:	4619      	mov	r1, r3
 8010028:	4aa6      	ldr	r2, [pc, #664]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 801002a:	460b      	mov	r3, r1
 801002c:	011b      	lsls	r3, r3, #4
 801002e:	1a5b      	subs	r3, r3, r1
 8010030:	00db      	lsls	r3, r3, #3
 8010032:	4413      	add	r3, r2
 8010034:	3390      	adds	r3, #144	; 0x90
 8010036:	2202      	movs	r2, #2
 8010038:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 801003a:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 801003e:	4ba1      	ldr	r3, [pc, #644]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 8010040:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8010044:	4618      	mov	r0, r3
 8010046:	499f      	ldr	r1, [pc, #636]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 8010048:	4603      	mov	r3, r0
 801004a:	011b      	lsls	r3, r3, #4
 801004c:	1a1b      	subs	r3, r3, r0
 801004e:	00db      	lsls	r3, r3, #3
 8010050:	440b      	add	r3, r1
 8010052:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8010056:	4613      	mov	r3, r2
 8010058:	00db      	lsls	r3, r3, #3
 801005a:	4413      	add	r3, r2
 801005c:	005b      	lsls	r3, r3, #1
 801005e:	4413      	add	r3, r2
 8010060:	3378      	adds	r3, #120	; 0x78
 8010062:	443b      	add	r3, r7
 8010064:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 8010068:	1c4b      	adds	r3, r1, #1
 801006a:	6815      	ldr	r5, [r2, #0]
 801006c:	6854      	ldr	r4, [r2, #4]
 801006e:	6890      	ldr	r0, [r2, #8]
 8010070:	68d1      	ldr	r1, [r2, #12]
 8010072:	601d      	str	r5, [r3, #0]
 8010074:	605c      	str	r4, [r3, #4]
 8010076:	6098      	str	r0, [r3, #8]
 8010078:	60d9      	str	r1, [r3, #12]
 801007a:	8a11      	ldrh	r1, [r2, #16]
 801007c:	7c92      	ldrb	r2, [r2, #18]
 801007e:	8219      	strh	r1, [r3, #16]
 8010080:	749a      	strb	r2, [r3, #18]
                gNfcDev.devCnt++;
 8010082:	4b90      	ldr	r3, [pc, #576]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 8010084:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8010088:	3301      	adds	r3, #1
 801008a:	b2da      	uxtb	r2, r3
 801008c:	4b8d      	ldr	r3, [pc, #564]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 801008e:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8010092:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010096:	3301      	adds	r3, #1
 8010098:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801009c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80100a0:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d3bb      	bcc.n	8010020 <rfalNfcPollCollResolution+0x2f4>
            }
        }
        
        return ERR_BUSY;
 80100a8:	2302      	movs	r3, #2
 80100aa:	e106      	b.n	80102ba <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-V Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCV
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )  /* If a NFC-V device was found/detected, perform Collision Resolution */
 80100ac:	4b85      	ldr	r3, [pc, #532]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 80100ae:	885b      	ldrh	r3, [r3, #2]
 80100b0:	f003 0308 	and.w	r3, r3, #8
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	f000 8083 	beq.w	80101c0 <rfalNfcPollCollResolution+0x494>
 80100ba:	4b82      	ldr	r3, [pc, #520]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 80100bc:	889b      	ldrh	r3, [r3, #4]
 80100be:	f003 0308 	and.w	r3, r3, #8
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d07c      	beq.n	80101c0 <rfalNfcPollCollResolution+0x494>
    {
        rfalNfcvListenDevice nfcvDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 80100c6:	4b7f      	ldr	r3, [pc, #508]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 80100c8:	889b      	ldrh	r3, [r3, #4]
 80100ca:	f023 0308 	bic.w	r3, r3, #8
 80100ce:	b29a      	uxth	r2, r3
 80100d0:	4b7c      	ldr	r3, [pc, #496]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 80100d2:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcvPollerInitialize());                                /* Initialize RFAL for NFC-V */
 80100d4:	f004 fb1e 	bl	8014714 <rfalNfcvPollerInitialize>
 80100d8:	4603      	mov	r3, r0
 80100da:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80100de:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d002      	beq.n	80100ec <rfalNfcPollCollResolution+0x3c0>
 80100e6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80100ea:	e0e6      	b.n	80102ba <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 80100ec:	f005 fcd6 	bl	8015a9c <rfalFieldOnAndStartGT>
 80100f0:	4603      	mov	r3, r0
 80100f2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80100f6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d002      	beq.n	8010104 <rfalNfcPollCollResolution+0x3d8>
 80100fe:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8010102:	e0da      	b.n	80102ba <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 8010104:	4b6f      	ldr	r3, [pc, #444]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 8010106:	7c9a      	ldrb	r2, [r3, #18]
 8010108:	4b6e      	ldr	r3, [pc, #440]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 801010a:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801010e:	1ad3      	subs	r3, r2, r3
 8010110:	b2d9      	uxtb	r1, r3
 8010112:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8010116:	1d3a      	adds	r2, r7, #4
 8010118:	2000      	movs	r0, #0
 801011a:	f004 fba3 	bl	8014864 <rfalNfcvPollerCollisionResolution>
 801011e:	4603      	mov	r3, r0
 8010120:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8010124:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8010128:	2b00      	cmp	r3, #0
 801012a:	d147      	bne.n	80101bc <rfalNfcPollCollResolution+0x490>
 801012c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010130:	2b00      	cmp	r3, #0
 8010132:	d043      	beq.n	80101bc <rfalNfcPollCollResolution+0x490>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8010134:	2300      	movs	r3, #0
 8010136:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801013a:	e039      	b.n	80101b0 <rfalNfcPollCollResolution+0x484>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 801013c:	4b61      	ldr	r3, [pc, #388]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 801013e:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8010142:	4619      	mov	r1, r3
 8010144:	4a5f      	ldr	r2, [pc, #380]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 8010146:	460b      	mov	r3, r1
 8010148:	011b      	lsls	r3, r3, #4
 801014a:	1a5b      	subs	r3, r3, r1
 801014c:	00db      	lsls	r3, r3, #3
 801014e:	4413      	add	r3, r2
 8010150:	3390      	adds	r3, #144	; 0x90
 8010152:	2203      	movs	r2, #3
 8010154:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 8010156:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 801015a:	4b5a      	ldr	r3, [pc, #360]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 801015c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8010160:	4618      	mov	r0, r3
 8010162:	4958      	ldr	r1, [pc, #352]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 8010164:	4603      	mov	r3, r0
 8010166:	011b      	lsls	r3, r3, #4
 8010168:	1a1b      	subs	r3, r3, r0
 801016a:	00db      	lsls	r3, r3, #3
 801016c:	440b      	add	r3, r1
 801016e:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8010172:	4613      	mov	r3, r2
 8010174:	005b      	lsls	r3, r3, #1
 8010176:	4413      	add	r3, r2
 8010178:	009b      	lsls	r3, r3, #2
 801017a:	4413      	add	r3, r2
 801017c:	3378      	adds	r3, #120	; 0x78
 801017e:	443b      	add	r3, r7
 8010180:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 8010184:	1c4b      	adds	r3, r1, #1
 8010186:	6814      	ldr	r4, [r2, #0]
 8010188:	6850      	ldr	r0, [r2, #4]
 801018a:	6891      	ldr	r1, [r2, #8]
 801018c:	601c      	str	r4, [r3, #0]
 801018e:	6058      	str	r0, [r3, #4]
 8010190:	6099      	str	r1, [r3, #8]
 8010192:	7b12      	ldrb	r2, [r2, #12]
 8010194:	731a      	strb	r2, [r3, #12]
                gNfcDev.devCnt++;
 8010196:	4b4b      	ldr	r3, [pc, #300]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 8010198:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801019c:	3301      	adds	r3, #1
 801019e:	b2da      	uxtb	r2, r3
 80101a0:	4b48      	ldr	r3, [pc, #288]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 80101a2:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80101a6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80101aa:	3301      	adds	r3, #1
 80101ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80101b0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80101b4:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d3bf      	bcc.n	801013c <rfalNfcPollCollResolution+0x410>
            }
        }
        
        return ERR_BUSY;
 80101bc:	2302      	movs	r3, #2
 80101be:	e07c      	b.n	80102ba <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* ST25TB Collision Resolution                                                 */
    /*******************************************************************************/
#if RFAL_FEATURE_ST25TB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) ) /* If a ST25TB device was found/detected, perform Collision Resolution */
 80101c0:	4b40      	ldr	r3, [pc, #256]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 80101c2:	885b      	ldrh	r3, [r3, #2]
 80101c4:	f003 0320 	and.w	r3, r3, #32
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d075      	beq.n	80102b8 <rfalNfcPollCollResolution+0x58c>
 80101cc:	4b3d      	ldr	r3, [pc, #244]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 80101ce:	889b      	ldrh	r3, [r3, #4]
 80101d0:	f003 0320 	and.w	r3, r3, #32
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d06f      	beq.n	80102b8 <rfalNfcPollCollResolution+0x58c>
    {
        rfalSt25tbListenDevice st25tbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 80101d8:	4b3a      	ldr	r3, [pc, #232]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 80101da:	889b      	ldrh	r3, [r3, #4]
 80101dc:	f023 0320 	bic.w	r3, r3, #32
 80101e0:	b29a      	uxth	r2, r3
 80101e2:	4b38      	ldr	r3, [pc, #224]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 80101e4:	809a      	strh	r2, [r3, #4]
        
        rfalSt25tbPollerInitialize();                                                 /* Initialize RFAL for ST25TB */
 80101e6:	f007 ff26 	bl	8018036 <rfalSt25tbPollerInitialize>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 80101ea:	f005 fc57 	bl	8015a9c <rfalFieldOnAndStartGT>
 80101ee:	4603      	mov	r3, r0
 80101f0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80101f4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d002      	beq.n	8010202 <rfalNfcPollCollResolution+0x4d6>
 80101fc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8010200:	e05b      	b.n	80102ba <rfalNfcPollCollResolution+0x58e>
        
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 8010202:	4b30      	ldr	r3, [pc, #192]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 8010204:	7c9a      	ldrb	r2, [r3, #18]
 8010206:	4b2f      	ldr	r3, [pc, #188]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 8010208:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801020c:	1ad3      	subs	r3, r2, r3
 801020e:	b2db      	uxtb	r3, r3
 8010210:	f107 0273 	add.w	r2, r7, #115	; 0x73
 8010214:	1d39      	adds	r1, r7, #4
 8010216:	4618      	mov	r0, r3
 8010218:	f008 f80a 	bl	8018230 <rfalSt25tbPollerCollisionResolution>
 801021c:	4603      	mov	r3, r0
 801021e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8010222:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8010226:	2b00      	cmp	r3, #0
 8010228:	d144      	bne.n	80102b4 <rfalNfcPollCollResolution+0x588>
 801022a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801022e:	2b00      	cmp	r3, #0
 8010230:	d040      	beq.n	80102b4 <rfalNfcPollCollResolution+0x588>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8010232:	2300      	movs	r3, #0
 8010234:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8010238:	e036      	b.n	80102a8 <rfalNfcPollCollResolution+0x57c>
            {
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 801023a:	4b22      	ldr	r3, [pc, #136]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 801023c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8010240:	4619      	mov	r1, r3
 8010242:	4a20      	ldr	r2, [pc, #128]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 8010244:	460b      	mov	r3, r1
 8010246:	011b      	lsls	r3, r3, #4
 8010248:	1a5b      	subs	r3, r3, r1
 801024a:	00db      	lsls	r3, r3, #3
 801024c:	4413      	add	r3, r2
 801024e:	3390      	adds	r3, #144	; 0x90
 8010250:	2204      	movs	r2, #4
 8010252:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8010254:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8010258:	4b1a      	ldr	r3, [pc, #104]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 801025a:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801025e:	4618      	mov	r0, r3
 8010260:	4918      	ldr	r1, [pc, #96]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 8010262:	4603      	mov	r3, r0
 8010264:	011b      	lsls	r3, r3, #4
 8010266:	1a1b      	subs	r3, r3, r0
 8010268:	00db      	lsls	r3, r3, #3
 801026a:	440b      	add	r3, r1
 801026c:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8010270:	4613      	mov	r3, r2
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	4413      	add	r3, r2
 8010276:	005b      	lsls	r3, r3, #1
 8010278:	3378      	adds	r3, #120	; 0x78
 801027a:	443b      	add	r3, r7
 801027c:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 8010280:	1c4b      	adds	r3, r1, #1
 8010282:	6810      	ldr	r0, [r2, #0]
 8010284:	6851      	ldr	r1, [r2, #4]
 8010286:	6018      	str	r0, [r3, #0]
 8010288:	6059      	str	r1, [r3, #4]
 801028a:	8912      	ldrh	r2, [r2, #8]
 801028c:	811a      	strh	r2, [r3, #8]
                gNfcDev.devCnt++;
 801028e:	4b0d      	ldr	r3, [pc, #52]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 8010290:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8010294:	3301      	adds	r3, #1
 8010296:	b2da      	uxtb	r2, r3
 8010298:	4b0a      	ldr	r3, [pc, #40]	; (80102c4 <rfalNfcPollCollResolution+0x598>)
 801029a:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 801029e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80102a2:	3301      	adds	r3, #1
 80102a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80102a8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80102ac:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d3c2      	bcc.n	801023a <rfalNfcPollCollResolution+0x50e>
            }
        }
        
        return ERR_BUSY;
 80102b4:	2302      	movs	r3, #2
 80102b6:	e000      	b.n	80102ba <rfalNfcPollCollResolution+0x58e>
    }
#endif /* RFAL_FEATURE_ST25TB */
    
    return ERR_NONE;                                                                  /* All technologies have been performed */
 80102b8:	2300      	movs	r3, #0
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3778      	adds	r7, #120	; 0x78
 80102be:	46bd      	mov	sp, r7
 80102c0:	bdb0      	pop	{r4, r5, r7, pc}
 80102c2:	bf00      	nop
 80102c4:	2000326c 	.word	0x2000326c

080102c8 <rfalNfcPollActivation>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollActivation( uint8_t devIt )
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b08e      	sub	sp, #56	; 0x38
 80102cc:	af04      	add	r7, sp, #16
 80102ce:	4603      	mov	r3, r0
 80102d0:	71fb      	strb	r3, [r7, #7]
    ReturnCode err;
    
    err = ERR_NONE;
 80102d2:	2300      	movs	r3, #0
 80102d4:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Supress warning when specific RFAL features have been disabled */
    NO_WARNING(err);
    
    if( devIt > gNfcDev.devCnt )
 80102d6:	4ba6      	ldr	r3, [pc, #664]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 80102d8:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80102dc:	79fa      	ldrb	r2, [r7, #7]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d901      	bls.n	80102e6 <rfalNfcPollActivation+0x1e>
    {
        return ERR_WRONG_STATE;
 80102e2:	2321      	movs	r3, #33	; 0x21
 80102e4:	e29c      	b.n	8010820 <rfalNfcPollActivation+0x558>
    }
    
    switch( gNfcDev.devList[devIt].type )
 80102e6:	79fa      	ldrb	r2, [r7, #7]
 80102e8:	49a1      	ldr	r1, [pc, #644]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 80102ea:	4613      	mov	r3, r2
 80102ec:	011b      	lsls	r3, r3, #4
 80102ee:	1a9b      	subs	r3, r3, r2
 80102f0:	00db      	lsls	r3, r3, #3
 80102f2:	440b      	add	r3, r1
 80102f4:	3390      	adds	r3, #144	; 0x90
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	2b05      	cmp	r3, #5
 80102fa:	f200 8284 	bhi.w	8010806 <rfalNfcPollActivation+0x53e>
 80102fe:	a201      	add	r2, pc, #4	; (adr r2, 8010304 <rfalNfcPollActivation+0x3c>)
 8010300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010304:	08010357 	.word	0x08010357
 8010308:	08010575 	.word	0x08010575
 801030c:	08010669 	.word	0x08010669
 8010310:	08010763 	.word	0x08010763
 8010314:	080107b5 	.word	0x080107b5
 8010318:	0801031d 	.word	0x0801031d
        /*******************************************************************************/
    #if RFAL_FEATURE_NFC_DEP
        case RFAL_NFC_LISTEN_TYPE_AP2P:
            /* Activation has already been perfomed (ATR_REQ) */
        
            gNfcDev.devList[devIt].nfcid     = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 801031c:	79f9      	ldrb	r1, [r7, #7]
 801031e:	79fa      	ldrb	r2, [r7, #7]
 8010320:	460b      	mov	r3, r1
 8010322:	011b      	lsls	r3, r3, #4
 8010324:	1a5b      	subs	r3, r3, r1
 8010326:	00db      	lsls	r3, r3, #3
 8010328:	33b0      	adds	r3, #176	; 0xb0
 801032a:	4991      	ldr	r1, [pc, #580]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 801032c:	440b      	add	r3, r1
 801032e:	1c99      	adds	r1, r3, #2
 8010330:	488f      	ldr	r0, [pc, #572]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 8010332:	4613      	mov	r3, r2
 8010334:	011b      	lsls	r3, r3, #4
 8010336:	1a9b      	subs	r3, r3, r2
 8010338:	00db      	lsls	r3, r3, #3
 801033a:	4403      	add	r3, r0
 801033c:	33a8      	adds	r3, #168	; 0xa8
 801033e:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen  = RFAL_NFCDEP_NFCID3_LEN;
 8010340:	79fa      	ldrb	r2, [r7, #7]
 8010342:	498b      	ldr	r1, [pc, #556]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 8010344:	4613      	mov	r3, r2
 8010346:	011b      	lsls	r3, r3, #4
 8010348:	1a9b      	subs	r3, r3, r2
 801034a:	00db      	lsls	r3, r3, #3
 801034c:	440b      	add	r3, r1
 801034e:	33ac      	adds	r3, #172	; 0xac
 8010350:	220a      	movs	r2, #10
 8010352:	701a      	strb	r2, [r3, #0]
            break;
 8010354:	e259      	b.n	801080a <rfalNfcPollActivation+0x542>
        /* Passive NFC-A Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCA
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            
            rfalNfcaPollerInitialize();
 8010356:	f002 fe73 	bl	8013040 <rfalNfcaPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfca.isSleep )                             /* Check if desired device is in Sleep */
 801035a:	79fa      	ldrb	r2, [r7, #7]
 801035c:	4984      	ldr	r1, [pc, #528]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 801035e:	4613      	mov	r3, r2
 8010360:	011b      	lsls	r3, r3, #4
 8010362:	1a9b      	subs	r3, r3, r2
 8010364:	00db      	lsls	r3, r3, #3
 8010366:	440b      	add	r3, r1
 8010368:	33a6      	adds	r3, #166	; 0xa6
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d02a      	beq.n	80103c6 <rfalNfcPollActivation+0xfe>
            {
                rfalNfcaSensRes sensRes;
                rfalNfcaSelRes  selRes;
                
                EXIT_ON_ERR( err, rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes ) ); /* Wake up all cards  */
 8010370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010374:	4619      	mov	r1, r3
 8010376:	2052      	movs	r0, #82	; 0x52
 8010378:	f002 fe86 	bl	8013088 <rfalNfcaPollerCheckPresence>
 801037c:	4603      	mov	r3, r0
 801037e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010380:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010382:	2b00      	cmp	r3, #0
 8010384:	d001      	beq.n	801038a <rfalNfcPollActivation+0xc2>
 8010386:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010388:	e24a      	b.n	8010820 <rfalNfcPollActivation+0x558>
                EXIT_ON_ERR( err, rfalNfcaPollerSelect( gNfcDev.devList[devIt].dev.nfca.nfcId1, gNfcDev.devList[devIt].dev.nfca.nfcId1Len, &selRes ) ); /* Select specific device  */
 801038a:	79fa      	ldrb	r2, [r7, #7]
 801038c:	4613      	mov	r3, r2
 801038e:	011b      	lsls	r3, r3, #4
 8010390:	1a9b      	subs	r3, r3, r2
 8010392:	00db      	lsls	r3, r3, #3
 8010394:	3390      	adds	r3, #144	; 0x90
 8010396:	4a76      	ldr	r2, [pc, #472]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 8010398:	4413      	add	r3, r2
 801039a:	1d98      	adds	r0, r3, #6
 801039c:	79fa      	ldrb	r2, [r7, #7]
 801039e:	4974      	ldr	r1, [pc, #464]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 80103a0:	4613      	mov	r3, r2
 80103a2:	011b      	lsls	r3, r3, #4
 80103a4:	1a9b      	subs	r3, r3, r2
 80103a6:	00db      	lsls	r3, r3, #3
 80103a8:	440b      	add	r3, r1
 80103aa:	3395      	adds	r3, #149	; 0x95
 80103ac:	781b      	ldrb	r3, [r3, #0]
 80103ae:	f107 0220 	add.w	r2, r7, #32
 80103b2:	4619      	mov	r1, r3
 80103b4:	f003 f99a 	bl	80136ec <rfalNfcaPollerSelect>
 80103b8:	4603      	mov	r3, r0
 80103ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80103bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d001      	beq.n	80103c6 <rfalNfcPollActivation+0xfe>
 80103c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80103c4:	e22c      	b.n	8010820 <rfalNfcPollActivation+0x558>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.nfcId1;
 80103c6:	79f9      	ldrb	r1, [r7, #7]
 80103c8:	79fa      	ldrb	r2, [r7, #7]
 80103ca:	460b      	mov	r3, r1
 80103cc:	011b      	lsls	r3, r3, #4
 80103ce:	1a5b      	subs	r3, r3, r1
 80103d0:	00db      	lsls	r3, r3, #3
 80103d2:	3390      	adds	r3, #144	; 0x90
 80103d4:	4966      	ldr	r1, [pc, #408]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 80103d6:	440b      	add	r3, r1
 80103d8:	1d99      	adds	r1, r3, #6
 80103da:	4865      	ldr	r0, [pc, #404]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 80103dc:	4613      	mov	r3, r2
 80103de:	011b      	lsls	r3, r3, #4
 80103e0:	1a9b      	subs	r3, r3, r2
 80103e2:	00db      	lsls	r3, r3, #3
 80103e4:	4403      	add	r3, r0
 80103e6:	33a8      	adds	r3, #168	; 0xa8
 80103e8:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = gNfcDev.devList[devIt].dev.nfca.nfcId1Len;
 80103ea:	79f9      	ldrb	r1, [r7, #7]
 80103ec:	79fa      	ldrb	r2, [r7, #7]
 80103ee:	4860      	ldr	r0, [pc, #384]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 80103f0:	460b      	mov	r3, r1
 80103f2:	011b      	lsls	r3, r3, #4
 80103f4:	1a5b      	subs	r3, r3, r1
 80103f6:	00db      	lsls	r3, r3, #3
 80103f8:	4403      	add	r3, r0
 80103fa:	3395      	adds	r3, #149	; 0x95
 80103fc:	7818      	ldrb	r0, [r3, #0]
 80103fe:	495c      	ldr	r1, [pc, #368]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 8010400:	4613      	mov	r3, r2
 8010402:	011b      	lsls	r3, r3, #4
 8010404:	1a9b      	subs	r3, r3, r2
 8010406:	00db      	lsls	r3, r3, #3
 8010408:	440b      	add	r3, r1
 801040a:	33ac      	adds	r3, #172	; 0xac
 801040c:	4602      	mov	r2, r0
 801040e:	701a      	strb	r2, [r3, #0]
            
            /*******************************************************************************/
            /* Perform protocol specific activation                                        */
            switch( gNfcDev.devList[devIt].dev.nfca.type )
 8010410:	79fa      	ldrb	r2, [r7, #7]
 8010412:	4957      	ldr	r1, [pc, #348]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 8010414:	4613      	mov	r3, r2
 8010416:	011b      	lsls	r3, r3, #4
 8010418:	1a9b      	subs	r3, r3, r2
 801041a:	00db      	lsls	r3, r3, #3
 801041c:	440b      	add	r3, r1
 801041e:	3391      	adds	r3, #145	; 0x91
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	2b60      	cmp	r3, #96	; 0x60
 8010424:	d065      	beq.n	80104f2 <rfalNfcPollActivation+0x22a>
 8010426:	2b60      	cmp	r3, #96	; 0x60
 8010428:	f300 809e 	bgt.w	8010568 <rfalNfcPollActivation+0x2a0>
 801042c:	2b40      	cmp	r3, #64	; 0x40
 801042e:	d060      	beq.n	80104f2 <rfalNfcPollActivation+0x22a>
 8010430:	2b40      	cmp	r3, #64	; 0x40
 8010432:	f300 8099 	bgt.w	8010568 <rfalNfcPollActivation+0x2a0>
 8010436:	2b20      	cmp	r3, #32
 8010438:	d03a      	beq.n	80104b0 <rfalNfcPollActivation+0x1e8>
 801043a:	2b20      	cmp	r3, #32
 801043c:	f300 8094 	bgt.w	8010568 <rfalNfcPollActivation+0x2a0>
 8010440:	2b00      	cmp	r3, #0
 8010442:	d02a      	beq.n	801049a <rfalNfcPollActivation+0x1d2>
 8010444:	2b01      	cmp	r3, #1
 8010446:	f040 808f 	bne.w	8010568 <rfalNfcPollActivation+0x2a0>
                /*******************************************************************************/
                case RFAL_NFCA_T1T:
                
                    /* No further activation needed for T1T (RID already performed) */
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.ridRes.uid;
 801044a:	79f9      	ldrb	r1, [r7, #7]
 801044c:	79fa      	ldrb	r2, [r7, #7]
 801044e:	460b      	mov	r3, r1
 8010450:	011b      	lsls	r3, r3, #4
 8010452:	1a5b      	subs	r3, r3, r1
 8010454:	00db      	lsls	r3, r3, #3
 8010456:	3398      	adds	r3, #152	; 0x98
 8010458:	4945      	ldr	r1, [pc, #276]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 801045a:	440b      	add	r3, r1
 801045c:	f103 010a 	add.w	r1, r3, #10
 8010460:	4843      	ldr	r0, [pc, #268]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 8010462:	4613      	mov	r3, r2
 8010464:	011b      	lsls	r3, r3, #4
 8010466:	1a9b      	subs	r3, r3, r2
 8010468:	00db      	lsls	r3, r3, #3
 801046a:	4403      	add	r3, r0
 801046c:	33a8      	adds	r3, #168	; 0xa8
 801046e:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 8010470:	79fa      	ldrb	r2, [r7, #7]
 8010472:	493f      	ldr	r1, [pc, #252]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 8010474:	4613      	mov	r3, r2
 8010476:	011b      	lsls	r3, r3, #4
 8010478:	1a9b      	subs	r3, r3, r2
 801047a:	00db      	lsls	r3, r3, #3
 801047c:	440b      	add	r3, r1
 801047e:	33ac      	adds	r3, #172	; 0xac
 8010480:	2204      	movs	r2, #4
 8010482:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 8010484:	79fa      	ldrb	r2, [r7, #7]
 8010486:	493a      	ldr	r1, [pc, #232]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 8010488:	4613      	mov	r3, r2
 801048a:	011b      	lsls	r3, r3, #4
 801048c:	1a9b      	subs	r3, r3, r2
 801048e:	00db      	lsls	r3, r3, #3
 8010490:	440b      	add	r3, r1
 8010492:	33ad      	adds	r3, #173	; 0xad
 8010494:	2200      	movs	r2, #0
 8010496:	701a      	strb	r2, [r3, #0]
                    break;
 8010498:	e068      	b.n	801056c <rfalNfcPollActivation+0x2a4>
                
                case RFAL_NFCA_T2T:
                    
                    /* No further activation needed for a T2T */

                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 801049a:	79fa      	ldrb	r2, [r7, #7]
 801049c:	4934      	ldr	r1, [pc, #208]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 801049e:	4613      	mov	r3, r2
 80104a0:	011b      	lsls	r3, r3, #4
 80104a2:	1a9b      	subs	r3, r3, r2
 80104a4:	00db      	lsls	r3, r3, #3
 80104a6:	440b      	add	r3, r1
 80104a8:	33ad      	adds	r3, #173	; 0xad
 80104aa:	2200      	movs	r2, #0
 80104ac:	701a      	strb	r2, [r3, #0]
                    break;
 80104ae:	e05d      	b.n	801056c <rfalNfcPollActivation+0x2a4>
                /*******************************************************************************/
                case RFAL_NFCA_T4T:                                                   /* Device supports ISO-DEP */
                
                #if RFAL_FEATURE_ISO_DEP_POLL
                    /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported */
                    rfalIsoDepInitialize();
 80104b0:	f7fd fc06 	bl	800dcc0 <rfalIsoDepInitialize>
                    EXIT_ON_ERR( err, rfalIsoDepPollAHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, &gNfcDev.devList[devIt].proto.isoDep ) );
 80104b4:	79fa      	ldrb	r2, [r7, #7]
 80104b6:	4613      	mov	r3, r2
 80104b8:	011b      	lsls	r3, r3, #4
 80104ba:	1a9b      	subs	r3, r3, r2
 80104bc:	00db      	lsls	r3, r3, #3
 80104be:	33b0      	adds	r3, #176	; 0xb0
 80104c0:	4a2b      	ldr	r2, [pc, #172]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 80104c2:	4413      	add	r3, r2
 80104c4:	2202      	movs	r2, #2
 80104c6:	2100      	movs	r1, #0
 80104c8:	2008      	movs	r0, #8
 80104ca:	f7fe f9a7 	bl	800e81c <rfalIsoDepPollAHandleActivation>
 80104ce:	4603      	mov	r3, r0
 80104d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80104d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d001      	beq.n	80104dc <rfalNfcPollActivation+0x214>
 80104d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80104da:	e1a1      	b.n	8010820 <rfalNfcPollActivation+0x558>
                    
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;   /* NFC-A T4T device activated */
 80104dc:	79fa      	ldrb	r2, [r7, #7]
 80104de:	4924      	ldr	r1, [pc, #144]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 80104e0:	4613      	mov	r3, r2
 80104e2:	011b      	lsls	r3, r3, #4
 80104e4:	1a9b      	subs	r3, r3, r2
 80104e6:	00db      	lsls	r3, r3, #3
 80104e8:	440b      	add	r3, r1
 80104ea:	33ad      	adds	r3, #173	; 0xad
 80104ec:	2201      	movs	r2, #1
 80104ee:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No ISO-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                    break;
 80104f0:	e03c      	b.n	801056c <rfalNfcPollActivation+0x2a4>
                case RFAL_NFCA_T4T_NFCDEP:                                            /* Device supports both T4T and NFC-DEP */
                case RFAL_NFCA_NFCDEP:                                                /* Device supports NFC-DEP */
                
                #if RFAL_FEATURE_NFC_DEP
                    /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                    EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 80104f2:	79fa      	ldrb	r2, [r7, #7]
 80104f4:	4613      	mov	r3, r2
 80104f6:	011b      	lsls	r3, r3, #4
 80104f8:	1a9b      	subs	r3, r3, r2
 80104fa:	00db      	lsls	r3, r3, #3
 80104fc:	3390      	adds	r3, #144	; 0x90
 80104fe:	4a1c      	ldr	r2, [pc, #112]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 8010500:	1898      	adds	r0, r3, r2
 8010502:	2300      	movs	r3, #0
 8010504:	2200      	movs	r2, #0
 8010506:	2100      	movs	r1, #0
 8010508:	f000 fae4 	bl	8010ad4 <rfalNfcNfcDepActivate>
 801050c:	4603      	mov	r3, r0
 801050e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010510:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010512:	2b00      	cmp	r3, #0
 8010514:	d001      	beq.n	801051a <rfalNfcPollActivation+0x252>
 8010516:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010518:	e182      	b.n	8010820 <rfalNfcPollActivation+0x558>
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 801051a:	79f9      	ldrb	r1, [r7, #7]
 801051c:	79fa      	ldrb	r2, [r7, #7]
 801051e:	460b      	mov	r3, r1
 8010520:	011b      	lsls	r3, r3, #4
 8010522:	1a5b      	subs	r3, r3, r1
 8010524:	00db      	lsls	r3, r3, #3
 8010526:	33b0      	adds	r3, #176	; 0xb0
 8010528:	4911      	ldr	r1, [pc, #68]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 801052a:	440b      	add	r3, r1
 801052c:	1c99      	adds	r1, r3, #2
 801052e:	4810      	ldr	r0, [pc, #64]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 8010530:	4613      	mov	r3, r2
 8010532:	011b      	lsls	r3, r3, #4
 8010534:	1a9b      	subs	r3, r3, r2
 8010536:	00db      	lsls	r3, r3, #3
 8010538:	4403      	add	r3, r0
 801053a:	33a8      	adds	r3, #168	; 0xa8
 801053c:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 801053e:	79fa      	ldrb	r2, [r7, #7]
 8010540:	490b      	ldr	r1, [pc, #44]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 8010542:	4613      	mov	r3, r2
 8010544:	011b      	lsls	r3, r3, #4
 8010546:	1a9b      	subs	r3, r3, r2
 8010548:	00db      	lsls	r3, r3, #3
 801054a:	440b      	add	r3, r1
 801054c:	33ac      	adds	r3, #172	; 0xac
 801054e:	220a      	movs	r2, #10
 8010550:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;   /* NFC-A P2P device activated */
 8010552:	79fa      	ldrb	r2, [r7, #7]
 8010554:	4906      	ldr	r1, [pc, #24]	; (8010570 <rfalNfcPollActivation+0x2a8>)
 8010556:	4613      	mov	r3, r2
 8010558:	011b      	lsls	r3, r3, #4
 801055a:	1a9b      	subs	r3, r3, r2
 801055c:	00db      	lsls	r3, r3, #3
 801055e:	440b      	add	r3, r1
 8010560:	33ad      	adds	r3, #173	; 0xad
 8010562:	2202      	movs	r2, #2
 8010564:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No NFC-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_NFC_DEP */
                    break;
 8010566:	e001      	b.n	801056c <rfalNfcPollActivation+0x2a4>
                
                /*******************************************************************************/
                default:
                    return ERR_WRONG_STATE;
 8010568:	2321      	movs	r3, #33	; 0x21
 801056a:	e159      	b.n	8010820 <rfalNfcPollActivation+0x558>
            }
            break;
 801056c:	e14d      	b.n	801080a <rfalNfcPollActivation+0x542>
 801056e:	bf00      	nop
 8010570:	2000326c 	.word	0x2000326c
        /* Passive NFC-B Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCB
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            
            rfalNfcbPollerInitialize();
 8010574:	f003 f980 	bl	8013878 <rfalNfcbPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfcb.isSleep )                             /* Check if desired device is in Sleep */
 8010578:	79fa      	ldrb	r2, [r7, #7]
 801057a:	49ab      	ldr	r1, [pc, #684]	; (8010828 <rfalNfcPollActivation+0x560>)
 801057c:	4613      	mov	r3, r2
 801057e:	011b      	lsls	r3, r3, #4
 8010580:	1a9b      	subs	r3, r3, r2
 8010582:	00db      	lsls	r3, r3, #3
 8010584:	440b      	add	r3, r1
 8010586:	339f      	adds	r3, #159	; 0x9f
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d007      	beq.n	801059e <rfalNfcPollActivation+0x2d6>
            {
                rfalNfcbSensbRes sensbRes;
                uint8_t          sensbResLen;
                
                /* Wake up all cards. SENSB_RES may return collision but the NFCID0 is available to explicitly select NFC-B card via ATTRIB; so error will be ignored here */
                rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen );
 801058e:	f107 030f 	add.w	r3, r7, #15
 8010592:	f107 0210 	add.w	r2, r7, #16
 8010596:	2100      	movs	r1, #0
 8010598:	2008      	movs	r0, #8
 801059a:	f003 f999 	bl	80138d0 <rfalNfcbPollerCheckPresence>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcb.sensbRes.nfcid0;
 801059e:	79f9      	ldrb	r1, [r7, #7]
 80105a0:	79fa      	ldrb	r2, [r7, #7]
 80105a2:	460b      	mov	r3, r1
 80105a4:	011b      	lsls	r3, r3, #4
 80105a6:	1a5b      	subs	r3, r3, r1
 80105a8:	00db      	lsls	r3, r3, #3
 80105aa:	3390      	adds	r3, #144	; 0x90
 80105ac:	499e      	ldr	r1, [pc, #632]	; (8010828 <rfalNfcPollActivation+0x560>)
 80105ae:	440b      	add	r3, r1
 80105b0:	1cd9      	adds	r1, r3, #3
 80105b2:	489d      	ldr	r0, [pc, #628]	; (8010828 <rfalNfcPollActivation+0x560>)
 80105b4:	4613      	mov	r3, r2
 80105b6:	011b      	lsls	r3, r3, #4
 80105b8:	1a9b      	subs	r3, r3, r2
 80105ba:	00db      	lsls	r3, r3, #3
 80105bc:	4403      	add	r3, r0
 80105be:	33a8      	adds	r3, #168	; 0xa8
 80105c0:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 80105c2:	79fa      	ldrb	r2, [r7, #7]
 80105c4:	4998      	ldr	r1, [pc, #608]	; (8010828 <rfalNfcPollActivation+0x560>)
 80105c6:	4613      	mov	r3, r2
 80105c8:	011b      	lsls	r3, r3, #4
 80105ca:	1a9b      	subs	r3, r3, r2
 80105cc:	00db      	lsls	r3, r3, #3
 80105ce:	440b      	add	r3, r1
 80105d0:	33ac      	adds	r3, #172	; 0xac
 80105d2:	2204      	movs	r2, #4
 80105d4:	701a      	strb	r2, [r3, #0]
            
        #if RFAL_FEATURE_ISO_DEP_POLL
            /* Check if device supports  ISO-DEP (ISO14443-4) */
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 80105d6:	79fa      	ldrb	r2, [r7, #7]
 80105d8:	4993      	ldr	r1, [pc, #588]	; (8010828 <rfalNfcPollActivation+0x560>)
 80105da:	4613      	mov	r3, r2
 80105dc:	011b      	lsls	r3, r3, #4
 80105de:	1a9b      	subs	r3, r3, r2
 80105e0:	00db      	lsls	r3, r3, #3
 80105e2:	440b      	add	r3, r1
 80105e4:	339c      	adds	r3, #156	; 0x9c
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	f003 0301 	and.w	r3, r3, #1
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d030      	beq.n	8010652 <rfalNfcPollActivation+0x38a>
            {
                rfalIsoDepInitialize();
 80105f0:	f7fd fb66 	bl	800dcc0 <rfalIsoDepInitialize>
                /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported    */
                EXIT_ON_ERR( err, rfalIsoDepPollBHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, 0x00, &gNfcDev.devList[devIt].dev.nfcb, NULL, 0, &gNfcDev.devList[devIt].proto.isoDep ) );
 80105f4:	79fa      	ldrb	r2, [r7, #7]
 80105f6:	4613      	mov	r3, r2
 80105f8:	011b      	lsls	r3, r3, #4
 80105fa:	1a9b      	subs	r3, r3, r2
 80105fc:	00db      	lsls	r3, r3, #3
 80105fe:	3390      	adds	r3, #144	; 0x90
 8010600:	4a89      	ldr	r2, [pc, #548]	; (8010828 <rfalNfcPollActivation+0x560>)
 8010602:	4413      	add	r3, r2
 8010604:	1c59      	adds	r1, r3, #1
 8010606:	79fa      	ldrb	r2, [r7, #7]
 8010608:	4613      	mov	r3, r2
 801060a:	011b      	lsls	r3, r3, #4
 801060c:	1a9b      	subs	r3, r3, r2
 801060e:	00db      	lsls	r3, r3, #3
 8010610:	33b0      	adds	r3, #176	; 0xb0
 8010612:	4a85      	ldr	r2, [pc, #532]	; (8010828 <rfalNfcPollActivation+0x560>)
 8010614:	4413      	add	r3, r2
 8010616:	9303      	str	r3, [sp, #12]
 8010618:	2300      	movs	r3, #0
 801061a:	9302      	str	r3, [sp, #8]
 801061c:	2300      	movs	r3, #0
 801061e:	9301      	str	r3, [sp, #4]
 8010620:	9100      	str	r1, [sp, #0]
 8010622:	2300      	movs	r3, #0
 8010624:	2202      	movs	r2, #2
 8010626:	2100      	movs	r1, #0
 8010628:	2008      	movs	r0, #8
 801062a:	f7fe fa51 	bl	800ead0 <rfalIsoDepPollBHandleActivation>
 801062e:	4603      	mov	r3, r0
 8010630:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010632:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010634:	2b00      	cmp	r3, #0
 8010636:	d001      	beq.n	801063c <rfalNfcPollActivation+0x374>
 8010638:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801063a:	e0f1      	b.n	8010820 <rfalNfcPollActivation+0x558>
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;       /* NFC-B T4T device activated */
 801063c:	79fa      	ldrb	r2, [r7, #7]
 801063e:	497a      	ldr	r1, [pc, #488]	; (8010828 <rfalNfcPollActivation+0x560>)
 8010640:	4613      	mov	r3, r2
 8010642:	011b      	lsls	r3, r3, #4
 8010644:	1a9b      	subs	r3, r3, r2
 8010646:	00db      	lsls	r3, r3, #3
 8010648:	440b      	add	r3, r1
 801064a:	33ad      	adds	r3, #173	; 0xad
 801064c:	2201      	movs	r2, #1
 801064e:	701a      	strb	r2, [r3, #0]
                break;
 8010650:	e0db      	b.n	801080a <rfalNfcPollActivation+0x542>
            }
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
            
            gNfcDev.devList[devIt].rfInterface =  RFAL_NFC_INTERFACE_RF;              /* NFC-B device activated     */
 8010652:	79fa      	ldrb	r2, [r7, #7]
 8010654:	4974      	ldr	r1, [pc, #464]	; (8010828 <rfalNfcPollActivation+0x560>)
 8010656:	4613      	mov	r3, r2
 8010658:	011b      	lsls	r3, r3, #4
 801065a:	1a9b      	subs	r3, r3, r2
 801065c:	00db      	lsls	r3, r3, #3
 801065e:	440b      	add	r3, r1
 8010660:	33ad      	adds	r3, #173	; 0xad
 8010662:	2200      	movs	r2, #0
 8010664:	701a      	strb	r2, [r3, #0]
            break;
 8010666:	e0d0      	b.n	801080a <rfalNfcPollActivation+0x542>
        /* Passive NFC-F Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCF
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            
            rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR );
 8010668:	4b6f      	ldr	r3, [pc, #444]	; (8010828 <rfalNfcPollActivation+0x560>)
 801066a:	7cdb      	ldrb	r3, [r3, #19]
 801066c:	4618      	mov	r0, r3
 801066e:	f003 fcd7 	bl	8014020 <rfalNfcfPollerInitialize>
        
        #if RFAL_FEATURE_NFC_DEP
            if( rfalNfcfIsNfcDepSupported( &gNfcDev.devList[devIt].dev.nfcf ) )
 8010672:	79fa      	ldrb	r2, [r7, #7]
 8010674:	496c      	ldr	r1, [pc, #432]	; (8010828 <rfalNfcPollActivation+0x560>)
 8010676:	4613      	mov	r3, r2
 8010678:	011b      	lsls	r3, r3, #4
 801067a:	1a9b      	subs	r3, r3, r2
 801067c:	00db      	lsls	r3, r3, #3
 801067e:	440b      	add	r3, r1
 8010680:	3393      	adds	r3, #147	; 0x93
 8010682:	781b      	ldrb	r3, [r3, #0]
 8010684:	2b01      	cmp	r3, #1
 8010686:	d145      	bne.n	8010714 <rfalNfcPollActivation+0x44c>
 8010688:	79fa      	ldrb	r2, [r7, #7]
 801068a:	4967      	ldr	r1, [pc, #412]	; (8010828 <rfalNfcPollActivation+0x560>)
 801068c:	4613      	mov	r3, r2
 801068e:	011b      	lsls	r3, r3, #4
 8010690:	1a9b      	subs	r3, r3, r2
 8010692:	00db      	lsls	r3, r3, #3
 8010694:	440b      	add	r3, r1
 8010696:	3394      	adds	r3, #148	; 0x94
 8010698:	781b      	ldrb	r3, [r3, #0]
 801069a:	2bfe      	cmp	r3, #254	; 0xfe
 801069c:	d13a      	bne.n	8010714 <rfalNfcPollActivation+0x44c>
            {
                /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 801069e:	79fa      	ldrb	r2, [r7, #7]
 80106a0:	4613      	mov	r3, r2
 80106a2:	011b      	lsls	r3, r3, #4
 80106a4:	1a9b      	subs	r3, r3, r2
 80106a6:	00db      	lsls	r3, r3, #3
 80106a8:	3390      	adds	r3, #144	; 0x90
 80106aa:	4a5f      	ldr	r2, [pc, #380]	; (8010828 <rfalNfcPollActivation+0x560>)
 80106ac:	1898      	adds	r0, r3, r2
 80106ae:	2300      	movs	r3, #0
 80106b0:	2200      	movs	r2, #0
 80106b2:	2100      	movs	r1, #0
 80106b4:	f000 fa0e 	bl	8010ad4 <rfalNfcNfcDepActivate>
 80106b8:	4603      	mov	r3, r0
 80106ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80106bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d001      	beq.n	80106c6 <rfalNfcPollActivation+0x3fe>
 80106c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80106c4:	e0ac      	b.n	8010820 <rfalNfcPollActivation+0x558>
                
                /* Set NFCID */
                gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 80106c6:	79f9      	ldrb	r1, [r7, #7]
 80106c8:	79fa      	ldrb	r2, [r7, #7]
 80106ca:	460b      	mov	r3, r1
 80106cc:	011b      	lsls	r3, r3, #4
 80106ce:	1a5b      	subs	r3, r3, r1
 80106d0:	00db      	lsls	r3, r3, #3
 80106d2:	33b0      	adds	r3, #176	; 0xb0
 80106d4:	4954      	ldr	r1, [pc, #336]	; (8010828 <rfalNfcPollActivation+0x560>)
 80106d6:	440b      	add	r3, r1
 80106d8:	1c99      	adds	r1, r3, #2
 80106da:	4853      	ldr	r0, [pc, #332]	; (8010828 <rfalNfcPollActivation+0x560>)
 80106dc:	4613      	mov	r3, r2
 80106de:	011b      	lsls	r3, r3, #4
 80106e0:	1a9b      	subs	r3, r3, r2
 80106e2:	00db      	lsls	r3, r3, #3
 80106e4:	4403      	add	r3, r0
 80106e6:	33a8      	adds	r3, #168	; 0xa8
 80106e8:	6019      	str	r1, [r3, #0]
                gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 80106ea:	79fa      	ldrb	r2, [r7, #7]
 80106ec:	494e      	ldr	r1, [pc, #312]	; (8010828 <rfalNfcPollActivation+0x560>)
 80106ee:	4613      	mov	r3, r2
 80106f0:	011b      	lsls	r3, r3, #4
 80106f2:	1a9b      	subs	r3, r3, r2
 80106f4:	00db      	lsls	r3, r3, #3
 80106f6:	440b      	add	r3, r1
 80106f8:	33ac      	adds	r3, #172	; 0xac
 80106fa:	220a      	movs	r2, #10
 80106fc:	701a      	strb	r2, [r3, #0]
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;       /* NFC-F P2P device activated */
 80106fe:	79fa      	ldrb	r2, [r7, #7]
 8010700:	4949      	ldr	r1, [pc, #292]	; (8010828 <rfalNfcPollActivation+0x560>)
 8010702:	4613      	mov	r3, r2
 8010704:	011b      	lsls	r3, r3, #4
 8010706:	1a9b      	subs	r3, r3, r2
 8010708:	00db      	lsls	r3, r3, #3
 801070a:	440b      	add	r3, r1
 801070c:	33ad      	adds	r3, #173	; 0xad
 801070e:	2202      	movs	r2, #2
 8010710:	701a      	strb	r2, [r3, #0]
                break;
 8010712:	e07a      	b.n	801080a <rfalNfcPollActivation+0x542>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcf.sensfRes.NFCID2;
 8010714:	79f9      	ldrb	r1, [r7, #7]
 8010716:	79fa      	ldrb	r2, [r7, #7]
 8010718:	460b      	mov	r3, r1
 801071a:	011b      	lsls	r3, r3, #4
 801071c:	1a5b      	subs	r3, r3, r1
 801071e:	00db      	lsls	r3, r3, #3
 8010720:	3390      	adds	r3, #144	; 0x90
 8010722:	4941      	ldr	r1, [pc, #260]	; (8010828 <rfalNfcPollActivation+0x560>)
 8010724:	440b      	add	r3, r1
 8010726:	1cd9      	adds	r1, r3, #3
 8010728:	483f      	ldr	r0, [pc, #252]	; (8010828 <rfalNfcPollActivation+0x560>)
 801072a:	4613      	mov	r3, r2
 801072c:	011b      	lsls	r3, r3, #4
 801072e:	1a9b      	subs	r3, r3, r2
 8010730:	00db      	lsls	r3, r3, #3
 8010732:	4403      	add	r3, r0
 8010734:	33a8      	adds	r3, #168	; 0xa8
 8010736:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8010738:	79fa      	ldrb	r2, [r7, #7]
 801073a:	493b      	ldr	r1, [pc, #236]	; (8010828 <rfalNfcPollActivation+0x560>)
 801073c:	4613      	mov	r3, r2
 801073e:	011b      	lsls	r3, r3, #4
 8010740:	1a9b      	subs	r3, r3, r2
 8010742:	00db      	lsls	r3, r3, #3
 8010744:	440b      	add	r3, r1
 8010746:	33ac      	adds	r3, #172	; 0xac
 8010748:	2208      	movs	r2, #8
 801074a:	701a      	strb	r2, [r3, #0]
            
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-F T3T device activated */
 801074c:	79fa      	ldrb	r2, [r7, #7]
 801074e:	4936      	ldr	r1, [pc, #216]	; (8010828 <rfalNfcPollActivation+0x560>)
 8010750:	4613      	mov	r3, r2
 8010752:	011b      	lsls	r3, r3, #4
 8010754:	1a9b      	subs	r3, r3, r2
 8010756:	00db      	lsls	r3, r3, #3
 8010758:	440b      	add	r3, r1
 801075a:	33ad      	adds	r3, #173	; 0xad
 801075c:	2200      	movs	r2, #0
 801075e:	701a      	strb	r2, [r3, #0]
            break;
 8010760:	e053      	b.n	801080a <rfalNfcPollActivation+0x542>
        /* Passive NFC-V Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCV
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            
            rfalNfcvPollerInitialize();
 8010762:	f003 ffd7 	bl	8014714 <rfalNfcvPollerInitialize>
            
            /* No specific activation needed for a T5T */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcv.InvRes.UID;
 8010766:	79f9      	ldrb	r1, [r7, #7]
 8010768:	79fa      	ldrb	r2, [r7, #7]
 801076a:	460b      	mov	r3, r1
 801076c:	011b      	lsls	r3, r3, #4
 801076e:	1a5b      	subs	r3, r3, r1
 8010770:	00db      	lsls	r3, r3, #3
 8010772:	3390      	adds	r3, #144	; 0x90
 8010774:	492c      	ldr	r1, [pc, #176]	; (8010828 <rfalNfcPollActivation+0x560>)
 8010776:	440b      	add	r3, r1
 8010778:	1cd9      	adds	r1, r3, #3
 801077a:	482b      	ldr	r0, [pc, #172]	; (8010828 <rfalNfcPollActivation+0x560>)
 801077c:	4613      	mov	r3, r2
 801077e:	011b      	lsls	r3, r3, #4
 8010780:	1a9b      	subs	r3, r3, r2
 8010782:	00db      	lsls	r3, r3, #3
 8010784:	4403      	add	r3, r0
 8010786:	33a8      	adds	r3, #168	; 0xa8
 8010788:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCV_UID_LEN;
 801078a:	79fa      	ldrb	r2, [r7, #7]
 801078c:	4926      	ldr	r1, [pc, #152]	; (8010828 <rfalNfcPollActivation+0x560>)
 801078e:	4613      	mov	r3, r2
 8010790:	011b      	lsls	r3, r3, #4
 8010792:	1a9b      	subs	r3, r3, r2
 8010794:	00db      	lsls	r3, r3, #3
 8010796:	440b      	add	r3, r1
 8010798:	33ac      	adds	r3, #172	; 0xac
 801079a:	2208      	movs	r2, #8
 801079c:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-V T5T device activated */
 801079e:	79fa      	ldrb	r2, [r7, #7]
 80107a0:	4921      	ldr	r1, [pc, #132]	; (8010828 <rfalNfcPollActivation+0x560>)
 80107a2:	4613      	mov	r3, r2
 80107a4:	011b      	lsls	r3, r3, #4
 80107a6:	1a9b      	subs	r3, r3, r2
 80107a8:	00db      	lsls	r3, r3, #3
 80107aa:	440b      	add	r3, r1
 80107ac:	33ad      	adds	r3, #173	; 0xad
 80107ae:	2200      	movs	r2, #0
 80107b0:	701a      	strb	r2, [r3, #0]
            break;
 80107b2:	e02a      	b.n	801080a <rfalNfcPollActivation+0x542>
        /* Passive ST25TB Activation                                                   */
        /*******************************************************************************/
    #if RFAL_FEATURE_ST25TB
        case RFAL_NFC_LISTEN_TYPE_ST25TB:
            
            rfalSt25tbPollerInitialize();
 80107b4:	f007 fc3f 	bl	8018036 <rfalSt25tbPollerInitialize>
            
            /* No specific activation needed for a ST25TB */
        
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 80107b8:	79f9      	ldrb	r1, [r7, #7]
 80107ba:	79fa      	ldrb	r2, [r7, #7]
 80107bc:	460b      	mov	r3, r1
 80107be:	011b      	lsls	r3, r3, #4
 80107c0:	1a5b      	subs	r3, r3, r1
 80107c2:	00db      	lsls	r3, r3, #3
 80107c4:	3390      	adds	r3, #144	; 0x90
 80107c6:	4918      	ldr	r1, [pc, #96]	; (8010828 <rfalNfcPollActivation+0x560>)
 80107c8:	440b      	add	r3, r1
 80107ca:	1c99      	adds	r1, r3, #2
 80107cc:	4816      	ldr	r0, [pc, #88]	; (8010828 <rfalNfcPollActivation+0x560>)
 80107ce:	4613      	mov	r3, r2
 80107d0:	011b      	lsls	r3, r3, #4
 80107d2:	1a9b      	subs	r3, r3, r2
 80107d4:	00db      	lsls	r3, r3, #3
 80107d6:	4403      	add	r3, r0
 80107d8:	33a8      	adds	r3, #168	; 0xa8
 80107da:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_ST25TB_UID_LEN;
 80107dc:	79fa      	ldrb	r2, [r7, #7]
 80107de:	4912      	ldr	r1, [pc, #72]	; (8010828 <rfalNfcPollActivation+0x560>)
 80107e0:	4613      	mov	r3, r2
 80107e2:	011b      	lsls	r3, r3, #4
 80107e4:	1a9b      	subs	r3, r3, r2
 80107e6:	00db      	lsls	r3, r3, #3
 80107e8:	440b      	add	r3, r1
 80107ea:	33ac      	adds	r3, #172	; 0xac
 80107ec:	2208      	movs	r2, #8
 80107ee:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* ST25TB device activated */
 80107f0:	79fa      	ldrb	r2, [r7, #7]
 80107f2:	490d      	ldr	r1, [pc, #52]	; (8010828 <rfalNfcPollActivation+0x560>)
 80107f4:	4613      	mov	r3, r2
 80107f6:	011b      	lsls	r3, r3, #4
 80107f8:	1a9b      	subs	r3, r3, r2
 80107fa:	00db      	lsls	r3, r3, #3
 80107fc:	440b      	add	r3, r1
 80107fe:	33ad      	adds	r3, #173	; 0xad
 8010800:	2200      	movs	r2, #0
 8010802:	701a      	strb	r2, [r3, #0]
            break;
 8010804:	e001      	b.n	801080a <rfalNfcPollActivation+0x542>
    #endif /* RFAL_FEATURE_ST25TB */
        
        /*******************************************************************************/
        default:
            return ERR_WRONG_STATE;
 8010806:	2321      	movs	r3, #33	; 0x21
 8010808:	e00a      	b.n	8010820 <rfalNfcPollActivation+0x558>
    }
    
    gNfcDev.activeDev = &gNfcDev.devList[devIt];                                      /* Assign active device to be used further on */
 801080a:	79fa      	ldrb	r2, [r7, #7]
 801080c:	4613      	mov	r3, r2
 801080e:	011b      	lsls	r3, r3, #4
 8010810:	1a9b      	subs	r3, r3, r2
 8010812:	00db      	lsls	r3, r3, #3
 8010814:	3390      	adds	r3, #144	; 0x90
 8010816:	4a04      	ldr	r2, [pc, #16]	; (8010828 <rfalNfcPollActivation+0x560>)
 8010818:	4413      	add	r3, r2
 801081a:	4a03      	ldr	r2, [pc, #12]	; (8010828 <rfalNfcPollActivation+0x560>)
 801081c:	6093      	str	r3, [r2, #8]
    return ERR_NONE;
 801081e:	2300      	movs	r3, #0
}
 8010820:	4618      	mov	r0, r3
 8010822:	3728      	adds	r7, #40	; 0x28
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	2000326c 	.word	0x2000326c

0801082c <rfalNfcListenActivation>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_LISTEN_MODE
static ReturnCode rfalNfcListenActivation( void )
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
    uint8_t                   hdrLen;
    ReturnCode                ret;
    rfalLmState               lmSt;
    rfalBitRate               bitRate;
    
    lmSt = rfalListenGetState( &isDataRcvd, &bitRate );
 8010832:	1c7a      	adds	r2, r7, #1
 8010834:	1cbb      	adds	r3, r7, #2
 8010836:	4611      	mov	r1, r2
 8010838:	4618      	mov	r0, r3
 801083a:	f007 f819 	bl	8017870 <rfalListenGetState>
 801083e:	4603      	mov	r3, r0
 8010840:	71fb      	strb	r3, [r7, #7]
    switch(lmSt)
 8010842:	79fb      	ldrb	r3, [r7, #7]
 8010844:	3b01      	subs	r3, #1
 8010846:	2b0f      	cmp	r3, #15
 8010848:	f200 8136 	bhi.w	8010ab8 <rfalNfcListenActivation+0x28c>
 801084c:	a201      	add	r2, pc, #4	; (adr r2, 8010854 <rfalNfcListenActivation+0x28>)
 801084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010852:	bf00      	nop
 8010854:	08010ab5 	.word	0x08010ab5
 8010858:	08010a19 	.word	0x08010a19
 801085c:	08010ab1 	.word	0x08010ab1
 8010860:	08010ab9 	.word	0x08010ab9
 8010864:	0801094d 	.word	0x0801094d
 8010868:	08010895 	.word	0x08010895
 801086c:	08010ab9 	.word	0x08010ab9
 8010870:	08010ab9 	.word	0x08010ab9
 8010874:	080109d3 	.word	0x080109d3
 8010878:	080109f7 	.word	0x080109f7
 801087c:	080109f7 	.word	0x080109f7
 8010880:	08010ab1 	.word	0x08010ab1
 8010884:	08010ab9 	.word	0x08010ab9
 8010888:	08010ab1 	.word	0x08010ab1
 801088c:	08010895 	.word	0x08010895
 8010890:	08010ab1 	.word	0x08010ab1
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_ACTIVE_A:                                                  /* NFC-A CE activation */
        case RFAL_LM_STATE_ACTIVE_Ax:
            
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 8010894:	78bb      	ldrb	r3, [r7, #2]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d056      	beq.n	8010948 <rfalNfcListenActivation+0x11c>
            {
                /* Set the header length in NFC-A */
                hdrLen = (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN);
 801089a:	2302      	movs	r3, #2
 801089c:	70fb      	strb	r3, [r7, #3]
                
                NO_WARNING(hdrLen);  /* Supress warning if feature switch is disabled */
                
                /* Check if received data is a Sleep request */
                if( rfalNfcaListenerIsSleepReq( gNfcDev.rxBuf.rfBuf, rfalConvBitsToBytes(gNfcDev.rxLen)) )     /* Check if received data is a SLP_REQ */
 801089e:	4b89      	ldr	r3, [pc, #548]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 80108a0:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 80108a4:	3307      	adds	r3, #7
 80108a6:	08db      	lsrs	r3, r3, #3
 80108a8:	b29b      	uxth	r3, r3
 80108aa:	4619      	mov	r1, r3
 80108ac:	4886      	ldr	r0, [pc, #536]	; (8010ac8 <rfalNfcListenActivation+0x29c>)
 80108ae:	f002 ffa8 	bl	8013802 <rfalNfcaListenerIsSleepReq>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d00c      	beq.n	80108d2 <rfalNfcListenActivation+0xa6>
                {
                    /* Set the Listen Mode in Sleep state */
                    EXIT_ON_ERR( ret, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 80108b8:	4b84      	ldr	r3, [pc, #528]	; (8010acc <rfalNfcListenActivation+0x2a0>)
 80108ba:	22ff      	movs	r2, #255	; 0xff
 80108bc:	4982      	ldr	r1, [pc, #520]	; (8010ac8 <rfalNfcListenActivation+0x29c>)
 80108be:	200c      	movs	r0, #12
 80108c0:	f006 ffc6 	bl	8017850 <rfalListenSleepStart>
 80108c4:	4603      	mov	r3, r0
 80108c6:	80bb      	strh	r3, [r7, #4]
 80108c8:	88bb      	ldrh	r3, [r7, #4]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d03c      	beq.n	8010948 <rfalNfcListenActivation+0x11c>
 80108ce:	88bb      	ldrh	r3, [r7, #4]
 80108d0:	e0f4      	b.n	8010abc <rfalNfcListenActivation+0x290>
                }
            #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
            
            #if RFAL_FEATURE_NFC_DEP
                /* Check if received data is a valid ATR_REQ */
                else if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 80108d2:	78fb      	ldrb	r3, [r7, #3]
 80108d4:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 80108d8:	4a7a      	ldr	r2, [pc, #488]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 80108da:	4413      	add	r3, r2
 80108dc:	1cd8      	adds	r0, r3, #3
 80108de:	4b79      	ldr	r3, [pc, #484]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 80108e0:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 80108e4:	3307      	adds	r3, #7
 80108e6:	08db      	lsrs	r3, r3, #3
 80108e8:	b29a      	uxth	r2, r3
 80108ea:	78fb      	ldrb	r3, [r7, #3]
 80108ec:	b29b      	uxth	r3, r3
 80108ee:	1ad3      	subs	r3, r2, r3
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	4a74      	ldr	r2, [pc, #464]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 80108f4:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 80108f8:	4619      	mov	r1, r3
 80108fa:	f001 fd6d 	bl	80123d8 <rfalNfcDepIsAtrReq>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b00      	cmp	r3, #0
 8010902:	d01f      	beq.n	8010944 <rfalNfcListenActivation+0x118>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCA;
 8010904:	4b6f      	ldr	r3, [pc, #444]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 8010906:	220a      	movs	r2, #10
 8010908:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 801090c:	78fb      	ldrb	r3, [r7, #3]
 801090e:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8010912:	4a6c      	ldr	r2, [pc, #432]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 8010914:	4413      	add	r3, r2
 8010916:	1cd9      	adds	r1, r3, #3
 8010918:	4b6a      	ldr	r3, [pc, #424]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 801091a:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 801091e:	3307      	adds	r3, #7
 8010920:	08db      	lsrs	r3, r3, #3
 8010922:	b29a      	uxth	r2, r3
 8010924:	78fb      	ldrb	r3, [r7, #3]
 8010926:	b29b      	uxth	r3, r3
 8010928:	1ad3      	subs	r3, r2, r3
 801092a:	b29b      	uxth	r3, r3
 801092c:	460a      	mov	r2, r1
 801092e:	2100      	movs	r1, #0
 8010930:	4867      	ldr	r0, [pc, #412]	; (8010ad0 <rfalNfcListenActivation+0x2a4>)
 8010932:	f000 f8cf 	bl	8010ad4 <rfalNfcNfcDepActivate>
 8010936:	4603      	mov	r3, r0
 8010938:	80bb      	strh	r3, [r7, #4]
 801093a:	88bb      	ldrh	r3, [r7, #4]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d003      	beq.n	8010948 <rfalNfcListenActivation+0x11c>
 8010940:	88bb      	ldrh	r3, [r7, #4]
 8010942:	e0bb      	b.n	8010abc <rfalNfcListenActivation+0x290>
                }
            #endif /* RFAL_FEATURE_NFC_DEP */
                
                else
                {
                    return ERR_PROTO;
 8010944:	230b      	movs	r3, #11
 8010946:	e0b9      	b.n	8010abc <rfalNfcListenActivation+0x290>
                }
            }
            return ERR_BUSY;
 8010948:	2302      	movs	r3, #2
 801094a:	e0b7      	b.n	8010abc <rfalNfcListenActivation+0x290>
    #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_F:                                                   /* NFC-F CE activation */
            
            if( isDataRcvd )                                                          /* Wait for the first received data */
 801094c:	78bb      	ldrb	r3, [r7, #2]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d03d      	beq.n	80109ce <rfalNfcListenActivation+0x1a2>
            {
            #if RFAL_FEATURE_NFC_DEP
                /* Set the header length in NFC-F */
                hdrLen = RFAL_NFCDEP_LEN_LEN;
 8010952:	2301      	movs	r3, #1
 8010954:	70fb      	strb	r3, [r7, #3]
                
                if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 8010956:	78fb      	ldrb	r3, [r7, #3]
 8010958:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 801095c:	4a59      	ldr	r2, [pc, #356]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 801095e:	4413      	add	r3, r2
 8010960:	1cd8      	adds	r0, r3, #3
 8010962:	4b58      	ldr	r3, [pc, #352]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 8010964:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8010968:	3307      	adds	r3, #7
 801096a:	08db      	lsrs	r3, r3, #3
 801096c:	b29a      	uxth	r2, r3
 801096e:	78fb      	ldrb	r3, [r7, #3]
 8010970:	b29b      	uxth	r3, r3
 8010972:	1ad3      	subs	r3, r2, r3
 8010974:	b29b      	uxth	r3, r3
 8010976:	4a53      	ldr	r2, [pc, #332]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 8010978:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 801097c:	4619      	mov	r1, r3
 801097e:	f001 fd2b 	bl	80123d8 <rfalNfcDepIsAtrReq>
 8010982:	4603      	mov	r3, r0
 8010984:	2b00      	cmp	r3, #0
 8010986:	d01f      	beq.n	80109c8 <rfalNfcListenActivation+0x19c>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCF;
 8010988:	4b4e      	ldr	r3, [pc, #312]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 801098a:	220c      	movs	r2, #12
 801098c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 8010990:	78fb      	ldrb	r3, [r7, #3]
 8010992:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8010996:	4a4b      	ldr	r2, [pc, #300]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 8010998:	4413      	add	r3, r2
 801099a:	1cd9      	adds	r1, r3, #3
 801099c:	4b49      	ldr	r3, [pc, #292]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 801099e:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 80109a2:	3307      	adds	r3, #7
 80109a4:	08db      	lsrs	r3, r3, #3
 80109a6:	b29a      	uxth	r2, r3
 80109a8:	78fb      	ldrb	r3, [r7, #3]
 80109aa:	b29b      	uxth	r3, r3
 80109ac:	1ad3      	subs	r3, r2, r3
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	460a      	mov	r2, r1
 80109b2:	2100      	movs	r1, #0
 80109b4:	4846      	ldr	r0, [pc, #280]	; (8010ad0 <rfalNfcListenActivation+0x2a4>)
 80109b6:	f000 f88d 	bl	8010ad4 <rfalNfcNfcDepActivate>
 80109ba:	4603      	mov	r3, r0
 80109bc:	80bb      	strh	r3, [r7, #4]
 80109be:	88bb      	ldrh	r3, [r7, #4]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d004      	beq.n	80109ce <rfalNfcListenActivation+0x1a2>
 80109c4:	88bb      	ldrh	r3, [r7, #4]
 80109c6:	e079      	b.n	8010abc <rfalNfcListenActivation+0x290>
                }
                else
            #endif /* RFAL_FEATURE_NFC_DEP */
                {
                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_3 );                    /* First data already received - set T3T CE */
 80109c8:	2009      	movs	r0, #9
 80109ca:	f006 ff71 	bl	80178b0 <rfalListenSetState>
                }
            }
            return ERR_BUSY;
 80109ce:	2302      	movs	r3, #2
 80109d0:	e074      	b.n	8010abc <rfalNfcListenActivation+0x290>
            
        /*******************************************************************************/
        case RFAL_LM_STATE_CARDEMU_3:                                                 /* T3T activated */
            
            gNfcDev.devList->type        = RFAL_NFC_POLL_TYPE_NFCF;
 80109d2:	4b3c      	ldr	r3, [pc, #240]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 80109d4:	220c      	movs	r2, #12
 80109d6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_RF;
 80109da:	4b3a      	ldr	r3, [pc, #232]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 80109dc:	2200      	movs	r2, #0
 80109de:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
            gNfcDev.devList->nfcid       = NULL;
 80109e2:	4b38      	ldr	r3, [pc, #224]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 80109e4:	2200      	movs	r2, #0
 80109e6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            gNfcDev.devList->nfcidLen    = 0;
 80109ea:	4b36      	ldr	r3, [pc, #216]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 80109ec:	2200      	movs	r2, #0
 80109ee:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
            
            return ERR_NONE;
 80109f2:	2300      	movs	r3, #0
 80109f4:	e062      	b.n	8010abc <rfalNfcListenActivation+0x290>
    #if RFAL_FEATURE_NFC_DEP
        /*******************************************************************************/
        case RFAL_LM_STATE_TARGET_A:                                                  /* NFC-DEP activation */
        case RFAL_LM_STATE_TARGET_F:
            
            ret = rfalNfcDepListenGetActivationStatus();
 80109f6:	f002 fa57 	bl	8012ea8 <rfalNfcDepListenGetActivationStatus>
 80109fa:	4603      	mov	r3, r0
 80109fc:	80bb      	strh	r3, [r7, #4]
            if( ret == ERR_NONE )
 80109fe:	88bb      	ldrh	r3, [r7, #4]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d107      	bne.n	8010a14 <rfalNfcListenActivation+0x1e8>
            {
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 8010a04:	4b2f      	ldr	r3, [pc, #188]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 8010a06:	2202      	movs	r2, #2
 8010a08:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
                gNfcDev.devList->nfcidLen    = RFAL_NFCDEP_NFCID3_LEN;
 8010a0c:	4b2d      	ldr	r3, [pc, #180]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 8010a0e:	220a      	movs	r2, #10
 8010a10:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
            }
            return ret;
 8010a14:	88bb      	ldrh	r3, [r7, #4]
 8010a16:	e051      	b.n	8010abc <rfalNfcListenActivation+0x290>
    #endif /* RFAL_FEATURE_NFC_DEP */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:                                                      /* AP2P activation */
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 8010a18:	78bb      	ldrb	r3, [r7, #2]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d046      	beq.n	8010aac <rfalNfcListenActivation+0x280>
            {
                
                if( (gNfcDev.lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )                /* Check if AP2P is enabled */
 8010a1e:	4b29      	ldr	r3, [pc, #164]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 8010a20:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d03f      	beq.n	8010aac <rfalNfcListenActivation+0x280>
                {
                    
                #if RFAL_FEATURE_NFC_DEP
                    /* Calculate the header length in NFC-A or NFC-F mode*/
                    hdrLen = ( (bitRate == RFAL_BR_106) ? (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN) : RFAL_NFCDEP_LEN_LEN );
 8010a2c:	787b      	ldrb	r3, [r7, #1]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d101      	bne.n	8010a36 <rfalNfcListenActivation+0x20a>
 8010a32:	2302      	movs	r3, #2
 8010a34:	e000      	b.n	8010a38 <rfalNfcListenActivation+0x20c>
 8010a36:	2301      	movs	r3, #1
 8010a38:	70fb      	strb	r3, [r7, #3]
                    
                    if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), NULL) )
 8010a3a:	78fb      	ldrb	r3, [r7, #3]
 8010a3c:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8010a40:	4a20      	ldr	r2, [pc, #128]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 8010a42:	4413      	add	r3, r2
 8010a44:	1cd8      	adds	r0, r3, #3
 8010a46:	4b1f      	ldr	r3, [pc, #124]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 8010a48:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8010a4c:	3307      	adds	r3, #7
 8010a4e:	08db      	lsrs	r3, r3, #3
 8010a50:	b29a      	uxth	r2, r3
 8010a52:	78fb      	ldrb	r3, [r7, #3]
 8010a54:	b29b      	uxth	r3, r3
 8010a56:	1ad3      	subs	r3, r2, r3
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	4619      	mov	r1, r3
 8010a5e:	f001 fcbb 	bl	80123d8 <rfalNfcDepIsAtrReq>
 8010a62:	4603      	mov	r3, r0
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d01f      	beq.n	8010aa8 <rfalNfcListenActivation+0x27c>
                    {
                        gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_AP2P;
 8010a68:	4b16      	ldr	r3, [pc, #88]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 8010a6a:	220f      	movs	r2, #15
 8010a6c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                        EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 8010a70:	78fb      	ldrb	r3, [r7, #3]
 8010a72:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8010a76:	4a13      	ldr	r2, [pc, #76]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 8010a78:	4413      	add	r3, r2
 8010a7a:	1cd9      	adds	r1, r3, #3
 8010a7c:	4b11      	ldr	r3, [pc, #68]	; (8010ac4 <rfalNfcListenActivation+0x298>)
 8010a7e:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8010a82:	3307      	adds	r3, #7
 8010a84:	08db      	lsrs	r3, r3, #3
 8010a86:	b29a      	uxth	r2, r3
 8010a88:	78fb      	ldrb	r3, [r7, #3]
 8010a8a:	b29b      	uxth	r3, r3
 8010a8c:	1ad3      	subs	r3, r2, r3
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	460a      	mov	r2, r1
 8010a92:	2101      	movs	r1, #1
 8010a94:	480e      	ldr	r0, [pc, #56]	; (8010ad0 <rfalNfcListenActivation+0x2a4>)
 8010a96:	f000 f81d 	bl	8010ad4 <rfalNfcNfcDepActivate>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	80bb      	strh	r3, [r7, #4]
 8010a9e:	88bb      	ldrh	r3, [r7, #4]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d003      	beq.n	8010aac <rfalNfcListenActivation+0x280>
 8010aa4:	88bb      	ldrh	r3, [r7, #4]
 8010aa6:	e009      	b.n	8010abc <rfalNfcListenActivation+0x290>
                    }
                    else
                #endif /* RFAL_FEATURE_NFC_DEP */
                    {
                        return ERR_PROTO;
 8010aa8:	230b      	movs	r3, #11
 8010aaa:	e007      	b.n	8010abc <rfalNfcListenActivation+0x290>
                    }
                }
            }
            return ERR_BUSY;
 8010aac:	2302      	movs	r3, #2
 8010aae:	e005      	b.n	8010abc <rfalNfcListenActivation+0x290>
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_A:
        case RFAL_LM_STATE_READY_Ax:
        case RFAL_LM_STATE_SLEEP_A:
        case RFAL_LM_STATE_SLEEP_AF:
            return ERR_BUSY;
 8010ab0:	2302      	movs	r3, #2
 8010ab2:	e003      	b.n	8010abc <rfalNfcListenActivation+0x290>
        
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            return ERR_LINK_LOSS;
 8010ab4:	2325      	movs	r3, #37	; 0x25
 8010ab6:	e001      	b.n	8010abc <rfalNfcListenActivation+0x290>
        
        default:                                                                      /* Wait for activation */
            break;
 8010ab8:	bf00      	nop
    }

    return ERR_INTERNAL;
 8010aba:	230c      	movs	r3, #12
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3708      	adds	r7, #8
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	2000326c 	.word	0x2000326c
 8010ac8:	20003667 	.word	0x20003667
 8010acc:	2000376a 	.word	0x2000376a
 8010ad0:	200032fc 	.word	0x200032fc

08010ad4 <rfalNfcNfcDepActivate>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_NFC_DEP
static ReturnCode rfalNfcNfcDepActivate( rfalNfcDevice *device, rfalNfcDepCommMode commMode, const uint8_t *atrReq, uint16_t atrReqLen )
{
 8010ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ad6:	b0a5      	sub	sp, #148	; 0x94
 8010ad8:	af04      	add	r7, sp, #16
 8010ada:	60f8      	str	r0, [r7, #12]
 8010adc:	607a      	str	r2, [r7, #4]
 8010ade:	461a      	mov	r2, r3
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	72fb      	strb	r3, [r7, #11]
 8010ae4:	4613      	mov	r3, r2
 8010ae6:	813b      	strh	r3, [r7, #8]
    rfalNfcDepAtrParam          initParam;
    
    /* If we are in Poll mode */
    if( rfalNfcIsRemDevListener( device->type ) )
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	2b05      	cmp	r3, #5
 8010aee:	d838      	bhi.n	8010b62 <rfalNfcNfcDepActivate+0x8e>
    {
        /*******************************************************************************/
        /* If Passive F use the NFCID2 retrieved from SENSF                            */
        if( device->type == RFAL_NFC_LISTEN_TYPE_NFCF )
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	2b02      	cmp	r3, #2
 8010af6:	d106      	bne.n	8010b06 <rfalNfcNfcDepActivate+0x32>
        {
            initParam.nfcid    = device->dev.nfcf.sensfRes.NFCID2;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	3303      	adds	r3, #3
 8010afc:	66fb      	str	r3, [r7, #108]	; 0x6c
            initParam.nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8010afe:	2308      	movs	r3, #8
 8010b00:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8010b04:	e004      	b.n	8010b10 <rfalNfcNfcDepActivate+0x3c>
        }
        else
        {
            initParam.nfcid    = gNfcDev.disc.nfcid3; 
 8010b06:	4b3e      	ldr	r3, [pc, #248]	; (8010c00 <rfalNfcNfcDepActivate+0x12c>)
 8010b08:	66fb      	str	r3, [r7, #108]	; 0x6c
            initParam.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8010b0a:	230a      	movs	r3, #10
 8010b0c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        }    
        
        initParam.BS        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8010b10:	2300      	movs	r3, #0
 8010b12:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8010b16:	2300      	movs	r3, #0
 8010b18:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        initParam.NAD       = RFAL_NFCDEP_NAD_NO;
 8010b22:	2300      	movs	r3, #0
 8010b24:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        initParam.LR        = RFAL_NFCDEP_LR_254;
 8010b28:	2303      	movs	r3, #3
 8010b2a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        initParam.GB        = gNfcDev.disc.GB;
 8010b2e:	4b35      	ldr	r3, [pc, #212]	; (8010c04 <rfalNfcNfcDepActivate+0x130>)
 8010b30:	67bb      	str	r3, [r7, #120]	; 0x78
        initParam.GBLen     = gNfcDev.disc.GBLen;
 8010b32:	4b35      	ldr	r3, [pc, #212]	; (8010c08 <rfalNfcNfcDepActivate+0x134>)
 8010b34:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010b38:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
        initParam.commMode  = commMode;
 8010b3c:	7afb      	ldrb	r3, [r7, #11]
 8010b3e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        initParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8010b42:	230e      	movs	r3, #14
 8010b44:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
        
        rfalNfcDepInitialize();
 8010b48:	f001 fb88 	bl	801225c <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
        return rfalNfcDepInitiatorHandleActivation( &initParam, RFAL_BR_424, &device->proto.nfcDep );
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	f103 0220 	add.w	r2, r3, #32
 8010b52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010b56:	2102      	movs	r1, #2
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f001 ff29 	bl	80129b0 <rfalNfcDepInitiatorHandleActivation>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	e04a      	b.n	8010bf8 <rfalNfcNfcDepActivate+0x124>
    }
    
    /* If we are in Listen mode */
#if RFAL_FEATURE_LISTEN_MODE
    else if( rfalNfcIsRemDevPoller( device->type ) )
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	2b09      	cmp	r3, #9
 8010b68:	d945      	bls.n	8010bf6 <rfalNfcNfcDepActivate+0x122>
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	781b      	ldrb	r3, [r3, #0]
 8010b6e:	2b0f      	cmp	r3, #15
 8010b70:	d841      	bhi.n	8010bf6 <rfalNfcNfcDepActivate+0x122>
    {
        rfalNfcDepListenActvParam   actvParams;
        rfalNfcDepTargetParam       targetParam;
        
        ST_MEMCPY(targetParam.nfcid3, (uint8_t*)gNfcDev.disc.nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 8010b72:	4b25      	ldr	r3, [pc, #148]	; (8010c08 <rfalNfcNfcDepActivate+0x134>)
 8010b74:	f107 0215 	add.w	r2, r7, #21
 8010b78:	3314      	adds	r3, #20
 8010b7a:	cb03      	ldmia	r3!, {r0, r1}
 8010b7c:	6010      	str	r0, [r2, #0]
 8010b7e:	6051      	str	r1, [r2, #4]
 8010b80:	881b      	ldrh	r3, [r3, #0]
 8010b82:	8113      	strh	r3, [r2, #8]
        targetParam.bst       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8010b84:	2300      	movs	r3, #0
 8010b86:	77fb      	strb	r3, [r7, #31]
        targetParam.brt       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	f887 3020 	strb.w	r3, [r7, #32]
        targetParam.to        = RFAL_NFCDEP_WT_TRG_MAX;
 8010b8e:	230e      	movs	r3, #14
 8010b90:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        targetParam.ppt       = rfalNfcDepLR2PP(RFAL_NFCDEP_LR_254);
 8010b94:	2330      	movs	r3, #48	; 0x30
 8010b96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        targetParam.GBtLen    = 0;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        targetParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8010ba0:	230e      	movs	r3, #14
 8010ba2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
        targetParam.commMode  = commMode;
 8010ba6:	7afb      	ldrb	r3, [r7, #11]
 8010ba8:	753b      	strb	r3, [r7, #20]
            
        
        /* Set activation buffer (including header) for NFC-DEP */
        actvParams.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 8010baa:	4b18      	ldr	r3, [pc, #96]	; (8010c0c <rfalNfcNfcDepActivate+0x138>)
 8010bac:	65bb      	str	r3, [r7, #88]	; 0x58
        actvParams.rxLen        = &gNfcDev.rxLen;
 8010bae:	4b18      	ldr	r3, [pc, #96]	; (8010c10 <rfalNfcNfcDepActivate+0x13c>)
 8010bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
        actvParams.isRxChaining = &gNfcDev.isRxChaining;
 8010bb2:	4b18      	ldr	r3, [pc, #96]	; (8010c14 <rfalNfcNfcDepActivate+0x140>)
 8010bb4:	663b      	str	r3, [r7, #96]	; 0x60
        actvParams.nfcDepDev    = &gNfcDev.devList->proto.nfcDep;
 8010bb6:	4b18      	ldr	r3, [pc, #96]	; (8010c18 <rfalNfcNfcDepActivate+0x144>)
 8010bb8:	667b      	str	r3, [r7, #100]	; 0x64

        rfalListenSetState( ((device->type == RFAL_NFC_POLL_TYPE_NFCA) ? RFAL_LM_STATE_TARGET_A : RFAL_LM_STATE_TARGET_F) );
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	2b0a      	cmp	r3, #10
 8010bc0:	d101      	bne.n	8010bc6 <rfalNfcNfcDepActivate+0xf2>
 8010bc2:	230a      	movs	r3, #10
 8010bc4:	e000      	b.n	8010bc8 <rfalNfcNfcDepActivate+0xf4>
 8010bc6:	230b      	movs	r3, #11
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f006 fe71 	bl	80178b0 <rfalListenSetState>
        
        rfalNfcDepInitialize();
 8010bce:	f001 fb45 	bl	801225c <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: send ATR_RES and handle activation */
        return rfalNfcDepListenStartActivation( &targetParam, atrReq, atrReqLen, actvParams );
 8010bd2:	893e      	ldrh	r6, [r7, #8]
 8010bd4:	f107 0514 	add.w	r5, r7, #20
 8010bd8:	466c      	mov	r4, sp
 8010bda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010bde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010be8:	4632      	mov	r2, r6
 8010bea:	6879      	ldr	r1, [r7, #4]
 8010bec:	4628      	mov	r0, r5
 8010bee:	f002 f849 	bl	8012c84 <rfalNfcDepListenStartActivation>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	e000      	b.n	8010bf8 <rfalNfcNfcDepActivate+0x124>
    }
#endif  /* RFAL_FEATURE_LISTEN_MODE */
    
    else
    {
        return ERR_INTERNAL;
 8010bf6:	230c      	movs	r3, #12
    }
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3784      	adds	r7, #132	; 0x84
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c00:	20003280 	.word	0x20003280
 8010c04:	2000328a 	.word	0x2000328a
 8010c08:	2000326c 	.word	0x2000326c
 8010c0c:	20003667 	.word	0x20003667
 8010c10:	2000376a 	.word	0x2000376a
 8010c14:	2000355f 	.word	0x2000355f
 8010c18:	2000331c 	.word	0x2000331c

08010c1c <rfalNfcDeactivation>:
 * \return  ERR_XXXX  : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcDeactivation( void )
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	af00      	add	r7, sp, #0
    /* Check if a device has been activated */
    if( gNfcDev.activeDev != NULL )
 8010c20:	4b11      	ldr	r3, [pc, #68]	; (8010c68 <rfalNfcDeactivation+0x4c>)
 8010c22:	689b      	ldr	r3, [r3, #8]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d012      	beq.n	8010c4e <rfalNfcDeactivation+0x32>
    {
        switch( gNfcDev.activeDev->rfInterface )
 8010c28:	4b0f      	ldr	r3, [pc, #60]	; (8010c68 <rfalNfcDeactivation+0x4c>)
 8010c2a:	689b      	ldr	r3, [r3, #8]
 8010c2c:	7f5b      	ldrb	r3, [r3, #29]
 8010c2e:	2b02      	cmp	r3, #2
 8010c30:	d008      	beq.n	8010c44 <rfalNfcDeactivation+0x28>
 8010c32:	2b02      	cmp	r3, #2
 8010c34:	dc09      	bgt.n	8010c4a <rfalNfcDeactivation+0x2e>
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d00b      	beq.n	8010c52 <rfalNfcDeactivation+0x36>
 8010c3a:	2b01      	cmp	r3, #1
 8010c3c:	d105      	bne.n	8010c4a <rfalNfcDeactivation+0x2e>
                break;                                                                /* No specific deactivation to be performed */
            
            /*******************************************************************************/
        #if RFAL_FEATURE_ISO_DEP_POLL
            case RFAL_NFC_INTERFACE_ISODEP:
                rfalIsoDepDeselect();                                                 /* Send a Deselect to device */
 8010c3e:	f7fd fb35 	bl	800e2ac <rfalIsoDepDeselect>
                break;
 8010c42:	e007      	b.n	8010c54 <rfalNfcDeactivation+0x38>
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                rfalNfcDepRLS();                                                      /* Send a Release to device */
 8010c44:	f001 fe4c 	bl	80128e0 <rfalNfcDepRLS>
                break;
 8010c48:	e004      	b.n	8010c54 <rfalNfcDeactivation+0x38>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            default:
                return ERR_REQUEST;
 8010c4a:	2305      	movs	r3, #5
 8010c4c:	e00a      	b.n	8010c64 <rfalNfcDeactivation+0x48>
        }
    }
 8010c4e:	bf00      	nop
 8010c50:	e000      	b.n	8010c54 <rfalNfcDeactivation+0x38>
                break;                                                                /* No specific deactivation to be performed */
 8010c52:	bf00      	nop
    
    #if RFAL_FEATURE_WAKEUP_MODE
        rfalWakeUpModeStop();
 8010c54:	f007 f918 	bl	8017e88 <rfalWakeUpModeStop>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
    
    #if RFAL_FEATURE_LISTEN_MODE
        rfalListenStop();
 8010c58:	f006 fdde 	bl	8017818 <rfalListenStop>
    #else
        rfalFieldOff();
    #endif
    
    gNfcDev.activeDev = NULL;
 8010c5c:	4b02      	ldr	r3, [pc, #8]	; (8010c68 <rfalNfcDeactivation+0x4c>)
 8010c5e:	2200      	movs	r2, #0
 8010c60:	609a      	str	r2, [r3, #8]
    return ERR_NONE;
 8010c62:	2300      	movs	r3, #0
}
 8010c64:	4618      	mov	r0, r3
 8010c66:	bd80      	pop	{r7, pc}
 8010c68:	2000326c 	.word	0x2000326c

08010c6c <nfcipDxIsSupported>:
/*******************************************************************************/


/*******************************************************************************/
static bool nfcipDxIsSupported( uint8_t Dx, uint8_t BRx, uint8_t BSx )
{
 8010c6c:	b480      	push	{r7}
 8010c6e:	b085      	sub	sp, #20
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	4603      	mov	r3, r0
 8010c74:	71fb      	strb	r3, [r7, #7]
 8010c76:	460b      	mov	r3, r1
 8010c78:	71bb      	strb	r3, [r7, #6]
 8010c7a:	4613      	mov	r3, r2
 8010c7c:	717b      	strb	r3, [r7, #5]
	uint8_t Bx;
	
	/* Take the min of the possible bit rates, we'll use one for both directions */
	Bx = MIN(BRx, BSx);
 8010c7e:	797a      	ldrb	r2, [r7, #5]
 8010c80:	79bb      	ldrb	r3, [r7, #6]
 8010c82:	4293      	cmp	r3, r2
 8010c84:	bf28      	it	cs
 8010c86:	4613      	movcs	r3, r2
 8010c88:	73fb      	strb	r3, [r7, #15]
	
	/* Lower bit rates must be supported for P2P */
	if( (Dx <= (uint8_t)RFAL_NFCDEP_Dx_04_424) )
 8010c8a:	79fb      	ldrb	r3, [r7, #7]
 8010c8c:	2b02      	cmp	r3, #2
 8010c8e:	d801      	bhi.n	8010c94 <nfcipDxIsSupported+0x28>
	{
		return true;
 8010c90:	2301      	movs	r3, #1
 8010c92:	e008      	b.n	8010ca6 <nfcipDxIsSupported+0x3a>
	}
	
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 8010c94:	79fb      	ldrb	r3, [r7, #7]
 8010c96:	2b03      	cmp	r3, #3
 8010c98:	d104      	bne.n	8010ca4 <nfcipDxIsSupported+0x38>
 8010c9a:	7bfb      	ldrb	r3, [r7, #15]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d001      	beq.n	8010ca4 <nfcipDxIsSupported+0x38>
	{
		return true;
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	e000      	b.n	8010ca6 <nfcipDxIsSupported+0x3a>
	}

	return false;
 8010ca4:	2300      	movs	r3, #0
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3714      	adds	r7, #20
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bc80      	pop	{r7}
 8010cae:	4770      	bx	lr

08010cb0 <nfcipTxRx>:


/*******************************************************************************/
static ReturnCode nfcipTxRx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint32_t fwt, uint8_t* paylBuf, uint8_t paylBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rxActLen )
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b088      	sub	sp, #32
 8010cb4:	af02      	add	r7, sp, #8
 8010cb6:	60b9      	str	r1, [r7, #8]
 8010cb8:	607a      	str	r2, [r7, #4]
 8010cba:	603b      	str	r3, [r7, #0]
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	73fb      	strb	r3, [r7, #15]
    ReturnCode ret;
    
    if( (cmd == NFCIP_CMD_DEP_REQ) || (cmd == NFCIP_CMD_DEP_RES) ) /* this method cannot be used for DEPs */
 8010cc0:	7bfb      	ldrb	r3, [r7, #15]
 8010cc2:	2b06      	cmp	r3, #6
 8010cc4:	d002      	beq.n	8010ccc <nfcipTxRx+0x1c>
 8010cc6:	7bfb      	ldrb	r3, [r7, #15]
 8010cc8:	2b07      	cmp	r3, #7
 8010cca:	d101      	bne.n	8010cd0 <nfcipTxRx+0x20>
    {
        return ERR_PARAM;
 8010ccc:	2307      	movs	r3, #7
 8010cce:	e030      	b.n	8010d32 <nfcipTxRx+0x82>
    }
    
    /* Assign the global params for this TxRx */
    gNfcip.rxBuf       = rxBuf;
 8010cd0:	4a1a      	ldr	r2, [pc, #104]	; (8010d3c <nfcipTxRx+0x8c>)
 8010cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd4:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen    = rxBufLen;
 8010cd6:	4a19      	ldr	r2, [pc, #100]	; (8010d3c <nfcipTxRx+0x8c>)
 8010cd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010cda:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    gNfcip.rxRcvdLen   = rxActLen;
 8010cde:	4a17      	ldr	r2, [pc, #92]	; (8010d3c <nfcipTxRx+0x8c>)
 8010ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce2:	66d3      	str	r3, [r2, #108]	; 0x6c
    
    
    /*******************************************************************************/
	/* Transmission                                                                */
	/*******************************************************************************/
    if(txBuf != NULL)                                              /* if nothing to Tx, just do Rx */               
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d013      	beq.n	8010d12 <nfcipTxRx+0x62>
    {
        EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 8010cea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	7bf8      	ldrb	r0, [r7, #15]
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	9301      	str	r3, [sp, #4]
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	9300      	str	r3, [sp, #0]
 8010cfa:	4613      	mov	r3, r2
 8010cfc:	683a      	ldr	r2, [r7, #0]
 8010cfe:	68b9      	ldr	r1, [r7, #8]
 8010d00:	f000 ffac 	bl	8011c5c <nfcipTx>
 8010d04:	4603      	mov	r3, r0
 8010d06:	82fb      	strh	r3, [r7, #22]
 8010d08:	8afb      	ldrh	r3, [r7, #22]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d001      	beq.n	8010d12 <nfcipTxRx+0x62>
 8010d0e:	8afb      	ldrh	r3, [r7, #22]
 8010d10:	e00f      	b.n	8010d32 <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/
	/* Reception                                                                   */
	/*******************************************************************************/
    ret = nfcipDataRx( true );
 8010d12:	2001      	movs	r0, #1
 8010d14:	f001 ff72 	bl	8012bfc <nfcipDataRx>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8010d1c:	8afb      	ldrh	r3, [r7, #22]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d001      	beq.n	8010d26 <nfcipTxRx+0x76>
    {
        return ret;
 8010d22:	8afb      	ldrh	r3, [r7, #22]
 8010d24:	e005      	b.n	8010d32 <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/    
    *rxActLen = *rxBuf;                                      		/* Use LEN byte instead due to with/without CRC modes */
 8010d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	b29a      	uxth	r2, r3
 8010d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d2e:	801a      	strh	r2, [r3, #0]
    return ERR_NONE;                                         		/* Tx and Rx completed successfully                   */
 8010d30:	2300      	movs	r3, #0
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	3718      	adds	r7, #24
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}
 8010d3a:	bf00      	nop
 8010d3c:	2000376c 	.word	0x2000376c

08010d40 <nfcipDEPControlMsg>:


/*******************************************************************************/
static ReturnCode nfcipDEPControlMsg( uint8_t pfb, uint8_t RTOX  )
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b08c      	sub	sp, #48	; 0x30
 8010d44:	af02      	add	r7, sp, #8
 8010d46:	4603      	mov	r3, r0
 8010d48:	460a      	mov	r2, r1
 8010d4a:	71fb      	strb	r3, [r7, #7]
 8010d4c:	4613      	mov	r3, r2
 8010d4e:	71bb      	strb	r3, [r7, #6]


    /*******************************************************************************/
    /* Calculate Cmd and fwt to be used                                            */
    /*******************************************************************************/
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8010d50:	4b2a      	ldr	r3, [pc, #168]	; (8010dfc <nfcipDEPControlMsg+0xbc>)
 8010d52:	781b      	ldrb	r3, [r3, #0]
 8010d54:	2b01      	cmp	r3, #1
 8010d56:	d101      	bne.n	8010d5c <nfcipDEPControlMsg+0x1c>
 8010d58:	2307      	movs	r3, #7
 8010d5a:	e000      	b.n	8010d5e <nfcipDEPControlMsg+0x1e>
 8010d5c:	2306      	movs	r3, #6
 8010d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 8010d62:	4b26      	ldr	r3, [pc, #152]	; (8010dfc <nfcipDEPControlMsg+0xbc>)
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	2b01      	cmp	r3, #1
 8010d68:	d018      	beq.n	8010d9c <nfcipDEPControlMsg+0x5c>
 8010d6a:	79fb      	ldrb	r3, [r7, #7]
 8010d6c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8010d70:	2b80      	cmp	r3, #128	; 0x80
 8010d72:	d10d      	bne.n	8010d90 <nfcipDEPControlMsg+0x50>
 8010d74:	79fb      	ldrb	r3, [r7, #7]
 8010d76:	f003 0310 	and.w	r3, r3, #16
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d008      	beq.n	8010d90 <nfcipDEPControlMsg+0x50>
 8010d7e:	79bb      	ldrb	r3, [r7, #6]
 8010d80:	4a1e      	ldr	r2, [pc, #120]	; (8010dfc <nfcipDEPControlMsg+0xbc>)
 8010d82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010d84:	fb03 f202 	mul.w	r2, r3, r2
 8010d88:	4b1c      	ldr	r3, [pc, #112]	; (8010dfc <nfcipDEPControlMsg+0xbc>)
 8010d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d8c:	4413      	add	r3, r2
 8010d8e:	e007      	b.n	8010da0 <nfcipDEPControlMsg+0x60>
 8010d90:	4b1a      	ldr	r3, [pc, #104]	; (8010dfc <nfcipDEPControlMsg+0xbc>)
 8010d92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010d94:	4b19      	ldr	r3, [pc, #100]	; (8010dfc <nfcipDEPControlMsg+0xbc>)
 8010d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d98:	4413      	add	r3, r2
 8010d9a:	e001      	b.n	8010da0 <nfcipDEPControlMsg+0x60>
 8010d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8010da0:	623b      	str	r3, [r7, #32]
    
    if( nfcip_PFBisSTO( pfb ) )
 8010da2:	79fb      	ldrb	r3, [r7, #7]
 8010da4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8010da8:	2b80      	cmp	r3, #128	; 0x80
 8010daa:	d116      	bne.n	8010dda <nfcipDEPControlMsg+0x9a>
 8010dac:	79fb      	ldrb	r3, [r7, #7]
 8010dae:	f003 0310 	and.w	r3, r3, #16
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d011      	beq.n	8010dda <nfcipDEPControlMsg+0x9a>
    {
        ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN] = RTOX;
 8010db6:	79bb      	ldrb	r3, [r7, #6]
 8010db8:	747b      	strb	r3, [r7, #17]
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 8010dba:	f107 030c 	add.w	r3, r7, #12
 8010dbe:	1d5a      	adds	r2, r3, #5
 8010dc0:	f107 010c 	add.w	r1, r7, #12
 8010dc4:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8010dc8:	6a3b      	ldr	r3, [r7, #32]
 8010dca:	9301      	str	r3, [sp, #4]
 8010dcc:	79fb      	ldrb	r3, [r7, #7]
 8010dce:	9300      	str	r3, [sp, #0]
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	f000 ff43 	bl	8011c5c <nfcipTx>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	e00c      	b.n	8010df4 <nfcipDEPControlMsg+0xb4>
    }
    else
    {
        return nfcipTx( depCmd, ctrlMsg, NULL, 0, pfb, fwt );
 8010dda:	f107 010c 	add.w	r1, r7, #12
 8010dde:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8010de2:	6a3b      	ldr	r3, [r7, #32]
 8010de4:	9301      	str	r3, [sp, #4]
 8010de6:	79fb      	ldrb	r3, [r7, #7]
 8010de8:	9300      	str	r3, [sp, #0]
 8010dea:	2300      	movs	r3, #0
 8010dec:	2200      	movs	r2, #0
 8010dee:	f000 ff35 	bl	8011c5c <nfcipTx>
 8010df2:	4603      	mov	r3, r0
    }
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3728      	adds	r7, #40	; 0x28
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	2000376c 	.word	0x2000376c

08010e00 <nfcipClearCounters>:

/*******************************************************************************/
static void nfcipClearCounters( void )
{
 8010e00:	b480      	push	{r7}
 8010e02:	af00      	add	r7, sp, #0
    gNfcip.cntATNRetrys  = 0;
 8010e04:	4b0b      	ldr	r3, [pc, #44]	; (8010e34 <nfcipClearCounters+0x34>)
 8010e06:	2200      	movs	r2, #0
 8010e08:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    gNfcip.cntNACKRetrys = 0;
 8010e0c:	4b09      	ldr	r3, [pc, #36]	; (8010e34 <nfcipClearCounters+0x34>)
 8010e0e:	2200      	movs	r2, #0
 8010e10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    gNfcip.cntTORetrys   = 0;
 8010e14:	4b07      	ldr	r3, [pc, #28]	; (8010e34 <nfcipClearCounters+0x34>)
 8010e16:	2200      	movs	r2, #0
 8010e18:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    gNfcip.cntTxRetrys   = 0;
 8010e1c:	4b05      	ldr	r3, [pc, #20]	; (8010e34 <nfcipClearCounters+0x34>)
 8010e1e:	2200      	movs	r2, #0
 8010e20:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    gNfcip.cntRTOXRetrys = 0;
 8010e24:	4b03      	ldr	r3, [pc, #12]	; (8010e34 <nfcipClearCounters+0x34>)
 8010e26:	2200      	movs	r2, #0
 8010e28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8010e2c:	bf00      	nop
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bc80      	pop	{r7}
 8010e32:	4770      	bx	lr
 8010e34:	2000376c 	.word	0x2000376c

08010e38 <nfcipInitiatorHandleDEP>:

/*******************************************************************************/
static ReturnCode nfcipInitiatorHandleDEP( ReturnCode rxRes, uint16_t rxLen, uint16_t *outActRxLen, bool *outIsChaining )
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b086      	sub	sp, #24
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	60ba      	str	r2, [r7, #8]
 8010e40:	607b      	str	r3, [r7, #4]
 8010e42:	4603      	mov	r3, r0
 8010e44:	81fb      	strh	r3, [r7, #14]
 8010e46:	460b      	mov	r3, r1
 8010e48:	81bb      	strh	r3, [r7, #12]
    uint8_t    rxMsgIt;
    uint8_t    rxPFB;
    uint8_t    rxRTOX;
    uint8_t    optHdrLen;
    
    ret        = ERR_INTERNAL;
 8010e4a:	230c      	movs	r3, #12
 8010e4c:	82fb      	strh	r3, [r7, #22]
    rxMsgIt    = 0;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	757b      	strb	r3, [r7, #21]
    optHdrLen  = 0;
 8010e52:	2300      	movs	r3, #0
 8010e54:	753b      	strb	r3, [r7, #20]
    
    *outActRxLen    = 0;
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 8010e62:	89fb      	ldrh	r3, [r7, #14]
 8010e64:	2b1d      	cmp	r3, #29
 8010e66:	f200 80c6 	bhi.w	8010ff6 <nfcipInitiatorHandleDEP+0x1be>
 8010e6a:	a201      	add	r2, pc, #4	; (adr r2, 8010e70 <nfcipInitiatorHandleDEP+0x38>)
 8010e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e70:	08010ffb 	.word	0x08010ffb
 8010e74:	08010ff7 	.word	0x08010ff7
 8010e78:	08010ff3 	.word	0x08010ff3
 8010e7c:	08010ff7 	.word	0x08010ff7
 8010e80:	08010ee9 	.word	0x08010ee9
 8010e84:	08010ff7 	.word	0x08010ff7
 8010e88:	08010ff7 	.word	0x08010ff7
 8010e8c:	08010ff7 	.word	0x08010ff7
 8010e90:	08010ff7 	.word	0x08010ff7
 8010e94:	08010faf 	.word	0x08010faf
 8010e98:	08010ff7 	.word	0x08010ff7
 8010e9c:	08010ff7 	.word	0x08010ff7
 8010ea0:	08010ff7 	.word	0x08010ff7
 8010ea4:	08010ff7 	.word	0x08010ff7
 8010ea8:	08010ff7 	.word	0x08010ff7
 8010eac:	08010ff7 	.word	0x08010ff7
 8010eb0:	08010ff7 	.word	0x08010ff7
 8010eb4:	08010ff7 	.word	0x08010ff7
 8010eb8:	08010ff7 	.word	0x08010ff7
 8010ebc:	08010ff7 	.word	0x08010ff7
 8010ec0:	08010ff7 	.word	0x08010ff7
 8010ec4:	08010faf 	.word	0x08010faf
 8010ec8:	08010ff7 	.word	0x08010ff7
 8010ecc:	08010ff7 	.word	0x08010ff7
 8010ed0:	08010ff7 	.word	0x08010ff7
 8010ed4:	08010ff7 	.word	0x08010ff7
 8010ed8:	08010ff7 	.word	0x08010ff7
 8010edc:	08010faf 	.word	0x08010faf
 8010ee0:	08010ff7 	.word	0x08010ff7
 8010ee4:	08010faf 	.word	0x08010faf
        case ERR_TIMEOUT:
            
            nfcipLogI( " NFCIP(I) TIMEOUT  TORetrys:%d \r\n", gNfcip.cntTORetrys );
            
            /* Digital 1.0 14.15.5.6 - If nTO >= Max raise protocol error */
            if( gNfcip.cntTORetrys++ >= NFCIP_MAX_TO_RETRYS )
 8010ee8:	4ba1      	ldr	r3, [pc, #644]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8010eea:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8010eee:	1c5a      	adds	r2, r3, #1
 8010ef0:	b2d1      	uxtb	r1, r2
 8010ef2:	4a9f      	ldr	r2, [pc, #636]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8010ef4:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
 8010ef8:	2b02      	cmp	r3, #2
 8010efa:	d901      	bls.n	8010f00 <nfcipInitiatorHandleDEP+0xc8>
            {
                return ERR_PROTO;
 8010efc:	230b      	movs	r3, #11
 8010efe:	e264      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
             * will be done #54. 
             * This is used to address the issue some devices that havea big TO. 
             * Normally LLCP layer has timeout already, and NFCIP layer is still
             * running error handling, retrying ATN/NACKs                                  */
            /*******************************************************************************/
            if( nfcipIsDeactivationPending() )
 8010f00:	4b9b      	ldr	r3, [pc, #620]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8010f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d008      	beq.n	8010f1c <nfcipInitiatorHandleDEP+0xe4>
 8010f0a:	4b99      	ldr	r3, [pc, #612]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8010f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f10:	4798      	blx	r3
 8010f12:	4603      	mov	r3, r0
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d001      	beq.n	8010f1c <nfcipInitiatorHandleDEP+0xe4>
            {
                nfcipLogI( " skipping error recovery due deactivation pending \r\n");
                return ERR_TIMEOUT;
 8010f18:	2304      	movs	r3, #4
 8010f1a:	e256      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.0 14.15.5.6 1)  If last PDU was NACK */
            if( nfcip_PFBisRNACK(gNfcip.lastPFB) )
 8010f1c:	4b94      	ldr	r3, [pc, #592]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8010f1e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010f22:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8010f26:	2b40      	cmp	r3, #64	; 0x40
 8010f28:	d128      	bne.n	8010f7c <nfcipInitiatorHandleDEP+0x144>
 8010f2a:	4b91      	ldr	r3, [pc, #580]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8010f2c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010f30:	f003 0310 	and.w	r3, r3, #16
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d021      	beq.n	8010f7c <nfcipInitiatorHandleDEP+0x144>
            {
                /* Digital 1.0 14.15.5.6 2)  if NACKs failed raise protocol error  */
                if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 8010f38:	4b8d      	ldr	r3, [pc, #564]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8010f3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010f3e:	1c5a      	adds	r2, r3, #1
 8010f40:	b2d1      	uxtb	r1, r2
 8010f42:	4a8b      	ldr	r2, [pc, #556]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8010f44:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 8010f48:	2b02      	cmp	r3, #2
 8010f4a:	d901      	bls.n	8010f50 <nfcipInitiatorHandleDEP+0x118>
                {
                    return ERR_PROTO;
 8010f4c:	230b      	movs	r3, #11
 8010f4e:	e23c      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
                }
                
                /* Send NACK */
                nfcipLogI( " NFCIP(I) Sending NACK retry: %d \r\n", gNfcip.cntNACKRetrys );
                EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 8010f50:	4b87      	ldr	r3, [pc, #540]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8010f52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010f56:	f003 0303 	and.w	r3, r3, #3
 8010f5a:	b2db      	uxtb	r3, r3
 8010f5c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8010f60:	b2db      	uxtb	r3, r3
 8010f62:	2100      	movs	r1, #0
 8010f64:	4618      	mov	r0, r3
 8010f66:	f7ff feeb 	bl	8010d40 <nfcipDEPControlMsg>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	82fb      	strh	r3, [r7, #22]
 8010f6e:	8afb      	ldrh	r3, [r7, #22]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d001      	beq.n	8010f78 <nfcipInitiatorHandleDEP+0x140>
 8010f74:	8afb      	ldrh	r3, [r7, #22]
 8010f76:	e228      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
                return ERR_BUSY;
 8010f78:	2302      	movs	r3, #2
 8010f7a:	e226      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            }
            
            nfcipLogI( " NFCIP(I) Checking if to send ATN  ATNRetrys: %d \r\n", gNfcip.cntATNRetrys );
            
            /* Digital 1.0 14.15.5.6 3)  Otherwise send ATN */                            
            if( gNfcip.cntATNRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 8010f7c:	4b7c      	ldr	r3, [pc, #496]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8010f7e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8010f82:	1c5a      	adds	r2, r3, #1
 8010f84:	b2d1      	uxtb	r1, r2
 8010f86:	4a7a      	ldr	r2, [pc, #488]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8010f88:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
 8010f8c:	2b02      	cmp	r3, #2
 8010f8e:	d901      	bls.n	8010f94 <nfcipInitiatorHandleDEP+0x15c>
            {
                return ERR_PROTO;
 8010f90:	230b      	movs	r3, #11
 8010f92:	e21a      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send ATN */
            nfcipLogI( " NFCIP(I) Sending ATN \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 8010f94:	2100      	movs	r1, #0
 8010f96:	2080      	movs	r0, #128	; 0x80
 8010f98:	f7ff fed2 	bl	8010d40 <nfcipDEPControlMsg>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	82fb      	strh	r3, [r7, #22]
 8010fa0:	8afb      	ldrh	r3, [r7, #22]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d001      	beq.n	8010faa <nfcipInitiatorHandleDEP+0x172>
 8010fa6:	8afb      	ldrh	r3, [r7, #22]
 8010fa8:	e20f      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 8010faa:	2302      	movs	r3, #2
 8010fac:	e20d      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
                }
#endif /* 0 */
            }

            /* Digital 1.1 16.12.5.4  if NACKs failed raise Transmission error  */
            if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 8010fae:	4b70      	ldr	r3, [pc, #448]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8010fb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010fb4:	1c5a      	adds	r2, r3, #1
 8010fb6:	b2d1      	uxtb	r1, r2
 8010fb8:	4a6d      	ldr	r2, [pc, #436]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8010fba:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 8010fbe:	2b02      	cmp	r3, #2
 8010fc0:	d901      	bls.n	8010fc6 <nfcipInitiatorHandleDEP+0x18e>
            {
                return ERR_FRAMING;
 8010fc2:	2309      	movs	r3, #9
 8010fc4:	e201      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send NACK */
            nfcipLogI( " NFCIP(I) Sending NACK  \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 8010fc6:	4b6a      	ldr	r3, [pc, #424]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8010fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010fcc:	f003 0303 	and.w	r3, r3, #3
 8010fd0:	b2db      	uxtb	r3, r3
 8010fd2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8010fd6:	b2db      	uxtb	r3, r3
 8010fd8:	2100      	movs	r1, #0
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7ff feb0 	bl	8010d40 <nfcipDEPControlMsg>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	82fb      	strh	r3, [r7, #22]
 8010fe4:	8afb      	ldrh	r3, [r7, #22]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d001      	beq.n	8010fee <nfcipInitiatorHandleDEP+0x1b6>
 8010fea:	8afb      	ldrh	r3, [r7, #22]
 8010fec:	e1ed      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 8010fee:	2302      	movs	r3, #2
 8010ff0:	e1eb      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            
        case ERR_NONE:
            break;
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 8010ff2:	2302      	movs	r3, #2
 8010ff4:	e1e9      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            
        default:
            nfcipLogW( " NFCIP(I) Error: %d \r\n", rxRes );
            return rxRes;
 8010ff6:	89fb      	ldrh	r3, [r7, #14]
 8010ff8:	e1e7      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            break;
 8010ffa:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 8010ffc:	4b5c      	ldr	r3, [pc, #368]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8010ffe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011000:	7d7b      	ldrb	r3, [r7, #21]
 8011002:	1c59      	adds	r1, r3, #1
 8011004:	7579      	strb	r1, [r7, #21]
 8011006:	4413      	add	r3, r2
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	74fb      	strb	r3, [r7, #19]
    
    nfcipLogD( " NFCIP(I) rx OK: %d bytes \r\n", nfcDepLen );
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_RES )
 801100c:	4b58      	ldr	r3, [pc, #352]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 801100e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011010:	7d7b      	ldrb	r3, [r7, #21]
 8011012:	1c59      	adds	r1, r3, #1
 8011014:	7579      	strb	r1, [r7, #21]
 8011016:	4413      	add	r3, r2
 8011018:	781b      	ldrb	r3, [r3, #0]
 801101a:	2bd5      	cmp	r3, #213	; 0xd5
 801101c:	d001      	beq.n	8011022 <nfcipInitiatorHandleDEP+0x1ea>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_RES );
        return ERR_PROTO;
 801101e:	230b      	movs	r3, #11
 8011020:	e1d3      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
    }
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DEP_RES )
 8011022:	4b53      	ldr	r3, [pc, #332]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8011024:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011026:	7d7b      	ldrb	r3, [r7, #21]
 8011028:	1c59      	adds	r1, r3, #1
 801102a:	7579      	strb	r1, [r7, #21]
 801102c:	4413      	add	r3, r2
 801102e:	781b      	ldrb	r3, [r3, #0]
 8011030:	2b07      	cmp	r3, #7
 8011032:	d001      	beq.n	8011038 <nfcipInitiatorHandleDEP+0x200>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_CMD_DEP_RES );
        return ERR_PROTO;
 8011034:	230b      	movs	r3, #11
 8011036:	e1c8      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
    }
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];
 8011038:	4b4d      	ldr	r3, [pc, #308]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 801103a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801103c:	7d7b      	ldrb	r3, [r7, #21]
 801103e:	1c59      	adds	r1, r3, #1
 8011040:	7579      	strb	r1, [r7, #21]
 8011042:	4413      	add	r3, r2
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	74bb      	strb	r3, [r7, #18]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 8011048:	7cbb      	ldrb	r3, [r7, #18]
 801104a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801104e:	2b80      	cmp	r3, #128	; 0x80
 8011050:	d00b      	beq.n	801106a <nfcipInitiatorHandleDEP+0x232>
 8011052:	7cbb      	ldrb	r3, [r7, #18]
 8011054:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011058:	2b40      	cmp	r3, #64	; 0x40
 801105a:	d006      	beq.n	801106a <nfcipInitiatorHandleDEP+0x232>
 801105c:	7cbb      	ldrb	r3, [r7, #18]
 801105e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011062:	2b00      	cmp	r3, #0
 8011064:	d001      	beq.n	801106a <nfcipInitiatorHandleDEP+0x232>
    {
        return ERR_PROTO;
 8011066:	230b      	movs	r3, #11
 8011068:	e1af      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
    }
        
    /*******************************************************************************/
    /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 801106a:	4b41      	ldr	r3, [pc, #260]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 801106c:	78db      	ldrb	r3, [r3, #3]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d015      	beq.n	801109e <nfcipInitiatorHandleDEP+0x266>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 8011072:	4b3f      	ldr	r3, [pc, #252]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8011074:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011076:	7d7b      	ldrb	r3, [r7, #21]
 8011078:	1c59      	adds	r1, r3, #1
 801107a:	7579      	strb	r1, [r7, #21]
 801107c:	4413      	add	r3, r2
 801107e:	781a      	ldrb	r2, [r3, #0]
 8011080:	4b3b      	ldr	r3, [pc, #236]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8011082:	78db      	ldrb	r3, [r3, #3]
 8011084:	429a      	cmp	r2, r3
 8011086:	d104      	bne.n	8011092 <nfcipInitiatorHandleDEP+0x25a>
 8011088:	7cbb      	ldrb	r3, [r7, #18]
 801108a:	f003 0304 	and.w	r3, r3, #4
 801108e:	2b00      	cmp	r3, #0
 8011090:	d101      	bne.n	8011096 <nfcipInitiatorHandleDEP+0x25e>
        {
            return ERR_PROTO;
 8011092:	230b      	movs	r3, #11
 8011094:	e199      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8011096:	7d3b      	ldrb	r3, [r7, #20]
 8011098:	3301      	adds	r3, #1
 801109a:	753b      	strb	r3, [r7, #20]
 801109c:	e006      	b.n	80110ac <nfcipInitiatorHandleDEP+0x274>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv */
 801109e:	7cbb      	ldrb	r3, [r7, #18]
 80110a0:	f003 0304 	and.w	r3, r3, #4
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d001      	beq.n	80110ac <nfcipInitiatorHandleDEP+0x274>
    {
        return ERR_PROTO;
 80110a8:	230b      	movs	r3, #11
 80110aa:	e18e      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
        /* MISRA 15.7 - Empty else */
    }
    
    /*******************************************************************************/
    /* Digital 1.0 14.6.2.8 & 14.6.3.11 NAD must not be used  */
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 80110ac:	4b30      	ldr	r3, [pc, #192]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 80110ae:	791b      	ldrb	r3, [r3, #4]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d015      	beq.n	80110e0 <nfcipInitiatorHandleDEP+0x2a8>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.nad) || !nfcip_PFBhasNAD( rxPFB ) )
 80110b4:	4b2e      	ldr	r3, [pc, #184]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 80110b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80110b8:	7d7b      	ldrb	r3, [r7, #21]
 80110ba:	1c59      	adds	r1, r3, #1
 80110bc:	7579      	strb	r1, [r7, #21]
 80110be:	4413      	add	r3, r2
 80110c0:	781a      	ldrb	r2, [r3, #0]
 80110c2:	4b2b      	ldr	r3, [pc, #172]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 80110c4:	791b      	ldrb	r3, [r3, #4]
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d104      	bne.n	80110d4 <nfcipInitiatorHandleDEP+0x29c>
 80110ca:	7cbb      	ldrb	r3, [r7, #18]
 80110cc:	f003 0308 	and.w	r3, r3, #8
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d101      	bne.n	80110d8 <nfcipInitiatorHandleDEP+0x2a0>
        {
            return ERR_PROTO;
 80110d4:	230b      	movs	r3, #11
 80110d6:	e178      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
        }        
        optHdrLen++;                                    /* Inc header optional field cnt*/
 80110d8:	7d3b      	ldrb	r3, [r7, #20]
 80110da:	3301      	adds	r3, #1
 80110dc:	753b      	strb	r3, [r7, #20]
 80110de:	e006      	b.n	80110ee <nfcipInitiatorHandleDEP+0x2b6>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 80110e0:	7cbb      	ldrb	r3, [r7, #18]
 80110e2:	f003 0308 	and.w	r3, r3, #8
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d001      	beq.n	80110ee <nfcipInitiatorHandleDEP+0x2b6>
    {
        return ERR_PROTO;
 80110ea:	230b      	movs	r3, #11
 80110ec:	e16d      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
    }
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 80110ee:	7cbb      	ldrb	r3, [r7, #18]
 80110f0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80110f4:	2b40      	cmp	r3, #64	; 0x40
 80110f6:	d153      	bne.n	80111a0 <nfcipInitiatorHandleDEP+0x368>
    {
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 80110f8:	7cbb      	ldrb	r3, [r7, #18]
 80110fa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80110fe:	2b40      	cmp	r3, #64	; 0x40
 8011100:	d14c      	bne.n	801119c <nfcipInitiatorHandleDEP+0x364>
 8011102:	7cbb      	ldrb	r3, [r7, #18]
 8011104:	f003 0310 	and.w	r3, r3, #16
 8011108:	2b00      	cmp	r3, #0
 801110a:	d147      	bne.n	801119c <nfcipInitiatorHandleDEP+0x364>
        {
            nfcipLogI( " NFCIP(I) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 801110c:	4b18      	ldr	r3, [pc, #96]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 801110e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011112:	461a      	mov	r2, r3
 8011114:	7cbb      	ldrb	r3, [r7, #18]
 8011116:	f003 0303 	and.w	r3, r3, #3
 801111a:	429a      	cmp	r2, r3
 801111c:	d11c      	bne.n	8011158 <nfcipInitiatorHandleDEP+0x320>
            {
                /* 14.12.3.3 R-ACK with correct PNI -> Increment */
                gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 801111e:	4b14      	ldr	r3, [pc, #80]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8011120:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011124:	3301      	adds	r3, #1
 8011126:	b2db      	uxtb	r3, r3
 8011128:	f003 0303 	and.w	r3, r3, #3
 801112c:	b2da      	uxtb	r2, r3
 801112e:	4b10      	ldr	r3, [pc, #64]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8011130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                                
                /* R-ACK while not performing chaining -> Protocol error*/
                if( !gNfcip.isTxChaining )
 8011134:	4b0e      	ldr	r3, [pc, #56]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8011136:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 801113a:	f083 0301 	eor.w	r3, r3, #1
 801113e:	b2db      	uxtb	r3, r3
 8011140:	2b00      	cmp	r3, #0
 8011142:	d001      	beq.n	8011148 <nfcipInitiatorHandleDEP+0x310>
                {
                    return ERR_PROTO;
 8011144:	230b      	movs	r3, #11
 8011146:	e140      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipClearCounters();
 8011148:	f7ff fe5a 	bl	8010e00 <nfcipClearCounters>
                gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 801114c:	4b08      	ldr	r3, [pc, #32]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 801114e:	2204      	movs	r2, #4
 8011150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_NONE;                            /* This block has been transmitted */
 8011154:	2300      	movs	r3, #0
 8011156:	e138      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            }
            else  /* Digital 1.0 14.12.4.5 ACK with wrong PNI Initiator may retransmit */
            {
                if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 8011158:	4b05      	ldr	r3, [pc, #20]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 801115a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801115e:	1c5a      	adds	r2, r3, #1
 8011160:	b2d1      	uxtb	r1, r2
 8011162:	4a03      	ldr	r2, [pc, #12]	; (8011170 <nfcipInitiatorHandleDEP+0x338>)
 8011164:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 8011168:	2b02      	cmp	r3, #2
 801116a:	d903      	bls.n	8011174 <nfcipInitiatorHandleDEP+0x33c>
                {
                    return ERR_PROTO;
 801116c:	230b      	movs	r3, #11
 801116e:	e12c      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
 8011170:	2000376c 	.word	0x2000376c
                /* Extended the MAY in Digital 1.0 14.12.4.5 to only reTransmit if the ACK
                 * is for the previous DEP, otherwise raise Protocol immediately 
                 * If the PNI difference is more than 1 it is worthless to reTransmit 3x
                 * and after raise the error                                              */
                
                if( nfcip_PNIDec( gNfcip.pni ) ==  nfcip_PBF_PNI( rxPFB ) )
 8011174:	4b97      	ldr	r3, [pc, #604]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 8011176:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801117a:	3b01      	subs	r3, #1
 801117c:	b2da      	uxtb	r2, r3
 801117e:	7cbb      	ldrb	r3, [r7, #18]
 8011180:	4053      	eors	r3, r2
 8011182:	b2db      	uxtb	r3, r3
 8011184:	f003 0303 	and.w	r3, r3, #3
 8011188:	2b00      	cmp	r3, #0
 801118a:	d105      	bne.n	8011198 <nfcipInitiatorHandleDEP+0x360>
                {
                    /* ReTransmit */
                    nfcipLogI( " NFCIP(I) Rcvd ACK prev PNI -> reTx \r\n" );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 801118c:	4b91      	ldr	r3, [pc, #580]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 801118e:	2205      	movs	r2, #5
 8011190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 8011194:	2302      	movs	r3, #2
 8011196:	e118      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipLogI( " NFCIP(I) Rcvd ACK unexpected far PNI -> Error \r\n" );
                return ERR_PROTO;
 8011198:	230b      	movs	r3, #11
 801119a:	e116      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            }
        }
        else /* Digital 1.0 - 14.12.5.2 Target must never send NACK  */
        {            
            return ERR_PROTO;
 801119c:	230b      	movs	r3, #11
 801119e:	e114      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )                                
 80111a0:	7cbb      	ldrb	r3, [r7, #18]
 80111a2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80111a6:	2b80      	cmp	r3, #128	; 0x80
 80111a8:	f040 8094 	bne.w	80112d4 <nfcipInitiatorHandleDEP+0x49c>
    {
        nfcipLogI( " NFCIP(I) Rcvd S-PDU  \r\n" );
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisSATN( rxPFB ) )                         /* If is a S-ATN        */
 80111ac:	7cbb      	ldrb	r3, [r7, #18]
 80111ae:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80111b2:	2b80      	cmp	r3, #128	; 0x80
 80111b4:	d146      	bne.n	8011244 <nfcipInitiatorHandleDEP+0x40c>
 80111b6:	7cbb      	ldrb	r3, [r7, #18]
 80111b8:	f003 0310 	and.w	r3, r3, #16
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d141      	bne.n	8011244 <nfcipInitiatorHandleDEP+0x40c>
        {
            nfcipLogI( " NFCIP(I) Rcvd ATN  \r\n" );
            if( nfcip_PFBisSATN( gNfcip.lastPFB ) )            /* Check if is expected */
 80111c0:	4b84      	ldr	r3, [pc, #528]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 80111c2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80111c6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80111ca:	2b80      	cmp	r3, #128	; 0x80
 80111cc:	d138      	bne.n	8011240 <nfcipInitiatorHandleDEP+0x408>
 80111ce:	4b81      	ldr	r3, [pc, #516]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 80111d0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80111d4:	f003 0310 	and.w	r3, r3, #16
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d131      	bne.n	8011240 <nfcipInitiatorHandleDEP+0x408>
            {  
                gNfcip.cntATNRetrys = 0;                       /* Clear ATN counter    */
 80111dc:	4b7d      	ldr	r3, [pc, #500]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 80111de:	2200      	movs	r2, #0
 80111e0:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                
                /* Although spec is not clear NFC Forum Digital test is expecting to
                 * retransmit upon receiving ATN_RES */
                if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 80111e4:	4b7b      	ldr	r3, [pc, #492]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 80111e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80111ea:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80111ee:	2b80      	cmp	r3, #128	; 0x80
 80111f0:	d114      	bne.n	801121c <nfcipInitiatorHandleDEP+0x3e4>
 80111f2:	4b78      	ldr	r3, [pc, #480]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 80111f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80111f8:	f003 0310 	and.w	r3, r3, #16
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d00d      	beq.n	801121c <nfcipInitiatorHandleDEP+0x3e4>
                {
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx RTOX_RES \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 8011200:	4b74      	ldr	r3, [pc, #464]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 8011202:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011206:	4619      	mov	r1, r3
 8011208:	2090      	movs	r0, #144	; 0x90
 801120a:	f7ff fd99 	bl	8010d40 <nfcipDEPControlMsg>
 801120e:	4603      	mov	r3, r0
 8011210:	82fb      	strh	r3, [r7, #22]
 8011212:	8afb      	ldrh	r3, [r7, #22]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d011      	beq.n	801123c <nfcipInitiatorHandleDEP+0x404>
 8011218:	8afb      	ldrh	r3, [r7, #22]
 801121a:	e0d6      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
                }
                else
                {
                    /* ReTransmit ? */
                    if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 801121c:	4b6d      	ldr	r3, [pc, #436]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 801121e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8011222:	1c5a      	adds	r2, r3, #1
 8011224:	b2d1      	uxtb	r1, r2
 8011226:	4a6b      	ldr	r2, [pc, #428]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 8011228:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 801122c:	2b02      	cmp	r3, #2
 801122e:	d901      	bls.n	8011234 <nfcipInitiatorHandleDEP+0x3fc>
                    {
                        return ERR_PROTO;
 8011230:	230b      	movs	r3, #11
 8011232:	e0ca      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
                    }
                    
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx  PNI: %d \r\n", gNfcip.pni );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8011234:	4b67      	ldr	r3, [pc, #412]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 8011236:	2205      	movs	r2, #5
 8011238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 801123c:	2302      	movs	r3, #2
 801123e:	e0c4      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            }
            else                                               /* Digital 1.0  14.12.4.4 & 14.12.4.8 */
            {
                return ERR_PROTO;
 8011240:	230b      	movs	r3, #11
 8011242:	e0c2      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            }
        }
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 8011244:	7cbb      	ldrb	r3, [r7, #18]
 8011246:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801124a:	2b80      	cmp	r3, #128	; 0x80
 801124c:	d140      	bne.n	80112d0 <nfcipInitiatorHandleDEP+0x498>
 801124e:	7cbb      	ldrb	r3, [r7, #18]
 8011250:	f003 0310 	and.w	r3, r3, #16
 8011254:	2b00      	cmp	r3, #0
 8011256:	d03b      	beq.n	80112d0 <nfcipInitiatorHandleDEP+0x498>
        {
            nfcipLogI( " NFCIP(I) Rcvd TO  \r\n" );
            
            rxRTOX = gNfcip.rxBuf[rxMsgIt++];
 8011258:	4b5e      	ldr	r3, [pc, #376]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 801125a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801125c:	7d7b      	ldrb	r3, [r7, #21]
 801125e:	1c59      	adds	r1, r3, #1
 8011260:	7579      	strb	r1, [r7, #21]
 8011262:	4413      	add	r3, r2
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	747b      	strb	r3, [r7, #17]
            
            /* Digital 1.1 16.12.4.3 - Initiator MAY stop accepting subsequent RTOX Req   *
             *                       - RTOX request to an ATN -> Protocol error           */
            if( (gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 8011268:	4b5a      	ldr	r3, [pc, #360]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 801126a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801126e:	1c5a      	adds	r2, r3, #1
 8011270:	b2d1      	uxtb	r1, r2
 8011272:	4a58      	ldr	r2, [pc, #352]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 8011274:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 8011278:	2b03      	cmp	r3, #3
 801127a:	d80d      	bhi.n	8011298 <nfcipInitiatorHandleDEP+0x460>
 801127c:	4b55      	ldr	r3, [pc, #340]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 801127e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011282:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011286:	2b80      	cmp	r3, #128	; 0x80
 8011288:	d108      	bne.n	801129c <nfcipInitiatorHandleDEP+0x464>
 801128a:	4b52      	ldr	r3, [pc, #328]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 801128c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011290:	f003 0310 	and.w	r3, r3, #16
 8011294:	2b00      	cmp	r3, #0
 8011296:	d101      	bne.n	801129c <nfcipInitiatorHandleDEP+0x464>
            {
                return ERR_PROTO;
 8011298:	230b      	movs	r3, #11
 801129a:	e096      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.1 16.8.4.1 RTOX must be between [1,59] */
            if( (rxRTOX < NFCIP_INIT_MIN_RTOX) || (rxRTOX > NFCIP_INIT_MAX_RTOX) )
 801129c:	7c7b      	ldrb	r3, [r7, #17]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d002      	beq.n	80112a8 <nfcipInitiatorHandleDEP+0x470>
 80112a2:	7c7b      	ldrb	r3, [r7, #17]
 80112a4:	2b3b      	cmp	r3, #59	; 0x3b
 80112a6:	d901      	bls.n	80112ac <nfcipInitiatorHandleDEP+0x474>
            {
                return ERR_PROTO;
 80112a8:	230b      	movs	r3, #11
 80112aa:	e08e      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            }
            
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), rxRTOX ) );
 80112ac:	7c7b      	ldrb	r3, [r7, #17]
 80112ae:	4619      	mov	r1, r3
 80112b0:	2090      	movs	r0, #144	; 0x90
 80112b2:	f7ff fd45 	bl	8010d40 <nfcipDEPControlMsg>
 80112b6:	4603      	mov	r3, r0
 80112b8:	82fb      	strh	r3, [r7, #22]
 80112ba:	8afb      	ldrh	r3, [r7, #22]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d001      	beq.n	80112c4 <nfcipInitiatorHandleDEP+0x48c>
 80112c0:	8afb      	ldrh	r3, [r7, #22]
 80112c2:	e082      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            gNfcip.lastRTOX = rxRTOX;
 80112c4:	4a43      	ldr	r2, [pc, #268]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 80112c6:	7c7b      	ldrb	r3, [r7, #17]
 80112c8:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            
            return ERR_BUSY;
 80112cc:	2302      	movs	r3, #2
 80112ce:	e07c      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            /* Unexpected S-PDU */
            return ERR_PROTO;                       /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
 80112d0:	230b      	movs	r3, #11
 80112d2:	e07a      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 80112d4:	7cbb      	ldrb	r3, [r7, #18]
 80112d6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d174      	bne.n	80113c8 <nfcipInitiatorHandleDEP+0x590>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 80112de:	4b3d      	ldr	r3, [pc, #244]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 80112e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80112e4:	461a      	mov	r2, r3
 80112e6:	7cbb      	ldrb	r3, [r7, #18]
 80112e8:	f003 0303 	and.w	r3, r3, #3
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d001      	beq.n	80112f4 <nfcipInitiatorHandleDEP+0x4bc>
        {
            nfcipLogI( " NFCIP(I) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni  , nfcip_PBF_PNI( rxPFB ) );
            return ERR_PROTO;
 80112f0:	230b      	movs	r3, #11
 80112f2:	e06a      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
        }
        
        nfcipLogD( " NFCIP(I) Rcvd IPDU OK    PNI: %d \r\n", gNfcip.pni );
        
        /* 14.12.3.3 I-PDU with correct PNI -> Increment */
        gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80112f4:	4b37      	ldr	r3, [pc, #220]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 80112f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80112fa:	3301      	adds	r3, #1
 80112fc:	b2db      	uxtb	r3, r3
 80112fe:	f003 0303 	and.w	r3, r3, #3
 8011302:	b2da      	uxtb	r2, r3
 8011304:	4b33      	ldr	r3, [pc, #204]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 8011306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
        
        /* Successful data Exchange */
        nfcipClearCounters();
 801130a:	f7ff fd79 	bl	8010e00 <nfcipClearCounters>
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 801130e:	7cfb      	ldrb	r3, [r7, #19]
 8011310:	b29a      	uxth	r2, r3
 8011312:	7d3b      	ldrb	r3, [r7, #20]
 8011314:	b29b      	uxth	r3, r3
 8011316:	1ad3      	subs	r3, r2, r3
 8011318:	b29b      	uxth	r3, r3
 801131a:	3b04      	subs	r3, #4
 801131c:	b29a      	uxth	r2, r3
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	801a      	strh	r2, [r3, #0]
        
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 8011322:	4b2c      	ldr	r3, [pc, #176]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 8011324:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8011328:	461a      	mov	r2, r3
 801132a:	7d3b      	ldrb	r3, [r7, #20]
 801132c:	3304      	adds	r3, #4
 801132e:	429a      	cmp	r2, r3
 8011330:	d013      	beq.n	801135a <nfcipInitiatorHandleDEP+0x522>
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	881b      	ldrh	r3, [r3, #0]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d00f      	beq.n	801135a <nfcipInitiatorHandleDEP+0x522>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 801133a:	4b26      	ldr	r3, [pc, #152]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 801133c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801133e:	4a25      	ldr	r2, [pc, #148]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 8011340:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 8011344:	1898      	adds	r0, r3, r2
 8011346:	4b23      	ldr	r3, [pc, #140]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 8011348:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801134a:	7d3b      	ldrb	r3, [r7, #20]
 801134c:	3304      	adds	r3, #4
 801134e:	18d1      	adds	r1, r2, r3
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	881b      	ldrh	r3, [r3, #0]
 8011354:	461a      	mov	r2, r3
 8011356:	f007 fce9 	bl	8018d2c <memmove>
        }

        /*******************************************************************************/
        /* Check if target is indicating chaining MI                                   */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 801135a:	7cbb      	ldrb	r3, [r7, #18]
 801135c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011360:	2b00      	cmp	r3, #0
 8011362:	d127      	bne.n	80113b4 <nfcipInitiatorHandleDEP+0x57c>
 8011364:	7cbb      	ldrb	r3, [r7, #18]
 8011366:	f003 0310 	and.w	r3, r3, #16
 801136a:	2b00      	cmp	r3, #0
 801136c:	d022      	beq.n	80113b4 <nfcipInitiatorHandleDEP+0x57c>
        {
            gNfcip.isRxChaining = true;
 801136e:	4b19      	ldr	r3, [pc, #100]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 8011370:	2201      	movs	r2, #1
 8011372:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2201      	movs	r2, #1
 801137a:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(I) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 801137c:	4b15      	ldr	r3, [pc, #84]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 801137e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011382:	f003 0303 	and.w	r3, r3, #3
 8011386:	b2db      	uxtb	r3, r3
 8011388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801138c:	b2d8      	uxtb	r0, r3
 801138e:	4b11      	ldr	r3, [pc, #68]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 8011390:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011392:	7d7b      	ldrb	r3, [r7, #21]
 8011394:	1c59      	adds	r1, r3, #1
 8011396:	7579      	strb	r1, [r7, #21]
 8011398:	4413      	add	r3, r2
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	4619      	mov	r1, r3
 801139e:	f7ff fccf 	bl	8010d40 <nfcipDEPControlMsg>
 80113a2:	4603      	mov	r3, r0
 80113a4:	82fb      	strh	r3, [r7, #22]
 80113a6:	8afb      	ldrh	r3, [r7, #22]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d001      	beq.n	80113b0 <nfcipInitiatorHandleDEP+0x578>
 80113ac:	8afb      	ldrh	r3, [r7, #22]
 80113ae:	e00c      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 80113b0:	230d      	movs	r3, #13
 80113b2:	e00a      	b.n	80113ca <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            gNfcip.isRxChaining = false;
 80113b4:	4b07      	ldr	r3, [pc, #28]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 80113b6:	2200      	movs	r2, #0
 80113b8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            gNfcip.state        = NFCIP_ST_INIT_DEP_IDLE;
 80113bc:	4b05      	ldr	r3, [pc, #20]	; (80113d4 <nfcipInitiatorHandleDEP+0x59c>)
 80113be:	2204      	movs	r2, #4
 80113c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            ret = ERR_NONE;    /* Data exchange done */
 80113c4:	2300      	movs	r3, #0
 80113c6:	82fb      	strh	r3, [r7, #22]
        }
    }
    return ret;
 80113c8:	8afb      	ldrh	r3, [r7, #22]
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3718      	adds	r7, #24
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
 80113d2:	bf00      	nop
 80113d4:	2000376c 	.word	0x2000376c

080113d8 <nfcipTargetHandleRX>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleRX( ReturnCode rxRes, uint16_t *outActRxLen, bool *outIsChaining )
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b08c      	sub	sp, #48	; 0x30
 80113dc:	af04      	add	r7, sp, #16
 80113de:	4603      	mov	r3, r0
 80113e0:	60b9      	str	r1, [r7, #8]
 80113e2:	607a      	str	r2, [r7, #4]
 80113e4:	81fb      	strh	r3, [r7, #14]
    uint8_t    rxPFB;
    uint8_t    optHdrLen;
    uint8_t    resBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_TARGET_RES_MAX];
        
    
    ret        = ERR_INTERNAL;
 80113e6:	230c      	movs	r3, #12
 80113e8:	83fb      	strh	r3, [r7, #30]
    rxMsgIt    = 0;
 80113ea:	2300      	movs	r3, #0
 80113ec:	777b      	strb	r3, [r7, #29]
    optHdrLen  = 0;
 80113ee:	2300      	movs	r3, #0
 80113f0:	773b      	strb	r3, [r7, #28]
    
    *outActRxLen    = 0;
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	2200      	movs	r2, #0
 80113f6:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2200      	movs	r2, #0
 80113fc:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 80113fe:	89fb      	ldrh	r3, [r7, #14]
 8011400:	2b25      	cmp	r3, #37	; 0x25
 8011402:	d006      	beq.n	8011412 <nfcipTargetHandleRX+0x3a>
 8011404:	2b25      	cmp	r3, #37	; 0x25
 8011406:	dc0a      	bgt.n	801141e <nfcipTargetHandleRX+0x46>
 8011408:	2b00      	cmp	r3, #0
 801140a:	d01d      	beq.n	8011448 <nfcipTargetHandleRX+0x70>
 801140c:	2b02      	cmp	r3, #2
 801140e:	d003      	beq.n	8011418 <nfcipTargetHandleRX+0x40>
 8011410:	e005      	b.n	801141e <nfcipTargetHandleRX+0x46>
        case ERR_NONE:
            break;
            
        case ERR_LINK_LOSS:
            nfcipLogW( " NFCIP(T) Error: %d \r\n", rxRes );
            return rxRes;
 8011412:	89fb      	ldrh	r3, [r7, #14]
 8011414:	f000 bc1a 	b.w	8011c4c <nfcipTargetHandleRX+0x874>
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 8011418:	2302      	movs	r3, #2
 801141a:	f000 bc17 	b.w	8011c4c <nfcipTargetHandleRX+0x874>
             * The Target MUST always stay in receive mode when a                          *
             * Transmission Error or a Protocol Error occurs.                              *
             *                                                                             *
             * Do not push Transmission/Protocol Errors to upper layer in Listen Mode #766 */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 801141e:	4b9e      	ldr	r3, [pc, #632]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011420:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011422:	4b9d      	ldr	r3, [pc, #628]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011424:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011428:	4b9b      	ldr	r3, [pc, #620]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 801142a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801142c:	f04f 30ff 	mov.w	r0, #4294967295
 8011430:	9002      	str	r0, [sp, #8]
 8011432:	2004      	movs	r0, #4
 8011434:	9001      	str	r0, [sp, #4]
 8011436:	9300      	str	r3, [sp, #0]
 8011438:	460b      	mov	r3, r1
 801143a:	2100      	movs	r1, #0
 801143c:	2000      	movs	r0, #0
 801143e:	f004 fcfb 	bl	8015e38 <rfalTransceiveBlockingTx>
            return ERR_BUSY;
 8011442:	2302      	movs	r3, #2
 8011444:	f000 bc02 	b.w	8011c4c <nfcipTargetHandleRX+0x874>
            break;
 8011448:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 801144a:	4b93      	ldr	r3, [pc, #588]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 801144c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801144e:	7f7b      	ldrb	r3, [r7, #29]
 8011450:	1c59      	adds	r1, r3, #1
 8011452:	7779      	strb	r1, [r7, #29]
 8011454:	4413      	add	r3, r2
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	76fb      	strb	r3, [r7, #27]
        
    nfcipLogD( " NFCIP(T) rx OK: %d bytes \r\n", nfcDepLen );
    
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_REQ )
 801145a:	4b8f      	ldr	r3, [pc, #572]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 801145c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801145e:	7f7b      	ldrb	r3, [r7, #29]
 8011460:	1c59      	adds	r1, r3, #1
 8011462:	7779      	strb	r1, [r7, #29]
 8011464:	4413      	add	r3, r2
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	2bd4      	cmp	r3, #212	; 0xd4
 801146a:	d013      	beq.n	8011494 <nfcipTargetHandleRX+0xbc>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 801146c:	4b8a      	ldr	r3, [pc, #552]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 801146e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011470:	4b89      	ldr	r3, [pc, #548]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011472:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011476:	4b88      	ldr	r3, [pc, #544]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801147a:	f04f 30ff 	mov.w	r0, #4294967295
 801147e:	9002      	str	r0, [sp, #8]
 8011480:	2004      	movs	r0, #4
 8011482:	9001      	str	r0, [sp, #4]
 8011484:	9300      	str	r3, [sp, #0]
 8011486:	460b      	mov	r3, r1
 8011488:	2100      	movs	r1, #0
 801148a:	2000      	movs	r0, #0
 801148c:	f004 fcd4 	bl	8015e38 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore bad request */
 8011490:	2302      	movs	r3, #2
 8011492:	e3db      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
    
    
    /*******************************************************************************/
    /* Check whether target rcvd a normal DEP or deactivation request              */
    /*******************************************************************************/
    switch( gNfcip.rxBuf[rxMsgIt++] )
 8011494:	4b80      	ldr	r3, [pc, #512]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011496:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011498:	7f7b      	ldrb	r3, [r7, #29]
 801149a:	1c59      	adds	r1, r3, #1
 801149c:	7779      	strb	r1, [r7, #29]
 801149e:	4413      	add	r3, r2
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	2b0a      	cmp	r3, #10
 80114a4:	d032      	beq.n	801150c <nfcipTargetHandleRX+0x134>
 80114a6:	2b0a      	cmp	r3, #10
 80114a8:	dc5d      	bgt.n	8011566 <nfcipTargetHandleRX+0x18e>
 80114aa:	2b06      	cmp	r3, #6
 80114ac:	d06f      	beq.n	801158e <nfcipTargetHandleRX+0x1b6>
 80114ae:	2b08      	cmp	r3, #8
 80114b0:	d159      	bne.n	8011566 <nfcipTargetHandleRX+0x18e>
            
            nfcipLogI( " NFCIP(T) rx DSL \r\n" );
            
            /* Digital 1.0  14.9.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.9.1.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 80114b2:	4b79      	ldr	r3, [pc, #484]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 80114b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80114b6:	7f7b      	ldrb	r3, [r7, #29]
 80114b8:	1c59      	adds	r1, r3, #1
 80114ba:	7779      	strb	r1, [r7, #29]
 80114bc:	4413      	add	r3, r2
 80114be:	781a      	ldrb	r2, [r3, #0]
 80114c0:	4b75      	ldr	r3, [pc, #468]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 80114c2:	78db      	ldrb	r3, [r3, #3]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d102      	bne.n	80114ce <nfcipTargetHandleRX+0xf6>
 80114c8:	7efb      	ldrb	r3, [r7, #27]
 80114ca:	2b04      	cmp	r3, #4
 80114cc:	d003      	beq.n	80114d6 <nfcipTargetHandleRX+0xfe>
 80114ce:	4b72      	ldr	r3, [pc, #456]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 80114d0:	78db      	ldrb	r3, [r3, #3]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d106      	bne.n	80114e4 <nfcipTargetHandleRX+0x10c>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 80114d6:	4b70      	ldr	r3, [pc, #448]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 80114d8:	78db      	ldrb	r3, [r3, #3]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d104      	bne.n	80114e8 <nfcipTargetHandleRX+0x110>
 80114de:	7efb      	ldrb	r3, [r7, #27]
 80114e0:	2b03      	cmp	r3, #3
 80114e2:	d001      	beq.n	80114e8 <nfcipTargetHandleRX+0x110>
               )
            {
                nfcipLogI( " NFCIP(T) DSL wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 80114e4:	2302      	movs	r3, #2
 80114e6:	e3b1      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
            }
            
            nfcipTx( NFCIP_CMD_DSL_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 80114e8:	f107 0114 	add.w	r1, r7, #20
 80114ec:	f04f 33ff 	mov.w	r3, #4294967295
 80114f0:	9301      	str	r3, [sp, #4]
 80114f2:	2300      	movs	r3, #0
 80114f4:	9300      	str	r3, [sp, #0]
 80114f6:	2300      	movs	r3, #0
 80114f8:	2200      	movs	r2, #0
 80114fa:	2009      	movs	r0, #9
 80114fc:	f000 fbae 	bl	8011c5c <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_SLEEP;
 8011500:	4b65      	ldr	r3, [pc, #404]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011502:	2210      	movs	r2, #16
 8011504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_SLEEP_REQ;
 8011508:	2320      	movs	r3, #32
 801150a:	e39f      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
            
            nfcipLogI( " NFCIP(T) rx RLS \r\n" );
            
            /* Digital 1.0  14.10.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.10.2.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 801150c:	4b62      	ldr	r3, [pc, #392]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 801150e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011510:	7f7b      	ldrb	r3, [r7, #29]
 8011512:	1c59      	adds	r1, r3, #1
 8011514:	7779      	strb	r1, [r7, #29]
 8011516:	4413      	add	r3, r2
 8011518:	781a      	ldrb	r2, [r3, #0]
 801151a:	4b5f      	ldr	r3, [pc, #380]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 801151c:	78db      	ldrb	r3, [r3, #3]
 801151e:	429a      	cmp	r2, r3
 8011520:	d102      	bne.n	8011528 <nfcipTargetHandleRX+0x150>
 8011522:	7efb      	ldrb	r3, [r7, #27]
 8011524:	2b04      	cmp	r3, #4
 8011526:	d003      	beq.n	8011530 <nfcipTargetHandleRX+0x158>
 8011528:	4b5b      	ldr	r3, [pc, #364]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 801152a:	78db      	ldrb	r3, [r3, #3]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d106      	bne.n	801153e <nfcipTargetHandleRX+0x166>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen > RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 8011530:	4b59      	ldr	r3, [pc, #356]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011532:	78db      	ldrb	r3, [r3, #3]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d104      	bne.n	8011542 <nfcipTargetHandleRX+0x16a>
 8011538:	7efb      	ldrb	r3, [r7, #27]
 801153a:	2b03      	cmp	r3, #3
 801153c:	d901      	bls.n	8011542 <nfcipTargetHandleRX+0x16a>
               )
            {
                nfcipLogI( " NFCIP(T) RLS wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 801153e:	2302      	movs	r3, #2
 8011540:	e384      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
            }
                
            nfcipTx( NFCIP_CMD_RLS_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 8011542:	f107 0114 	add.w	r1, r7, #20
 8011546:	f04f 33ff 	mov.w	r3, #4294967295
 801154a:	9301      	str	r3, [sp, #4]
 801154c:	2300      	movs	r3, #0
 801154e:	9300      	str	r3, [sp, #0]
 8011550:	2300      	movs	r3, #0
 8011552:	2200      	movs	r2, #0
 8011554:	200b      	movs	r0, #11
 8011556:	f000 fb81 	bl	8011c5c <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;
 801155a:	4b4f      	ldr	r3, [pc, #316]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 801155c:	220c      	movs	r2, #12
 801155e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_RELEASE_REQ;
 8011562:	231f      	movs	r3, #31
 8011564:	e372      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
        default:
            
            /* Don't go to NFCIP_ST_TARG_DEP_IDLE state as it needs to ignore this    *
             * invalid frame, and keep waiting for more frames                        */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011566:	4b4c      	ldr	r3, [pc, #304]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011568:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801156a:	4b4b      	ldr	r3, [pc, #300]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 801156c:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011570:	4b49      	ldr	r3, [pc, #292]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011574:	f04f 30ff 	mov.w	r0, #4294967295
 8011578:	9002      	str	r0, [sp, #8]
 801157a:	2004      	movs	r0, #4
 801157c:	9001      	str	r0, [sp, #4]
 801157e:	9300      	str	r3, [sp, #0]
 8011580:	460b      	mov	r3, r1
 8011582:	2100      	movs	r1, #0
 8011584:	2000      	movs	r0, #0
 8011586:	f004 fc57 	bl	8015e38 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad frame */
 801158a:	2302      	movs	r3, #2
 801158c:	e35e      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
            break;                                /* Continue to normal DEP processing */
 801158e:	bf00      	nop
    }
    
    /*******************************************************************************/
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];                    /* Store rcvd PFB  */
 8011590:	4b41      	ldr	r3, [pc, #260]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011592:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011594:	7f7b      	ldrb	r3, [r7, #29]
 8011596:	1c59      	adds	r1, r3, #1
 8011598:	7779      	strb	r1, [r7, #29]
 801159a:	4413      	add	r3, r2
 801159c:	781b      	ldrb	r3, [r3, #0]
 801159e:	76bb      	strb	r3, [r7, #26]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 80115a0:	7ebb      	ldrb	r3, [r7, #26]
 80115a2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80115a6:	2b80      	cmp	r3, #128	; 0x80
 80115a8:	d01d      	beq.n	80115e6 <nfcipTargetHandleRX+0x20e>
 80115aa:	7ebb      	ldrb	r3, [r7, #26]
 80115ac:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80115b0:	2b40      	cmp	r3, #64	; 0x40
 80115b2:	d018      	beq.n	80115e6 <nfcipTargetHandleRX+0x20e>
 80115b4:	7ebb      	ldrb	r3, [r7, #26]
 80115b6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d013      	beq.n	80115e6 <nfcipTargetHandleRX+0x20e>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80115be:	4b36      	ldr	r3, [pc, #216]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 80115c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80115c2:	4b35      	ldr	r3, [pc, #212]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 80115c4:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 80115c8:	4b33      	ldr	r3, [pc, #204]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 80115ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115cc:	f04f 30ff 	mov.w	r0, #4294967295
 80115d0:	9002      	str	r0, [sp, #8]
 80115d2:	2004      	movs	r0, #4
 80115d4:	9001      	str	r0, [sp, #4]
 80115d6:	9300      	str	r3, [sp, #0]
 80115d8:	460b      	mov	r3, r1
 80115da:	2100      	movs	r1, #0
 80115dc:	2000      	movs	r0, #0
 80115de:	f004 fc2b 	bl	8015e38 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore invalid PFB  */
 80115e2:	2302      	movs	r3, #2
 80115e4:	e332      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
    }
    
    /*******************************************************************************/   
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 80115e6:	4b2c      	ldr	r3, [pc, #176]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 80115e8:	78db      	ldrb	r3, [r3, #3]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d03b      	beq.n	8011666 <nfcipTargetHandleRX+0x28e>
    {
        if( !nfcip_PFBhasDID( rxPFB ) )
 80115ee:	7ebb      	ldrb	r3, [r7, #26]
 80115f0:	f003 0304 	and.w	r3, r3, #4
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d113      	bne.n	8011620 <nfcipTargetHandleRX+0x248>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80115f8:	4b27      	ldr	r3, [pc, #156]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 80115fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80115fc:	4b26      	ldr	r3, [pc, #152]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 80115fe:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011602:	4b25      	ldr	r3, [pc, #148]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011606:	f04f 30ff 	mov.w	r0, #4294967295
 801160a:	9002      	str	r0, [sp, #8]
 801160c:	2004      	movs	r0, #4
 801160e:	9001      	str	r0, [sp, #4]
 8011610:	9300      	str	r3, [sp, #0]
 8011612:	460b      	mov	r3, r1
 8011614:	2100      	movs	r1, #0
 8011616:	2000      	movs	r0, #0
 8011618:	f004 fc0e 	bl	8015e38 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 801161c:	2302      	movs	r3, #2
 801161e:	e315      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
        }
        if( gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did ) /* MISRA 13.5 */
 8011620:	4b1d      	ldr	r3, [pc, #116]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011622:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011624:	7f7b      	ldrb	r3, [r7, #29]
 8011626:	1c59      	adds	r1, r3, #1
 8011628:	7779      	strb	r1, [r7, #29]
 801162a:	4413      	add	r3, r2
 801162c:	781a      	ldrb	r2, [r3, #0]
 801162e:	4b1a      	ldr	r3, [pc, #104]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011630:	78db      	ldrb	r3, [r3, #3]
 8011632:	429a      	cmp	r2, r3
 8011634:	d013      	beq.n	801165e <nfcipTargetHandleRX+0x286>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011636:	4b18      	ldr	r3, [pc, #96]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011638:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801163a:	4b17      	ldr	r3, [pc, #92]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 801163c:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011640:	4b15      	ldr	r3, [pc, #84]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011644:	f04f 30ff 	mov.w	r0, #4294967295
 8011648:	9002      	str	r0, [sp, #8]
 801164a:	2004      	movs	r0, #4
 801164c:	9001      	str	r0, [sp, #4]
 801164e:	9300      	str	r3, [sp, #0]
 8011650:	460b      	mov	r3, r1
 8011652:	2100      	movs	r1, #0
 8011654:	2000      	movs	r0, #0
 8011656:	f004 fbef 	bl	8015e38 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 801165a:	2302      	movs	r3, #2
 801165c:	e2f6      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 801165e:	7f3b      	ldrb	r3, [r7, #28]
 8011660:	3301      	adds	r3, #1
 8011662:	773b      	strb	r3, [r7, #28]
 8011664:	e01a      	b.n	801169c <nfcipTargetHandleRX+0x2c4>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv     */
 8011666:	7ebb      	ldrb	r3, [r7, #26]
 8011668:	f003 0304 	and.w	r3, r3, #4
 801166c:	2b00      	cmp	r3, #0
 801166e:	d015      	beq.n	801169c <nfcipTargetHandleRX+0x2c4>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011670:	4b09      	ldr	r3, [pc, #36]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011672:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011674:	4b08      	ldr	r3, [pc, #32]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 8011676:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 801167a:	4b07      	ldr	r3, [pc, #28]	; (8011698 <nfcipTargetHandleRX+0x2c0>)
 801167c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801167e:	f04f 30ff 	mov.w	r0, #4294967295
 8011682:	9002      	str	r0, [sp, #8]
 8011684:	2004      	movs	r0, #4
 8011686:	9001      	str	r0, [sp, #4]
 8011688:	9300      	str	r3, [sp, #0]
 801168a:	460b      	mov	r3, r1
 801168c:	2100      	movs	r1, #0
 801168e:	2000      	movs	r0, #0
 8011690:	f004 fbd2 	bl	8015e38 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore unexpected DID  */
 8011694:	2302      	movs	r3, #2
 8011696:	e2d9      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
 8011698:	2000376c 	.word	0x2000376c
        /* MISRA 15.7 - Empty else */
    }
                                  
        
    /*******************************************************************************/
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 801169c:	4b96      	ldr	r3, [pc, #600]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 801169e:	791b      	ldrb	r3, [r3, #4]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d027      	beq.n	80116f4 <nfcipTargetHandleRX+0x31c>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 80116a4:	4b94      	ldr	r3, [pc, #592]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 80116a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80116a8:	7f7b      	ldrb	r3, [r7, #29]
 80116aa:	1c59      	adds	r1, r3, #1
 80116ac:	7779      	strb	r1, [r7, #29]
 80116ae:	4413      	add	r3, r2
 80116b0:	781a      	ldrb	r2, [r3, #0]
 80116b2:	4b91      	ldr	r3, [pc, #580]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 80116b4:	78db      	ldrb	r3, [r3, #3]
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d104      	bne.n	80116c4 <nfcipTargetHandleRX+0x2ec>
 80116ba:	7ebb      	ldrb	r3, [r7, #26]
 80116bc:	f003 0304 	and.w	r3, r3, #4
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d113      	bne.n	80116ec <nfcipTargetHandleRX+0x314>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80116c4:	4b8c      	ldr	r3, [pc, #560]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 80116c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80116c8:	4b8b      	ldr	r3, [pc, #556]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 80116ca:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 80116ce:	4b8a      	ldr	r3, [pc, #552]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 80116d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116d2:	f04f 30ff 	mov.w	r0, #4294967295
 80116d6:	9002      	str	r0, [sp, #8]
 80116d8:	2004      	movs	r0, #4
 80116da:	9001      	str	r0, [sp, #4]
 80116dc:	9300      	str	r3, [sp, #0]
 80116de:	460b      	mov	r3, r1
 80116e0:	2100      	movs	r1, #0
 80116e2:	2000      	movs	r0, #0
 80116e4:	f004 fba8 	bl	8015e38 <rfalTransceiveBlockingTx>
            return ERR_BUSY;                            /* ERR_PROTO - Ignore bad/missing DID  */
 80116e8:	2302      	movs	r3, #2
 80116ea:	e2af      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 80116ec:	7f3b      	ldrb	r3, [r7, #28]
 80116ee:	3301      	adds	r3, #1
 80116f0:	773b      	strb	r3, [r7, #28]
 80116f2:	e018      	b.n	8011726 <nfcipTargetHandleRX+0x34e>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 80116f4:	7ebb      	ldrb	r3, [r7, #26]
 80116f6:	f003 0308 	and.w	r3, r3, #8
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d013      	beq.n	8011726 <nfcipTargetHandleRX+0x34e>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80116fe:	4b7e      	ldr	r3, [pc, #504]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 8011700:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011702:	4b7d      	ldr	r3, [pc, #500]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 8011704:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011708:	4b7b      	ldr	r3, [pc, #492]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 801170a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801170c:	f04f 30ff 	mov.w	r0, #4294967295
 8011710:	9002      	str	r0, [sp, #8]
 8011712:	2004      	movs	r0, #4
 8011714:	9001      	str	r0, [sp, #4]
 8011716:	9300      	str	r3, [sp, #0]
 8011718:	460b      	mov	r3, r1
 801171a:	2100      	movs	r1, #0
 801171c:	2000      	movs	r0, #0
 801171e:	f004 fb8b 	bl	8015e38 <rfalTransceiveBlockingTx>
        return ERR_BUSY;                                /* ERR_PROTO - Ignore unexpected NAD  */
 8011722:	2302      	movs	r3, #2
 8011724:	e292      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
    
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 8011726:	7ebb      	ldrb	r3, [r7, #26]
 8011728:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801172c:	2b40      	cmp	r3, #64	; 0x40
 801172e:	f040 80c5 	bne.w	80118bc <nfcipTargetHandleRX+0x4e4>
    {
        nfcipLogD( " NFCIP(T) Rcvd R-PDU  \r\n" );
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 8011732:	7ebb      	ldrb	r3, [r7, #26]
 8011734:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011738:	2b40      	cmp	r3, #64	; 0x40
 801173a:	f040 8083 	bne.w	8011844 <nfcipTargetHandleRX+0x46c>
 801173e:	7ebb      	ldrb	r3, [r7, #26]
 8011740:	f003 0310 	and.w	r3, r3, #16
 8011744:	2b00      	cmp	r3, #0
 8011746:	d17d      	bne.n	8011844 <nfcipTargetHandleRX+0x46c>
        {
            nfcipLogI( " NFCIP(T) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 8011748:	4b6b      	ldr	r3, [pc, #428]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 801174a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801174e:	461a      	mov	r2, r3
 8011750:	7ebb      	ldrb	r3, [r7, #26]
 8011752:	f003 0303 	and.w	r3, r3, #3
 8011756:	429a      	cmp	r2, r3
 8011758:	d149      	bne.n	80117ee <nfcipTargetHandleRX+0x416>
            {
                /* R-ACK while not performing chaining -> Protocol error */
                if( !gNfcip.isTxChaining )
 801175a:	4b67      	ldr	r3, [pc, #412]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 801175c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8011760:	f083 0301 	eor.w	r3, r3, #1
 8011764:	b2db      	uxtb	r3, r3
 8011766:	2b00      	cmp	r3, #0
 8011768:	d013      	beq.n	8011792 <nfcipTargetHandleRX+0x3ba>
                {
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 801176a:	4b63      	ldr	r3, [pc, #396]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 801176c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801176e:	4b62      	ldr	r3, [pc, #392]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 8011770:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011774:	4b60      	ldr	r3, [pc, #384]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 8011776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011778:	f04f 30ff 	mov.w	r0, #4294967295
 801177c:	9002      	str	r0, [sp, #8]
 801177e:	2004      	movs	r0, #4
 8011780:	9001      	str	r0, [sp, #4]
 8011782:	9300      	str	r3, [sp, #0]
 8011784:	460b      	mov	r3, r1
 8011786:	2100      	movs	r1, #0
 8011788:	2000      	movs	r0, #0
 801178a:	f004 fb55 	bl	8015e38 <rfalTransceiveBlockingTx>
                    return ERR_BUSY;                    /* ERR_PROTO - Ignore unexpected ACK  */
 801178e:	2302      	movs	r3, #2
 8011790:	e25c      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
                }
                
                /* This block has been transmitted and acknowledged, perform RTOX until next data is provided  */
                
                /* Digital 1.1  16.12.4.7 - If ACK rcvd continue with chaining or an RTOX */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 8011792:	4b59      	ldr	r3, [pc, #356]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 8011794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011798:	f003 030f 	and.w	r3, r3, #15
 801179c:	330c      	adds	r3, #12
 801179e:	2201      	movs	r2, #1
 80117a0:	fa02 f303 	lsl.w	r3, r2, r3
 80117a4:	4a55      	ldr	r2, [pc, #340]	; (80118fc <nfcipTargetHandleRX+0x524>)
 80117a6:	fba2 2303 	umull	r2, r3, r2, r3
 80117aa:	0b1b      	lsrs	r3, r3, #12
 80117ac:	b29a      	uxth	r2, r3
 80117ae:	4b52      	ldr	r3, [pc, #328]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 80117b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80117b4:	f003 030f 	and.w	r3, r3, #15
 80117b8:	330c      	adds	r3, #12
 80117ba:	2101      	movs	r1, #1
 80117bc:	fa01 f303 	lsl.w	r3, r1, r3
 80117c0:	494e      	ldr	r1, [pc, #312]	; (80118fc <nfcipTargetHandleRX+0x524>)
 80117c2:	fba1 1303 	umull	r1, r3, r1, r3
 80117c6:	0b1b      	lsrs	r3, r3, #12
 80117c8:	3301      	adds	r3, #1
 80117ca:	08db      	lsrs	r3, r3, #3
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	1ad3      	subs	r3, r2, r3
 80117d0:	b29b      	uxth	r3, r3
 80117d2:	3301      	adds	r3, #1
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7f2 fcde 	bl	8004198 <timerCalculateTimer>
 80117dc:	4603      	mov	r3, r0
 80117de:	4a46      	ldr	r2, [pc, #280]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 80117e0:	67d3      	str	r3, [r2, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 80117e2:	4b45      	ldr	r3, [pc, #276]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 80117e4:	220e      	movs	r2, #14
 80117e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_NONE;                        /* This block has been transmitted */
 80117ea:	2300      	movs	r3, #0
 80117ec:	e22e      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
            }
            
            /* Digital 1.0 14.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            else if( nfcip_PFBisSATN( gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) )    
 80117ee:	4b42      	ldr	r3, [pc, #264]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 80117f0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80117f4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80117f8:	2b80      	cmp	r3, #128	; 0x80
 80117fa:	d15e      	bne.n	80118ba <nfcipTargetHandleRX+0x4e2>
 80117fc:	4b3e      	ldr	r3, [pc, #248]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 80117fe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011802:	f003 0310 	and.w	r3, r3, #16
 8011806:	2b00      	cmp	r3, #0
 8011808:	d157      	bne.n	80118ba <nfcipTargetHandleRX+0x4e2>
 801180a:	4b3b      	ldr	r3, [pc, #236]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 801180c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011810:	3b01      	subs	r3, #1
 8011812:	b2da      	uxtb	r2, r3
 8011814:	7ebb      	ldrb	r3, [r7, #26]
 8011816:	4053      	eors	r3, r2
 8011818:	b2db      	uxtb	r3, r3
 801181a:	f003 0303 	and.w	r3, r3, #3
 801181e:	2b00      	cmp	r3, #0
 8011820:	d14b      	bne.n	80118ba <nfcipTargetHandleRX+0x4e2>
            {   
                nfcipLogI( " NFCIP(T) wrong PNI, last was ATN reTx  \r\n" );
                /* Spec says to leave current PNI as is, but will be Inc after Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec( gNfcip.pni );
 8011822:	4b35      	ldr	r3, [pc, #212]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 8011824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011828:	3b01      	subs	r3, #1
 801182a:	b2db      	uxtb	r3, r3
 801182c:	f003 0303 	and.w	r3, r3, #3
 8011830:	b2da      	uxtb	r2, r3
 8011832:	4b31      	ldr	r3, [pc, #196]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 8011834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8011838:	4b2f      	ldr	r3, [pc, #188]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 801183a:	220f      	movs	r2, #15
 801183c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_BUSY;
 8011840:	2302      	movs	r3, #2
 8011842:	e203      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
        }
        /*******************************************************************************/
        /* R NACK                                                                      */
        /*******************************************************************************/
        /* ISO 18092 12.6.1.3.3 When rcv NACK if PNI = prev PNI sent ->  reTx          */
        else if( nfcip_PFBisRNACK( rxPFB ) && (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB ) ) )
 8011844:	7ebb      	ldrb	r3, [r7, #26]
 8011846:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801184a:	2b40      	cmp	r3, #64	; 0x40
 801184c:	d121      	bne.n	8011892 <nfcipTargetHandleRX+0x4ba>
 801184e:	7ebb      	ldrb	r3, [r7, #26]
 8011850:	f003 0310 	and.w	r3, r3, #16
 8011854:	2b00      	cmp	r3, #0
 8011856:	d01c      	beq.n	8011892 <nfcipTargetHandleRX+0x4ba>
 8011858:	4b27      	ldr	r3, [pc, #156]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 801185a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801185e:	3b01      	subs	r3, #1
 8011860:	b2da      	uxtb	r2, r3
 8011862:	7ebb      	ldrb	r3, [r7, #26]
 8011864:	4053      	eors	r3, r2
 8011866:	b2db      	uxtb	r3, r3
 8011868:	f003 0303 	and.w	r3, r3, #3
 801186c:	2b00      	cmp	r3, #0
 801186e:	d110      	bne.n	8011892 <nfcipTargetHandleRX+0x4ba>
        {
            nfcipLogI( " NFCIP(T) Rcvd NACK  \r\n" );
            
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 8011870:	4b21      	ldr	r3, [pc, #132]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 8011872:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011876:	3b01      	subs	r3, #1
 8011878:	b2db      	uxtb	r3, r3
 801187a:	f003 0303 	and.w	r3, r3, #3
 801187e:	b2da      	uxtb	r2, r3
 8011880:	4b1d      	ldr	r3, [pc, #116]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 8011882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8011886:	4b1c      	ldr	r3, [pc, #112]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 8011888:	220f      	movs	r2, #15
 801188a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 801188e:	2302      	movs	r3, #2
 8011890:	e1dc      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
        }
        else
        {        
            nfcipLogI( " NFCIP(T) Unexpected R-PDU \r\n" );
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011892:	4b19      	ldr	r3, [pc, #100]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 8011894:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011896:	4b18      	ldr	r3, [pc, #96]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 8011898:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 801189c:	4b16      	ldr	r3, [pc, #88]	; (80118f8 <nfcipTargetHandleRX+0x520>)
 801189e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118a0:	f04f 30ff 	mov.w	r0, #4294967295
 80118a4:	9002      	str	r0, [sp, #8]
 80118a6:	2004      	movs	r0, #4
 80118a8:	9001      	str	r0, [sp, #4]
 80118aa:	9300      	str	r3, [sp, #0]
 80118ac:	460b      	mov	r3, r1
 80118ae:	2100      	movs	r1, #0
 80118b0:	2000      	movs	r0, #0
 80118b2:	f004 fac1 	bl	8015e38 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected R-PDU  */
 80118b6:	2302      	movs	r3, #2
 80118b8:	e1c8      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 80118ba:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )
 80118bc:	7ebb      	ldrb	r3, [r7, #26]
 80118be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80118c2:	2b80      	cmp	r3, #128	; 0x80
 80118c4:	f040 80ac 	bne.w	8011a20 <nfcipTargetHandleRX+0x648>
        
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        /* ISO 18092 12.6.3 Attention                                                  */
        if( nfcip_PFBisSATN( rxPFB ) )                         /*    If is a S-ATN     */
 80118c8:	7ebb      	ldrb	r3, [r7, #26]
 80118ca:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80118ce:	2b80      	cmp	r3, #128	; 0x80
 80118d0:	d116      	bne.n	8011900 <nfcipTargetHandleRX+0x528>
 80118d2:	7ebb      	ldrb	r3, [r7, #26]
 80118d4:	f003 0310 	and.w	r3, r3, #16
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d111      	bne.n	8011900 <nfcipTargetHandleRX+0x528>
        {            
            nfcipLogI( " NFCIP(T) Rcvd ATN  curPNI: %d \r\n", gNfcip.pni );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 80118dc:	2100      	movs	r1, #0
 80118de:	2080      	movs	r0, #128	; 0x80
 80118e0:	f7ff fa2e 	bl	8010d40 <nfcipDEPControlMsg>
 80118e4:	4603      	mov	r3, r0
 80118e6:	83fb      	strh	r3, [r7, #30]
 80118e8:	8bfb      	ldrh	r3, [r7, #30]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d001      	beq.n	80118f2 <nfcipTargetHandleRX+0x51a>
 80118ee:	8bfb      	ldrh	r3, [r7, #30]
 80118f0:	e1ac      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
            return ERR_BUSY;
 80118f2:	2302      	movs	r3, #2
 80118f4:	e1aa      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
 80118f6:	bf00      	nop
 80118f8:	2000376c 	.word	0x2000376c
 80118fc:	4d542005 	.word	0x4d542005
        }
        
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 8011900:	7ebb      	ldrb	r3, [r7, #26]
 8011902:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011906:	2b80      	cmp	r3, #128	; 0x80
 8011908:	d175      	bne.n	80119f6 <nfcipTargetHandleRX+0x61e>
 801190a:	7ebb      	ldrb	r3, [r7, #26]
 801190c:	f003 0310 	and.w	r3, r3, #16
 8011910:	2b00      	cmp	r3, #0
 8011912:	d070      	beq.n	80119f6 <nfcipTargetHandleRX+0x61e>
        {
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 8011914:	4bab      	ldr	r3, [pc, #684]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011916:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801191a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801191e:	2b80      	cmp	r3, #128	; 0x80
 8011920:	d17d      	bne.n	8011a1e <nfcipTargetHandleRX+0x646>
 8011922:	4ba8      	ldr	r3, [pc, #672]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011924:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8011928:	f003 0310 	and.w	r3, r3, #16
 801192c:	2b00      	cmp	r3, #0
 801192e:	d076      	beq.n	8011a1e <nfcipTargetHandleRX+0x646>
            {
                nfcipLogI( " NFCIP(T) Rcvd TO  \r\n" );
                
                /* Digital 1.1  16.8.4.6  RTOX value in RES different that in REQ -> Protocol Error */
                if( gNfcip.lastRTOX != gNfcip.rxBuf[rxMsgIt++] )
 8011930:	4ba4      	ldr	r3, [pc, #656]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011932:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8011936:	4ba3      	ldr	r3, [pc, #652]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011938:	6e59      	ldr	r1, [r3, #100]	; 0x64
 801193a:	7f7b      	ldrb	r3, [r7, #29]
 801193c:	1c58      	adds	r0, r3, #1
 801193e:	7778      	strb	r0, [r7, #29]
 8011940:	440b      	add	r3, r1
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	429a      	cmp	r2, r3
 8011946:	d013      	beq.n	8011970 <nfcipTargetHandleRX+0x598>
                {
                    nfcipLogI( " NFCIP(T) Mismatched RTOX value \r\n" );
                    
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011948:	4b9e      	ldr	r3, [pc, #632]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 801194a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801194c:	4b9d      	ldr	r3, [pc, #628]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 801194e:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011952:	4b9c      	ldr	r3, [pc, #624]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011956:	f04f 30ff 	mov.w	r0, #4294967295
 801195a:	9002      	str	r0, [sp, #8]
 801195c:	2004      	movs	r0, #4
 801195e:	9001      	str	r0, [sp, #4]
 8011960:	9300      	str	r3, [sp, #0]
 8011962:	460b      	mov	r3, r1
 8011964:	2100      	movs	r1, #0
 8011966:	2000      	movs	r0, #0
 8011968:	f004 fa66 	bl	8015e38 <rfalTransceiveBlockingTx>
                    return ERR_BUSY; /* ERR_PROTO - Ignore unexpected RTOX value  */
 801196c:	2302      	movs	r3, #2
 801196e:	e16d      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
                }
                
                /* Clear waiting for RTOX Ack Flag */
                gNfcip.isWait4RTOX = false;
 8011970:	4b94      	ldr	r3, [pc, #592]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011972:	2200      	movs	r2, #0
 8011974:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                
                /* Check if a Tx is already pending */
                if( gNfcip.isTxPending )
 8011978:	4b92      	ldr	r3, [pc, #584]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 801197a:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 801197e:	2b00      	cmp	r3, #0
 8011980:	d005      	beq.n	801198e <nfcipTargetHandleRX+0x5b6>
                {
                    nfcipLogW( " NFCIP(T) Tx pending, go immediately to TX \r\n" );
                    
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8011982:	4b90      	ldr	r3, [pc, #576]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011984:	220f      	movs	r2, #15
 8011986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 801198a:	2302      	movs	r3, #2
 801198c:	e15e      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
                }
                
                /* Start RTOX timer and change to check state  */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 801198e:	4b8d      	ldr	r3, [pc, #564]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011990:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011994:	461a      	mov	r2, r3
 8011996:	4b8b      	ldr	r3, [pc, #556]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801199c:	f003 030f 	and.w	r3, r3, #15
 80119a0:	330c      	adds	r3, #12
 80119a2:	fa02 f303 	lsl.w	r3, r2, r3
 80119a6:	4a88      	ldr	r2, [pc, #544]	; (8011bc8 <nfcipTargetHandleRX+0x7f0>)
 80119a8:	fba2 2303 	umull	r2, r3, r2, r3
 80119ac:	0b1b      	lsrs	r3, r3, #12
 80119ae:	b29a      	uxth	r2, r3
 80119b0:	4b84      	ldr	r3, [pc, #528]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 80119b2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80119b6:	4619      	mov	r1, r3
 80119b8:	4b82      	ldr	r3, [pc, #520]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 80119ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80119be:	f003 030f 	and.w	r3, r3, #15
 80119c2:	330c      	adds	r3, #12
 80119c4:	fa01 f303 	lsl.w	r3, r1, r3
 80119c8:	497f      	ldr	r1, [pc, #508]	; (8011bc8 <nfcipTargetHandleRX+0x7f0>)
 80119ca:	fba1 1303 	umull	r1, r3, r1, r3
 80119ce:	0b1b      	lsrs	r3, r3, #12
 80119d0:	3301      	adds	r3, #1
 80119d2:	08db      	lsrs	r3, r3, #3
 80119d4:	b29b      	uxth	r3, r3
 80119d6:	1ad3      	subs	r3, r2, r3
 80119d8:	b29b      	uxth	r3, r3
 80119da:	3301      	adds	r3, #1
 80119dc:	b29b      	uxth	r3, r3
 80119de:	4618      	mov	r0, r3
 80119e0:	f7f2 fbda 	bl	8004198 <timerCalculateTimer>
 80119e4:	4603      	mov	r3, r0
 80119e6:	4a77      	ldr	r2, [pc, #476]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 80119e8:	67d3      	str	r3, [r2, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 80119ea:	4b76      	ldr	r3, [pc, #472]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 80119ec:	220e      	movs	r2, #14
 80119ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_BUSY;
 80119f2:	2302      	movs	r3, #2
 80119f4:	e12a      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
        else
        {
            /* Unexpected S-PDU */
            nfcipLogI( " NFCIP(T) Unexpected S-PDU \r\n" );         /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80119f6:	4b73      	ldr	r3, [pc, #460]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 80119f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80119fa:	4b72      	ldr	r3, [pc, #456]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 80119fc:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011a00:	4b70      	ldr	r3, [pc, #448]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a04:	f04f 30ff 	mov.w	r0, #4294967295
 8011a08:	9002      	str	r0, [sp, #8]
 8011a0a:	2004      	movs	r0, #4
 8011a0c:	9001      	str	r0, [sp, #4]
 8011a0e:	9300      	str	r3, [sp, #0]
 8011a10:	460b      	mov	r3, r1
 8011a12:	2100      	movs	r1, #0
 8011a14:	2000      	movs	r0, #0
 8011a16:	f004 fa0f 	bl	8015e38 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected S-PDU  */
 8011a1a:	2302      	movs	r3, #2
 8011a1c:	e116      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 8011a1e:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 8011a20:	7ebb      	ldrb	r3, [r7, #26]
 8011a22:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	f040 810f 	bne.w	8011c4a <nfcipTargetHandleRX+0x872>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 8011a2c:	4b65      	ldr	r3, [pc, #404]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011a2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011a32:	461a      	mov	r2, r3
 8011a34:	7ebb      	ldrb	r3, [r7, #26]
 8011a36:	f003 0303 	and.w	r3, r3, #3
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d06e      	beq.n	8011b1c <nfcipTargetHandleRX+0x744>
        {
            nfcipLogI( " NFCIP(T) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni, nfcip_PBF_PNI( rxPFB ) );
            
            /* Digital 1.1 16.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            if( nfcip_PFBisSATN(gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) ) 
 8011a3e:	4b61      	ldr	r3, [pc, #388]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011a40:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011a44:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011a48:	2b80      	cmp	r3, #128	; 0x80
 8011a4a:	d153      	bne.n	8011af4 <nfcipTargetHandleRX+0x71c>
 8011a4c:	4b5d      	ldr	r3, [pc, #372]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011a4e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011a52:	f003 0310 	and.w	r3, r3, #16
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d14c      	bne.n	8011af4 <nfcipTargetHandleRX+0x71c>
 8011a5a:	4b5a      	ldr	r3, [pc, #360]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011a60:	3b01      	subs	r3, #1
 8011a62:	b2da      	uxtb	r2, r3
 8011a64:	7ebb      	ldrb	r3, [r7, #26]
 8011a66:	4053      	eors	r3, r2
 8011a68:	b2db      	uxtb	r3, r3
 8011a6a:	f003 0303 	and.w	r3, r3, #3
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d140      	bne.n	8011af4 <nfcipTargetHandleRX+0x71c>
            {
                /* Spec says to leave current PNI as is, but will be Inc after Data Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec(gNfcip.pni);
 8011a72:	4b54      	ldr	r3, [pc, #336]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011a78:	3b01      	subs	r3, #1
 8011a7a:	b2db      	uxtb	r3, r3
 8011a7c:	f003 0303 	and.w	r3, r3, #3
 8011a80:	b2da      	uxtb	r2, r3
 8011a82:	4b50      	ldr	r3, [pc, #320]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                if( nfcip_PFBisIMI( rxPFB ) )
 8011a88:	7ebb      	ldrb	r3, [r7, #26]
 8011a8a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d12a      	bne.n	8011ae8 <nfcipTargetHandleRX+0x710>
 8011a92:	7ebb      	ldrb	r3, [r7, #26]
 8011a94:	f003 0310 	and.w	r3, r3, #16
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d025      	beq.n	8011ae8 <nfcipTargetHandleRX+0x710>
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before && chaining -> send ACK  \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8011a9c:	4b49      	ldr	r3, [pc, #292]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011aa2:	f003 0303 	and.w	r3, r3, #3
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aac:	b2d8      	uxtb	r0, r3
 8011aae:	4b45      	ldr	r3, [pc, #276]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011ab0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011ab2:	7f7b      	ldrb	r3, [r7, #29]
 8011ab4:	1c59      	adds	r1, r3, #1
 8011ab6:	7779      	strb	r1, [r7, #29]
 8011ab8:	4413      	add	r3, r2
 8011aba:	781b      	ldrb	r3, [r3, #0]
 8011abc:	4619      	mov	r1, r3
 8011abe:	f7ff f93f 	bl	8010d40 <nfcipDEPControlMsg>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	83fb      	strh	r3, [r7, #30]
 8011ac6:	8bfb      	ldrh	r3, [r7, #30]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d001      	beq.n	8011ad0 <nfcipTargetHandleRX+0x6f8>
 8011acc:	8bfb      	ldrh	r3, [r7, #30]
 8011ace:	e0bd      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
                    
                    /* Digital 1.1 16.12.3.4 (...) leave the current PNI unchanged afterwards */
                    gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8011ad0:	4b3c      	ldr	r3, [pc, #240]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011ad2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011ad6:	3301      	adds	r3, #1
 8011ad8:	b2db      	uxtb	r3, r3
 8011ada:	f003 0303 	and.w	r3, r3, #3
 8011ade:	b2da      	uxtb	r2, r3
 8011ae0:	4b38      	ldr	r3, [pc, #224]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8011ae6:	e003      	b.n	8011af0 <nfcipTargetHandleRX+0x718>
                }
                else
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before -> reTx last I-PDU  \r\n" );
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8011ae8:	4b36      	ldr	r3, [pc, #216]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011aea:	220f      	movs	r2, #15
 8011aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 8011af0:	2302      	movs	r3, #2
 8011af2:	e0ab      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
            }
                        
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011af4:	4b33      	ldr	r3, [pc, #204]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011af6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011af8:	4b32      	ldr	r3, [pc, #200]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011afa:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011afe:	4b31      	ldr	r3, [pc, #196]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b02:	f04f 30ff 	mov.w	r0, #4294967295
 8011b06:	9002      	str	r0, [sp, #8]
 8011b08:	2004      	movs	r0, #4
 8011b0a:	9001      	str	r0, [sp, #4]
 8011b0c:	9300      	str	r3, [sp, #0]
 8011b0e:	460b      	mov	r3, r1
 8011b10:	2100      	movs	r1, #0
 8011b12:	2000      	movs	r0, #0
 8011b14:	f004 f990 	bl	8015e38 <rfalTransceiveBlockingTx>
            return ERR_BUSY;            /* ERR_PROTO - Ignore bad PNI value  */
 8011b18:	2302      	movs	r3, #2
 8011b1a:	e097      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
        nfcipLogD( " NFCIP(T) Rcvd IPDU OK PNI: %d  \r\n", gNfcip.pni );
        
        /*******************************************************************************/
        /* Successful data exchange                                                    */
        /*******************************************************************************/
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 8011b1c:	7efb      	ldrb	r3, [r7, #27]
 8011b1e:	b29a      	uxth	r2, r3
 8011b20:	7f3b      	ldrb	r3, [r7, #28]
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	1ad3      	subs	r3, r2, r3
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	3b04      	subs	r3, #4
 8011b2a:	b29a      	uxth	r2, r3
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	801a      	strh	r2, [r3, #0]
        
        nfcipClearCounters();
 8011b30:	f7ff f966 	bl	8010e00 <nfcipClearCounters>

        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 8011b34:	4b23      	ldr	r3, [pc, #140]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011b36:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	7f3b      	ldrb	r3, [r7, #28]
 8011b3e:	3304      	adds	r3, #4
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d013      	beq.n	8011b6c <nfcipTargetHandleRX+0x794>
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	881b      	ldrh	r3, [r3, #0]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d00f      	beq.n	8011b6c <nfcipTargetHandleRX+0x794>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 8011b4c:	4b1d      	ldr	r3, [pc, #116]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011b50:	4a1c      	ldr	r2, [pc, #112]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011b52:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 8011b56:	1898      	adds	r0, r3, r2
 8011b58:	4b1a      	ldr	r3, [pc, #104]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011b5a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011b5c:	7f3b      	ldrb	r3, [r7, #28]
 8011b5e:	3304      	adds	r3, #4
 8011b60:	18d1      	adds	r1, r2, r3
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	881b      	ldrh	r3, [r3, #0]
 8011b66:	461a      	mov	r2, r3
 8011b68:	f007 f8e0 	bl	8018d2c <memmove>
        
        
        /*******************************************************************************/
        /* Check if Initiator is indicating chaining MI                                */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 8011b6c:	7ebb      	ldrb	r3, [r7, #26]
 8011b6e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d137      	bne.n	8011be6 <nfcipTargetHandleRX+0x80e>
 8011b76:	7ebb      	ldrb	r3, [r7, #26]
 8011b78:	f003 0310 	and.w	r3, r3, #16
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d032      	beq.n	8011be6 <nfcipTargetHandleRX+0x80e>
        {
            gNfcip.isRxChaining = true;
 8011b80:	4b10      	ldr	r3, [pc, #64]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011b82:	2201      	movs	r2, #1
 8011b84:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2201      	movs	r2, #1
 8011b8c:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(T) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8011b8e:	4b0d      	ldr	r3, [pc, #52]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011b90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011b94:	f003 0303 	and.w	r3, r3, #3
 8011b98:	b2db      	uxtb	r3, r3
 8011b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b9e:	b2d8      	uxtb	r0, r3
 8011ba0:	4b08      	ldr	r3, [pc, #32]	; (8011bc4 <nfcipTargetHandleRX+0x7ec>)
 8011ba2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011ba4:	7f7b      	ldrb	r3, [r7, #29]
 8011ba6:	1c59      	adds	r1, r3, #1
 8011ba8:	7779      	strb	r1, [r7, #29]
 8011baa:	4413      	add	r3, r2
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	4619      	mov	r1, r3
 8011bb0:	f7ff f8c6 	bl	8010d40 <nfcipDEPControlMsg>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	83fb      	strh	r3, [r7, #30]
 8011bb8:	8bfb      	ldrh	r3, [r7, #30]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d006      	beq.n	8011bcc <nfcipTargetHandleRX+0x7f4>
 8011bbe:	8bfb      	ldrh	r3, [r7, #30]
 8011bc0:	e044      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
 8011bc2:	bf00      	nop
 8011bc4:	2000376c 	.word	0x2000376c
 8011bc8:	4d542005 	.word	0x4d542005
            
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8011bcc:	4b21      	ldr	r3, [pc, #132]	; (8011c54 <nfcipTargetHandleRX+0x87c>)
 8011bce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011bd2:	3301      	adds	r3, #1
 8011bd4:	b2db      	uxtb	r3, r3
 8011bd6:	f003 0303 	and.w	r3, r3, #3
 8011bda:	b2da      	uxtb	r2, r3
 8011bdc:	4b1d      	ldr	r3, [pc, #116]	; (8011c54 <nfcipTargetHandleRX+0x87c>)
 8011bde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 8011be2:	230d      	movs	r3, #13
 8011be4:	e032      	b.n	8011c4c <nfcipTargetHandleRX+0x874>
            }
            
            /*******************************************************************************/
            /* Reception done, send to DH and start RTOX timer                             */
            /*******************************************************************************/
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 8011be6:	4b1b      	ldr	r3, [pc, #108]	; (8011c54 <nfcipTargetHandleRX+0x87c>)
 8011be8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011bec:	f003 030f 	and.w	r3, r3, #15
 8011bf0:	330c      	adds	r3, #12
 8011bf2:	2201      	movs	r2, #1
 8011bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8011bf8:	4a17      	ldr	r2, [pc, #92]	; (8011c58 <nfcipTargetHandleRX+0x880>)
 8011bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8011bfe:	0b1b      	lsrs	r3, r3, #12
 8011c00:	b29a      	uxth	r2, r3
 8011c02:	4b14      	ldr	r3, [pc, #80]	; (8011c54 <nfcipTargetHandleRX+0x87c>)
 8011c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c08:	f003 030f 	and.w	r3, r3, #15
 8011c0c:	330c      	adds	r3, #12
 8011c0e:	2101      	movs	r1, #1
 8011c10:	fa01 f303 	lsl.w	r3, r1, r3
 8011c14:	4910      	ldr	r1, [pc, #64]	; (8011c58 <nfcipTargetHandleRX+0x880>)
 8011c16:	fba1 1303 	umull	r1, r3, r1, r3
 8011c1a:	0b1b      	lsrs	r3, r3, #12
 8011c1c:	3301      	adds	r3, #1
 8011c1e:	08db      	lsrs	r3, r3, #3
 8011c20:	b29b      	uxth	r3, r3
 8011c22:	1ad3      	subs	r3, r2, r3
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	3301      	adds	r3, #1
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7f2 fab4 	bl	8004198 <timerCalculateTimer>
 8011c30:	4603      	mov	r3, r0
 8011c32:	4a08      	ldr	r2, [pc, #32]	; (8011c54 <nfcipTargetHandleRX+0x87c>)
 8011c34:	67d3      	str	r3, [r2, #124]	; 0x7c
            gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8011c36:	4b07      	ldr	r3, [pc, #28]	; (8011c54 <nfcipTargetHandleRX+0x87c>)
 8011c38:	220e      	movs	r2, #14
 8011c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            gNfcip.isRxChaining = false;
 8011c3e:	4b05      	ldr	r3, [pc, #20]	; (8011c54 <nfcipTargetHandleRX+0x87c>)
 8011c40:	2200      	movs	r2, #0
 8011c42:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            ret = ERR_NONE;                            /* Data exchange done */
 8011c46:	2300      	movs	r3, #0
 8011c48:	83fb      	strh	r3, [r7, #30]
        }
    }
    return ret;
 8011c4a:	8bfb      	ldrh	r3, [r7, #30]
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3720      	adds	r7, #32
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}
 8011c54:	2000376c 	.word	0x2000376c
 8011c58:	4d542005 	.word	0x4d542005

08011c5c <nfcipTx>:


/*******************************************************************************/
static ReturnCode nfcipTx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint8_t *paylBuf, uint16_t paylLen, uint8_t pfbData, uint32_t fwt )
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b088      	sub	sp, #32
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	60b9      	str	r1, [r7, #8]
 8011c64:	607a      	str	r2, [r7, #4]
 8011c66:	461a      	mov	r2, r3
 8011c68:	4603      	mov	r3, r0
 8011c6a:	73fb      	strb	r3, [r7, #15]
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	81bb      	strh	r3, [r7, #12]
    uint8_t *txBlock;
    uint8_t *payloadBuf;
    uint8_t  pfb;
    
   
    if( txBuf == NULL )
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d101      	bne.n	8011c7a <nfcipTx+0x1e>
    {
        return ERR_PARAM;
 8011c76:	2307      	movs	r3, #7
 8011c78:	e177      	b.n	8011f6a <nfcipTx+0x30e>
    }
    

    payloadBuf = paylBuf;                                               /* MISRA 17.8: Use intermediate variable */
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	617b      	str	r3, [r7, #20]
    
    if( (paylLen == 0U) || (payloadBuf == NULL) )
 8011c7e:	89bb      	ldrh	r3, [r7, #12]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d002      	beq.n	8011c8a <nfcipTx+0x2e>
 8011c84:	697b      	ldr	r3, [r7, #20]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d102      	bne.n	8011c90 <nfcipTx+0x34>
    {
        payloadBuf = (uint8_t*) &txBuf[RFAL_NFCDEP_DEPREQ_HEADER_LEN];  /* If not a DEP (no Data) ensure enough space for header */
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	3305      	adds	r3, #5
 8011c8e:	617b      	str	r3, [r7, #20]
    }
    
    
    txBufIt  = 0;
 8011c90:	2300      	movs	r3, #0
 8011c92:	83fb      	strh	r3, [r7, #30]
    pfb      = pfbData;                                                 /* MISRA 17.8: Use intermediate variable */
 8011c94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011c98:	74fb      	strb	r3, [r7, #19]
    
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	61bb      	str	r3, [r7, #24]
        
    
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 8011c9e:	4aa0      	ldr	r2, [pc, #640]	; (8011f20 <nfcipTx+0x2c4>)
 8011ca0:	7bfb      	ldrb	r3, [r7, #15]
 8011ca2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
    gNfcip.lastPFB = NFCIP_PFB_INVALID;                                 /* Reset last pfb sent    */
 8011ca6:	4b9e      	ldr	r3, [pc, #632]	; (8011f20 <nfcipTx+0x2c4>)
 8011ca8:	22ff      	movs	r2, #255	; 0xff
 8011caa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    
    /*******************************************************************************/
    /* Compute outgoing NFCIP message                                              */
    /*******************************************************************************/
    switch( cmd )
 8011cae:	7bfb      	ldrb	r3, [r7, #15]
 8011cb0:	2b0b      	cmp	r3, #11
 8011cb2:	f200 8120 	bhi.w	8011ef6 <nfcipTx+0x29a>
 8011cb6:	a201      	add	r2, pc, #4	; (adr r2, 8011cbc <nfcipTx+0x60>)
 8011cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cbc:	08011ced 	.word	0x08011ced
 8011cc0:	08011ced 	.word	0x08011ced
 8011cc4:	08011de1 	.word	0x08011de1
 8011cc8:	08011e17 	.word	0x08011e17
 8011ccc:	08011e17 	.word	0x08011e17
 8011cd0:	08011e17 	.word	0x08011e17
 8011cd4:	08011e3f 	.word	0x08011e3f
 8011cd8:	08011e3f 	.word	0x08011e3f
 8011cdc:	08011e27 	.word	0x08011e27
 8011ce0:	08011e27 	.word	0x08011e27
 8011ce4:	08011e27 	.word	0x08011e27
 8011ce8:	08011e27 	.word	0x08011e27
    {
        /*******************************************************************************/
        case NFCIP_CMD_ATR_RES:
        case NFCIP_CMD_ATR_REQ:
            
            rfalNfcDepSetNFCID( payloadBuf, gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );    /* NFCID */
 8011cec:	220a      	movs	r2, #10
 8011cee:	2100      	movs	r1, #0
 8011cf0:	6978      	ldr	r0, [r7, #20]
 8011cf2:	f007 f835 	bl	8018d60 <memset>
 8011cf6:	4b8a      	ldr	r3, [pc, #552]	; (8011f20 <nfcipTx+0x2c4>)
 8011cf8:	7c5b      	ldrb	r3, [r3, #17]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d006      	beq.n	8011d0c <nfcipTx+0xb0>
 8011cfe:	4b88      	ldr	r3, [pc, #544]	; (8011f20 <nfcipTx+0x2c4>)
 8011d00:	7c5b      	ldrb	r3, [r3, #17]
 8011d02:	461a      	mov	r2, r3
 8011d04:	4987      	ldr	r1, [pc, #540]	; (8011f24 <nfcipTx+0x2c8>)
 8011d06:	6978      	ldr	r0, [r7, #20]
 8011d08:	f007 f802 	bl	8018d10 <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 8011d0c:	8bfb      	ldrh	r3, [r7, #30]
 8011d0e:	330a      	adds	r3, #10
 8011d10:	83fb      	strh	r3, [r7, #30]
            
            payloadBuf[txBufIt++] = gNfcip.cfg.did;                                     /* DID   */
 8011d12:	8bfb      	ldrh	r3, [r7, #30]
 8011d14:	1c5a      	adds	r2, r3, #1
 8011d16:	83fa      	strh	r2, [r7, #30]
 8011d18:	461a      	mov	r2, r3
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	4413      	add	r3, r2
 8011d1e:	4a80      	ldr	r2, [pc, #512]	; (8011f20 <nfcipTx+0x2c4>)
 8011d20:	78d2      	ldrb	r2, [r2, #3]
 8011d22:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.bs;                                      /* BS    */
 8011d24:	8bfb      	ldrh	r3, [r7, #30]
 8011d26:	1c5a      	adds	r2, r3, #1
 8011d28:	83fa      	strh	r2, [r7, #30]
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	4413      	add	r3, r2
 8011d30:	4a7b      	ldr	r2, [pc, #492]	; (8011f20 <nfcipTx+0x2c4>)
 8011d32:	7952      	ldrb	r2, [r2, #5]
 8011d34:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.br;                                      /* BR    */
 8011d36:	8bfb      	ldrh	r3, [r7, #30]
 8011d38:	1c5a      	adds	r2, r3, #1
 8011d3a:	83fa      	strh	r2, [r7, #30]
 8011d3c:	461a      	mov	r2, r3
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	4413      	add	r3, r2
 8011d42:	4a77      	ldr	r2, [pc, #476]	; (8011f20 <nfcipTx+0x2c4>)
 8011d44:	7992      	ldrb	r2, [r2, #6]
 8011d46:	701a      	strb	r2, [r3, #0]
            
            if( cmd == NFCIP_CMD_ATR_RES )
 8011d48:	7bfb      	ldrb	r3, [r7, #15]
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	d109      	bne.n	8011d62 <nfcipTx+0x106>
            {
                payloadBuf[txBufIt++] = gNfcip.cfg.to;                                  /* ATR_RES[ TO ] */
 8011d4e:	8bfb      	ldrh	r3, [r7, #30]
 8011d50:	1c5a      	adds	r2, r3, #1
 8011d52:	83fa      	strh	r2, [r7, #30]
 8011d54:	461a      	mov	r2, r3
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	4413      	add	r3, r2
 8011d5a:	4a71      	ldr	r2, [pc, #452]	; (8011f20 <nfcipTx+0x2c4>)
 8011d5c:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8011d60:	701a      	strb	r2, [r3, #0]
            }
                                    
            if( gNfcip.cfg.gbLen > 0U)
 8011d62:	4b6f      	ldr	r3, [pc, #444]	; (8011f20 <nfcipTx+0x2c4>)
 8011d64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d023      	beq.n	8011db4 <nfcipTx+0x158>
            {
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 8011d6c:	4b6c      	ldr	r3, [pc, #432]	; (8011f20 <nfcipTx+0x2c4>)
 8011d6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011d72:	011b      	lsls	r3, r3, #4
 8011d74:	b2db      	uxtb	r3, r3
 8011d76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011d7a:	b2da      	uxtb	r2, r3
 8011d7c:	8bfb      	ldrh	r3, [r7, #30]
 8011d7e:	1c59      	adds	r1, r3, #1
 8011d80:	83f9      	strh	r1, [r7, #30]
 8011d82:	4619      	mov	r1, r3
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	440b      	add	r3, r1
 8011d88:	f042 0202 	orr.w	r2, r2, #2
 8011d8c:	b2d2      	uxtb	r2, r2
 8011d8e:	701a      	strb	r2, [r3, #0]
                ST_MEMCPY( &payloadBuf[txBufIt], gNfcip.cfg.gb, gNfcip.cfg.gbLen );     /* set General Bytes */
 8011d90:	8bfb      	ldrh	r3, [r7, #30]
 8011d92:	697a      	ldr	r2, [r7, #20]
 8011d94:	4413      	add	r3, r2
 8011d96:	4a62      	ldr	r2, [pc, #392]	; (8011f20 <nfcipTx+0x2c4>)
 8011d98:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 8011d9c:	4962      	ldr	r1, [pc, #392]	; (8011f28 <nfcipTx+0x2cc>)
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f006 ffb6 	bl	8018d10 <memcpy>
                txBufIt += gNfcip.cfg.gbLen;
 8011da4:	4b5e      	ldr	r3, [pc, #376]	; (8011f20 <nfcipTx+0x2c4>)
 8011da6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011daa:	b29a      	uxth	r2, r3
 8011dac:	8bfb      	ldrh	r3, [r7, #30]
 8011dae:	4413      	add	r3, r2
 8011db0:	83fb      	strh	r3, [r7, #30]
 8011db2:	e00e      	b.n	8011dd2 <nfcipTx+0x176>
            }
            else
            {
                payloadBuf[txBufIt++] = rfalNfcDepLR2PP( gNfcip.cfg.lr );               /* PP without GB     */
 8011db4:	4b5a      	ldr	r3, [pc, #360]	; (8011f20 <nfcipTx+0x2c4>)
 8011db6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011dba:	011b      	lsls	r3, r3, #4
 8011dbc:	b2da      	uxtb	r2, r3
 8011dbe:	8bfb      	ldrh	r3, [r7, #30]
 8011dc0:	1c59      	adds	r1, r3, #1
 8011dc2:	83f9      	strh	r1, [r7, #30]
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	440b      	add	r3, r1
 8011dca:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8011dce:	b2d2      	uxtb	r2, r2
 8011dd0:	701a      	strb	r2, [r3, #0]
            }
            
            if( (txBufIt + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN) > RFAL_NFCDEP_ATRREQ_MAX_LEN )   /* Check max ATR length (ATR_REQ = ATR_RES)*/
 8011dd2:	8bfb      	ldrh	r3, [r7, #30]
 8011dd4:	3302      	adds	r3, #2
 8011dd6:	2b40      	cmp	r3, #64	; 0x40
 8011dd8:	f240 808f 	bls.w	8011efa <nfcipTx+0x29e>
            {
                return ERR_PARAM;
 8011ddc:	2307      	movs	r3, #7
 8011dde:	e0c4      	b.n	8011f6a <nfcipTx+0x30e>
            break;
            
        /*******************************************************************************/
        case NFCIP_CMD_WUP_REQ:                               /* ISO 18092 - 12.5.2.1 */
            
            rfalNfcDepSetNFCID( (payloadBuf), gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );   /* NFCID */
 8011de0:	220a      	movs	r2, #10
 8011de2:	2100      	movs	r1, #0
 8011de4:	6978      	ldr	r0, [r7, #20]
 8011de6:	f006 ffbb 	bl	8018d60 <memset>
 8011dea:	4b4d      	ldr	r3, [pc, #308]	; (8011f20 <nfcipTx+0x2c4>)
 8011dec:	7c5b      	ldrb	r3, [r3, #17]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d006      	beq.n	8011e00 <nfcipTx+0x1a4>
 8011df2:	4b4b      	ldr	r3, [pc, #300]	; (8011f20 <nfcipTx+0x2c4>)
 8011df4:	7c5b      	ldrb	r3, [r3, #17]
 8011df6:	461a      	mov	r2, r3
 8011df8:	494a      	ldr	r1, [pc, #296]	; (8011f24 <nfcipTx+0x2c8>)
 8011dfa:	6978      	ldr	r0, [r7, #20]
 8011dfc:	f006 ff88 	bl	8018d10 <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 8011e00:	8bfb      	ldrh	r3, [r7, #30]
 8011e02:	330a      	adds	r3, #10
 8011e04:	83fb      	strh	r3, [r7, #30]
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 8011e06:	69bb      	ldr	r3, [r7, #24]
 8011e08:	3b01      	subs	r3, #1
 8011e0a:	61bb      	str	r3, [r7, #24]
 8011e0c:	4b44      	ldr	r3, [pc, #272]	; (8011f20 <nfcipTx+0x2c4>)
 8011e0e:	78da      	ldrb	r2, [r3, #3]
 8011e10:	69bb      	ldr	r3, [r7, #24]
 8011e12:	701a      	strb	r2, [r3, #0]
            break;
 8011e14:	e076      	b.n	8011f04 <nfcipTx+0x2a8>
        /*******************************************************************************/
        case NFCIP_CMD_WUP_RES:                               /* ISO 18092 - 12.5.2.2 */
        case NFCIP_CMD_PSL_REQ:
        case NFCIP_CMD_PSL_RES:
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 8011e16:	69bb      	ldr	r3, [r7, #24]
 8011e18:	3b01      	subs	r3, #1
 8011e1a:	61bb      	str	r3, [r7, #24]
 8011e1c:	4b40      	ldr	r3, [pc, #256]	; (8011f20 <nfcipTx+0x2c4>)
 8011e1e:	78da      	ldrb	r2, [r3, #3]
 8011e20:	69bb      	ldr	r3, [r7, #24]
 8011e22:	701a      	strb	r2, [r3, #0]
            break;
 8011e24:	e06e      	b.n	8011f04 <nfcipTx+0x2a8>
        case NFCIP_CMD_RLS_RES:
        case NFCIP_CMD_DSL_REQ:
        case NFCIP_CMD_DSL_RES:
            
            /* Digital 1.0 - 14.8.1.1 & 14.9.1.1 & 14.10.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 8011e26:	4b3e      	ldr	r3, [pc, #248]	; (8011f20 <nfcipTx+0x2c4>)
 8011e28:	78db      	ldrb	r3, [r3, #3]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d067      	beq.n	8011efe <nfcipTx+0x2a2>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8011e2e:	69bb      	ldr	r3, [r7, #24]
 8011e30:	3b01      	subs	r3, #1
 8011e32:	61bb      	str	r3, [r7, #24]
 8011e34:	4b3a      	ldr	r3, [pc, #232]	; (8011f20 <nfcipTx+0x2c4>)
 8011e36:	78da      	ldrb	r2, [r3, #3]
 8011e38:	69bb      	ldr	r3, [r7, #24]
 8011e3a:	701a      	strb	r2, [r3, #0]
            }
            break;
 8011e3c:	e05f      	b.n	8011efe <nfcipTx+0x2a2>
        /*******************************************************************************/
        case NFCIP_CMD_DEP_REQ:
        case NFCIP_CMD_DEP_RES:
            
            /* Compute optional PFB bits */
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 8011e3e:	4b38      	ldr	r3, [pc, #224]	; (8011f20 <nfcipTx+0x2c4>)
 8011e40:	78db      	ldrb	r3, [r3, #3]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d003      	beq.n	8011e4e <nfcipTx+0x1f2>
 8011e46:	7cfb      	ldrb	r3, [r7, #19]
 8011e48:	f043 0304 	orr.w	r3, r3, #4
 8011e4c:	74fb      	strb	r3, [r7, #19]
            if (gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO)                {   pfb |= NFCIP_PFB_NAD_BIT;       }
 8011e4e:	4b34      	ldr	r3, [pc, #208]	; (8011f20 <nfcipTx+0x2c4>)
 8011e50:	791b      	ldrb	r3, [r3, #4]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d003      	beq.n	8011e5e <nfcipTx+0x202>
 8011e56:	7cfb      	ldrb	r3, [r7, #19]
 8011e58:	f043 0308 	orr.w	r3, r3, #8
 8011e5c:	74fb      	strb	r3, [r7, #19]
            if ((gNfcip.isTxChaining) && (nfcip_PFBisIPDU(pfb)) )    {   pfb |= NFCIP_PFB_MI_BIT;        }
 8011e5e:	4b30      	ldr	r3, [pc, #192]	; (8011f20 <nfcipTx+0x2c4>)
 8011e60:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d008      	beq.n	8011e7a <nfcipTx+0x21e>
 8011e68:	7cfb      	ldrb	r3, [r7, #19]
 8011e6a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d103      	bne.n	8011e7a <nfcipTx+0x21e>
 8011e72:	7cfb      	ldrb	r3, [r7, #19]
 8011e74:	f043 0310 	orr.w	r3, r3, #16
 8011e78:	74fb      	strb	r3, [r7, #19]
            
            /* Store PFB for future handling */
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 8011e7a:	4a29      	ldr	r2, [pc, #164]	; (8011f20 <nfcipTx+0x2c4>)
 8011e7c:	7cfb      	ldrb	r3, [r7, #19]
 8011e7e:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            
            if( !nfcip_PFBisSATN(pfb) )
 8011e82:	7cfb      	ldrb	r3, [r7, #19]
 8011e84:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011e88:	2b80      	cmp	r3, #128	; 0x80
 8011e8a:	d104      	bne.n	8011e96 <nfcipTx+0x23a>
 8011e8c:	7cfb      	ldrb	r3, [r7, #19]
 8011e8e:	f003 0310 	and.w	r3, r3, #16
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d003      	beq.n	8011e9e <nfcipTx+0x242>
            {
                gNfcip.lastPFBnATN   = pfb;                                              /* store last PFB different then ATN */
 8011e96:	4a22      	ldr	r2, [pc, #136]	; (8011f20 <nfcipTx+0x2c4>)
 8011e98:	7cfb      	ldrb	r3, [r7, #19]
 8011e9a:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            }
            
            
            /* Add NAD if it is to be supported */
            if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO )      
 8011e9e:	4b20      	ldr	r3, [pc, #128]	; (8011f20 <nfcipTx+0x2c4>)
 8011ea0:	791b      	ldrb	r3, [r3, #4]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d006      	beq.n	8011eb4 <nfcipTx+0x258>
            {
                *(--txBlock) = gNfcip.cfg.nad;                                           /* NAD   */
 8011ea6:	69bb      	ldr	r3, [r7, #24]
 8011ea8:	3b01      	subs	r3, #1
 8011eaa:	61bb      	str	r3, [r7, #24]
 8011eac:	4b1c      	ldr	r3, [pc, #112]	; (8011f20 <nfcipTx+0x2c4>)
 8011eae:	791a      	ldrb	r2, [r3, #4]
 8011eb0:	69bb      	ldr	r3, [r7, #24]
 8011eb2:	701a      	strb	r2, [r3, #0]
            }
            
            /* Digital 1.0 - 14.8.1.1 & 14.8.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 8011eb4:	4b1a      	ldr	r3, [pc, #104]	; (8011f20 <nfcipTx+0x2c4>)
 8011eb6:	78db      	ldrb	r3, [r3, #3]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d006      	beq.n	8011eca <nfcipTx+0x26e>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8011ebc:	69bb      	ldr	r3, [r7, #24]
 8011ebe:	3b01      	subs	r3, #1
 8011ec0:	61bb      	str	r3, [r7, #24]
 8011ec2:	4b17      	ldr	r3, [pc, #92]	; (8011f20 <nfcipTx+0x2c4>)
 8011ec4:	78da      	ldrb	r2, [r3, #3]
 8011ec6:	69bb      	ldr	r3, [r7, #24]
 8011ec8:	701a      	strb	r2, [r3, #0]
            }
            
            *(--txBlock) = pfb;                                                          /* PFB */
 8011eca:	69bb      	ldr	r3, [r7, #24]
 8011ecc:	3b01      	subs	r3, #1
 8011ece:	61bb      	str	r3, [r7, #24]
 8011ed0:	69bb      	ldr	r3, [r7, #24]
 8011ed2:	7cfa      	ldrb	r2, [r7, #19]
 8011ed4:	701a      	strb	r2, [r3, #0]
                        
            
            /* NCI 1.0 - Check if Empty frames are allowed */
            if( (paylLen == 0U) && nfcipIsEmptyDEPDisabled(gNfcip.cfg.oper) && nfcip_PFBisIPDU(pfb) )
 8011ed6:	89bb      	ldrh	r3, [r7, #12]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d112      	bne.n	8011f02 <nfcipTx+0x2a6>
 8011edc:	4b10      	ldr	r3, [pc, #64]	; (8011f20 <nfcipTx+0x2c4>)
 8011ede:	789b      	ldrb	r3, [r3, #2]
 8011ee0:	f003 0304 	and.w	r3, r3, #4
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d00c      	beq.n	8011f02 <nfcipTx+0x2a6>
 8011ee8:	7cfb      	ldrb	r3, [r7, #19]
 8011eea:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d107      	bne.n	8011f02 <nfcipTx+0x2a6>
            {
                return ERR_PARAM;
 8011ef2:	2307      	movs	r3, #7
 8011ef4:	e039      	b.n	8011f6a <nfcipTx+0x30e>
            }
            break;

        /*******************************************************************************/
        default:
            return ERR_PARAM;
 8011ef6:	2307      	movs	r3, #7
 8011ef8:	e037      	b.n	8011f6a <nfcipTx+0x30e>
            break;
 8011efa:	bf00      	nop
 8011efc:	e002      	b.n	8011f04 <nfcipTx+0x2a8>
            break;
 8011efe:	bf00      	nop
 8011f00:	e000      	b.n	8011f04 <nfcipTx+0x2a8>
            break;
 8011f02:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Prepend Header                                                              */
    /*******************************************************************************/    
    *(--txBlock) = (uint8_t)cmd;                                                         /* CMD     */
 8011f04:	69bb      	ldr	r3, [r7, #24]
 8011f06:	3b01      	subs	r3, #1
 8011f08:	61bb      	str	r3, [r7, #24]
 8011f0a:	69bb      	ldr	r3, [r7, #24]
 8011f0c:	7bfa      	ldrb	r2, [r7, #15]
 8011f0e:	701a      	strb	r2, [r3, #0]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 8011f10:	7bfb      	ldrb	r3, [r7, #15]
 8011f12:	f003 0301 	and.w	r3, r3, #1
 8011f16:	b2db      	uxtb	r3, r3
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d107      	bne.n	8011f2c <nfcipTx+0x2d0>
 8011f1c:	22d4      	movs	r2, #212	; 0xd4
 8011f1e:	e006      	b.n	8011f2e <nfcipTx+0x2d2>
 8011f20:	2000376c 	.word	0x2000376c
 8011f24:	20003773 	.word	0x20003773
 8011f28:	2000377e 	.word	0x2000377e
 8011f2c:	22d5      	movs	r2, #213	; 0xd5
 8011f2e:	69bb      	ldr	r3, [r7, #24]
 8011f30:	3b01      	subs	r3, #1
 8011f32:	61bb      	str	r3, [r7, #24]
 8011f34:	69bb      	ldr	r3, [r7, #24]
 8011f36:	701a      	strb	r2, [r3, #0]
        
    
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 8011f38:	697a      	ldr	r2, [r7, #20]
 8011f3a:	69bb      	ldr	r3, [r7, #24]
 8011f3c:	1ad3      	subs	r3, r2, r3
 8011f3e:	b29a      	uxth	r2, r3
 8011f40:	89bb      	ldrh	r3, [r7, #12]
 8011f42:	4413      	add	r3, r2
 8011f44:	b29a      	uxth	r2, r3
 8011f46:	8bfb      	ldrh	r3, [r7, #30]
 8011f48:	4413      	add	r3, r2
 8011f4a:	83fb      	strh	r3, [r7, #30]
    
    
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8011f4c:	4b09      	ldr	r3, [pc, #36]	; (8011f74 <nfcipTx+0x318>)
 8011f4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f52:	8bfa      	ldrh	r2, [r7, #30]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d901      	bls.n	8011f5c <nfcipTx+0x300>
    {
        return ERR_NOTSUPP;
 8011f58:	2318      	movs	r3, #24
 8011f5a:	e006      	b.n	8011f6a <nfcipTx+0x30e>
    }
        
    /*******************************************************************************/
    return nfcipDataTx( txBlock, txBufIt, fwt );
 8011f5c:	8bfb      	ldrh	r3, [r7, #30]
 8011f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f60:	4619      	mov	r1, r3
 8011f62:	69b8      	ldr	r0, [r7, #24]
 8011f64:	f000 fe2a 	bl	8012bbc <nfcipDataTx>
 8011f68:	4603      	mov	r3, r0
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3720      	adds	r7, #32
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	bf00      	nop
 8011f74:	2000376c 	.word	0x2000376c

08011f78 <nfcipConfig>:
 ******************************************************************************
 */

/*******************************************************************************/
static void nfcipConfig( const rfalNfcDepConfigs * cfg )
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
    if (cfg == NULL) 
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d034      	beq.n	8011ff0 <nfcipConfig+0x78>
    {
        return;
    }
    
    ST_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 8011f86:	2250      	movs	r2, #80	; 0x50
 8011f88:	6879      	ldr	r1, [r7, #4]
 8011f8a:	481b      	ldr	r0, [pc, #108]	; (8011ff8 <nfcipConfig+0x80>)
 8011f8c:	f006 fec0 	bl	8018d10 <memcpy>
    
    gNfcip.cfg.to   = MIN( RFAL_NFCDEP_WT_TRG_MAX, gNfcip.cfg.to);   /* Ensure proper WT value           */
 8011f90:	4b19      	ldr	r3, [pc, #100]	; (8011ff8 <nfcipConfig+0x80>)
 8011f92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f96:	2b0e      	cmp	r3, #14
 8011f98:	bf28      	it	cs
 8011f9a:	230e      	movcs	r3, #14
 8011f9c:	b2da      	uxtb	r2, r3
 8011f9e:	4b16      	ldr	r3, [pc, #88]	; (8011ff8 <nfcipConfig+0x80>)
 8011fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gNfcip.cfg.did  = nfcip_DIDMax( gNfcip.cfg.did );                /* Ensure proper DID value          */
 8011fa4:	4b14      	ldr	r3, [pc, #80]	; (8011ff8 <nfcipConfig+0x80>)
 8011fa6:	78db      	ldrb	r3, [r3, #3]
 8011fa8:	2b0e      	cmp	r3, #14
 8011faa:	bf28      	it	cs
 8011fac:	230e      	movcs	r3, #14
 8011fae:	b2da      	uxtb	r2, r3
 8011fb0:	4b11      	ldr	r3, [pc, #68]	; (8011ff8 <nfcipConfig+0x80>)
 8011fb2:	70da      	strb	r2, [r3, #3]
    gNfcip.fsc      = rfalNfcDepLR2FS( gNfcip.cfg.lr );              /* Calculate FSC based on given LR  */
 8011fb4:	4b10      	ldr	r3, [pc, #64]	; (8011ff8 <nfcipConfig+0x80>)
 8011fb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011fba:	3301      	adds	r3, #1
 8011fbc:	019b      	lsls	r3, r3, #6
 8011fbe:	2bfd      	cmp	r3, #253	; 0xfd
 8011fc0:	d807      	bhi.n	8011fd2 <nfcipConfig+0x5a>
 8011fc2:	4b0d      	ldr	r3, [pc, #52]	; (8011ff8 <nfcipConfig+0x80>)
 8011fc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011fc8:	3301      	adds	r3, #1
 8011fca:	b29b      	uxth	r3, r3
 8011fcc:	019b      	lsls	r3, r3, #6
 8011fce:	b29b      	uxth	r3, r3
 8011fd0:	e000      	b.n	8011fd4 <nfcipConfig+0x5c>
 8011fd2:	23fe      	movs	r3, #254	; 0xfe
 8011fd4:	4a08      	ldr	r2, [pc, #32]	; (8011ff8 <nfcipConfig+0x80>)
 8011fd6:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.state = ( ( gNfcip.cfg.role ==  RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_ST_TARG_WAIT_ATR : NFCIP_ST_INIT_IDLE );
 8011fda:	4b07      	ldr	r3, [pc, #28]	; (8011ff8 <nfcipConfig+0x80>)
 8011fdc:	781b      	ldrb	r3, [r3, #0]
 8011fde:	2b01      	cmp	r3, #1
 8011fe0:	d101      	bne.n	8011fe6 <nfcipConfig+0x6e>
 8011fe2:	220a      	movs	r2, #10
 8011fe4:	e000      	b.n	8011fe8 <nfcipConfig+0x70>
 8011fe6:	2201      	movs	r2, #1
 8011fe8:	4b03      	ldr	r3, [pc, #12]	; (8011ff8 <nfcipConfig+0x80>)
 8011fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8011fee:	e000      	b.n	8011ff2 <nfcipConfig+0x7a>
        return;
 8011ff0:	bf00      	nop
}
 8011ff2:	3708      	adds	r7, #8
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}
 8011ff8:	2000376c 	.word	0x2000376c

08011ffc <nfcipRun>:


/*******************************************************************************/
static ReturnCode nfcipRun( uint16_t *outActRxLen, bool *outIsChaining  )
{
 8011ffc:	b5b0      	push	{r4, r5, r7, lr}
 8011ffe:	b086      	sub	sp, #24
 8012000:	af02      	add	r7, sp, #8
 8012002:	6078      	str	r0, [r7, #4]
 8012004:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    
    ret = ERR_SYNTAX;
 8012006:	2314      	movs	r3, #20
 8012008:	81fb      	strh	r3, [r7, #14]
    
    nfcipLogD( " NFCIP Run() state: %d \r\n", gNfcip.state );
    
    switch( gNfcip.state )
 801200a:	4b93      	ldr	r3, [pc, #588]	; (8012258 <nfcipRun+0x25c>)
 801200c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012010:	2b10      	cmp	r3, #16
 8012012:	f200 8117 	bhi.w	8012244 <nfcipRun+0x248>
 8012016:	a201      	add	r2, pc, #4	; (adr r2, 801201c <nfcipRun+0x20>)
 8012018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801201c:	08012061 	.word	0x08012061
 8012020:	08012245 	.word	0x08012245
 8012024:	08012245 	.word	0x08012245
 8012028:	08012245 	.word	0x08012245
 801202c:	08012061 	.word	0x08012061
 8012030:	08012065 	.word	0x08012065
 8012034:	080120c1 	.word	0x080120c1
 8012038:	08012245 	.word	0x08012245
 801203c:	08012245 	.word	0x08012245
 8012040:	08012245 	.word	0x08012245
 8012044:	08012245 	.word	0x08012245
 8012048:	08012245 	.word	0x08012245
 801204c:	08012061 	.word	0x08012061
 8012050:	0801220b 	.word	0x0801220b
 8012054:	080120e9 	.word	0x080120e9
 8012058:	08012193 	.word	0x08012193
 801205c:	08012061 	.word	0x08012061
        /*******************************************************************************/
        case NFCIP_ST_IDLE:
        case NFCIP_ST_INIT_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_SLEEP:
            return ERR_NONE;
 8012060:	2300      	movs	r3, #0
 8012062:	e0f5      	b.n	8012250 <nfcipRun+0x254>
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_TX:
            
            nfcipLogD( " NFCIP(I) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_REQ, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) );
 8012064:	4b7c      	ldr	r3, [pc, #496]	; (8012258 <nfcipRun+0x25c>)
 8012066:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8012068:	4b7b      	ldr	r3, [pc, #492]	; (8012258 <nfcipRun+0x25c>)
 801206a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801206c:	4a7a      	ldr	r2, [pc, #488]	; (8012258 <nfcipRun+0x25c>)
 801206e:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8012072:	189c      	adds	r4, r3, r2
 8012074:	4b78      	ldr	r3, [pc, #480]	; (8012258 <nfcipRun+0x25c>)
 8012076:	f8b3 5068 	ldrh.w	r5, [r3, #104]	; 0x68
 801207a:	4b77      	ldr	r3, [pc, #476]	; (8012258 <nfcipRun+0x25c>)
 801207c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012080:	f003 0303 	and.w	r3, r3, #3
 8012084:	b2db      	uxtb	r3, r3
 8012086:	4a74      	ldr	r2, [pc, #464]	; (8012258 <nfcipRun+0x25c>)
 8012088:	6c91      	ldr	r1, [r2, #72]	; 0x48
 801208a:	4a73      	ldr	r2, [pc, #460]	; (8012258 <nfcipRun+0x25c>)
 801208c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801208e:	440a      	add	r2, r1
 8012090:	9201      	str	r2, [sp, #4]
 8012092:	9300      	str	r3, [sp, #0]
 8012094:	462b      	mov	r3, r5
 8012096:	4622      	mov	r2, r4
 8012098:	4601      	mov	r1, r0
 801209a:	2006      	movs	r0, #6
 801209c:	f7ff fdde 	bl	8011c5c <nfcipTx>
 80120a0:	4603      	mov	r3, r0
 80120a2:	81fb      	strh	r3, [r7, #14]
                        
            switch( ret )
 80120a4:	89fb      	ldrh	r3, [r7, #14]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d005      	beq.n	80120b6 <nfcipRun+0xba>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 80120aa:	4b6b      	ldr	r3, [pc, #428]	; (8012258 <nfcipRun+0x25c>)
 80120ac:	2204      	movs	r2, #4
 80120ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  return ret;
 80120b2:	89fb      	ldrh	r3, [r7, #14]
 80120b4:	e0cc      	b.n	8012250 <nfcipRun+0x254>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_INIT_DEP_RX;
 80120b6:	4b68      	ldr	r3, [pc, #416]	; (8012258 <nfcipRun+0x25c>)
 80120b8:	2206      	movs	r2, #6
 80120ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  break;
 80120be:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_RX:          /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */

            ret = nfcipDataRx( false );
 80120c0:	2000      	movs	r0, #0
 80120c2:	f000 fd9b 	bl	8012bfc <nfcipDataRx>
 80120c6:	4603      	mov	r3, r0
 80120c8:	81fb      	strh	r3, [r7, #14]
            
            if( ret != ERR_BUSY )
 80120ca:	89fb      	ldrh	r3, [r7, #14]
 80120cc:	2b02      	cmp	r3, #2
 80120ce:	f000 80bb 	beq.w	8012248 <nfcipRun+0x24c>
            {
                ret = nfcipInitiatorHandleDEP( ret, *gNfcip.rxRcvdLen, outActRxLen, outIsChaining );
 80120d2:	4b61      	ldr	r3, [pc, #388]	; (8012258 <nfcipRun+0x25c>)
 80120d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120d6:	8819      	ldrh	r1, [r3, #0]
 80120d8:	89f8      	ldrh	r0, [r7, #14]
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	687a      	ldr	r2, [r7, #4]
 80120de:	f7fe feab 	bl	8010e38 <nfcipInitiatorHandleDEP>
 80120e2:	4603      	mov	r3, r0
 80120e4:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 80120e6:	e0af      	b.n	8012248 <nfcipRun+0x24c>
            
        /*******************************************************************************/    
        case NFCIP_ST_TARG_DEP_RTOX:
            
            if( !nfcipTimerisExpired( gNfcip.RTOXTimer ) )                    /* Do nothing until RTOX timer has expired */
 80120e8:	4b5b      	ldr	r3, [pc, #364]	; (8012258 <nfcipRun+0x25c>)
 80120ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7f2 f861 	bl	80041b4 <timerIsExpired>
 80120f2:	4603      	mov	r3, r0
 80120f4:	f083 0301 	eor.w	r3, r3, #1
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d001      	beq.n	8012102 <nfcipRun+0x106>
            {
                return ERR_BUSY;
 80120fe:	2302      	movs	r3, #2
 8012100:	e0a6      	b.n	8012250 <nfcipRun+0x254>
            }
            
            /* If we cannot send a RTOX raise a Timeout error so that we do not   
             * hold the field On forever in AP2P                                  */
            if( nfcipIsRTOXReqDisabled(gNfcip.cfg.oper) )
 8012102:	4b55      	ldr	r3, [pc, #340]	; (8012258 <nfcipRun+0x25c>)
 8012104:	789b      	ldrb	r3, [r3, #2]
 8012106:	f003 0301 	and.w	r3, r3, #1
 801210a:	2b00      	cmp	r3, #0
 801210c:	d001      	beq.n	8012112 <nfcipRun+0x116>
            {
                /* We should reEnable Rx, and measure time between our field Off to 
                 * either report link loss or recover               #287          */
                nfcipLogI( " NFCIP(T) RTOX not sent due to config, NOT reenabling Rx \r\n" );
                return ERR_TIMEOUT;
 801210e:	2304      	movs	r3, #4
 8012110:	e09e      	b.n	8012250 <nfcipRun+0x254>
            } 

            if( gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS )              /* Check maximum consecutive RTOX requests */
 8012112:	4b51      	ldr	r3, [pc, #324]	; (8012258 <nfcipRun+0x25c>)
 8012114:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012118:	1c5a      	adds	r2, r3, #1
 801211a:	b2d1      	uxtb	r1, r2
 801211c:	4a4e      	ldr	r2, [pc, #312]	; (8012258 <nfcipRun+0x25c>)
 801211e:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 8012122:	2b03      	cmp	r3, #3
 8012124:	d901      	bls.n	801212a <nfcipRun+0x12e>
            {
                return ERR_PROTO;
 8012126:	230b      	movs	r3, #11
 8012128:	e092      	b.n	8012250 <nfcipRun+0x254>
            }
            
            nfcipLogI( " NFCIP(T) RTOX sent \r\n" );
            
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 801212a:	4b4b      	ldr	r3, [pc, #300]	; (8012258 <nfcipRun+0x25c>)
 801212c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012130:	f003 030f 	and.w	r3, r3, #15
 8012134:	330c      	adds	r3, #12
 8012136:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801213a:	fa22 f303 	lsr.w	r3, r2, r3
 801213e:	2b3a      	cmp	r3, #58	; 0x3a
 8012140:	d80b      	bhi.n	801215a <nfcipRun+0x15e>
 8012142:	4b45      	ldr	r3, [pc, #276]	; (8012258 <nfcipRun+0x25c>)
 8012144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012148:	f003 030f 	and.w	r3, r3, #15
 801214c:	330c      	adds	r3, #12
 801214e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8012152:	fa22 f303 	lsr.w	r3, r2, r3
 8012156:	b2db      	uxtb	r3, r3
 8012158:	e000      	b.n	801215c <nfcipRun+0x160>
 801215a:	233b      	movs	r3, #59	; 0x3b
 801215c:	4a3e      	ldr	r2, [pc, #248]	; (8012258 <nfcipRun+0x25c>)
 801215e:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 8012162:	4b3d      	ldr	r3, [pc, #244]	; (8012258 <nfcipRun+0x25c>)
 8012164:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8012168:	4619      	mov	r1, r3
 801216a:	2090      	movs	r0, #144	; 0x90
 801216c:	f7fe fde8 	bl	8010d40 <nfcipDEPControlMsg>
 8012170:	4603      	mov	r3, r0
 8012172:	81fb      	strh	r3, [r7, #14]
 8012174:	89fb      	ldrh	r3, [r7, #14]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d001      	beq.n	801217e <nfcipRun+0x182>
 801217a:	89fb      	ldrh	r3, [r7, #14]
 801217c:	e068      	b.n	8012250 <nfcipRun+0x254>
            
            /* Set waiting for RTOX Ack Flag */
            gNfcip.isWait4RTOX = true;
 801217e:	4b36      	ldr	r3, [pc, #216]	; (8012258 <nfcipRun+0x25c>)
 8012180:	2201      	movs	r2, #1
 8012182:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            gNfcip.state = NFCIP_ST_TARG_DEP_RX;                              /* Go back to Rx to process RTOX ack       */
 8012186:	4b34      	ldr	r3, [pc, #208]	; (8012258 <nfcipRun+0x25c>)
 8012188:	220d      	movs	r2, #13
 801218a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 801218e:	2302      	movs	r3, #2
 8012190:	e05e      	b.n	8012250 <nfcipRun+0x254>
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_TX:
            
            nfcipLogD( " NFCIP(T) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_RES, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), NFCIP_NO_FWT );
 8012192:	4b31      	ldr	r3, [pc, #196]	; (8012258 <nfcipRun+0x25c>)
 8012194:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8012196:	4b30      	ldr	r3, [pc, #192]	; (8012258 <nfcipRun+0x25c>)
 8012198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801219a:	4a2f      	ldr	r2, [pc, #188]	; (8012258 <nfcipRun+0x25c>)
 801219c:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 80121a0:	441a      	add	r2, r3
 80121a2:	4b2d      	ldr	r3, [pc, #180]	; (8012258 <nfcipRun+0x25c>)
 80121a4:	f8b3 0068 	ldrh.w	r0, [r3, #104]	; 0x68
 80121a8:	4b2b      	ldr	r3, [pc, #172]	; (8012258 <nfcipRun+0x25c>)
 80121aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80121ae:	f003 0303 	and.w	r3, r3, #3
 80121b2:	b2db      	uxtb	r3, r3
 80121b4:	f04f 34ff 	mov.w	r4, #4294967295
 80121b8:	9401      	str	r4, [sp, #4]
 80121ba:	9300      	str	r3, [sp, #0]
 80121bc:	4603      	mov	r3, r0
 80121be:	2007      	movs	r0, #7
 80121c0:	f7ff fd4c 	bl	8011c5c <nfcipTx>
 80121c4:	4603      	mov	r3, r0
 80121c6:	81fb      	strh	r3, [r7, #14]
            
            /* Clear flags */
            gNfcip.isTxPending = false;
 80121c8:	4b23      	ldr	r3, [pc, #140]	; (8012258 <nfcipRun+0x25c>)
 80121ca:	2200      	movs	r2, #0
 80121cc:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            gNfcip.isWait4RTOX = false;
 80121d0:	4b21      	ldr	r3, [pc, #132]	; (8012258 <nfcipRun+0x25c>)
 80121d2:	2200      	movs	r2, #0
 80121d4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            /* Digital 1.0 14.12.3.4 Increment the current PNI after Tx */
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80121d8:	4b1f      	ldr	r3, [pc, #124]	; (8012258 <nfcipRun+0x25c>)
 80121da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80121de:	3301      	adds	r3, #1
 80121e0:	b2db      	uxtb	r3, r3
 80121e2:	f003 0303 	and.w	r3, r3, #3
 80121e6:	b2da      	uxtb	r2, r3
 80121e8:	4b1b      	ldr	r3, [pc, #108]	; (8012258 <nfcipRun+0x25c>)
 80121ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            switch( ret )
 80121ee:	89fb      	ldrh	r3, [r7, #14]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d005      	beq.n	8012200 <nfcipRun+0x204>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;                      /* Upon Tx error, goto IDLE state */
 80121f4:	4b18      	ldr	r3, [pc, #96]	; (8012258 <nfcipRun+0x25c>)
 80121f6:	220c      	movs	r2, #12
 80121f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  return ret;
 80121fc:	89fb      	ldrh	r3, [r7, #14]
 80121fe:	e027      	b.n	8012250 <nfcipRun+0x254>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_TARG_DEP_RX;                        /* All OK, goto Rx state          */
 8012200:	4b15      	ldr	r3, [pc, #84]	; (8012258 <nfcipRun+0x25c>)
 8012202:	220d      	movs	r2, #13
 8012204:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  break;
 8012208:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_RX:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( gNfcip.isReqPending )    /* if already has Data should be from a DEP from nfcipTargetHandleActivation()  */
 801220a:	4b13      	ldr	r3, [pc, #76]	; (8012258 <nfcipRun+0x25c>)
 801220c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012210:	2b00      	cmp	r3, #0
 8012212:	d006      	beq.n	8012222 <nfcipRun+0x226>
            {
                nfcipLogD( " NFCIP(T) Skipping Rx Using DEP from Activation \r\n" );
                
                gNfcip.isReqPending = false;
 8012214:	4b10      	ldr	r3, [pc, #64]	; (8012258 <nfcipRun+0x25c>)
 8012216:	2200      	movs	r2, #0
 8012218:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
                ret = ERR_NONE;
 801221c:	2300      	movs	r3, #0
 801221e:	81fb      	strh	r3, [r7, #14]
 8012220:	e004      	b.n	801222c <nfcipRun+0x230>
            }
            else
            {
                ret = nfcipDataRx( false );
 8012222:	2000      	movs	r0, #0
 8012224:	f000 fcea 	bl	8012bfc <nfcipDataRx>
 8012228:	4603      	mov	r3, r0
 801222a:	81fb      	strh	r3, [r7, #14]
            }
            
            if( ret != ERR_BUSY )
 801222c:	89fb      	ldrh	r3, [r7, #14]
 801222e:	2b02      	cmp	r3, #2
 8012230:	d00c      	beq.n	801224c <nfcipRun+0x250>
            {
                ret = nfcipTargetHandleRX( ret, outActRxLen, outIsChaining );
 8012232:	89fb      	ldrh	r3, [r7, #14]
 8012234:	683a      	ldr	r2, [r7, #0]
 8012236:	6879      	ldr	r1, [r7, #4]
 8012238:	4618      	mov	r0, r3
 801223a:	f7ff f8cd 	bl	80113d8 <nfcipTargetHandleRX>
 801223e:	4603      	mov	r3, r0
 8012240:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 8012242:	e003      	b.n	801224c <nfcipRun+0x250>
            
        /*******************************************************************************/
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8012244:	bf00      	nop
 8012246:	e002      	b.n	801224e <nfcipRun+0x252>
            break;
 8012248:	bf00      	nop
 801224a:	e000      	b.n	801224e <nfcipRun+0x252>
            break;
 801224c:	bf00      	nop
    }
    return ret;
 801224e:	89fb      	ldrh	r3, [r7, #14]
}
 8012250:	4618      	mov	r0, r3
 8012252:	3710      	adds	r7, #16
 8012254:	46bd      	mov	sp, r7
 8012256:	bdb0      	pop	{r4, r5, r7, pc}
 8012258:	2000376c 	.word	0x2000376c

0801225c <rfalNfcDepInitialize>:
}


/*******************************************************************************/
void rfalNfcDepInitialize( void )
{
 801225c:	b580      	push	{r7, lr}
 801225e:	af00      	add	r7, sp, #0
    nfcipLogD( " NFCIP Ini() \r\n" );
	
    gNfcip.state          = NFCIP_ST_IDLE;
 8012260:	4b28      	ldr	r3, [pc, #160]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 8012262:	2200      	movs	r2, #0
 8012264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    gNfcip.isDeactivating = NULL;
 8012268:	4b26      	ldr	r3, [pc, #152]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 801226a:	2200      	movs	r2, #0
 801226c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    
    gNfcip.isTxPending    = false;
 8012270:	4b24      	ldr	r3, [pc, #144]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 8012272:	2200      	movs	r2, #0
 8012274:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    gNfcip.isWait4RTOX    = false;
 8012278:	4b22      	ldr	r3, [pc, #136]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 801227a:	2200      	movs	r2, #0
 801227c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    gNfcip.isReqPending   = false;
 8012280:	4b20      	ldr	r3, [pc, #128]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 8012282:	2200      	movs	r2, #0
 8012284:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    
            
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8012288:	4b1e      	ldr	r3, [pc, #120]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 801228a:	2202      	movs	r2, #2
 801228c:	709a      	strb	r2, [r3, #2]
    
    gNfcip.cfg.did   = RFAL_NFCDEP_DID_NO;
 801228e:	4b1d      	ldr	r3, [pc, #116]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 8012290:	2200      	movs	r2, #0
 8012292:	70da      	strb	r2, [r3, #3]
    gNfcip.cfg.nad   = RFAL_NFCDEP_NAD_NO;
 8012294:	4b1b      	ldr	r3, [pc, #108]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 8012296:	2200      	movs	r2, #0
 8012298:	711a      	strb	r2, [r3, #4]
    
    gNfcip.cfg.br    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 801229a:	4b1a      	ldr	r3, [pc, #104]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 801229c:	2200      	movs	r2, #0
 801229e:	719a      	strb	r2, [r3, #6]
    gNfcip.cfg.bs    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 80122a0:	4b18      	ldr	r3, [pc, #96]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 80122a2:	2200      	movs	r2, #0
 80122a4:	715a      	strb	r2, [r3, #5]
    
    gNfcip.cfg.lr    = RFAL_NFCDEP_LR_254;
 80122a6:	4b17      	ldr	r3, [pc, #92]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 80122a8:	2203      	movs	r2, #3
 80122aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 80122ae:	4b15      	ldr	r3, [pc, #84]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 80122b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80122b4:	3301      	adds	r3, #1
 80122b6:	019b      	lsls	r3, r3, #6
 80122b8:	2bfd      	cmp	r3, #253	; 0xfd
 80122ba:	d807      	bhi.n	80122cc <rfalNfcDepInitialize+0x70>
 80122bc:	4b11      	ldr	r3, [pc, #68]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 80122be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80122c2:	3301      	adds	r3, #1
 80122c4:	b29b      	uxth	r3, r3
 80122c6:	019b      	lsls	r3, r3, #6
 80122c8:	b29b      	uxth	r3, r3
 80122ca:	e000      	b.n	80122ce <rfalNfcDepInitialize+0x72>
 80122cc:	23fe      	movs	r3, #254	; 0xfe
 80122ce:	4a0d      	ldr	r2, [pc, #52]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 80122d0:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.cfg.gbLen = 0;    
 80122d4:	4b0b      	ldr	r3, [pc, #44]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 80122d6:	2200      	movs	r2, #0
 80122d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    
    gNfcip.cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 80122dc:	4b09      	ldr	r3, [pc, #36]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 80122de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80122e2:	649a      	str	r2, [r3, #72]	; 0x48
    gNfcip.cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 80122e4:	4b07      	ldr	r3, [pc, #28]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 80122e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80122ea:	64da      	str	r2, [r3, #76]	; 0x4c
    
    gNfcip.pni       = 0;    
 80122ec:	4b05      	ldr	r3, [pc, #20]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 80122ee:	2200      	movs	r2, #0
 80122f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    gNfcip.RTOXTimer = 0;
 80122f4:	4b03      	ldr	r3, [pc, #12]	; (8012304 <rfalNfcDepInitialize+0xa8>)
 80122f6:	2200      	movs	r2, #0
 80122f8:	67da      	str	r2, [r3, #124]	; 0x7c

    nfcipClearCounters();
 80122fa:	f7fe fd81 	bl	8010e00 <nfcipClearCounters>
}
 80122fe:	bf00      	nop
 8012300:	bd80      	pop	{r7, pc}
 8012302:	bf00      	nop
 8012304:	2000376c 	.word	0x2000376c

08012308 <nfcipSetDEPParams>:


/*******************************************************************************/
static void nfcipSetDEPParams( rfalNfcDepDEPParams *DEPParams )
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
    nfcipLogD( " NFCIP SetDEP() txLen: %d \r\n", DEPParams->txBufLen );
	
    gNfcip.isTxChaining = DEPParams->txChaining;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	7ada      	ldrb	r2, [r3, #11]
 8012314:	4b2f      	ldr	r3, [pc, #188]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 8012316:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    gNfcip.txBuf        = DEPParams->txBuf;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	685b      	ldr	r3, [r3, #4]
 801231e:	4a2d      	ldr	r2, [pc, #180]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 8012320:	6613      	str	r3, [r2, #96]	; 0x60
    gNfcip.rxBuf        = DEPParams->rxBuf;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	68db      	ldr	r3, [r3, #12]
 8012326:	4a2b      	ldr	r2, [pc, #172]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 8012328:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.txBufLen     = DEPParams->txBufLen;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	891a      	ldrh	r2, [r3, #8]
 801232e:	4b29      	ldr	r3, [pc, #164]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 8012330:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    gNfcip.rxBufLen     = DEPParams->rxBufLen;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	8a1a      	ldrh	r2, [r3, #16]
 8012338:	4b26      	ldr	r3, [pc, #152]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 801233a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	7a9a      	ldrb	r2, [r3, #10]
 8012342:	4b24      	ldr	r3, [pc, #144]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 8012344:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    gNfcip.rxBufPaylPos = DEPParams->rxBufPaylPos;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	7c9a      	ldrb	r2, [r3, #18]
 801234c:	4b21      	ldr	r3, [pc, #132]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 801234e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    
    if( DEPParams->did != RFAL_NFCDEP_DID_KEEP )
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	2bff      	cmp	r3, #255	; 0xff
 8012358:	d007      	beq.n	801236a <nfcipSetDEPParams+0x62>
    {
        gNfcip.cfg.did  = nfcip_DIDMax( DEPParams->did );
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	781b      	ldrb	r3, [r3, #0]
 801235e:	2b0e      	cmp	r3, #14
 8012360:	bf28      	it	cs
 8012362:	230e      	movcs	r3, #14
 8012364:	b2da      	uxtb	r2, r3
 8012366:	4b1b      	ldr	r3, [pc, #108]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 8012368:	70da      	strb	r2, [r3, #3]
    }
    
    gNfcip.cfg.fwt      = DEPParams->fwt;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	695b      	ldr	r3, [r3, #20]
 801236e:	4a19      	ldr	r2, [pc, #100]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 8012370:	6493      	str	r3, [r2, #72]	; 0x48
    gNfcip.cfg.dFwt     = DEPParams->dFwt;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	699b      	ldr	r3, [r3, #24]
 8012376:	4a17      	ldr	r2, [pc, #92]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 8012378:	64d3      	str	r3, [r2, #76]	; 0x4c
    gNfcip.fsc          = DEPParams->fsc;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	8b9a      	ldrh	r2, [r3, #28]
 801237e:	4b15      	ldr	r3, [pc, #84]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 8012380:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    
    
    
    if(gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET)
 8012384:	4b13      	ldr	r3, [pc, #76]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 8012386:	781b      	ldrb	r3, [r3, #0]
 8012388:	2b01      	cmp	r3, #1
 801238a:	d119      	bne.n	80123c0 <nfcipSetDEPParams+0xb8>
    {
        /* If there's any data to be sent go for Tx */
        if(DEPParams->txBufLen > 0U)
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	891b      	ldrh	r3, [r3, #8]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d010      	beq.n	80123b6 <nfcipSetDEPParams+0xae>
        {
            /* Ensure that an RTOX Ack is not being expected at moment */
            if( !gNfcip.isWait4RTOX )
 8012394:	4b0f      	ldr	r3, [pc, #60]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 8012396:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 801239a:	f083 0301 	eor.w	r3, r3, #1
 801239e:	b2db      	uxtb	r3, r3
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d004      	beq.n	80123ae <nfcipSetDEPParams+0xa6>
            {
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 80123a4:	4b0b      	ldr	r3, [pc, #44]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 80123a6:	220f      	movs	r2, #15
 80123a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return;
 80123ac:	e00e      	b.n	80123cc <nfcipSetDEPParams+0xc4>
            }
            else
            {
                /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
                gNfcip.isTxPending = true;
 80123ae:	4b09      	ldr	r3, [pc, #36]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 80123b0:	2201      	movs	r2, #1
 80123b2:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                nfcipLogW( " NFCIP(T) Waiting RTOX, queueing outgoing DEP Block \r\n" );                
            }
        }    
    
        /*Digital 1.0  14.12.4.1 In target mode the first PDU MUST be sent by the Initiator */
        gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 80123b6:	4b07      	ldr	r3, [pc, #28]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 80123b8:	220d      	movs	r2, #13
 80123ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return;
 80123be:	e005      	b.n	80123cc <nfcipSetDEPParams+0xc4>
    }

    /* New data TxRx request clear previous error counters for consecutive TxRx without reseting communication/protocol layer*/
    nfcipClearCounters();
 80123c0:	f7fe fd1e 	bl	8010e00 <nfcipClearCounters>
    
    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 80123c4:	4b03      	ldr	r3, [pc, #12]	; (80123d4 <nfcipSetDEPParams+0xcc>)
 80123c6:	2205      	movs	r2, #5
 80123c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80123cc:	3708      	adds	r7, #8
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop
 80123d4:	2000376c 	.word	0x2000376c

080123d8 <rfalNfcDepIsAtrReq>:
}


/*******************************************************************************/
bool rfalNfcDepIsAtrReq( const uint8_t* buf, uint16_t bufLen, uint8_t* nfcid3 )
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b086      	sub	sp, #24
 80123dc:	af00      	add	r7, sp, #0
 80123de:	60f8      	str	r0, [r7, #12]
 80123e0:	460b      	mov	r3, r1
 80123e2:	607a      	str	r2, [r7, #4]
 80123e4:	817b      	strh	r3, [r7, #10]
    uint8_t msgIt;
    
    msgIt = 0;
 80123e6:	2300      	movs	r3, #0
 80123e8:	75fb      	strb	r3, [r7, #23]
    
    if ( (bufLen < RFAL_NFCDEP_ATRREQ_MIN_LEN) || (bufLen > RFAL_NFCDEP_ATRREQ_MAX_LEN) )
 80123ea:	897b      	ldrh	r3, [r7, #10]
 80123ec:	2b0f      	cmp	r3, #15
 80123ee:	d902      	bls.n	80123f6 <rfalNfcDepIsAtrReq+0x1e>
 80123f0:	897b      	ldrh	r3, [r7, #10]
 80123f2:	2b40      	cmp	r3, #64	; 0x40
 80123f4:	d901      	bls.n	80123fa <rfalNfcDepIsAtrReq+0x22>
    {
        return false;
 80123f6:	2300      	movs	r3, #0
 80123f8:	e020      	b.n	801243c <rfalNfcDepIsAtrReq+0x64>
    }
    
    if ( buf[msgIt++] != NFCIP_REQ )
 80123fa:	7dfb      	ldrb	r3, [r7, #23]
 80123fc:	1c5a      	adds	r2, r3, #1
 80123fe:	75fa      	strb	r2, [r7, #23]
 8012400:	461a      	mov	r2, r3
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	4413      	add	r3, r2
 8012406:	781b      	ldrb	r3, [r3, #0]
 8012408:	2bd4      	cmp	r3, #212	; 0xd4
 801240a:	d001      	beq.n	8012410 <rfalNfcDepIsAtrReq+0x38>
    {
        return false;
 801240c:	2300      	movs	r3, #0
 801240e:	e015      	b.n	801243c <rfalNfcDepIsAtrReq+0x64>
    }
    
    if( buf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_REQ )
 8012410:	7dfb      	ldrb	r3, [r7, #23]
 8012412:	1c5a      	adds	r2, r3, #1
 8012414:	75fa      	strb	r2, [r7, #23]
 8012416:	461a      	mov	r2, r3
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	4413      	add	r3, r2
 801241c:	781b      	ldrb	r3, [r3, #0]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d001      	beq.n	8012426 <rfalNfcDepIsAtrReq+0x4e>
    {
        return false;
 8012422:	2300      	movs	r3, #0
 8012424:	e00a      	b.n	801243c <rfalNfcDepIsAtrReq+0x64>
    }
    
    /* Output NFID3 if requested */
    if( nfcid3 != NULL )
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d006      	beq.n	801243a <rfalNfcDepIsAtrReq+0x62>
    {
        ST_MEMCPY( nfcid3, &buf[RFAL_NFCDEP_ATR_REQ_NFCID3_POS], RFAL_NFCDEP_NFCID3_LEN );
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	3302      	adds	r3, #2
 8012430:	220a      	movs	r2, #10
 8012432:	4619      	mov	r1, r3
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f006 fc6b 	bl	8018d10 <memcpy>
    }
     
    return true;
 801243a:	2301      	movs	r3, #1
}
 801243c:	4618      	mov	r0, r3
 801243e:	3718      	adds	r7, #24
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}

08012444 <nfcipTargetHandleActivation>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleActivation( rfalNfcDepDevice *nfcDepDev, uint8_t *outBRS )
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b088      	sub	sp, #32
 8012448:	af02      	add	r7, sp, #8
 801244a:	6078      	str	r0, [r7, #4]
 801244c:	6039      	str	r1, [r7, #0]
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_PSLRES_LEN];
    
    /*******************************************************************************/
    /*  Check if we are in correct state                                           */
    /*******************************************************************************/
    if( gNfcip.state != NFCIP_ST_TARG_WAIT_ACTV )
 801244e:	4b79      	ldr	r3, [pc, #484]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 8012450:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012454:	2b0b      	cmp	r3, #11
 8012456:	d001      	beq.n	801245c <nfcipTargetHandleActivation+0x18>
    {
        return ERR_WRONG_STATE;
 8012458:	2321      	movs	r3, #33	; 0x21
 801245a:	e0e6      	b.n	801262a <nfcipTargetHandleActivation+0x1e6>
    
    
    /*******************************************************************************/
    /*  Check required parameters                                                  */
    /*******************************************************************************/
    if( outBRS == NULL )
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d101      	bne.n	8012466 <nfcipTargetHandleActivation+0x22>
    {
        return ERR_PARAM;
 8012462:	2307      	movs	r3, #7
 8012464:	e0e1      	b.n	801262a <nfcipTargetHandleActivation+0x1e6>
    }
    
    /*******************************************************************************/
    /*  Wait and process incoming cmd (PSL / DEP)                                  */
    /*******************************************************************************/        
    ret = nfcipDataRx( false );
 8012466:	2000      	movs	r0, #0
 8012468:	f000 fbc8 	bl	8012bfc <nfcipDataRx>
 801246c:	4603      	mov	r3, r0
 801246e:	82fb      	strh	r3, [r7, #22]

    if( ret != ERR_NONE )
 8012470:	8afb      	ldrh	r3, [r7, #22]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d001      	beq.n	801247a <nfcipTargetHandleActivation+0x36>
    {
        return ret;
 8012476:	8afb      	ldrh	r3, [r7, #22]
 8012478:	e0d7      	b.n	801262a <nfcipTargetHandleActivation+0x1e6>
    }
    
    msgIt   = 0;
 801247a:	2300      	movs	r3, #0
 801247c:	757b      	strb	r3, [r7, #21]
    *outBRS = RFAL_NFCDEP_BRS_MAINTAIN;                   /* set out BRS to be maintained */
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	22c0      	movs	r2, #192	; 0xc0
 8012482:	701a      	strb	r2, [r3, #0]
 
    msgIt++;                                              /* Skip LEN byte                */
 8012484:	7d7b      	ldrb	r3, [r7, #21]
 8012486:	3301      	adds	r3, #1
 8012488:	757b      	strb	r3, [r7, #21]
    
    if ( gNfcip.rxBuf[msgIt++] != NFCIP_REQ )
 801248a:	4b6a      	ldr	r3, [pc, #424]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 801248c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801248e:	7d7b      	ldrb	r3, [r7, #21]
 8012490:	1c59      	adds	r1, r3, #1
 8012492:	7579      	strb	r1, [r7, #21]
 8012494:	4413      	add	r3, r2
 8012496:	781b      	ldrb	r3, [r3, #0]
 8012498:	2bd4      	cmp	r3, #212	; 0xd4
 801249a:	d001      	beq.n	80124a0 <nfcipTargetHandleActivation+0x5c>
    {
        return ERR_PROTO;
 801249c:	230b      	movs	r3, #11
 801249e:	e0c4      	b.n	801262a <nfcipTargetHandleActivation+0x1e6>
    }
    
    if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_PSL_REQ )
 80124a0:	4b64      	ldr	r3, [pc, #400]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 80124a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80124a4:	7d7b      	ldrb	r3, [r7, #21]
 80124a6:	4413      	add	r3, r2
 80124a8:	781b      	ldrb	r3, [r3, #0]
 80124aa:	2b04      	cmp	r3, #4
 80124ac:	f040 8082 	bne.w	80125b4 <nfcipTargetHandleActivation+0x170>
    {
        msgIt++;
 80124b0:	7d7b      	ldrb	r3, [r7, #21]
 80124b2:	3301      	adds	r3, #1
 80124b4:	757b      	strb	r3, [r7, #21]
        
        if( gNfcip.rxBuf[msgIt++] != gNfcip.cfg.did )     /* Checking DID                 */
 80124b6:	4b5f      	ldr	r3, [pc, #380]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 80124b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80124ba:	7d7b      	ldrb	r3, [r7, #21]
 80124bc:	1c59      	adds	r1, r3, #1
 80124be:	7579      	strb	r1, [r7, #21]
 80124c0:	4413      	add	r3, r2
 80124c2:	781a      	ldrb	r2, [r3, #0]
 80124c4:	4b5b      	ldr	r3, [pc, #364]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 80124c6:	78db      	ldrb	r3, [r3, #3]
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d001      	beq.n	80124d0 <nfcipTargetHandleActivation+0x8c>
        {
            return ERR_PROTO;
 80124cc:	230b      	movs	r3, #11
 80124ce:	e0ac      	b.n	801262a <nfcipTargetHandleActivation+0x1e6>
        }
        
        nfcipLogI( " NFCIP(T) PSL REQ rcvd \r\n" );
        
        *outBRS = gNfcip.rxBuf[msgIt++];                  /* assign output BRS value      */
 80124d0:	4b58      	ldr	r3, [pc, #352]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 80124d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80124d4:	7d7b      	ldrb	r3, [r7, #21]
 80124d6:	1c59      	adds	r1, r3, #1
 80124d8:	7579      	strb	r1, [r7, #21]
 80124da:	4413      	add	r3, r2
 80124dc:	781a      	ldrb	r2, [r3, #0]
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	701a      	strb	r2, [r3, #0]
        
        /* Store FSL(LR) and update current config */
        gNfcip.cfg.lr = (gNfcip.rxBuf[msgIt++] & RFAL_NFCDEP_LR_VAL_MASK);
 80124e2:	4b54      	ldr	r3, [pc, #336]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 80124e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80124e6:	7d7b      	ldrb	r3, [r7, #21]
 80124e8:	1c59      	adds	r1, r3, #1
 80124ea:	7579      	strb	r1, [r7, #21]
 80124ec:	4413      	add	r3, r2
 80124ee:	781b      	ldrb	r3, [r3, #0]
 80124f0:	f003 0303 	and.w	r3, r3, #3
 80124f4:	b2da      	uxtb	r2, r3
 80124f6:	4b4f      	ldr	r3, [pc, #316]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 80124f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        gNfcip.fsc    = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 80124fc:	4b4d      	ldr	r3, [pc, #308]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 80124fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012502:	3301      	adds	r3, #1
 8012504:	019b      	lsls	r3, r3, #6
 8012506:	2bfd      	cmp	r3, #253	; 0xfd
 8012508:	d807      	bhi.n	801251a <nfcipTargetHandleActivation+0xd6>
 801250a:	4b4a      	ldr	r3, [pc, #296]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 801250c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012510:	3301      	adds	r3, #1
 8012512:	b29b      	uxth	r3, r3
 8012514:	019b      	lsls	r3, r3, #6
 8012516:	b29b      	uxth	r3, r3
 8012518:	e000      	b.n	801251c <nfcipTargetHandleActivation+0xd8>
 801251a:	23fe      	movs	r3, #254	; 0xfe
 801251c:	4a45      	ldr	r2, [pc, #276]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 801251e:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
        
        /*******************************************************************************/
        /* Update NFC-DDE Device info */
        if( nfcDepDev != NULL )
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d032      	beq.n	801258e <nfcipTargetHandleActivation+0x14a>
        {
            /* Update Bitrate info */
            /* PRQA S 4342 2 # MISRA 10.5 - Layout of enum rfalBitRate and definition of rfalNfcDepBRS2DSI guarantee no invalid enum values to be created */
            nfcDepDev->info.DSI = (rfalBitRate)rfalNfcDepBRS2DSI( *outBRS );   /* DSI codes the bit rate from Initiator to Target */
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	781b      	ldrb	r3, [r3, #0]
 801252c:	08db      	lsrs	r3, r3, #3
 801252e:	b2db      	uxtb	r3, r3
 8012530:	f003 0307 	and.w	r3, r3, #7
 8012534:	b2da      	uxtb	r2, r3
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            nfcDepDev->info.DRI = (rfalBitRate)rfalNfcDepBRS2DRI( *outBRS );   /* DRI codes the bit rate from Target to Initiator */
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	f003 0307 	and.w	r3, r3, #7
 8012544:	b2da      	uxtb	r2, r3
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            
            /* Update Length Reduction and Frame Size */
            nfcDepDev->info.LR = gNfcip.cfg.lr;
 801254c:	4b39      	ldr	r3, [pc, #228]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 801254e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            nfcDepDev->info.FS = gNfcip.fsc;
 8012558:	4b36      	ldr	r3, [pc, #216]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 801255a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            
            /* Update PPi byte */
            nfcDepDev->activation.Initiator.ATR_REQ.PPi &= ~RFAL_NFCDEP_PP_LR_MASK;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	7bdb      	ldrb	r3, [r3, #15]
 8012568:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 801256c:	b2da      	uxtb	r2, r3
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	73da      	strb	r2, [r3, #15]
            nfcDepDev->activation.Initiator.ATR_REQ.PPi |= rfalNfcDepLR2PP( gNfcip.cfg.lr );
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	7bda      	ldrb	r2, [r3, #15]
 8012576:	4b2f      	ldr	r3, [pc, #188]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 8012578:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801257c:	011b      	lsls	r3, r3, #4
 801257e:	b2db      	uxtb	r3, r3
 8012580:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012584:	b2db      	uxtb	r3, r3
 8012586:	4313      	orrs	r3, r2
 8012588:	b2da      	uxtb	r2, r3
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	73da      	strb	r2, [r3, #15]
        }
        
        EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_PSL_RES, txBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 801258e:	f107 010c 	add.w	r1, r7, #12
 8012592:	f04f 33ff 	mov.w	r3, #4294967295
 8012596:	9301      	str	r3, [sp, #4]
 8012598:	2300      	movs	r3, #0
 801259a:	9300      	str	r3, [sp, #0]
 801259c:	2300      	movs	r3, #0
 801259e:	2200      	movs	r2, #0
 80125a0:	2005      	movs	r0, #5
 80125a2:	f7ff fb5b 	bl	8011c5c <nfcipTx>
 80125a6:	4603      	mov	r3, r0
 80125a8:	82fb      	strh	r3, [r7, #22]
 80125aa:	8afb      	ldrh	r3, [r7, #22]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d037      	beq.n	8012620 <nfcipTargetHandleActivation+0x1dc>
 80125b0:	8afb      	ldrh	r3, [r7, #22]
 80125b2:	e03a      	b.n	801262a <nfcipTargetHandleActivation+0x1e6>
    }
    else
    {
        if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_DEP_REQ )
 80125b4:	4b1f      	ldr	r3, [pc, #124]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 80125b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80125b8:	7d7b      	ldrb	r3, [r7, #21]
 80125ba:	4413      	add	r3, r2
 80125bc:	781b      	ldrb	r3, [r3, #0]
 80125be:	2b06      	cmp	r3, #6
 80125c0:	d12a      	bne.n	8012618 <nfcipTargetHandleActivation+0x1d4>
        {
            msgIt++;
 80125c2:	7d7b      	ldrb	r3, [r7, #21]
 80125c4:	3301      	adds	r3, #1
 80125c6:	757b      	strb	r3, [r7, #21]
                    
            /*******************************************************************************/
            /* Digital 1.0 14.12.3.1 PNI must be initialized to 0 */
            if( nfcip_PBF_PNI( gNfcip.rxBuf[msgIt] ) != 0U )
 80125c8:	4b1a      	ldr	r3, [pc, #104]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 80125ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80125cc:	7d7b      	ldrb	r3, [r7, #21]
 80125ce:	4413      	add	r3, r2
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	f003 0303 	and.w	r3, r3, #3
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d001      	beq.n	80125de <nfcipTargetHandleActivation+0x19a>
            {
                return ERR_PROTO;
 80125da:	230b      	movs	r3, #11
 80125dc:	e025      	b.n	801262a <nfcipTargetHandleActivation+0x1e6>
            }
            
            /*******************************************************************************/
            /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
            if( nfcip_PFBhasDID( gNfcip.rxBuf[ msgIt] ) ) 
 80125de:	4b15      	ldr	r3, [pc, #84]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 80125e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80125e2:	7d7b      	ldrb	r3, [r7, #21]
 80125e4:	4413      	add	r3, r2
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	f003 0304 	and.w	r3, r3, #4
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d00d      	beq.n	801260c <nfcipTargetHandleActivation+0x1c8>
            {
                if( gNfcip.rxBuf[++msgIt] != gNfcip.cfg.did )
 80125f0:	4b10      	ldr	r3, [pc, #64]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 80125f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80125f4:	7d7b      	ldrb	r3, [r7, #21]
 80125f6:	3301      	adds	r3, #1
 80125f8:	757b      	strb	r3, [r7, #21]
 80125fa:	7d7b      	ldrb	r3, [r7, #21]
 80125fc:	4413      	add	r3, r2
 80125fe:	781a      	ldrb	r2, [r3, #0]
 8012600:	4b0c      	ldr	r3, [pc, #48]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 8012602:	78db      	ldrb	r3, [r3, #3]
 8012604:	429a      	cmp	r2, r3
 8012606:	d007      	beq.n	8012618 <nfcipTargetHandleActivation+0x1d4>
                {
                    return ERR_PROTO;
 8012608:	230b      	movs	r3, #11
 801260a:	e00e      	b.n	801262a <nfcipTargetHandleActivation+0x1e6>
                }
            }
            else if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )          /* DID expected but not rcv */
 801260c:	4b09      	ldr	r3, [pc, #36]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 801260e:	78db      	ldrb	r3, [r3, #3]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d001      	beq.n	8012618 <nfcipTargetHandleActivation+0x1d4>
            {
                return ERR_PROTO;
 8012614:	230b      	movs	r3, #11
 8012616:	e008      	b.n	801262a <nfcipTargetHandleActivation+0x1e6>
                /* MISRA 15.7 - Empty else */
            }
        }
        
        /* Signal Request pending to be digested on normal Handling (DEP_REQ, DSL_REQ, RLS_REQ) */
        gNfcip.isReqPending = true;
 8012618:	4b06      	ldr	r3, [pc, #24]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 801261a:	2201      	movs	r2, #1
 801261c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    }
    
    gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 8012620:	4b04      	ldr	r3, [pc, #16]	; (8012634 <nfcipTargetHandleActivation+0x1f0>)
 8012622:	220d      	movs	r2, #13
 8012624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return ERR_NONE;
 8012628:	2300      	movs	r3, #0
}
 801262a:	4618      	mov	r0, r3
 801262c:	3718      	adds	r7, #24
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	2000376c 	.word	0x2000376c

08012638 <rfalNfcDepATR>:


/*******************************************************************************/
ReturnCode rfalNfcDepATR( const rfalNfcDepAtrParam* param, rfalNfcDepAtrRes *atrRes, uint8_t* atrResLen )
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b0c0      	sub	sp, #256	; 0x100
 801263c:	af04      	add	r7, sp, #16
 801263e:	60f8      	str	r0, [r7, #12]
 8012640:	60b9      	str	r1, [r7, #8]
 8012642:	607a      	str	r2, [r7, #4]
    uint8_t           msgIt;
    uint8_t           txBuf[RFAL_NFCDEP_ATRREQ_MAX_LEN];
    uint8_t           rxBuf[NFCIP_ATRRES_BUF_LEN];
    
    
    if( (param == NULL) || (atrRes == NULL) || (atrResLen == NULL) )
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d005      	beq.n	8012656 <rfalNfcDepATR+0x1e>
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d002      	beq.n	8012656 <rfalNfcDepATR+0x1e>
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d101      	bne.n	801265a <rfalNfcDepATR+0x22>
    {
        return ERR_PARAM;
 8012656:	2307      	movs	r3, #7
 8012658:	e0bb      	b.n	80127d2 <rfalNfcDepATR+0x19a>
    
    /*******************************************************************************/
    /* Configure NFC-DEP layer                                                     */
    /*******************************************************************************/
    
    cfg.did  = param->DID;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	7a5b      	ldrb	r3, [r3, #9]
 801265e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    cfg.nad  = param->NAD;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	7a9b      	ldrb	r3, [r3, #10]
 8012666:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
    cfg.fwt  = RFAL_NFCDEP_MAX_FWT;
 801266a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801266e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    cfg.dFwt = RFAL_NFCDEP_MAX_FWT;
 8012672:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012676:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    cfg.br   = param->BR;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	7b1b      	ldrb	r3, [r3, #12]
 801267e:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    cfg.bs   = param->BS;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	7adb      	ldrb	r3, [r3, #11]
 8012686:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    cfg.lr   = param->LR;
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	7b5b      	ldrb	r3, [r3, #13]
 801268e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    cfg.to   = RFAL_NFCDEP_WT_TRG_MAX;            /* Not used in Initiator mode */
 8012692:	230e      	movs	r3, #14
 8012694:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
    
    
    cfg.gbLen = param->GBLen;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	7d1b      	ldrb	r3, [r3, #20]
 801269c:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    if( cfg.gbLen > 0U )                          /* MISRA 21.18 */
 80126a0:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d00a      	beq.n	80126be <rfalNfcDepATR+0x86>
    {
        ST_MEMCPY( cfg.gb, param->GB, cfg.gbLen );
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	6919      	ldr	r1, [r3, #16]
 80126ac:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80126b0:	461a      	mov	r2, r3
 80126b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80126b6:	3312      	adds	r3, #18
 80126b8:	4618      	mov	r0, r3
 80126ba:	f006 fb29 	bl	8018d10 <memcpy>
    }
    
    cfg.nfcidLen = param->nfcidLen;
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	7a1b      	ldrb	r3, [r3, #8]
 80126c2:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
    if( cfg.nfcidLen > 0U )                       /* MISRA 21.18 */
 80126c6:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d00a      	beq.n	80126e4 <rfalNfcDepATR+0xac>
    {
        ST_MEMCPY( cfg.nfcid, param->nfcid, cfg.nfcidLen );
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	6859      	ldr	r1, [r3, #4]
 80126d2:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80126d6:	461a      	mov	r2, r3
 80126d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80126dc:	3307      	adds	r3, #7
 80126de:	4618      	mov	r0, r3
 80126e0:	f006 fb16 	bl	8018d10 <memcpy>
    }
    
    cfg.role     = RFAL_NFCDEP_ROLE_INITIATOR;
 80126e4:	2300      	movs	r3, #0
 80126e6:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
    cfg.oper     = param->operParam;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	785b      	ldrb	r3, [r3, #1]
 80126ee:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    cfg.commMode = param->commMode;
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	781b      	ldrb	r3, [r3, #0]
 80126f6:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

    rfalNfcDepInitialize();
 80126fa:	f7ff fdaf 	bl	801225c <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 80126fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012702:	4618      	mov	r0, r3
 8012704:	f7ff fc38 	bl	8011f78 <nfcipConfig>
    
    /*******************************************************************************/
    /* Send ATR_REQ                                                                */
    /*******************************************************************************/
    
    EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 8012708:	4b34      	ldr	r3, [pc, #208]	; (80127dc <rfalNfcDepATR+0x1a4>)
 801270a:	785b      	ldrb	r3, [r3, #1]
 801270c:	2b01      	cmp	r3, #1
 801270e:	d101      	bne.n	8012714 <rfalNfcDepATR+0xdc>
 8012710:	4a33      	ldr	r2, [pc, #204]	; (80127e0 <rfalNfcDepATR+0x1a8>)
 8012712:	e000      	b.n	8012716 <rfalNfcDepATR+0xde>
 8012714:	4a33      	ldr	r2, [pc, #204]	; (80127e4 <rfalNfcDepATR+0x1ac>)
 8012716:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801271a:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 801271e:	9303      	str	r3, [sp, #12]
 8012720:	2341      	movs	r3, #65	; 0x41
 8012722:	9302      	str	r3, [sp, #8]
 8012724:	f107 0314 	add.w	r3, r7, #20
 8012728:	9301      	str	r3, [sp, #4]
 801272a:	2300      	movs	r3, #0
 801272c:	9300      	str	r3, [sp, #0]
 801272e:	2300      	movs	r3, #0
 8012730:	2000      	movs	r0, #0
 8012732:	f7fe fabd 	bl	8010cb0 <nfcipTxRx>
 8012736:	4603      	mov	r3, r0
 8012738:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 801273c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8012740:	2b00      	cmp	r3, #0
 8012742:	d002      	beq.n	801274a <rfalNfcDepATR+0x112>
 8012744:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8012748:	e043      	b.n	80127d2 <rfalNfcDepATR+0x19a>
    
    
    /*******************************************************************************/
    /* ATR sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 801274a:	2300      	movs	r3, #0
 801274c:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 8012750:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8012754:	1c5a      	adds	r2, r3, #1
 8012756:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 801275a:	33f0      	adds	r3, #240	; 0xf0
 801275c:	443b      	add	r3, r7
 801275e:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8012762:	b29b      	uxth	r3, r3
 8012764:	3b01      	subs	r3, #1
 8012766:	b29b      	uxth	r3, r3
 8012768:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 801276c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8012770:	2b10      	cmp	r3, #16
 8012772:	d903      	bls.n	801277c <rfalNfcDepATR+0x144>
 8012774:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8012778:	2b40      	cmp	r3, #64	; 0x40
 801277a:	d901      	bls.n	8012780 <rfalNfcDepATR+0x148>
    {
        return ERR_PROTO;
 801277c:	230b      	movs	r3, #11
 801277e:	e028      	b.n	80127d2 <rfalNfcDepATR+0x19a>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                                                   /* Checking if is a response*/
 8012780:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8012784:	1c5a      	adds	r2, r3, #1
 8012786:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 801278a:	33f0      	adds	r3, #240	; 0xf0
 801278c:	443b      	add	r3, r7
 801278e:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8012792:	2bd5      	cmp	r3, #213	; 0xd5
 8012794:	d001      	beq.n	801279a <rfalNfcDepATR+0x162>
    {
        return ERR_PROTO;
 8012796:	230b      	movs	r3, #11
 8012798:	e01b      	b.n	80127d2 <rfalNfcDepATR+0x19a>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_RES )                                  /* Checking if is a ATR RES */
 801279a:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 801279e:	1c5a      	adds	r2, r3, #1
 80127a0:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 80127a4:	33f0      	adds	r3, #240	; 0xf0
 80127a6:	443b      	add	r3, r7
 80127a8:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 80127ac:	2b01      	cmp	r3, #1
 80127ae:	d001      	beq.n	80127b4 <rfalNfcDepATR+0x17c>
    {
        return ERR_PROTO;
 80127b0:	230b      	movs	r3, #11
 80127b2:	e00e      	b.n	80127d2 <rfalNfcDepATR+0x19a>
    }
    
    ST_MEMCPY( (uint8_t*)atrRes, (rxBuf + RFAL_NFCDEP_LEN_LEN), rxLen );
 80127b4:	f107 0314 	add.w	r3, r7, #20
 80127b8:	3301      	adds	r3, #1
 80127ba:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 80127be:	4619      	mov	r1, r3
 80127c0:	68b8      	ldr	r0, [r7, #8]
 80127c2:	f006 faa5 	bl	8018d10 <memcpy>
    *atrResLen = (uint8_t)rxLen;
 80127c6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80127ca:	b2da      	uxtb	r2, r3
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 80127d0:	2300      	movs	r3, #0
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	37f0      	adds	r7, #240	; 0xf0
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}
 80127da:	bf00      	nop
 80127dc:	2000376c 	.word	0x2000376c
 80127e0:	00200201 	.word	0x00200201
 80127e4:	01000201 	.word	0x01000201

080127e8 <rfalNfcDepPSL>:


/*******************************************************************************/
ReturnCode rfalNfcDepPSL( uint8_t BRS, uint8_t FSL )
{
 80127e8:	b590      	push	{r4, r7, lr}
 80127ea:	b08b      	sub	sp, #44	; 0x2c
 80127ec:	af04      	add	r7, sp, #16
 80127ee:	4603      	mov	r3, r0
 80127f0:	460a      	mov	r2, r1
 80127f2:	71fb      	strb	r3, [r7, #7]
 80127f4:	4613      	mov	r3, r2
 80127f6:	71bb      	strb	r3, [r7, #6]
    uint16_t   rxLen;
    uint8_t    msgIt;
    uint8_t    txBuf[NFCIP_PSLREQ_LEN + NFCIP_PSLPAY_LEN];
    uint8_t    rxBuf[NFCIP_PSLRES_LEN];
    
    msgIt = NFCIP_PSLREQ_LEN;
 80127f8:	2304      	movs	r3, #4
 80127fa:	75fb      	strb	r3, [r7, #23]
    
    txBuf[msgIt++] = BRS;
 80127fc:	7dfb      	ldrb	r3, [r7, #23]
 80127fe:	1c5a      	adds	r2, r3, #1
 8012800:	75fa      	strb	r2, [r7, #23]
 8012802:	3318      	adds	r3, #24
 8012804:	443b      	add	r3, r7
 8012806:	79fa      	ldrb	r2, [r7, #7]
 8012808:	f803 2c0c 	strb.w	r2, [r3, #-12]
    txBuf[msgIt++] = FSL;
 801280c:	7dfb      	ldrb	r3, [r7, #23]
 801280e:	1c5a      	adds	r2, r3, #1
 8012810:	75fa      	strb	r2, [r7, #23]
 8012812:	3318      	adds	r3, #24
 8012814:	443b      	add	r3, r7
 8012816:	79ba      	ldrb	r2, [r7, #6]
 8012818:	f803 2c0c 	strb.w	r2, [r3, #-12]
    
    /*******************************************************************************/
    /* Send PSL REQ and wait for response                                          */
    /*******************************************************************************/
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, nfcipRWTActivation(), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 801281c:	4b2d      	ldr	r3, [pc, #180]	; (80128d4 <rfalNfcDepPSL+0xec>)
 801281e:	785b      	ldrb	r3, [r3, #1]
 8012820:	2b01      	cmp	r3, #1
 8012822:	d101      	bne.n	8012828 <rfalNfcDepPSL+0x40>
 8012824:	482c      	ldr	r0, [pc, #176]	; (80128d8 <rfalNfcDepPSL+0xf0>)
 8012826:	e000      	b.n	801282a <rfalNfcDepPSL+0x42>
 8012828:	482c      	ldr	r0, [pc, #176]	; (80128dc <rfalNfcDepPSL+0xf4>)
 801282a:	7dfb      	ldrb	r3, [r7, #23]
 801282c:	3b04      	subs	r3, #4
 801282e:	b2db      	uxtb	r3, r3
 8012830:	f107 020c 	add.w	r2, r7, #12
 8012834:	1d14      	adds	r4, r2, #4
 8012836:	f107 010c 	add.w	r1, r7, #12
 801283a:	f107 0212 	add.w	r2, r7, #18
 801283e:	9203      	str	r2, [sp, #12]
 8012840:	2204      	movs	r2, #4
 8012842:	9202      	str	r2, [sp, #8]
 8012844:	f107 0208 	add.w	r2, r7, #8
 8012848:	9201      	str	r2, [sp, #4]
 801284a:	9300      	str	r3, [sp, #0]
 801284c:	4623      	mov	r3, r4
 801284e:	4602      	mov	r2, r0
 8012850:	2004      	movs	r0, #4
 8012852:	f7fe fa2d 	bl	8010cb0 <nfcipTxRx>
 8012856:	4603      	mov	r3, r0
 8012858:	82bb      	strh	r3, [r7, #20]
 801285a:	8abb      	ldrh	r3, [r7, #20]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d001      	beq.n	8012864 <rfalNfcDepPSL+0x7c>
 8012860:	8abb      	ldrh	r3, [r7, #20]
 8012862:	e033      	b.n	80128cc <rfalNfcDepPSL+0xe4>
    
    
    /*******************************************************************************/
    /* PSL sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 8012864:	2300      	movs	r3, #0
 8012866:	75fb      	strb	r3, [r7, #23]
    rxLen = (uint16_t)(rxBuf[msgIt++]);                /* use LEN byte                   */
 8012868:	7dfb      	ldrb	r3, [r7, #23]
 801286a:	1c5a      	adds	r2, r3, #1
 801286c:	75fa      	strb	r2, [r7, #23]
 801286e:	3318      	adds	r3, #24
 8012870:	443b      	add	r3, r7
 8012872:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8012876:	b29b      	uxth	r3, r3
 8012878:	827b      	strh	r3, [r7, #18]
        
    if( rxLen < NFCIP_PSLRES_LEN )                     /* Checking length: LEN + RLS_RES */
 801287a:	8a7b      	ldrh	r3, [r7, #18]
 801287c:	2b03      	cmp	r3, #3
 801287e:	d801      	bhi.n	8012884 <rfalNfcDepPSL+0x9c>
    {
        return ERR_PROTO;
 8012880:	230b      	movs	r3, #11
 8012882:	e023      	b.n	80128cc <rfalNfcDepPSL+0xe4>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                  /* Checking if is a response      */
 8012884:	7dfb      	ldrb	r3, [r7, #23]
 8012886:	1c5a      	adds	r2, r3, #1
 8012888:	75fa      	strb	r2, [r7, #23]
 801288a:	3318      	adds	r3, #24
 801288c:	443b      	add	r3, r7
 801288e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8012892:	2bd5      	cmp	r3, #213	; 0xd5
 8012894:	d001      	beq.n	801289a <rfalNfcDepPSL+0xb2>
    {
        return ERR_PROTO;
 8012896:	230b      	movs	r3, #11
 8012898:	e018      	b.n	80128cc <rfalNfcDepPSL+0xe4>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_PSL_RES ) /* Checking if is a PSL RES       */
 801289a:	7dfb      	ldrb	r3, [r7, #23]
 801289c:	1c5a      	adds	r2, r3, #1
 801289e:	75fa      	strb	r2, [r7, #23]
 80128a0:	3318      	adds	r3, #24
 80128a2:	443b      	add	r3, r7
 80128a4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80128a8:	2b05      	cmp	r3, #5
 80128aa:	d001      	beq.n	80128b0 <rfalNfcDepPSL+0xc8>
    {
        return ERR_PROTO;
 80128ac:	230b      	movs	r3, #11
 80128ae:	e00d      	b.n	80128cc <rfalNfcDepPSL+0xe4>
    }
    
    if( rxBuf[msgIt++] != gNfcip.cfg.did )             /* Checking DID                   */
 80128b0:	7dfb      	ldrb	r3, [r7, #23]
 80128b2:	1c5a      	adds	r2, r3, #1
 80128b4:	75fa      	strb	r2, [r7, #23]
 80128b6:	3318      	adds	r3, #24
 80128b8:	443b      	add	r3, r7
 80128ba:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80128be:	4b05      	ldr	r3, [pc, #20]	; (80128d4 <rfalNfcDepPSL+0xec>)
 80128c0:	78db      	ldrb	r3, [r3, #3]
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d001      	beq.n	80128ca <rfalNfcDepPSL+0xe2>
    {
        return ERR_PROTO;
 80128c6:	230b      	movs	r3, #11
 80128c8:	e000      	b.n	80128cc <rfalNfcDepPSL+0xe4>
    }
    
    return ERR_NONE;
 80128ca:	2300      	movs	r3, #0
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	371c      	adds	r7, #28
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd90      	pop	{r4, r7, pc}
 80128d4:	2000376c 	.word	0x2000376c
 80128d8:	00200201 	.word	0x00200201
 80128dc:	01000201 	.word	0x01000201

080128e0 <rfalNfcDepRLS>:
}


/*******************************************************************************/
ReturnCode rfalNfcDepRLS( void )
{   
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b08a      	sub	sp, #40	; 0x28
 80128e4:	af04      	add	r7, sp, #16
    ReturnCode ret;
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_RLSREQ_LEN];
    uint8_t    rxBuf[NFCIP_RLSRES_LEN];    
    uint8_t    rxMsgIt;
    uint16_t   rxLen = 0;
 80128e6:	2300      	movs	r3, #0
 80128e8:	80fb      	strh	r3, [r7, #6]
    
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 80128ea:	4b2e      	ldr	r3, [pc, #184]	; (80129a4 <rfalNfcDepRLS+0xc4>)
 80128ec:	781b      	ldrb	r3, [r3, #0]
 80128ee:	2b01      	cmp	r3, #1
 80128f0:	d101      	bne.n	80128f6 <rfalNfcDepRLS+0x16>
    {
        return ERR_NONE;
 80128f2:	2300      	movs	r3, #0
 80128f4:	e051      	b.n	801299a <rfalNfcDepRLS+0xba>
    }
        
    /* Repeating a RLS REQ is optional, not doing it */
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_RLS_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, RFAL_NFCDEP_ATRRES_MAX_LEN, &rxLen  ) );
 80128f6:	4b2b      	ldr	r3, [pc, #172]	; (80129a4 <rfalNfcDepRLS+0xc4>)
 80128f8:	785b      	ldrb	r3, [r3, #1]
 80128fa:	2b01      	cmp	r3, #1
 80128fc:	d101      	bne.n	8012902 <rfalNfcDepRLS+0x22>
 80128fe:	4a2a      	ldr	r2, [pc, #168]	; (80129a8 <rfalNfcDepRLS+0xc8>)
 8012900:	e000      	b.n	8012904 <rfalNfcDepRLS+0x24>
 8012902:	4a2a      	ldr	r2, [pc, #168]	; (80129ac <rfalNfcDepRLS+0xcc>)
 8012904:	f107 010c 	add.w	r1, r7, #12
 8012908:	1dbb      	adds	r3, r7, #6
 801290a:	9303      	str	r3, [sp, #12]
 801290c:	2340      	movs	r3, #64	; 0x40
 801290e:	9302      	str	r3, [sp, #8]
 8012910:	f107 0308 	add.w	r3, r7, #8
 8012914:	9301      	str	r3, [sp, #4]
 8012916:	2300      	movs	r3, #0
 8012918:	9300      	str	r3, [sp, #0]
 801291a:	2300      	movs	r3, #0
 801291c:	200a      	movs	r0, #10
 801291e:	f7fe f9c7 	bl	8010cb0 <nfcipTxRx>
 8012922:	4603      	mov	r3, r0
 8012924:	82fb      	strh	r3, [r7, #22]
 8012926:	8afb      	ldrh	r3, [r7, #22]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d001      	beq.n	8012930 <rfalNfcDepRLS+0x50>
 801292c:	8afb      	ldrh	r3, [r7, #22]
 801292e:	e034      	b.n	801299a <rfalNfcDepRLS+0xba>
    
    /*******************************************************************************/
    rxMsgIt = 0;
 8012930:	2300      	movs	r3, #0
 8012932:	757b      	strb	r3, [r7, #21]
       
    if( rxBuf[rxMsgIt++] < NFCIP_RLSRES_MIN )             /* Checking length: LEN + RLS_RES */
 8012934:	7d7b      	ldrb	r3, [r7, #21]
 8012936:	1c5a      	adds	r2, r3, #1
 8012938:	757a      	strb	r2, [r7, #21]
 801293a:	3318      	adds	r3, #24
 801293c:	443b      	add	r3, r7
 801293e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8012942:	2b02      	cmp	r3, #2
 8012944:	d801      	bhi.n	801294a <rfalNfcDepRLS+0x6a>
    {
        return ERR_PROTO;
 8012946:	230b      	movs	r3, #11
 8012948:	e027      	b.n	801299a <rfalNfcDepRLS+0xba>
    }
        
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 801294a:	7d7b      	ldrb	r3, [r7, #21]
 801294c:	1c5a      	adds	r2, r3, #1
 801294e:	757a      	strb	r2, [r7, #21]
 8012950:	3318      	adds	r3, #24
 8012952:	443b      	add	r3, r7
 8012954:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8012958:	2bd5      	cmp	r3, #213	; 0xd5
 801295a:	d001      	beq.n	8012960 <rfalNfcDepRLS+0x80>
    {
        return ERR_PROTO;
 801295c:	230b      	movs	r3, #11
 801295e:	e01c      	b.n	801299a <rfalNfcDepRLS+0xba>
    }
    
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_RLS_RES )  /* Checking if is RLS RES         */
 8012960:	7d7b      	ldrb	r3, [r7, #21]
 8012962:	1c5a      	adds	r2, r3, #1
 8012964:	757a      	strb	r2, [r7, #21]
 8012966:	3318      	adds	r3, #24
 8012968:	443b      	add	r3, r7
 801296a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 801296e:	2b0b      	cmp	r3, #11
 8012970:	d001      	beq.n	8012976 <rfalNfcDepRLS+0x96>
    {
        return ERR_PROTO;
 8012972:	230b      	movs	r3, #11
 8012974:	e011      	b.n	801299a <rfalNfcDepRLS+0xba>
    }
     
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8012976:	4b0b      	ldr	r3, [pc, #44]	; (80129a4 <rfalNfcDepRLS+0xc4>)
 8012978:	78db      	ldrb	r3, [r3, #3]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d00c      	beq.n	8012998 <rfalNfcDepRLS+0xb8>
    {
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 801297e:	7d7b      	ldrb	r3, [r7, #21]
 8012980:	1c5a      	adds	r2, r3, #1
 8012982:	757a      	strb	r2, [r7, #21]
 8012984:	3318      	adds	r3, #24
 8012986:	443b      	add	r3, r7
 8012988:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 801298c:	4b05      	ldr	r3, [pc, #20]	; (80129a4 <rfalNfcDepRLS+0xc4>)
 801298e:	78db      	ldrb	r3, [r3, #3]
 8012990:	429a      	cmp	r2, r3
 8012992:	d001      	beq.n	8012998 <rfalNfcDepRLS+0xb8>
        {
            return ERR_PROTO;
 8012994:	230b      	movs	r3, #11
 8012996:	e000      	b.n	801299a <rfalNfcDepRLS+0xba>
        }
    }
    
    return ERR_NONE;
 8012998:	2300      	movs	r3, #0
}
 801299a:	4618      	mov	r0, r3
 801299c:	3718      	adds	r7, #24
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}
 80129a2:	bf00      	nop
 80129a4:	2000376c 	.word	0x2000376c
 80129a8:	00200201 	.word	0x00200201
 80129ac:	01000201 	.word	0x01000201

080129b0 <rfalNfcDepInitiatorHandleActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepInitiatorHandleActivation( rfalNfcDepAtrParam* param, rfalBitRate desiredBR, rfalNfcDepDevice* nfcDepDev )
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b086      	sub	sp, #24
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	60f8      	str	r0, [r7, #12]
 80129b8:	460b      	mov	r3, r1
 80129ba:	607a      	str	r2, [r7, #4]
 80129bc:	72fb      	strb	r3, [r7, #11]
    uint8_t    maxRetyrs;
    uint8_t    PSL_BRS;
    uint8_t    PSL_FSL;
    bool       sendPSL;
    
    if( (param == NULL) || (nfcDepDev == NULL) )
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d002      	beq.n	80129ca <rfalNfcDepInitiatorHandleActivation+0x1a>
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d101      	bne.n	80129ce <rfalNfcDepInitiatorHandleActivation+0x1e>
    {
        return ERR_PARAM;
 80129ca:	2307      	movs	r3, #7
 80129cc:	e0da      	b.n	8012b84 <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    param->NAD = RFAL_NFCDEP_NAD_NO;          /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	2200      	movs	r2, #0
 80129d2:	729a      	strb	r2, [r3, #10]
    maxRetyrs  = NFCIP_ATR_RETRY_MAX;
 80129d4:	2302      	movs	r3, #2
 80129d6:	75fb      	strb	r3, [r7, #23]
    /*******************************************************************************/
    /* Send ATR REQ and wait for response                                          */
    /*******************************************************************************/
    do{  /* Upon transmission error ATR REQ should be retried */
        
         ret = rfalNfcDepATR( param, &nfcDepDev->activation.Target.ATR_RES, &nfcDepDev->activation.Target.ATR_RESLen );
 80129d8:	6879      	ldr	r1, [r7, #4]
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	3341      	adds	r3, #65	; 0x41
 80129de:	461a      	mov	r2, r3
 80129e0:	68f8      	ldr	r0, [r7, #12]
 80129e2:	f7ff fe29 	bl	8012638 <rfalNfcDepATR>
 80129e6:	4603      	mov	r3, r0
 80129e8:	827b      	strh	r3, [r7, #18]
         
         if( nfcipIsTransmissionError(ret) )
 80129ea:	8a7b      	ldrh	r3, [r7, #18]
 80129ec:	2b15      	cmp	r3, #21
 80129ee:	d005      	beq.n	80129fc <rfalNfcDepInitiatorHandleActivation+0x4c>
 80129f0:	8a7b      	ldrh	r3, [r7, #18]
 80129f2:	2b09      	cmp	r3, #9
 80129f4:	d002      	beq.n	80129fc <rfalNfcDepInitiatorHandleActivation+0x4c>
 80129f6:	8a7b      	ldrh	r3, [r7, #18]
 80129f8:	2b1b      	cmp	r3, #27
 80129fa:	d105      	bne.n	8012a08 <rfalNfcDepInitiatorHandleActivation+0x58>
         {
             continue;
         }
         break;
    }
    while( (maxRetyrs--) != 0U );
 80129fc:	7dfb      	ldrb	r3, [r7, #23]
 80129fe:	1e5a      	subs	r2, r3, #1
 8012a00:	75fa      	strb	r2, [r7, #23]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d1e8      	bne.n	80129d8 <rfalNfcDepInitiatorHandleActivation+0x28>
 8012a06:	e000      	b.n	8012a0a <rfalNfcDepInitiatorHandleActivation+0x5a>
         break;
 8012a08:	bf00      	nop
    
    if( ret != ERR_NONE )
 8012a0a:	8a7b      	ldrh	r3, [r7, #18]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d001      	beq.n	8012a14 <rfalNfcDepInitiatorHandleActivation+0x64>
    {
        return ret;
 8012a10:	8a7b      	ldrh	r3, [r7, #18]
 8012a12:	e0b7      	b.n	8012b84 <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    /*******************************************************************************/
    /* Compute NFC-DEP device with ATR_RES                                         */
    /*******************************************************************************/
    nfcDepDev->info.GBLen = (nfcDepDev->activation.Target.ATR_RESLen - RFAL_NFCDEP_ATRRES_MIN_LEN);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012a1a:	3b11      	subs	r3, #17
 8012a1c:	b2da      	uxtb	r2, r3
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    nfcDepDev->info.DID   = nfcDepDev->activation.Target.ATR_RES.DID;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	7b1a      	ldrb	r2, [r3, #12]
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                                      /* Digital 1.1  16.6.3.11 Initiator SHALL ignore b1 of PPt */
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2200      	movs	r2, #0
 8012a32:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	7c1b      	ldrb	r3, [r3, #16]
 8012a3a:	091b      	lsrs	r3, r3, #4
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	f003 0303 	and.w	r3, r3, #3
 8012a42:	b2da      	uxtb	r2, r3
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012a50:	3301      	adds	r3, #1
 8012a52:	019b      	lsls	r3, r3, #6
 8012a54:	2bfd      	cmp	r3, #253	; 0xfd
 8012a56:	d807      	bhi.n	8012a68 <rfalNfcDepInitiatorHandleActivation+0xb8>
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012a5e:	3301      	adds	r3, #1
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	019b      	lsls	r3, r3, #6
 8012a64:	b29a      	uxth	r2, r3
 8012a66:	e000      	b.n	8012a6a <rfalNfcDepInitiatorHandleActivation+0xba>
 8012a68:	22fe      	movs	r2, #254	; 0xfe
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    nfcDepDev->info.WT    = (nfcDepDev->activation.Target.ATR_RES.TO & RFAL_NFCDEP_WT_MASK);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	7bdb      	ldrb	r3, [r3, #15]
 8012a74:	f003 030f 	and.w	r3, r3, #15
 8012a78:	b2da      	uxtb	r2, r3
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    nfcDepDev->info.FWT   = rfalNfcDepCalculateRWT( nfcDepDev->info.WT );
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a86:	4618      	mov	r0, r3
 8012a88:	f000 f882 	bl	8012b90 <rfalNfcDepCalculateRWT>
 8012a8c:	4602      	mov	r2, r0
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	649a      	str	r2, [r3, #72]	; 0x48
    nfcDepDev->info.dFWT  = RFAL_NFCDEP_WT_DELTA;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	220c      	movs	r2, #12
 8012a96:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	3355      	adds	r3, #85	; 0x55
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	4610      	mov	r0, r2
 8012aa6:	f002 ff6f 	bl	8015988 <rfalGetBitRate>
    
    
    /*******************************************************************************/
    /* Check if a PSL needs to be sent                                                */
    /*******************************************************************************/
    sendPSL = false;
 8012aaa:	2300      	movs	r3, #0
 8012aac:	757b      	strb	r3, [r7, #21]
    PSL_BRS = rfalNfcDepDx2BRS( nfcDepDev->info.DSI );  /* Set current bit rate divisor on both directions  */
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012ab4:	00db      	lsls	r3, r3, #3
 8012ab6:	b2db      	uxtb	r3, r3
 8012ab8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012abc:	b2da      	uxtb	r2, r3
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012ac4:	f003 0307 	and.w	r3, r3, #7
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	4313      	orrs	r3, r2
 8012acc:	75bb      	strb	r3, [r7, #22]
    PSL_FSL = nfcDepDev->info.LR;                       /* Set current Frame Size                           */
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012ad4:	747b      	strb	r3, [r7, #17]
    
    
    /*******************************************************************************/
    /* Check Baud rates                                                            */
    /*******************************************************************************/
    if( nfcDepDev->info.DSI != desiredBR )    /* if desired BR is different    */
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012adc:	7afa      	ldrb	r2, [r7, #11]
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d018      	beq.n	8012b14 <rfalNfcDepInitiatorHandleActivation+0x164>
    {
       /* || (target->brt != RFAL_NFCDEP_Bx_NO_HIGH_BR) || (target->bst != RFAL_NFCDEP_Bx_NO_HIGH_BR)  */  /* if target supports higher BR, must send PSL? */
        if( nfcipDxIsSupported( (uint8_t)desiredBR, nfcDepDev->activation.Target.ATR_RES.BRt, nfcDepDev->activation.Target.ATR_RES.BSt ) )  /* if desired BR is supported     */    /* MISRA 13.5 */
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	7b99      	ldrb	r1, [r3, #14]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	7b5a      	ldrb	r2, [r3, #13]
 8012aea:	7afb      	ldrb	r3, [r7, #11]
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7fe f8bd 	bl	8010c6c <nfcipDxIsSupported>
 8012af2:	4603      	mov	r3, r0
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d00d      	beq.n	8012b14 <rfalNfcDepInitiatorHandleActivation+0x164>
        {
            sendPSL = true;
 8012af8:	2301      	movs	r3, #1
 8012afa:	757b      	strb	r3, [r7, #21]
            PSL_BRS = rfalNfcDepDx2BRS( desiredBR );
 8012afc:	7afb      	ldrb	r3, [r7, #11]
 8012afe:	00db      	lsls	r3, r3, #3
 8012b00:	b2db      	uxtb	r3, r3
 8012b02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012b06:	b2da      	uxtb	r2, r3
 8012b08:	7afb      	ldrb	r3, [r7, #11]
 8012b0a:	f003 0307 	and.w	r3, r3, #7
 8012b0e:	b2db      	uxtb	r3, r3
 8012b10:	4313      	orrs	r3, r2
 8012b12:	75bb      	strb	r3, [r7, #22]
        }
    }

    
    /*******************************************************************************/
    if( sendPSL )
 8012b14:	7d7b      	ldrb	r3, [r7, #21]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d033      	beq.n	8012b82 <rfalNfcDepInitiatorHandleActivation+0x1d2>
    {
        /*******************************************************************************/
        /* Send PSL REQ and wait for response                                          */
        /*******************************************************************************/
        EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 8012b1a:	7c7a      	ldrb	r2, [r7, #17]
 8012b1c:	7dbb      	ldrb	r3, [r7, #22]
 8012b1e:	4611      	mov	r1, r2
 8012b20:	4618      	mov	r0, r3
 8012b22:	f7ff fe61 	bl	80127e8 <rfalNfcDepPSL>
 8012b26:	4603      	mov	r3, r0
 8012b28:	827b      	strh	r3, [r7, #18]
 8012b2a:	8a7b      	ldrh	r3, [r7, #18]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d001      	beq.n	8012b34 <rfalNfcDepInitiatorHandleActivation+0x184>
 8012b30:	8a7b      	ldrh	r3, [r7, #18]
 8012b32:	e027      	b.n	8012b84 <rfalNfcDepInitiatorHandleActivation+0x1d4>
        
        /* Check if bit rate has been changed */
        if( nfcDepDev->info.DSI != desiredBR )
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012b3a:	7afa      	ldrb	r2, [r7, #11]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d01e      	beq.n	8012b7e <rfalNfcDepInitiatorHandleActivation+0x1ce>
        {
            /* Check if device was in Passive NFC-A and went to higher bit rates, use NFC-F */
            if( (nfcDepDev->info.DSI == RFAL_BR_106) && (gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_PASSIVE) )
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d107      	bne.n	8012b5a <rfalNfcDepInitiatorHandleActivation+0x1aa>
 8012b4a:	4b10      	ldr	r3, [pc, #64]	; (8012b8c <rfalNfcDepInitiatorHandleActivation+0x1dc>)
 8012b4c:	785b      	ldrb	r3, [r3, #1]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d103      	bne.n	8012b5a <rfalNfcDepInitiatorHandleActivation+0x1aa>
            {
                
            #if RFAL_FEATURE_NFCF 
                /* If Passive initialize NFC-F module */
                rfalNfcfPollerInitialize( desiredBR );
 8012b52:	7afb      	ldrb	r3, [r7, #11]
 8012b54:	4618      	mov	r0, r3
 8012b56:	f001 fa63 	bl	8014020 <rfalNfcfPollerInitialize>
                return ERR_NOTSUPP;
            #endif /* RFAL_FEATURE_NFCF */
                
            }
            
            nfcDepDev->info.DRI  = desiredBR;  /* DSI Bit Rate coding from Initiator  to Target  */
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	7afa      	ldrb	r2, [r7, #11]
 8012b5e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            nfcDepDev->info.DSI  = desiredBR;  /* DRI Bit Rate coding from Target to Initiator   */
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	7afa      	ldrb	r2, [r7, #11]
 8012b66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8012b76:	4619      	mov	r1, r3
 8012b78:	4610      	mov	r0, r2
 8012b7a:	f002 fca1 	bl	80154c0 <rfalSetBitRate>
        }
        
        
        return ERR_NONE;   /* PSL has been sent    */
 8012b7e:	2300      	movs	r3, #0
 8012b80:	e000      	b.n	8012b84 <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    return ERR_NONE;       /* No PSL has been sent */
 8012b82:	2300      	movs	r3, #0
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3718      	adds	r7, #24
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	2000376c 	.word	0x2000376c

08012b90 <rfalNfcDepCalculateRWT>:


/*******************************************************************************/
uint32_t rfalNfcDepCalculateRWT( uint8_t wt )
{
 8012b90:	b480      	push	{r7}
 8012b92:	b085      	sub	sp, #20
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	4603      	mov	r3, r0
 8012b98:	71fb      	strb	r3, [r7, #7]
    /* Digital 1.0  14.6.3.8  &  Digital 1.1  16.6.3.9     */
    /* Digital 1.1  16.6.3.9 treat all RFU values as WT=14 */
    uint8_t responseWaitTime = MIN( RFAL_NFCDEP_WT_INI_MAX, wt );
 8012b9a:	79fb      	ldrb	r3, [r7, #7]
 8012b9c:	2b0e      	cmp	r3, #14
 8012b9e:	bf28      	it	cs
 8012ba0:	230e      	movcs	r3, #14
 8012ba2:	73fb      	strb	r3, [r7, #15]
        
    return (uint32_t)rfalNfcDepWT2RWT(responseWaitTime);
 8012ba4:	7bfb      	ldrb	r3, [r7, #15]
 8012ba6:	f003 030f 	and.w	r3, r3, #15
 8012baa:	330c      	adds	r3, #12
 8012bac:	2201      	movs	r2, #1
 8012bae:	fa02 f303 	lsl.w	r3, r2, r3
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3714      	adds	r7, #20
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bc80      	pop	{r7}
 8012bba:	4770      	bx	lr

08012bbc <nfcipDataTx>:



/*******************************************************************************/
static ReturnCode nfcipDataTx( uint8_t* txBuf, uint16_t txBufLen, uint32_t fwt )
{
 8012bbc:	b590      	push	{r4, r7, lr}
 8012bbe:	b089      	sub	sp, #36	; 0x24
 8012bc0:	af04      	add	r7, sp, #16
 8012bc2:	60f8      	str	r0, [r7, #12]
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	607a      	str	r2, [r7, #4]
 8012bc8:	817b      	strh	r3, [r7, #10]
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 8012bca:	4b0b      	ldr	r3, [pc, #44]	; (8012bf8 <nfcipDataTx+0x3c>)
 8012bcc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8012bce:	4b0a      	ldr	r3, [pc, #40]	; (8012bf8 <nfcipDataTx+0x3c>)
 8012bd0:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 8012bd4:	4b08      	ldr	r3, [pc, #32]	; (8012bf8 <nfcipDataTx+0x3c>)
 8012bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bd8:	8979      	ldrh	r1, [r7, #10]
 8012bda:	687a      	ldr	r2, [r7, #4]
 8012bdc:	9202      	str	r2, [sp, #8]
 8012bde:	2204      	movs	r2, #4
 8012be0:	9201      	str	r2, [sp, #4]
 8012be2:	9300      	str	r3, [sp, #0]
 8012be4:	4623      	mov	r3, r4
 8012be6:	4602      	mov	r2, r0
 8012be8:	68f8      	ldr	r0, [r7, #12]
 8012bea:	f003 f925 	bl	8015e38 <rfalTransceiveBlockingTx>
 8012bee:	4603      	mov	r3, r0
}
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	3714      	adds	r7, #20
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd90      	pop	{r4, r7, pc}
 8012bf8:	2000376c 	.word	0x2000376c

08012bfc <nfcipDataRx>:


/*******************************************************************************/
static ReturnCode nfcipDataRx( bool blocking )
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b084      	sub	sp, #16
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	4603      	mov	r3, r0
 8012c04:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    /* Perform Rx either blocking or non-blocking */
    if( blocking )
 8012c06:	79fb      	ldrb	r3, [r7, #7]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d004      	beq.n	8012c16 <nfcipDataRx+0x1a>
    {
        ret = rfalTransceiveBlockingRx();
 8012c0c:	f003 f960 	bl	8015ed0 <rfalTransceiveBlockingRx>
 8012c10:	4603      	mov	r3, r0
 8012c12:	81fb      	strh	r3, [r7, #14]
 8012c14:	e003      	b.n	8012c1e <nfcipDataRx+0x22>
    }
    else
    {
        ret = rfalGetTransceiveStatus();
 8012c16:	f003 f9c5 	bl	8015fa4 <rfalGetTransceiveStatus>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	81fb      	strh	r3, [r7, #14]
    }
    
    if( ret != ERR_BUSY )
 8012c1e:	89fb      	ldrh	r3, [r7, #14]
 8012c20:	2b02      	cmp	r3, #2
 8012c22:	d028      	beq.n	8012c76 <nfcipDataRx+0x7a>
    {
        if( gNfcip.rxRcvdLen != NULL )
 8012c24:	4b16      	ldr	r3, [pc, #88]	; (8012c80 <nfcipDataRx+0x84>)
 8012c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d024      	beq.n	8012c76 <nfcipDataRx+0x7a>
        {
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 8012c2c:	4b14      	ldr	r3, [pc, #80]	; (8012c80 <nfcipDataRx+0x84>)
 8012c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c30:	881b      	ldrh	r3, [r3, #0]
 8012c32:	3307      	adds	r3, #7
 8012c34:	08da      	lsrs	r2, r3, #3
 8012c36:	4b12      	ldr	r3, [pc, #72]	; (8012c80 <nfcipDataRx+0x84>)
 8012c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c3a:	b292      	uxth	r2, r2
 8012c3c:	801a      	strh	r2, [r3, #0]
                        
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 8012c3e:	89fb      	ldrh	r3, [r7, #14]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d118      	bne.n	8012c76 <nfcipDataRx+0x7a>
 8012c44:	4b0e      	ldr	r3, [pc, #56]	; (8012c80 <nfcipDataRx+0x84>)
 8012c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d014      	beq.n	8012c76 <nfcipDataRx+0x7a>
            {
                /* Digital 1.1  16.4.1.3 - Length byte LEN SHALL have a value between 3 and 255 -> otherwise treat as Transmission Error *
                 *                       - Ensure that actual received and frame length do match, otherwise treat as Transmission error  */
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 8012c4c:	4b0c      	ldr	r3, [pc, #48]	; (8012c80 <nfcipDataRx+0x84>)
 8012c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c50:	881a      	ldrh	r2, [r3, #0]
 8012c52:	4b0b      	ldr	r3, [pc, #44]	; (8012c80 <nfcipDataRx+0x84>)
 8012c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012c56:	781b      	ldrb	r3, [r3, #0]
 8012c58:	b29b      	uxth	r3, r3
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	d109      	bne.n	8012c72 <nfcipDataRx+0x76>
 8012c5e:	4b08      	ldr	r3, [pc, #32]	; (8012c80 <nfcipDataRx+0x84>)
 8012c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c62:	881b      	ldrh	r3, [r3, #0]
 8012c64:	2b02      	cmp	r3, #2
 8012c66:	d904      	bls.n	8012c72 <nfcipDataRx+0x76>
 8012c68:	4b05      	ldr	r3, [pc, #20]	; (8012c80 <nfcipDataRx+0x84>)
 8012c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c6c:	881b      	ldrh	r3, [r3, #0]
 8012c6e:	2bff      	cmp	r3, #255	; 0xff
 8012c70:	d901      	bls.n	8012c76 <nfcipDataRx+0x7a>
                {
                    return ERR_FRAMING;
 8012c72:	2309      	movs	r3, #9
 8012c74:	e000      	b.n	8012c78 <nfcipDataRx+0x7c>
                }
            }
        }
    }
    
    return ret;
 8012c76:	89fb      	ldrh	r3, [r7, #14]
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3710      	adds	r7, #16
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}
 8012c80:	2000376c 	.word	0x2000376c

08012c84 <rfalNfcDepListenStartActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenStartActivation( const rfalNfcDepTargetParam *param, const uint8_t *atrReq, uint16_t atrReqLength, rfalNfcDepListenActvParam rxParam )
{
 8012c84:	b082      	sub	sp, #8
 8012c86:	b580      	push	{r7, lr}
 8012c88:	b09c      	sub	sp, #112	; 0x70
 8012c8a:	af02      	add	r7, sp, #8
 8012c8c:	60f8      	str	r0, [r7, #12]
 8012c8e:	60b9      	str	r1, [r7, #8]
 8012c90:	677b      	str	r3, [r7, #116]	; 0x74
 8012c92:	4613      	mov	r3, r2
 8012c94:	80fb      	strh	r3, [r7, #6]
    ReturnCode        ret;
    rfalNfcDepConfigs cfg;
    
    
    if( (param == NULL) || (atrReq == NULL) || (rxParam.rxLen == NULL) )
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d005      	beq.n	8012ca8 <rfalNfcDepListenStartActivation+0x24>
 8012c9c:	68bb      	ldr	r3, [r7, #8]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d002      	beq.n	8012ca8 <rfalNfcDepListenStartActivation+0x24>
 8012ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d101      	bne.n	8012cac <rfalNfcDepListenStartActivation+0x28>
    {
        return ERR_PARAM;
 8012ca8:	2307      	movs	r3, #7
 8012caa:	e0f4      	b.n	8012e96 <rfalNfcDepListenStartActivation+0x212>
    }
    
    
    /*******************************************************************************/
    /*  Check whether is a valid ATR_REQ Compute NFC-DEP device                    */
    if( !rfalNfcDepIsAtrReq( atrReq, atrReqLength, NULL ) )
 8012cac:	88fb      	ldrh	r3, [r7, #6]
 8012cae:	2200      	movs	r2, #0
 8012cb0:	4619      	mov	r1, r3
 8012cb2:	68b8      	ldr	r0, [r7, #8]
 8012cb4:	f7ff fb90 	bl	80123d8 <rfalNfcDepIsAtrReq>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	f083 0301 	eor.w	r3, r3, #1
 8012cbe:	b2db      	uxtb	r3, r3
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d001      	beq.n	8012cc8 <rfalNfcDepListenStartActivation+0x44>
    {
        return ERR_PARAM;
 8012cc4:	2307      	movs	r3, #7
 8012cc6:	e0e6      	b.n	8012e96 <rfalNfcDepListenStartActivation+0x212>
    }
    
    rxParam.nfcDepDev->activation.Initiator.ATR_REQLen = (uint8_t)atrReqLength;                   /* nfcipIsAtrReq() is already checking Min and Max buffer lengths */ 
 8012cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012ccc:	88fa      	ldrh	r2, [r7, #6]
 8012cce:	b2d2      	uxtb	r2, r2
 8012cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if( atrReqLength > 0U )                                                                       /* MISRA 21.18 */
 8012cd4:	88fb      	ldrh	r3, [r7, #6]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d007      	beq.n	8012cea <rfalNfcDepListenStartActivation+0x66>
    {
        ST_MEMCPY( (uint8_t*)&rxParam.nfcDepDev->activation.Initiator.ATR_REQ, atrReq, atrReqLength );
 8012cda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012cde:	4618      	mov	r0, r3
 8012ce0:	88fb      	ldrh	r3, [r7, #6]
 8012ce2:	461a      	mov	r2, r3
 8012ce4:	68b9      	ldr	r1, [r7, #8]
 8012ce6:	f006 f813 	bl	8018d10 <memcpy>
    }        
    
    rxParam.nfcDepDev->info.GBLen = (uint8_t)(atrReqLength - RFAL_NFCDEP_ATRREQ_MIN_LEN);
 8012cea:	88fb      	ldrh	r3, [r7, #6]
 8012cec:	b2da      	uxtb	r2, r3
 8012cee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012cf2:	3a10      	subs	r2, #16
 8012cf4:	b2d2      	uxtb	r2, r2
 8012cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    rxParam.nfcDepDev->info.DID   = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 8012cfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012cfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d02:	7b12      	ldrb	r2, [r2, #12]
 8012d04:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    rxParam.nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                        /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 8012d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    rxParam.nfcDepDev->info.LR    = rfalNfcDepPP2LR( rxParam.nfcDepDev->activation.Initiator.ATR_REQ.PPi );
 8012d12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d16:	7bdb      	ldrb	r3, [r3, #15]
 8012d18:	091b      	lsrs	r3, r3, #4
 8012d1a:	b2da      	uxtb	r2, r3
 8012d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d20:	f002 0203 	and.w	r2, r2, #3
 8012d24:	b2d2      	uxtb	r2, r2
 8012d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    rxParam.nfcDepDev->info.FS    = rfalNfcDepLR2FS( rxParam.nfcDepDev->info.LR );
 8012d2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012d32:	3301      	adds	r3, #1
 8012d34:	019b      	lsls	r3, r3, #6
 8012d36:	2bfd      	cmp	r3, #253	; 0xfd
 8012d38:	d808      	bhi.n	8012d4c <rfalNfcDepListenStartActivation+0xc8>
 8012d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012d42:	3301      	adds	r3, #1
 8012d44:	b29b      	uxth	r3, r3
 8012d46:	019b      	lsls	r3, r3, #6
 8012d48:	b29a      	uxth	r2, r3
 8012d4a:	e000      	b.n	8012d4e <rfalNfcDepListenStartActivation+0xca>
 8012d4c:	22fe      	movs	r2, #254	; 0xfe
 8012d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    rxParam.nfcDepDev->info.WT    = 0;
 8012d56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    rxParam.nfcDepDev->info.FWT   = NFCIP_NO_FWT;
 8012d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d64:	f04f 32ff 	mov.w	r2, #4294967295
 8012d68:	649a      	str	r2, [r3, #72]	; 0x48
    rxParam.nfcDepDev->info.dFWT  = NFCIP_NO_FWT;
 8012d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8012d72:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &rxParam.nfcDepDev->info.DSI, &rxParam.nfcDepDev->info.DRI );
 8012d74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d78:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8012d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d80:	3355      	adds	r3, #85	; 0x55
 8012d82:	4619      	mov	r1, r3
 8012d84:	4610      	mov	r0, r2
 8012d86:	f002 fdff 	bl	8015988 <rfalGetBitRate>
    
    
    /* Store Device Info location, updated upon a PSL  */
    gNfcip.nfcDepDev = rxParam.nfcDepDev;
 8012d8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d8e:	4a45      	ldr	r2, [pc, #276]	; (8012ea4 <rfalNfcDepListenStartActivation+0x220>)
 8012d90:	6793      	str	r3, [r2, #120]	; 0x78
    
    
    /*******************************************************************************/
    cfg.did = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 8012d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d96:	7b1b      	ldrb	r3, [r3, #12]
 8012d98:	75fb      	strb	r3, [r7, #23]
    cfg.nad = RFAL_NFCDEP_NAD_NO;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	763b      	strb	r3, [r7, #24]
    
    cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 8012d9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012da2:	65fb      	str	r3, [r7, #92]	; 0x5c
    cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 8012da4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012da8:	663b      	str	r3, [r7, #96]	; 0x60

    cfg.br = param->brt;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	7b1b      	ldrb	r3, [r3, #12]
 8012dae:	76bb      	strb	r3, [r7, #26]
    cfg.bs = param->bst;
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	7adb      	ldrb	r3, [r3, #11]
 8012db4:	767b      	strb	r3, [r7, #25]
    
    cfg.lr = rfalNfcDepPP2LR(param->ppt);
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	7b9b      	ldrb	r3, [r3, #14]
 8012dba:	091b      	lsrs	r3, r3, #4
 8012dbc:	b2db      	uxtb	r3, r3
 8012dbe:	f003 0303 	and.w	r3, r3, #3
 8012dc2:	b2db      	uxtb	r3, r3
 8012dc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    cfg.gbLen = param->GBtLen;
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012dce:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    if( cfg.gbLen > 0U )          /* MISRA 21.18 */
 8012dd2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d00b      	beq.n	8012df2 <rfalNfcDepListenStartActivation+0x16e>
    {
        ST_MEMCPY(cfg.gb, param->GBt, cfg.gbLen);
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	f103 010f 	add.w	r1, r3, #15
 8012de0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012de4:	461a      	mov	r2, r3
 8012de6:	f107 0314 	add.w	r3, r7, #20
 8012dea:	3312      	adds	r3, #18
 8012dec:	4618      	mov	r0, r3
 8012dee:	f005 ff8f 	bl	8018d10 <memcpy>
    }
    
    cfg.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8012df2:	230a      	movs	r3, #10
 8012df4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    ST_MEMCPY(cfg.nfcid, param->nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	1c5a      	adds	r2, r3, #1
 8012dfc:	f107 031b 	add.w	r3, r7, #27
 8012e00:	6810      	ldr	r0, [r2, #0]
 8012e02:	6851      	ldr	r1, [r2, #4]
 8012e04:	6018      	str	r0, [r3, #0]
 8012e06:	6059      	str	r1, [r3, #4]
 8012e08:	8912      	ldrh	r2, [r2, #8]
 8012e0a:	811a      	strh	r2, [r3, #8]

    cfg.to = param->to;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	7b5b      	ldrb	r3, [r3, #13]
 8012e10:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
    
    cfg.role     = RFAL_NFCDEP_ROLE_TARGET;
 8012e14:	2301      	movs	r3, #1
 8012e16:	753b      	strb	r3, [r7, #20]
    cfg.oper     = param->operParam;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012e1e:	75bb      	strb	r3, [r7, #22]
    cfg.commMode = param->commMode;
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	781b      	ldrb	r3, [r3, #0]
 8012e24:	757b      	strb	r3, [r7, #21]

    rfalNfcDepInitialize();
 8012e26:	f7ff fa19 	bl	801225c <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 8012e2a:	f107 0314 	add.w	r3, r7, #20
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7ff f8a2 	bl	8011f78 <nfcipConfig>
        
    
    /*******************************************************************************/
    /*  Reply with ATR RES to Initiator                                            */
    /*******************************************************************************/
    gNfcip.rxBuf        = (uint8_t*)rxParam.rxBuf;
 8012e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012e36:	4a1b      	ldr	r2, [pc, #108]	; (8012ea4 <rfalNfcDepListenStartActivation+0x220>)
 8012e38:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 8012e3a:	4b1a      	ldr	r3, [pc, #104]	; (8012ea4 <rfalNfcDepListenStartActivation+0x220>)
 8012e3c:	f240 1203 	movw	r2, #259	; 0x103
 8012e40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    gNfcip.rxRcvdLen    = rxParam.rxLen;
 8012e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012e46:	4a17      	ldr	r2, [pc, #92]	; (8012ea4 <rfalNfcDepListenStartActivation+0x220>)
 8012e48:	66d3      	str	r3, [r2, #108]	; 0x6c
    gNfcip.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 8012e4a:	4b16      	ldr	r3, [pc, #88]	; (8012ea4 <rfalNfcDepListenStartActivation+0x220>)
 8012e4c:	2205      	movs	r2, #5
 8012e4e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    gNfcip.isChaining   = rxParam.isRxChaining;
 8012e52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e54:	4a13      	ldr	r2, [pc, #76]	; (8012ea4 <rfalNfcDepListenStartActivation+0x220>)
 8012e56:	6753      	str	r3, [r2, #116]	; 0x74
    gNfcip.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 8012e58:	4b12      	ldr	r3, [pc, #72]	; (8012ea4 <rfalNfcDepListenStartActivation+0x220>)
 8012e5a:	2205      	movs	r2, #5
 8012e5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
   
    EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_ATR_RES, (uint8_t*) gNfcip.rxBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 8012e60:	4b10      	ldr	r3, [pc, #64]	; (8012ea4 <rfalNfcDepListenStartActivation+0x220>)
 8012e62:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8012e64:	f04f 33ff 	mov.w	r3, #4294967295
 8012e68:	9301      	str	r3, [sp, #4]
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	9300      	str	r3, [sp, #0]
 8012e6e:	2300      	movs	r3, #0
 8012e70:	2200      	movs	r2, #0
 8012e72:	2001      	movs	r0, #1
 8012e74:	f7fe fef2 	bl	8011c5c <nfcipTx>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8012e7e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d002      	beq.n	8012e8c <rfalNfcDepListenStartActivation+0x208>
 8012e86:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8012e8a:	e004      	b.n	8012e96 <rfalNfcDepListenStartActivation+0x212>
    
    gNfcip.state = NFCIP_ST_TARG_WAIT_ACTV;
 8012e8c:	4b05      	ldr	r3, [pc, #20]	; (8012ea4 <rfalNfcDepListenStartActivation+0x220>)
 8012e8e:	220b      	movs	r2, #11
 8012e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    return ERR_NONE;
 8012e94:	2300      	movs	r3, #0
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3768      	adds	r7, #104	; 0x68
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012ea0:	b002      	add	sp, #8
 8012ea2:	4770      	bx	lr
 8012ea4:	2000376c 	.word	0x2000376c

08012ea8 <rfalNfcDepListenGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenGetActivationStatus( void )
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b086      	sub	sp, #24
 8012eac:	af04      	add	r7, sp, #16
    ReturnCode err;
    uint8_t    BRS;
    
    BRS = RFAL_NFCDEP_BRS_MAINTAIN;
 8012eae:	23c0      	movs	r3, #192	; 0xc0
 8012eb0:	717b      	strb	r3, [r7, #5]
    
    err = nfcipTargetHandleActivation( gNfcip.nfcDepDev, &BRS );
 8012eb2:	4b2f      	ldr	r3, [pc, #188]	; (8012f70 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8012eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012eb6:	1d7a      	adds	r2, r7, #5
 8012eb8:	4611      	mov	r1, r2
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f7ff fac2 	bl	8012444 <nfcipTargetHandleActivation>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	80fb      	strh	r3, [r7, #6]
    
    switch (err)
 8012ec4:	88fb      	ldrh	r3, [r7, #6]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d002      	beq.n	8012ed0 <rfalNfcDepListenGetActivationStatus+0x28>
 8012eca:	2b02      	cmp	r3, #2
 8012ecc:	d048      	beq.n	8012f60 <rfalNfcDepListenGetActivationStatus+0xb8>
 8012ece:	e034      	b.n	8012f3a <rfalNfcDepListenGetActivationStatus+0x92>
    {
        case ERR_NONE:
            
            if( BRS != RFAL_NFCDEP_BRS_MAINTAIN )
 8012ed0:	797b      	ldrb	r3, [r7, #5]
 8012ed2:	2bc0      	cmp	r3, #192	; 0xc0
 8012ed4:	d046      	beq.n	8012f64 <rfalNfcDepListenGetActivationStatus+0xbc>
            {
                /* DSI codes the bit rate from Initiator to Target */
                /* DRI codes the bit rate from Target to Initiator */
                
                if( gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_ACTIVE )
 8012ed6:	4b26      	ldr	r3, [pc, #152]	; (8012f70 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8012ed8:	785b      	ldrb	r3, [r3, #1]
 8012eda:	2b01      	cmp	r3, #1
 8012edc:	d112      	bne.n	8012f04 <rfalNfcDepListenGetActivationStatus+0x5c>
                {
                    EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_LISTEN_ACTIVE_P2P, gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 8012ede:	4b24      	ldr	r3, [pc, #144]	; (8012f70 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8012ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ee2:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 8012ee6:	4b22      	ldr	r3, [pc, #136]	; (8012f70 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8012ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012eea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012eee:	461a      	mov	r2, r3
 8012ef0:	200d      	movs	r0, #13
 8012ef2:	f002 f9d3 	bl	801529c <rfalSetMode>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	80fb      	strh	r3, [r7, #6]
 8012efa:	88fb      	ldrh	r3, [r7, #6]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d031      	beq.n	8012f64 <rfalNfcDepListenGetActivationStatus+0xbc>
 8012f00:	88fb      	ldrh	r3, [r7, #6]
 8012f02:	e031      	b.n	8012f68 <rfalNfcDepListenGetActivationStatus+0xc0>
                }
                else
                {
                    EXIT_ON_ERR( err, rfalSetMode( ((RFAL_BR_106 == gNfcip.nfcDepDev->info.DRI) ? RFAL_MODE_LISTEN_NFCA : RFAL_MODE_LISTEN_NFCF), gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 8012f04:	4b1a      	ldr	r3, [pc, #104]	; (8012f70 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8012f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f08:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d101      	bne.n	8012f14 <rfalNfcDepListenGetActivationStatus+0x6c>
 8012f10:	200a      	movs	r0, #10
 8012f12:	e000      	b.n	8012f16 <rfalNfcDepListenGetActivationStatus+0x6e>
 8012f14:	200c      	movs	r0, #12
 8012f16:	4b16      	ldr	r3, [pc, #88]	; (8012f70 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8012f18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f1a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 8012f1e:	4b14      	ldr	r3, [pc, #80]	; (8012f70 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8012f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f22:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012f26:	461a      	mov	r2, r3
 8012f28:	f002 f9b8 	bl	801529c <rfalSetMode>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	80fb      	strh	r3, [r7, #6]
 8012f30:	88fb      	ldrh	r3, [r7, #6]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d016      	beq.n	8012f64 <rfalNfcDepListenGetActivationStatus+0xbc>
 8012f36:	88fb      	ldrh	r3, [r7, #6]
 8012f38:	e016      	b.n	8012f68 <rfalNfcDepListenGetActivationStatus+0xc0>
            break;
            
        case ERR_PROTO:
        default:
            // re-enable receiving of data
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8012f3a:	4b0d      	ldr	r3, [pc, #52]	; (8012f70 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8012f3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012f3e:	4b0c      	ldr	r3, [pc, #48]	; (8012f70 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8012f40:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8012f44:	4b0a      	ldr	r3, [pc, #40]	; (8012f70 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8012f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f48:	f04f 30ff 	mov.w	r0, #4294967295
 8012f4c:	9002      	str	r0, [sp, #8]
 8012f4e:	2004      	movs	r0, #4
 8012f50:	9001      	str	r0, [sp, #4]
 8012f52:	9300      	str	r3, [sp, #0]
 8012f54:	460b      	mov	r3, r1
 8012f56:	2100      	movs	r1, #0
 8012f58:	2000      	movs	r0, #0
 8012f5a:	f002 ff6d 	bl	8015e38 <rfalTransceiveBlockingTx>
            break;
 8012f5e:	e002      	b.n	8012f66 <rfalNfcDepListenGetActivationStatus+0xbe>
            break;
 8012f60:	bf00      	nop
 8012f62:	e000      	b.n	8012f66 <rfalNfcDepListenGetActivationStatus+0xbe>
            break;
 8012f64:	bf00      	nop
    } // if (no err)
    
    return err;
 8012f66:	88fb      	ldrh	r3, [r7, #6]
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	3708      	adds	r7, #8
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}
 8012f70:	2000376c 	.word	0x2000376c

08012f74 <rfalNfcDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalNfcDepStartTransceive( rfalNfcDepTxRxParam *param )
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b08a      	sub	sp, #40	; 0x28
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
    rfalNfcDepDEPParams nfcDepParams;
    
    nfcDepParams.txBuf        = (uint8_t *)param->txBuf;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	60fb      	str	r3, [r7, #12]
    nfcDepParams.txBufLen     = param->txBufLen;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	889b      	ldrh	r3, [r3, #4]
 8012f86:	823b      	strh	r3, [r7, #16]
    nfcDepParams.txChaining   = param->isTxChaining;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	799b      	ldrb	r3, [r3, #6]
 8012f8c:	74fb      	strb	r3, [r7, #19]
    nfcDepParams.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;  /* position in txBuf where actual outgoing data is located */
 8012f8e:	2305      	movs	r3, #5
 8012f90:	74bb      	strb	r3, [r7, #18]
    nfcDepParams.did          = RFAL_NFCDEP_DID_KEEP;
 8012f92:	23ff      	movs	r3, #255	; 0xff
 8012f94:	723b      	strb	r3, [r7, #8]
    nfcDepParams.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 8012f96:	2305      	movs	r3, #5
 8012f98:	76bb      	strb	r3, [r7, #26]
    nfcDepParams.rxBuf        = (uint8_t *)param->rxBuf;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	689b      	ldr	r3, [r3, #8]
 8012f9e:	617b      	str	r3, [r7, #20]
    nfcDepParams.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 8012fa0:	f240 1303 	movw	r3, #259	; 0x103
 8012fa4:	833b      	strh	r3, [r7, #24]
    nfcDepParams.fsc          = param->FSx;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	8b9b      	ldrh	r3, [r3, #28]
 8012faa:	84bb      	strh	r3, [r7, #36]	; 0x24
    nfcDepParams.fwt          = param->FWT;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	695b      	ldr	r3, [r3, #20]
 8012fb0:	61fb      	str	r3, [r7, #28]
    nfcDepParams.dFwt         = param->dFWT;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	699b      	ldr	r3, [r3, #24]
 8012fb6:	623b      	str	r3, [r7, #32]

    gNfcip.rxRcvdLen          = param->rxLen;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	68db      	ldr	r3, [r3, #12]
 8012fbc:	4a07      	ldr	r2, [pc, #28]	; (8012fdc <rfalNfcDepStartTransceive+0x68>)
 8012fbe:	66d3      	str	r3, [r2, #108]	; 0x6c
    gNfcip.isChaining         = param->isRxChaining;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	691b      	ldr	r3, [r3, #16]
 8012fc4:	4a05      	ldr	r2, [pc, #20]	; (8012fdc <rfalNfcDepStartTransceive+0x68>)
 8012fc6:	6753      	str	r3, [r2, #116]	; 0x74

    nfcipSetDEPParams(&nfcDepParams);
 8012fc8:	f107 0308 	add.w	r3, r7, #8
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7ff f99b 	bl	8012308 <nfcipSetDEPParams>
    
    return ERR_NONE;
 8012fd2:	2300      	movs	r3, #0
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	3728      	adds	r7, #40	; 0x28
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd80      	pop	{r7, pc}
 8012fdc:	2000376c 	.word	0x2000376c

08012fe0 <rfalNfcDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepGetTransceiveStatus( void )
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	af00      	add	r7, sp, #0
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 8012fe4:	4b05      	ldr	r3, [pc, #20]	; (8012ffc <rfalNfcDepGetTransceiveStatus+0x1c>)
 8012fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fe8:	4a04      	ldr	r2, [pc, #16]	; (8012ffc <rfalNfcDepGetTransceiveStatus+0x1c>)
 8012fea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8012fec:	4611      	mov	r1, r2
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f7ff f804 	bl	8011ffc <nfcipRun>
 8012ff4:	4603      	mov	r3, r0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	2000376c 	.word	0x2000376c

08013000 <rfalNfcaCalculateBcc>:
 * LOCAL FUNCTIONS
 ******************************************************************************
 */

static uint8_t rfalNfcaCalculateBcc( const uint8_t* buf, uint8_t bufLen )
{
 8013000:	b480      	push	{r7}
 8013002:	b085      	sub	sp, #20
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
 8013008:	460b      	mov	r3, r1
 801300a:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint8_t BCC;
    
    BCC = 0;
 801300c:	2300      	movs	r3, #0
 801300e:	73bb      	strb	r3, [r7, #14]
    
    /* BCC is XOR over first 4 bytes of the SDD_RES  Digital 1.1 6.7.2 */
    for(i = 0; i < bufLen; i++)
 8013010:	2300      	movs	r3, #0
 8013012:	73fb      	strb	r3, [r7, #15]
 8013014:	e009      	b.n	801302a <rfalNfcaCalculateBcc+0x2a>
    {
        BCC ^= buf[i];
 8013016:	7bfb      	ldrb	r3, [r7, #15]
 8013018:	687a      	ldr	r2, [r7, #4]
 801301a:	4413      	add	r3, r2
 801301c:	781a      	ldrb	r2, [r3, #0]
 801301e:	7bbb      	ldrb	r3, [r7, #14]
 8013020:	4053      	eors	r3, r2
 8013022:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < bufLen; i++)
 8013024:	7bfb      	ldrb	r3, [r7, #15]
 8013026:	3301      	adds	r3, #1
 8013028:	73fb      	strb	r3, [r7, #15]
 801302a:	7bfa      	ldrb	r2, [r7, #15]
 801302c:	78fb      	ldrb	r3, [r7, #3]
 801302e:	429a      	cmp	r2, r3
 8013030:	d3f1      	bcc.n	8013016 <rfalNfcaCalculateBcc+0x16>
    }
    
    return BCC;
 8013032:	7bbb      	ldrb	r3, [r7, #14]
}
 8013034:	4618      	mov	r0, r3
 8013036:	3714      	adds	r7, #20
 8013038:	46bd      	mov	sp, r7
 801303a:	bc80      	pop	{r7}
 801303c:	4770      	bx	lr
	...

08013040 <rfalNfcaPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcaPollerInitialize( void )
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b082      	sub	sp, #8
 8013044:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 8013046:	2200      	movs	r2, #0
 8013048:	2100      	movs	r1, #0
 801304a:	2001      	movs	r0, #1
 801304c:	f002 f926 	bl	801529c <rfalSetMode>
 8013050:	4603      	mov	r3, r0
 8013052:	80fb      	strh	r3, [r7, #6]
 8013054:	88fb      	ldrh	r3, [r7, #6]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d001      	beq.n	801305e <rfalNfcaPollerInitialize+0x1e>
 801305a:	88fb      	ldrh	r3, [r7, #6]
 801305c:	e00e      	b.n	801307c <rfalNfcaPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 801305e:	2001      	movs	r0, #1
 8013060:	f002 fcb8 	bl	80159d4 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCA );
 8013064:	4807      	ldr	r0, [pc, #28]	; (8013084 <rfalNfcaPollerInitialize+0x44>)
 8013066:	f002 fced 	bl	8015a44 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );
 801306a:	f240 4094 	movw	r0, #1172	; 0x494
 801306e:	f002 fcd5 	bl	8015a1c <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_POLLER );
 8013072:	f641 207c 	movw	r0, #6780	; 0x1a7c
 8013076:	f002 fcbd 	bl	80159f4 <rfalSetFDTPoll>
    
    return ERR_NONE;
 801307a:	2300      	movs	r3, #0
}
 801307c:	4618      	mov	r0, r3
 801307e:	3708      	adds	r7, #8
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}
 8013084:	000108d8 	.word	0x000108d8

08013088 <rfalNfcaPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerCheckPresence( rfal14443AShortFrameCmd cmd, rfalNfcaSensRes *sensRes )
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b086      	sub	sp, #24
 801308c:	af02      	add	r7, sp, #8
 801308e:	4603      	mov	r3, r0
 8013090:	6039      	str	r1, [r7, #0]
 8013092:	71fb      	strb	r3, [r7, #7]
    uint16_t   rcvLen;
    
    /* Digital 1.1 6.10.1.3  For Commands ALL_REQ, SENS_REQ, SDD_REQ, and SEL_REQ, the NFC Forum Device      *
     *              MUST treat receipt of a Listen Frame at a time after FDT(Listen, min) as a Timeour Error */
    
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 8013094:	f107 030c 	add.w	r3, r7, #12
 8013098:	79f8      	ldrb	r0, [r7, #7]
 801309a:	f240 6254 	movw	r2, #1620	; 0x654
 801309e:	9200      	str	r2, [sp, #0]
 80130a0:	2210      	movs	r2, #16
 80130a2:	6839      	ldr	r1, [r7, #0]
 80130a4:	f003 fece 	bl	8016e44 <rfalISO14443ATransceiveShortFrame>
 80130a8:	4603      	mov	r3, r0
 80130aa:	81fb      	strh	r3, [r7, #14]
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || (ret == ERR_NOMEM) || (ret == ERR_FRAMING) || (ret == ERR_PAR) )
 80130ac:	89fb      	ldrh	r3, [r7, #14]
 80130ae:	2b1d      	cmp	r3, #29
 80130b0:	d00b      	beq.n	80130ca <rfalNfcaPollerCheckPresence+0x42>
 80130b2:	89fb      	ldrh	r3, [r7, #14]
 80130b4:	2b15      	cmp	r3, #21
 80130b6:	d008      	beq.n	80130ca <rfalNfcaPollerCheckPresence+0x42>
 80130b8:	89fb      	ldrh	r3, [r7, #14]
 80130ba:	2b01      	cmp	r3, #1
 80130bc:	d005      	beq.n	80130ca <rfalNfcaPollerCheckPresence+0x42>
 80130be:	89fb      	ldrh	r3, [r7, #14]
 80130c0:	2b09      	cmp	r3, #9
 80130c2:	d002      	beq.n	80130ca <rfalNfcaPollerCheckPresence+0x42>
 80130c4:	89fb      	ldrh	r3, [r7, #14]
 80130c6:	2b1b      	cmp	r3, #27
 80130c8:	d101      	bne.n	80130ce <rfalNfcaPollerCheckPresence+0x46>
    {
       ret = ERR_NONE;
 80130ca:	2300      	movs	r3, #0
 80130cc:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 80130ce:	89fb      	ldrh	r3, [r7, #14]
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3710      	adds	r7, #16
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <rfalNfcaPollerTechnologyDetection>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcaSensRes *sensRes )
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b084      	sub	sp, #16
 80130dc:	af00      	add	r7, sp, #0
 80130de:	4603      	mov	r3, r0
 80130e0:	6039      	str	r1, [r7, #0]
 80130e2:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes ) );
 80130e4:	79fb      	ldrb	r3, [r7, #7]
 80130e6:	2b01      	cmp	r3, #1
 80130e8:	d101      	bne.n	80130ee <rfalNfcaPollerTechnologyDetection+0x16>
 80130ea:	2352      	movs	r3, #82	; 0x52
 80130ec:	e000      	b.n	80130f0 <rfalNfcaPollerTechnologyDetection+0x18>
 80130ee:	2326      	movs	r3, #38	; 0x26
 80130f0:	6839      	ldr	r1, [r7, #0]
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7ff ffc8 	bl	8013088 <rfalNfcaPollerCheckPresence>
 80130f8:	4603      	mov	r3, r0
 80130fa:	81fb      	strh	r3, [r7, #14]
 80130fc:	89fb      	ldrh	r3, [r7, #14]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d001      	beq.n	8013106 <rfalNfcaPollerTechnologyDetection+0x2e>
 8013102:	89fb      	ldrh	r3, [r7, #14]
 8013104:	e005      	b.n	8013112 <rfalNfcaPollerTechnologyDetection+0x3a>
    
    /* Send SLP_REQ as  Activity 1.1  9.2.3.6 and EMVCo 2.6  9.2.1.3 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO)
 8013106:	79fb      	ldrb	r3, [r7, #7]
 8013108:	2b02      	cmp	r3, #2
 801310a:	d001      	beq.n	8013110 <rfalNfcaPollerTechnologyDetection+0x38>
    {
        rfalNfcaPollerSleep();
 801310c:	f000 fb60 	bl	80137d0 <rfalNfcaPollerSleep>
    }
    return ERR_NONE;
 8013110:	2300      	movs	r3, #0
}
 8013112:	4618      	mov	r0, r3
 8013114:	3710      	adds	r7, #16
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}

0801311a <rfalNfcaPollerSingleCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcaPollerSingleCollisionResolution( uint8_t devLimit, bool *collPending, rfalNfcaSelRes *selRes, uint8_t *nfcId1, uint8_t *nfcId1Len )
{
 801311a:	b590      	push	{r4, r7, lr}
 801311c:	b08f      	sub	sp, #60	; 0x3c
 801311e:	af04      	add	r7, sp, #16
 8013120:	60b9      	str	r1, [r7, #8]
 8013122:	607a      	str	r2, [r7, #4]
 8013124:	603b      	str	r3, [r7, #0]
 8013126:	4603      	mov	r3, r0
 8013128:	73fb      	strb	r3, [r7, #15]
    ReturnCode      ret;
    rfalNfcaSelReq  selReq;
    uint16_t        bytesRx;
    uint8_t         bytesTxRx;
    uint8_t         bitsTxRx;
    bool            doBacktrack = false;
 801312a:	2300      	movs	r3, #0
 801312c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t         backtrackCnt = 3;
 8013130:	2303      	movs	r3, #3
 8013132:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    
    /* Check parameters */
    if( (collPending == NULL) || (selRes == NULL) || (nfcId1 == NULL) || (nfcId1Len == NULL) )
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d008      	beq.n	801314e <rfalNfcaPollerSingleCollisionResolution+0x34>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d005      	beq.n	801314e <rfalNfcaPollerSingleCollisionResolution+0x34>
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d002      	beq.n	801314e <rfalNfcaPollerSingleCollisionResolution+0x34>
 8013148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801314a:	2b00      	cmp	r3, #0
 801314c:	d101      	bne.n	8013152 <rfalNfcaPollerSingleCollisionResolution+0x38>
    {
        return ERR_PARAM;
 801314e:	2307      	movs	r3, #7
 8013150:	e1ad      	b.n	80134ae <rfalNfcaPollerSingleCollisionResolution+0x394>
    }
    
    /* Initialize output parameters */
    *collPending = false;  /* Activity 1.1  9.3.4.6 */
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	2200      	movs	r2, #0
 8013156:	701a      	strb	r2, [r3, #0]
    *nfcId1Len   = 0;
 8013158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801315a:	2200      	movs	r2, #0
 801315c:	701a      	strb	r2, [r3, #0]
    ST_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 801315e:	220a      	movs	r2, #10
 8013160:	2100      	movs	r1, #0
 8013162:	6838      	ldr	r0, [r7, #0]
 8013164:	f005 fdfc 	bl	8018d60 <memset>
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.3.4 */
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8013168:	2300      	movs	r3, #0
 801316a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801316e:	e198      	b.n	80134a2 <rfalNfcaPollerSingleCollisionResolution+0x388>
    {
        /* Initialize the SDD_REQ to send for the new cascade level */
        ST_MEMSET( (uint8_t*)&selReq, 0x00, sizeof(rfalNfcaSelReq) );
 8013170:	f107 0318 	add.w	r3, r7, #24
 8013174:	2207      	movs	r2, #7
 8013176:	2100      	movs	r1, #0
 8013178:	4618      	mov	r0, r3
 801317a:	f005 fdf1 	bl	8018d60 <memset>
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 801317e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013182:	005b      	lsls	r3, r3, #1
 8013184:	b2db      	uxtb	r3, r3
 8013186:	3b6d      	subs	r3, #109	; 0x6d
 8013188:	b2db      	uxtb	r3, r3
 801318a:	763b      	strb	r3, [r7, #24]
    
        bytesTxRx    = RFAL_NFCA_SDD_REQ_LEN;
 801318c:	2302      	movs	r3, #2
 801318e:	757b      	strb	r3, [r7, #21]
        bitsTxRx     = 0;
 8013190:	2300      	movs	r3, #0
 8013192:	753b      	strb	r3, [r7, #20]
        
        /*******************************************************************************/
        /* Go through Collision loop */
        do
        {
            uint8_t         collBit = 1; /* standards mandate or recommend collision bit to be set to One. */
 8013194:	2301      	movs	r3, #1
 8013196:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            /* Calculate SEL_PAR with the bytes/bits to be sent */
            selReq.selPar = rfalNfcaSelPar(bytesTxRx, bitsTxRx);
 801319a:	7d7b      	ldrb	r3, [r7, #21]
 801319c:	011b      	lsls	r3, r3, #4
 801319e:	b2da      	uxtb	r2, r3
 80131a0:	7d3b      	ldrb	r3, [r7, #20]
 80131a2:	f003 030f 	and.w	r3, r3, #15
 80131a6:	b2db      	uxtb	r3, r3
 80131a8:	4313      	orrs	r3, r2
 80131aa:	b2db      	uxtb	r3, r3
 80131ac:	767b      	strb	r3, [r7, #25]
    
            /* Send SDD_REQ (Anticollision frame) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
            rfalNfcaTxRetry( ret, rfalISO14443ATransceiveAnticollisionFrame( (uint8_t*)&selReq, &bytesTxRx, &bitsTxRx, &bytesRx, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 80131ae:	7bfb      	ldrb	r3, [r7, #15]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d101      	bne.n	80131b8 <rfalNfcaPollerSingleCollisionResolution+0x9e>
 80131b4:	2302      	movs	r3, #2
 80131b6:	e000      	b.n	80131ba <rfalNfcaPollerSingleCollisionResolution+0xa0>
 80131b8:	2300      	movs	r3, #0
 80131ba:	f887 3020 	strb.w	r3, [r7, #32]
 80131be:	f107 0316 	add.w	r3, r7, #22
 80131c2:	f107 0214 	add.w	r2, r7, #20
 80131c6:	f107 0115 	add.w	r1, r7, #21
 80131ca:	f107 0018 	add.w	r0, r7, #24
 80131ce:	f240 6454 	movw	r4, #1620	; 0x654
 80131d2:	9400      	str	r4, [sp, #0]
 80131d4:	f003 ff32 	bl	801703c <rfalISO14443ATransceiveAnticollisionFrame>
 80131d8:	4603      	mov	r3, r0
 80131da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80131dc:	7bfb      	ldrb	r3, [r7, #15]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d102      	bne.n	80131e8 <rfalNfcaPollerSingleCollisionResolution+0xce>
 80131e2:	2005      	movs	r0, #5
 80131e4:	f7f1 f86a 	bl	80042bc <HAL_Delay>
 80131e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80131ec:	1e5a      	subs	r2, r3, #1
 80131ee:	f887 2020 	strb.w	r2, [r7, #32]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d002      	beq.n	80131fc <rfalNfcaPollerSingleCollisionResolution+0xe2>
 80131f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131f8:	2b04      	cmp	r3, #4
 80131fa:	d0e0      	beq.n	80131be <rfalNfcaPollerSingleCollisionResolution+0xa4>
            
            bytesRx = rfalConvBitsToBytes(bytesRx);
 80131fc:	8afb      	ldrh	r3, [r7, #22]
 80131fe:	3307      	adds	r3, #7
 8013200:	08db      	lsrs	r3, r3, #3
 8013202:	b29b      	uxth	r3, r3
 8013204:	82fb      	strh	r3, [r7, #22]
            
            if ((ret == ERR_TIMEOUT) 
 8013206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013208:	2b04      	cmp	r3, #4
 801320a:	d146      	bne.n	801329a <rfalNfcaPollerSingleCollisionResolution+0x180>
                && (backtrackCnt != 0U) && !doBacktrack
 801320c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013210:	2b00      	cmp	r3, #0
 8013212:	d042      	beq.n	801329a <rfalNfcaPollerSingleCollisionResolution+0x180>
 8013214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013218:	f083 0301 	eor.w	r3, r3, #1
 801321c:	b2db      	uxtb	r3, r3
 801321e:	2b00      	cmp	r3, #0
 8013220:	d03b      	beq.n	801329a <rfalNfcaPollerSingleCollisionResolution+0x180>
                && !((RFAL_NFCA_SDD_REQ_LEN==bytesTxRx) && (0U==bitsTxRx)))
 8013222:	7d7b      	ldrb	r3, [r7, #21]
 8013224:	2b02      	cmp	r3, #2
 8013226:	d102      	bne.n	801322e <rfalNfcaPollerSingleCollisionResolution+0x114>
 8013228:	7d3b      	ldrb	r3, [r7, #20]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d035      	beq.n	801329a <rfalNfcaPollerSingleCollisionResolution+0x180>
                 * collisions of a weaker tag go unnoticed. If then a later 
                 * collision is recognized and the strong tag has a 0 at the 
                 * collision position then no tag will respond. Catch this 
                 * corner case and then try with the bit being sent as zero. */
                rfalNfcaSensRes sensRes;
                ret = ERR_RF_COLLISION;
 801322e:	231d      	movs	r3, #29
 8013230:	84bb      	strh	r3, [r7, #36]	; 0x24
                rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &sensRes );
 8013232:	f107 0310 	add.w	r3, r7, #16
 8013236:	4619      	mov	r1, r3
 8013238:	2026      	movs	r0, #38	; 0x26
 801323a:	f7ff ff25 	bl	8013088 <rfalNfcaPollerCheckPresence>
                /* Algorithm below does a post-increment, decrement to go back to current position */
                if (0U == bitsTxRx)
 801323e:	7d3b      	ldrb	r3, [r7, #20]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d106      	bne.n	8013252 <rfalNfcaPollerSingleCollisionResolution+0x138>
                {
                    bitsTxRx = 7;
 8013244:	2307      	movs	r3, #7
 8013246:	753b      	strb	r3, [r7, #20]
                    bytesTxRx--;
 8013248:	7d7b      	ldrb	r3, [r7, #21]
 801324a:	3b01      	subs	r3, #1
 801324c:	b2db      	uxtb	r3, r3
 801324e:	757b      	strb	r3, [r7, #21]
 8013250:	e003      	b.n	801325a <rfalNfcaPollerSingleCollisionResolution+0x140>
                }
                else
                {
                    bitsTxRx--;
 8013252:	7d3b      	ldrb	r3, [r7, #20]
 8013254:	3b01      	subs	r3, #1
 8013256:	b2db      	uxtb	r3, r3
 8013258:	753b      	strb	r3, [r7, #20]
                }
                collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) );
 801325a:	7d7b      	ldrb	r3, [r7, #21]
 801325c:	461a      	mov	r2, r3
 801325e:	f107 0318 	add.w	r3, r7, #24
 8013262:	4413      	add	r3, r2
 8013264:	781a      	ldrb	r2, [r3, #0]
 8013266:	7d3b      	ldrb	r3, [r7, #20]
 8013268:	4619      	mov	r1, r3
 801326a:	2301      	movs	r3, #1
 801326c:	408b      	lsls	r3, r1
 801326e:	b2db      	uxtb	r3, r3
 8013270:	4013      	ands	r3, r2
 8013272:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                collBit = (uint8_t)((0U==collBit)?1U:0U); // invert the collision bit
 8013276:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801327a:	2b00      	cmp	r3, #0
 801327c:	d101      	bne.n	8013282 <rfalNfcaPollerSingleCollisionResolution+0x168>
 801327e:	2301      	movs	r3, #1
 8013280:	e000      	b.n	8013284 <rfalNfcaPollerSingleCollisionResolution+0x16a>
 8013282:	2300      	movs	r3, #0
 8013284:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                doBacktrack = true;
 8013288:	2301      	movs	r3, #1
 801328a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                backtrackCnt--;
 801328e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013292:	3b01      	subs	r3, #1
 8013294:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            { 
 8013298:	e002      	b.n	80132a0 <rfalNfcaPollerSingleCollisionResolution+0x186>
            }
            else
            {
                doBacktrack = false;
 801329a:	2300      	movs	r3, #0
 801329c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            if( ret == ERR_RF_COLLISION )
 80132a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132a2:	2b1d      	cmp	r3, #29
 80132a4:	d17e      	bne.n	80133a4 <rfalNfcaPollerSingleCollisionResolution+0x28a>
            {
                /* Check received length */
                if( (bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 80132a6:	7d7b      	ldrb	r3, [r7, #21]
 80132a8:	461a      	mov	r2, r3
 80132aa:	7d3b      	ldrb	r3, [r7, #20]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d001      	beq.n	80132b4 <rfalNfcaPollerSingleCollisionResolution+0x19a>
 80132b0:	2301      	movs	r3, #1
 80132b2:	e000      	b.n	80132b6 <rfalNfcaPollerSingleCollisionResolution+0x19c>
 80132b4:	2300      	movs	r3, #0
 80132b6:	4413      	add	r3, r2
 80132b8:	2b07      	cmp	r3, #7
 80132ba:	d901      	bls.n	80132c0 <rfalNfcaPollerSingleCollisionResolution+0x1a6>
                {
                    return ERR_PROTO;
 80132bc:	230b      	movs	r3, #11
 80132be:	e0f6      	b.n	80134ae <rfalNfcaPollerSingleCollisionResolution+0x394>
                }

                if( ((bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN)) && (backtrackCnt != 0U) )
 80132c0:	7d7b      	ldrb	r3, [r7, #21]
 80132c2:	461a      	mov	r2, r3
 80132c4:	7d3b      	ldrb	r3, [r7, #20]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d001      	beq.n	80132ce <rfalNfcaPollerSingleCollisionResolution+0x1b4>
 80132ca:	2301      	movs	r3, #1
 80132cc:	e000      	b.n	80132d0 <rfalNfcaPollerSingleCollisionResolution+0x1b6>
 80132ce:	2300      	movs	r3, #0
 80132d0:	4413      	add	r3, r2
 80132d2:	2b06      	cmp	r3, #6
 80132d4:	d91a      	bls.n	801330c <rfalNfcaPollerSingleCollisionResolution+0x1f2>
 80132d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d016      	beq.n	801330c <rfalNfcaPollerSingleCollisionResolution+0x1f2>
                { /* Collision in BCC: Anticollide only UID part */
                    backtrackCnt--;
 80132de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80132e2:	3b01      	subs	r3, #1
 80132e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                    bytesTxRx = RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN - 1U;
 80132e8:	2305      	movs	r3, #5
 80132ea:	757b      	strb	r3, [r7, #21]
                    bitsTxRx = 7;
 80132ec:	2307      	movs	r3, #7
 80132ee:	753b      	strb	r3, [r7, #20]
                    collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 80132f0:	7d7b      	ldrb	r3, [r7, #21]
 80132f2:	461a      	mov	r2, r3
 80132f4:	f107 0318 	add.w	r3, r7, #24
 80132f8:	4413      	add	r3, r2
 80132fa:	781a      	ldrb	r2, [r3, #0]
 80132fc:	7d3b      	ldrb	r3, [r7, #20]
 80132fe:	4619      	mov	r1, r3
 8013300:	2301      	movs	r3, #1
 8013302:	408b      	lsls	r3, r1
 8013304:	b2db      	uxtb	r3, r3
 8013306:	4013      	ands	r3, r2
 8013308:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                }
                
                if( (devLimit == 0U) && !(*collPending) )
 801330c:	7bfb      	ldrb	r3, [r7, #15]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d10b      	bne.n	801332a <rfalNfcaPollerSingleCollisionResolution+0x210>
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	781b      	ldrb	r3, [r3, #0]
 8013316:	f083 0301 	eor.w	r3, r3, #1
 801331a:	b2db      	uxtb	r3, r3
 801331c:	2b00      	cmp	r3, #0
 801331e:	d004      	beq.n	801332a <rfalNfcaPollerSingleCollisionResolution+0x210>
                {   
                    /* Activity 1.0 & 1.1  9.3.4.12: If CON_DEVICES_LIMIT has a value of 0, then 
                     * NFC Forum Device is configured to perform collision detection only       */
                    *collPending = true;
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	2201      	movs	r2, #1
 8013324:	701a      	strb	r2, [r3, #0]
                    return ERR_IGNORE;
 8013326:	2312      	movs	r3, #18
 8013328:	e0c1      	b.n	80134ae <rfalNfcaPollerSingleCollisionResolution+0x394>
                }
                
                *collPending = true;
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	2201      	movs	r2, #1
 801332e:	701a      	strb	r2, [r3, #0]
                
                /* Set and select the collision bit, with the number of bytes/bits successfully TxRx */
                if (collBit != 0U)
 8013330:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013334:	2b00      	cmp	r3, #0
 8013336:	d013      	beq.n	8013360 <rfalNfcaPollerSingleCollisionResolution+0x246>
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] | (1U << bitsTxRx));   /* MISRA 10.3 */
 8013338:	7d7b      	ldrb	r3, [r7, #21]
 801333a:	461a      	mov	r2, r3
 801333c:	f107 0318 	add.w	r3, r7, #24
 8013340:	4413      	add	r3, r2
 8013342:	7819      	ldrb	r1, [r3, #0]
 8013344:	7d3b      	ldrb	r3, [r7, #20]
 8013346:	461a      	mov	r2, r3
 8013348:	2301      	movs	r3, #1
 801334a:	4093      	lsls	r3, r2
 801334c:	b2da      	uxtb	r2, r3
 801334e:	7d7b      	ldrb	r3, [r7, #21]
 8013350:	4618      	mov	r0, r3
 8013352:	f107 0318 	add.w	r3, r7, #24
 8013356:	4403      	add	r3, r0
 8013358:	430a      	orrs	r2, r1
 801335a:	b2d2      	uxtb	r2, r2
 801335c:	701a      	strb	r2, [r3, #0]
 801335e:	e014      	b.n	801338a <rfalNfcaPollerSingleCollisionResolution+0x270>
                }
                else
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] & ~(1U << bitsTxRx));  /* MISRA 10.3 */
 8013360:	7d7b      	ldrb	r3, [r7, #21]
 8013362:	461a      	mov	r2, r3
 8013364:	f107 0318 	add.w	r3, r7, #24
 8013368:	4413      	add	r3, r2
 801336a:	7819      	ldrb	r1, [r3, #0]
 801336c:	7d3b      	ldrb	r3, [r7, #20]
 801336e:	461a      	mov	r2, r3
 8013370:	2301      	movs	r3, #1
 8013372:	4093      	lsls	r3, r2
 8013374:	b2db      	uxtb	r3, r3
 8013376:	43db      	mvns	r3, r3
 8013378:	b2da      	uxtb	r2, r3
 801337a:	7d7b      	ldrb	r3, [r7, #21]
 801337c:	4618      	mov	r0, r3
 801337e:	f107 0318 	add.w	r3, r7, #24
 8013382:	4403      	add	r3, r0
 8013384:	400a      	ands	r2, r1
 8013386:	b2d2      	uxtb	r2, r2
 8013388:	701a      	strb	r2, [r3, #0]
                }

                bitsTxRx++;
 801338a:	7d3b      	ldrb	r3, [r7, #20]
 801338c:	3301      	adds	r3, #1
 801338e:	b2db      	uxtb	r3, r3
 8013390:	753b      	strb	r3, [r7, #20]
                
                /* Check if number of bits form a byte */
                if( bitsTxRx == RFAL_BITS_IN_BYTE )
 8013392:	7d3b      	ldrb	r3, [r7, #20]
 8013394:	2b08      	cmp	r3, #8
 8013396:	d105      	bne.n	80133a4 <rfalNfcaPollerSingleCollisionResolution+0x28a>
                {
                    bitsTxRx = 0;
 8013398:	2300      	movs	r3, #0
 801339a:	753b      	strb	r3, [r7, #20]
                    bytesTxRx++;
 801339c:	7d7b      	ldrb	r3, [r7, #21]
 801339e:	3301      	adds	r3, #1
 80133a0:	b2db      	uxtb	r3, r3
 80133a2:	757b      	strb	r3, [r7, #21]
                }
            }
        }while (ret == ERR_RF_COLLISION);
 80133a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133a6:	2b1d      	cmp	r3, #29
 80133a8:	f43f aef4 	beq.w	8013194 <rfalNfcaPollerSingleCollisionResolution+0x7a>
        
        
        /*******************************************************************************/
        /* Check if Collision loop has failed */
        if( ret != ERR_NONE )
 80133ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d001      	beq.n	80133b6 <rfalNfcaPollerSingleCollisionResolution+0x29c>
        {
            return ret;
 80133b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133b4:	e07b      	b.n	80134ae <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        
        /* If collisions are to be reported check whether the response is complete */
        if( (devLimit == 0U) && (bytesRx != sizeof(rfalNfcaSddRes)) )
 80133b6:	7bfb      	ldrb	r3, [r7, #15]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d104      	bne.n	80133c6 <rfalNfcaPollerSingleCollisionResolution+0x2ac>
 80133bc:	8afb      	ldrh	r3, [r7, #22]
 80133be:	2b05      	cmp	r3, #5
 80133c0:	d001      	beq.n	80133c6 <rfalNfcaPollerSingleCollisionResolution+0x2ac>
        {
            return ERR_PROTO;
 80133c2:	230b      	movs	r3, #11
 80133c4:	e073      	b.n	80134ae <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        /* Check if the received BCC match */
        if( selReq.bcc != rfalNfcaCalculateBcc( selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 80133c6:	7fbc      	ldrb	r4, [r7, #30]
 80133c8:	f107 0318 	add.w	r3, r7, #24
 80133cc:	3302      	adds	r3, #2
 80133ce:	2104      	movs	r1, #4
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7ff fe15 	bl	8013000 <rfalNfcaCalculateBcc>
 80133d6:	4603      	mov	r3, r0
 80133d8:	429c      	cmp	r4, r3
 80133da:	d001      	beq.n	80133e0 <rfalNfcaPollerSingleCollisionResolution+0x2c6>
        {
            return ERR_PROTO;
 80133dc:	230b      	movs	r3, #11
 80133de:	e066      	b.n	80134ae <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        /*******************************************************************************/
        /* Anticollision OK, Select this Cascade Level */
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 80133e0:	2370      	movs	r3, #112	; 0x70
 80133e2:	767b      	strb	r3, [r7, #25]
        
        /* Send SEL_REQ (Select command) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
        rfalNfcaTxRetry( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &bytesRx, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 80133e4:	7bfb      	ldrb	r3, [r7, #15]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d101      	bne.n	80133ee <rfalNfcaPollerSingleCollisionResolution+0x2d4>
 80133ea:	2302      	movs	r3, #2
 80133ec:	e000      	b.n	80133f0 <rfalNfcaPollerSingleCollisionResolution+0x2d6>
 80133ee:	2300      	movs	r3, #0
 80133f0:	77fb      	strb	r3, [r7, #31]
 80133f2:	f107 0018 	add.w	r0, r7, #24
 80133f6:	f240 6354 	movw	r3, #1620	; 0x654
 80133fa:	9302      	str	r3, [sp, #8]
 80133fc:	2300      	movs	r3, #0
 80133fe:	9301      	str	r3, [sp, #4]
 8013400:	f107 0316 	add.w	r3, r7, #22
 8013404:	9300      	str	r3, [sp, #0]
 8013406:	2301      	movs	r3, #1
 8013408:	687a      	ldr	r2, [r7, #4]
 801340a:	2107      	movs	r1, #7
 801340c:	f002 fd76 	bl	8015efc <rfalTransceiveBlockingTxRx>
 8013410:	4603      	mov	r3, r0
 8013412:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013414:	7bfb      	ldrb	r3, [r7, #15]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d102      	bne.n	8013420 <rfalNfcaPollerSingleCollisionResolution+0x306>
 801341a:	2005      	movs	r0, #5
 801341c:	f7f0 ff4e 	bl	80042bc <HAL_Delay>
 8013420:	7ffb      	ldrb	r3, [r7, #31]
 8013422:	1e5a      	subs	r2, r3, #1
 8013424:	77fa      	strb	r2, [r7, #31]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d002      	beq.n	8013430 <rfalNfcaPollerSingleCollisionResolution+0x316>
 801342a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801342c:	2b04      	cmp	r3, #4
 801342e:	d0e0      	beq.n	80133f2 <rfalNfcaPollerSingleCollisionResolution+0x2d8>
        
        if( ret != ERR_NONE )
 8013430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013432:	2b00      	cmp	r3, #0
 8013434:	d001      	beq.n	801343a <rfalNfcaPollerSingleCollisionResolution+0x320>
        {
            return ret;
 8013436:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013438:	e039      	b.n	80134ae <rfalNfcaPollerSingleCollisionResolution+0x394>
        }

        
        /* Ensure proper response length */
        if( bytesRx != sizeof(rfalNfcaSelRes) )
 801343a:	8afb      	ldrh	r3, [r7, #22]
 801343c:	2b01      	cmp	r3, #1
 801343e:	d001      	beq.n	8013444 <rfalNfcaPollerSingleCollisionResolution+0x32a>
        {
            return ERR_PROTO;
 8013440:	230b      	movs	r3, #11
 8013442:	e034      	b.n	80134ae <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        /*******************************************************************************/
        /* Check cascade byte, if cascade tag then go next cascade level */
        if( (ret == ERR_NONE) && (*selReq.nfcid1 == RFAL_NFCA_SDD_CT) )
 8013444:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013446:	2b00      	cmp	r3, #0
 8013448:	d11b      	bne.n	8013482 <rfalNfcaPollerSingleCollisionResolution+0x368>
 801344a:	7ebb      	ldrb	r3, [r7, #26]
 801344c:	2b88      	cmp	r3, #136	; 0x88
 801344e:	d118      	bne.n	8013482 <rfalNfcaPollerSingleCollisionResolution+0x368>
        {
            /* Cascade Tag present, store nfcid1 bytes (excluding cascade tag) and continue for next CL */
            ST_MEMCPY( &nfcId1[*nfcId1Len], &((uint8_t*)&selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 8013450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013452:	781b      	ldrb	r3, [r3, #0]
 8013454:	461a      	mov	r2, r3
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	1898      	adds	r0, r3, r2
 801345a:	f107 0318 	add.w	r3, r7, #24
 801345e:	3302      	adds	r3, #2
 8013460:	3301      	adds	r3, #1
 8013462:	2203      	movs	r2, #3
 8013464:	4619      	mov	r1, r3
 8013466:	f005 fc53 	bl	8018d10 <memcpy>
            *nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 801346a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801346c:	781b      	ldrb	r3, [r3, #0]
 801346e:	3303      	adds	r3, #3
 8013470:	b2da      	uxtb	r2, r3
 8013472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013474:	701a      	strb	r2, [r3, #0]
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8013476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801347a:	3301      	adds	r3, #1
 801347c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013480:	e00f      	b.n	80134a2 <rfalNfcaPollerSingleCollisionResolution+0x388>
        }
        else
        {
            /* UID Selection complete, Stop Cascade Level loop */
            ST_MEMCPY( &nfcId1[*nfcId1Len], (uint8_t*)&selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN );
 8013482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013484:	781b      	ldrb	r3, [r3, #0]
 8013486:	461a      	mov	r2, r3
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	4413      	add	r3, r2
 801348c:	f8d7 201a 	ldr.w	r2, [r7, #26]
 8013490:	601a      	str	r2, [r3, #0]
            *nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
 8013492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013494:	781b      	ldrb	r3, [r3, #0]
 8013496:	3304      	adds	r3, #4
 8013498:	b2da      	uxtb	r2, r3
 801349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801349c:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 801349e:	2300      	movs	r3, #0
 80134a0:	e005      	b.n	80134ae <rfalNfcaPollerSingleCollisionResolution+0x394>
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 80134a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134a6:	2b02      	cmp	r3, #2
 80134a8:	f67f ae62 	bls.w	8013170 <rfalNfcaPollerSingleCollisionResolution+0x56>
        }
    }
    return ERR_INTERNAL;
 80134ac:	230c      	movs	r3, #12
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	372c      	adds	r7, #44	; 0x2c
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd90      	pop	{r4, r7, pc}

080134b6 <rfalNfcaPollerFullCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerFullCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcaListenDevice *nfcaDevList, uint8_t *devCnt )
{
 80134b6:	b5b0      	push	{r4, r5, r7, lr}
 80134b8:	b08a      	sub	sp, #40	; 0x28
 80134ba:	af02      	add	r7, sp, #8
 80134bc:	60ba      	str	r2, [r7, #8]
 80134be:	607b      	str	r3, [r7, #4]
 80134c0:	4603      	mov	r3, r0
 80134c2:	73fb      	strb	r3, [r7, #15]
 80134c4:	460b      	mov	r3, r1
 80134c6:	73bb      	strb	r3, [r7, #14]
    ReturnCode      ret;
    bool            collPending;
    rfalNfcaSensRes sensRes;
    uint16_t        rcvLen;
    
    if( (nfcaDevList == NULL) || (devCnt == NULL) )
 80134c8:	68bb      	ldr	r3, [r7, #8]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d002      	beq.n	80134d4 <rfalNfcaPollerFullCollisionResolution+0x1e>
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d101      	bne.n	80134d8 <rfalNfcaPollerFullCollisionResolution+0x22>
    {
        return ERR_PARAM;
 80134d4:	2307      	movs	r3, #7
 80134d6:	e105      	b.n	80136e4 <rfalNfcaPollerFullCollisionResolution+0x22e>
    }
    
    *devCnt = 0;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	2200      	movs	r2, #0
 80134dc:	701a      	strb	r2, [r3, #0]
    ret     = ERR_NONE;
 80134de:	2300      	movs	r3, #0
 80134e0:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Send ALL_REQ before Anticollision if a Sleep was sent before  Activity 1.1  9.3.4.1 and EMVco 2.6  9.3.2.1 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 80134e2:	7bfb      	ldrb	r3, [r7, #15]
 80134e4:	2b02      	cmp	r3, #2
 80134e6:	d028      	beq.n	801353a <rfalNfcaPollerFullCollisionResolution+0x84>
    {
        ret = rfalISO14443ATransceiveShortFrame( RFAL_14443A_SHORTFRAME_CMD_WUPA, (uint8_t*)&nfcaDevList->sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	1c59      	adds	r1, r3, #1
 80134ec:	f107 0316 	add.w	r3, r7, #22
 80134f0:	f240 6254 	movw	r2, #1620	; 0x654
 80134f4:	9200      	str	r2, [sp, #0]
 80134f6:	2210      	movs	r2, #16
 80134f8:	2052      	movs	r0, #82	; 0x52
 80134fa:	f003 fca3 	bl	8016e44 <rfalISO14443ATransceiveShortFrame>
 80134fe:	4603      	mov	r3, r0
 8013500:	83fb      	strh	r3, [r7, #30]
        if(ret != ERR_NONE)
 8013502:	8bfb      	ldrh	r3, [r7, #30]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d010      	beq.n	801352a <rfalNfcaPollerFullCollisionResolution+0x74>
        {
            if( (compMode == RFAL_COMPLIANCE_MODE_EMV) || ((ret != ERR_RF_COLLISION) && (ret != ERR_CRC) && (ret != ERR_FRAMING) && (ret != ERR_PAR)) )
 8013508:	7bfb      	ldrb	r3, [r7, #15]
 801350a:	2b01      	cmp	r3, #1
 801350c:	d00b      	beq.n	8013526 <rfalNfcaPollerFullCollisionResolution+0x70>
 801350e:	8bfb      	ldrh	r3, [r7, #30]
 8013510:	2b1d      	cmp	r3, #29
 8013512:	d00a      	beq.n	801352a <rfalNfcaPollerFullCollisionResolution+0x74>
 8013514:	8bfb      	ldrh	r3, [r7, #30]
 8013516:	2b15      	cmp	r3, #21
 8013518:	d007      	beq.n	801352a <rfalNfcaPollerFullCollisionResolution+0x74>
 801351a:	8bfb      	ldrh	r3, [r7, #30]
 801351c:	2b09      	cmp	r3, #9
 801351e:	d004      	beq.n	801352a <rfalNfcaPollerFullCollisionResolution+0x74>
 8013520:	8bfb      	ldrh	r3, [r7, #30]
 8013522:	2b1b      	cmp	r3, #27
 8013524:	d001      	beq.n	801352a <rfalNfcaPollerFullCollisionResolution+0x74>
            {
                return ret;
 8013526:	8bfb      	ldrh	r3, [r7, #30]
 8013528:	e0dc      	b.n	80136e4 <rfalNfcaPollerFullCollisionResolution+0x22e>
            }
        }
        
        /* Check proper SENS_RES/ATQA size */
        if( (ret == ERR_NONE) && (rfalConvBytesToBits(sizeof(rfalNfcaSensRes)) != rcvLen) )
 801352a:	8bfb      	ldrh	r3, [r7, #30]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d104      	bne.n	801353a <rfalNfcaPollerFullCollisionResolution+0x84>
 8013530:	8afb      	ldrh	r3, [r7, #22]
 8013532:	2b10      	cmp	r3, #16
 8013534:	d001      	beq.n	801353a <rfalNfcaPollerFullCollisionResolution+0x84>
        {
            return ERR_PROTO;
 8013536:	230b      	movs	r3, #11
 8013538:	e0d4      	b.n	80136e4 <rfalNfcaPollerFullCollisionResolution+0x22e>
    #if RFAL_FEATURE_T1T
    /*******************************************************************************/
    /* Only check for T1T if previous SENS_RES was received without a transmission  *
     * error. When collisions occur bits in the SENS_RES may look like a T1T        */
    /* If T1T Anticollision is not supported  Activity 1.1  9.3.4.3 */
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	789b      	ldrb	r3, [r3, #2]
 801353e:	f003 030f 	and.w	r3, r3, #15
 8013542:	2b0c      	cmp	r3, #12
 8013544:	d12a      	bne.n	801359c <rfalNfcaPollerFullCollisionResolution+0xe6>
 8013546:	7bbb      	ldrb	r3, [r7, #14]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d027      	beq.n	801359c <rfalNfcaPollerFullCollisionResolution+0xe6>
 801354c:	8bfb      	ldrh	r3, [r7, #30]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d124      	bne.n	801359c <rfalNfcaPollerFullCollisionResolution+0xe6>
 8013552:	7bfb      	ldrb	r3, [r7, #15]
 8013554:	2b01      	cmp	r3, #1
 8013556:	d021      	beq.n	801359c <rfalNfcaPollerFullCollisionResolution+0xe6>
    {
        /* RID_REQ shall be performed with rfalT1TPollerRid()    Activity 1.1  9.3.4.24 */
        rfalT1TPollerInitialize();
 8013558:	f004 ffba 	bl	80184d0 <rfalT1TPollerInitialize>
        EXIT_ON_ERR( ret, rfalT1TPollerRid( &nfcaDevList->ridRes ) );
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	330f      	adds	r3, #15
 8013560:	4618      	mov	r0, r3
 8013562:	f004 ffd7 	bl	8018514 <rfalT1TPollerRid>
 8013566:	4603      	mov	r3, r0
 8013568:	83fb      	strh	r3, [r7, #30]
 801356a:	8bfb      	ldrh	r3, [r7, #30]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d001      	beq.n	8013574 <rfalNfcaPollerFullCollisionResolution+0xbe>
 8013570:	8bfb      	ldrh	r3, [r7, #30]
 8013572:	e0b7      	b.n	80136e4 <rfalNfcaPollerFullCollisionResolution+0x22e>
        
        /* T1T doesn't support Anticollision */
        *devCnt = 1;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2201      	movs	r2, #1
 8013578:	701a      	strb	r2, [r3, #0]
        nfcaDevList->isSleep   = false;
 801357a:	68bb      	ldr	r3, [r7, #8]
 801357c:	2200      	movs	r2, #0
 801357e:	755a      	strb	r2, [r3, #21]
        nfcaDevList->type      = RFAL_NFCA_T1T;
 8013580:	68bb      	ldr	r3, [r7, #8]
 8013582:	2201      	movs	r2, #1
 8013584:	701a      	strb	r2, [r3, #0]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	2204      	movs	r2, #4
 801358a:	711a      	strb	r2, [r3, #4]
        ST_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	3305      	adds	r3, #5
 8013590:	68ba      	ldr	r2, [r7, #8]
 8013592:	3211      	adds	r2, #17
 8013594:	6812      	ldr	r2, [r2, #0]
 8013596:	601a      	str	r2, [r3, #0]
        
        return ERR_NONE;
 8013598:	2300      	movs	r3, #0
 801359a:	e0a3      	b.n	80136e4 <rfalNfcaPollerFullCollisionResolution+0x22e>
    }    
    #endif /* RFAL_FEATURE_T1T */
    
    /*******************************************************************************/
    /* Store the SENS_RES from Technology Detection or from WUPA */ 
    sensRes = nfcaDevList->sensRes;
 801359c:	68ba      	ldr	r2, [r7, #8]
 801359e:	f107 0318 	add.w	r3, r7, #24
 80135a2:	3201      	adds	r2, #1
 80135a4:	8812      	ldrh	r2, [r2, #0]
 80135a6:	801a      	strh	r2, [r3, #0]
    
    if( devLimit > 0U )  /* MISRA 21.18 */
 80135a8:	7bbb      	ldrb	r3, [r7, #14]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d008      	beq.n	80135c0 <rfalNfcaPollerFullCollisionResolution+0x10a>
    {
        ST_MEMSET( nfcaDevList, 0x00, (sizeof(rfalNfcaListenDevice) * devLimit) );
 80135ae:	7bbb      	ldrb	r3, [r7, #14]
 80135b0:	2216      	movs	r2, #22
 80135b2:	fb02 f303 	mul.w	r3, r2, r3
 80135b6:	461a      	mov	r2, r3
 80135b8:	2100      	movs	r1, #0
 80135ba:	68b8      	ldr	r0, [r7, #8]
 80135bc:	f005 fbd0 	bl	8018d60 <memset>
    }
    
    /* Restore the prev SENS_RES, assuming that the SENS_RES received is from first device
     * When only one device is detected it's not woken up then we'll have no SENS_RES (ATQA) */
    nfcaDevList->sensRes = sensRes;
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	3301      	adds	r3, #1
 80135c4:	f107 0218 	add.w	r2, r7, #24
 80135c8:	8812      	ldrh	r2, [r2, #0]
 80135ca:	801a      	strh	r2, [r3, #0]
    /*******************************************************************************/
    do
    {
        uint8_t newDeviceType;
        
        EXIT_ON_ERR( ret, rfalNfcaPollerSingleCollisionResolution( devLimit, &collPending, &nfcaDevList[*devCnt].selRes, (uint8_t*)&nfcaDevList[*devCnt].nfcId1, (uint8_t*)&nfcaDevList[*devCnt].nfcId1Len ) );
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	781b      	ldrb	r3, [r3, #0]
 80135d0:	461a      	mov	r2, r3
 80135d2:	2316      	movs	r3, #22
 80135d4:	fb02 f303 	mul.w	r3, r2, r3
 80135d8:	68ba      	ldr	r2, [r7, #8]
 80135da:	4413      	add	r3, r2
 80135dc:	1cdc      	adds	r4, r3, #3
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	781b      	ldrb	r3, [r3, #0]
 80135e2:	461a      	mov	r2, r3
 80135e4:	2316      	movs	r3, #22
 80135e6:	fb02 f303 	mul.w	r3, r2, r3
 80135ea:	68ba      	ldr	r2, [r7, #8]
 80135ec:	4413      	add	r3, r2
 80135ee:	1d5d      	adds	r5, r3, #5
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	461a      	mov	r2, r3
 80135f6:	2316      	movs	r3, #22
 80135f8:	fb02 f303 	mul.w	r3, r2, r3
 80135fc:	68ba      	ldr	r2, [r7, #8]
 80135fe:	4413      	add	r3, r2
 8013600:	3304      	adds	r3, #4
 8013602:	f107 011c 	add.w	r1, r7, #28
 8013606:	7bb8      	ldrb	r0, [r7, #14]
 8013608:	9300      	str	r3, [sp, #0]
 801360a:	462b      	mov	r3, r5
 801360c:	4622      	mov	r2, r4
 801360e:	f7ff fd84 	bl	801311a <rfalNfcaPollerSingleCollisionResolution>
 8013612:	4603      	mov	r3, r0
 8013614:	83fb      	strh	r3, [r7, #30]
 8013616:	8bfb      	ldrh	r3, [r7, #30]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d001      	beq.n	8013620 <rfalNfcaPollerFullCollisionResolution+0x16a>
 801361c:	8bfb      	ldrh	r3, [r7, #30]
 801361e:	e061      	b.n	80136e4 <rfalNfcaPollerFullCollisionResolution+0x22e>
        
        /* Assign Listen Device */
        newDeviceType = ((uint8_t)nfcaDevList[*devCnt].selRes.sak) & RFAL_NFCA_SEL_RES_CONF_MASK;  /* MISRA 10.8 */
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	781b      	ldrb	r3, [r3, #0]
 8013624:	461a      	mov	r2, r3
 8013626:	2316      	movs	r3, #22
 8013628:	fb02 f303 	mul.w	r3, r2, r3
 801362c:	68ba      	ldr	r2, [r7, #8]
 801362e:	4413      	add	r3, r2
 8013630:	78db      	ldrb	r3, [r3, #3]
 8013632:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013636:	777b      	strb	r3, [r7, #29]
        /* PRQA S 4342 1 # MISRA 10.5 - Guaranteed that no invalid enum values are created: see guard_eq_RFAL_NFCA_T2T, .... */
        nfcaDevList[*devCnt].type    = (rfalNfcaListenDeviceType) (newDeviceType);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	461a      	mov	r2, r3
 801363e:	2316      	movs	r3, #22
 8013640:	fb02 f303 	mul.w	r3, r2, r3
 8013644:	68ba      	ldr	r2, [r7, #8]
 8013646:	4413      	add	r3, r2
 8013648:	7f7a      	ldrb	r2, [r7, #29]
 801364a:	701a      	strb	r2, [r3, #0]
        nfcaDevList[*devCnt].isSleep = false;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	781b      	ldrb	r3, [r3, #0]
 8013650:	461a      	mov	r2, r3
 8013652:	2316      	movs	r3, #22
 8013654:	fb02 f303 	mul.w	r3, r2, r3
 8013658:	68ba      	ldr	r2, [r7, #8]
 801365a:	4413      	add	r3, r2
 801365c:	2200      	movs	r2, #0
 801365e:	755a      	strb	r2, [r3, #21]
        (*devCnt)++;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	3301      	adds	r3, #1
 8013666:	b2da      	uxtb	r2, r3
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	701a      	strb	r2, [r3, #0]

        
        /* If a collision was detected and device counter is lower than limit  Activity 1.1  9.3.4.21 */
        if( (*devCnt < devLimit) && ((collPending) || (compMode != RFAL_COMPLIANCE_MODE_ISO) ) )
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	781b      	ldrb	r3, [r3, #0]
 8013670:	7bba      	ldrb	r2, [r7, #14]
 8013672:	429a      	cmp	r2, r3
 8013674:	d92a      	bls.n	80136cc <rfalNfcaPollerFullCollisionResolution+0x216>
 8013676:	7f3b      	ldrb	r3, [r7, #28]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d102      	bne.n	8013682 <rfalNfcaPollerFullCollisionResolution+0x1cc>
 801367c:	7bfb      	ldrb	r3, [r7, #15]
 801367e:	2b02      	cmp	r3, #2
 8013680:	d024      	beq.n	80136cc <rfalNfcaPollerFullCollisionResolution+0x216>
        {
            /* Put this device to Sleep  Activity 1.1  9.3.4.22 */
            rfalNfcaPollerSleep();
 8013682:	f000 f8a5 	bl	80137d0 <rfalNfcaPollerSleep>
            nfcaDevList[(*devCnt - 1U)].isSleep = true;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	461a      	mov	r2, r3
 801368c:	2316      	movs	r3, #22
 801368e:	fb02 f303 	mul.w	r3, r2, r3
 8013692:	3b16      	subs	r3, #22
 8013694:	68ba      	ldr	r2, [r7, #8]
 8013696:	4413      	add	r3, r2
 8013698:	2201      	movs	r2, #1
 801369a:	755a      	strb	r2, [r3, #21]
            
            
            /* Send a new SENS_REQ to check for other cards  Activity 1.1  9.3.4.23 */
            ret = rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &nfcaDevList[*devCnt].sensRes );
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	781b      	ldrb	r3, [r3, #0]
 80136a0:	461a      	mov	r2, r3
 80136a2:	2316      	movs	r3, #22
 80136a4:	fb02 f303 	mul.w	r3, r2, r3
 80136a8:	68ba      	ldr	r2, [r7, #8]
 80136aa:	4413      	add	r3, r2
 80136ac:	3301      	adds	r3, #1
 80136ae:	4619      	mov	r1, r3
 80136b0:	2026      	movs	r0, #38	; 0x26
 80136b2:	f7ff fce9 	bl	8013088 <rfalNfcaPollerCheckPresence>
 80136b6:	4603      	mov	r3, r0
 80136b8:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 80136ba:	8bfb      	ldrh	r3, [r7, #30]
 80136bc:	2b04      	cmp	r3, #4
 80136be:	d102      	bne.n	80136c6 <rfalNfcaPollerFullCollisionResolution+0x210>
            {
                /* No more devices found, exit */
                collPending = false;
 80136c0:	2300      	movs	r3, #0
 80136c2:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 80136c4:	e004      	b.n	80136d0 <rfalNfcaPollerFullCollisionResolution+0x21a>
            }
            else
            {
                /* Another device found, continue loop */
                collPending = true;
 80136c6:	2301      	movs	r3, #1
 80136c8:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 80136ca:	e001      	b.n	80136d0 <rfalNfcaPollerFullCollisionResolution+0x21a>
            }
        }
        else
        {
            /* Exit loop */
            collPending = false;
 80136cc:	2300      	movs	r3, #0
 80136ce:	773b      	strb	r3, [r7, #28]
        }
    }while( (*devCnt < devLimit) && (collPending) );
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	781b      	ldrb	r3, [r3, #0]
 80136d4:	7bba      	ldrb	r2, [r7, #14]
 80136d6:	429a      	cmp	r2, r3
 80136d8:	d903      	bls.n	80136e2 <rfalNfcaPollerFullCollisionResolution+0x22c>
 80136da:	7f3b      	ldrb	r3, [r7, #28]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	f47f af75 	bne.w	80135cc <rfalNfcaPollerFullCollisionResolution+0x116>
    
    return ERR_NONE;
 80136e2:	2300      	movs	r3, #0
}
 80136e4:	4618      	mov	r0, r3
 80136e6:	3720      	adds	r7, #32
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bdb0      	pop	{r4, r5, r7, pc}

080136ec <rfalNfcaPollerSelect>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSelect( const uint8_t *nfcid1, uint8_t nfcidLen, rfalNfcaSelRes *selRes )
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b08c      	sub	sp, #48	; 0x30
 80136f0:	af04      	add	r7, sp, #16
 80136f2:	60f8      	str	r0, [r7, #12]
 80136f4:	460b      	mov	r3, r1
 80136f6:	607a      	str	r2, [r7, #4]
 80136f8:	72fb      	strb	r3, [r7, #11]
    uint8_t        nfcidOffset;
    uint16_t       rxLen;
    ReturnCode     ret;
    rfalNfcaSelReq selReq;
    
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d005      	beq.n	801370c <rfalNfcaPollerSelect+0x20>
 8013700:	7afb      	ldrb	r3, [r7, #11]
 8013702:	2b0a      	cmp	r3, #10
 8013704:	d802      	bhi.n	801370c <rfalNfcaPollerSelect+0x20>
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d101      	bne.n	8013710 <rfalNfcaPollerSelect+0x24>
    {
        return ERR_PARAM;
 801370c:	2307      	movs	r3, #7
 801370e:	e058      	b.n	80137c2 <rfalNfcaPollerSelect+0xd6>
    }
    
    
    /* Calculate Cascate Level */
    cl          = rfalNfcaNfcidLen2CL( nfcidLen );
 8013710:	7afb      	ldrb	r3, [r7, #11]
 8013712:	4a2e      	ldr	r2, [pc, #184]	; (80137cc <rfalNfcaPollerSelect+0xe0>)
 8013714:	fba2 2303 	umull	r2, r3, r2, r3
 8013718:	089b      	lsrs	r3, r3, #2
 801371a:	777b      	strb	r3, [r7, #29]
    nfcidOffset = 0;
 801371c:	2300      	movs	r3, #0
 801371e:	77bb      	strb	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.4.4 */
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 8013720:	2300      	movs	r3, #0
 8013722:	77fb      	strb	r3, [r7, #31]
 8013724:	e048      	b.n	80137b8 <rfalNfcaPollerSelect+0xcc>
    {
        /* Assign SEL_CMD according to the CLn and SEL_PAR*/
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 8013726:	7ffb      	ldrb	r3, [r7, #31]
 8013728:	005b      	lsls	r3, r3, #1
 801372a:	b2db      	uxtb	r3, r3
 801372c:	3b6d      	subs	r3, #109	; 0x6d
 801372e:	b2db      	uxtb	r3, r3
 8013730:	743b      	strb	r3, [r7, #16]
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 8013732:	2370      	movs	r3, #112	; 0x70
 8013734:	747b      	strb	r3, [r7, #17]
        
        /* Compute NFCID/Data on the SEL_REQ command   Digital 1.1  Table 18 */
        if( cl != i )
 8013736:	7f7a      	ldrb	r2, [r7, #29]
 8013738:	7ffb      	ldrb	r3, [r7, #31]
 801373a:	429a      	cmp	r2, r3
 801373c:	d00f      	beq.n	801375e <rfalNfcaPollerSelect+0x72>
        {
            *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 801373e:	2388      	movs	r3, #136	; 0x88
 8013740:	74bb      	strb	r3, [r7, #18]
            ST_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &nfcid1[nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 8013742:	7fbb      	ldrb	r3, [r7, #30]
 8013744:	68fa      	ldr	r2, [r7, #12]
 8013746:	18d1      	adds	r1, r2, r3
 8013748:	f107 0310 	add.w	r3, r7, #16
 801374c:	3303      	adds	r3, #3
 801374e:	2203      	movs	r2, #3
 8013750:	4618      	mov	r0, r3
 8013752:	f005 fadd 	bl	8018d10 <memcpy>
            nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 8013756:	7fbb      	ldrb	r3, [r7, #30]
 8013758:	3303      	adds	r3, #3
 801375a:	77bb      	strb	r3, [r7, #30]
 801375c:	e005      	b.n	801376a <rfalNfcaPollerSelect+0x7e>
        }
        else
        {
            ST_MEMCPY( selReq.nfcid1, &nfcid1[nfcidOffset], RFAL_NFCA_CASCADE_1_UID_LEN );
 801375e:	7fbb      	ldrb	r3, [r7, #30]
 8013760:	68fa      	ldr	r2, [r7, #12]
 8013762:	4413      	add	r3, r2
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	f8c7 3012 	str.w	r3, [r7, #18]
        }
        
        /* Calculate nfcid's BCC */
        selReq.bcc = rfalNfcaCalculateBcc( (uint8_t*)&selReq.nfcid1, sizeof(selReq.nfcid1) );
 801376a:	f107 0310 	add.w	r3, r7, #16
 801376e:	3302      	adds	r3, #2
 8013770:	2104      	movs	r1, #4
 8013772:	4618      	mov	r0, r3
 8013774:	f7ff fc44 	bl	8013000 <rfalNfcaCalculateBcc>
 8013778:	4603      	mov	r3, r0
 801377a:	75bb      	strb	r3, [r7, #22]
        
        /*******************************************************************************/
        /* Send SEL_REQ  */
        EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 801377c:	f107 0010 	add.w	r0, r7, #16
 8013780:	f240 6354 	movw	r3, #1620	; 0x654
 8013784:	9302      	str	r3, [sp, #8]
 8013786:	2300      	movs	r3, #0
 8013788:	9301      	str	r3, [sp, #4]
 801378a:	f107 0318 	add.w	r3, r7, #24
 801378e:	9300      	str	r3, [sp, #0]
 8013790:	2301      	movs	r3, #1
 8013792:	687a      	ldr	r2, [r7, #4]
 8013794:	2107      	movs	r1, #7
 8013796:	f002 fbb1 	bl	8015efc <rfalTransceiveBlockingTxRx>
 801379a:	4603      	mov	r3, r0
 801379c:	837b      	strh	r3, [r7, #26]
 801379e:	8b7b      	ldrh	r3, [r7, #26]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d001      	beq.n	80137a8 <rfalNfcaPollerSelect+0xbc>
 80137a4:	8b7b      	ldrh	r3, [r7, #26]
 80137a6:	e00c      	b.n	80137c2 <rfalNfcaPollerSelect+0xd6>
        
        /* Ensure proper response length */
        if( rxLen != sizeof(rfalNfcaSelRes) )
 80137a8:	8b3b      	ldrh	r3, [r7, #24]
 80137aa:	2b01      	cmp	r3, #1
 80137ac:	d001      	beq.n	80137b2 <rfalNfcaPollerSelect+0xc6>
        {
            return ERR_PROTO;
 80137ae:	230b      	movs	r3, #11
 80137b0:	e007      	b.n	80137c2 <rfalNfcaPollerSelect+0xd6>
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 80137b2:	7ffb      	ldrb	r3, [r7, #31]
 80137b4:	3301      	adds	r3, #1
 80137b6:	77fb      	strb	r3, [r7, #31]
 80137b8:	7ffa      	ldrb	r2, [r7, #31]
 80137ba:	7f7b      	ldrb	r3, [r7, #29]
 80137bc:	429a      	cmp	r2, r3
 80137be:	d9b2      	bls.n	8013726 <rfalNfcaPollerSelect+0x3a>
        }
    }
    
    /* REMARK: Could check if NFCID1 is complete */
    
    return ERR_NONE;
 80137c0:	2300      	movs	r3, #0
}
 80137c2:	4618      	mov	r0, r3
 80137c4:	3720      	adds	r7, #32
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}
 80137ca:	bf00      	nop
 80137cc:	cccccccd 	.word	0xcccccccd

080137d0 <rfalNfcaPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSleep( void )
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b086      	sub	sp, #24
 80137d4:	af04      	add	r7, sp, #16
    rfalNfcaSlpReq slpReq;
    uint8_t        rxBuf;    /* dummy buffer, just to perform Rx */
    
    slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 80137d6:	2350      	movs	r3, #80	; 0x50
 80137d8:	713b      	strb	r3, [r7, #4]
    slpReq.frame[RFAL_NFCA_SLP_BYTE2_POS] = RFAL_NFCA_SLP_BYTE2;
 80137da:	2300      	movs	r3, #0
 80137dc:	717b      	strb	r3, [r7, #5]
    
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 80137de:	1cfa      	adds	r2, r7, #3
 80137e0:	1d38      	adds	r0, r7, #4
 80137e2:	f243 43f8 	movw	r3, #13560	; 0x34f8
 80137e6:	9302      	str	r3, [sp, #8]
 80137e8:	2300      	movs	r3, #0
 80137ea:	9301      	str	r3, [sp, #4]
 80137ec:	2300      	movs	r3, #0
 80137ee:	9300      	str	r3, [sp, #0]
 80137f0:	2301      	movs	r3, #1
 80137f2:	2102      	movs	r1, #2
 80137f4:	f002 fb82 	bl	8015efc <rfalTransceiveBlockingTxRx>
    /* ISO14443-3 6.4.3  HLTA - If PICC responds with any modulation during 1 ms this response shall be interpreted as not acknowledge 
       Digital 2.0  6.9.2.1 & EMVCo 3.0  5.6.2.1 - consider the HLTA command always acknowledged
       No check to be compliant with NFC and EMVCo, and to improve interoprability (Kovio RFID Tag)
    */
    
    return ERR_NONE;
 80137f8:	2300      	movs	r3, #0
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	3708      	adds	r7, #8
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}

08013802 <rfalNfcaListenerIsSleepReq>:


/*******************************************************************************/
bool rfalNfcaListenerIsSleepReq( const uint8_t *buf, uint16_t bufLen )
{
 8013802:	b480      	push	{r7}
 8013804:	b083      	sub	sp, #12
 8013806:	af00      	add	r7, sp, #0
 8013808:	6078      	str	r0, [r7, #4]
 801380a:	460b      	mov	r3, r1
 801380c:	807b      	strh	r3, [r7, #2]
    /* Check if length and payload match */
    if( (bufLen != sizeof(rfalNfcaSlpReq)) || (buf[RFAL_NFCA_SLP_CMD_POS] != RFAL_NFCA_SLP_CMD) || (buf[RFAL_NFCA_SLP_BYTE2_POS] != RFAL_NFCA_SLP_BYTE2) )
 801380e:	887b      	ldrh	r3, [r7, #2]
 8013810:	2b02      	cmp	r3, #2
 8013812:	d108      	bne.n	8013826 <rfalNfcaListenerIsSleepReq+0x24>
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	2b50      	cmp	r3, #80	; 0x50
 801381a:	d104      	bne.n	8013826 <rfalNfcaListenerIsSleepReq+0x24>
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	3301      	adds	r3, #1
 8013820:	781b      	ldrb	r3, [r3, #0]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d001      	beq.n	801382a <rfalNfcaListenerIsSleepReq+0x28>
    {
        return false;
 8013826:	2300      	movs	r3, #0
 8013828:	e000      	b.n	801382c <rfalNfcaListenerIsSleepReq+0x2a>
    }
    
    return true;
 801382a:	2301      	movs	r3, #1
}
 801382c:	4618      	mov	r0, r3
 801382e:	370c      	adds	r7, #12
 8013830:	46bd      	mov	sp, r7
 8013832:	bc80      	pop	{r7}
 8013834:	4770      	bx	lr

08013836 <rfalNfcbCheckSensbRes>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcbCheckSensbRes( const rfalNfcbSensbRes *sensbRes, uint8_t sensbResLen )
{
 8013836:	b480      	push	{r7}
 8013838:	b083      	sub	sp, #12
 801383a:	af00      	add	r7, sp, #0
 801383c:	6078      	str	r0, [r7, #4]
 801383e:	460b      	mov	r3, r1
 8013840:	70fb      	strb	r3, [r7, #3]
    /* Check response length */
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 8013842:	78fb      	ldrb	r3, [r7, #3]
 8013844:	2b0c      	cmp	r3, #12
 8013846:	d004      	beq.n	8013852 <rfalNfcbCheckSensbRes+0x1c>
 8013848:	78fb      	ldrb	r3, [r7, #3]
 801384a:	2b0d      	cmp	r3, #13
 801384c:	d001      	beq.n	8013852 <rfalNfcbCheckSensbRes+0x1c>
    {
        return ERR_PROTO;
 801384e:	230b      	movs	r3, #11
 8013850:	e00c      	b.n	801386c <rfalNfcbCheckSensbRes+0x36>
    }
    
    /* Check SENSB_RES and Protocol Type   Digital 1.1 7.6.2.19 */
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	7a9b      	ldrb	r3, [r3, #10]
 8013856:	f003 0308 	and.w	r3, r3, #8
 801385a:	2b00      	cmp	r3, #0
 801385c:	d103      	bne.n	8013866 <rfalNfcbCheckSensbRes+0x30>
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	781b      	ldrb	r3, [r3, #0]
 8013862:	2b50      	cmp	r3, #80	; 0x50
 8013864:	d001      	beq.n	801386a <rfalNfcbCheckSensbRes+0x34>
    {
        return ERR_PROTO;
 8013866:	230b      	movs	r3, #11
 8013868:	e000      	b.n	801386c <rfalNfcbCheckSensbRes+0x36>
    }
    return ERR_NONE;
 801386a:	2300      	movs	r3, #0
}
 801386c:	4618      	mov	r0, r3
 801386e:	370c      	adds	r7, #12
 8013870:	46bd      	mov	sp, r7
 8013872:	bc80      	pop	{r7}
 8013874:	4770      	bx	lr
	...

08013878 <rfalNfcbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcbPollerInitialize( void )
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 801387e:	2200      	movs	r2, #0
 8013880:	2100      	movs	r1, #0
 8013882:	2003      	movs	r0, #3
 8013884:	f001 fd0a 	bl	801529c <rfalSetMode>
 8013888:	4603      	mov	r3, r0
 801388a:	80fb      	strh	r3, [r7, #6]
 801388c:	88fb      	ldrh	r3, [r7, #6]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d001      	beq.n	8013896 <rfalNfcbPollerInitialize+0x1e>
 8013892:	88fb      	ldrh	r3, [r7, #6]
 8013894:	e014      	b.n	80138c0 <rfalNfcbPollerInitialize+0x48>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8013896:	2001      	movs	r0, #1
 8013898:	f002 f89c 	bl	80159d4 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCB );
 801389c:	480a      	ldr	r0, [pc, #40]	; (80138c8 <rfalNfcbPollerInitialize+0x50>)
 801389e:	f002 f8d1 	bl	8015a44 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCB_POLLER );
 80138a2:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 80138a6:	f002 f8b9 	bl	8015a1c <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 80138aa:	f641 207c 	movw	r0, #6780	; 0x1a7c
 80138ae:	f002 f8a1 	bl	80159f4 <rfalSetFDTPoll>
    
    gRfalNfcb.AFI    = RFAL_NFCB_AFI;
 80138b2:	4b06      	ldr	r3, [pc, #24]	; (80138cc <rfalNfcbPollerInitialize+0x54>)
 80138b4:	2200      	movs	r2, #0
 80138b6:	701a      	strb	r2, [r3, #0]
    gRfalNfcb.PARAM  = RFAL_NFCB_PARAM;
 80138b8:	4b04      	ldr	r3, [pc, #16]	; (80138cc <rfalNfcbPollerInitialize+0x54>)
 80138ba:	2200      	movs	r2, #0
 80138bc:	705a      	strb	r2, [r3, #1]
    
    return ERR_NONE;
 80138be:	2300      	movs	r3, #0
}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3708      	adds	r7, #8
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}
 80138c8:	000108d8 	.word	0x000108d8
 80138cc:	200037f4 	.word	0x200037f4

080138d0 <rfalNfcbPollerCheckPresence>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b08a      	sub	sp, #40	; 0x28
 80138d4:	af04      	add	r7, sp, #16
 80138d6:	60ba      	str	r2, [r7, #8]
 80138d8:	607b      	str	r3, [r7, #4]
 80138da:	4603      	mov	r3, r0
 80138dc:	73fb      	strb	r3, [r7, #15]
 80138de:	460b      	mov	r3, r1
 80138e0:	73bb      	strb	r3, [r7, #14]
    ReturnCode       ret;
    rfalNfcbSensbReq sensbReq;
    

    /* Check if the command requested and given the slot number are valid */
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 80138e2:	7bfb      	ldrb	r3, [r7, #15]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d002      	beq.n	80138ee <rfalNfcbPollerCheckPresence+0x1e>
 80138e8:	7bfb      	ldrb	r3, [r7, #15]
 80138ea:	2b08      	cmp	r3, #8
 80138ec:	d108      	bne.n	8013900 <rfalNfcbPollerCheckPresence+0x30>
 80138ee:	7bbb      	ldrb	r3, [r7, #14]
 80138f0:	2b04      	cmp	r3, #4
 80138f2:	d805      	bhi.n	8013900 <rfalNfcbPollerCheckPresence+0x30>
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d002      	beq.n	8013900 <rfalNfcbPollerCheckPresence+0x30>
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d101      	bne.n	8013904 <rfalNfcbPollerCheckPresence+0x34>
    {
        return ERR_PARAM;
 8013900:	2307      	movs	r3, #7
 8013902:	e044      	b.n	801398e <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    *sensbResLen = 0;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2200      	movs	r2, #0
 8013908:	701a      	strb	r2, [r3, #0]
    ST_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 801390a:	220d      	movs	r2, #13
 801390c:	2100      	movs	r1, #0
 801390e:	68b8      	ldr	r0, [r7, #8]
 8013910:	f005 fa26 	bl	8018d60 <memset>
    
    /* Compute SENSB_REQ */
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 8013914:	2305      	movs	r3, #5
 8013916:	743b      	strb	r3, [r7, #16]
    sensbReq.AFI   = gRfalNfcb.AFI;
 8013918:	4b1f      	ldr	r3, [pc, #124]	; (8013998 <rfalNfcbPollerCheckPresence+0xc8>)
 801391a:	781b      	ldrb	r3, [r3, #0]
 801391c:	747b      	strb	r3, [r7, #17]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 801391e:	4b1e      	ldr	r3, [pc, #120]	; (8013998 <rfalNfcbPollerCheckPresence+0xc8>)
 8013920:	785b      	ldrb	r3, [r3, #1]
 8013922:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013926:	b2da      	uxtb	r2, r3
 8013928:	7bfb      	ldrb	r3, [r7, #15]
 801392a:	4313      	orrs	r3, r2
 801392c:	b2da      	uxtb	r2, r3
 801392e:	7bbb      	ldrb	r3, [r7, #14]
 8013930:	4313      	orrs	r3, r2
 8013932:	b2db      	uxtb	r3, r3
 8013934:	74bb      	strb	r3, [r7, #18]
    
    /* Send SENSB_REQ and disable AGC to detect collisions */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 8013936:	f107 0010 	add.w	r0, r7, #16
 801393a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 801393e:	9302      	str	r3, [sp, #8]
 8013940:	2300      	movs	r3, #0
 8013942:	9301      	str	r3, [sp, #4]
 8013944:	f107 0314 	add.w	r3, r7, #20
 8013948:	9300      	str	r3, [sp, #0]
 801394a:	230d      	movs	r3, #13
 801394c:	68ba      	ldr	r2, [r7, #8]
 801394e:	2103      	movs	r1, #3
 8013950:	f002 fad4 	bl	8015efc <rfalTransceiveBlockingTxRx>
 8013954:	4603      	mov	r3, r0
 8013956:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 8013958:	8abb      	ldrh	r3, [r7, #20]
 801395a:	b2da      	uxtb	r2, r3
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	701a      	strb	r2, [r3, #0]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8013960:	8afb      	ldrh	r3, [r7, #22]
 8013962:	2b15      	cmp	r3, #21
 8013964:	d002      	beq.n	801396c <rfalNfcbPollerCheckPresence+0x9c>
 8013966:	8afb      	ldrh	r3, [r7, #22]
 8013968:	2b09      	cmp	r3, #9
 801396a:	d104      	bne.n	8013976 <rfalNfcbPollerCheckPresence+0xa6>
    {
        /* Invalidate received frame as an error was detected (CollisionResolution checks if valid) */
        *sensbResLen = 0;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2200      	movs	r2, #0
 8013970:	701a      	strb	r2, [r3, #0]
        return ERR_NONE;
 8013972:	2300      	movs	r3, #0
 8013974:	e00b      	b.n	801398e <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    if( ret == ERR_NONE )
 8013976:	8afb      	ldrh	r3, [r7, #22]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d107      	bne.n	801398c <rfalNfcbPollerCheckPresence+0xbc>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	4619      	mov	r1, r3
 8013982:	68b8      	ldr	r0, [r7, #8]
 8013984:	f7ff ff57 	bl	8013836 <rfalNfcbCheckSensbRes>
 8013988:	4603      	mov	r3, r0
 801398a:	e000      	b.n	801398e <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    return ret;
 801398c:	8afb      	ldrh	r3, [r7, #22]
}
 801398e:	4618      	mov	r0, r3
 8013990:	3718      	adds	r7, #24
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
 8013996:	bf00      	nop
 8013998:	200037f4 	.word	0x200037f4

0801399c <rfalNfcbPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSleep( const uint8_t* nfcid0 )
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b08a      	sub	sp, #40	; 0x28
 80139a0:	af04      	add	r7, sp, #16
 80139a2:	6078      	str	r0, [r7, #4]
    uint16_t        rxLen;
    ReturnCode      ret;
    rfalNfcbSlpbReq slpbReq;
    rfalNfcbSlpbRes slpbRes;
    
    if( nfcid0 == NULL )
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d101      	bne.n	80139ae <rfalNfcbPollerSleep+0x12>
    {
        return ERR_PARAM;
 80139aa:	2307      	movs	r3, #7
 80139ac:	e024      	b.n	80139f8 <rfalNfcbPollerSleep+0x5c>
    }
    
    /* Compute SLPB_REQ */
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 80139ae:	2350      	movs	r3, #80	; 0x50
 80139b0:	733b      	strb	r3, [r7, #12]
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	681b      	ldr	r3, [r3, #0]
    ST_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 80139b6:	f8c7 300d 	str.w	r3, [r7, #13]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 80139ba:	f107 0208 	add.w	r2, r7, #8
 80139be:	f107 000c 	add.w	r0, r7, #12
 80139c2:	4b0f      	ldr	r3, [pc, #60]	; (8013a00 <rfalNfcbPollerSleep+0x64>)
 80139c4:	9302      	str	r3, [sp, #8]
 80139c6:	2300      	movs	r3, #0
 80139c8:	9301      	str	r3, [sp, #4]
 80139ca:	f107 0314 	add.w	r3, r7, #20
 80139ce:	9300      	str	r3, [sp, #0]
 80139d0:	2301      	movs	r3, #1
 80139d2:	2105      	movs	r1, #5
 80139d4:	f002 fa92 	bl	8015efc <rfalTransceiveBlockingTxRx>
 80139d8:	4603      	mov	r3, r0
 80139da:	82fb      	strh	r3, [r7, #22]
 80139dc:	8afb      	ldrh	r3, [r7, #22]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d001      	beq.n	80139e6 <rfalNfcbPollerSleep+0x4a>
 80139e2:	8afb      	ldrh	r3, [r7, #22]
 80139e4:	e008      	b.n	80139f8 <rfalNfcbPollerSleep+0x5c>
    
    /* Check SLPB_RES */
    if( (rxLen != sizeof(rfalNfcbSlpbRes)) || (slpbRes.cmd != (uint8_t)RFAL_NFCB_CMD_SLPB_RES) )
 80139e6:	8abb      	ldrh	r3, [r7, #20]
 80139e8:	2b01      	cmp	r3, #1
 80139ea:	d102      	bne.n	80139f2 <rfalNfcbPollerSleep+0x56>
 80139ec:	7a3b      	ldrb	r3, [r7, #8]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d001      	beq.n	80139f6 <rfalNfcbPollerSleep+0x5a>
    {
        return ERR_PROTO;
 80139f2:	230b      	movs	r3, #11
 80139f4:	e000      	b.n	80139f8 <rfalNfcbPollerSleep+0x5c>
    }
    return ERR_NONE;
 80139f6:	2300      	movs	r3, #0
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	3718      	adds	r7, #24
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}
 8013a00:	0003a278 	.word	0x0003a278

08013a04 <rfalNfcbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlotMarker( uint8_t slotCode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b08a      	sub	sp, #40	; 0x28
 8013a08:	af04      	add	r7, sp, #16
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	60b9      	str	r1, [r7, #8]
 8013a0e:	607a      	str	r2, [r7, #4]
 8013a10:	73fb      	strb	r3, [r7, #15]
    ReturnCode         ret;
    rfalNfcbSlotMarker slotMarker;
    uint16_t           rxLen;
    
    /* Check parameters */
    if( (sensbRes == NULL) || (sensbResLen == NULL)    || 
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d008      	beq.n	8013a2a <rfalNfcbPollerSlotMarker+0x26>
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d005      	beq.n	8013a2a <rfalNfcbPollerSlotMarker+0x26>
 8013a1e:	7bfb      	ldrb	r3, [r7, #15]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d002      	beq.n	8013a2a <rfalNfcbPollerSlotMarker+0x26>
        (slotCode < RFAL_NFCB_SLOTMARKER_SLOTCODE_MIN) || 
 8013a24:	7bfb      	ldrb	r3, [r7, #15]
 8013a26:	2b10      	cmp	r3, #16
 8013a28:	d901      	bls.n	8013a2e <rfalNfcbPollerSlotMarker+0x2a>
        (slotCode > RFAL_NFCB_SLOTMARKER_SLOTCODE_MAX)   )
    {
        return ERR_PARAM;
 8013a2a:	2307      	movs	r3, #7
 8013a2c:	e02f      	b.n	8013a8e <rfalNfcbPollerSlotMarker+0x8a>
    }
    /* Compose and send SLOT_MARKER with disabled AGC to detect collisions  */
    slotMarker.APn = ((slotCode << RFAL_NFCB_SLOT_MARKER_SC_SHIFT) | (uint8_t)RFAL_NFCB_CMD_SENSB_REQ);
 8013a2e:	7bfb      	ldrb	r3, [r7, #15]
 8013a30:	011b      	lsls	r3, r3, #4
 8013a32:	b25b      	sxtb	r3, r3
 8013a34:	f043 0305 	orr.w	r3, r3, #5
 8013a38:	b25b      	sxtb	r3, r3
 8013a3a:	b2db      	uxtb	r3, r3
 8013a3c:	753b      	strb	r3, [r7, #20]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, sizeof(rfalNfcbSlotMarker), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT );
 8013a3e:	f107 0014 	add.w	r0, r7, #20
 8013a42:	4b15      	ldr	r3, [pc, #84]	; (8013a98 <rfalNfcbPollerSlotMarker+0x94>)
 8013a44:	9302      	str	r3, [sp, #8]
 8013a46:	2300      	movs	r3, #0
 8013a48:	9301      	str	r3, [sp, #4]
 8013a4a:	f107 0312 	add.w	r3, r7, #18
 8013a4e:	9300      	str	r3, [sp, #0]
 8013a50:	230d      	movs	r3, #13
 8013a52:	68ba      	ldr	r2, [r7, #8]
 8013a54:	2101      	movs	r1, #1
 8013a56:	f002 fa51 	bl	8015efc <rfalTransceiveBlockingTxRx>
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 8013a5e:	8a7b      	ldrh	r3, [r7, #18]
 8013a60:	b2da      	uxtb	r2, r3
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	701a      	strb	r2, [r3, #0]
    
    /* Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8013a66:	8afb      	ldrh	r3, [r7, #22]
 8013a68:	2b15      	cmp	r3, #21
 8013a6a:	d002      	beq.n	8013a72 <rfalNfcbPollerSlotMarker+0x6e>
 8013a6c:	8afb      	ldrh	r3, [r7, #22]
 8013a6e:	2b09      	cmp	r3, #9
 8013a70:	d101      	bne.n	8013a76 <rfalNfcbPollerSlotMarker+0x72>
    {
        return ERR_RF_COLLISION;
 8013a72:	231d      	movs	r3, #29
 8013a74:	e00b      	b.n	8013a8e <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    if( ret == ERR_NONE )
 8013a76:	8afb      	ldrh	r3, [r7, #22]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d107      	bne.n	8013a8c <rfalNfcbPollerSlotMarker+0x88>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	781b      	ldrb	r3, [r3, #0]
 8013a80:	4619      	mov	r1, r3
 8013a82:	68b8      	ldr	r0, [r7, #8]
 8013a84:	f7ff fed7 	bl	8013836 <rfalNfcbCheckSensbRes>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	e000      	b.n	8013a8e <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    return ret;
 8013a8c:	8afb      	ldrh	r3, [r7, #22]
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3718      	adds	r7, #24
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}
 8013a96:	bf00      	nop
 8013a98:	0003a278 	.word	0x0003a278

08013a9c <rfalNfcbPollerTechnologyDetection>:


ReturnCode rfalNfcbPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b084      	sub	sp, #16
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	607a      	str	r2, [r7, #4]
 8013aa8:	73fb      	strb	r3, [r7, #15]
    NO_WARNING(compMode);
    
    return rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	68ba      	ldr	r2, [r7, #8]
 8013aae:	2100      	movs	r1, #0
 8013ab0:	2000      	movs	r0, #0
 8013ab2:	f7ff ff0d 	bl	80138d0 <rfalNfcbPollerCheckPresence>
 8013ab6:	4603      	mov	r3, r0
}
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3710      	adds	r7, #16
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}

08013ac0 <rfalNfcbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt )
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b08a      	sub	sp, #40	; 0x28
 8013ac4:	af04      	add	r7, sp, #16
 8013ac6:	60ba      	str	r2, [r7, #8]
 8013ac8:	607b      	str	r3, [r7, #4]
 8013aca:	4603      	mov	r3, r0
 8013acc:	73fb      	strb	r3, [r7, #15]
 8013ace:	460b      	mov	r3, r1
 8013ad0:	73bb      	strb	r3, [r7, #14]
    bool colPending; /* dummy */
    return rfalNfcbPollerSlottedCollisionResolution( compMode, devLimit, RFAL_NFCB_SLOT_NUM_1, RFAL_NFCB_SLOT_NUM_16, nfcbDevList, devCnt, &colPending );
 8013ad2:	7bb9      	ldrb	r1, [r7, #14]
 8013ad4:	7bf8      	ldrb	r0, [r7, #15]
 8013ad6:	f107 0317 	add.w	r3, r7, #23
 8013ada:	9302      	str	r3, [sp, #8]
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	9301      	str	r3, [sp, #4]
 8013ae0:	68bb      	ldr	r3, [r7, #8]
 8013ae2:	9300      	str	r3, [sp, #0]
 8013ae4:	2304      	movs	r3, #4
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	f000 f805 	bl	8013af6 <rfalNfcbPollerSlottedCollisionResolution>
 8013aec:	4603      	mov	r3, r0
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	3718      	adds	r7, #24
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd80      	pop	{r7, pc}

08013af6 <rfalNfcbPollerSlottedCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlottedCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbSlots initSlots, rfalNfcbSlots endSlots, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt, bool *colPending )
{
 8013af6:	b590      	push	{r4, r7, lr}
 8013af8:	b085      	sub	sp, #20
 8013afa:	af00      	add	r7, sp, #0
 8013afc:	4604      	mov	r4, r0
 8013afe:	4608      	mov	r0, r1
 8013b00:	4611      	mov	r1, r2
 8013b02:	461a      	mov	r2, r3
 8013b04:	4623      	mov	r3, r4
 8013b06:	71fb      	strb	r3, [r7, #7]
 8013b08:	4603      	mov	r3, r0
 8013b0a:	71bb      	strb	r3, [r7, #6]
 8013b0c:	460b      	mov	r3, r1
 8013b0e:	717b      	strb	r3, [r7, #5]
 8013b10:	4613      	mov	r3, r2
 8013b12:	713b      	strb	r3, [r7, #4]
        uint8_t       slotCode;
        uint8_t       curDevCnt;
        
        
        /* Check parameters. In ISO | Activity 1.0 mode the initial slots must be 1 as continuation of Technology Detection */
        if( (nfcbDevList == NULL) || (devCnt == NULL)  || (colPending == NULL) || (initSlots > RFAL_NFCB_SLOT_NUM_16) || 
 8013b14:	6a3b      	ldr	r3, [r7, #32]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d011      	beq.n	8013b3e <rfalNfcbPollerSlottedCollisionResolution+0x48>
 8013b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d00e      	beq.n	8013b3e <rfalNfcbPollerSlottedCollisionResolution+0x48>
 8013b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d00b      	beq.n	8013b3e <rfalNfcbPollerSlottedCollisionResolution+0x48>
 8013b26:	797b      	ldrb	r3, [r7, #5]
 8013b28:	2b04      	cmp	r3, #4
 8013b2a:	d808      	bhi.n	8013b3e <rfalNfcbPollerSlottedCollisionResolution+0x48>
 8013b2c:	793b      	ldrb	r3, [r7, #4]
 8013b2e:	2b04      	cmp	r3, #4
 8013b30:	d805      	bhi.n	8013b3e <rfalNfcbPollerSlottedCollisionResolution+0x48>
            (endSlots > RFAL_NFCB_SLOT_NUM_16) || ((compMode == RFAL_COMPLIANCE_MODE_ISO) && (initSlots != RFAL_NFCB_SLOT_NUM_1)) )
 8013b32:	79fb      	ldrb	r3, [r7, #7]
 8013b34:	2b02      	cmp	r3, #2
 8013b36:	d104      	bne.n	8013b42 <rfalNfcbPollerSlottedCollisionResolution+0x4c>
 8013b38:	797b      	ldrb	r3, [r7, #5]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d001      	beq.n	8013b42 <rfalNfcbPollerSlottedCollisionResolution+0x4c>
        {
            return ERR_PARAM;
 8013b3e:	2307      	movs	r3, #7
 8013b40:	e14c      	b.n	8013ddc <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        /* Initialise as no error in case Activity 1.0 where the previous SENSB_RES from technology detection should be used */
        ret         = ERR_NONE;
 8013b42:	2300      	movs	r3, #0
 8013b44:	81fb      	strh	r3, [r7, #14]
        *devCnt     = 0;
 8013b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b48:	2200      	movs	r2, #0
 8013b4a:	701a      	strb	r2, [r3, #0]
        curDevCnt   = 0;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	72fb      	strb	r3, [r7, #11]
        *colPending = false;
 8013b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b52:	2200      	movs	r2, #0
 8013b54:	701a      	strb	r2, [r3, #0]
           
        
        /* Send ALLB_REQ   Activity 1.1   9.3.5.2 and 9.3.5.3  (Symbol 1 and 2) */
        if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 8013b56:	79fb      	ldrb	r3, [r7, #7]
 8013b58:	2b02      	cmp	r3, #2
 8013b5a:	d010      	beq.n	8013b7e <rfalNfcbPollerSlottedCollisionResolution+0x88>
        {
           ret =  rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, initSlots, &nfcbDevList->sensbRes, &nfcbDevList->sensbResLen );
 8013b5c:	6a3b      	ldr	r3, [r7, #32]
 8013b5e:	1c5a      	adds	r2, r3, #1
 8013b60:	6a3b      	ldr	r3, [r7, #32]
 8013b62:	7979      	ldrb	r1, [r7, #5]
 8013b64:	2008      	movs	r0, #8
 8013b66:	f7ff feb3 	bl	80138d0 <rfalNfcbPollerCheckPresence>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	81fb      	strh	r3, [r7, #14]
           if( (ret != ERR_NONE) && (initSlots == RFAL_NFCB_SLOT_NUM_1) )
 8013b6e:	89fb      	ldrh	r3, [r7, #14]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d004      	beq.n	8013b7e <rfalNfcbPollerSlottedCollisionResolution+0x88>
 8013b74:	797b      	ldrb	r3, [r7, #5]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d101      	bne.n	8013b7e <rfalNfcbPollerSlottedCollisionResolution+0x88>
           {
               return ret;
 8013b7a:	89fb      	ldrh	r3, [r7, #14]
 8013b7c:	e12e      	b.n	8013ddc <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
           }
        }

        
        /* Check if there was a transmission error on WUPB  EMVCo 2.6  9.3.3.1 */
        if( (compMode == RFAL_COMPLIANCE_MODE_EMV) && (nfcbDevList->sensbResLen == 0U) )
 8013b7e:	79fb      	ldrb	r3, [r7, #7]
 8013b80:	2b01      	cmp	r3, #1
 8013b82:	d105      	bne.n	8013b90 <rfalNfcbPollerSlottedCollisionResolution+0x9a>
 8013b84:	6a3b      	ldr	r3, [r7, #32]
 8013b86:	781b      	ldrb	r3, [r3, #0]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d101      	bne.n	8013b90 <rfalNfcbPollerSlottedCollisionResolution+0x9a>
        {
            return ERR_FRAMING;
 8013b8c:	2309      	movs	r3, #9
 8013b8e:	e125      	b.n	8013ddc <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 8013b90:	797b      	ldrb	r3, [r7, #5]
 8013b92:	737b      	strb	r3, [r7, #13]
 8013b94:	e11c      	b.n	8013dd0 <rfalNfcbPollerSlottedCollisionResolution+0x2da>
        {
            do {
                /* Activity 1.1  9.3.5.23  -  Symbol 22 */
                if( (compMode == RFAL_COMPLIANCE_MODE_NFC) && (curDevCnt != 0U) )
 8013b96:	79fb      	ldrb	r3, [r7, #7]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d11a      	bne.n	8013bd2 <rfalNfcbPollerSlottedCollisionResolution+0xdc>
 8013b9c:	7afb      	ldrb	r3, [r7, #11]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d017      	beq.n	8013bd2 <rfalNfcbPollerSlottedCollisionResolution+0xdc>
                {
                    rfalNfcbPollerSleep( nfcbDevList[(*devCnt-1U)].sensbRes.nfcid0 );
 8013ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba4:	781b      	ldrb	r3, [r3, #0]
 8013ba6:	461a      	mov	r2, r3
 8013ba8:	4613      	mov	r3, r2
 8013baa:	011b      	lsls	r3, r3, #4
 8013bac:	1a9b      	subs	r3, r3, r2
 8013bae:	3b0f      	subs	r3, #15
 8013bb0:	6a3a      	ldr	r2, [r7, #32]
 8013bb2:	4413      	add	r3, r2
 8013bb4:	3302      	adds	r3, #2
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7ff fef0 	bl	801399c <rfalNfcbPollerSleep>
                    nfcbDevList[(*devCnt-1U)].isSleep = true;
 8013bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bbe:	781b      	ldrb	r3, [r3, #0]
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	4613      	mov	r3, r2
 8013bc4:	011b      	lsls	r3, r3, #4
 8013bc6:	1a9b      	subs	r3, r3, r2
 8013bc8:	3b0f      	subs	r3, #15
 8013bca:	6a3a      	ldr	r2, [r7, #32]
 8013bcc:	4413      	add	r3, r2
 8013bce:	2201      	movs	r2, #1
 8013bd0:	739a      	strb	r2, [r3, #14]
                }
                
                /* Send SENSB_REQ with number of slots if not the first Activity 1.1  9.3.5.24  -  Symbol 23 */
                if( (slotsNum != (uint8_t)initSlots) || *colPending )
 8013bd2:	7b7a      	ldrb	r2, [r7, #13]
 8013bd4:	797b      	ldrb	r3, [r7, #5]
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d103      	bne.n	8013be2 <rfalNfcbPollerSlottedCollisionResolution+0xec>
 8013bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bdc:	781b      	ldrb	r3, [r3, #0]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d017      	beq.n	8013c12 <rfalNfcbPollerSlottedCollisionResolution+0x11c>
                {
                    /* PRQA S 4342 1 # MISRA 10.5 - Layout of rfalNfcbSlots and above loop guarantee that no invalid enum values are created. */
                    ret = rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, (rfalNfcbSlots)slotsNum, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 8013be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be4:	781b      	ldrb	r3, [r3, #0]
 8013be6:	461a      	mov	r2, r3
 8013be8:	4613      	mov	r3, r2
 8013bea:	011b      	lsls	r3, r3, #4
 8013bec:	1a9b      	subs	r3, r3, r2
 8013bee:	6a3a      	ldr	r2, [r7, #32]
 8013bf0:	4413      	add	r3, r2
 8013bf2:	1c58      	adds	r0, r3, #1
 8013bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bf6:	781b      	ldrb	r3, [r3, #0]
 8013bf8:	461a      	mov	r2, r3
 8013bfa:	4613      	mov	r3, r2
 8013bfc:	011b      	lsls	r3, r3, #4
 8013bfe:	1a9b      	subs	r3, r3, r2
 8013c00:	6a3a      	ldr	r2, [r7, #32]
 8013c02:	4413      	add	r3, r2
 8013c04:	7b79      	ldrb	r1, [r7, #13]
 8013c06:	4602      	mov	r2, r0
 8013c08:	2000      	movs	r0, #0
 8013c0a:	f7ff fe61 	bl	80138d0 <rfalNfcbPollerCheckPresence>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	81fb      	strh	r3, [r7, #14]
                }
                
                /* Activity 1.1  9.3.5.6  -  Symbol 5 */
                slotCode    = 0;
 8013c12:	2300      	movs	r3, #0
 8013c14:	733b      	strb	r3, [r7, #12]
                curDevCnt   = 0;
 8013c16:	2300      	movs	r3, #0
 8013c18:	72fb      	strb	r3, [r7, #11]
                *colPending = false;
 8013c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	701a      	strb	r2, [r3, #0]

                do{
                    /* Activity 1.1  9.3.5.26  -  Symbol 25 */
                    if( slotCode != 0U )
 8013c20:	7b3b      	ldrb	r3, [r7, #12]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d017      	beq.n	8013c56 <rfalNfcbPollerSlottedCollisionResolution+0x160>
                    {
                        ret = rfalNfcbPollerSlotMarker( slotCode, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 8013c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	4613      	mov	r3, r2
 8013c2e:	011b      	lsls	r3, r3, #4
 8013c30:	1a9b      	subs	r3, r3, r2
 8013c32:	6a3a      	ldr	r2, [r7, #32]
 8013c34:	4413      	add	r3, r2
 8013c36:	1c59      	adds	r1, r3, #1
 8013c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c3a:	781b      	ldrb	r3, [r3, #0]
 8013c3c:	461a      	mov	r2, r3
 8013c3e:	4613      	mov	r3, r2
 8013c40:	011b      	lsls	r3, r3, #4
 8013c42:	1a9b      	subs	r3, r3, r2
 8013c44:	6a3a      	ldr	r2, [r7, #32]
 8013c46:	4413      	add	r3, r2
 8013c48:	461a      	mov	r2, r3
 8013c4a:	7b3b      	ldrb	r3, [r7, #12]
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7ff fed9 	bl	8013a04 <rfalNfcbPollerSlotMarker>
 8013c52:	4603      	mov	r3, r0
 8013c54:	81fb      	strh	r3, [r7, #14]
                    }
                    
                    /* Activity 1.1  9.3.5.7 and 9.3.5.8  -  Symbol 6 */
                    if( ret != ERR_TIMEOUT )
 8013c56:	89fb      	ldrh	r3, [r7, #14]
 8013c58:	2b04      	cmp	r3, #4
 8013c5a:	f000 809d 	beq.w	8013d98 <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                    {
                        /* Activity 1.1  9.3.5.8  -  Symbol 7 */
                        if( (rfalNfcbCheckSensbRes( &nfcbDevList[*devCnt].sensbRes, nfcbDevList[*devCnt].sensbResLen) == ERR_NONE) && (ret == ERR_NONE) )
 8013c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c60:	781b      	ldrb	r3, [r3, #0]
 8013c62:	461a      	mov	r2, r3
 8013c64:	4613      	mov	r3, r2
 8013c66:	011b      	lsls	r3, r3, #4
 8013c68:	1a9b      	subs	r3, r3, r2
 8013c6a:	6a3a      	ldr	r2, [r7, #32]
 8013c6c:	4413      	add	r3, r2
 8013c6e:	1c58      	adds	r0, r3, #1
 8013c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c72:	781b      	ldrb	r3, [r3, #0]
 8013c74:	461a      	mov	r2, r3
 8013c76:	4613      	mov	r3, r2
 8013c78:	011b      	lsls	r3, r3, #4
 8013c7a:	1a9b      	subs	r3, r3, r2
 8013c7c:	6a3a      	ldr	r2, [r7, #32]
 8013c7e:	4413      	add	r3, r2
 8013c80:	781b      	ldrb	r3, [r3, #0]
 8013c82:	4619      	mov	r1, r3
 8013c84:	f7ff fdd7 	bl	8013836 <rfalNfcbCheckSensbRes>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d177      	bne.n	8013d7e <rfalNfcbPollerSlottedCollisionResolution+0x288>
 8013c8e:	89fb      	ldrh	r3, [r7, #14]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d174      	bne.n	8013d7e <rfalNfcbPollerSlottedCollisionResolution+0x288>
                        {
                            nfcbDevList[*devCnt].isSleep = false;
 8013c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c96:	781b      	ldrb	r3, [r3, #0]
 8013c98:	461a      	mov	r2, r3
 8013c9a:	4613      	mov	r3, r2
 8013c9c:	011b      	lsls	r3, r3, #4
 8013c9e:	1a9b      	subs	r3, r3, r2
 8013ca0:	6a3a      	ldr	r2, [r7, #32]
 8013ca2:	4413      	add	r3, r2
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	739a      	strb	r2, [r3, #14]
                            
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 8013ca8:	79fb      	ldrb	r3, [r7, #7]
 8013caa:	2b01      	cmp	r3, #1
 8013cac:	d107      	bne.n	8013cbe <rfalNfcbPollerSlottedCollisionResolution+0x1c8>
                            {
                                (*devCnt)++;
 8013cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb0:	781b      	ldrb	r3, [r3, #0]
 8013cb2:	3301      	adds	r3, #1
 8013cb4:	b2da      	uxtb	r2, r3
 8013cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb8:	701a      	strb	r2, [r3, #0]
                                return ret;
 8013cba:	89fb      	ldrh	r3, [r7, #14]
 8013cbc:	e08e      	b.n	8013ddc <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_ISO )
 8013cbe:	79fb      	ldrb	r3, [r7, #7]
 8013cc0:	2b02      	cmp	r3, #2
 8013cc2:	d12b      	bne.n	8013d1c <rfalNfcbPollerSlottedCollisionResolution+0x226>
                            {
                                /* Activity 1.0  9.3.5.8  -  Symbol 7 */
                                (*devCnt)++;
 8013cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc6:	781b      	ldrb	r3, [r3, #0]
 8013cc8:	3301      	adds	r3, #1
 8013cca:	b2da      	uxtb	r2, r3
 8013ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cce:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 8013cd0:	7afb      	ldrb	r3, [r7, #11]
 8013cd2:	3301      	adds	r3, #1
 8013cd4:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.0  9.3.5.10  -  Symbol 9 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8013cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd8:	781b      	ldrb	r3, [r3, #0]
 8013cda:	79ba      	ldrb	r2, [r7, #6]
 8013cdc:	429a      	cmp	r2, r3
 8013cde:	d902      	bls.n	8013ce6 <rfalNfcbPollerSlottedCollisionResolution+0x1f0>
 8013ce0:	7b7b      	ldrb	r3, [r7, #13]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d101      	bne.n	8013cea <rfalNfcbPollerSlottedCollisionResolution+0x1f4>
                                {
                                    return ret;
 8013ce6:	89fb      	ldrh	r3, [r7, #14]
 8013ce8:	e078      	b.n	8013ddc <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                                }

                                /* Activity 1.0  9.3.5.11  -  Symbol 10 */
                                rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 8013cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cec:	781b      	ldrb	r3, [r3, #0]
 8013cee:	461a      	mov	r2, r3
 8013cf0:	4613      	mov	r3, r2
 8013cf2:	011b      	lsls	r3, r3, #4
 8013cf4:	1a9b      	subs	r3, r3, r2
 8013cf6:	3b0f      	subs	r3, #15
 8013cf8:	6a3a      	ldr	r2, [r7, #32]
 8013cfa:	4413      	add	r3, r2
 8013cfc:	3302      	adds	r3, #2
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f7ff fe4c 	bl	801399c <rfalNfcbPollerSleep>
                                nfcbDevList[*devCnt-1U].isSleep =  true;
 8013d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d06:	781b      	ldrb	r3, [r3, #0]
 8013d08:	461a      	mov	r2, r3
 8013d0a:	4613      	mov	r3, r2
 8013d0c:	011b      	lsls	r3, r3, #4
 8013d0e:	1a9b      	subs	r3, r3, r2
 8013d10:	3b0f      	subs	r3, #15
 8013d12:	6a3a      	ldr	r2, [r7, #32]
 8013d14:	4413      	add	r3, r2
 8013d16:	2201      	movs	r2, #1
 8013d18:	739a      	strb	r2, [r3, #14]
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 8013d1a:	e03c      	b.n	8013d96 <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 8013d1c:	79fb      	ldrb	r3, [r7, #7]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d139      	bne.n	8013d96 <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            {
                                /* Activity 1.1  9.3.5.10 and 9.3.5.11  -  Symbol 9 and Symbol 11*/
                                if(curDevCnt != 0U)
 8013d22:	7afb      	ldrb	r3, [r7, #11]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d017      	beq.n	8013d58 <rfalNfcbPollerSlottedCollisionResolution+0x262>
                                {
                                    rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 8013d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d2a:	781b      	ldrb	r3, [r3, #0]
 8013d2c:	461a      	mov	r2, r3
 8013d2e:	4613      	mov	r3, r2
 8013d30:	011b      	lsls	r3, r3, #4
 8013d32:	1a9b      	subs	r3, r3, r2
 8013d34:	3b0f      	subs	r3, #15
 8013d36:	6a3a      	ldr	r2, [r7, #32]
 8013d38:	4413      	add	r3, r2
 8013d3a:	3302      	adds	r3, #2
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7ff fe2d 	bl	801399c <rfalNfcbPollerSleep>
                                    nfcbDevList[*devCnt-1U].isSleep = true;
 8013d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d44:	781b      	ldrb	r3, [r3, #0]
 8013d46:	461a      	mov	r2, r3
 8013d48:	4613      	mov	r3, r2
 8013d4a:	011b      	lsls	r3, r3, #4
 8013d4c:	1a9b      	subs	r3, r3, r2
 8013d4e:	3b0f      	subs	r3, #15
 8013d50:	6a3a      	ldr	r2, [r7, #32]
 8013d52:	4413      	add	r3, r2
 8013d54:	2201      	movs	r2, #1
 8013d56:	739a      	strb	r2, [r3, #14]
                                }
                                
                                /* Activity 1.1  9.3.5.12  -  Symbol 11 */
                                (*devCnt)++;
 8013d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d5a:	781b      	ldrb	r3, [r3, #0]
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	b2da      	uxtb	r2, r3
 8013d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d62:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 8013d64:	7afb      	ldrb	r3, [r7, #11]
 8013d66:	3301      	adds	r3, #1
 8013d68:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.1  9.3.5.6  -  Symbol 13 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8013d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d6c:	781b      	ldrb	r3, [r3, #0]
 8013d6e:	79ba      	ldrb	r2, [r7, #6]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d902      	bls.n	8013d7a <rfalNfcbPollerSlottedCollisionResolution+0x284>
 8013d74:	7b7b      	ldrb	r3, [r7, #13]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d10d      	bne.n	8013d96 <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                                {
                                    return ret;
 8013d7a:	89fb      	ldrh	r3, [r7, #14]
 8013d7c:	e02e      	b.n	8013ddc <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                        }
                        else
                        {
                            /* If deviceLimit is set to 0 the NFC Forum Device is configured to perform collision detection only  Activity 1.0 and 1.1  9.3.5.5  - Symbol 4 */
                            if( (devLimit == 0U) && (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8013d7e:	79bb      	ldrb	r3, [r7, #6]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d104      	bne.n	8013d8e <rfalNfcbPollerSlottedCollisionResolution+0x298>
 8013d84:	7b7b      	ldrb	r3, [r7, #13]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d101      	bne.n	8013d8e <rfalNfcbPollerSlottedCollisionResolution+0x298>
                            {
                                return ERR_RF_COLLISION;
 8013d8a:	231d      	movs	r3, #29
 8013d8c:	e026      	b.n	8013ddc <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            
                            /* Activity 1.1  9.3.5.9  -  Symbol 8 */
                            *colPending = true;
 8013d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d90:	2201      	movs	r2, #1
 8013d92:	701a      	strb	r2, [r3, #0]
 8013d94:	e000      	b.n	8013d98 <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 8013d96:	bf00      	nop
                        }
                    }
                    
                    /* Activity 1.1  9.3.5.15  -  Symbol 14 */
                    slotCode++;
 8013d98:	7b3b      	ldrb	r3, [r7, #12]
 8013d9a:	3301      	adds	r3, #1
 8013d9c:	733b      	strb	r3, [r7, #12]
                }
                while( slotCode < rfalNfcbNI2NumberOfSlots(slotsNum) );
 8013d9e:	7b7b      	ldrb	r3, [r7, #13]
 8013da0:	2201      	movs	r2, #1
 8013da2:	fa02 f303 	lsl.w	r3, r2, r3
 8013da6:	b2db      	uxtb	r3, r3
 8013da8:	7b3a      	ldrb	r2, [r7, #12]
 8013daa:	429a      	cmp	r2, r3
 8013dac:	f4ff af38 	bcc.w	8013c20 <rfalNfcbPollerSlottedCollisionResolution+0x12a>
                
                /* Activity 1.1  9.3.5.17  -  Symbol 16 */
                if( !(*colPending) )
 8013db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db2:	781b      	ldrb	r3, [r3, #0]
 8013db4:	f083 0301 	eor.w	r3, r3, #1
 8013db8:	b2db      	uxtb	r3, r3
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d001      	beq.n	8013dc2 <rfalNfcbPollerSlottedCollisionResolution+0x2cc>
                {
                    return ERR_NONE;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	e00c      	b.n	8013ddc <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                }
            
            /* Activity 1.1  9.3.5.18  -  Symbol 17 */
            } while (curDevCnt != 0U);     /* If a collision is detected and card(s) were found on this loop keep the same number of available slots */
 8013dc2:	7afb      	ldrb	r3, [r7, #11]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	f47f aee6 	bne.w	8013b96 <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 8013dca:	7b7b      	ldrb	r3, [r7, #13]
 8013dcc:	3301      	adds	r3, #1
 8013dce:	737b      	strb	r3, [r7, #13]
 8013dd0:	7b7a      	ldrb	r2, [r7, #13]
 8013dd2:	793b      	ldrb	r3, [r7, #4]
 8013dd4:	429a      	cmp	r2, r3
 8013dd6:	f67f aede 	bls.w	8013b96 <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        }
        
        return ERR_NONE;
 8013dda:	2300      	movs	r3, #0
}
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3714      	adds	r7, #20
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd90      	pop	{r4, r7, pc}

08013de4 <rfalNfcbTR2ToFDT>:


/*******************************************************************************/
uint32_t rfalNfcbTR2ToFDT( uint8_t tr2Code )
{
 8013de4:	b480      	push	{r7}
 8013de6:	b085      	sub	sp, #20
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	4603      	mov	r3, r0
 8013dec:	71fb      	strb	r3, [r7, #7]
    /*******************************************************************************/
    /* MISRA 8.9 An object should be defined at block scope if its identifier only appears in a single function */
    /*! TR2 Table according to Digital 1.1 Table 33 */
    const uint16_t rfalNfcbTr2Table[] = { 1792, 3328, 5376, 9472 };
 8013dee:	4a0a      	ldr	r2, [pc, #40]	; (8013e18 <rfalNfcbTR2ToFDT+0x34>)
 8013df0:	f107 0308 	add.w	r3, r7, #8
 8013df4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013df8:	e883 0003 	stmia.w	r3, {r0, r1}
    /*******************************************************************************/

    return rfalNfcbTr2Table[ (tr2Code & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK) ];
 8013dfc:	79fb      	ldrb	r3, [r7, #7]
 8013dfe:	f003 0303 	and.w	r3, r3, #3
 8013e02:	005b      	lsls	r3, r3, #1
 8013e04:	3310      	adds	r3, #16
 8013e06:	443b      	add	r3, r7
 8013e08:	f833 3c08 	ldrh.w	r3, [r3, #-8]
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	3714      	adds	r7, #20
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bc80      	pop	{r7}
 8013e14:	4770      	bx	lr
 8013e16:	bf00      	nop
 8013e18:	0801a92c 	.word	0x0801a92c

08013e1c <rfalNfcfComputeValidSENF>:
******************************************************************************
*/

/*******************************************************************************/
static void rfalNfcfComputeValidSENF( rfalNfcfListenDevice *outDevInfo, uint8_t *curDevIdx, uint8_t devLimit, bool overwrite, bool *nfcDepFound )
{
 8013e1c:	b5b0      	push	{r4, r5, r7, lr}
 8013e1e:	b08c      	sub	sp, #48	; 0x30
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	60f8      	str	r0, [r7, #12]
 8013e24:	60b9      	str	r1, [r7, #8]
 8013e26:	4611      	mov	r1, r2
 8013e28:	461a      	mov	r2, r3
 8013e2a:	460b      	mov	r3, r1
 8013e2c:	71fb      	strb	r3, [r7, #7]
 8013e2e:	4613      	mov	r3, r2
 8013e30:	71bb      	strb	r3, [r7, #6]
    
    
    /*******************************************************************************/
    /* Go through all responses check if valid and duplicates                      */
    /*******************************************************************************/
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 8013e32:	e0e5      	b.n	8014000 <rfalNfcfComputeValidSENF+0x1e4>
    {
        duplicate = false;
 8013e34:	2300      	movs	r3, #0
 8013e36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        gRfalNfcfGreedyF.pollFound--;
 8013e3a:	4b78      	ldr	r3, [pc, #480]	; (801401c <rfalNfcfComputeValidSENF+0x200>)
 8013e3c:	781b      	ldrb	r3, [r3, #0]
 8013e3e:	3b01      	subs	r3, #1
 8013e40:	b2da      	uxtb	r2, r3
 8013e42:	4b76      	ldr	r3, [pc, #472]	; (801401c <rfalNfcfComputeValidSENF+0x200>)
 8013e44:	701a      	strb	r2, [r3, #0]
        
        /* MISRA 11.3 - Cannot point directly into different object type, use local copy */
        ST_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gRfalNfcfGreedyF.POLL_F[gRfalNfcfGreedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 8013e46:	4b75      	ldr	r3, [pc, #468]	; (801401c <rfalNfcfComputeValidSENF+0x200>)
 8013e48:	781b      	ldrb	r3, [r3, #0]
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	4613      	mov	r3, r2
 8013e4e:	009b      	lsls	r3, r3, #2
 8013e50:	4413      	add	r3, r2
 8013e52:	009b      	lsls	r3, r3, #2
 8013e54:	4a71      	ldr	r2, [pc, #452]	; (801401c <rfalNfcfComputeValidSENF+0x200>)
 8013e56:	4413      	add	r3, r2
 8013e58:	3302      	adds	r3, #2
 8013e5a:	f107 0414 	add.w	r4, r7, #20
 8013e5e:	461d      	mov	r5, r3
 8013e60:	6828      	ldr	r0, [r5, #0]
 8013e62:	6869      	ldr	r1, [r5, #4]
 8013e64:	68aa      	ldr	r2, [r5, #8]
 8013e66:	68eb      	ldr	r3, [r5, #12]
 8013e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013e6a:	8a2b      	ldrh	r3, [r5, #16]
 8013e6c:	7caa      	ldrb	r2, [r5, #18]
 8013e6e:	8023      	strh	r3, [r4, #0]
 8013e70:	4613      	mov	r3, r2
 8013e72:	70a3      	strb	r3, [r4, #2]
        
        
        /* Point to received SENSF_RES */
        sensfBuf = &sensfCopy;
 8013e74:	f107 0314 	add.w	r3, r7, #20
 8013e78:	62bb      	str	r3, [r7, #40]	; 0x28
        
        
        /* Check for devices that are already in device list */
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013e80:	e01b      	b.n	8013eba <rfalNfcfComputeValidSENF+0x9e>
        {
            if( ST_BYTECMP( sensfBuf->SENSF_RES.NFCID2, outDevInfo[tmpIdx].sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) == 0 )
 8013e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e84:	1c98      	adds	r0, r3, #2
 8013e86:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013e8a:	4613      	mov	r3, r2
 8013e8c:	00db      	lsls	r3, r3, #3
 8013e8e:	4413      	add	r3, r2
 8013e90:	005b      	lsls	r3, r3, #1
 8013e92:	4413      	add	r3, r2
 8013e94:	68fa      	ldr	r2, [r7, #12]
 8013e96:	4413      	add	r3, r2
 8013e98:	3302      	adds	r3, #2
 8013e9a:	2208      	movs	r2, #8
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	f004 ff27 	bl	8018cf0 <memcmp>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d103      	bne.n	8013eb0 <rfalNfcfComputeValidSENF+0x94>
            {
                duplicate = true;
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 8013eae:	e00a      	b.n	8013ec6 <rfalNfcfComputeValidSENF+0xaa>
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 8013eb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013eb4:	3301      	adds	r3, #1
 8013eb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013eba:	68bb      	ldr	r3, [r7, #8]
 8013ebc:	781b      	ldrb	r3, [r3, #0]
 8013ebe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d3dd      	bcc.n	8013e82 <rfalNfcfComputeValidSENF+0x66>
            }
        }
        
        /* If is a duplicate skip this (and not to overwrite)*/        
        if(duplicate && !overwrite)
 8013ec6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d006      	beq.n	8013edc <rfalNfcfComputeValidSENF+0xc0>
 8013ece:	79bb      	ldrb	r3, [r7, #6]
 8013ed0:	f083 0301 	eor.w	r3, r3, #1
 8013ed4:	b2db      	uxtb	r3, r3
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d000      	beq.n	8013edc <rfalNfcfComputeValidSENF+0xc0>
        {
            continue;
 8013eda:	e091      	b.n	8014000 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if response length is OK */
        if( (( sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) < RFAL_NFCF_SENSF_RES_LEN_MIN) || ((sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) > RFAL_NFCF_SENSF_RES_LEN_MAX) )
 8013edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ede:	781b      	ldrb	r3, [r3, #0]
 8013ee0:	3b02      	subs	r3, #2
 8013ee2:	2b0f      	cmp	r3, #15
 8013ee4:	f240 808c 	bls.w	8014000 <rfalNfcfComputeValidSENF+0x1e4>
 8013ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eea:	781b      	ldrb	r3, [r3, #0]
 8013eec:	3b02      	subs	r3, #2
 8013eee:	2b12      	cmp	r3, #18
 8013ef0:	d900      	bls.n	8013ef4 <rfalNfcfComputeValidSENF+0xd8>
        {
            continue;
 8013ef2:	e085      	b.n	8014000 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if the response is a SENSF_RES / Polling response */
        if( sensfBuf->SENSF_RES.CMD != (uint8_t)RFAL_NFCF_CMD_POLLING_RES )
 8013ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ef6:	785b      	ldrb	r3, [r3, #1]
 8013ef8:	2b01      	cmp	r3, #1
 8013efa:	d000      	beq.n	8013efe <rfalNfcfComputeValidSENF+0xe2>
        {
            continue;
 8013efc:	e080      	b.n	8014000 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if is an overwrite request or new device*/
        if(duplicate && overwrite)
 8013efe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d02a      	beq.n	8013f5c <rfalNfcfComputeValidSENF+0x140>
 8013f06:	79bb      	ldrb	r3, [r7, #6]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d027      	beq.n	8013f5c <rfalNfcfComputeValidSENF+0x140>
        {
            /* overwrite deviceInfo/GRE_SENSF_RES with SENSF_RES */
            outDevInfo[tmpIdx].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 8013f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f0e:	7819      	ldrb	r1, [r3, #0]
 8013f10:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013f14:	4613      	mov	r3, r2
 8013f16:	00db      	lsls	r3, r3, #3
 8013f18:	4413      	add	r3, r2
 8013f1a:	005b      	lsls	r3, r3, #1
 8013f1c:	4413      	add	r3, r2
 8013f1e:	68fa      	ldr	r2, [r7, #12]
 8013f20:	4413      	add	r3, r2
 8013f22:	1e4a      	subs	r2, r1, #1
 8013f24:	b2d2      	uxtb	r2, r2
 8013f26:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[tmpIdx].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[tmpIdx].sensfResLen );
 8013f28:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013f2c:	4613      	mov	r3, r2
 8013f2e:	00db      	lsls	r3, r3, #3
 8013f30:	4413      	add	r3, r2
 8013f32:	005b      	lsls	r3, r3, #1
 8013f34:	4413      	add	r3, r2
 8013f36:	68fa      	ldr	r2, [r7, #12]
 8013f38:	4413      	add	r3, r2
 8013f3a:	1c58      	adds	r0, r3, #1
 8013f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f3e:	1c59      	adds	r1, r3, #1
 8013f40:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013f44:	4613      	mov	r3, r2
 8013f46:	00db      	lsls	r3, r3, #3
 8013f48:	4413      	add	r3, r2
 8013f4a:	005b      	lsls	r3, r3, #1
 8013f4c:	4413      	add	r3, r2
 8013f4e:	68fa      	ldr	r2, [r7, #12]
 8013f50:	4413      	add	r3, r2
 8013f52:	781b      	ldrb	r3, [r3, #0]
 8013f54:	461a      	mov	r2, r3
 8013f56:	f004 fedb 	bl	8018d10 <memcpy>
            continue;
 8013f5a:	e051      	b.n	8014000 <rfalNfcfComputeValidSENF+0x1e4>
        }
        else
        {
            /* fill deviceInfo/GRE_SENSF_RES with new SENSF_RES */
            outDevInfo[(*curDevIdx)].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 8013f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f5e:	7819      	ldrb	r1, [r3, #0]
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	781b      	ldrb	r3, [r3, #0]
 8013f64:	461a      	mov	r2, r3
 8013f66:	4613      	mov	r3, r2
 8013f68:	00db      	lsls	r3, r3, #3
 8013f6a:	4413      	add	r3, r2
 8013f6c:	005b      	lsls	r3, r3, #1
 8013f6e:	4413      	add	r3, r2
 8013f70:	68fa      	ldr	r2, [r7, #12]
 8013f72:	4413      	add	r3, r2
 8013f74:	1e4a      	subs	r2, r1, #1
 8013f76:	b2d2      	uxtb	r2, r2
 8013f78:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[(*curDevIdx)].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[(*curDevIdx)].sensfResLen );            
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	781b      	ldrb	r3, [r3, #0]
 8013f7e:	461a      	mov	r2, r3
 8013f80:	4613      	mov	r3, r2
 8013f82:	00db      	lsls	r3, r3, #3
 8013f84:	4413      	add	r3, r2
 8013f86:	005b      	lsls	r3, r3, #1
 8013f88:	4413      	add	r3, r2
 8013f8a:	68fa      	ldr	r2, [r7, #12]
 8013f8c:	4413      	add	r3, r2
 8013f8e:	1c58      	adds	r0, r3, #1
 8013f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f92:	1c59      	adds	r1, r3, #1
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	781b      	ldrb	r3, [r3, #0]
 8013f98:	461a      	mov	r2, r3
 8013f9a:	4613      	mov	r3, r2
 8013f9c:	00db      	lsls	r3, r3, #3
 8013f9e:	4413      	add	r3, r2
 8013fa0:	005b      	lsls	r3, r3, #1
 8013fa2:	4413      	add	r3, r2
 8013fa4:	68fa      	ldr	r2, [r7, #12]
 8013fa6:	4413      	add	r3, r2
 8013fa8:	781b      	ldrb	r3, [r3, #0]
 8013faa:	461a      	mov	r2, r3
 8013fac:	f004 feb0 	bl	8018d10 <memcpy>
        }
        
        /* Check if this device supports NFC-DEP and signal it (ACTIVITY 1.1   9.3.6.63) */        
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	781b      	ldrb	r3, [r3, #0]
 8013fb4:	461a      	mov	r2, r3
 8013fb6:	4613      	mov	r3, r2
 8013fb8:	00db      	lsls	r3, r3, #3
 8013fba:	4413      	add	r3, r2
 8013fbc:	005b      	lsls	r3, r3, #1
 8013fbe:	4413      	add	r3, r2
 8013fc0:	68fa      	ldr	r2, [r7, #12]
 8013fc2:	4413      	add	r3, r2
 8013fc4:	789b      	ldrb	r3, [r3, #2]
 8013fc6:	2b01      	cmp	r3, #1
 8013fc8:	d10e      	bne.n	8013fe8 <rfalNfcfComputeValidSENF+0x1cc>
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	781b      	ldrb	r3, [r3, #0]
 8013fce:	461a      	mov	r2, r3
 8013fd0:	4613      	mov	r3, r2
 8013fd2:	00db      	lsls	r3, r3, #3
 8013fd4:	4413      	add	r3, r2
 8013fd6:	005b      	lsls	r3, r3, #1
 8013fd8:	4413      	add	r3, r2
 8013fda:	68fa      	ldr	r2, [r7, #12]
 8013fdc:	4413      	add	r3, r2
 8013fde:	78db      	ldrb	r3, [r3, #3]
 8013fe0:	2bfe      	cmp	r3, #254	; 0xfe
 8013fe2:	d101      	bne.n	8013fe8 <rfalNfcfComputeValidSENF+0x1cc>
 8013fe4:	2301      	movs	r3, #1
 8013fe6:	e000      	b.n	8013fea <rfalNfcfComputeValidSENF+0x1ce>
 8013fe8:	2300      	movs	r3, #0
 8013fea:	f003 0301 	and.w	r3, r3, #1
 8013fee:	b2da      	uxtb	r2, r3
 8013ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ff2:	701a      	strb	r2, [r3, #0]
                
        (*curDevIdx)++;
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	781b      	ldrb	r3, [r3, #0]
 8013ff8:	3301      	adds	r3, #1
 8013ffa:	b2da      	uxtb	r2, r3
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	701a      	strb	r2, [r3, #0]
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 8014000:	4b06      	ldr	r3, [pc, #24]	; (801401c <rfalNfcfComputeValidSENF+0x200>)
 8014002:	781b      	ldrb	r3, [r3, #0]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d005      	beq.n	8014014 <rfalNfcfComputeValidSENF+0x1f8>
 8014008:	68bb      	ldr	r3, [r7, #8]
 801400a:	781b      	ldrb	r3, [r3, #0]
 801400c:	79fa      	ldrb	r2, [r7, #7]
 801400e:	429a      	cmp	r2, r3
 8014010:	f63f af10 	bhi.w	8013e34 <rfalNfcfComputeValidSENF+0x18>
    }
}
 8014014:	bf00      	nop
 8014016:	3730      	adds	r7, #48	; 0x30
 8014018:	46bd      	mov	sp, r7
 801401a:	bdb0      	pop	{r4, r5, r7, pc}
 801401c:	200037f8 	.word	0x200037f8

08014020 <rfalNfcfPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcfPollerInitialize( rfalBitRate bitRate )
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b084      	sub	sp, #16
 8014024:	af00      	add	r7, sp, #0
 8014026:	4603      	mov	r3, r0
 8014028:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 801402a:	79fb      	ldrb	r3, [r7, #7]
 801402c:	2b01      	cmp	r3, #1
 801402e:	d004      	beq.n	801403a <rfalNfcfPollerInitialize+0x1a>
 8014030:	79fb      	ldrb	r3, [r7, #7]
 8014032:	2b02      	cmp	r3, #2
 8014034:	d001      	beq.n	801403a <rfalNfcfPollerInitialize+0x1a>
    {
        return ERR_PARAM;
 8014036:	2307      	movs	r3, #7
 8014038:	e01b      	b.n	8014072 <rfalNfcfPollerInitialize+0x52>
    }
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCF, bitRate, bitRate ) );
 801403a:	79fa      	ldrb	r2, [r7, #7]
 801403c:	79fb      	ldrb	r3, [r7, #7]
 801403e:	4619      	mov	r1, r3
 8014040:	2006      	movs	r0, #6
 8014042:	f001 f92b 	bl	801529c <rfalSetMode>
 8014046:	4603      	mov	r3, r0
 8014048:	81fb      	strh	r3, [r7, #14]
 801404a:	89fb      	ldrh	r3, [r7, #14]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d001      	beq.n	8014054 <rfalNfcfPollerInitialize+0x34>
 8014050:	89fb      	ldrh	r3, [r7, #14]
 8014052:	e00e      	b.n	8014072 <rfalNfcfPollerInitialize+0x52>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8014054:	2001      	movs	r0, #1
 8014056:	f001 fcbd 	bl	80159d4 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCF );
 801405a:	4808      	ldr	r0, [pc, #32]	; (801407c <rfalNfcfPollerInitialize+0x5c>)
 801405c:	f001 fcf2 	bl	8015a44 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCF_POLLER );
 8014060:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 8014064:	f001 fcda 	bl	8015a1c <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCF_POLLER );
 8014068:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 801406c:	f001 fcc2 	bl	80159f4 <rfalSetFDTPoll>
    
    return ERR_NONE;
 8014070:	2300      	movs	r3, #0
}
 8014072:	4618      	mov	r0, r3
 8014074:	3710      	adds	r7, #16
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}
 801407a:	bf00      	nop
 801407c:	00042360 	.word	0x00042360

08014080 <rfalNfcfPollerPoll>:



/*******************************************************************************/
ReturnCode rfalNfcfPollerPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes *cardList, uint8_t *devCnt, uint8_t *collisions )
{
 8014080:	b590      	push	{r4, r7, lr}
 8014082:	b087      	sub	sp, #28
 8014084:	af04      	add	r7, sp, #16
 8014086:	603b      	str	r3, [r7, #0]
 8014088:	4603      	mov	r3, r0
 801408a:	71fb      	strb	r3, [r7, #7]
 801408c:	460b      	mov	r3, r1
 801408e:	80bb      	strh	r3, [r7, #4]
 8014090:	4613      	mov	r3, r2
 8014092:	71bb      	strb	r3, [r7, #6]
    return rfalFeliCaPoll( slots, sysCode, reqCode, cardList, rfalNfcfSlots2CardNum(slots), devCnt, collisions );
 8014094:	79fb      	ldrb	r3, [r7, #7]
 8014096:	3301      	adds	r3, #1
 8014098:	b2db      	uxtb	r3, r3
 801409a:	79bc      	ldrb	r4, [r7, #6]
 801409c:	88b9      	ldrh	r1, [r7, #4]
 801409e:	79f8      	ldrb	r0, [r7, #7]
 80140a0:	69fa      	ldr	r2, [r7, #28]
 80140a2:	9202      	str	r2, [sp, #8]
 80140a4:	69ba      	ldr	r2, [r7, #24]
 80140a6:	9201      	str	r2, [sp, #4]
 80140a8:	9300      	str	r3, [sp, #0]
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	4622      	mov	r2, r4
 80140ae:	f003 f95d 	bl	801736c <rfalFeliCaPoll>
 80140b2:	4603      	mov	r3, r0
}
 80140b4:	4618      	mov	r0, r3
 80140b6:	370c      	adds	r7, #12
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd90      	pop	{r4, r7, pc}

080140bc <rfalNfcfPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheckPresence( void )
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b084      	sub	sp, #16
 80140c0:	af04      	add	r7, sp, #16
    gRfalNfcfGreedyF.pollFound     = 0;
 80140c2:	4b0b      	ldr	r3, [pc, #44]	; (80140f0 <rfalNfcfPollerCheckPresence+0x34>)
 80140c4:	2200      	movs	r2, #0
 80140c6:	701a      	strb	r2, [r3, #0]
    gRfalNfcfGreedyF.pollCollision = 0;
 80140c8:	4b09      	ldr	r3, [pc, #36]	; (80140f0 <rfalNfcfPollerCheckPresence+0x34>)
 80140ca:	2200      	movs	r2, #0
 80140cc:	705a      	strb	r2, [r3, #1]
        
    /* ACTIVITY 1.0 & 1.1 - 9.2.3.17 SENSF_REQ  must be with number of slots equal to 4
     *                                SC must be 0xFFFF
     *                                RC must be 0x00 (No system code info required) */
    return rfalFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 80140ce:	4b09      	ldr	r3, [pc, #36]	; (80140f4 <rfalNfcfPollerCheckPresence+0x38>)
 80140d0:	9302      	str	r3, [sp, #8]
 80140d2:	4b07      	ldr	r3, [pc, #28]	; (80140f0 <rfalNfcfPollerCheckPresence+0x34>)
 80140d4:	9301      	str	r3, [sp, #4]
 80140d6:	2304      	movs	r3, #4
 80140d8:	9300      	str	r3, [sp, #0]
 80140da:	4b07      	ldr	r3, [pc, #28]	; (80140f8 <rfalNfcfPollerCheckPresence+0x3c>)
 80140dc:	2200      	movs	r2, #0
 80140de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80140e2:	2003      	movs	r0, #3
 80140e4:	f003 f942 	bl	801736c <rfalFeliCaPoll>
 80140e8:	4603      	mov	r3, r0
}
 80140ea:	4618      	mov	r0, r3
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd80      	pop	{r7, pc}
 80140f0:	200037f8 	.word	0x200037f8
 80140f4:	200037f9 	.word	0x200037f9
 80140f8:	200037fa 	.word	0x200037fa

080140fc <rfalNfcfPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcfListenDevice *nfcfDevList, uint8_t *devCnt )
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b088      	sub	sp, #32
 8014100:	af02      	add	r7, sp, #8
 8014102:	60ba      	str	r2, [r7, #8]
 8014104:	607b      	str	r3, [r7, #4]
 8014106:	4603      	mov	r3, r0
 8014108:	73fb      	strb	r3, [r7, #15]
 801410a:	460b      	mov	r3, r1
 801410c:	73bb      	strb	r3, [r7, #14]
    ReturnCode  ret;
    bool        nfcDepFound;
    
    if( (nfcfDevList == NULL) || (devCnt == NULL) )
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d002      	beq.n	801411a <rfalNfcfPollerCollisionResolution+0x1e>
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d101      	bne.n	801411e <rfalNfcfPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 801411a:	2307      	movs	r3, #7
 801411c:	e053      	b.n	80141c6 <rfalNfcfPollerCollisionResolution+0xca>
    }
            
    *devCnt      = 0;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2200      	movs	r2, #0
 8014122:	701a      	strb	r2, [r3, #0]
    nfcDepFound  = false;
 8014124:	2300      	movs	r3, #0
 8014126:	757b      	strb	r3, [r7, #21]
    /* ACTIVITY 1.1 - 9.3.63.59 Populate GRE_SENSF_RES with data from GRE_POLL_F               */
    /*                                                                                         */
    /* CON_DEVICES_LIMIT = 0 Just check if devices from Tech Detection exceeds -> always true  */
    /* Allow the number of slots open on Technology Detection                                  */
    /*******************************************************************************************/
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &nfcDepFound );
 8014128:	7bbb      	ldrb	r3, [r7, #14]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d001      	beq.n	8014132 <rfalNfcfPollerCollisionResolution+0x36>
 801412e:	7bba      	ldrb	r2, [r7, #14]
 8014130:	e000      	b.n	8014134 <rfalNfcfPollerCollisionResolution+0x38>
 8014132:	2204      	movs	r2, #4
 8014134:	f107 0315 	add.w	r3, r7, #21
 8014138:	9300      	str	r3, [sp, #0]
 801413a:	2300      	movs	r3, #0
 801413c:	6879      	ldr	r1, [r7, #4]
 801413e:	68b8      	ldr	r0, [r7, #8]
 8014140:	f7ff fe6c 	bl	8013e1c <rfalNfcfComputeValidSENF>
    /*******************************************************************************/
    /* ACTIVITY 1.0 - 9.3.6.4                                                      */
    /* ACTIVITY 1.1 - 9.3.63.60 Check if devices found are lower than the limit    */
    /* and send a SENSF_REQ if so                                                  */
    /*******************************************************************************/
    if( *devCnt < devLimit )
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	781b      	ldrb	r3, [r3, #0]
 8014148:	7bba      	ldrb	r2, [r7, #14]
 801414a:	429a      	cmp	r2, r3
 801414c:	d93a      	bls.n	80141c4 <rfalNfcfPollerCollisionResolution+0xc8>
    {
        /* ACTIVITY 1.0 - 9.3.6.5  Copy valid SENSF_RES and then to remove it
         * ACTIVITY 1.1 - 9.3.6.65 Copy and filter duplicates                                           
         * For now, due to some devices keep generating different nfcid2, we use 1.0  
         * Phones detected: Samsung Galaxy Nexus,Samsung Galaxy S3,Samsung Nexus S */
        *devCnt = 0;
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	2200      	movs	r2, #0
 8014152:	701a      	strb	r2, [r3, #0]
        
        ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 8014154:	4b1e      	ldr	r3, [pc, #120]	; (80141d0 <rfalNfcfPollerCollisionResolution+0xd4>)
 8014156:	9301      	str	r3, [sp, #4]
 8014158:	4b1e      	ldr	r3, [pc, #120]	; (80141d4 <rfalNfcfPollerCollisionResolution+0xd8>)
 801415a:	9300      	str	r3, [sp, #0]
 801415c:	4b1e      	ldr	r3, [pc, #120]	; (80141d8 <rfalNfcfPollerCollisionResolution+0xdc>)
 801415e:	2200      	movs	r2, #0
 8014160:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014164:	200f      	movs	r0, #15
 8014166:	f7ff ff8b 	bl	8014080 <rfalNfcfPollerPoll>
 801416a:	4603      	mov	r3, r0
 801416c:	82fb      	strh	r3, [r7, #22]
        if( ret == ERR_NONE )
 801416e:	8afb      	ldrh	r3, [r7, #22]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d108      	bne.n	8014186 <rfalNfcfPollerCollisionResolution+0x8a>
        {
            rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, false, &nfcDepFound );
 8014174:	7bba      	ldrb	r2, [r7, #14]
 8014176:	f107 0315 	add.w	r3, r7, #21
 801417a:	9300      	str	r3, [sp, #0]
 801417c:	2300      	movs	r3, #0
 801417e:	6879      	ldr	r1, [r7, #4]
 8014180:	68b8      	ldr	r0, [r7, #8]
 8014182:	f7ff fe4b 	bl	8013e1c <rfalNfcfComputeValidSENF>
        }
      
      /*******************************************************************************/
      /* ACTIVITY 1.1 -  9.3.6.63 Check if any device supports NFC DEP               */
      /*******************************************************************************/
      if( nfcDepFound && (compMode == RFAL_COMPLIANCE_MODE_NFC) )
 8014186:	7d7b      	ldrb	r3, [r7, #21]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d01b      	beq.n	80141c4 <rfalNfcfPollerCollisionResolution+0xc8>
 801418c:	7bfb      	ldrb	r3, [r7, #15]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d118      	bne.n	80141c4 <rfalNfcfPollerCollisionResolution+0xc8>
      {
          ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_SYSTEM_CODE, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 8014192:	4b0f      	ldr	r3, [pc, #60]	; (80141d0 <rfalNfcfPollerCollisionResolution+0xd4>)
 8014194:	9301      	str	r3, [sp, #4]
 8014196:	4b0f      	ldr	r3, [pc, #60]	; (80141d4 <rfalNfcfPollerCollisionResolution+0xd8>)
 8014198:	9300      	str	r3, [sp, #0]
 801419a:	4b0f      	ldr	r3, [pc, #60]	; (80141d8 <rfalNfcfPollerCollisionResolution+0xdc>)
 801419c:	2201      	movs	r2, #1
 801419e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80141a2:	200f      	movs	r0, #15
 80141a4:	f7ff ff6c 	bl	8014080 <rfalNfcfPollerPoll>
 80141a8:	4603      	mov	r3, r0
 80141aa:	82fb      	strh	r3, [r7, #22]
          if( ret == ERR_NONE )
 80141ac:	8afb      	ldrh	r3, [r7, #22]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d108      	bne.n	80141c4 <rfalNfcfPollerCollisionResolution+0xc8>
          {
              rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, true, &nfcDepFound );
 80141b2:	7bba      	ldrb	r2, [r7, #14]
 80141b4:	f107 0315 	add.w	r3, r7, #21
 80141b8:	9300      	str	r3, [sp, #0]
 80141ba:	2301      	movs	r3, #1
 80141bc:	6879      	ldr	r1, [r7, #4]
 80141be:	68b8      	ldr	r0, [r7, #8]
 80141c0:	f7ff fe2c 	bl	8013e1c <rfalNfcfComputeValidSENF>
          }
      }
    }
    
    return ERR_NONE;
 80141c4:	2300      	movs	r3, #0
}
 80141c6:	4618      	mov	r0, r3
 80141c8:	3718      	adds	r7, #24
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bd80      	pop	{r7, pc}
 80141ce:	bf00      	nop
 80141d0:	200037f9 	.word	0x200037f9
 80141d4:	200037f8 	.word	0x200037f8
 80141d8:	200037fa 	.word	0x200037fa

080141dc <rfalNfcfPollerCheck>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheck( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvdLen )
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b0a0      	sub	sp, #128	; 0x80
 80141e0:	af04      	add	r7, sp, #16
 80141e2:	60f8      	str	r0, [r7, #12]
 80141e4:	60b9      	str	r1, [r7, #8]
 80141e6:	607a      	str	r2, [r7, #4]
 80141e8:	807b      	strh	r3, [r7, #2]
    uint8_t    i;
    ReturnCode ret;
    uint8_t    *checkRes;
    
    /* Check parameters */
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d018      	beq.n	8014222 <rfalNfcfPollerCheck+0x46>
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d015      	beq.n	8014222 <rfalNfcfPollerCheck+0x46>
 80141f6:	68bb      	ldr	r3, [r7, #8]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d012      	beq.n	8014222 <rfalNfcfPollerCheck+0x46>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	7a1b      	ldrb	r3, [r3, #8]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 8014200:	2b00      	cmp	r3, #0
 8014202:	d00e      	beq.n	8014222 <rfalNfcfPollerCheck+0x46>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	7a1b      	ldrb	r3, [r3, #8]
 8014208:	2b0f      	cmp	r3, #15
 801420a:	d80a      	bhi.n	8014222 <rfalNfcfPollerCheck+0x46>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	781b      	ldrb	r3, [r3, #0]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 8014210:	2b00      	cmp	r3, #0
 8014212:	d006      	beq.n	8014222 <rfalNfcfPollerCheck+0x46>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	781b      	ldrb	r3, [r3, #0]
 8014218:	2b0f      	cmp	r3, #15
 801421a:	d802      	bhi.n	8014222 <rfalNfcfPollerCheck+0x46>
 801421c:	887b      	ldrh	r3, [r7, #2]
 801421e:	2b0b      	cmp	r3, #11
 8014220:	d801      	bhi.n	8014226 <rfalNfcfPollerCheck+0x4a>
        (rxBufLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECK_RES_MIN_LEN))                      )
    {
        return ERR_PARAM;
 8014222:	2307      	movs	r3, #7
 8014224:	e110      	b.n	8014448 <rfalNfcfPollerCheck+0x26c>
    }
    
    msgIt = 0;
 8014226:	2300      	movs	r3, #0
 8014228:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    
    /*******************************************************************************/
    /* Compose CHECK command/request                                               */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION;                               /* Command Code    */
 801422c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014230:	1c5a      	adds	r2, r3, #1
 8014232:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8014236:	3370      	adds	r3, #112	; 0x70
 8014238:	443b      	add	r3, r7
 801423a:	2206      	movs	r2, #6
 801423c:	f803 2c60 	strb.w	r2, [r3, #-96]
    
    ST_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 8014240:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014244:	f107 0210 	add.w	r2, r7, #16
 8014248:	4413      	add	r3, r2
 801424a:	2208      	movs	r2, #8
 801424c:	68f9      	ldr	r1, [r7, #12]
 801424e:	4618      	mov	r0, r3
 8014250:	f004 fd5e 	bl	8018d10 <memcpy>
    msgIt += RFAL_NFCF_NFCID2_LEN;
 8014254:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014258:	3308      	adds	r3, #8
 801425a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 801425e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014262:	1c5a      	adds	r2, r3, #1
 8014264:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8014268:	4619      	mov	r1, r3
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	781a      	ldrb	r2, [r3, #0]
 801426e:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8014272:	443b      	add	r3, r7
 8014274:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numServ; i++)
 8014278:	2300      	movs	r3, #0
 801427a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 801427e:	e028      	b.n	80142d2 <rfalNfcfPollerCheck+0xf6>
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	685a      	ldr	r2, [r3, #4]
 8014284:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8014288:	005b      	lsls	r3, r3, #1
 801428a:	4413      	add	r3, r2
 801428c:	881a      	ldrh	r2, [r3, #0]
 801428e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014292:	1c59      	adds	r1, r3, #1
 8014294:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8014298:	b2d2      	uxtb	r2, r2
 801429a:	3370      	adds	r3, #112	; 0x70
 801429c:	443b      	add	r3, r7
 801429e:	f803 2c60 	strb.w	r2, [r3, #-96]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 80142a2:	68bb      	ldr	r3, [r7, #8]
 80142a4:	685a      	ldr	r2, [r3, #4]
 80142a6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80142aa:	005b      	lsls	r3, r3, #1
 80142ac:	4413      	add	r3, r2
 80142ae:	881b      	ldrh	r3, [r3, #0]
 80142b0:	0a1b      	lsrs	r3, r3, #8
 80142b2:	b29a      	uxth	r2, r3
 80142b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80142b8:	1c59      	adds	r1, r3, #1
 80142ba:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 80142be:	b2d2      	uxtb	r2, r2
 80142c0:	3370      	adds	r3, #112	; 0x70
 80142c2:	443b      	add	r3, r7
 80142c4:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numServ; i++)
 80142c8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80142cc:	3301      	adds	r3, #1
 80142ce:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	781b      	ldrb	r3, [r3, #0]
 80142d6:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80142da:	429a      	cmp	r2, r3
 80142dc:	d3d0      	bcc.n	8014280 <rfalNfcfPollerCheck+0xa4>
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 80142de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80142e2:	1c5a      	adds	r2, r3, #1
 80142e4:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 80142e8:	4619      	mov	r1, r3
 80142ea:	68bb      	ldr	r3, [r7, #8]
 80142ec:	7a1a      	ldrb	r2, [r3, #8]
 80142ee:	f101 0370 	add.w	r3, r1, #112	; 0x70
 80142f2:	443b      	add	r3, r7
 80142f4:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numBlock; i++)
 80142f8:	2300      	movs	r3, #0
 80142fa:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80142fe:	e054      	b.n	80143aa <rfalNfcfPollerCheck+0x1ce>
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	68da      	ldr	r2, [r3, #12]
 8014304:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8014308:	009b      	lsls	r3, r3, #2
 801430a:	441a      	add	r2, r3
 801430c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014310:	1c59      	adds	r1, r3, #1
 8014312:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8014316:	7812      	ldrb	r2, [r2, #0]
 8014318:	3370      	adds	r3, #112	; 0x70
 801431a:	443b      	add	r3, r7
 801431c:	f803 2c60 	strb.w	r2, [r3, #-96]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8014320:	68bb      	ldr	r3, [r7, #8]
 8014322:	68da      	ldr	r2, [r3, #12]
 8014324:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8014328:	009b      	lsls	r3, r3, #2
 801432a:	4413      	add	r3, r2
 801432c:	781b      	ldrb	r3, [r3, #0]
 801432e:	b25b      	sxtb	r3, r3
 8014330:	2b00      	cmp	r3, #0
 8014332:	da11      	bge.n	8014358 <rfalNfcfPollerCheck+0x17c>
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	68da      	ldr	r2, [r3, #12]
 8014338:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 801433c:	009b      	lsls	r3, r3, #2
 801433e:	4413      	add	r3, r2
 8014340:	885a      	ldrh	r2, [r3, #2]
 8014342:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014346:	1c59      	adds	r1, r3, #1
 8014348:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 801434c:	b2d2      	uxtb	r2, r2
 801434e:	3370      	adds	r3, #112	; 0x70
 8014350:	443b      	add	r3, r7
 8014352:	f803 2c60 	strb.w	r2, [r3, #-96]
 8014356:	e023      	b.n	80143a0 <rfalNfcfPollerCheck+0x1c4>
        }
        else
        {
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	68da      	ldr	r2, [r3, #12]
 801435c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8014360:	009b      	lsls	r3, r3, #2
 8014362:	4413      	add	r3, r2
 8014364:	885a      	ldrh	r2, [r3, #2]
 8014366:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801436a:	1c59      	adds	r1, r3, #1
 801436c:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8014370:	b2d2      	uxtb	r2, r2
 8014372:	3370      	adds	r3, #112	; 0x70
 8014374:	443b      	add	r3, r7
 8014376:	f803 2c60 	strb.w	r2, [r3, #-96]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	68da      	ldr	r2, [r3, #12]
 801437e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8014382:	009b      	lsls	r3, r3, #2
 8014384:	4413      	add	r3, r2
 8014386:	885b      	ldrh	r3, [r3, #2]
 8014388:	0a1b      	lsrs	r3, r3, #8
 801438a:	b29a      	uxth	r2, r3
 801438c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014390:	1c59      	adds	r1, r3, #1
 8014392:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8014396:	b2d2      	uxtb	r2, r2
 8014398:	3370      	adds	r3, #112	; 0x70
 801439a:	443b      	add	r3, r7
 801439c:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numBlock; i++)
 80143a0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80143a4:	3301      	adds	r3, #1
 80143a6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	7a1b      	ldrb	r3, [r3, #8]
 80143ae:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80143b2:	429a      	cmp	r2, r3
 80143b4:	d3a4      	bcc.n	8014300 <rfalNfcfPollerCheck+0x124>
        }
    }
    
    /*******************************************************************************/
    /* Transceive CHECK command/request                                            */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 80143b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80143ba:	b299      	uxth	r1, r3
 80143bc:	887a      	ldrh	r2, [r7, #2]
 80143be:	f107 0010 	add.w	r0, r7, #16
 80143c2:	4b23      	ldr	r3, [pc, #140]	; (8014450 <rfalNfcfPollerCheck+0x274>)
 80143c4:	9302      	str	r3, [sp, #8]
 80143c6:	2300      	movs	r3, #0
 80143c8:	9301      	str	r3, [sp, #4]
 80143ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80143cc:	9300      	str	r3, [sp, #0]
 80143ce:	4613      	mov	r3, r2
 80143d0:	687a      	ldr	r2, [r7, #4]
 80143d2:	f001 fd93 	bl	8015efc <rfalTransceiveBlockingTxRx>
 80143d6:	4603      	mov	r3, r0
 80143d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    
    if( ret == ERR_NONE )
 80143dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d12f      	bne.n	8014444 <rfalNfcfPollerCheck+0x268>
    {
        /* Skip LEN byte */
        checkRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	3301      	adds	r3, #1
 80143e8:	66bb      	str	r3, [r7, #104]	; 0x68
        
        /* Check response length */
        if( *rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS) )
 80143ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80143ec:	881b      	ldrh	r3, [r3, #0]
 80143ee:	2b0a      	cmp	r3, #10
 80143f0:	d803      	bhi.n	80143fa <rfalNfcfPollerCheck+0x21e>
        {
            ret = ERR_PROTO;
 80143f2:	230b      	movs	r3, #11
 80143f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80143f8:	e024      	b.n	8014444 <rfalNfcfPollerCheck+0x268>
        }
        /* Check for a valid response */
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 80143fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80143fc:	781b      	ldrb	r3, [r3, #0]
 80143fe:	2b07      	cmp	r3, #7
 8014400:	d109      	bne.n	8014416 <rfalNfcfPollerCheck+0x23a>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 8014402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014404:	3309      	adds	r3, #9
 8014406:	781b      	ldrb	r3, [r3, #0]
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 8014408:	2b00      	cmp	r3, #0
 801440a:	d104      	bne.n	8014416 <rfalNfcfPollerCheck+0x23a>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST2_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)        )
 801440c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801440e:	330a      	adds	r3, #10
 8014410:	781b      	ldrb	r3, [r3, #0]
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 8014412:	2b00      	cmp	r3, #0
 8014414:	d003      	beq.n	801441e <rfalNfcfPollerCheck+0x242>
        {
            ret = ERR_REQUEST;
 8014416:	2305      	movs	r3, #5
 8014418:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 801441c:	e012      	b.n	8014444 <rfalNfcfPollerCheck+0x268>
        }
        /* CHECK succesfull, remove header */
        else
        {
            (*rcvdLen) -= (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_NOB_POS);
 801441e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014420:	881b      	ldrh	r3, [r3, #0]
 8014422:	3b0c      	subs	r3, #12
 8014424:	b29a      	uxth	r2, r3
 8014426:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014428:	801a      	strh	r2, [r3, #0]
            
            if( *rcvdLen > 0U )
 801442a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801442c:	881b      	ldrh	r3, [r3, #0]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d008      	beq.n	8014444 <rfalNfcfPollerCheck+0x268>
            {
                ST_MEMMOVE( rxBuf, &checkRes[RFAL_NFCF_CHECKUPDATE_RES_NOB_POS], (*rcvdLen) );
 8014432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014434:	f103 010b 	add.w	r1, r3, #11
 8014438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801443a:	881b      	ldrh	r3, [r3, #0]
 801443c:	461a      	mov	r2, r3
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f004 fc74 	bl	8018d2c <memmove>
            }
        }
    }
    
    return ret;
 8014444:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
}
 8014448:	4618      	mov	r0, r3
 801444a:	3770      	adds	r7, #112	; 0x70
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}
 8014450:	02000010 	.word	0x02000010

08014454 <rfalNfcfPollerUpdate>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerUpdate( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock,  uint8_t *txBuf, uint16_t txBufLen, const uint8_t *blockData, uint8_t *rxBuf, uint16_t rxBufLen )
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b08c      	sub	sp, #48	; 0x30
 8014458:	af04      	add	r7, sp, #16
 801445a:	60f8      	str	r0, [r7, #12]
 801445c:	60b9      	str	r1, [r7, #8]
 801445e:	607a      	str	r2, [r7, #4]
 8014460:	807b      	strh	r3, [r7, #2]
    uint16_t   auxLen;
    uint8_t    *updateRes;
    ReturnCode ret;

    /* Check parameters */
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL) || (txBuf == NULL)         ||
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d01b      	beq.n	80144a0 <rfalNfcfPollerUpdate+0x4c>
 8014468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801446a:	2b00      	cmp	r3, #0
 801446c:	d018      	beq.n	80144a0 <rfalNfcfPollerUpdate+0x4c>
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d015      	beq.n	80144a0 <rfalNfcfPollerUpdate+0x4c>
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d012      	beq.n	80144a0 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	7a1b      	ldrb	r3, [r3, #8]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL) || (txBuf == NULL)         ||
 801447e:	2b00      	cmp	r3, #0
 8014480:	d00e      	beq.n	80144a0 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	7a1b      	ldrb	r3, [r3, #8]
 8014486:	2b0d      	cmp	r3, #13
 8014488:	d80a      	bhi.n	80144a0 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numServ == 0U)   || (servBlock->numServ > RFAL_NFCF_UPDATE_REQ_MAX_SERV)  ||
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	781b      	ldrb	r3, [r3, #0]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 801448e:	2b00      	cmp	r3, #0
 8014490:	d006      	beq.n	80144a0 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numServ == 0U)   || (servBlock->numServ > RFAL_NFCF_UPDATE_REQ_MAX_SERV)  ||
 8014492:	68bb      	ldr	r3, [r7, #8]
 8014494:	781b      	ldrb	r3, [r3, #0]
 8014496:	2b0f      	cmp	r3, #15
 8014498:	d802      	bhi.n	80144a0 <rfalNfcfPollerUpdate+0x4c>
 801449a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801449c:	2b0b      	cmp	r3, #11
 801449e:	d801      	bhi.n	80144a4 <rfalNfcfPollerUpdate+0x50>
        (rxBufLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_UPDATE_RES_MIN_LEN))                      )
    {
        return ERR_PARAM;
 80144a0:	2307      	movs	r3, #7
 80144a2:	e0f2      	b.n	801468a <rfalNfcfPollerUpdate+0x236>
    }
    
    /* Calculate required txBuffer lenth */
    auxLen = (uint16_t)( RFAL_NFCF_CMD_LEN + RFAL_NFCF_NFCID2_LEN + ( servBlock->numServ * sizeof(rfalNfcfServ) ) + 
 80144a4:	68bb      	ldr	r3, [r7, #8]
 80144a6:	781b      	ldrb	r3, [r3, #0]
 80144a8:	b29a      	uxth	r2, r3
              (servBlock->numBlock * sizeof(rfalNfcfBlockListElem)) + (uint16_t)((uint16_t)servBlock->numBlock * RFAL_NFCF_BLOCK_LEN) );
 80144aa:	68bb      	ldr	r3, [r7, #8]
 80144ac:	7a1b      	ldrb	r3, [r3, #8]
 80144ae:	b29b      	uxth	r3, r3
 80144b0:	4619      	mov	r1, r3
 80144b2:	0089      	lsls	r1, r1, #2
 80144b4:	440b      	add	r3, r1
 80144b6:	005b      	lsls	r3, r3, #1
 80144b8:	b29b      	uxth	r3, r3
 80144ba:	4413      	add	r3, r2
 80144bc:	b29b      	uxth	r3, r3
 80144be:	005b      	lsls	r3, r3, #1
 80144c0:	b29b      	uxth	r3, r3
    auxLen = (uint16_t)( RFAL_NFCF_CMD_LEN + RFAL_NFCF_NFCID2_LEN + ( servBlock->numServ * sizeof(rfalNfcfServ) ) + 
 80144c2:	3309      	adds	r3, #9
 80144c4:	833b      	strh	r3, [r7, #24]
    
    /* Check whether the provided buffer is sufficient for this request */
    if( txBufLen < auxLen )
 80144c6:	887a      	ldrh	r2, [r7, #2]
 80144c8:	8b3b      	ldrh	r3, [r7, #24]
 80144ca:	429a      	cmp	r2, r3
 80144cc:	d201      	bcs.n	80144d2 <rfalNfcfPollerUpdate+0x7e>
    {
        return ERR_PARAM;
 80144ce:	2307      	movs	r3, #7
 80144d0:	e0db      	b.n	801468a <rfalNfcfPollerUpdate+0x236>
    }
        
    msgIt = 0;
 80144d2:	2300      	movs	r3, #0
 80144d4:	83bb      	strh	r3, [r7, #28]
    
    /*******************************************************************************/
    /* Compose UPDATE command/request                                              */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION;                              /* Command Code    */
 80144d6:	8bbb      	ldrh	r3, [r7, #28]
 80144d8:	1c5a      	adds	r2, r3, #1
 80144da:	83ba      	strh	r2, [r7, #28]
 80144dc:	461a      	mov	r2, r3
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	4413      	add	r3, r2
 80144e2:	2208      	movs	r2, #8
 80144e4:	701a      	strb	r2, [r3, #0]
    
    ST_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 80144e6:	8bbb      	ldrh	r3, [r7, #28]
 80144e8:	687a      	ldr	r2, [r7, #4]
 80144ea:	4413      	add	r3, r2
 80144ec:	2208      	movs	r2, #8
 80144ee:	68f9      	ldr	r1, [r7, #12]
 80144f0:	4618      	mov	r0, r3
 80144f2:	f004 fc0d 	bl	8018d10 <memcpy>
    msgIt += RFAL_NFCF_NFCID2_LEN;
 80144f6:	8bbb      	ldrh	r3, [r7, #28]
 80144f8:	3308      	adds	r3, #8
 80144fa:	83bb      	strh	r3, [r7, #28]
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 80144fc:	8bbb      	ldrh	r3, [r7, #28]
 80144fe:	1c5a      	adds	r2, r3, #1
 8014500:	83ba      	strh	r2, [r7, #28]
 8014502:	461a      	mov	r2, r3
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	4413      	add	r3, r2
 8014508:	68ba      	ldr	r2, [r7, #8]
 801450a:	7812      	ldrb	r2, [r2, #0]
 801450c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 801450e:	2300      	movs	r3, #0
 8014510:	77fb      	strb	r3, [r7, #31]
 8014512:	e020      	b.n	8014556 <rfalNfcfPollerUpdate+0x102>
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	685a      	ldr	r2, [r3, #4]
 8014518:	7ffb      	ldrb	r3, [r7, #31]
 801451a:	005b      	lsls	r3, r3, #1
 801451c:	4413      	add	r3, r2
 801451e:	881a      	ldrh	r2, [r3, #0]
 8014520:	8bbb      	ldrh	r3, [r7, #28]
 8014522:	1c59      	adds	r1, r3, #1
 8014524:	83b9      	strh	r1, [r7, #28]
 8014526:	4619      	mov	r1, r3
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	440b      	add	r3, r1
 801452c:	b2d2      	uxtb	r2, r2
 801452e:	701a      	strb	r2, [r3, #0]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8014530:	68bb      	ldr	r3, [r7, #8]
 8014532:	685a      	ldr	r2, [r3, #4]
 8014534:	7ffb      	ldrb	r3, [r7, #31]
 8014536:	005b      	lsls	r3, r3, #1
 8014538:	4413      	add	r3, r2
 801453a:	881b      	ldrh	r3, [r3, #0]
 801453c:	0a1b      	lsrs	r3, r3, #8
 801453e:	b29a      	uxth	r2, r3
 8014540:	8bbb      	ldrh	r3, [r7, #28]
 8014542:	1c59      	adds	r1, r3, #1
 8014544:	83b9      	strh	r1, [r7, #28]
 8014546:	4619      	mov	r1, r3
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	440b      	add	r3, r1
 801454c:	b2d2      	uxtb	r2, r2
 801454e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 8014550:	7ffb      	ldrb	r3, [r7, #31]
 8014552:	3301      	adds	r3, #1
 8014554:	77fb      	strb	r3, [r7, #31]
 8014556:	68bb      	ldr	r3, [r7, #8]
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	7ffa      	ldrb	r2, [r7, #31]
 801455c:	429a      	cmp	r2, r3
 801455e:	d3d9      	bcc.n	8014514 <rfalNfcfPollerUpdate+0xc0>
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 8014560:	8bbb      	ldrh	r3, [r7, #28]
 8014562:	1c5a      	adds	r2, r3, #1
 8014564:	83ba      	strh	r2, [r7, #28]
 8014566:	461a      	mov	r2, r3
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	4413      	add	r3, r2
 801456c:	68ba      	ldr	r2, [r7, #8]
 801456e:	7a12      	ldrb	r2, [r2, #8]
 8014570:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numBlock; i++)
 8014572:	2300      	movs	r3, #0
 8014574:	77fb      	strb	r3, [r7, #31]
 8014576:	e045      	b.n	8014604 <rfalNfcfPollerUpdate+0x1b0>
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	68da      	ldr	r2, [r3, #12]
 801457c:	7ffb      	ldrb	r3, [r7, #31]
 801457e:	009b      	lsls	r3, r3, #2
 8014580:	441a      	add	r2, r3
 8014582:	8bbb      	ldrh	r3, [r7, #28]
 8014584:	1c59      	adds	r1, r3, #1
 8014586:	83b9      	strh	r1, [r7, #28]
 8014588:	4619      	mov	r1, r3
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	440b      	add	r3, r1
 801458e:	7812      	ldrb	r2, [r2, #0]
 8014590:	701a      	strb	r2, [r3, #0]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8014592:	68bb      	ldr	r3, [r7, #8]
 8014594:	68da      	ldr	r2, [r3, #12]
 8014596:	7ffb      	ldrb	r3, [r7, #31]
 8014598:	009b      	lsls	r3, r3, #2
 801459a:	4413      	add	r3, r2
 801459c:	781b      	ldrb	r3, [r3, #0]
 801459e:	b25b      	sxtb	r3, r3
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	da0e      	bge.n	80145c2 <rfalNfcfPollerUpdate+0x16e>
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	68da      	ldr	r2, [r3, #12]
 80145a8:	7ffb      	ldrb	r3, [r7, #31]
 80145aa:	009b      	lsls	r3, r3, #2
 80145ac:	4413      	add	r3, r2
 80145ae:	885a      	ldrh	r2, [r3, #2]
 80145b0:	8bbb      	ldrh	r3, [r7, #28]
 80145b2:	1c59      	adds	r1, r3, #1
 80145b4:	83b9      	strh	r1, [r7, #28]
 80145b6:	4619      	mov	r1, r3
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	440b      	add	r3, r1
 80145bc:	b2d2      	uxtb	r2, r2
 80145be:	701a      	strb	r2, [r3, #0]
 80145c0:	e01d      	b.n	80145fe <rfalNfcfPollerUpdate+0x1aa>
        }
        else
        {
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 80145c2:	68bb      	ldr	r3, [r7, #8]
 80145c4:	68da      	ldr	r2, [r3, #12]
 80145c6:	7ffb      	ldrb	r3, [r7, #31]
 80145c8:	009b      	lsls	r3, r3, #2
 80145ca:	4413      	add	r3, r2
 80145cc:	885a      	ldrh	r2, [r3, #2]
 80145ce:	8bbb      	ldrh	r3, [r7, #28]
 80145d0:	1c59      	adds	r1, r3, #1
 80145d2:	83b9      	strh	r1, [r7, #28]
 80145d4:	4619      	mov	r1, r3
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	440b      	add	r3, r1
 80145da:	b2d2      	uxtb	r2, r2
 80145dc:	701a      	strb	r2, [r3, #0]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	68da      	ldr	r2, [r3, #12]
 80145e2:	7ffb      	ldrb	r3, [r7, #31]
 80145e4:	009b      	lsls	r3, r3, #2
 80145e6:	4413      	add	r3, r2
 80145e8:	885b      	ldrh	r3, [r3, #2]
 80145ea:	0a1b      	lsrs	r3, r3, #8
 80145ec:	b29a      	uxth	r2, r3
 80145ee:	8bbb      	ldrh	r3, [r7, #28]
 80145f0:	1c59      	adds	r1, r3, #1
 80145f2:	83b9      	strh	r1, [r7, #28]
 80145f4:	4619      	mov	r1, r3
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	440b      	add	r3, r1
 80145fa:	b2d2      	uxtb	r2, r2
 80145fc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numBlock; i++)
 80145fe:	7ffb      	ldrb	r3, [r7, #31]
 8014600:	3301      	adds	r3, #1
 8014602:	77fb      	strb	r3, [r7, #31]
 8014604:	68bb      	ldr	r3, [r7, #8]
 8014606:	7a1b      	ldrb	r3, [r3, #8]
 8014608:	7ffa      	ldrb	r2, [r7, #31]
 801460a:	429a      	cmp	r2, r3
 801460c:	d3b4      	bcc.n	8014578 <rfalNfcfPollerUpdate+0x124>
        }
    }
    
    auxLen = ((uint16_t)servBlock->numBlock * RFAL_NFCF_BLOCK_LEN);
 801460e:	68bb      	ldr	r3, [r7, #8]
 8014610:	7a1b      	ldrb	r3, [r3, #8]
 8014612:	b29b      	uxth	r3, r3
 8014614:	011b      	lsls	r3, r3, #4
 8014616:	833b      	strh	r3, [r7, #24]
    ST_MEMCPY( &txBuf[msgIt], blockData, auxLen );                                        /* Block Data      */
 8014618:	8bbb      	ldrh	r3, [r7, #28]
 801461a:	687a      	ldr	r2, [r7, #4]
 801461c:	4413      	add	r3, r2
 801461e:	8b3a      	ldrh	r2, [r7, #24]
 8014620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014622:	4618      	mov	r0, r3
 8014624:	f004 fb74 	bl	8018d10 <memcpy>
    msgIt += auxLen;
 8014628:	8bba      	ldrh	r2, [r7, #28]
 801462a:	8b3b      	ldrh	r3, [r7, #24]
 801462c:	4413      	add	r3, r2
 801462e:	83bb      	strh	r3, [r7, #28]
    
    
    /*******************************************************************************/
    /* Transceive UPDATE command/request                                           */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 8014630:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8014632:	8bb9      	ldrh	r1, [r7, #28]
 8014634:	4b17      	ldr	r3, [pc, #92]	; (8014694 <rfalNfcfPollerUpdate+0x240>)
 8014636:	9302      	str	r3, [sp, #8]
 8014638:	2300      	movs	r3, #0
 801463a:	9301      	str	r3, [sp, #4]
 801463c:	f107 0312 	add.w	r3, r7, #18
 8014640:	9300      	str	r3, [sp, #0]
 8014642:	4613      	mov	r3, r2
 8014644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014646:	6878      	ldr	r0, [r7, #4]
 8014648:	f001 fc58 	bl	8015efc <rfalTransceiveBlockingTxRx>
 801464c:	4603      	mov	r3, r0
 801464e:	837b      	strh	r3, [r7, #26]
    
    if( ret == ERR_NONE )
 8014650:	8b7b      	ldrh	r3, [r7, #26]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d118      	bne.n	8014688 <rfalNfcfPollerUpdate+0x234>
    {
        /* Skip LEN byte */
        updateRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
 8014656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014658:	3301      	adds	r3, #1
 801465a:	617b      	str	r3, [r7, #20]
        
        /* Check response length */
        if( rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS) )
 801465c:	8a7b      	ldrh	r3, [r7, #18]
 801465e:	2b0a      	cmp	r3, #10
 8014660:	d802      	bhi.n	8014668 <rfalNfcfPollerUpdate+0x214>
        {
            ret = ERR_PROTO;
 8014662:	230b      	movs	r3, #11
 8014664:	837b      	strh	r3, [r7, #26]
 8014666:	e00f      	b.n	8014688 <rfalNfcfPollerUpdate+0x234>
        }
        /* Check for a valid response */
        else if( (updateRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION_RES) ||
 8014668:	697b      	ldr	r3, [r7, #20]
 801466a:	781b      	ldrb	r3, [r3, #0]
 801466c:	2b09      	cmp	r3, #9
 801466e:	d109      	bne.n	8014684 <rfalNfcfPollerUpdate+0x230>
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)       ||
 8014670:	697b      	ldr	r3, [r7, #20]
 8014672:	3309      	adds	r3, #9
 8014674:	781b      	ldrb	r3, [r3, #0]
        else if( (updateRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION_RES) ||
 8014676:	2b00      	cmp	r3, #0
 8014678:	d104      	bne.n	8014684 <rfalNfcfPollerUpdate+0x230>
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST2_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)         )
 801467a:	697b      	ldr	r3, [r7, #20]
 801467c:	330a      	adds	r3, #10
 801467e:	781b      	ldrb	r3, [r3, #0]
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)       ||
 8014680:	2b00      	cmp	r3, #0
 8014682:	d001      	beq.n	8014688 <rfalNfcfPollerUpdate+0x234>
        {
            ret = ERR_REQUEST;
 8014684:	2305      	movs	r3, #5
 8014686:	837b      	strh	r3, [r7, #26]
        {
            /* MISRA 15.7 - Empty else */
        }
    }
    
    return ret;
 8014688:	8b7b      	ldrh	r3, [r7, #26]
}
 801468a:	4618      	mov	r0, r3
 801468c:	3720      	adds	r7, #32
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}
 8014692:	bf00      	nop
 8014694:	02000010 	.word	0x02000010

08014698 <rfalNfcvParseError>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcvParseError( uint8_t err )
{
 8014698:	b480      	push	{r7}
 801469a:	b083      	sub	sp, #12
 801469c:	af00      	add	r7, sp, #0
 801469e:	4603      	mov	r3, r0
 80146a0:	71fb      	strb	r3, [r7, #7]
    switch(err)
 80146a2:	79fb      	ldrb	r3, [r7, #7]
 80146a4:	3b01      	subs	r3, #1
 80146a6:	2b12      	cmp	r3, #18
 80146a8:	d82e      	bhi.n	8014708 <rfalNfcvParseError+0x70>
 80146aa:	a201      	add	r2, pc, #4	; (adr r2, 80146b0 <rfalNfcvParseError+0x18>)
 80146ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146b0:	080146fd 	.word	0x080146fd
 80146b4:	08014701 	.word	0x08014701
 80146b8:	080146fd 	.word	0x080146fd
 80146bc:	08014709 	.word	0x08014709
 80146c0:	08014709 	.word	0x08014709
 80146c4:	08014709 	.word	0x08014709
 80146c8:	08014709 	.word	0x08014709
 80146cc:	08014709 	.word	0x08014709
 80146d0:	08014709 	.word	0x08014709
 80146d4:	08014709 	.word	0x08014709
 80146d8:	08014709 	.word	0x08014709
 80146dc:	08014709 	.word	0x08014709
 80146e0:	08014709 	.word	0x08014709
 80146e4:	08014709 	.word	0x08014709
 80146e8:	08014709 	.word	0x08014709
 80146ec:	08014709 	.word	0x08014709
 80146f0:	08014709 	.word	0x08014709
 80146f4:	08014709 	.word	0x08014709
 80146f8:	08014705 	.word	0x08014705
    {
        case RFAL_NFCV_ERROR_CMD_NOT_SUPPORTED:
        case RFAL_NFCV_ERROR_OPTION_NOT_SUPPORTED:
            return ERR_NOTSUPP;
 80146fc:	2318      	movs	r3, #24
 80146fe:	e004      	b.n	801470a <rfalNfcvParseError+0x72>
            
        case RFAL_NFCV_ERROR_CMD_NOT_RECOGNIZED:
            return ERR_PROTO;
 8014700:	230b      	movs	r3, #11
 8014702:	e002      	b.n	801470a <rfalNfcvParseError+0x72>
            
        case RFAL_NFCV_ERROR_WRITE_FAILED:
            return ERR_WRITE;
 8014704:	2319      	movs	r3, #25
 8014706:	e000      	b.n	801470a <rfalNfcvParseError+0x72>
            
        default:
            return ERR_REQUEST;
 8014708:	2305      	movs	r3, #5
    }
}
 801470a:	4618      	mov	r0, r3
 801470c:	370c      	adds	r7, #12
 801470e:	46bd      	mov	sp, r7
 8014710:	bc80      	pop	{r7}
 8014712:	4770      	bx	lr

08014714 <rfalNfcvPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcvPollerInitialize( void )
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
    ReturnCode ret;
            
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 801471a:	22ec      	movs	r2, #236	; 0xec
 801471c:	21ec      	movs	r1, #236	; 0xec
 801471e:	2007      	movs	r0, #7
 8014720:	f000 fdbc 	bl	801529c <rfalSetMode>
 8014724:	4603      	mov	r3, r0
 8014726:	80fb      	strh	r3, [r7, #6]
 8014728:	88fb      	ldrh	r3, [r7, #6]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d001      	beq.n	8014732 <rfalNfcvPollerInitialize+0x1e>
 801472e:	88fb      	ldrh	r3, [r7, #6]
 8014730:	e00e      	b.n	8014750 <rfalNfcvPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8014732:	2001      	movs	r0, #1
 8014734:	f001 f94e 	bl	80159d4 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCV );
 8014738:	4807      	ldr	r0, [pc, #28]	; (8014758 <rfalNfcvPollerInitialize+0x44>)
 801473a:	f001 f983 	bl	8015a44 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCV_POLLER );
 801473e:	f241 00d6 	movw	r0, #4310	; 0x10d6
 8014742:	f001 f96b 	bl	8015a1c <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 8014746:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 801474a:	f001 f953 	bl	80159f4 <rfalSetFDTPoll>
    
    return ERR_NONE;
 801474e:	2300      	movs	r3, #0
}
 8014750:	4618      	mov	r0, r3
 8014752:	3708      	adds	r7, #8
 8014754:	46bd      	mov	sp, r7
 8014756:	bd80      	pop	{r7, pc}
 8014758:	000108d8 	.word	0x000108d8

0801475c <rfalNfcvPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCheckPresence( rfalNfcvInventoryRes *invRes )
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b086      	sub	sp, #24
 8014760:	af02      	add	r7, sp, #8
 8014762:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    
    /* INVENTORY_REQ with 1 slot and no Mask   Activity 2.0 (Candidate) 9.2.3.32 */
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 8014764:	2300      	movs	r3, #0
 8014766:	9300      	str	r3, [sp, #0]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2200      	movs	r2, #0
 801476c:	2100      	movs	r1, #0
 801476e:	2020      	movs	r0, #32
 8014770:	f000 f815 	bl	801479e <rfalNfcvPollerInventory>
 8014774:	4603      	mov	r3, r0
 8014776:	81fb      	strh	r3, [r7, #14]
    
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || 
 8014778:	89fb      	ldrh	r3, [r7, #14]
 801477a:	2b1d      	cmp	r3, #29
 801477c:	d008      	beq.n	8014790 <rfalNfcvPollerCheckPresence+0x34>
 801477e:	89fb      	ldrh	r3, [r7, #14]
 8014780:	2b15      	cmp	r3, #21
 8014782:	d005      	beq.n	8014790 <rfalNfcvPollerCheckPresence+0x34>
 8014784:	89fb      	ldrh	r3, [r7, #14]
 8014786:	2b09      	cmp	r3, #9
 8014788:	d002      	beq.n	8014790 <rfalNfcvPollerCheckPresence+0x34>
        (ret == ERR_FRAMING)      || (ret == ERR_PROTO)  )
 801478a:	89fb      	ldrh	r3, [r7, #14]
 801478c:	2b0b      	cmp	r3, #11
 801478e:	d101      	bne.n	8014794 <rfalNfcvPollerCheckPresence+0x38>
    {
        ret = ERR_NONE;
 8014790:	2300      	movs	r3, #0
 8014792:	81fb      	strh	r3, [r7, #14]
    }
    
    return ret;
 8014794:	89fb      	ldrh	r3, [r7, #14]
}
 8014796:	4618      	mov	r0, r3
 8014798:	3710      	adds	r7, #16
 801479a:	46bd      	mov	sp, r7
 801479c:	bd80      	pop	{r7, pc}

0801479e <rfalNfcvPollerInventory>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerInventory( rfalNfcvNumSlots nSlots, uint8_t maskLen, const uint8_t *maskVal, rfalNfcvInventoryRes *invRes, uint16_t* rcvdLen )
{
 801479e:	b580      	push	{r7, lr}
 80147a0:	b08c      	sub	sp, #48	; 0x30
 80147a2:	af02      	add	r7, sp, #8
 80147a4:	60ba      	str	r2, [r7, #8]
 80147a6:	607b      	str	r3, [r7, #4]
 80147a8:	4603      	mov	r3, r0
 80147aa:	73fb      	strb	r3, [r7, #15]
 80147ac:	460b      	mov	r3, r1
 80147ae:	73bb      	strb	r3, [r7, #14]
    ReturnCode           ret;
    rfalNfcvInventoryReq invReq;
    uint16_t             rxLen;
    
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d102      	bne.n	80147bc <rfalNfcvPollerInventory+0x1e>
 80147b6:	7bbb      	ldrb	r3, [r7, #14]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d102      	bne.n	80147c2 <rfalNfcvPollerInventory+0x24>
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d101      	bne.n	80147c6 <rfalNfcvPollerInventory+0x28>
    {
        return ERR_PARAM;
 80147c2:	2307      	movs	r3, #7
 80147c4:	e04a      	b.n	801485c <rfalNfcvPollerInventory+0xbe>
    }
    
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 80147c6:	7bfb      	ldrb	r3, [r7, #15]
 80147c8:	f043 0306 	orr.w	r3, r3, #6
 80147cc:	b2db      	uxtb	r3, r3
 80147ce:	763b      	strb	r3, [r7, #24]
    invReq.CMD      = RFAL_NFCV_CMD_INVENTORY;
 80147d0:	2301      	movs	r3, #1
 80147d2:	767b      	strb	r3, [r7, #25]
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 80147d4:	7bbb      	ldrb	r3, [r7, #14]
 80147d6:	7bfa      	ldrb	r2, [r7, #15]
 80147d8:	2a20      	cmp	r2, #32
 80147da:	d101      	bne.n	80147e0 <rfalNfcvPollerInventory+0x42>
 80147dc:	2240      	movs	r2, #64	; 0x40
 80147de:	e000      	b.n	80147e2 <rfalNfcvPollerInventory+0x44>
 80147e0:	223c      	movs	r2, #60	; 0x3c
 80147e2:	429a      	cmp	r2, r3
 80147e4:	d806      	bhi.n	80147f4 <rfalNfcvPollerInventory+0x56>
 80147e6:	7bfb      	ldrb	r3, [r7, #15]
 80147e8:	2b20      	cmp	r3, #32
 80147ea:	d101      	bne.n	80147f0 <rfalNfcvPollerInventory+0x52>
 80147ec:	2340      	movs	r3, #64	; 0x40
 80147ee:	e002      	b.n	80147f6 <rfalNfcvPollerInventory+0x58>
 80147f0:	233c      	movs	r3, #60	; 0x3c
 80147f2:	e000      	b.n	80147f6 <rfalNfcvPollerInventory+0x58>
 80147f4:	7bbb      	ldrb	r3, [r7, #14]
 80147f6:	76bb      	strb	r3, [r7, #26]
    
    if( rfalConvBitsToBytes(invReq.MASK_LEN) > 0U )  /* MISRA 21.18 */
 80147f8:	7ebb      	ldrb	r3, [r7, #26]
 80147fa:	3307      	adds	r3, #7
 80147fc:	08db      	lsrs	r3, r3, #3
 80147fe:	b29b      	uxth	r3, r3
 8014800:	2b00      	cmp	r3, #0
 8014802:	d00b      	beq.n	801481c <rfalNfcvPollerInventory+0x7e>
    {
        ST_MEMCPY( invReq.MASK_VALUE, maskVal, rfalConvBitsToBytes(invReq.MASK_LEN) );
 8014804:	7ebb      	ldrb	r3, [r7, #26]
 8014806:	3307      	adds	r3, #7
 8014808:	08db      	lsrs	r3, r3, #3
 801480a:	b29b      	uxth	r3, r3
 801480c:	461a      	mov	r2, r3
 801480e:	f107 0318 	add.w	r3, r7, #24
 8014812:	3303      	adds	r3, #3
 8014814:	68b9      	ldr	r1, [r7, #8]
 8014816:	4618      	mov	r0, r3
 8014818:	f004 fa7a 	bl	8018d10 <memcpy>
    }
    
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 801481c:	7ebb      	ldrb	r3, [r7, #26]
 801481e:	3307      	adds	r3, #7
 8014820:	08db      	lsrs	r3, r3, #3
 8014822:	b2db      	uxtb	r3, r3
 8014824:	3303      	adds	r3, #3
 8014826:	b2d9      	uxtb	r1, r3
 8014828:	f107 0018 	add.w	r0, r7, #24
 801482c:	f107 0316 	add.w	r3, r7, #22
 8014830:	9300      	str	r3, [sp, #0]
 8014832:	230c      	movs	r3, #12
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	f002 fcf9 	bl	801722c <rfalISO15693TransceiveAnticollisionFrame>
 801483a:	4603      	mov	r3, r0
 801483c:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Check for optional output parameter */
    if( rcvdLen != NULL )
 801483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014840:	2b00      	cmp	r3, #0
 8014842:	d002      	beq.n	801484a <rfalNfcvPollerInventory+0xac>
    {
        *rcvdLen = rxLen;
 8014844:	8afa      	ldrh	r2, [r7, #22]
 8014846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014848:	801a      	strh	r2, [r3, #0]
    }
    
    if( ret == ERR_NONE )
 801484a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801484c:	2b00      	cmp	r3, #0
 801484e:	d104      	bne.n	801485a <rfalNfcvPollerInventory+0xbc>
    {
        if( rxLen != rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 8014850:	8afb      	ldrh	r3, [r7, #22]
 8014852:	2b60      	cmp	r3, #96	; 0x60
 8014854:	d001      	beq.n	801485a <rfalNfcvPollerInventory+0xbc>
        {
            return ERR_PROTO;
 8014856:	230b      	movs	r3, #11
 8014858:	e000      	b.n	801485c <rfalNfcvPollerInventory+0xbe>
        }
    }
    
    return ret;
 801485a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801485c:	4618      	mov	r0, r3
 801485e:	3728      	adds	r7, #40	; 0x28
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}

08014864 <rfalNfcvPollerCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcvListenDevice *nfcvDevList, uint8_t *devCnt )
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b0ae      	sub	sp, #184	; 0xb8
 8014868:	af02      	add	r7, sp, #8
 801486a:	60ba      	str	r2, [r7, #8]
 801486c:	607b      	str	r3, [r7, #4]
 801486e:	4603      	mov	r3, r0
 8014870:	73fb      	strb	r3, [r7, #15]
 8014872:	460b      	mov	r3, r1
 8014874:	73bb      	strb	r3, [r7, #14]
    uint8_t           colPos;
    bool              colPending;
    rfalNfcvCollision colFound[RFAL_NFCV_MAX_COLL_SUPPORTED];
    
    
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
 8014876:	68bb      	ldr	r3, [r7, #8]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d002      	beq.n	8014882 <rfalNfcvPollerCollisionResolution+0x1e>
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d101      	bne.n	8014886 <rfalNfcvPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 8014882:	2307      	movs	r3, #7
 8014884:	e186      	b.n	8014b94 <rfalNfcvPollerCollisionResolution+0x330>
    }

    /* Initialize parameters */
    *devCnt = 0;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	2200      	movs	r2, #0
 801488a:	701a      	strb	r2, [r3, #0]
    colIt         = 0;
 801488c:	2300      	movs	r3, #0
 801488e:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    colCnt        = 0;
 8014892:	2300      	movs	r3, #0
 8014894:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    colPending    = false;
 8014898:	2300      	movs	r3, #0
 801489a:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
    ST_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 801489e:	f107 0314 	add.w	r3, r7, #20
 80148a2:	2290      	movs	r2, #144	; 0x90
 80148a4:	2100      	movs	r1, #0
 80148a6:	4618      	mov	r0, r3
 80148a8:	f004 fa5a 	bl	8018d60 <memset>

    if( devLimit > 0U )       /* MISRA 21.18 */
 80148ac:	7bbb      	ldrb	r3, [r7, #14]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d00a      	beq.n	80148c8 <rfalNfcvPollerCollisionResolution+0x64>
    {
        ST_MEMSET(nfcvDevList, 0x00, (sizeof(rfalNfcvListenDevice)*devLimit) );
 80148b2:	7bba      	ldrb	r2, [r7, #14]
 80148b4:	4613      	mov	r3, r2
 80148b6:	005b      	lsls	r3, r3, #1
 80148b8:	4413      	add	r3, r2
 80148ba:	009b      	lsls	r3, r3, #2
 80148bc:	4413      	add	r3, r2
 80148be:	461a      	mov	r2, r3
 80148c0:	2100      	movs	r1, #0
 80148c2:	68b8      	ldr	r0, [r7, #8]
 80148c4:	f004 fa4c 	bl	8018d60 <memset>
    }

    NO_WARNING(colPending);   /* colPending is not exposed externally, in future it might become exposed/ouput parameter */

    if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 80148c8:	7bfb      	ldrb	r3, [r7, #15]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d12b      	bne.n	8014926 <rfalNfcvPollerCollisionResolution+0xc2>
    {
        /* Send INVENTORY_REQ with one slot   Activity 2.0  9.3.7.1  (Symbol 0)  */
        ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, &nfcvDevList->InvRes, NULL );
 80148ce:	68bb      	ldr	r3, [r7, #8]
 80148d0:	2200      	movs	r2, #0
 80148d2:	9200      	str	r2, [sp, #0]
 80148d4:	2200      	movs	r2, #0
 80148d6:	2100      	movs	r1, #0
 80148d8:	2020      	movs	r0, #32
 80148da:	f7ff ff60 	bl	801479e <rfalNfcvPollerInventory>
 80148de:	4603      	mov	r3, r0
 80148e0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

        if( ret == ERR_TIMEOUT )  /* Exit if no device found     Activity 2.0  9.3.7.2 (Symbol 1)  */
 80148e4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80148e8:	2b04      	cmp	r3, #4
 80148ea:	d101      	bne.n	80148f0 <rfalNfcvPollerCollisionResolution+0x8c>
        {
            return ERR_NONE;
 80148ec:	2300      	movs	r3, #0
 80148ee:	e151      	b.n	8014b94 <rfalNfcvPollerCollisionResolution+0x330>
        }
        if( ret == ERR_NONE )     /* Device found without transmission error/collision    Activity 2.0  9.3.7.3 (Symbol 2)  */
 80148f0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d107      	bne.n	8014908 <rfalNfcvPollerCollisionResolution+0xa4>
        {
            (*devCnt)++;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	3301      	adds	r3, #1
 80148fe:	b2da      	uxtb	r2, r3
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 8014904:	2300      	movs	r3, #0
 8014906:	e145      	b.n	8014b94 <rfalNfcvPollerCollisionResolution+0x330>
        }

        /* A Collision has been identified  Activity 2.0  9.3.7.2  (Symbol 3) */
        colPending = true;
 8014908:	2301      	movs	r3, #1
 801490a:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 801490e:	2301      	movs	r3, #1
 8014910:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

        /* Check if the Collision Resolution is set to perform only Collision detection   Activity 2.0  9.3.7.5 (Symbol 4)*/
        if( devLimit == 0U )
 8014914:	7bbb      	ldrb	r3, [r7, #14]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d101      	bne.n	801491e <rfalNfcvPollerCollisionResolution+0xba>
        {
            return ERR_RF_COLLISION;
 801491a:	231d      	movs	r3, #29
 801491c:	e13a      	b.n	8014b94 <rfalNfcvPollerCollisionResolution+0x330>
        }

        platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 801491e:	2004      	movs	r0, #4
 8014920:	f7ef fccc 	bl	80042bc <HAL_Delay>
 8014924:	e005      	b.n	8014932 <rfalNfcvPollerCollisionResolution+0xce>
        /*******************************************************************************/
    }
    else
    { 
        /* Advance to 16 slots below without mask. Will give a good chance to identify multiple cards */
        colPending = true;
 8014926:	2301      	movs	r3, #1
 8014928:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 801492c:	2301      	movs	r3, #1
 801492e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    
    /* Execute until all collisions are resolved Activity 2.0  9.3.7.16  (Symbol 17) */
    do
    {
        /* Activity 2.0  9.3.7.5  (Symbol 6) */
        colPending = false;
 8014932:	2300      	movs	r3, #0
 8014934:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        slotNum    = 0;
 8014938:	2300      	movs	r3, #0
 801493a:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
        
        do
        {
            if( slotNum == 0U )
 801493e:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8014942:	2b00      	cmp	r3, #0
 8014944:	d129      	bne.n	801499a <rfalNfcvPollerCollisionResolution+0x136>
            {
                /* Send INVENTORY_REQ with 16 slots   Activity 2.0  9.3.7.7  (Symbol 8) */
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 8014946:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 801494a:	4613      	mov	r3, r2
 801494c:	00db      	lsls	r3, r3, #3
 801494e:	4413      	add	r3, r2
 8014950:	33b0      	adds	r3, #176	; 0xb0
 8014952:	443b      	add	r3, r7
 8014954:	3b9c      	subs	r3, #156	; 0x9c
 8014956:	7818      	ldrb	r0, [r3, #0]
 8014958:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 801495c:	f107 0114 	add.w	r1, r7, #20
 8014960:	4613      	mov	r3, r2
 8014962:	00db      	lsls	r3, r3, #3
 8014964:	4413      	add	r3, r2
 8014966:	440b      	add	r3, r1
 8014968:	1c59      	adds	r1, r3, #1
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	781b      	ldrb	r3, [r3, #0]
 801496e:	461a      	mov	r2, r3
 8014970:	4613      	mov	r3, r2
 8014972:	005b      	lsls	r3, r3, #1
 8014974:	4413      	add	r3, r2
 8014976:	009b      	lsls	r3, r3, #2
 8014978:	4413      	add	r3, r2
 801497a:	68ba      	ldr	r2, [r7, #8]
 801497c:	4413      	add	r3, r2
 801497e:	461a      	mov	r2, r3
 8014980:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 8014984:	9300      	str	r3, [sp, #0]
 8014986:	4613      	mov	r3, r2
 8014988:	460a      	mov	r2, r1
 801498a:	4601      	mov	r1, r0
 801498c:	2000      	movs	r0, #0
 801498e:	f7ff ff06 	bl	801479e <rfalNfcvPollerInventory>
 8014992:	4603      	mov	r3, r0
 8014994:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8014998:	e013      	b.n	80149c2 <rfalNfcvPollerCollisionResolution+0x15e>
            }
            else
            {
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	781b      	ldrb	r3, [r3, #0]
 801499e:	461a      	mov	r2, r3
 80149a0:	4613      	mov	r3, r2
 80149a2:	005b      	lsls	r3, r3, #1
 80149a4:	4413      	add	r3, r2
 80149a6:	009b      	lsls	r3, r3, #2
 80149a8:	4413      	add	r3, r2
 80149aa:	68ba      	ldr	r2, [r7, #8]
 80149ac:	4413      	add	r3, r2
 80149ae:	4618      	mov	r0, r3
 80149b0:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 80149b4:	461a      	mov	r2, r3
 80149b6:	210c      	movs	r1, #12
 80149b8:	f002 fc98 	bl	80172ec <rfalISO15693TransceiveEOFAnticollision>
 80149bc:	4603      	mov	r3, r0
 80149be:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            }
            slotNum++;
 80149c2:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80149c6:	3301      	adds	r3, #1
 80149c8:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
            
            /*******************************************************************************/
            if( ret != ERR_TIMEOUT )
 80149cc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80149d0:	2b04      	cmp	r3, #4
 80149d2:	f000 80c3 	beq.w	8014b5c <rfalNfcvPollerCollisionResolution+0x2f8>
            {
                if( rcvdLen < rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 80149d6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80149da:	2b5f      	cmp	r3, #95	; 0x5f
 80149dc:	d802      	bhi.n	80149e4 <rfalNfcvPollerCollisionResolution+0x180>
                { /* If only a partial frame was received make sure the FDT_V_INVENT_NORES is fulfilled */
                    platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 80149de:	2004      	movs	r0, #4
 80149e0:	f7ef fc6c 	bl	80042bc <HAL_Delay>
                }

                if( ret == ERR_NONE )
 80149e4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d10b      	bne.n	8014a04 <rfalNfcvPollerCollisionResolution+0x1a0>
                {
                    /* Check if the device found is already on the list and its response is a valid INVENTORY_RES */
                    if( rcvdLen == rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 80149ec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80149f0:	2b60      	cmp	r3, #96	; 0x60
 80149f2:	f040 80b6 	bne.w	8014b62 <rfalNfcvPollerCollisionResolution+0x2fe>
                    {
                        /* Activity 2.0  9.3.7.15  (Symbol 11) */
                        (*devCnt)++;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	781b      	ldrb	r3, [r3, #0]
 80149fa:	3301      	adds	r3, #1
 80149fc:	b2da      	uxtb	r2, r3
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	701a      	strb	r2, [r3, #0]
 8014a02:	e0ae      	b.n	8014b62 <rfalNfcvPollerCollisionResolution+0x2fe>
                    }
                }
                else /* Treat everything else as collision */
                {
                    /* Activity 2.0  9.3.7.15  (Symbol 16) */
                    colPending = true;
 8014a04:	2301      	movs	r3, #1
 8014a06:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    

                    /*******************************************************************************/
                    /* Ensure that this collision still fits on the container */
                    if( colCnt < RFAL_NFCV_MAX_COLL_SUPPORTED )
 8014a0a:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8014a0e:	2b0f      	cmp	r3, #15
 8014a10:	f200 80a7 	bhi.w	8014b62 <rfalNfcvPollerCollisionResolution+0x2fe>
                    {
                        /* Store this collision on the container to be resolved later */
                        /* Activity 2.0  9.3.7.15  (Symbol 16): add the collision information
                         * (MASK_VAL + SN) to the list containing the collision information */
                        ST_MEMCPY(colFound[colCnt].maskVal, colFound[colIt].maskVal, RFAL_NFCV_UID_LEN);
 8014a14:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8014a18:	f107 0114 	add.w	r1, r7, #20
 8014a1c:	4613      	mov	r3, r2
 8014a1e:	00db      	lsls	r3, r3, #3
 8014a20:	4413      	add	r3, r2
 8014a22:	440b      	add	r3, r1
 8014a24:	1c58      	adds	r0, r3, #1
 8014a26:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8014a2a:	f107 0114 	add.w	r1, r7, #20
 8014a2e:	4613      	mov	r3, r2
 8014a30:	00db      	lsls	r3, r3, #3
 8014a32:	4413      	add	r3, r2
 8014a34:	440b      	add	r3, r1
 8014a36:	3301      	adds	r3, #1
 8014a38:	2208      	movs	r2, #8
 8014a3a:	4619      	mov	r1, r3
 8014a3c:	f004 f968 	bl	8018d10 <memcpy>
                        colPos = colFound[colIt].maskLen;
 8014a40:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8014a44:	4613      	mov	r3, r2
 8014a46:	00db      	lsls	r3, r3, #3
 8014a48:	4413      	add	r3, r2
 8014a4a:	33b0      	adds	r3, #176	; 0xb0
 8014a4c:	443b      	add	r3, r7
 8014a4e:	3b9c      	subs	r3, #156	; 0x9c
 8014a50:	781b      	ldrb	r3, [r3, #0]
 8014a52:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 8014a56:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8014a5a:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8014a5e:	08db      	lsrs	r3, r3, #3
 8014a60:	b2d8      	uxtb	r0, r3
 8014a62:	4601      	mov	r1, r0
 8014a64:	4613      	mov	r3, r2
 8014a66:	00db      	lsls	r3, r3, #3
 8014a68:	4413      	add	r3, r2
 8014a6a:	33b0      	adds	r3, #176	; 0xb0
 8014a6c:	443b      	add	r3, r7
 8014a6e:	440b      	add	r3, r1
 8014a70:	3b9b      	subs	r3, #155	; 0x9b
 8014a72:	7819      	ldrb	r1, [r3, #0]
 8014a74:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8014a78:	f003 0307 	and.w	r3, r3, #7
 8014a7c:	2201      	movs	r2, #1
 8014a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8014a82:	b2db      	uxtb	r3, r3
 8014a84:	3b01      	subs	r3, #1
 8014a86:	b2db      	uxtb	r3, r3
 8014a88:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8014a8c:	400b      	ands	r3, r1
 8014a8e:	b2d9      	uxtb	r1, r3
 8014a90:	4613      	mov	r3, r2
 8014a92:	00db      	lsls	r3, r3, #3
 8014a94:	4413      	add	r3, r2
 8014a96:	33b0      	adds	r3, #176	; 0xb0
 8014a98:	443b      	add	r3, r7
 8014a9a:	4403      	add	r3, r0
 8014a9c:	3b9b      	subs	r3, #155	; 0x9b
 8014a9e:	460a      	mov	r2, r1
 8014aa0:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 8014aa2:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8014aa6:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8014aaa:	08db      	lsrs	r3, r3, #3
 8014aac:	b2d8      	uxtb	r0, r3
 8014aae:	4601      	mov	r1, r0
 8014ab0:	4613      	mov	r3, r2
 8014ab2:	00db      	lsls	r3, r3, #3
 8014ab4:	4413      	add	r3, r2
 8014ab6:	33b0      	adds	r3, #176	; 0xb0
 8014ab8:	443b      	add	r3, r7
 8014aba:	440b      	add	r3, r1
 8014abc:	3b9b      	subs	r3, #155	; 0x9b
 8014abe:	7819      	ldrb	r1, [r3, #0]
 8014ac0:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8014ac4:	1e5a      	subs	r2, r3, #1
 8014ac6:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8014aca:	f003 0307 	and.w	r3, r3, #7
 8014ace:	fa02 f303 	lsl.w	r3, r2, r3
 8014ad2:	b2db      	uxtb	r3, r3
 8014ad4:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8014ad8:	430b      	orrs	r3, r1
 8014ada:	b2d9      	uxtb	r1, r3
 8014adc:	4613      	mov	r3, r2
 8014ade:	00db      	lsls	r3, r3, #3
 8014ae0:	4413      	add	r3, r2
 8014ae2:	33b0      	adds	r3, #176	; 0xb0
 8014ae4:	443b      	add	r3, r7
 8014ae6:	4403      	add	r3, r0
 8014ae8:	3b9b      	subs	r3, #155	; 0x9b
 8014aea:	460a      	mov	r2, r1
 8014aec:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[((colPos/RFAL_BITS_IN_BYTE)+1U)]  = (uint8_t)((slotNum-1U) >> (RFAL_BITS_IN_BYTE - (colPos % RFAL_BITS_IN_BYTE)));
 8014aee:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8014af2:	1e5a      	subs	r2, r3, #1
 8014af4:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8014af8:	f003 0307 	and.w	r3, r3, #7
 8014afc:	f1c3 0308 	rsb	r3, r3, #8
 8014b00:	fa22 f003 	lsr.w	r0, r2, r3
 8014b04:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8014b08:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8014b0c:	08db      	lsrs	r3, r3, #3
 8014b0e:	b2db      	uxtb	r3, r3
 8014b10:	1c59      	adds	r1, r3, #1
 8014b12:	b2c0      	uxtb	r0, r0
 8014b14:	4613      	mov	r3, r2
 8014b16:	00db      	lsls	r3, r3, #3
 8014b18:	4413      	add	r3, r2
 8014b1a:	33b0      	adds	r3, #176	; 0xb0
 8014b1c:	443b      	add	r3, r7
 8014b1e:	440b      	add	r3, r1
 8014b20:	3b9b      	subs	r3, #155	; 0x9b
 8014b22:	4602      	mov	r2, r0
 8014b24:	701a      	strb	r2, [r3, #0]

                        colFound[colCnt].maskLen = (colFound[colIt].maskLen + 4U);
 8014b26:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8014b2a:	4613      	mov	r3, r2
 8014b2c:	00db      	lsls	r3, r3, #3
 8014b2e:	4413      	add	r3, r2
 8014b30:	33b0      	adds	r3, #176	; 0xb0
 8014b32:	443b      	add	r3, r7
 8014b34:	3b9c      	subs	r3, #156	; 0x9c
 8014b36:	781b      	ldrb	r3, [r3, #0]
 8014b38:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8014b3c:	3304      	adds	r3, #4
 8014b3e:	b2d9      	uxtb	r1, r3
 8014b40:	4613      	mov	r3, r2
 8014b42:	00db      	lsls	r3, r3, #3
 8014b44:	4413      	add	r3, r2
 8014b46:	33b0      	adds	r3, #176	; 0xb0
 8014b48:	443b      	add	r3, r7
 8014b4a:	3b9c      	subs	r3, #156	; 0x9c
 8014b4c:	460a      	mov	r2, r1
 8014b4e:	701a      	strb	r2, [r3, #0]

                        colCnt++;
 8014b50:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8014b54:	3301      	adds	r3, #1
 8014b56:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8014b5a:	e002      	b.n	8014b62 <rfalNfcvPollerCollisionResolution+0x2fe>
                }
            }
            else 
            { 
                /* Timeout */
                platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 8014b5c:	2004      	movs	r0, #4
 8014b5e:	f7ef fbad 	bl	80042bc <HAL_Delay>
            }
            
            /* Check if devices found have reached device limit   Activity 2.0  9.3.7.15  (Symbol 16) */
            if( *devCnt >= devLimit )
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	781b      	ldrb	r3, [r3, #0]
 8014b66:	7bba      	ldrb	r2, [r7, #14]
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	d801      	bhi.n	8014b70 <rfalNfcvPollerCollisionResolution+0x30c>
            {
                return ERR_NONE;
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	e011      	b.n	8014b94 <rfalNfcvPollerCollisionResolution+0x330>
            }
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
 8014b70:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8014b74:	2b0f      	cmp	r3, #15
 8014b76:	f67f aee2 	bls.w	801493e <rfalNfcvPollerCollisionResolution+0xda>
        colIt++;
 8014b7a:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8014b7e:	3301      	adds	r3, #1
 8014b80:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    } while( colIt < colCnt );                     /* Collisions found loop */
 8014b84:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8014b88:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	f4ff aed0 	bcc.w	8014932 <rfalNfcvPollerCollisionResolution+0xce>
    
    return ERR_NONE;
 8014b92:	2300      	movs	r3, #0
}
 8014b94:	4618      	mov	r0, r3
 8014b96:	37b0      	adds	r7, #176	; 0xb0
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}

08014b9c <rfalNfcvPollerSelect>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerSelect( uint8_t flags, const uint8_t* uid )
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b094      	sub	sp, #80	; 0x50
 8014ba0:	af06      	add	r7, sp, #24
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	6039      	str	r1, [r7, #0]
 8014ba6:	71fb      	strb	r3, [r7, #7]
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    if( uid == NULL )
 8014ba8:	683b      	ldr	r3, [r7, #0]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d101      	bne.n	8014bb2 <rfalNfcvPollerSelect+0x16>
    {
        return ERR_PARAM;
 8014bae:	2307      	movs	r3, #7
 8014bb0:	e012      	b.n	8014bd8 <rfalNfcvPollerSelect+0x3c>
    }
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_SELECT, flags, RFAL_NFCV_PARAM_SKIP, uid, NULL, 0U, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 8014bb2:	79f9      	ldrb	r1, [r7, #7]
 8014bb4:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8014bb8:	9304      	str	r3, [sp, #16]
 8014bba:	232a      	movs	r3, #42	; 0x2a
 8014bbc:	9303      	str	r3, [sp, #12]
 8014bbe:	f107 030c 	add.w	r3, r7, #12
 8014bc2:	9302      	str	r3, [sp, #8]
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	9301      	str	r3, [sp, #4]
 8014bc8:	2300      	movs	r3, #0
 8014bca:	9300      	str	r3, [sp, #0]
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	2200      	movs	r2, #0
 8014bd0:	2025      	movs	r0, #37	; 0x25
 8014bd2:	f000 f9c5 	bl	8014f60 <rfalNfcvPollerTransceiveReq>
 8014bd6:	4603      	mov	r3, r0
}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	3738      	adds	r7, #56	; 0x38
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}

08014be0 <rfalNfcvPollerReadSingleBlock>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerReadSingleBlock( uint8_t flags, const uint8_t* uid, uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b08c      	sub	sp, #48	; 0x30
 8014be4:	af06      	add	r7, sp, #24
 8014be6:	60b9      	str	r1, [r7, #8]
 8014be8:	607b      	str	r3, [r7, #4]
 8014bea:	4603      	mov	r3, r0
 8014bec:	73fb      	strb	r3, [r7, #15]
 8014bee:	4613      	mov	r3, r2
 8014bf0:	73bb      	strb	r3, [r7, #14]
    uint8_t bn;

    bn = blockNum;
 8014bf2:	7bbb      	ldrb	r3, [r7, #14]
 8014bf4:	75fb      	strb	r3, [r7, #23]

    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), rxBuf, rxBufLen, rcvLen );
 8014bf6:	7bf9      	ldrb	r1, [r7, #15]
 8014bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bfa:	9304      	str	r3, [sp, #16]
 8014bfc:	8c3b      	ldrh	r3, [r7, #32]
 8014bfe:	9303      	str	r3, [sp, #12]
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	9302      	str	r3, [sp, #8]
 8014c04:	2301      	movs	r3, #1
 8014c06:	9301      	str	r3, [sp, #4]
 8014c08:	f107 0317 	add.w	r3, r7, #23
 8014c0c:	9300      	str	r3, [sp, #0]
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	2200      	movs	r2, #0
 8014c12:	2020      	movs	r0, #32
 8014c14:	f000 f9a4 	bl	8014f60 <rfalNfcvPollerTransceiveReq>
 8014c18:	4603      	mov	r3, r0
}
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	3718      	adds	r7, #24
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}

08014c22 <rfalNfcvPollerWriteSingleBlock>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint8_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 8014c22:	b580      	push	{r7, lr}
 8014c24:	b09e      	sub	sp, #120	; 0x78
 8014c26:	af06      	add	r7, sp, #24
 8014c28:	60b9      	str	r1, [r7, #8]
 8014c2a:	607b      	str	r3, [r7, #4]
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	73fb      	strb	r3, [r7, #15]
 8014c30:	4613      	mov	r3, r2
 8014c32:	73bb      	strb	r3, [r7, #14]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) || (wrData == NULL) )
 8014c34:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d006      	beq.n	8014c4a <rfalNfcvPollerWriteSingleBlock+0x28>
 8014c3c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014c40:	2b20      	cmp	r3, #32
 8014c42:	d802      	bhi.n	8014c4a <rfalNfcvPollerWriteSingleBlock+0x28>
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d101      	bne.n	8014c4e <rfalNfcvPollerWriteSingleBlock+0x2c>
    {
        return ERR_PARAM;
 8014c4a:	2307      	movs	r3, #7
 8014c4c:	e034      	b.n	8014cb8 <rfalNfcvPollerWriteSingleBlock+0x96>
    }
    
    dataLen = 0U;
 8014c4e:	2300      	movs	r3, #0
 8014c50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = blockNum;                    /* Set Block Number (8 bits)  */
 8014c54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c58:	1c5a      	adds	r2, r3, #1
 8014c5a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8014c5e:	3360      	adds	r3, #96	; 0x60
 8014c60:	443b      	add	r3, r7
 8014c62:	7bba      	ldrb	r2, [r7, #14]
 8014c64:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen ); /* Append Block data to write */
 8014c68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c6c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8014c70:	4413      	add	r3, r2
 8014c72:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8014c76:	6879      	ldr	r1, [r7, #4]
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f004 f849 	bl	8018d10 <memcpy>
    dataLen += blockLen;
 8014c7e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8014c82:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014c86:	4413      	add	r3, r2
 8014c88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 8014c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c90:	b29b      	uxth	r3, r3
 8014c92:	7bf9      	ldrb	r1, [r7, #15]
 8014c94:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 8014c98:	9204      	str	r2, [sp, #16]
 8014c9a:	222a      	movs	r2, #42	; 0x2a
 8014c9c:	9203      	str	r2, [sp, #12]
 8014c9e:	f107 0210 	add.w	r2, r7, #16
 8014ca2:	9202      	str	r2, [sp, #8]
 8014ca4:	9301      	str	r3, [sp, #4]
 8014ca6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014caa:	9300      	str	r3, [sp, #0]
 8014cac:	68bb      	ldr	r3, [r7, #8]
 8014cae:	2200      	movs	r2, #0
 8014cb0:	2021      	movs	r0, #33	; 0x21
 8014cb2:	f000 f955 	bl	8014f60 <rfalNfcvPollerTransceiveReq>
 8014cb6:	4603      	mov	r3, r0
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	3760      	adds	r7, #96	; 0x60
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}

08014cc0 <rfalNfcvPollerReadMultipleBlocks>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_LOCK_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint8_t firstBlockNum, uint8_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b08a      	sub	sp, #40	; 0x28
 8014cc4:	af06      	add	r7, sp, #24
 8014cc6:	6039      	str	r1, [r7, #0]
 8014cc8:	4611      	mov	r1, r2
 8014cca:	461a      	mov	r2, r3
 8014ccc:	4603      	mov	r3, r0
 8014cce:	71fb      	strb	r3, [r7, #7]
 8014cd0:	460b      	mov	r3, r1
 8014cd2:	71bb      	strb	r3, [r7, #6]
 8014cd4:	4613      	mov	r3, r2
 8014cd6:	717b      	strb	r3, [r7, #5]
    uint8_t            data[(RFAL_NFCV_BLOCKNUM_LEN + RFAL_NFCV_BLOCKNUM_LEN)];
    uint8_t            dataLen;
    
    dataLen = 0U;
 8014cd8:	2300      	movs	r3, #0
 8014cda:	73fb      	strb	r3, [r7, #15]
    
    /* Compute Request Data */
    data[dataLen++] = firstBlockNum;                    /* Set first Block Number       */
 8014cdc:	7bfb      	ldrb	r3, [r7, #15]
 8014cde:	1c5a      	adds	r2, r3, #1
 8014ce0:	73fa      	strb	r2, [r7, #15]
 8014ce2:	3310      	adds	r3, #16
 8014ce4:	443b      	add	r3, r7
 8014ce6:	79ba      	ldrb	r2, [r7, #6]
 8014ce8:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = numOfBlocks;                      /* Set number of blocks to read */
 8014cec:	7bfb      	ldrb	r3, [r7, #15]
 8014cee:	1c5a      	adds	r2, r3, #1
 8014cf0:	73fa      	strb	r2, [r7, #15]
 8014cf2:	3310      	adds	r3, #16
 8014cf4:	443b      	add	r3, r7
 8014cf6:	797a      	ldrb	r2, [r7, #5]
 8014cf8:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_MULTIPLE_BLOCKS, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8014cfc:	7bfb      	ldrb	r3, [r7, #15]
 8014cfe:	b29b      	uxth	r3, r3
 8014d00:	79f9      	ldrb	r1, [r7, #7]
 8014d02:	6a3a      	ldr	r2, [r7, #32]
 8014d04:	9204      	str	r2, [sp, #16]
 8014d06:	8bba      	ldrh	r2, [r7, #28]
 8014d08:	9203      	str	r2, [sp, #12]
 8014d0a:	69ba      	ldr	r2, [r7, #24]
 8014d0c:	9202      	str	r2, [sp, #8]
 8014d0e:	9301      	str	r3, [sp, #4]
 8014d10:	f107 030c 	add.w	r3, r7, #12
 8014d14:	9300      	str	r3, [sp, #0]
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	2200      	movs	r2, #0
 8014d1a:	2023      	movs	r0, #35	; 0x23
 8014d1c:	f000 f920 	bl	8014f60 <rfalNfcvPollerTransceiveReq>
 8014d20:	4603      	mov	r3, r0
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3710      	adds	r7, #16
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}

08014d2a <rfalNfcvPollerExtendedReadSingleBlock>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedReadSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8014d2a:	b580      	push	{r7, lr}
 8014d2c:	b08c      	sub	sp, #48	; 0x30
 8014d2e:	af06      	add	r7, sp, #24
 8014d30:	60b9      	str	r1, [r7, #8]
 8014d32:	607b      	str	r3, [r7, #4]
 8014d34:	4603      	mov	r3, r0
 8014d36:	73fb      	strb	r3, [r7, #15]
 8014d38:	4613      	mov	r3, r2
 8014d3a:	81bb      	strh	r3, [r7, #12]
    uint8_t data[RFAL_NFCV_BLOCKNUM_EXTENDED_LEN];
    uint8_t dataLen;
        
    dataLen = 0U;
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum; /* TS T5T 1.0 BNo is considered as a multi-byte field. TS T5T 1.0 5.1.1.13 multi-byte field follows [DIGITAL]. [DIGITAL] 9.3.1 A multiple byte field is transmitted LSB first. */
 8014d40:	7dfb      	ldrb	r3, [r7, #23]
 8014d42:	1c5a      	adds	r2, r3, #1
 8014d44:	75fa      	strb	r2, [r7, #23]
 8014d46:	89ba      	ldrh	r2, [r7, #12]
 8014d48:	b2d2      	uxtb	r2, r2
 8014d4a:	3318      	adds	r3, #24
 8014d4c:	443b      	add	r3, r7
 8014d4e:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = (uint8_t)((blockNum >> 8U) & 0xFFU);
 8014d52:	89bb      	ldrh	r3, [r7, #12]
 8014d54:	0a1b      	lsrs	r3, r3, #8
 8014d56:	b29a      	uxth	r2, r3
 8014d58:	7dfb      	ldrb	r3, [r7, #23]
 8014d5a:	1c59      	adds	r1, r3, #1
 8014d5c:	75f9      	strb	r1, [r7, #23]
 8014d5e:	b2d2      	uxtb	r2, r2
 8014d60:	3318      	adds	r3, #24
 8014d62:	443b      	add	r3, r7
 8014d64:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8014d68:	7dfb      	ldrb	r3, [r7, #23]
 8014d6a:	b29b      	uxth	r3, r3
 8014d6c:	7bf9      	ldrb	r1, [r7, #15]
 8014d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d70:	9204      	str	r2, [sp, #16]
 8014d72:	8c3a      	ldrh	r2, [r7, #32]
 8014d74:	9203      	str	r2, [sp, #12]
 8014d76:	687a      	ldr	r2, [r7, #4]
 8014d78:	9202      	str	r2, [sp, #8]
 8014d7a:	9301      	str	r3, [sp, #4]
 8014d7c:	f107 0314 	add.w	r3, r7, #20
 8014d80:	9300      	str	r3, [sp, #0]
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	2200      	movs	r2, #0
 8014d86:	2030      	movs	r0, #48	; 0x30
 8014d88:	f000 f8ea 	bl	8014f60 <rfalNfcvPollerTransceiveReq>
 8014d8c:	4603      	mov	r3, r0
}
 8014d8e:	4618      	mov	r0, r3
 8014d90:	3718      	adds	r7, #24
 8014d92:	46bd      	mov	sp, r7
 8014d94:	bd80      	pop	{r7, pc}

08014d96 <rfalNfcvPollerExtendedWriteSingleBlock>:


/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 8014d96:	b580      	push	{r7, lr}
 8014d98:	b09e      	sub	sp, #120	; 0x78
 8014d9a:	af06      	add	r7, sp, #24
 8014d9c:	60b9      	str	r1, [r7, #8]
 8014d9e:	607b      	str	r3, [r7, #4]
 8014da0:	4603      	mov	r3, r0
 8014da2:	73fb      	strb	r3, [r7, #15]
 8014da4:	4613      	mov	r3, r2
 8014da6:	81bb      	strh	r3, [r7, #12]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) )
 8014da8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d003      	beq.n	8014db8 <rfalNfcvPollerExtendedWriteSingleBlock+0x22>
 8014db0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014db4:	2b20      	cmp	r3, #32
 8014db6:	d901      	bls.n	8014dbc <rfalNfcvPollerExtendedWriteSingleBlock+0x26>
    {
        return ERR_PARAM;
 8014db8:	2307      	movs	r3, #7
 8014dba:	e042      	b.n	8014e42 <rfalNfcvPollerExtendedWriteSingleBlock+0xac>
    }
    
    dataLen = 0U;
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;                    /* TS T5T 1.0 BNo is considered as a multi-byte field. TS T5T 1.0 5.1.1.13 multi-byte field follows [DIGITAL]. [DIGITAL] 9.3.1 A multiple byte field is transmitted LSB first. */
 8014dc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014dc6:	1c5a      	adds	r2, r3, #1
 8014dc8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8014dcc:	89ba      	ldrh	r2, [r7, #12]
 8014dce:	b2d2      	uxtb	r2, r2
 8014dd0:	3360      	adds	r3, #96	; 0x60
 8014dd2:	443b      	add	r3, r7
 8014dd4:	f803 2c24 	strb.w	r2, [r3, #-36]
    data[dataLen++] = (uint8_t)((blockNum >> 8U) & 0xFFU);
 8014dd8:	89bb      	ldrh	r3, [r7, #12]
 8014dda:	0a1b      	lsrs	r3, r3, #8
 8014ddc:	b29a      	uxth	r2, r3
 8014dde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014de2:	1c59      	adds	r1, r3, #1
 8014de4:	f887 105f 	strb.w	r1, [r7, #95]	; 0x5f
 8014de8:	b2d2      	uxtb	r2, r2
 8014dea:	3360      	adds	r3, #96	; 0x60
 8014dec:	443b      	add	r3, r7
 8014dee:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen );         /* Append Block data to write */
 8014df2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014df6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8014dfa:	4413      	add	r3, r2
 8014dfc:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8014e00:	6879      	ldr	r1, [r7, #4]
 8014e02:	4618      	mov	r0, r3
 8014e04:	f003 ff84 	bl	8018d10 <memcpy>
    dataLen += blockLen;
 8014e08:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8014e0c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8014e10:	4413      	add	r3, r2
 8014e12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_WRITE_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 8014e16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e1a:	b29b      	uxth	r3, r3
 8014e1c:	7bf9      	ldrb	r1, [r7, #15]
 8014e1e:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 8014e22:	9204      	str	r2, [sp, #16]
 8014e24:	222a      	movs	r2, #42	; 0x2a
 8014e26:	9203      	str	r2, [sp, #12]
 8014e28:	f107 0210 	add.w	r2, r7, #16
 8014e2c:	9202      	str	r2, [sp, #8]
 8014e2e:	9301      	str	r3, [sp, #4]
 8014e30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014e34:	9300      	str	r3, [sp, #0]
 8014e36:	68bb      	ldr	r3, [r7, #8]
 8014e38:	2200      	movs	r2, #0
 8014e3a:	2031      	movs	r0, #49	; 0x31
 8014e3c:	f000 f890 	bl	8014f60 <rfalNfcvPollerTransceiveReq>
 8014e40:	4603      	mov	r3, r0
}
 8014e42:	4618      	mov	r0, r3
 8014e44:	3760      	adds	r7, #96	; 0x60
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}

08014e4a <rfalNfcvPollerExtendedReadMultipleBlocks>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_LOCK_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint16_t firstBlockNum, uint16_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8014e4a:	b580      	push	{r7, lr}
 8014e4c:	b08c      	sub	sp, #48	; 0x30
 8014e4e:	af06      	add	r7, sp, #24
 8014e50:	60b9      	str	r1, [r7, #8]
 8014e52:	4611      	mov	r1, r2
 8014e54:	461a      	mov	r2, r3
 8014e56:	4603      	mov	r3, r0
 8014e58:	73fb      	strb	r3, [r7, #15]
 8014e5a:	460b      	mov	r3, r1
 8014e5c:	81bb      	strh	r3, [r7, #12]
 8014e5e:	4613      	mov	r3, r2
 8014e60:	80fb      	strh	r3, [r7, #6]
    uint8_t data[(RFAL_NFCV_BLOCKNUM_EXTENDED_LEN + RFAL_NFCV_BLOCKNUM_EXTENDED_LEN)];
    uint8_t dataLen;
        
    dataLen = 0U;
 8014e62:	2300      	movs	r3, #0
 8014e64:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)((firstBlockNum >> 0U) & 0xFFU);
 8014e66:	7dfb      	ldrb	r3, [r7, #23]
 8014e68:	1c5a      	adds	r2, r3, #1
 8014e6a:	75fa      	strb	r2, [r7, #23]
 8014e6c:	89ba      	ldrh	r2, [r7, #12]
 8014e6e:	b2d2      	uxtb	r2, r2
 8014e70:	3318      	adds	r3, #24
 8014e72:	443b      	add	r3, r7
 8014e74:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((firstBlockNum >> 8U) & 0xFFU);
 8014e78:	89bb      	ldrh	r3, [r7, #12]
 8014e7a:	0a1b      	lsrs	r3, r3, #8
 8014e7c:	b29a      	uxth	r2, r3
 8014e7e:	7dfb      	ldrb	r3, [r7, #23]
 8014e80:	1c59      	adds	r1, r3, #1
 8014e82:	75f9      	strb	r1, [r7, #23]
 8014e84:	b2d2      	uxtb	r2, r2
 8014e86:	3318      	adds	r3, #24
 8014e88:	443b      	add	r3, r7
 8014e8a:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((numOfBlocks >> 0U) & 0xFFU);
 8014e8e:	7dfb      	ldrb	r3, [r7, #23]
 8014e90:	1c5a      	adds	r2, r3, #1
 8014e92:	75fa      	strb	r2, [r7, #23]
 8014e94:	88fa      	ldrh	r2, [r7, #6]
 8014e96:	b2d2      	uxtb	r2, r2
 8014e98:	3318      	adds	r3, #24
 8014e9a:	443b      	add	r3, r7
 8014e9c:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((numOfBlocks >> 8U) & 0xFFU);
 8014ea0:	88fb      	ldrh	r3, [r7, #6]
 8014ea2:	0a1b      	lsrs	r3, r3, #8
 8014ea4:	b29a      	uxth	r2, r3
 8014ea6:	7dfb      	ldrb	r3, [r7, #23]
 8014ea8:	1c59      	adds	r1, r3, #1
 8014eaa:	75f9      	strb	r1, [r7, #23]
 8014eac:	b2d2      	uxtb	r2, r2
 8014eae:	3318      	adds	r3, #24
 8014eb0:	443b      	add	r3, r7
 8014eb2:	f803 2c08 	strb.w	r2, [r3, #-8]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_READ_MULTIPLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8014eb6:	7dfb      	ldrb	r3, [r7, #23]
 8014eb8:	b29b      	uxth	r3, r3
 8014eba:	7bf9      	ldrb	r1, [r7, #15]
 8014ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ebe:	9204      	str	r2, [sp, #16]
 8014ec0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014ec2:	9203      	str	r2, [sp, #12]
 8014ec4:	6a3a      	ldr	r2, [r7, #32]
 8014ec6:	9202      	str	r2, [sp, #8]
 8014ec8:	9301      	str	r3, [sp, #4]
 8014eca:	f107 0310 	add.w	r3, r7, #16
 8014ece:	9300      	str	r3, [sp, #0]
 8014ed0:	68bb      	ldr	r3, [r7, #8]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	2033      	movs	r0, #51	; 0x33
 8014ed6:	f000 f843 	bl	8014f60 <rfalNfcvPollerTransceiveReq>
 8014eda:	4603      	mov	r3, r0
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	3718      	adds	r7, #24
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd80      	pop	{r7, pc}

08014ee4 <rfalNfcvPollerGetSystemInformation>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerGetSystemInformation( uint8_t flags, const uint8_t* uid, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b08a      	sub	sp, #40	; 0x28
 8014ee8:	af06      	add	r7, sp, #24
 8014eea:	60b9      	str	r1, [r7, #8]
 8014eec:	607a      	str	r2, [r7, #4]
 8014eee:	461a      	mov	r2, r3
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	73fb      	strb	r3, [r7, #15]
 8014ef4:	4613      	mov	r3, r2
 8014ef6:	81bb      	strh	r3, [r7, #12]
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_GET_SYS_INFO, flags, RFAL_NFCV_PARAM_SKIP, uid, NULL, 0U, rxBuf, rxBufLen, rcvLen );
 8014ef8:	7bf9      	ldrb	r1, [r7, #15]
 8014efa:	69bb      	ldr	r3, [r7, #24]
 8014efc:	9304      	str	r3, [sp, #16]
 8014efe:	89bb      	ldrh	r3, [r7, #12]
 8014f00:	9303      	str	r3, [sp, #12]
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	9302      	str	r3, [sp, #8]
 8014f06:	2300      	movs	r3, #0
 8014f08:	9301      	str	r3, [sp, #4]
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	9300      	str	r3, [sp, #0]
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	2200      	movs	r2, #0
 8014f12:	202b      	movs	r0, #43	; 0x2b
 8014f14:	f000 f824 	bl	8014f60 <rfalNfcvPollerTransceiveReq>
 8014f18:	4603      	mov	r3, r0
}
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	3710      	adds	r7, #16
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	bd80      	pop	{r7, pc}

08014f22 <rfalNfcvPollerExtendedGetSystemInformation>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedGetSystemInformation( uint8_t flags, const uint8_t* uid, uint8_t requestField, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8014f22:	b580      	push	{r7, lr}
 8014f24:	b08a      	sub	sp, #40	; 0x28
 8014f26:	af06      	add	r7, sp, #24
 8014f28:	60b9      	str	r1, [r7, #8]
 8014f2a:	607b      	str	r3, [r7, #4]
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	73fb      	strb	r3, [r7, #15]
 8014f30:	4613      	mov	r3, r2
 8014f32:	73bb      	strb	r3, [r7, #14]
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_GET_SYS_INFO, flags, requestField, uid, NULL, 0U, rxBuf, rxBufLen, rcvLen ); 
 8014f34:	7bba      	ldrb	r2, [r7, #14]
 8014f36:	7bf9      	ldrb	r1, [r7, #15]
 8014f38:	69fb      	ldr	r3, [r7, #28]
 8014f3a:	9304      	str	r3, [sp, #16]
 8014f3c:	8b3b      	ldrh	r3, [r7, #24]
 8014f3e:	9303      	str	r3, [sp, #12]
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	9302      	str	r3, [sp, #8]
 8014f44:	2300      	movs	r3, #0
 8014f46:	9301      	str	r3, [sp, #4]
 8014f48:	2300      	movs	r3, #0
 8014f4a:	9300      	str	r3, [sp, #0]
 8014f4c:	68bb      	ldr	r3, [r7, #8]
 8014f4e:	203b      	movs	r0, #59	; 0x3b
 8014f50:	f000 f806 	bl	8014f60 <rfalNfcvPollerTransceiveReq>
 8014f54:	4603      	mov	r3, r0
}
 8014f56:	4618      	mov	r0, r3
 8014f58:	3710      	adds	r7, #16
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}
	...

08014f60 <rfalNfcvPollerTransceiveReq>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerTransceiveReq( uint8_t cmd, uint8_t flags, uint8_t param, const uint8_t* uid, const uint8_t *data, uint16_t dataLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b094      	sub	sp, #80	; 0x50
 8014f64:	af04      	add	r7, sp, #16
 8014f66:	603b      	str	r3, [r7, #0]
 8014f68:	4603      	mov	r3, r0
 8014f6a:	71fb      	strb	r3, [r7, #7]
 8014f6c:	460b      	mov	r3, r1
 8014f6e:	71bb      	strb	r3, [r7, #6]
 8014f70:	4613      	mov	r3, r2
 8014f72:	717b      	strb	r3, [r7, #5]
    rfalNfcvGenericReq req;
    uint8_t            msgIt;
    rfalBitRate        rxBR;
    bool               fastMode;
    
    msgIt    = 0;
 8014f74:	2300      	movs	r3, #0
 8014f76:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    fastMode = false;
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 8014f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d013      	beq.n	8014fae <rfalNfcvPollerTransceiveReq+0x4e>
 8014f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d010      	beq.n	8014fae <rfalNfcvPollerTransceiveReq+0x4e>
 8014f8c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d002      	beq.n	8014f9a <rfalNfcvPollerTransceiveReq+0x3a>
 8014f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d009      	beq.n	8014fae <rfalNfcvPollerTransceiveReq+0x4e>
        (dataLen > ((uid != NULL) ? RFAL_NFCV_MAX_GEN_DATA_LEN : (RFAL_NFCV_MAX_GEN_DATA_LEN - RFAL_NFCV_UID_LEN)))  )
 8014f9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8014f9e:	683a      	ldr	r2, [r7, #0]
 8014fa0:	2a00      	cmp	r2, #0
 8014fa2:	d001      	beq.n	8014fa8 <rfalNfcvPollerTransceiveReq+0x48>
 8014fa4:	2229      	movs	r2, #41	; 0x29
 8014fa6:	e000      	b.n	8014faa <rfalNfcvPollerTransceiveReq+0x4a>
 8014fa8:	2221      	movs	r2, #33	; 0x21
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d201      	bcs.n	8014fb2 <rfalNfcvPollerTransceiveReq+0x52>
    {
        return ERR_PARAM;
 8014fae:	2307      	movs	r3, #7
 8014fb0:	e0ca      	b.n	8015148 <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    
    /* Check if the command is an ST's Fast command */
    if( (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_SINGLE_BLOCK)    || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_SINGLE_BLOCK)    || 
 8014fb2:	79fb      	ldrb	r3, [r7, #7]
 8014fb4:	2bc0      	cmp	r3, #192	; 0xc0
 8014fb6:	d017      	beq.n	8014fe8 <rfalNfcvPollerTransceiveReq+0x88>
 8014fb8:	79fb      	ldrb	r3, [r7, #7]
 8014fba:	2bc4      	cmp	r3, #196	; 0xc4
 8014fbc:	d014      	beq.n	8014fe8 <rfalNfcvPollerTransceiveReq+0x88>
 8014fbe:	79fb      	ldrb	r3, [r7, #7]
 8014fc0:	2bc3      	cmp	r3, #195	; 0xc3
 8014fc2:	d011      	beq.n	8014fe8 <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MULTIPLE_BLOCKS) || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_MULTIPLE_BLOCKS) ||
 8014fc4:	79fb      	ldrb	r3, [r7, #7]
 8014fc6:	2bc5      	cmp	r3, #197	; 0xc5
 8014fc8:	d00e      	beq.n	8014fe8 <rfalNfcvPollerTransceiveReq+0x88>
 8014fca:	79fb      	ldrb	r3, [r7, #7]
 8014fcc:	2bca      	cmp	r3, #202	; 0xca
 8014fce:	d00b      	beq.n	8014fe8 <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_MESSAGE)        || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE_LENGTH)           ||
 8014fd0:	79fb      	ldrb	r3, [r7, #7]
 8014fd2:	2bcb      	cmp	r3, #203	; 0xcb
 8014fd4:	d008      	beq.n	8014fe8 <rfalNfcvPollerTransceiveReq+0x88>
 8014fd6:	79fb      	ldrb	r3, [r7, #7]
 8014fd8:	2bcc      	cmp	r3, #204	; 0xcc
 8014fda:	d005      	beq.n	8014fe8 <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE)         || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_DYN_CONFIGURATION)        ||               
 8014fdc:	79fb      	ldrb	r3, [r7, #7]
 8014fde:	2bcd      	cmp	r3, #205	; 0xcd
 8014fe0:	d002      	beq.n	8014fe8 <rfalNfcvPollerTransceiveReq+0x88>
 8014fe2:	79fb      	ldrb	r3, [r7, #7]
 8014fe4:	2bce      	cmp	r3, #206	; 0xce
 8014fe6:	d10c      	bne.n	8015002 <rfalNfcvPollerTransceiveReq+0xa2>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_DYN_CONFIGURATION) )
    {
        /* Store current Rx bit rate and move to fast mode */
        rfalGetBitRate( NULL, &rxBR );
 8014fe8:	f107 030f 	add.w	r3, r7, #15
 8014fec:	4619      	mov	r1, r3
 8014fee:	2000      	movs	r0, #0
 8014ff0:	f000 fcca 	bl	8015988 <rfalGetBitRate>
        rfalSetBitRate( RFAL_BR_KEEP, RFAL_BR_52p97 );
 8014ff4:	21eb      	movs	r1, #235	; 0xeb
 8014ff6:	20ff      	movs	r0, #255	; 0xff
 8014ff8:	f000 fa62 	bl	80154c0 <rfalSetBitRate>
        
        fastMode = true;
 8014ffc:	2301      	movs	r3, #1
 8014ffe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    }
    
    
    /* Compute Request Command */
    req.REQ_FLAG  = (uint8_t)(flags & (~((uint32_t)RFAL_NFCV_REQ_FLAG_ADDRESS) & ~((uint32_t)RFAL_NFCV_REQ_FLAG_SELECT)));
 8015002:	79bb      	ldrb	r3, [r7, #6]
 8015004:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8015008:	b2db      	uxtb	r3, r3
 801500a:	743b      	strb	r3, [r7, #16]
    req.CMD       = cmd;
 801500c:	79fb      	ldrb	r3, [r7, #7]
 801500e:	747b      	strb	r3, [r7, #17]
    
    /* Prepend parameter on ceratin proprietary requests: IC Manuf, Parameters */
    if( param != RFAL_NFCV_PARAM_SKIP )
 8015010:	797b      	ldrb	r3, [r7, #5]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d009      	beq.n	801502a <rfalNfcvPollerTransceiveReq+0xca>
    {
        req.payload.data[msgIt++] = param;
 8015016:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801501a:	1c5a      	adds	r2, r3, #1
 801501c:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8015020:	3340      	adds	r3, #64	; 0x40
 8015022:	443b      	add	r3, r7
 8015024:	797a      	ldrb	r2, [r7, #5]
 8015026:	f803 2c2e 	strb.w	r2, [r3, #-46]
    }
    
    /* Check if request is to be sent in Addressed or Selected mode */
    if( uid != NULL )
 801502a:	683b      	ldr	r3, [r7, #0]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d015      	beq.n	801505c <rfalNfcvPollerTransceiveReq+0xfc>
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_ADDRESS;
 8015030:	7c3b      	ldrb	r3, [r7, #16]
 8015032:	f043 0320 	orr.w	r3, r3, #32
 8015036:	b2db      	uxtb	r3, r3
 8015038:	743b      	strb	r3, [r7, #16]
        ST_MEMCPY( &req.payload.data[msgIt], uid, RFAL_NFCV_UID_LEN );
 801503a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801503e:	f107 0210 	add.w	r2, r7, #16
 8015042:	4413      	add	r3, r2
 8015044:	3302      	adds	r3, #2
 8015046:	2208      	movs	r2, #8
 8015048:	6839      	ldr	r1, [r7, #0]
 801504a:	4618      	mov	r0, r3
 801504c:	f003 fe60 	bl	8018d10 <memcpy>
        msgIt += RFAL_NFCV_UID_LEN;
 8015050:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8015054:	3308      	adds	r3, #8
 8015056:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 801505a:	e004      	b.n	8015066 <rfalNfcvPollerTransceiveReq+0x106>
    }
    else
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_SELECT;
 801505c:	7c3b      	ldrb	r3, [r7, #16]
 801505e:	f043 0310 	orr.w	r3, r3, #16
 8015062:	b2db      	uxtb	r3, r3
 8015064:	743b      	strb	r3, [r7, #16]
    }
    
    if( dataLen > 0U )
 8015066:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801506a:	2b00      	cmp	r3, #0
 801506c:	d013      	beq.n	8015096 <rfalNfcvPollerTransceiveReq+0x136>
    {
        ST_MEMCPY( &req.payload.data[msgIt], data, dataLen);
 801506e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8015072:	f107 0210 	add.w	r2, r7, #16
 8015076:	4413      	add	r3, r2
 8015078:	3302      	adds	r3, #2
 801507a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 801507e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015080:	4618      	mov	r0, r3
 8015082:	f003 fe45 	bl	8018d10 <memcpy>
        msgIt += (uint8_t)dataLen;
 8015086:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801508a:	b2da      	uxtb	r2, r3
 801508c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8015090:	4413      	add	r3, r2
 8015092:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    }
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, (RFAL_CMD_LEN + RFAL_NFCV_FLAG_LEN +(uint16_t)msgIt), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_MAX );
 8015096:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801509a:	b29b      	uxth	r3, r3
 801509c:	3302      	adds	r3, #2
 801509e:	b299      	uxth	r1, r3
 80150a0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80150a4:	f107 0010 	add.w	r0, r7, #16
 80150a8:	4b29      	ldr	r3, [pc, #164]	; (8015150 <rfalNfcvPollerTransceiveReq+0x1f0>)
 80150aa:	9302      	str	r3, [sp, #8]
 80150ac:	2300      	movs	r3, #0
 80150ae:	9301      	str	r3, [sp, #4]
 80150b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80150b2:	9300      	str	r3, [sp, #0]
 80150b4:	4613      	mov	r3, r2
 80150b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80150b8:	f000 ff20 	bl	8015efc <rfalTransceiveBlockingTxRx>
 80150bc:	4603      	mov	r3, r0
 80150be:	87fb      	strh	r3, [r7, #62]	; 0x3e
    
    /* If the Option Flag is set in certain commands an EOF needs to be sent after 20ms to retrieve the VICC response      ISO15693-3 2009  10.4.2 & 10.4.3 & 10.4.5 */
    if( ((flags & (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION) != 0U) && ((cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_MULTIPLE_BLOCKS)        ||
 80150c0:	79bb      	ldrb	r3, [r7, #6]
 80150c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d01b      	beq.n	8015102 <rfalNfcvPollerTransceiveReq+0x1a2>
 80150ca:	79fb      	ldrb	r3, [r7, #7]
 80150cc:	2b21      	cmp	r3, #33	; 0x21
 80150ce:	d00e      	beq.n	80150ee <rfalNfcvPollerTransceiveReq+0x18e>
 80150d0:	79fb      	ldrb	r3, [r7, #7]
 80150d2:	2b24      	cmp	r3, #36	; 0x24
 80150d4:	d00b      	beq.n	80150ee <rfalNfcvPollerTransceiveReq+0x18e>
 80150d6:	79fb      	ldrb	r3, [r7, #7]
 80150d8:	2b22      	cmp	r3, #34	; 0x22
 80150da:	d008      	beq.n	80150ee <rfalNfcvPollerTransceiveReq+0x18e>
                                                        (cmd == (uint8_t)RFAL_NFCV_CMD_LOCK_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_WRITE_SINGLE_BLOCK)                   ||
 80150dc:	79fb      	ldrb	r3, [r7, #7]
 80150de:	2b31      	cmp	r3, #49	; 0x31
 80150e0:	d005      	beq.n	80150ee <rfalNfcvPollerTransceiveReq+0x18e>
 80150e2:	79fb      	ldrb	r3, [r7, #7]
 80150e4:	2b32      	cmp	r3, #50	; 0x32
 80150e6:	d002      	beq.n	80150ee <rfalNfcvPollerTransceiveReq+0x18e>
                                                        (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_LOCK_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_WRITE_MULTIPLE_BLOCK))  )
 80150e8:	79fb      	ldrb	r3, [r7, #7]
 80150ea:	2b34      	cmp	r3, #52	; 0x34
 80150ec:	d109      	bne.n	8015102 <rfalNfcvPollerTransceiveReq+0x1a2>
    {
        ret = rfalISO15693TransceiveEOF( rxBuf, (uint8_t)rxBufLen, rcvLen );
 80150ee:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80150f2:	b2db      	uxtb	r3, r3
 80150f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80150f6:	4619      	mov	r1, r3
 80150f8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80150fa:	f002 f90d 	bl	8017318 <rfalISO15693TransceiveEOF>
 80150fe:	4603      	mov	r3, r0
 8015100:	87fb      	strh	r3, [r7, #62]	; 0x3e
    }

    /* Restore Rx BitRate */
    if( fastMode )
 8015102:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015106:	2b00      	cmp	r3, #0
 8015108:	d004      	beq.n	8015114 <rfalNfcvPollerTransceiveReq+0x1b4>
    {
        rfalSetBitRate( RFAL_BR_KEEP, rxBR );
 801510a:	7bfb      	ldrb	r3, [r7, #15]
 801510c:	4619      	mov	r1, r3
 801510e:	20ff      	movs	r0, #255	; 0xff
 8015110:	f000 f9d6 	bl	80154c0 <rfalSetBitRate>
    }
    
    if( ret != ERR_NONE )
 8015114:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015116:	2b00      	cmp	r3, #0
 8015118:	d001      	beq.n	801511e <rfalNfcvPollerTransceiveReq+0x1be>
    {
        return ret;
 801511a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801511c:	e014      	b.n	8015148 <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    /* Check if the response minimum length has been received */
    if( (*rcvLen) < (uint8_t)RFAL_NFCV_FLAG_LEN )
 801511e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015120:	881b      	ldrh	r3, [r3, #0]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d101      	bne.n	801512a <rfalNfcvPollerTransceiveReq+0x1ca>
    {
        return ERR_PROTO;
 8015126:	230b      	movs	r3, #11
 8015128:	e00e      	b.n	8015148 <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    /* Check if an error has been signalled */
    if( (rxBuf[RFAL_NFCV_FLAG_POS] & (uint8_t)RFAL_NFCV_RES_FLAG_ERROR) != 0U )
 801512a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801512c:	781b      	ldrb	r3, [r3, #0]
 801512e:	f003 0301 	and.w	r3, r3, #1
 8015132:	2b00      	cmp	r3, #0
 8015134:	d007      	beq.n	8015146 <rfalNfcvPollerTransceiveReq+0x1e6>
    {
        return rfalNfcvParseError( rxBuf[RFAL_NFCV_DATASTART_POS] );
 8015136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015138:	3301      	adds	r3, #1
 801513a:	781b      	ldrb	r3, [r3, #0]
 801513c:	4618      	mov	r0, r3
 801513e:	f7ff faab 	bl	8014698 <rfalNfcvParseError>
 8015142:	4603      	mov	r3, r0
 8015144:	e000      	b.n	8015148 <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    return ERR_NONE;
 8015146:	2300      	movs	r3, #0
}
 8015148:	4618      	mov	r0, r3
 801514a:	3740      	adds	r7, #64	; 0x40
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}
 8015150:	00042360 	.word	0x00042360

08015154 <rfalInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 8015154:	b580      	push	{r7, lr}
 8015156:	af00      	add	r7, sp, #0
    st25r3911InitInterrupts();
 8015158:	f7ee fe72 	bl	8003e40 <st25r3911InitInterrupts>
    
    /* Initialize chip */
    st25r3911Initialize();
 801515c:	f7ed ff36 	bl	8002fcc <st25r3911Initialize>

    /* Check expected chip: ST25R3911 */
    if( !st25r3911CheckChipID( NULL ) )
 8015160:	2000      	movs	r0, #0
 8015162:	f7ee f8f3 	bl	800334c <st25r3911CheckChipID>
 8015166:	4603      	mov	r3, r0
 8015168:	f083 0301 	eor.w	r3, r3, #1
 801516c:	b2db      	uxtb	r3, r3
 801516e:	2b00      	cmp	r3, #0
 8015170:	d001      	beq.n	8015176 <rfalInitialize+0x22>
    {
        return ERR_HW_MISMATCH;
 8015172:	2324      	movs	r3, #36	; 0x24
 8015174:	e052      	b.n	801521c <rfalInitialize+0xc8>
    }

    /* Disable any previous observation mode */
    rfalST25R3911ObsModeDisable();
 8015176:	2100      	movs	r1, #0
 8015178:	2001      	movs	r0, #1
 801517a:	f7ee fbb9 	bl	80038f0 <st25r3911WriteTestRegister>

    /*******************************************************************************/
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 801517e:	2000      	movs	r0, #0
 8015180:	f7f7 ff7e 	bl	800d080 <rfalSetAnalogConfig>

    /*******************************************************************************/
    /* Set FIFO Water Levels to be used */
    st25r3911ChangeRegisterBits( ST25R3911_REG_IO_CONF1, (ST25R3911_REG_IO_CONF1_fifo_lt | ST25R3911_REG_IO_CONF1_fifo_lr), (ST25R3911_REG_IO_CONF1_fifo_lt_32bytes | ST25R3911_REG_IO_CONF1_fifo_lr_64bytes) );
 8015184:	2200      	movs	r2, #0
 8015186:	2130      	movs	r1, #48	; 0x30
 8015188:	2000      	movs	r0, #0
 801518a:	f7ee fc86 	bl	8003a9a <st25r3911ChangeRegisterBits>

    /* Always have CRC in FIFO upon reception  */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_crc_2_fifo );
 801518e:	2140      	movs	r1, #64	; 0x40
 8015190:	2009      	movs	r0, #9
 8015192:	f7ee fc64 	bl	8003a5e <st25r3911SetRegisterBits>

    /* Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8015196:	2110      	movs	r1, #16
 8015198:	2009      	movs	r0, #9
 801519a:	f7ee fc60 	bl	8003a5e <st25r3911SetRegisterBits>

    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 801519e:	f001 fe05 	bl	8016dac <rfalFIFOStatusClear>

    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 80151a2:	4b1f      	ldr	r3, [pc, #124]	; (8015220 <rfalInitialize+0xcc>)
 80151a4:	2201      	movs	r2, #1
 80151a6:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 80151a8:	4b1d      	ldr	r3, [pc, #116]	; (8015220 <rfalInitialize+0xcc>)
 80151aa:	2200      	movs	r2, #0
 80151ac:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 80151ae:	4b1c      	ldr	r3, [pc, #112]	; (8015220 <rfalInitialize+0xcc>)
 80151b0:	2200      	movs	r2, #0
 80151b2:	711a      	strb	r2, [r3, #4]

    /* Set RFAL default configs */
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 80151b4:	4b1a      	ldr	r3, [pc, #104]	; (8015220 <rfalInitialize+0xcc>)
 80151b6:	2200      	movs	r2, #0
 80151b8:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 80151ba:	4b19      	ldr	r3, [pc, #100]	; (8015220 <rfalInitialize+0xcc>)
 80151bc:	2200      	movs	r2, #0
 80151be:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 80151c0:	4b17      	ldr	r3, [pc, #92]	; (8015220 <rfalInitialize+0xcc>)
 80151c2:	2200      	movs	r2, #0
 80151c4:	71da      	strb	r2, [r3, #7]

    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 80151c6:	4b16      	ldr	r3, [pc, #88]	; (8015220 <rfalInitialize+0xcc>)
 80151c8:	2200      	movs	r2, #0
 80151ca:	755a      	strb	r2, [r3, #21]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 80151cc:	4b14      	ldr	r3, [pc, #80]	; (8015220 <rfalInitialize+0xcc>)
 80151ce:	2200      	movs	r2, #0
 80151d0:	751a      	strb	r2, [r3, #20]

    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 80151d2:	4b13      	ldr	r3, [pc, #76]	; (8015220 <rfalInitialize+0xcc>)
 80151d4:	2200      	movs	r2, #0
 80151d6:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 80151d8:	4b11      	ldr	r3, [pc, #68]	; (8015220 <rfalInitialize+0xcc>)
 80151da:	2200      	movs	r2, #0
 80151dc:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 80151de:	4b10      	ldr	r3, [pc, #64]	; (8015220 <rfalInitialize+0xcc>)
 80151e0:	2200      	movs	r2, #0
 80151e2:	609a      	str	r2, [r3, #8]

    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 80151e4:	4b0e      	ldr	r3, [pc, #56]	; (8015220 <rfalInitialize+0xcc>)
 80151e6:	2200      	movs	r2, #0
 80151e8:	641a      	str	r2, [r3, #64]	; 0x40

    gRFAL.callbacks.preTxRx  = NULL;
 80151ea:	4b0d      	ldr	r3, [pc, #52]	; (8015220 <rfalInitialize+0xcc>)
 80151ec:	2200      	movs	r2, #0
 80151ee:	64da      	str	r2, [r3, #76]	; 0x4c
    gRFAL.callbacks.postTxRx = NULL;
 80151f0:	4b0b      	ldr	r3, [pc, #44]	; (8015220 <rfalInitialize+0xcc>)
 80151f2:	2200      	movs	r2, #0
 80151f4:	651a      	str	r2, [r3, #80]	; 0x50

#if RFAL_FEATURE_NFCV
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 80151f6:	4b0a      	ldr	r3, [pc, #40]	; (8015220 <rfalInitialize+0xcc>)
 80151f8:	2200      	movs	r2, #0
 80151fa:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
#endif /* RFAL_FEATURE_NFCV */

#if RFAL_FEATURE_LISTEN_MODE
    /* Initialize Listen Mode */
    gRFAL.Lm.state           = RFAL_LM_STATE_NOT_INIT;
 80151fe:	4b08      	ldr	r3, [pc, #32]	; (8015220 <rfalInitialize+0xcc>)
 8015200:	2200      	movs	r2, #0
 8015202:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    gRFAL.Lm.brDetected      = RFAL_BR_KEEP;
 8015206:	4b06      	ldr	r3, [pc, #24]	; (8015220 <rfalInitialize+0xcc>)
 8015208:	22ff      	movs	r2, #255	; 0xff
 801520a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
#endif /* RFAL_FEATURE_LISTEN_MODE */

#if RFAL_FEATURE_WAKEUP_MODE
    /* Initialize Wake-Up Mode */
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 801520e:	4b04      	ldr	r3, [pc, #16]	; (8015220 <rfalInitialize+0xcc>)
 8015210:	2200      	movs	r2, #0
 8015212:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68


    /*******************************************************************************/
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 8015216:	f000 f805 	bl	8015224 <rfalCalibrate>
    
    return ERR_NONE;
 801521a:	2300      	movs	r3, #0
}
 801521c:	4618      	mov	r0, r3
 801521e:	bd80      	pop	{r7, pc}
 8015220:	2000393c 	.word	0x2000393c

08015224 <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b082      	sub	sp, #8
 8015228:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 801522a:	4b1b      	ldr	r3, [pc, #108]	; (8015298 <rfalCalibrate+0x74>)
 801522c:	781b      	ldrb	r3, [r3, #0]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d101      	bne.n	8015236 <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 8015232:	2321      	movs	r3, #33	; 0x21
 8015234:	e02b      	b.n	801528e <rfalCalibrate+0x6a>
    /*******************************************************************************/
    /* Perform ST25R3911 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )       
 8015236:	2200      	movs	r2, #0
 8015238:	2180      	movs	r1, #128	; 0x80
 801523a:	202a      	movs	r0, #42	; 0x2a
 801523c:	f7ee f866 	bl	800330c <st25r3911CheckReg>
 8015240:	4603      	mov	r3, r0
 8015242:	2b00      	cmp	r3, #0
 8015244:	d003      	beq.n	801524e <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3911AdjustRegulators( &resValue );
 8015246:	1dbb      	adds	r3, r7, #6
 8015248:	4618      	mov	r0, r3
 801524a:	f7ed feed 	bl	8003028 <st25r3911AdjustRegulators>
    }
    
    /* Automatic Antenna calibration only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_ANT_CAL_CONTROL, ST25R3911_REG_ANT_CAL_CONTROL_trim_s, 0x00 ) )
 801524e:	2200      	movs	r2, #0
 8015250:	2180      	movs	r1, #128	; 0x80
 8015252:	2021      	movs	r0, #33	; 0x21
 8015254:	f7ee f85a 	bl	800330c <st25r3911CheckReg>
 8015258:	4603      	mov	r3, r0
 801525a:	2b00      	cmp	r3, #0
 801525c:	d010      	beq.n	8015280 <rfalCalibrate+0x5c>
    {
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );
 801525e:	1dbb      	adds	r3, r7, #6
 8015260:	4618      	mov	r0, r3
 8015262:	f7ed ff62 	bl	800312a <st25r3911CalibrateAntenna>
      
        /*******************************************************************************/
        /* REMARK: Silicon workaround ST25R3911 Errata #1.5                            */
        /* Always run the command Calibrate Antenna twice                              */
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );                
 8015266:	1dbb      	adds	r3, r7, #6
 8015268:	4618      	mov	r0, r3
 801526a:	f7ed ff5e 	bl	800312a <st25r3911CalibrateAntenna>
    {
        /* If no antenna calibration is performed there is no need to perform second regulator adjustment again */
        return ERR_NONE; 
    }
    
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 801526e:	2200      	movs	r2, #0
 8015270:	2180      	movs	r1, #128	; 0x80
 8015272:	202a      	movs	r0, #42	; 0x2a
 8015274:	f7ee f84a 	bl	800330c <st25r3911CheckReg>
 8015278:	4603      	mov	r3, r0
 801527a:	2b00      	cmp	r3, #0
 801527c:	d006      	beq.n	801528c <rfalCalibrate+0x68>
 801527e:	e001      	b.n	8015284 <rfalCalibrate+0x60>
        return ERR_NONE; 
 8015280:	2300      	movs	r3, #0
 8015282:	e004      	b.n	801528e <rfalCalibrate+0x6a>
    {
        /* Adjust the regulators again with the Antenna calibrated */
        st25r3911AdjustRegulators( &resValue );
 8015284:	1dbb      	adds	r3, r7, #6
 8015286:	4618      	mov	r0, r3
 8015288:	f7ed fece 	bl	8003028 <st25r3911AdjustRegulators>
    }
    
    return ERR_NONE;
 801528c:	2300      	movs	r3, #0
}
 801528e:	4618      	mov	r0, r3
 8015290:	3708      	adds	r7, #8
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}
 8015296:	bf00      	nop
 8015298:	2000393c 	.word	0x2000393c

0801529c <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b082      	sub	sp, #8
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	4603      	mov	r3, r0
 80152a4:	71fb      	strb	r3, [r7, #7]
 80152a6:	460b      	mov	r3, r1
 80152a8:	71bb      	strb	r3, [r7, #6]
 80152aa:	4613      	mov	r3, r2
 80152ac:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 80152ae:	4b83      	ldr	r3, [pc, #524]	; (80154bc <rfalSetMode+0x220>)
 80152b0:	781b      	ldrb	r3, [r3, #0]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d101      	bne.n	80152ba <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 80152b6:	2321      	movs	r3, #33	; 0x21
 80152b8:	e0fb      	b.n	80154b2 <rfalSetMode+0x216>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 80152ba:	79bb      	ldrb	r3, [r7, #6]
 80152bc:	2bff      	cmp	r3, #255	; 0xff
 80152be:	d002      	beq.n	80152c6 <rfalSetMode+0x2a>
 80152c0:	797b      	ldrb	r3, [r7, #5]
 80152c2:	2bff      	cmp	r3, #255	; 0xff
 80152c4:	d101      	bne.n	80152ca <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 80152c6:	2307      	movs	r3, #7
 80152c8:	e0f3      	b.n	80154b2 <rfalSetMode+0x216>
    }
   
    switch( mode )
 80152ca:	79fb      	ldrb	r3, [r7, #7]
 80152cc:	3b01      	subs	r3, #1
 80152ce:	2b0c      	cmp	r3, #12
 80152d0:	f200 80db 	bhi.w	801548a <rfalSetMode+0x1ee>
 80152d4:	a201      	add	r2, pc, #4	; (adr r2, 80152dc <rfalSetMode+0x40>)
 80152d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152da:	bf00      	nop
 80152dc:	08015311 	.word	0x08015311
 80152e0:	08015333 	.word	0x08015333
 80152e4:	08015355 	.word	0x08015355
 80152e8:	0801538b 	.word	0x0801538b
 80152ec:	080153c1 	.word	0x080153c1
 80152f0:	080153f7 	.word	0x080153f7
 80152f4:	08015419 	.word	0x08015419
 80152f8:	08015419 	.word	0x08015419
 80152fc:	08015433 	.word	0x08015433
 8015300:	08015487 	.word	0x08015487
 8015304:	08015487 	.word	0x08015487
 8015308:	08015487 	.word	0x08015487
 801530c:	0801545d 	.word	0x0801545d
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8015310:	2104      	movs	r1, #4
 8015312:	2002      	movs	r0, #2
 8015314:	f7ee fb80 	bl	8003a18 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443a);
 8015318:	2108      	movs	r1, #8
 801531a:	2003      	movs	r0, #3
 801531c:	f7ee fb30 	bl	8003980 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8015320:	f240 1001 	movw	r0, #257	; 0x101
 8015324:	f7f7 feac 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8015328:	f44f 7081 	mov.w	r0, #258	; 0x102
 801532c:	f7f7 fea8 	bl	800d080 <rfalSetAnalogConfig>
            break;
 8015330:	e0ad      	b.n	801548e <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8015332:	2104      	movs	r1, #4
 8015334:	2002      	movs	r0, #2
 8015336:	f7ee fb6f 	bl	8003a18 <st25r3911ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_topaz );
 801533a:	2120      	movs	r1, #32
 801533c:	2003      	movs	r0, #3
 801533e:	f7ee fb1f 	bl	8003980 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8015342:	f240 1001 	movw	r0, #257	; 0x101
 8015346:	f7f7 fe9b 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 801534a:	f44f 7081 	mov.w	r0, #258	; 0x102
 801534e:	f7f7 fe97 	bl	800d080 <rfalSetAnalogConfig>
            break;
 8015352:	e09c      	b.n	801548e <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8015354:	2104      	movs	r1, #4
 8015356:	2002      	movs	r0, #2
 8015358:	f7ee fb5e 	bl	8003a18 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 801535c:	2110      	movs	r1, #16
 801535e:	2003      	movs	r0, #3
 8015360:	f7ee fb0e 	bl	8003980 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 8015364:	2200      	movs	r2, #0
 8015366:	21fc      	movs	r1, #252	; 0xfc
 8015368:	2006      	movs	r0, #6
 801536a:	f7ee fb96 	bl	8003a9a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 801536e:	2200      	movs	r2, #0
 8015370:	21f8      	movs	r1, #248	; 0xf8
 8015372:	2007      	movs	r0, #7
 8015374:	f7ee fb91 	bl	8003a9a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_eof_12_10to11etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8015378:	f240 2001 	movw	r0, #513	; 0x201
 801537c:	f7f7 fe80 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8015380:	f240 2002 	movw	r0, #514	; 0x202
 8015384:	f7f7 fe7c 	bl	800d080 <rfalSetAnalogConfig>
            break;
 8015388:	e081      	b.n	801548e <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 801538a:	2104      	movs	r1, #4
 801538c:	2002      	movs	r0, #2
 801538e:	f7ee fb43 	bl	8003a18 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 8015392:	2110      	movs	r1, #16
 8015394:	2003      	movs	r0, #3
 8015396:	f7ee faf3 	bl	8003980 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 801539a:	2200      	movs	r2, #0
 801539c:	21fc      	movs	r1, #252	; 0xfc
 801539e:	2006      	movs	r0, #6
 80153a0:	f7ee fb7b 	bl	8003a9a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 80153a4:	2228      	movs	r2, #40	; 0x28
 80153a6:	21f8      	movs	r1, #248	; 0xf8
 80153a8:	2007      	movs	r0, #7
 80153aa:	f7ee fb76 	bl	8003a9a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_eof_12_10to12etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80153ae:	f240 2001 	movw	r0, #513	; 0x201
 80153b2:	f7f7 fe65 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80153b6:	f240 2002 	movw	r0, #514	; 0x202
 80153ba:	f7f7 fe61 	bl	800d080 <rfalSetAnalogConfig>
            break;
 80153be:	e066      	b.n	801548e <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_CTS:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 80153c0:	2104      	movs	r1, #4
 80153c2:	2002      	movs	r0, #2
 80153c4:	f7ee fb28 	bl	8003a18 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 80153c8:	2110      	movs	r1, #16
 80153ca:	2003      	movs	r0, #3
 80153cc:	f7ee fad8 	bl	8003980 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 80153d0:	2200      	movs	r2, #0
 80153d2:	21fc      	movs	r1, #252	; 0xfc
 80153d4:	2006      	movs	r0, #6
 80153d6:	f7ee fb60 	bl	8003a9a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, clear SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 80153da:	2230      	movs	r2, #48	; 0x30
 80153dc:	21f8      	movs	r1, #248	; 0xf8
 80153de:	2007      	movs	r0, #7
 80153e0:	f7ee fb5b 	bl	8003a9a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80153e4:	f240 2001 	movw	r0, #513	; 0x201
 80153e8:	f7f7 fe4a 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80153ec:	f240 2002 	movw	r0, #514	; 0x202
 80153f0:	f7f7 fe46 	bl	800d080 <rfalSetAnalogConfig>
            break;
 80153f4:	e04b      	b.n	801548e <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 80153f6:	2104      	movs	r1, #4
 80153f8:	2002      	movs	r0, #2
 80153fa:	f7ee fb0d 	bl	8003a18 <st25r3911ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_felica );
 80153fe:	2118      	movs	r1, #24
 8015400:	2003      	movs	r0, #3
 8015402:	f7ee fabd 	bl	8003980 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8015406:	f240 4001 	movw	r0, #1025	; 0x401
 801540a:	f7f7 fe39 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 801540e:	f240 4002 	movw	r0, #1026	; 0x402
 8015412:	f7f7 fe35 	bl	800d080 <rfalSetAnalogConfig>
            break;
 8015416:	e03a      	b.n	801548e <rfalSetMode+0x1f2>
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCV:
        case RFAL_MODE_POLL_PICOPASS:
        
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8015418:	2104      	movs	r1, #4
 801541a:	2002      	movs	r0, #2
 801541c:	f7ee fafc 	bl	8003a18 <st25r3911ClrRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8015420:	f241 0001 	movw	r0, #4097	; 0x1001
 8015424:	f7f7 fe2c 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8015428:	f241 0002 	movw	r0, #4098	; 0x1002
 801542c:	f7f7 fe28 	bl	800d080 <rfalSetAnalogConfig>
            break;
 8015430:	e02d      	b.n	801548e <rfalSetMode+0x1f2>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_nfc | ST25R3911_REG_MODE_nfc_ar) );
 8015432:	2101      	movs	r1, #1
 8015434:	2003      	movs	r0, #3
 8015436:	f7ee faa3 	bl	8003980 <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 801543a:	2160      	movs	r1, #96	; 0x60
 801543c:	2040      	movs	r0, #64	; 0x40
 801543e:	f7ed ff31 	bl	80032a4 <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8015442:	2110      	movs	r1, #16
 8015444:	2009      	movs	r0, #9
 8015446:	f7ee fb0a 	bl	8003a5e <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 801544a:	f640 0001 	movw	r0, #2049	; 0x801
 801544e:	f7f7 fe17 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8015452:	f640 0002 	movw	r0, #2050	; 0x802
 8015456:	f7f7 fe13 	bl	800d080 <rfalSetAnalogConfig>
            break;
 801545a:	e018      	b.n	801548e <rfalSetMode+0x1f2>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_targ | ST25R3911_REG_MODE_om_nfcip1_normal_mode | ST25R3911_REG_MODE_nfc_ar) );
 801545c:	2189      	movs	r1, #137	; 0x89
 801545e:	2003      	movs	r0, #3
 8015460:	f7ee fa8e 	bl	8003980 <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 8015464:	2160      	movs	r1, #96	; 0x60
 8015466:	2040      	movs	r0, #64	; 0x40
 8015468:	f7ed ff1c 	bl	80032a4 <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 801546c:	2110      	movs	r1, #16
 801546e:	2009      	movs	r0, #9
 8015470:	f7ee faf5 	bl	8003a5e <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8015474:	f648 0001 	movw	r0, #34817	; 0x8801
 8015478:	f7f7 fe02 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 801547c:	f648 0002 	movw	r0, #34818	; 0x8802
 8015480:	f7f7 fdfe 	bl	800d080 <rfalSetAnalogConfig>
            break;
 8015484:	e003      	b.n	801548e <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
            return ERR_NOTSUPP;
 8015486:	2318      	movs	r3, #24
 8015488:	e013      	b.n	80154b2 <rfalSetMode+0x216>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 801548a:	230f      	movs	r3, #15
 801548c:	e011      	b.n	80154b2 <rfalSetMode+0x216>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 801548e:	4b0b      	ldr	r3, [pc, #44]	; (80154bc <rfalSetMode+0x220>)
 8015490:	781b      	ldrb	r3, [r3, #0]
 8015492:	2b02      	cmp	r3, #2
 8015494:	bf38      	it	cc
 8015496:	2302      	movcc	r3, #2
 8015498:	b2da      	uxtb	r2, r3
 801549a:	4b08      	ldr	r3, [pc, #32]	; (80154bc <rfalSetMode+0x220>)
 801549c:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 801549e:	4a07      	ldr	r2, [pc, #28]	; (80154bc <rfalSetMode+0x220>)
 80154a0:	79fb      	ldrb	r3, [r7, #7]
 80154a2:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 80154a4:	797a      	ldrb	r2, [r7, #5]
 80154a6:	79bb      	ldrb	r3, [r7, #6]
 80154a8:	4611      	mov	r1, r2
 80154aa:	4618      	mov	r0, r3
 80154ac:	f000 f808 	bl	80154c0 <rfalSetBitRate>
 80154b0:	4603      	mov	r3, r0
}
 80154b2:	4618      	mov	r0, r3
 80154b4:	3708      	adds	r7, #8
 80154b6:	46bd      	mov	sp, r7
 80154b8:	bd80      	pop	{r7, pc}
 80154ba:	bf00      	nop
 80154bc:	2000393c 	.word	0x2000393c

080154c0 <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b088      	sub	sp, #32
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	4603      	mov	r3, r0
 80154c8:	460a      	mov	r2, r1
 80154ca:	71fb      	strb	r3, [r7, #7]
 80154cc:	4613      	mov	r3, r2
 80154ce:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 80154d0:	4b93      	ldr	r3, [pc, #588]	; (8015720 <rfalSetBitRate+0x260>)
 80154d2:	781b      	ldrb	r3, [r3, #0]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d101      	bne.n	80154dc <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 80154d8:	2321      	movs	r3, #33	; 0x21
 80154da:	e24a      	b.n	8015972 <rfalSetBitRate+0x4b2>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 80154dc:	79fb      	ldrb	r3, [r7, #7]
 80154de:	2bff      	cmp	r3, #255	; 0xff
 80154e0:	d102      	bne.n	80154e8 <rfalSetBitRate+0x28>
 80154e2:	4b8f      	ldr	r3, [pc, #572]	; (8015720 <rfalSetBitRate+0x260>)
 80154e4:	789b      	ldrb	r3, [r3, #2]
 80154e6:	e000      	b.n	80154ea <rfalSetBitRate+0x2a>
 80154e8:	79fb      	ldrb	r3, [r7, #7]
 80154ea:	4a8d      	ldr	r2, [pc, #564]	; (8015720 <rfalSetBitRate+0x260>)
 80154ec:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 80154ee:	79bb      	ldrb	r3, [r7, #6]
 80154f0:	2bff      	cmp	r3, #255	; 0xff
 80154f2:	d102      	bne.n	80154fa <rfalSetBitRate+0x3a>
 80154f4:	4b8a      	ldr	r3, [pc, #552]	; (8015720 <rfalSetBitRate+0x260>)
 80154f6:	78db      	ldrb	r3, [r3, #3]
 80154f8:	e000      	b.n	80154fc <rfalSetBitRate+0x3c>
 80154fa:	79bb      	ldrb	r3, [r7, #6]
 80154fc:	4a88      	ldr	r2, [pc, #544]	; (8015720 <rfalSetBitRate+0x260>)
 80154fe:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 8015500:	4b87      	ldr	r3, [pc, #540]	; (8015720 <rfalSetBitRate+0x260>)
 8015502:	785b      	ldrb	r3, [r3, #1]
 8015504:	2b07      	cmp	r3, #7
 8015506:	d012      	beq.n	801552e <rfalSetBitRate+0x6e>
 8015508:	4b85      	ldr	r3, [pc, #532]	; (8015720 <rfalSetBitRate+0x260>)
 801550a:	785b      	ldrb	r3, [r3, #1]
 801550c:	2b08      	cmp	r3, #8
 801550e:	d00e      	beq.n	801552e <rfalSetBitRate+0x6e>
    {
        EXIT_ON_ERR( ret, st25r3911SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 8015510:	4b83      	ldr	r3, [pc, #524]	; (8015720 <rfalSetBitRate+0x260>)
 8015512:	789b      	ldrb	r3, [r3, #2]
 8015514:	4a82      	ldr	r2, [pc, #520]	; (8015720 <rfalSetBitRate+0x260>)
 8015516:	78d2      	ldrb	r2, [r2, #3]
 8015518:	4611      	mov	r1, r2
 801551a:	4618      	mov	r0, r3
 801551c:	f7ed fe40 	bl	80031a0 <st25r3911SetBitrate>
 8015520:	4603      	mov	r3, r0
 8015522:	83fb      	strh	r3, [r7, #30]
 8015524:	8bfb      	ldrh	r3, [r7, #30]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d001      	beq.n	801552e <rfalSetBitRate+0x6e>
 801552a:	8bfb      	ldrh	r3, [r7, #30]
 801552c:	e221      	b.n	8015972 <rfalSetBitRate+0x4b2>
    }
    
    
    switch( gRFAL.mode )
 801552e:	4b7c      	ldr	r3, [pc, #496]	; (8015720 <rfalSetBitRate+0x260>)
 8015530:	785b      	ldrb	r3, [r3, #1]
 8015532:	2b0d      	cmp	r3, #13
 8015534:	f200 821a 	bhi.w	801596c <rfalSetBitRate+0x4ac>
 8015538:	a201      	add	r2, pc, #4	; (adr r2, 8015540 <rfalSetBitRate+0x80>)
 801553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801553e:	bf00      	nop
 8015540:	08015969 	.word	0x08015969
 8015544:	08015579 	.word	0x08015579
 8015548:	08015579 	.word	0x08015579
 801554c:	08015601 	.word	0x08015601
 8015550:	08015601 	.word	0x08015601
 8015554:	08015601 	.word	0x08015601
 8015558:	08015691 	.word	0x08015691
 801555c:	08015725 	.word	0x08015725
 8015560:	08015725 	.word	0x08015725
 8015564:	08015859 	.word	0x08015859
 8015568:	08015969 	.word	0x08015969
 801556c:	08015969 	.word	0x08015969
 8015570:	08015969 	.word	0x08015969
 8015574:	080158e9 	.word	0x080158e9
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8015578:	2008      	movs	r0, #8
 801557a:	f7f7 fd81 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 801557e:	4b68      	ldr	r3, [pc, #416]	; (8015720 <rfalSetBitRate+0x260>)
 8015580:	789b      	ldrb	r3, [r3, #2]
 8015582:	2bea      	cmp	r3, #234	; 0xea
 8015584:	d90c      	bls.n	80155a0 <rfalSetBitRate+0xe0>
 8015586:	4b66      	ldr	r3, [pc, #408]	; (8015720 <rfalSetBitRate+0x260>)
 8015588:	789b      	ldrb	r3, [r3, #2]
 801558a:	b29b      	uxth	r3, r3
 801558c:	011b      	lsls	r3, r3, #4
 801558e:	b29b      	uxth	r3, r3
 8015590:	b2db      	uxtb	r3, r3
 8015592:	b29b      	uxth	r3, r3
 8015594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015598:	f043 0301 	orr.w	r3, r3, #1
 801559c:	b29b      	uxth	r3, r3
 801559e:	e00d      	b.n	80155bc <rfalSetBitRate+0xfc>
 80155a0:	4b5f      	ldr	r3, [pc, #380]	; (8015720 <rfalSetBitRate+0x260>)
 80155a2:	789b      	ldrb	r3, [r3, #2]
 80155a4:	b29b      	uxth	r3, r3
 80155a6:	3301      	adds	r3, #1
 80155a8:	b29b      	uxth	r3, r3
 80155aa:	011b      	lsls	r3, r3, #4
 80155ac:	b29b      	uxth	r3, r3
 80155ae:	b2db      	uxtb	r3, r3
 80155b0:	b29b      	uxth	r3, r3
 80155b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80155b6:	f043 0301 	orr.w	r3, r3, #1
 80155ba:	b29b      	uxth	r3, r3
 80155bc:	4618      	mov	r0, r3
 80155be:	f7f7 fd5f 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80155c2:	4b57      	ldr	r3, [pc, #348]	; (8015720 <rfalSetBitRate+0x260>)
 80155c4:	78db      	ldrb	r3, [r3, #3]
 80155c6:	2bea      	cmp	r3, #234	; 0xea
 80155c8:	d90a      	bls.n	80155e0 <rfalSetBitRate+0x120>
 80155ca:	4b55      	ldr	r3, [pc, #340]	; (8015720 <rfalSetBitRate+0x260>)
 80155cc:	78db      	ldrb	r3, [r3, #3]
 80155ce:	b29b      	uxth	r3, r3
 80155d0:	011b      	lsls	r3, r3, #4
 80155d2:	b29b      	uxth	r3, r3
 80155d4:	b2db      	uxtb	r3, r3
 80155d6:	b29b      	uxth	r3, r3
 80155d8:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80155dc:	b29b      	uxth	r3, r3
 80155de:	e00b      	b.n	80155f8 <rfalSetBitRate+0x138>
 80155e0:	4b4f      	ldr	r3, [pc, #316]	; (8015720 <rfalSetBitRate+0x260>)
 80155e2:	78db      	ldrb	r3, [r3, #3]
 80155e4:	b29b      	uxth	r3, r3
 80155e6:	3301      	adds	r3, #1
 80155e8:	b29b      	uxth	r3, r3
 80155ea:	011b      	lsls	r3, r3, #4
 80155ec:	b29b      	uxth	r3, r3
 80155ee:	b2db      	uxtb	r3, r3
 80155f0:	b29b      	uxth	r3, r3
 80155f2:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80155f6:	b29b      	uxth	r3, r3
 80155f8:	4618      	mov	r0, r3
 80155fa:	f7f7 fd41 	bl	800d080 <rfalSetAnalogConfig>
            break;
 80155fe:	e1b7      	b.n	8015970 <rfalSetBitRate+0x4b0>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8015600:	2008      	movs	r0, #8
 8015602:	f7f7 fd3d 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8015606:	4b46      	ldr	r3, [pc, #280]	; (8015720 <rfalSetBitRate+0x260>)
 8015608:	789b      	ldrb	r3, [r3, #2]
 801560a:	2bea      	cmp	r3, #234	; 0xea
 801560c:	d90c      	bls.n	8015628 <rfalSetBitRate+0x168>
 801560e:	4b44      	ldr	r3, [pc, #272]	; (8015720 <rfalSetBitRate+0x260>)
 8015610:	789b      	ldrb	r3, [r3, #2]
 8015612:	b29b      	uxth	r3, r3
 8015614:	011b      	lsls	r3, r3, #4
 8015616:	b29b      	uxth	r3, r3
 8015618:	b2db      	uxtb	r3, r3
 801561a:	b29b      	uxth	r3, r3
 801561c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015620:	f043 0301 	orr.w	r3, r3, #1
 8015624:	b29b      	uxth	r3, r3
 8015626:	e00d      	b.n	8015644 <rfalSetBitRate+0x184>
 8015628:	4b3d      	ldr	r3, [pc, #244]	; (8015720 <rfalSetBitRate+0x260>)
 801562a:	789b      	ldrb	r3, [r3, #2]
 801562c:	b29b      	uxth	r3, r3
 801562e:	3301      	adds	r3, #1
 8015630:	b29b      	uxth	r3, r3
 8015632:	011b      	lsls	r3, r3, #4
 8015634:	b29b      	uxth	r3, r3
 8015636:	b2db      	uxtb	r3, r3
 8015638:	b29b      	uxth	r3, r3
 801563a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801563e:	f043 0301 	orr.w	r3, r3, #1
 8015642:	b29b      	uxth	r3, r3
 8015644:	4618      	mov	r0, r3
 8015646:	f7f7 fd1b 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 801564a:	4b35      	ldr	r3, [pc, #212]	; (8015720 <rfalSetBitRate+0x260>)
 801564c:	78db      	ldrb	r3, [r3, #3]
 801564e:	2bea      	cmp	r3, #234	; 0xea
 8015650:	d90c      	bls.n	801566c <rfalSetBitRate+0x1ac>
 8015652:	4b33      	ldr	r3, [pc, #204]	; (8015720 <rfalSetBitRate+0x260>)
 8015654:	78db      	ldrb	r3, [r3, #3]
 8015656:	b29b      	uxth	r3, r3
 8015658:	011b      	lsls	r3, r3, #4
 801565a:	b29b      	uxth	r3, r3
 801565c:	b2db      	uxtb	r3, r3
 801565e:	b29b      	uxth	r3, r3
 8015660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015664:	f043 0302 	orr.w	r3, r3, #2
 8015668:	b29b      	uxth	r3, r3
 801566a:	e00d      	b.n	8015688 <rfalSetBitRate+0x1c8>
 801566c:	4b2c      	ldr	r3, [pc, #176]	; (8015720 <rfalSetBitRate+0x260>)
 801566e:	78db      	ldrb	r3, [r3, #3]
 8015670:	b29b      	uxth	r3, r3
 8015672:	3301      	adds	r3, #1
 8015674:	b29b      	uxth	r3, r3
 8015676:	011b      	lsls	r3, r3, #4
 8015678:	b29b      	uxth	r3, r3
 801567a:	b2db      	uxtb	r3, r3
 801567c:	b29b      	uxth	r3, r3
 801567e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015682:	f043 0302 	orr.w	r3, r3, #2
 8015686:	b29b      	uxth	r3, r3
 8015688:	4618      	mov	r0, r3
 801568a:	f7f7 fcf9 	bl	800d080 <rfalSetAnalogConfig>
            break;
 801568e:	e16f      	b.n	8015970 <rfalSetBitRate+0x4b0>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8015690:	2008      	movs	r0, #8
 8015692:	f7f7 fcf5 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8015696:	4b22      	ldr	r3, [pc, #136]	; (8015720 <rfalSetBitRate+0x260>)
 8015698:	789b      	ldrb	r3, [r3, #2]
 801569a:	2bea      	cmp	r3, #234	; 0xea
 801569c:	d90c      	bls.n	80156b8 <rfalSetBitRate+0x1f8>
 801569e:	4b20      	ldr	r3, [pc, #128]	; (8015720 <rfalSetBitRate+0x260>)
 80156a0:	789b      	ldrb	r3, [r3, #2]
 80156a2:	b29b      	uxth	r3, r3
 80156a4:	011b      	lsls	r3, r3, #4
 80156a6:	b29b      	uxth	r3, r3
 80156a8:	b2db      	uxtb	r3, r3
 80156aa:	b29b      	uxth	r3, r3
 80156ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80156b0:	f043 0301 	orr.w	r3, r3, #1
 80156b4:	b29b      	uxth	r3, r3
 80156b6:	e00d      	b.n	80156d4 <rfalSetBitRate+0x214>
 80156b8:	4b19      	ldr	r3, [pc, #100]	; (8015720 <rfalSetBitRate+0x260>)
 80156ba:	789b      	ldrb	r3, [r3, #2]
 80156bc:	b29b      	uxth	r3, r3
 80156be:	3301      	adds	r3, #1
 80156c0:	b29b      	uxth	r3, r3
 80156c2:	011b      	lsls	r3, r3, #4
 80156c4:	b29b      	uxth	r3, r3
 80156c6:	b2db      	uxtb	r3, r3
 80156c8:	b29b      	uxth	r3, r3
 80156ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80156ce:	f043 0301 	orr.w	r3, r3, #1
 80156d2:	b29b      	uxth	r3, r3
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7f7 fcd3 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80156da:	4b11      	ldr	r3, [pc, #68]	; (8015720 <rfalSetBitRate+0x260>)
 80156dc:	78db      	ldrb	r3, [r3, #3]
 80156de:	2bea      	cmp	r3, #234	; 0xea
 80156e0:	d90c      	bls.n	80156fc <rfalSetBitRate+0x23c>
 80156e2:	4b0f      	ldr	r3, [pc, #60]	; (8015720 <rfalSetBitRate+0x260>)
 80156e4:	78db      	ldrb	r3, [r3, #3]
 80156e6:	b29b      	uxth	r3, r3
 80156e8:	011b      	lsls	r3, r3, #4
 80156ea:	b29b      	uxth	r3, r3
 80156ec:	b2db      	uxtb	r3, r3
 80156ee:	b29b      	uxth	r3, r3
 80156f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80156f4:	f043 0302 	orr.w	r3, r3, #2
 80156f8:	b29b      	uxth	r3, r3
 80156fa:	e00d      	b.n	8015718 <rfalSetBitRate+0x258>
 80156fc:	4b08      	ldr	r3, [pc, #32]	; (8015720 <rfalSetBitRate+0x260>)
 80156fe:	78db      	ldrb	r3, [r3, #3]
 8015700:	b29b      	uxth	r3, r3
 8015702:	3301      	adds	r3, #1
 8015704:	b29b      	uxth	r3, r3
 8015706:	011b      	lsls	r3, r3, #4
 8015708:	b29b      	uxth	r3, r3
 801570a:	b2db      	uxtb	r3, r3
 801570c:	b29b      	uxth	r3, r3
 801570e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015712:	f043 0302 	orr.w	r3, r3, #2
 8015716:	b29b      	uxth	r3, r3
 8015718:	4618      	mov	r0, r3
 801571a:	f7f7 fcb1 	bl	800d080 <rfalSetAnalogConfig>
            break;
 801571e:	e127      	b.n	8015970 <rfalSetBitRate+0x4b0>
 8015720:	2000393c 	.word	0x2000393c
        
           #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
           #else
               
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 8015724:	4b95      	ldr	r3, [pc, #596]	; (801597c <rfalSetBitRate+0x4bc>)
 8015726:	78db      	ldrb	r3, [r3, #3]
 8015728:	2bec      	cmp	r3, #236	; 0xec
 801572a:	d00b      	beq.n	8015744 <rfalSetBitRate+0x284>
 801572c:	4b93      	ldr	r3, [pc, #588]	; (801597c <rfalSetBitRate+0x4bc>)
 801572e:	78db      	ldrb	r3, [r3, #3]
 8015730:	2beb      	cmp	r3, #235	; 0xeb
 8015732:	d007      	beq.n	8015744 <rfalSetBitRate+0x284>
 8015734:	4b91      	ldr	r3, [pc, #580]	; (801597c <rfalSetBitRate+0x4bc>)
 8015736:	78db      	ldrb	r3, [r3, #3]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d003      	beq.n	8015744 <rfalSetBitRate+0x284>
 801573c:	4b8f      	ldr	r3, [pc, #572]	; (801597c <rfalSetBitRate+0x4bc>)
 801573e:	78db      	ldrb	r3, [r3, #3]
 8015740:	2b01      	cmp	r3, #1
 8015742:	d107      	bne.n	8015754 <rfalSetBitRate+0x294>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 8015744:	4b8d      	ldr	r3, [pc, #564]	; (801597c <rfalSetBitRate+0x4bc>)
 8015746:	789b      	ldrb	r3, [r3, #2]
 8015748:	2bed      	cmp	r3, #237	; 0xed
 801574a:	d005      	beq.n	8015758 <rfalSetBitRate+0x298>
 801574c:	4b8b      	ldr	r3, [pc, #556]	; (801597c <rfalSetBitRate+0x4bc>)
 801574e:	789b      	ldrb	r3, [r3, #2]
 8015750:	2bec      	cmp	r3, #236	; 0xec
 8015752:	d001      	beq.n	8015758 <rfalSetBitRate+0x298>
                {
                    return ERR_PARAM;
 8015754:	2307      	movs	r3, #7
 8015756:	e10c      	b.n	8015972 <rfalSetBitRate+0x4b2>
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3911StreamConfig      streamConf;
                    iso15693PhyConfig_t               config;
                    
                    /* Set the coding configuration for configuring ISO15693 */
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 8015758:	4b88      	ldr	r3, [pc, #544]	; (801597c <rfalSetBitRate+0x4bc>)
 801575a:	789b      	ldrb	r3, [r3, #2]
 801575c:	2bed      	cmp	r3, #237	; 0xed
 801575e:	bf0c      	ite	eq
 8015760:	2301      	moveq	r3, #1
 8015762:	2300      	movne	r3, #0
 8015764:	b2db      	uxtb	r3, r3
 8015766:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 8015768:	4b84      	ldr	r3, [pc, #528]	; (801597c <rfalSetBitRate+0x4bc>)
 801576a:	78db      	ldrb	r3, [r3, #3]
 801576c:	2beb      	cmp	r3, #235	; 0xeb
 801576e:	d006      	beq.n	801577e <rfalSetBitRate+0x2be>
 8015770:	2beb      	cmp	r3, #235	; 0xeb
 8015772:	dc0d      	bgt.n	8015790 <rfalSetBitRate+0x2d0>
 8015774:	2b00      	cmp	r3, #0
 8015776:	d005      	beq.n	8015784 <rfalSetBitRate+0x2c4>
 8015778:	2b01      	cmp	r3, #1
 801577a:	d006      	beq.n	801578a <rfalSetBitRate+0x2ca>
 801577c:	e008      	b.n	8015790 <rfalSetBitRate+0x2d0>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 801577e:	2301      	movs	r3, #1
 8015780:	613b      	str	r3, [r7, #16]
                            break;
 8015782:	e008      	b.n	8015796 <rfalSetBitRate+0x2d6>
                        case RFAL_BR_106:
                            config.speedMode = 2;
 8015784:	2302      	movs	r3, #2
 8015786:	613b      	str	r3, [r7, #16]
                            break;
 8015788:	e005      	b.n	8015796 <rfalSetBitRate+0x2d6>
                        case RFAL_BR_212:
                            config.speedMode = 3;
 801578a:	2303      	movs	r3, #3
 801578c:	613b      	str	r3, [r7, #16]
                            break;
 801578e:	e002      	b.n	8015796 <rfalSetBitRate+0x2d6>
                        default:
                            config.speedMode = 0;
 8015790:	2300      	movs	r3, #0
 8015792:	613b      	str	r3, [r7, #16]
                            break;
 8015794:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);   /* Convert ISO15693 config into StreamConfig */
 8015796:	f107 0218 	add.w	r2, r7, #24
 801579a:	f107 030c 	add.w	r3, r7, #12
 801579e:	4611      	mov	r1, r2
 80157a0:	4618      	mov	r0, r3
 80157a2:	f7f7 fdc9 	bl	800d338 <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 80157a6:	69bb      	ldr	r3, [r7, #24]
 80157a8:	785b      	ldrb	r3, [r3, #1]
 80157aa:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 80157ac:	69bb      	ldr	r3, [r7, #24]
 80157ae:	789b      	ldrb	r3, [r3, #2]
 80157b0:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 80157b2:	69bb      	ldr	r3, [r7, #24]
 80157b4:	78db      	ldrb	r3, [r3, #3]
 80157b6:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 80157b8:	69bb      	ldr	r3, [r7, #24]
 80157ba:	781b      	ldrb	r3, [r3, #0]
 80157bc:	753b      	strb	r3, [r7, #20]
                    st25r3911StreamConfigure(&streamConf);
 80157be:	f107 0314 	add.w	r3, r7, #20
 80157c2:	4618      	mov	r0, r3
 80157c4:	f7ed feac 	bl	8003520 <st25r3911StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 80157c8:	2008      	movs	r0, #8
 80157ca:	f7f7 fc59 	bl	800d080 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80157ce:	4b6b      	ldr	r3, [pc, #428]	; (801597c <rfalSetBitRate+0x4bc>)
 80157d0:	789b      	ldrb	r3, [r3, #2]
 80157d2:	2bea      	cmp	r3, #234	; 0xea
 80157d4:	d90c      	bls.n	80157f0 <rfalSetBitRate+0x330>
 80157d6:	4b69      	ldr	r3, [pc, #420]	; (801597c <rfalSetBitRate+0x4bc>)
 80157d8:	789b      	ldrb	r3, [r3, #2]
 80157da:	b29b      	uxth	r3, r3
 80157dc:	011b      	lsls	r3, r3, #4
 80157de:	b29b      	uxth	r3, r3
 80157e0:	b2db      	uxtb	r3, r3
 80157e2:	b29b      	uxth	r3, r3
 80157e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80157e8:	f043 0301 	orr.w	r3, r3, #1
 80157ec:	b29b      	uxth	r3, r3
 80157ee:	e00d      	b.n	801580c <rfalSetBitRate+0x34c>
 80157f0:	4b62      	ldr	r3, [pc, #392]	; (801597c <rfalSetBitRate+0x4bc>)
 80157f2:	789b      	ldrb	r3, [r3, #2]
 80157f4:	b29b      	uxth	r3, r3
 80157f6:	3301      	adds	r3, #1
 80157f8:	b29b      	uxth	r3, r3
 80157fa:	011b      	lsls	r3, r3, #4
 80157fc:	b29b      	uxth	r3, r3
 80157fe:	b2db      	uxtb	r3, r3
 8015800:	b29b      	uxth	r3, r3
 8015802:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015806:	f043 0301 	orr.w	r3, r3, #1
 801580a:	b29b      	uxth	r3, r3
 801580c:	4618      	mov	r0, r3
 801580e:	f7f7 fc37 	bl	800d080 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8015812:	4b5a      	ldr	r3, [pc, #360]	; (801597c <rfalSetBitRate+0x4bc>)
 8015814:	78db      	ldrb	r3, [r3, #3]
 8015816:	2bea      	cmp	r3, #234	; 0xea
 8015818:	d90c      	bls.n	8015834 <rfalSetBitRate+0x374>
 801581a:	4b58      	ldr	r3, [pc, #352]	; (801597c <rfalSetBitRate+0x4bc>)
 801581c:	78db      	ldrb	r3, [r3, #3]
 801581e:	b29b      	uxth	r3, r3
 8015820:	011b      	lsls	r3, r3, #4
 8015822:	b29b      	uxth	r3, r3
 8015824:	b2db      	uxtb	r3, r3
 8015826:	b29b      	uxth	r3, r3
 8015828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801582c:	f043 0302 	orr.w	r3, r3, #2
 8015830:	b29b      	uxth	r3, r3
 8015832:	e00d      	b.n	8015850 <rfalSetBitRate+0x390>
 8015834:	4b51      	ldr	r3, [pc, #324]	; (801597c <rfalSetBitRate+0x4bc>)
 8015836:	78db      	ldrb	r3, [r3, #3]
 8015838:	b29b      	uxth	r3, r3
 801583a:	3301      	adds	r3, #1
 801583c:	b29b      	uxth	r3, r3
 801583e:	011b      	lsls	r3, r3, #4
 8015840:	b29b      	uxth	r3, r3
 8015842:	b2db      	uxtb	r3, r3
 8015844:	b29b      	uxth	r3, r3
 8015846:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801584a:	f043 0302 	orr.w	r3, r3, #2
 801584e:	b29b      	uxth	r3, r3
 8015850:	4618      	mov	r0, r3
 8015852:	f7f7 fc15 	bl	800d080 <rfalSetAnalogConfig>
                break;
 8015856:	e08b      	b.n	8015970 <rfalSetBitRate+0x4b0>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8015858:	2008      	movs	r0, #8
 801585a:	f7f7 fc11 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 801585e:	4b47      	ldr	r3, [pc, #284]	; (801597c <rfalSetBitRate+0x4bc>)
 8015860:	789b      	ldrb	r3, [r3, #2]
 8015862:	2bea      	cmp	r3, #234	; 0xea
 8015864:	d90c      	bls.n	8015880 <rfalSetBitRate+0x3c0>
 8015866:	4b45      	ldr	r3, [pc, #276]	; (801597c <rfalSetBitRate+0x4bc>)
 8015868:	789b      	ldrb	r3, [r3, #2]
 801586a:	b29b      	uxth	r3, r3
 801586c:	011b      	lsls	r3, r3, #4
 801586e:	b29b      	uxth	r3, r3
 8015870:	b2db      	uxtb	r3, r3
 8015872:	b29b      	uxth	r3, r3
 8015874:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015878:	f043 0301 	orr.w	r3, r3, #1
 801587c:	b29b      	uxth	r3, r3
 801587e:	e00d      	b.n	801589c <rfalSetBitRate+0x3dc>
 8015880:	4b3e      	ldr	r3, [pc, #248]	; (801597c <rfalSetBitRate+0x4bc>)
 8015882:	789b      	ldrb	r3, [r3, #2]
 8015884:	b29b      	uxth	r3, r3
 8015886:	3301      	adds	r3, #1
 8015888:	b29b      	uxth	r3, r3
 801588a:	011b      	lsls	r3, r3, #4
 801588c:	b29b      	uxth	r3, r3
 801588e:	b2db      	uxtb	r3, r3
 8015890:	b29b      	uxth	r3, r3
 8015892:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015896:	f043 0301 	orr.w	r3, r3, #1
 801589a:	b29b      	uxth	r3, r3
 801589c:	4618      	mov	r0, r3
 801589e:	f7f7 fbef 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80158a2:	4b36      	ldr	r3, [pc, #216]	; (801597c <rfalSetBitRate+0x4bc>)
 80158a4:	78db      	ldrb	r3, [r3, #3]
 80158a6:	2bea      	cmp	r3, #234	; 0xea
 80158a8:	d90c      	bls.n	80158c4 <rfalSetBitRate+0x404>
 80158aa:	4b34      	ldr	r3, [pc, #208]	; (801597c <rfalSetBitRate+0x4bc>)
 80158ac:	78db      	ldrb	r3, [r3, #3]
 80158ae:	b29b      	uxth	r3, r3
 80158b0:	011b      	lsls	r3, r3, #4
 80158b2:	b29b      	uxth	r3, r3
 80158b4:	b2db      	uxtb	r3, r3
 80158b6:	b29b      	uxth	r3, r3
 80158b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80158bc:	f043 0302 	orr.w	r3, r3, #2
 80158c0:	b29b      	uxth	r3, r3
 80158c2:	e00d      	b.n	80158e0 <rfalSetBitRate+0x420>
 80158c4:	4b2d      	ldr	r3, [pc, #180]	; (801597c <rfalSetBitRate+0x4bc>)
 80158c6:	78db      	ldrb	r3, [r3, #3]
 80158c8:	b29b      	uxth	r3, r3
 80158ca:	3301      	adds	r3, #1
 80158cc:	b29b      	uxth	r3, r3
 80158ce:	011b      	lsls	r3, r3, #4
 80158d0:	b29b      	uxth	r3, r3
 80158d2:	b2db      	uxtb	r3, r3
 80158d4:	b29b      	uxth	r3, r3
 80158d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80158da:	f043 0302 	orr.w	r3, r3, #2
 80158de:	b29b      	uxth	r3, r3
 80158e0:	4618      	mov	r0, r3
 80158e2:	f7f7 fbcd 	bl	800d080 <rfalSetAnalogConfig>
            break;
 80158e6:	e043      	b.n	8015970 <rfalSetBitRate+0x4b0>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 80158e8:	2009      	movs	r0, #9
 80158ea:	f7f7 fbc9 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80158ee:	4b23      	ldr	r3, [pc, #140]	; (801597c <rfalSetBitRate+0x4bc>)
 80158f0:	789b      	ldrb	r3, [r3, #2]
 80158f2:	2bea      	cmp	r3, #234	; 0xea
 80158f4:	d90a      	bls.n	801590c <rfalSetBitRate+0x44c>
 80158f6:	4b21      	ldr	r3, [pc, #132]	; (801597c <rfalSetBitRate+0x4bc>)
 80158f8:	789b      	ldrb	r3, [r3, #2]
 80158fa:	b29b      	uxth	r3, r3
 80158fc:	011b      	lsls	r3, r3, #4
 80158fe:	b29b      	uxth	r3, r3
 8015900:	b2db      	uxtb	r3, r3
 8015902:	b29a      	uxth	r2, r3
 8015904:	4b1e      	ldr	r3, [pc, #120]	; (8015980 <rfalSetBitRate+0x4c0>)
 8015906:	4313      	orrs	r3, r2
 8015908:	b29b      	uxth	r3, r3
 801590a:	e00b      	b.n	8015924 <rfalSetBitRate+0x464>
 801590c:	4b1b      	ldr	r3, [pc, #108]	; (801597c <rfalSetBitRate+0x4bc>)
 801590e:	789b      	ldrb	r3, [r3, #2]
 8015910:	b29b      	uxth	r3, r3
 8015912:	3301      	adds	r3, #1
 8015914:	b29b      	uxth	r3, r3
 8015916:	011b      	lsls	r3, r3, #4
 8015918:	b29b      	uxth	r3, r3
 801591a:	b2db      	uxtb	r3, r3
 801591c:	b29a      	uxth	r2, r3
 801591e:	4b18      	ldr	r3, [pc, #96]	; (8015980 <rfalSetBitRate+0x4c0>)
 8015920:	4313      	orrs	r3, r2
 8015922:	b29b      	uxth	r3, r3
 8015924:	4618      	mov	r0, r3
 8015926:	f7f7 fbab 	bl	800d080 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 801592a:	4b14      	ldr	r3, [pc, #80]	; (801597c <rfalSetBitRate+0x4bc>)
 801592c:	78db      	ldrb	r3, [r3, #3]
 801592e:	2bea      	cmp	r3, #234	; 0xea
 8015930:	d90a      	bls.n	8015948 <rfalSetBitRate+0x488>
 8015932:	4b12      	ldr	r3, [pc, #72]	; (801597c <rfalSetBitRate+0x4bc>)
 8015934:	78db      	ldrb	r3, [r3, #3]
 8015936:	b29b      	uxth	r3, r3
 8015938:	011b      	lsls	r3, r3, #4
 801593a:	b29b      	uxth	r3, r3
 801593c:	b2db      	uxtb	r3, r3
 801593e:	b29a      	uxth	r2, r3
 8015940:	4b10      	ldr	r3, [pc, #64]	; (8015984 <rfalSetBitRate+0x4c4>)
 8015942:	4313      	orrs	r3, r2
 8015944:	b29b      	uxth	r3, r3
 8015946:	e00b      	b.n	8015960 <rfalSetBitRate+0x4a0>
 8015948:	4b0c      	ldr	r3, [pc, #48]	; (801597c <rfalSetBitRate+0x4bc>)
 801594a:	78db      	ldrb	r3, [r3, #3]
 801594c:	b29b      	uxth	r3, r3
 801594e:	3301      	adds	r3, #1
 8015950:	b29b      	uxth	r3, r3
 8015952:	011b      	lsls	r3, r3, #4
 8015954:	b29b      	uxth	r3, r3
 8015956:	b2db      	uxtb	r3, r3
 8015958:	b29a      	uxth	r2, r3
 801595a:	4b0a      	ldr	r3, [pc, #40]	; (8015984 <rfalSetBitRate+0x4c4>)
 801595c:	4313      	orrs	r3, r2
 801595e:	b29b      	uxth	r3, r3
 8015960:	4618      	mov	r0, r3
 8015962:	f7f7 fb8d 	bl	800d080 <rfalSetAnalogConfig>
            break;
 8015966:	e003      	b.n	8015970 <rfalSetBitRate+0x4b0>
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 8015968:	2321      	movs	r3, #33	; 0x21
 801596a:	e002      	b.n	8015972 <rfalSetBitRate+0x4b2>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 801596c:	230f      	movs	r3, #15
 801596e:	e000      	b.n	8015972 <rfalSetBitRate+0x4b2>
    }
    
    return ERR_NONE;
 8015970:	2300      	movs	r3, #0
}
 8015972:	4618      	mov	r0, r3
 8015974:	3720      	adds	r7, #32
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}
 801597a:	bf00      	nop
 801597c:	2000393c 	.word	0x2000393c
 8015980:	ffff8801 	.word	0xffff8801
 8015984:	ffff8802 	.word	0xffff8802

08015988 <rfalGetBitRate>:


/*******************************************************************************/
ReturnCode rfalGetBitRate( rfalBitRate *txBR, rfalBitRate *rxBR )
{
 8015988:	b480      	push	{r7}
 801598a:	b083      	sub	sp, #12
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
 8015990:	6039      	str	r1, [r7, #0]
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 8015992:	4b0f      	ldr	r3, [pc, #60]	; (80159d0 <rfalGetBitRate+0x48>)
 8015994:	781b      	ldrb	r3, [r3, #0]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d003      	beq.n	80159a2 <rfalGetBitRate+0x1a>
 801599a:	4b0d      	ldr	r3, [pc, #52]	; (80159d0 <rfalGetBitRate+0x48>)
 801599c:	785b      	ldrb	r3, [r3, #1]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d101      	bne.n	80159a6 <rfalGetBitRate+0x1e>
    {
        return ERR_WRONG_STATE;
 80159a2:	2321      	movs	r3, #33	; 0x21
 80159a4:	e00e      	b.n	80159c4 <rfalGetBitRate+0x3c>
    }
    
    if( txBR != NULL )
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d003      	beq.n	80159b4 <rfalGetBitRate+0x2c>
    {
        *txBR = gRFAL.txBR;
 80159ac:	4b08      	ldr	r3, [pc, #32]	; (80159d0 <rfalGetBitRate+0x48>)
 80159ae:	789a      	ldrb	r2, [r3, #2]
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	701a      	strb	r2, [r3, #0]
    }
    
    if( rxBR != NULL )
 80159b4:	683b      	ldr	r3, [r7, #0]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d003      	beq.n	80159c2 <rfalGetBitRate+0x3a>
    {
        *rxBR = gRFAL.rxBR;
 80159ba:	4b05      	ldr	r3, [pc, #20]	; (80159d0 <rfalGetBitRate+0x48>)
 80159bc:	78da      	ldrb	r2, [r3, #3]
 80159be:	683b      	ldr	r3, [r7, #0]
 80159c0:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 80159c2:	2300      	movs	r3, #0
}
 80159c4:	4618      	mov	r0, r3
 80159c6:	370c      	adds	r7, #12
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bc80      	pop	{r7}
 80159cc:	4770      	bx	lr
 80159ce:	bf00      	nop
 80159d0:	2000393c 	.word	0x2000393c

080159d4 <rfalSetErrorHandling>:


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 80159d4:	b480      	push	{r7}
 80159d6:	b083      	sub	sp, #12
 80159d8:	af00      	add	r7, sp, #0
 80159da:	4603      	mov	r3, r0
 80159dc:	71fb      	strb	r3, [r7, #7]
    gRFAL.conf.eHandling = eHandling;
 80159de:	4a04      	ldr	r2, [pc, #16]	; (80159f0 <rfalSetErrorHandling+0x1c>)
 80159e0:	79fb      	ldrb	r3, [r7, #7]
 80159e2:	71d3      	strb	r3, [r2, #7]
}
 80159e4:	bf00      	nop
 80159e6:	370c      	adds	r7, #12
 80159e8:	46bd      	mov	sp, r7
 80159ea:	bc80      	pop	{r7}
 80159ec:	4770      	bx	lr
 80159ee:	bf00      	nop
 80159f0:	2000393c 	.word	0x2000393c

080159f4 <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 80159f4:	b480      	push	{r7}
 80159f6:	b083      	sub	sp, #12
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3911_GPT_MAX_1FC );
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	4a05      	ldr	r2, [pc, #20]	; (8015a14 <rfalSetFDTPoll+0x20>)
 8015a00:	4293      	cmp	r3, r2
 8015a02:	bf28      	it	cs
 8015a04:	4613      	movcs	r3, r2
 8015a06:	4a04      	ldr	r2, [pc, #16]	; (8015a18 <rfalSetFDTPoll+0x24>)
 8015a08:	6113      	str	r3, [r2, #16]
}
 8015a0a:	bf00      	nop
 8015a0c:	370c      	adds	r7, #12
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bc80      	pop	{r7}
 8015a12:	4770      	bx	lr
 8015a14:	0007fff8 	.word	0x0007fff8
 8015a18:	2000393c 	.word	0x2000393c

08015a1c <rfalSetFDTListen>:
}


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 8015a1c:	b480      	push	{r7}
 8015a1e:	b083      	sub	sp, #12
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3911_MRT_MAX_1FC);
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 8015a2a:	bf28      	it	cs
 8015a2c:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 8015a30:	4a03      	ldr	r2, [pc, #12]	; (8015a40 <rfalSetFDTListen+0x24>)
 8015a32:	60d3      	str	r3, [r2, #12]
}
 8015a34:	bf00      	nop
 8015a36:	370c      	adds	r7, #12
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bc80      	pop	{r7}
 8015a3c:	4770      	bx	lr
 8015a3e:	bf00      	nop
 8015a40:	2000393c 	.word	0x2000393c

08015a44 <rfalSetGT>:
{
    return gRFAL.timings.FDTListen;
}

void rfalSetGT( uint32_t GT )
{
 8015a44:	b480      	push	{r7}
 8015a46:	b083      	sub	sp, #12
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3911_GT_MAX_1FC );
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	4a05      	ldr	r2, [pc, #20]	; (8015a64 <rfalSetGT+0x20>)
 8015a50:	4293      	cmp	r3, r2
 8015a52:	bf28      	it	cs
 8015a54:	4613      	movcs	r3, r2
 8015a56:	4a04      	ldr	r2, [pc, #16]	; (8015a68 <rfalSetGT+0x24>)
 8015a58:	6093      	str	r3, [r2, #8]
}
 8015a5a:	bf00      	nop
 8015a5c:	370c      	adds	r7, #12
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	bc80      	pop	{r7}
 8015a62:	4770      	bx	lr
 8015a64:	040a8bc0 	.word	0x040a8bc0
 8015a68:	2000393c 	.word	0x2000393c

08015a6c <rfalIsGTExpired>:
    return gRFAL.timings.GT;
}

/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 8015a70:	4b09      	ldr	r3, [pc, #36]	; (8015a98 <rfalIsGTExpired+0x2c>)
 8015a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d00c      	beq.n	8015a92 <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 8015a78:	4b07      	ldr	r3, [pc, #28]	; (8015a98 <rfalIsGTExpired+0x2c>)
 8015a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f7ee fb99 	bl	80041b4 <timerIsExpired>
 8015a82:	4603      	mov	r3, r0
 8015a84:	f083 0301 	eor.w	r3, r3, #1
 8015a88:	b2db      	uxtb	r3, r3
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d001      	beq.n	8015a92 <rfalIsGTExpired+0x26>
        {
            return false;
 8015a8e:	2300      	movs	r3, #0
 8015a90:	e000      	b.n	8015a94 <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 8015a92:	2301      	movs	r3, #1
}
 8015a94:	4618      	mov	r0, r3
 8015a96:	bd80      	pop	{r7, pc}
 8015a98:	2000393c 	.word	0x2000393c

08015a9c <rfalFieldOnAndStartGT>:

/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b082      	sub	sp, #8
 8015aa0:	af00      	add	r7, sp, #0
    ReturnCode  ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3911IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 8015aa2:	2280      	movs	r2, #128	; 0x80
 8015aa4:	2180      	movs	r1, #128	; 0x80
 8015aa6:	2002      	movs	r0, #2
 8015aa8:	f7ed fc30 	bl	800330c <st25r3911CheckReg>
 8015aac:	4603      	mov	r3, r0
 8015aae:	f083 0301 	eor.w	r3, r3, #1
 8015ab2:	b2db      	uxtb	r3, r3
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d103      	bne.n	8015ac0 <rfalFieldOnAndStartGT+0x24>
 8015ab8:	4b27      	ldr	r3, [pc, #156]	; (8015b58 <rfalFieldOnAndStartGT+0xbc>)
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d101      	bne.n	8015ac4 <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 8015ac0:	2321      	movs	r3, #33	; 0x21
 8015ac2:	e044      	b.n	8015b4e <rfalFieldOnAndStartGT+0xb2>
    }
    
    ret = ERR_NONE;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 8015ac8:	2002      	movs	r0, #2
 8015aca:	f7f7 fad9 	bl	800d080 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3911IsTxEnabled() || !gRFAL.field )
 8015ace:	2208      	movs	r2, #8
 8015ad0:	2108      	movs	r1, #8
 8015ad2:	2002      	movs	r0, #2
 8015ad4:	f7ed fc1a 	bl	800330c <st25r3911CheckReg>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	f083 0301 	eor.w	r3, r3, #1
 8015ade:	b2db      	uxtb	r3, r3
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d106      	bne.n	8015af2 <rfalFieldOnAndStartGT+0x56>
 8015ae4:	4b1c      	ldr	r3, [pc, #112]	; (8015b58 <rfalFieldOnAndStartGT+0xbc>)
 8015ae6:	791b      	ldrb	r3, [r3, #4]
 8015ae8:	f083 0301 	eor.w	r3, r3, #1
 8015aec:	b2db      	uxtb	r3, r3
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d016      	beq.n	8015b20 <rfalFieldOnAndStartGT+0x84>
    {
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3911PerformCollisionAvoidance( ST25R3911_CMD_RESPONSE_RF_COLLISION_0, ST25R3911_THRESHOLD_DO_NOT_SET, ST25R3911_THRESHOLD_DO_NOT_SET, 0 );
 8015af2:	2300      	movs	r3, #0
 8015af4:	22ff      	movs	r2, #255	; 0xff
 8015af6:	21ff      	movs	r1, #255	; 0xff
 8015af8:	20ca      	movs	r0, #202	; 0xca
 8015afa:	f7ed fc87 	bl	800340c <st25r3911PerformCollisionAvoidance>
 8015afe:	4603      	mov	r3, r0
 8015b00:	80fb      	strh	r3, [r7, #6]
        
        gRFAL.field = st25r3911IsTxEnabled();
 8015b02:	2208      	movs	r2, #8
 8015b04:	2108      	movs	r1, #8
 8015b06:	2002      	movs	r0, #2
 8015b08:	f7ed fc00 	bl	800330c <st25r3911CheckReg>
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	461a      	mov	r2, r3
 8015b10:	4b11      	ldr	r3, [pc, #68]	; (8015b58 <rfalFieldOnAndStartGT+0xbc>)
 8015b12:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 8015b14:	4b10      	ldr	r3, [pc, #64]	; (8015b58 <rfalFieldOnAndStartGT+0xbc>)
 8015b16:	791b      	ldrb	r3, [r3, #4]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d001      	beq.n	8015b20 <rfalFieldOnAndStartGT+0x84>
        {            
            st25r3911TxRxOn(); /* Enable Tx and Rx (Tx is already On) */
 8015b1c:	f7ed fa25 	bl	8002f6a <st25r3911TxRxOn>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 8015b20:	4b0d      	ldr	r3, [pc, #52]	; (8015b58 <rfalFieldOnAndStartGT+0xbc>)
 8015b22:	689b      	ldr	r3, [r3, #8]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d011      	beq.n	8015b4c <rfalFieldOnAndStartGT+0xb0>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3911_GT_MIN_1FC) ) );
 8015b28:	4b0b      	ldr	r3, [pc, #44]	; (8015b58 <rfalFieldOnAndStartGT+0xbc>)
 8015b2a:	689b      	ldr	r3, [r3, #8]
 8015b2c:	f243 42f8 	movw	r2, #13560	; 0x34f8
 8015b30:	4293      	cmp	r3, r2
 8015b32:	bf38      	it	cc
 8015b34:	4613      	movcc	r3, r2
 8015b36:	4a09      	ldr	r2, [pc, #36]	; (8015b5c <rfalFieldOnAndStartGT+0xc0>)
 8015b38:	fba2 2303 	umull	r2, r3, r2, r3
 8015b3c:	0b1b      	lsrs	r3, r3, #12
 8015b3e:	b29b      	uxth	r3, r3
 8015b40:	4618      	mov	r0, r3
 8015b42:	f7ee fb29 	bl	8004198 <timerCalculateTimer>
 8015b46:	4603      	mov	r3, r0
 8015b48:	4a03      	ldr	r2, [pc, #12]	; (8015b58 <rfalFieldOnAndStartGT+0xbc>)
 8015b4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
    
    return ret;
 8015b4c:	88fb      	ldrh	r3, [r7, #6]
}
 8015b4e:	4618      	mov	r0, r3
 8015b50:	3708      	adds	r7, #8
 8015b52:	46bd      	mov	sp, r7
 8015b54:	bd80      	pop	{r7, pc}
 8015b56:	bf00      	nop
 8015b58:	2000393c 	.word	0x2000393c
 8015b5c:	4d542005 	.word	0x4d542005

08015b60 <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 8015b64:	4b08      	ldr	r3, [pc, #32]	; (8015b88 <rfalFieldOff+0x28>)
 8015b66:	7d1b      	ldrb	r3, [r3, #20]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d001      	beq.n	8015b70 <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 8015b6c:	f000 faca 	bl	8016104 <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3911TxRxOff();
 8015b70:	f7ed fa03 	bl	8002f7a <st25r3911TxRxOff>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 8015b74:	2003      	movs	r0, #3
 8015b76:	f7f7 fa83 	bl	800d080 <rfalSetAnalogConfig>
    gRFAL.field = false;
 8015b7a:	4b03      	ldr	r3, [pc, #12]	; (8015b88 <rfalFieldOff+0x28>)
 8015b7c:	2200      	movs	r2, #0
 8015b7e:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 8015b80:	2300      	movs	r3, #0
}
 8015b82:	4618      	mov	r0, r3
 8015b84:	bd80      	pop	{r7, pc}
 8015b86:	bf00      	nop
 8015b88:	2000393c 	.word	0x2000393c

08015b8c <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 8015b8c:	b5b0      	push	{r4, r5, r7, lr}
 8015b8e:	b084      	sub	sp, #16
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d101      	bne.n	8015b9e <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 8015b9a:	2307      	movs	r3, #7
 8015b9c:	e11c      	b.n	8015dd8 <rfalStartTransceive+0x24c>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 8015b9e:	4b90      	ldr	r3, [pc, #576]	; (8015de0 <rfalStartTransceive+0x254>)
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	2b01      	cmp	r3, #1
 8015ba4:	f240 8117 	bls.w	8015dd6 <rfalStartTransceive+0x24a>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 8015ba8:	2208      	movs	r2, #8
 8015baa:	2108      	movs	r1, #8
 8015bac:	2002      	movs	r0, #2
 8015bae:	f7ed fbad 	bl	800330c <st25r3911CheckReg>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	f083 0301 	eor.w	r3, r3, #1
 8015bb8:	b2db      	uxtb	r3, r3
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d011      	beq.n	8015be2 <rfalStartTransceive+0x56>
 8015bbe:	4b88      	ldr	r3, [pc, #544]	; (8015de0 <rfalStartTransceive+0x254>)
 8015bc0:	785b      	ldrb	r3, [r3, #1]
 8015bc2:	2b0a      	cmp	r3, #10
 8015bc4:	d00d      	beq.n	8015be2 <rfalStartTransceive+0x56>
 8015bc6:	4b86      	ldr	r3, [pc, #536]	; (8015de0 <rfalStartTransceive+0x254>)
 8015bc8:	785b      	ldrb	r3, [r3, #1]
 8015bca:	2b0b      	cmp	r3, #11
 8015bcc:	d009      	beq.n	8015be2 <rfalStartTransceive+0x56>
 8015bce:	4b84      	ldr	r3, [pc, #528]	; (8015de0 <rfalStartTransceive+0x254>)
 8015bd0:	785b      	ldrb	r3, [r3, #1]
 8015bd2:	2b0c      	cmp	r3, #12
 8015bd4:	d005      	beq.n	8015be2 <rfalStartTransceive+0x56>
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d001      	beq.n	8015be2 <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 8015bde:	2321      	movs	r3, #33	; 0x21
 8015be0:	e0fa      	b.n	8015dd8 <rfalStartTransceive+0x24c>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 8015be2:	4b7f      	ldr	r3, [pc, #508]	; (8015de0 <rfalStartTransceive+0x254>)
 8015be4:	687a      	ldr	r2, [r7, #4]
 8015be6:	f103 041c 	add.w	r4, r3, #28
 8015bea:	4615      	mov	r5, r2
 8015bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015bf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015bf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 8015bf8:	4b79      	ldr	r3, [pc, #484]	; (8015de0 <rfalStartTransceive+0x254>)
 8015bfa:	68db      	ldr	r3, [r3, #12]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d031      	beq.n	8015c64 <rfalStartTransceive+0xd8>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 8015c00:	2340      	movs	r3, #64	; 0x40
 8015c02:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 8015c04:	4b76      	ldr	r3, [pc, #472]	; (8015de0 <rfalStartTransceive+0x254>)
 8015c06:	785b      	ldrb	r3, [r3, #1]
 8015c08:	2b01      	cmp	r3, #1
 8015c0a:	d103      	bne.n	8015c14 <rfalStartTransceive+0x88>
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8015c12:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 8015c14:	4b72      	ldr	r3, [pc, #456]	; (8015de0 <rfalStartTransceive+0x254>)
 8015c16:	785b      	ldrb	r3, [r3, #1]
 8015c18:	2b02      	cmp	r3, #2
 8015c1a:	d103      	bne.n	8015c24 <rfalStartTransceive+0x98>
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8015c22:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 8015c24:	4b6e      	ldr	r3, [pc, #440]	; (8015de0 <rfalStartTransceive+0x254>)
 8015c26:	785b      	ldrb	r3, [r3, #1]
 8015c28:	2b03      	cmp	r3, #3
 8015c2a:	d103      	bne.n	8015c34 <rfalStartTransceive+0xa8>
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8015c32:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 8015c34:	4b6a      	ldr	r3, [pc, #424]	; (8015de0 <rfalStartTransceive+0x254>)
 8015c36:	785b      	ldrb	r3, [r3, #1]
 8015c38:	2b07      	cmp	r3, #7
 8015c3a:	d102      	bne.n	8015c42 <rfalStartTransceive+0xb6>
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	3380      	adds	r3, #128	; 0x80
 8015c40:	60fb      	str	r3, [r7, #12]
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 8015c42:	4b67      	ldr	r3, [pc, #412]	; (8015de0 <rfalStartTransceive+0x254>)
 8015c44:	68db      	ldr	r3, [r3, #12]
 8015c46:	68fa      	ldr	r2, [r7, #12]
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d806      	bhi.n	8015c5a <rfalStartTransceive+0xce>
 8015c4c:	4b64      	ldr	r3, [pc, #400]	; (8015de0 <rfalStartTransceive+0x254>)
 8015c4e:	68da      	ldr	r2, [r3, #12]
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	1ad3      	subs	r3, r2, r3
 8015c54:	099b      	lsrs	r3, r3, #6
 8015c56:	b2db      	uxtb	r3, r3
 8015c58:	e000      	b.n	8015c5c <rfalStartTransceive+0xd0>
 8015c5a:	2304      	movs	r3, #4
 8015c5c:	4619      	mov	r1, r3
 8015c5e:	200e      	movs	r0, #14
 8015c60:	f7ed fe8e 	bl	8003980 <st25r3911WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 8015c64:	4b5e      	ldr	r3, [pc, #376]	; (8015de0 <rfalStartTransceive+0x254>)
 8015c66:	785b      	ldrb	r3, [r3, #1]
 8015c68:	2b09      	cmp	r3, #9
 8015c6a:	d053      	beq.n	8015d14 <rfalStartTransceive+0x188>
 8015c6c:	4b5c      	ldr	r3, [pc, #368]	; (8015de0 <rfalStartTransceive+0x254>)
 8015c6e:	785b      	ldrb	r3, [r3, #1]
 8015c70:	2b0d      	cmp	r3, #13
 8015c72:	d04f      	beq.n	8015d14 <rfalStartTransceive+0x188>
        {
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8015c74:	4b5a      	ldr	r3, [pc, #360]	; (8015de0 <rfalStartTransceive+0x254>)
 8015c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c7c:	d046      	beq.n	8015d0c <rfalStartTransceive+0x180>
 8015c7e:	4b58      	ldr	r3, [pc, #352]	; (8015de0 <rfalStartTransceive+0x254>)
 8015c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d042      	beq.n	8015d0c <rfalStartTransceive+0x180>
            {
                /* Ensure proper timing configuration */
                if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 8015c86:	4b56      	ldr	r3, [pc, #344]	; (8015de0 <rfalStartTransceive+0x254>)
 8015c88:	68da      	ldr	r2, [r3, #12]
 8015c8a:	4b55      	ldr	r3, [pc, #340]	; (8015de0 <rfalStartTransceive+0x254>)
 8015c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c8e:	429a      	cmp	r2, r3
 8015c90:	d301      	bcc.n	8015c96 <rfalStartTransceive+0x10a>
                {
                    return ERR_PARAM;
 8015c92:	2307      	movs	r3, #7
 8015c94:	e0a0      	b.n	8015dd8 <rfalStartTransceive+0x24c>
                }
        
                FxTAdj = RFAL_FWT_ADJUSTMENT;
 8015c96:	2340      	movs	r3, #64	; 0x40
 8015c98:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 8015c9a:	4b51      	ldr	r3, [pc, #324]	; (8015de0 <rfalStartTransceive+0x254>)
 8015c9c:	785b      	ldrb	r3, [r3, #1]
 8015c9e:	2b01      	cmp	r3, #1
 8015ca0:	d103      	bne.n	8015caa <rfalStartTransceive+0x11e>
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015ca8:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 8015caa:	4b4d      	ldr	r3, [pc, #308]	; (8015de0 <rfalStartTransceive+0x254>)
 8015cac:	785b      	ldrb	r3, [r3, #1]
 8015cae:	2b02      	cmp	r3, #2
 8015cb0:	d103      	bne.n	8015cba <rfalStartTransceive+0x12e>
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015cb8:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 8015cba:	4b49      	ldr	r3, [pc, #292]	; (8015de0 <rfalStartTransceive+0x254>)
 8015cbc:	785b      	ldrb	r3, [r3, #1]
 8015cbe:	2b03      	cmp	r3, #3
 8015cc0:	d103      	bne.n	8015cca <rfalStartTransceive+0x13e>
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	f503 632e 	add.w	r3, r3, #2784	; 0xae0
 8015cc8:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 8015cca:	4b45      	ldr	r3, [pc, #276]	; (8015de0 <rfalStartTransceive+0x254>)
 8015ccc:	785b      	ldrb	r3, [r3, #1]
 8015cce:	2b06      	cmp	r3, #6
 8015cd0:	d10b      	bne.n	8015cea <rfalStartTransceive+0x15e>
                {
                    FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 8015cd2:	4b43      	ldr	r3, [pc, #268]	; (8015de0 <rfalStartTransceive+0x254>)
 8015cd4:	789b      	ldrb	r3, [r3, #2]
 8015cd6:	2b01      	cmp	r3, #1
 8015cd8:	d102      	bne.n	8015ce0 <rfalStartTransceive+0x154>
 8015cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015cde:	e001      	b.n	8015ce4 <rfalStartTransceive+0x158>
 8015ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015ce4:	68fa      	ldr	r2, [r7, #12]
 8015ce6:	4413      	add	r3, r2
 8015ce8:	60fb      	str	r3, [r7, #12]
                }
                
                /* Ensure that the given FWT doesn't exceed NRT maximum */
                gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3911_NRT_MAX_1FC );
 8015cea:	4b3d      	ldr	r3, [pc, #244]	; (8015de0 <rfalStartTransceive+0x254>)
 8015cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	4413      	add	r3, r2
 8015cf2:	4a3c      	ldr	r2, [pc, #240]	; (8015de4 <rfalStartTransceive+0x258>)
 8015cf4:	4293      	cmp	r3, r2
 8015cf6:	bf28      	it	cs
 8015cf8:	4613      	movcs	r3, r2
 8015cfa:	4a39      	ldr	r2, [pc, #228]	; (8015de0 <rfalStartTransceive+0x254>)
 8015cfc:	6353      	str	r3, [r2, #52]	; 0x34
                
                /* Set FWT in the NRT */
                st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 8015cfe:	4b38      	ldr	r3, [pc, #224]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d02:	099b      	lsrs	r3, r3, #6
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7ed fb43 	bl	8003390 <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8015d0a:	e006      	b.n	8015d1a <rfalStartTransceive+0x18e>
            }
            else
            {
                /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
                st25r3911SetNoResponseTime_64fcs( RFAL_ST25R3911_NRT_DISABLED );
 8015d0c:	2000      	movs	r0, #0
 8015d0e:	f7ed fb3f 	bl	8003390 <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8015d12:	e002      	b.n	8015d1a <rfalStartTransceive+0x18e>
            }
        }
        else /* Active Comms */
        {
            /* Setup NRT timer for rf response RF collision timeout. */
            st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc(RFAL_AP2P_FIELDON_TADTTRFW) );
 8015d14:	2080      	movs	r0, #128	; 0x80
 8015d16:	f7ed fb3b 	bl	8003390 <st25r3911SetNoResponseTime_64fcs>
            
            /* In Active Mode No Response Timer cannot be used to measure FWT a SW timer is used instead */
        }
        
        gRFAL.state       = RFAL_STATE_TXRX;
 8015d1a:	4b31      	ldr	r3, [pc, #196]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d1c:	2203      	movs	r2, #3
 8015d1e:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 8015d20:	4b2f      	ldr	r3, [pc, #188]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d22:	220b      	movs	r2, #11
 8015d24:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 8015d26:	4b2e      	ldr	r3, [pc, #184]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d28:	2202      	movs	r2, #2
 8015d2a:	82da      	strh	r2, [r3, #22]
        gRFAL.TxRx.rxse   = false;
 8015d2c:	4b2c      	ldr	r3, [pc, #176]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d2e:	2200      	movs	r2, #0
 8015d30:	761a      	strb	r2, [r3, #24]
        
    #if RFAL_FEATURE_NFCV        
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8015d32:	4b2b      	ldr	r3, [pc, #172]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d34:	785b      	ldrb	r3, [r3, #1]
 8015d36:	2b07      	cmp	r3, #7
 8015d38:	d003      	beq.n	8015d42 <rfalStartTransceive+0x1b6>
 8015d3a:	4b29      	ldr	r3, [pc, #164]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d3c:	785b      	ldrb	r3, [r3, #1]
 8015d3e:	2b08      	cmp	r3, #8
 8015d40:	d128      	bne.n	8015d94 <rfalStartTransceive+0x208>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 8015d42:	4a27      	ldr	r2, [pc, #156]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d44:	4b26      	ldr	r3, [pc, #152]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d46:	f502 7473 	add.w	r4, r2, #972	; 0x3cc
 8015d4a:	f103 051c 	add.w	r5, r3, #28
 8015d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015d56:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 8015d5a:	4b21      	ldr	r3, [pc, #132]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d001      	beq.n	8015d68 <rfalStartTransceive+0x1dc>
 8015d64:	4b20      	ldr	r3, [pc, #128]	; (8015de8 <rfalStartTransceive+0x25c>)
 8015d66:	e000      	b.n	8015d6a <rfalStartTransceive+0x1de>
 8015d68:	2300      	movs	r3, #0
 8015d6a:	4a1d      	ldr	r2, [pc, #116]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d6c:	6253      	str	r3, [r2, #36]	; 0x24
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 8015d6e:	4b1c      	ldr	r3, [pc, #112]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d70:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 8015d74:	851a      	strh	r2, [r3, #40]	; 0x28
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 8015d76:	4b1a      	ldr	r3, [pc, #104]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015d7c:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 8015d80:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 8015d84:	4a16      	ldr	r2, [pc, #88]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d86:	6313      	str	r3, [r2, #48]	; 0x30
            
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 8015d88:	4b15      	ldr	r3, [pc, #84]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d8a:	69db      	ldr	r3, [r3, #28]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d001      	beq.n	8015d94 <rfalStartTransceive+0x208>
            {
                return  ERR_NONE;
 8015d90:	2300      	movs	r3, #0
 8015d92:	e021      	b.n	8015dd8 <rfalStartTransceive+0x24c>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 8015d94:	4b12      	ldr	r3, [pc, #72]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d96:	69db      	ldr	r3, [r3, #28]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d003      	beq.n	8015da4 <rfalStartTransceive+0x218>
 8015d9c:	4b10      	ldr	r3, [pc, #64]	; (8015de0 <rfalStartTransceive+0x254>)
 8015d9e:	8c1b      	ldrh	r3, [r3, #32]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d116      	bne.n	8015dd2 <rfalStartTransceive+0x246>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 8015da4:	f000 f9c4 	bl	8016130 <rfalPrepareTransceive>
            
            /* Disable our field upon a Rx reEnable on AP2P */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 8015da8:	4b0d      	ldr	r3, [pc, #52]	; (8015de0 <rfalStartTransceive+0x254>)
 8015daa:	785b      	ldrb	r3, [r3, #1]
 8015dac:	2b09      	cmp	r3, #9
 8015dae:	d003      	beq.n	8015db8 <rfalStartTransceive+0x22c>
 8015db0:	4b0b      	ldr	r3, [pc, #44]	; (8015de0 <rfalStartTransceive+0x254>)
 8015db2:	785b      	ldrb	r3, [r3, #1]
 8015db4:	2b0d      	cmp	r3, #13
 8015db6:	d103      	bne.n	8015dc0 <rfalStartTransceive+0x234>
            {
                st25r3911TxOff();
 8015db8:	2108      	movs	r1, #8
 8015dba:	2002      	movs	r0, #2
 8015dbc:	f7ed fe2c 	bl	8003a18 <st25r3911ClrRegisterBits>
            }
            
            /* No Tx done, enable the Receiver */
            st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 8015dc0:	20d1      	movs	r0, #209	; 0xd1
 8015dc2:	f7ed ff6b 	bl	8003c9c <st25r3911ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3911ExecuteCommand( ST25R3911_CMD_START_NO_RESPONSE_TIMER );
 8015dc6:	20e3      	movs	r0, #227	; 0xe3
 8015dc8:	f7ed ff68 	bl	8003c9c <st25r3911ExecuteCommand>
            
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 8015dcc:	4b04      	ldr	r3, [pc, #16]	; (8015de0 <rfalStartTransceive+0x254>)
 8015dce:	2251      	movs	r2, #81	; 0x51
 8015dd0:	751a      	strb	r2, [r3, #20]
        }
        
        return ERR_NONE;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	e000      	b.n	8015dd8 <rfalStartTransceive+0x24c>
    }
    
    return ERR_WRONG_STATE;
 8015dd6:	2321      	movs	r3, #33	; 0x21
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	3710      	adds	r7, #16
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bdb0      	pop	{r4, r5, r7, pc}
 8015de0:	2000393c 	.word	0x2000393c
 8015de4:	0ffff000 	.word	0x0ffff000
 8015de8:	20003afc 	.word	0x20003afc

08015dec <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 8015dec:	b480      	push	{r7}
 8015dee:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 8015df0:	4b08      	ldr	r3, [pc, #32]	; (8015e14 <rfalIsTransceiveInTx+0x28>)
 8015df2:	7d1b      	ldrb	r3, [r3, #20]
 8015df4:	2b0a      	cmp	r3, #10
 8015df6:	d905      	bls.n	8015e04 <rfalIsTransceiveInTx+0x18>
 8015df8:	4b06      	ldr	r3, [pc, #24]	; (8015e14 <rfalIsTransceiveInTx+0x28>)
 8015dfa:	7d1b      	ldrb	r3, [r3, #20]
 8015dfc:	2b50      	cmp	r3, #80	; 0x50
 8015dfe:	d801      	bhi.n	8015e04 <rfalIsTransceiveInTx+0x18>
 8015e00:	2301      	movs	r3, #1
 8015e02:	e000      	b.n	8015e06 <rfalIsTransceiveInTx+0x1a>
 8015e04:	2300      	movs	r3, #0
 8015e06:	f003 0301 	and.w	r3, r3, #1
 8015e0a:	b2db      	uxtb	r3, r3
}
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bc80      	pop	{r7}
 8015e12:	4770      	bx	lr
 8015e14:	2000393c 	.word	0x2000393c

08015e18 <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 8015e18:	b480      	push	{r7}
 8015e1a:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 8015e1c:	4b05      	ldr	r3, [pc, #20]	; (8015e34 <rfalIsTransceiveInRx+0x1c>)
 8015e1e:	7d1b      	ldrb	r3, [r3, #20]
 8015e20:	2b50      	cmp	r3, #80	; 0x50
 8015e22:	bf8c      	ite	hi
 8015e24:	2301      	movhi	r3, #1
 8015e26:	2300      	movls	r3, #0
 8015e28:	b2db      	uxtb	r3, r3
}
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	bc80      	pop	{r7}
 8015e30:	4770      	bx	lr
 8015e32:	bf00      	nop
 8015e34:	2000393c 	.word	0x2000393c

08015e38 <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b08c      	sub	sp, #48	; 0x30
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	60f8      	str	r0, [r7, #12]
 8015e40:	607a      	str	r2, [r7, #4]
 8015e42:	461a      	mov	r2, r3
 8015e44:	460b      	mov	r3, r1
 8015e46:	817b      	strh	r3, [r7, #10]
 8015e48:	4613      	mov	r3, r2
 8015e4a:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	613b      	str	r3, [r7, #16]
 8015e50:	897b      	ldrh	r3, [r7, #10]
 8015e52:	00db      	lsls	r3, r3, #3
 8015e54:	b29b      	uxth	r3, r3
 8015e56:	82bb      	strh	r3, [r7, #20]
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	61bb      	str	r3, [r7, #24]
 8015e5c:	893b      	ldrh	r3, [r7, #8]
 8015e5e:	00db      	lsls	r3, r3, #3
 8015e60:	b29b      	uxth	r3, r3
 8015e62:	83bb      	strh	r3, [r7, #28]
 8015e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e66:	623b      	str	r3, [r7, #32]
 8015e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8015e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 8015e70:	f107 0310 	add.w	r3, r7, #16
 8015e74:	4618      	mov	r0, r3
 8015e76:	f7ff fe89 	bl	8015b8c <rfalStartTransceive>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8015e7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d001      	beq.n	8015e88 <rfalTransceiveBlockingTx+0x50>
 8015e84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015e86:	e002      	b.n	8015e8e <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 8015e88:	f000 f805 	bl	8015e96 <rfalTransceiveRunBlockingTx>
 8015e8c:	4603      	mov	r3, r0
}
 8015e8e:	4618      	mov	r0, r3
 8015e90:	3730      	adds	r7, #48	; 0x30
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}

08015e96 <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 8015e96:	b580      	push	{r7, lr}
 8015e98:	b082      	sub	sp, #8
 8015e9a:	af00      	add	r7, sp, #0
    ReturnCode  ret;
        
    do{
        rfalWorker();
 8015e9c:	f000 f892 	bl	8015fc4 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 8015ea0:	f000 f880 	bl	8015fa4 <rfalGetTransceiveStatus>
 8015ea4:	4603      	mov	r3, r0
 8015ea6:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 8015ea8:	f7ff ffa0 	bl	8015dec <rfalIsTransceiveInTx>
 8015eac:	4603      	mov	r3, r0
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d002      	beq.n	8015eb8 <rfalTransceiveRunBlockingTx+0x22>
 8015eb2:	88fb      	ldrh	r3, [r7, #6]
 8015eb4:	2b02      	cmp	r3, #2
 8015eb6:	d0f1      	beq.n	8015e9c <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 8015eb8:	f7ff ffae 	bl	8015e18 <rfalIsTransceiveInRx>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d001      	beq.n	8015ec6 <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	e000      	b.n	8015ec8 <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 8015ec6:	88fb      	ldrh	r3, [r7, #6]
}
 8015ec8:	4618      	mov	r0, r3
 8015eca:	3708      	adds	r7, #8
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd80      	pop	{r7, pc}

08015ed0 <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b082      	sub	sp, #8
 8015ed4:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 8015ed6:	f000 f875 	bl	8015fc4 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 8015eda:	f000 f863 	bl	8015fa4 <rfalGetTransceiveStatus>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );
 8015ee2:	f7ff ff99 	bl	8015e18 <rfalIsTransceiveInRx>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d002      	beq.n	8015ef2 <rfalTransceiveBlockingRx+0x22>
 8015eec:	88fb      	ldrh	r3, [r7, #6]
 8015eee:	2b02      	cmp	r3, #2
 8015ef0:	d0f1      	beq.n	8015ed6 <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 8015ef2:	88fb      	ldrh	r3, [r7, #6]
}
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	3708      	adds	r7, #8
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	bd80      	pop	{r7, pc}

08015efc <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b08a      	sub	sp, #40	; 0x28
 8015f00:	af04      	add	r7, sp, #16
 8015f02:	60f8      	str	r0, [r7, #12]
 8015f04:	607a      	str	r2, [r7, #4]
 8015f06:	461a      	mov	r2, r3
 8015f08:	460b      	mov	r3, r1
 8015f0a:	817b      	strh	r3, [r7, #10]
 8015f0c:	4613      	mov	r3, r2
 8015f0e:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 8015f10:	893a      	ldrh	r2, [r7, #8]
 8015f12:	8979      	ldrh	r1, [r7, #10]
 8015f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f16:	9302      	str	r3, [sp, #8]
 8015f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1a:	9301      	str	r3, [sp, #4]
 8015f1c:	6a3b      	ldr	r3, [r7, #32]
 8015f1e:	9300      	str	r3, [sp, #0]
 8015f20:	4613      	mov	r3, r2
 8015f22:	687a      	ldr	r2, [r7, #4]
 8015f24:	68f8      	ldr	r0, [r7, #12]
 8015f26:	f7ff ff87 	bl	8015e38 <rfalTransceiveBlockingTx>
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	82fb      	strh	r3, [r7, #22]
 8015f2e:	8afb      	ldrh	r3, [r7, #22]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d001      	beq.n	8015f38 <rfalTransceiveBlockingTxRx+0x3c>
 8015f34:	8afb      	ldrh	r3, [r7, #22]
 8015f36:	e00e      	b.n	8015f56 <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 8015f38:	f7ff ffca 	bl	8015ed0 <rfalTransceiveBlockingRx>
 8015f3c:	4603      	mov	r3, r0
 8015f3e:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 8015f40:	6a3b      	ldr	r3, [r7, #32]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d006      	beq.n	8015f54 <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen =  rfalConvBitsToBytes(*actLen);
 8015f46:	6a3b      	ldr	r3, [r7, #32]
 8015f48:	881b      	ldrh	r3, [r3, #0]
 8015f4a:	3307      	adds	r3, #7
 8015f4c:	08db      	lsrs	r3, r3, #3
 8015f4e:	b29a      	uxth	r2, r3
 8015f50:	6a3b      	ldr	r3, [r7, #32]
 8015f52:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 8015f54:	8afb      	ldrh	r3, [r7, #22]
}
 8015f56:	4618      	mov	r0, r3
 8015f58:	3718      	adds	r7, #24
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd80      	pop	{r7, pc}
	...

08015f60 <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 8015f64:	4b0e      	ldr	r3, [pc, #56]	; (8015fa0 <rfalRunTransceiveWorker+0x40>)
 8015f66:	781b      	ldrb	r3, [r3, #0]
 8015f68:	2b03      	cmp	r3, #3
 8015f6a:	d115      	bne.n	8015f98 <rfalRunTransceiveWorker+0x38>
    {     
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 8015f6c:	f7ff ff3e 	bl	8015dec <rfalIsTransceiveInTx>
 8015f70:	4603      	mov	r3, r0
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d005      	beq.n	8015f82 <rfalRunTransceiveWorker+0x22>
        {
            rfalTransceiveTx();
 8015f76:	f000 f971 	bl	801625c <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 8015f7a:	f000 f813 	bl	8015fa4 <rfalGetTransceiveStatus>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	e00b      	b.n	8015f9a <rfalRunTransceiveWorker+0x3a>
        }
        
        if( rfalIsTransceiveInRx() )
 8015f82:	f7ff ff49 	bl	8015e18 <rfalIsTransceiveInRx>
 8015f86:	4603      	mov	r3, r0
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d005      	beq.n	8015f98 <rfalRunTransceiveWorker+0x38>
        {
            rfalTransceiveRx();
 8015f8c:	f000 fbb2 	bl	80166f4 <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 8015f90:	f000 f808 	bl	8015fa4 <rfalGetTransceiveStatus>
 8015f94:	4603      	mov	r3, r0
 8015f96:	e000      	b.n	8015f9a <rfalRunTransceiveWorker+0x3a>
        }
    }    
    return ERR_WRONG_STATE;
 8015f98:	2321      	movs	r3, #33	; 0x21
}
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	bd80      	pop	{r7, pc}
 8015f9e:	bf00      	nop
 8015fa0:	2000393c 	.word	0x2000393c

08015fa4 <rfalGetTransceiveStatus>:
{
    return gRFAL.TxRx.state;
}

ReturnCode rfalGetTransceiveStatus( void )
{
 8015fa4:	b480      	push	{r7}
 8015fa6:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 8015fa8:	4b05      	ldr	r3, [pc, #20]	; (8015fc0 <rfalGetTransceiveStatus+0x1c>)
 8015faa:	7d1b      	ldrb	r3, [r3, #20]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d102      	bne.n	8015fb6 <rfalGetTransceiveStatus+0x12>
 8015fb0:	4b03      	ldr	r3, [pc, #12]	; (8015fc0 <rfalGetTransceiveStatus+0x1c>)
 8015fb2:	8adb      	ldrh	r3, [r3, #22]
 8015fb4:	e000      	b.n	8015fb8 <rfalGetTransceiveStatus+0x14>
 8015fb6:	2302      	movs	r3, #2
}
 8015fb8:	4618      	mov	r0, r3
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bc80      	pop	{r7}
 8015fbe:	4770      	bx	lr
 8015fc0:	2000393c 	.word	0x2000393c

08015fc4 <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 8015fc8:	4b0b      	ldr	r3, [pc, #44]	; (8015ff8 <rfalWorker+0x34>)
 8015fca:	781b      	ldrb	r3, [r3, #0]
 8015fcc:	2b05      	cmp	r3, #5
 8015fce:	d00c      	beq.n	8015fea <rfalWorker+0x26>
 8015fd0:	2b05      	cmp	r3, #5
 8015fd2:	dc0d      	bgt.n	8015ff0 <rfalWorker+0x2c>
 8015fd4:	2b03      	cmp	r3, #3
 8015fd6:	d002      	beq.n	8015fde <rfalWorker+0x1a>
 8015fd8:	2b04      	cmp	r3, #4
 8015fda:	d003      	beq.n	8015fe4 <rfalWorker+0x20>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8015fdc:	e008      	b.n	8015ff0 <rfalWorker+0x2c>
            rfalRunTransceiveWorker();
 8015fde:	f7ff ffbf 	bl	8015f60 <rfalRunTransceiveWorker>
            break;
 8015fe2:	e006      	b.n	8015ff2 <rfalWorker+0x2e>
            rfalRunListenModeWorker();
 8015fe4:	f001 fb0e 	bl	8017604 <rfalRunListenModeWorker>
            break;
 8015fe8:	e003      	b.n	8015ff2 <rfalWorker+0x2e>
            rfalRunWakeUpModeWorker();
 8015fea:	f001 ff0f 	bl	8017e0c <rfalRunWakeUpModeWorker>
            break;
 8015fee:	e000      	b.n	8015ff2 <rfalWorker+0x2e>
            break;
 8015ff0:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 8015ff2:	bf00      	nop
 8015ff4:	bd80      	pop	{r7, pc}
 8015ff6:	bf00      	nop
 8015ff8:	2000393c 	.word	0x2000393c

08015ffc <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b082      	sub	sp, #8
 8016000:	af00      	add	r7, sp, #0
    bool    rxHasIncParError;
    uint8_t fifoBytesToRead;
    uint8_t reEnRx[] = { ST25R3911_CMD_CLEAR_FIFO, ST25R3911_CMD_UNMASK_RECEIVE_DATA };
 8016002:	f24d 13c2 	movw	r3, #53698	; 0xd1c2
 8016006:	80bb      	strh	r3, [r7, #4]
    

    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 8016008:	f000 fedc 	bl	8016dc4 <rfalFIFOStatusGetNumBytes>
 801600c:	4603      	mov	r3, r0
 801600e:	71fb      	strb	r3, [r7, #7]
    
    
    /*******************************************************************************/
    /* EMVCo                                                                       */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 8016010:	4b3b      	ldr	r3, [pc, #236]	; (8016100 <rfalErrorHandling+0x104>)
 8016012:	79db      	ldrb	r3, [r3, #7]
 8016014:	2b02      	cmp	r3, #2
 8016016:	d141      	bne.n	801609c <rfalErrorHandling+0xa0>
        /*   - Parity error                                                            */
        /*   - CRC error                                                               */
        /*******************************************************************************/        
     
        /* Check if reception has incompete bytes or parity error */
        rxHasIncParError = ( rfalFIFOStatusIsIncompleteByte() ? true : rfalFIFOStatusIsMissingPar() );   /* MISRA 13.5 */
 8016018:	f000 fee0 	bl	8016ddc <rfalFIFOStatusIsIncompleteByte>
 801601c:	4603      	mov	r3, r0
 801601e:	2b00      	cmp	r3, #0
 8016020:	d104      	bne.n	801602c <rfalErrorHandling+0x30>
 8016022:	f000 feed 	bl	8016e00 <rfalFIFOStatusIsMissingPar>
 8016026:	4603      	mov	r3, r0
 8016028:	2b00      	cmp	r3, #0
 801602a:	d001      	beq.n	8016030 <rfalErrorHandling+0x34>
 801602c:	2301      	movs	r3, #1
 801602e:	e000      	b.n	8016032 <rfalErrorHandling+0x36>
 8016030:	2300      	movs	r3, #0
 8016032:	71bb      	strb	r3, [r7, #6]
        
        /* In case there are residual bits decrement FIFO bytes */
        if( (fifoBytesToRead > 0U) && rxHasIncParError)
 8016034:	79fb      	ldrb	r3, [r7, #7]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d005      	beq.n	8016046 <rfalErrorHandling+0x4a>
 801603a:	79bb      	ldrb	r3, [r7, #6]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d002      	beq.n	8016046 <rfalErrorHandling+0x4a>
        {
            fifoBytesToRead--;
 8016040:	79fb      	ldrb	r3, [r7, #7]
 8016042:	3b01      	subs	r3, #1
 8016044:	71fb      	strb	r3, [r7, #7]
        }
            
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 8016046:	4b2e      	ldr	r3, [pc, #184]	; (8016100 <rfalErrorHandling+0x104>)
 8016048:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801604a:	461a      	mov	r2, r3
 801604c:	79fb      	ldrb	r3, [r7, #7]
 801604e:	4413      	add	r3, r2
 8016050:	2b03      	cmp	r3, #3
 8016052:	dc51      	bgt.n	80160f8 <rfalErrorHandling+0xfc>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 8016054:	4b2a      	ldr	r3, [pc, #168]	; (8016100 <rfalErrorHandling+0x104>)
 8016056:	8adb      	ldrh	r3, [r3, #22]
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 8016058:	2b1d      	cmp	r3, #29
 801605a:	d00e      	beq.n	801607a <rfalErrorHandling+0x7e>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 801605c:	4b28      	ldr	r3, [pc, #160]	; (8016100 <rfalErrorHandling+0x104>)
 801605e:	8adb      	ldrh	r3, [r3, #22]
 8016060:	2b09      	cmp	r3, #9
 8016062:	d00a      	beq.n	801607a <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 8016064:	4b26      	ldr	r3, [pc, #152]	; (8016100 <rfalErrorHandling+0x104>)
 8016066:	8adb      	ldrh	r3, [r3, #22]
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 8016068:	2b1b      	cmp	r3, #27
 801606a:	d006      	beq.n	801607a <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 801606c:	4b24      	ldr	r3, [pc, #144]	; (8016100 <rfalErrorHandling+0x104>)
 801606e:	8adb      	ldrh	r3, [r3, #22]
 8016070:	2b15      	cmp	r3, #21
 8016072:	d002      	beq.n	801607a <rfalErrorHandling+0x7e>
 8016074:	79bb      	ldrb	r3, [r7, #6]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d03e      	beq.n	80160f8 <rfalErrorHandling+0xfc>
              rxHasIncParError                                                               ) )
        {
            /* Ignore this reception, ReEnable receiver */
            st25r3911ExecuteCommands( reEnRx, sizeof(reEnRx) );
 801607a:	1d3b      	adds	r3, r7, #4
 801607c:	2102      	movs	r1, #2
 801607e:	4618      	mov	r0, r3
 8016080:	f7ed fe5e 	bl	8003d40 <st25r3911ExecuteCommands>
            
            rfalFIFOStatusClear();
 8016084:	f000 fe92 	bl	8016dac <rfalFIFOStatusClear>
            gRFAL.fifo.bytesTotal = 0;
 8016088:	4b1d      	ldr	r3, [pc, #116]	; (8016100 <rfalErrorHandling+0x104>)
 801608a:	2200      	movs	r2, #0
 801608c:	875a      	strh	r2, [r3, #58]	; 0x3a
            gRFAL.TxRx.status = ERR_BUSY;
 801608e:	4b1c      	ldr	r3, [pc, #112]	; (8016100 <rfalErrorHandling+0x104>)
 8016090:	2202      	movs	r2, #2
 8016092:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8016094:	4b1a      	ldr	r3, [pc, #104]	; (8016100 <rfalErrorHandling+0x104>)
 8016096:	2253      	movs	r2, #83	; 0x53
 8016098:	751a      	strb	r2, [r3, #20]
 801609a:	e02e      	b.n	80160fa <rfalErrorHandling+0xfe>
    }

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 801609c:	4b18      	ldr	r3, [pc, #96]	; (8016100 <rfalErrorHandling+0x104>)
 801609e:	785b      	ldrb	r3, [r3, #1]
 80160a0:	2b01      	cmp	r3, #1
 80160a2:	d12a      	bne.n	80160fa <rfalErrorHandling+0xfe>
        /*******************************************************************************/
        /* If we received one incomplete byte (not a block and a incomplete byte at    *
         * the end) we will raise a specific error ( support for T2T 4 bit ACK / NAK )   *
         * Otherwise just leave it as an CRC/FRAMING/PAR error                         */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 80160a4:	4b16      	ldr	r3, [pc, #88]	; (8016100 <rfalErrorHandling+0x104>)
 80160a6:	8adb      	ldrh	r3, [r3, #22]
 80160a8:	2b1b      	cmp	r3, #27
 80160aa:	d003      	beq.n	80160b4 <rfalErrorHandling+0xb8>
 80160ac:	4b14      	ldr	r3, [pc, #80]	; (8016100 <rfalErrorHandling+0x104>)
 80160ae:	8adb      	ldrh	r3, [r3, #22]
 80160b0:	2b15      	cmp	r3, #21
 80160b2:	d122      	bne.n	80160fa <rfalErrorHandling+0xfe>
        {
            if( rfalFIFOStatusIsIncompleteByte() && (fifoBytesToRead == RFAL_NFC_RX_INCOMPLETE_LEN) )
 80160b4:	f000 fe92 	bl	8016ddc <rfalFIFOStatusIsIncompleteByte>
 80160b8:	4603      	mov	r3, r0
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d01d      	beq.n	80160fa <rfalErrorHandling+0xfe>
 80160be:	79fb      	ldrb	r3, [r7, #7]
 80160c0:	2b01      	cmp	r3, #1
 80160c2:	d11a      	bne.n	80160fa <rfalErrorHandling+0xfe>
            {
                st25r3911ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 80160c4:	4b0e      	ldr	r3, [pc, #56]	; (8016100 <rfalErrorHandling+0x104>)
 80160c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160c8:	79fa      	ldrb	r2, [r7, #7]
 80160ca:	4611      	mov	r1, r2
 80160cc:	4618      	mov	r0, r3
 80160ce:	f7ed fd99 	bl	8003c04 <st25r3911ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 80160d2:	4b0b      	ldr	r3, [pc, #44]	; (8016100 <rfalErrorHandling+0x104>)
 80160d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d007      	beq.n	80160ea <rfalErrorHandling+0xee>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 80160da:	f000 fea3 	bl	8016e24 <rfalFIFOGetNumIncompleteBits>
 80160de:	4603      	mov	r3, r0
 80160e0:	461a      	mov	r2, r3
 80160e2:	4b07      	ldr	r3, [pc, #28]	; (8016100 <rfalErrorHandling+0x104>)
 80160e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160e6:	b292      	uxth	r2, r2
 80160e8:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 80160ea:	4b05      	ldr	r3, [pc, #20]	; (8016100 <rfalErrorHandling+0x104>)
 80160ec:	2228      	movs	r2, #40	; 0x28
 80160ee:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80160f0:	4b03      	ldr	r3, [pc, #12]	; (8016100 <rfalErrorHandling+0x104>)
 80160f2:	225a      	movs	r2, #90	; 0x5a
 80160f4:	751a      	strb	r2, [r3, #20]
 80160f6:	e000      	b.n	80160fa <rfalErrorHandling+0xfe>
        return;
 80160f8:	bf00      	nop
            }
        }
    }
    
}
 80160fa:	3708      	adds	r7, #8
 80160fc:	46bd      	mov	sp, r7
 80160fe:	bd80      	pop	{r7, pc}
 8016100:	2000393c 	.word	0x2000393c

08016104 <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 8016104:	b580      	push	{r7, lr}
 8016106:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 8016108:	21e0      	movs	r1, #224	; 0xe0
 801610a:	2005      	movs	r0, #5
 801610c:	f7ed fc84 	bl	8003a18 <st25r3911ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 8016110:	2110      	movs	r1, #16
 8016112:	200b      	movs	r0, #11
 8016114:	f7ed fca3 	bl	8003a5e <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 8016118:	4b04      	ldr	r3, [pc, #16]	; (801612c <rfalCleanupTransceive+0x28>)
 801611a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801611c:	2b00      	cmp	r3, #0
 801611e:	d002      	beq.n	8016126 <rfalCleanupTransceive+0x22>
    {
        gRFAL.callbacks.postTxRx();
 8016120:	4b02      	ldr	r3, [pc, #8]	; (801612c <rfalCleanupTransceive+0x28>)
 8016122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016124:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 8016126:	bf00      	nop
 8016128:	bd80      	pop	{r7, pc}
 801612a:	bf00      	nop
 801612c:	2000393c 	.word	0x2000393c

08016130 <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b082      	sub	sp, #8
 8016134:	af00      	add	r7, sp, #0
    uint8_t  reg;
    
    /*******************************************************************************/
    /* In the EMVCo mode the NRT will continue to run.                             *
     * For the clear to stop it, the EMV mode has to be disabled before            */
    st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 8016136:	2102      	movs	r1, #2
 8016138:	2011      	movs	r0, #17
 801613a:	f7ed fc6d 	bl	8003a18 <st25r3911ClrRegisterBits>
    
    /* Reset receive logic */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 801613e:	20c2      	movs	r0, #194	; 0xc2
 8016140:	f7ed fdac 	bl	8003c9c <st25r3911ExecuteCommand>
    
    /* Reset Rx Gain */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 8016144:	20d5      	movs	r0, #213	; 0xd5
 8016146:	f7ed fda9 	bl	8003c9c <st25r3911ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 801614a:	4b42      	ldr	r3, [pc, #264]	; (8016254 <rfalPrepareTransceive+0x124>)
 801614c:	785b      	ldrb	r3, [r3, #1]
 801614e:	2b09      	cmp	r3, #9
 8016150:	d01c      	beq.n	801618c <rfalPrepareTransceive+0x5c>
 8016152:	4b40      	ldr	r3, [pc, #256]	; (8016254 <rfalPrepareTransceive+0x124>)
 8016154:	785b      	ldrb	r3, [r3, #1]
 8016156:	2b0d      	cmp	r3, #13
 8016158:	d018      	beq.n	801618c <rfalPrepareTransceive+0x5c>
    {
       /* In Passive communications General Purpose Timer is used to measure FDT Poll */
       if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 801615a:	4b3e      	ldr	r3, [pc, #248]	; (8016254 <rfalPrepareTransceive+0x124>)
 801615c:	691b      	ldr	r3, [r3, #16]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d014      	beq.n	801618c <rfalPrepareTransceive+0x5c>
       {
           /* Configure GPT to start at RX end */
           st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 8016162:	4b3c      	ldr	r3, [pc, #240]	; (8016254 <rfalPrepareTransceive+0x124>)
 8016164:	691b      	ldr	r3, [r3, #16]
 8016166:	f240 423b 	movw	r2, #1083	; 0x43b
 801616a:	4293      	cmp	r3, r2
 801616c:	d804      	bhi.n	8016178 <rfalPrepareTransceive+0x48>
 801616e:	4b39      	ldr	r3, [pc, #228]	; (8016254 <rfalPrepareTransceive+0x124>)
 8016170:	691b      	ldr	r3, [r3, #16]
 8016172:	08db      	lsrs	r3, r3, #3
 8016174:	b29b      	uxth	r3, r3
 8016176:	e005      	b.n	8016184 <rfalPrepareTransceive+0x54>
 8016178:	4b36      	ldr	r3, [pc, #216]	; (8016254 <rfalPrepareTransceive+0x124>)
 801617a:	691b      	ldr	r3, [r3, #16]
 801617c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8016180:	08db      	lsrs	r3, r3, #3
 8016182:	b29b      	uxth	r3, r3
 8016184:	2120      	movs	r1, #32
 8016186:	4618      	mov	r0, r3
 8016188:	f7ed f88c 	bl	80032a4 <st25r3911StartGPTimer_8fcs>
    
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 801618c:	4b31      	ldr	r3, [pc, #196]	; (8016254 <rfalPrepareTransceive+0x124>)
 801618e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016190:	2b00      	cmp	r3, #0
 8016192:	d002      	beq.n	801619a <rfalPrepareTransceive+0x6a>
    {
        gRFAL.callbacks.preTxRx();
 8016194:	4b2f      	ldr	r3, [pc, #188]	; (8016254 <rfalPrepareTransceive+0x124>)
 8016196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016198:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    maskInterrupts = ( ST25R3911_IRQ_MASK_FWL  | ST25R3911_IRQ_MASK_TXE  |
 801619a:	4b2f      	ldr	r3, [pc, #188]	; (8016258 <rfalPrepareTransceive+0x128>)
 801619c:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3911_REG_ISO14443A_NFC_no_tx_par_off | ST25R3911_REG_ISO14443A_NFC_no_rx_par_off | ST25R3911_REG_ISO14443A_NFC_nfc_f0_off);
 801619e:	2300      	movs	r3, #0
 80161a0:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 80161a2:	4b2c      	ldr	r3, [pc, #176]	; (8016254 <rfalPrepareTransceive+0x124>)
 80161a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161a6:	f003 0304 	and.w	r3, r3, #4
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d003      	beq.n	80161b6 <rfalPrepareTransceive+0x86>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_nfc_f0;
 80161ae:	78fb      	ldrb	r3, [r7, #3]
 80161b0:	f043 0320 	orr.w	r3, r3, #32
 80161b4:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 80161b6:	4b27      	ldr	r3, [pc, #156]	; (8016254 <rfalPrepareTransceive+0x124>)
 80161b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161ba:	f003 0310 	and.w	r3, r3, #16
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d003      	beq.n	80161ca <rfalPrepareTransceive+0x9a>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_rx_par;
 80161c2:	78fb      	ldrb	r3, [r7, #3]
 80161c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161c8:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 80161ca:	4b22      	ldr	r3, [pc, #136]	; (8016254 <rfalPrepareTransceive+0x124>)
 80161cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161ce:	f003 0320 	and.w	r3, r3, #32
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d003      	beq.n	80161de <rfalPrepareTransceive+0xae>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_tx_par;
 80161d6:	78fb      	ldrb	r3, [r7, #3]
 80161d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80161dc:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0), reg );
 80161de:	78fb      	ldrb	r3, [r7, #3]
 80161e0:	461a      	mov	r2, r3
 80161e2:	21e0      	movs	r1, #224	; 0xe0
 80161e4:	2005      	movs	r0, #5
 80161e6:	f7ed fc58 	bl	8003a9a <st25r3911ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 80161ea:	4b1a      	ldr	r3, [pc, #104]	; (8016254 <rfalPrepareTransceive+0x124>)
 80161ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161ee:	f003 0308 	and.w	r3, r3, #8
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d004      	beq.n	8016200 <rfalPrepareTransceive+0xd0>
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 80161f6:	2110      	movs	r1, #16
 80161f8:	200b      	movs	r0, #11
 80161fa:	f7ed fc0d 	bl	8003a18 <st25r3911ClrRegisterBits>
 80161fe:	e003      	b.n	8016208 <rfalPrepareTransceive+0xd8>
    }
    else
    {
        st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 8016200:	2110      	movs	r1, #16
 8016202:	200b      	movs	r0, #11
 8016204:	f7ed fc2b 	bl	8003a5e <st25r3911SetRegisterBits>
    

    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 8016208:	4b12      	ldr	r3, [pc, #72]	; (8016254 <rfalPrepareTransceive+0x124>)
 801620a:	79db      	ldrb	r3, [r3, #7]
 801620c:	2b02      	cmp	r3, #2
 801620e:	d104      	bne.n	801621a <rfalPrepareTransceive+0xea>
    {
        st25r3911SetRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 8016210:	2102      	movs	r1, #2
 8016212:	2011      	movs	r0, #17
 8016214:	f7ed fc23 	bl	8003a5e <st25r3911SetRegisterBits>
 8016218:	e003      	b.n	8016222 <rfalPrepareTransceive+0xf2>
    }
    else
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 801621a:	2102      	movs	r1, #2
 801621c:	2011      	movs	r0, #17
 801621e:	f7ed fbfb 	bl	8003a18 <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 8016222:	4b0c      	ldr	r3, [pc, #48]	; (8016254 <rfalPrepareTransceive+0x124>)
 8016224:	785b      	ldrb	r3, [r3, #1]
 8016226:	2b09      	cmp	r3, #9
 8016228:	d003      	beq.n	8016232 <rfalPrepareTransceive+0x102>
 801622a:	4b0a      	ldr	r3, [pc, #40]	; (8016254 <rfalPrepareTransceive+0x124>)
 801622c:	785b      	ldrb	r3, [r3, #1]
 801622e:	2b0d      	cmp	r3, #13
 8016230:	d103      	bne.n	801623a <rfalPrepareTransceive+0x10a>
    {
        maskInterrupts |= ( ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC );
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8016238:	607b      	str	r3, [r7, #4]
    }
    
    
    /*******************************************************************************/
    /* clear and enable these interrupts */
    st25r3911GetInterrupt( maskInterrupts );
 801623a:	6878      	ldr	r0, [r7, #4]
 801623c:	f7ed ff24 	bl	8004088 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( maskInterrupts );
 8016240:	6878      	ldr	r0, [r7, #4]
 8016242:	f7ed ff5d 	bl	8004100 <st25r3911EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 8016246:	f000 fdb1 	bl	8016dac <rfalFIFOStatusClear>
}
 801624a:	bf00      	nop
 801624c:	3708      	adds	r7, #8
 801624e:	46bd      	mov	sp, r7
 8016250:	bd80      	pop	{r7, pc}
 8016252:	bf00      	nop
 8016254:	2000393c 	.word	0x2000393c
 8016258:	00f04078 	.word	0x00f04078

0801625c <rfalTransceiveTx>:

/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 801625c:	b5b0      	push	{r4, r5, r7, lr}
 801625e:	b08a      	sub	sp, #40	; 0x28
 8016260:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 8016262:	2300      	movs	r3, #0
 8016264:	81fb      	strh	r3, [r7, #14]
    NO_WARNING(ret);
    
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 8016266:	2300      	movs	r3, #0
 8016268:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 801626a:	4b95      	ldr	r3, [pc, #596]	; (80164c0 <rfalTransceiveTx+0x264>)
 801626c:	7d1a      	ldrb	r2, [r3, #20]
 801626e:	4b94      	ldr	r3, [pc, #592]	; (80164c0 <rfalTransceiveTx+0x264>)
 8016270:	7d5b      	ldrb	r3, [r3, #21]
 8016272:	429a      	cmp	r2, r3
 8016274:	d003      	beq.n	801627e <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 8016276:	4b92      	ldr	r3, [pc, #584]	; (80164c0 <rfalTransceiveTx+0x264>)
 8016278:	7d1a      	ldrb	r2, [r3, #20]
 801627a:	4b91      	ldr	r3, [pc, #580]	; (80164c0 <rfalTransceiveTx+0x264>)
 801627c:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 801627e:	4b90      	ldr	r3, [pc, #576]	; (80164c0 <rfalTransceiveTx+0x264>)
 8016280:	7d1b      	ldrb	r3, [r3, #20]
 8016282:	3b0b      	subs	r3, #11
 8016284:	2b08      	cmp	r3, #8
 8016286:	f200 8217 	bhi.w	80166b8 <rfalTransceiveTx+0x45c>
 801628a:	a201      	add	r2, pc, #4	; (adr r2, 8016290 <rfalTransceiveTx+0x34>)
 801628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016290:	080162b5 	.word	0x080162b5
 8016294:	080162bb 	.word	0x080162bb
 8016298:	080162d9 	.word	0x080162d9
 801629c:	08016301 	.word	0x08016301
 80162a0:	08016451 	.word	0x08016451
 80162a4:	0801648d 	.word	0x0801648d
 80162a8:	080165d3 	.word	0x080165d3
 80162ac:	08016649 	.word	0x08016649
 80162b0:	0801668f 	.word	0x0801668f
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 80162b4:	4b82      	ldr	r3, [pc, #520]	; (80164c0 <rfalTransceiveTx+0x264>)
 80162b6:	220c      	movs	r2, #12
 80162b8:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 80162ba:	f7ff fbd7 	bl	8015a6c <rfalIsGTExpired>
 80162be:	4603      	mov	r3, r0
 80162c0:	f083 0301 	eor.w	r3, r3, #1
 80162c4:	b2db      	uxtb	r3, r3
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	f040 81fd 	bne.w	80166c6 <rfalTransceiveTx+0x46a>
            {
                break;
            }
            
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 80162cc:	4b7c      	ldr	r3, [pc, #496]	; (80164c0 <rfalTransceiveTx+0x264>)
 80162ce:	2200      	movs	r2, #0
 80162d0:	641a      	str	r2, [r3, #64]	; 0x40
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 80162d2:	4b7b      	ldr	r3, [pc, #492]	; (80164c0 <rfalTransceiveTx+0x264>)
 80162d4:	220d      	movs	r2, #13
 80162d6:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 80162d8:	4b79      	ldr	r3, [pc, #484]	; (80164c0 <rfalTransceiveTx+0x264>)
 80162da:	785b      	ldrb	r3, [r3, #1]
 80162dc:	2b09      	cmp	r3, #9
 80162de:	d00c      	beq.n	80162fa <rfalTransceiveTx+0x9e>
 80162e0:	4b77      	ldr	r3, [pc, #476]	; (80164c0 <rfalTransceiveTx+0x264>)
 80162e2:	785b      	ldrb	r3, [r3, #1]
 80162e4:	2b0d      	cmp	r3, #13
 80162e6:	d008      	beq.n	80162fa <rfalTransceiveTx+0x9e>
            {
                if( st25r3911IsGPTRunning() )
 80162e8:	2204      	movs	r2, #4
 80162ea:	2104      	movs	r1, #4
 80162ec:	202b      	movs	r0, #43	; 0x2b
 80162ee:	f7ed f80d 	bl	800330c <st25r3911CheckReg>
 80162f2:	4603      	mov	r3, r0
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	f040 81e8 	bne.w	80166ca <rfalTransceiveTx+0x46e>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 80162fa:	4b71      	ldr	r3, [pc, #452]	; (80164c0 <rfalTransceiveTx+0x264>)
 80162fc:	220e      	movs	r2, #14
 80162fe:	751a      	strb	r2, [r3, #20]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 8016300:	f7ff ff16 	bl	8016130 <rfalPrepareTransceive>

            /* Calculate when Water Level Interrupt will be triggered */
            gRFAL.fifo.expWL = (uint16_t)( st25r3911CheckReg( ST25R3911_REG_IO_CONF1, ST25R3911_REG_IO_CONF1_fifo_lt, ST25R3911_REG_IO_CONF1_fifo_lt_16bytes) ? RFAL_FIFO_OUT_LT_16 : RFAL_FIFO_OUT_LT_32 );
 8016304:	2210      	movs	r2, #16
 8016306:	2110      	movs	r1, #16
 8016308:	2000      	movs	r0, #0
 801630a:	f7ec ffff 	bl	800330c <st25r3911CheckReg>
 801630e:	4603      	mov	r3, r0
 8016310:	2b00      	cmp	r3, #0
 8016312:	d001      	beq.n	8016318 <rfalTransceiveTx+0xbc>
 8016314:	2250      	movs	r2, #80	; 0x50
 8016316:	e000      	b.n	801631a <rfalTransceiveTx+0xbe>
 8016318:	2240      	movs	r2, #64	; 0x40
 801631a:	4b69      	ldr	r3, [pc, #420]	; (80164c0 <rfalTransceiveTx+0x264>)
 801631c:	871a      	strh	r2, [r3, #56]	; 0x38
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 801631e:	4b68      	ldr	r3, [pc, #416]	; (80164c0 <rfalTransceiveTx+0x264>)
 8016320:	785b      	ldrb	r3, [r3, #1]
 8016322:	2b07      	cmp	r3, #7
 8016324:	d003      	beq.n	801632e <rfalTransceiveTx+0xd2>
 8016326:	4b66      	ldr	r3, [pc, #408]	; (80164c0 <rfalTransceiveTx+0x264>)
 8016328:	785b      	ldrb	r3, [r3, #1]
 801632a:	2b08      	cmp	r3, #8
 801632c:	d150      	bne.n	80163d0 <rfalTransceiveTx+0x174>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3911WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
            #endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 801632e:	4b64      	ldr	r3, [pc, #400]	; (80164c0 <rfalTransceiveTx+0x264>)
 8016330:	2200      	movs	r2, #0
 8016332:	f8a3 23c8 	strh.w	r2, [r3, #968]	; 0x3c8
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8016336:	4b62      	ldr	r3, [pc, #392]	; (80164c0 <rfalTransceiveTx+0x264>)
 8016338:	69d8      	ldr	r0, [r3, #28]
 801633a:	4b61      	ldr	r3, [pc, #388]	; (80164c0 <rfalTransceiveTx+0x264>)
 801633c:	8c1b      	ldrh	r3, [r3, #32]
 801633e:	3307      	adds	r3, #7
 8016340:	08db      	lsrs	r3, r3, #3
 8016342:	b299      	uxth	r1, r3
 8016344:	4b5e      	ldr	r3, [pc, #376]	; (80164c0 <rfalTransceiveTx+0x264>)
 8016346:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801634a:	f003 0301 	and.w	r3, r3, #1
 801634e:	2b00      	cmp	r3, #0
 8016350:	bf0c      	ite	eq
 8016352:	2301      	moveq	r3, #1
 8016354:	2300      	movne	r3, #0
 8016356:	b2da      	uxtb	r2, r3
 8016358:	4b59      	ldr	r3, [pc, #356]	; (80164c0 <rfalTransceiveTx+0x264>)
 801635a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801635e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016362:	2b00      	cmp	r3, #0
 8016364:	bf0c      	ite	eq
 8016366:	2301      	moveq	r3, #1
 8016368:	2300      	movne	r3, #0
 801636a:	b2dc      	uxtb	r4, r3
 801636c:	4b54      	ldr	r3, [pc, #336]	; (80164c0 <rfalTransceiveTx+0x264>)
 801636e:	785b      	ldrb	r3, [r3, #1]
 8016370:	2b08      	cmp	r3, #8
 8016372:	bf0c      	ite	eq
 8016374:	2301      	moveq	r3, #1
 8016376:	2300      	movne	r3, #0
 8016378:	b2db      	uxtb	r3, r3
 801637a:	4d52      	ldr	r5, [pc, #328]	; (80164c4 <rfalTransceiveTx+0x268>)
 801637c:	9505      	str	r5, [sp, #20]
 801637e:	2560      	movs	r5, #96	; 0x60
 8016380:	9504      	str	r5, [sp, #16]
 8016382:	4d51      	ldr	r5, [pc, #324]	; (80164c8 <rfalTransceiveTx+0x26c>)
 8016384:	9503      	str	r5, [sp, #12]
 8016386:	4d51      	ldr	r5, [pc, #324]	; (80164cc <rfalTransceiveTx+0x270>)
 8016388:	9502      	str	r5, [sp, #8]
 801638a:	4d51      	ldr	r5, [pc, #324]	; (80164d0 <rfalTransceiveTx+0x274>)
 801638c:	9501      	str	r5, [sp, #4]
 801638e:	9300      	str	r3, [sp, #0]
 8016390:	4623      	mov	r3, r4
 8016392:	f7f6 fff7 	bl	800d384 <iso15693VCDCode>
 8016396:	4603      	mov	r3, r0
 8016398:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3911_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 801639a:	89fb      	ldrh	r3, [r7, #14]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d009      	beq.n	80163b4 <rfalTransceiveTx+0x158>
 80163a0:	89fb      	ldrh	r3, [r7, #14]
 80163a2:	2b0d      	cmp	r3, #13
 80163a4:	d006      	beq.n	80163b4 <rfalTransceiveTx+0x158>
                {
                    gRFAL.TxRx.status = ret;
 80163a6:	4a46      	ldr	r2, [pc, #280]	; (80164c0 <rfalTransceiveTx+0x264>)
 80163a8:	89fb      	ldrh	r3, [r7, #14]
 80163aa:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 80163ac:	4b44      	ldr	r3, [pc, #272]	; (80164c0 <rfalTransceiveTx+0x264>)
 80163ae:	2213      	movs	r2, #19
 80163b0:	751a      	strb	r2, [r3, #20]
                    break;
 80163b2:	e191      	b.n	80166d8 <rfalTransceiveTx+0x47c>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 80163b4:	4b42      	ldr	r3, [pc, #264]	; (80164c0 <rfalTransceiveTx+0x264>)
 80163b6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80163b8:	00db      	lsls	r3, r3, #3
 80163ba:	4618      	mov	r0, r3
 80163bc:	f7ed f89b 	bl	80034f6 <st25r3911SetNumTxBits>

                /* Load FIFO with coded bytes */
                /* TODO: check bytesWritten does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)gRFAL.fifo.bytesWritten );
 80163c0:	4b3f      	ldr	r3, [pc, #252]	; (80164c0 <rfalTransceiveTx+0x264>)
 80163c2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80163c4:	b2db      	uxtb	r3, r3
 80163c6:	4619      	mov	r1, r3
 80163c8:	483f      	ldr	r0, [pc, #252]	; (80164c8 <rfalTransceiveTx+0x26c>)
 80163ca:	f7ed fbcf 	bl	8003b6c <st25r3911WriteFifo>
 80163ce:	e01c      	b.n	801640a <rfalTransceiveTx+0x1ae>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 80163d0:	4b3b      	ldr	r3, [pc, #236]	; (80164c0 <rfalTransceiveTx+0x264>)
 80163d2:	8c1b      	ldrh	r3, [r3, #32]
 80163d4:	3307      	adds	r3, #7
 80163d6:	08db      	lsrs	r3, r3, #3
 80163d8:	b29a      	uxth	r2, r3
 80163da:	4b39      	ldr	r3, [pc, #228]	; (80164c0 <rfalTransceiveTx+0x264>)
 80163dc:	875a      	strh	r2, [r3, #58]	; 0x3a
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 80163de:	4b38      	ldr	r3, [pc, #224]	; (80164c0 <rfalTransceiveTx+0x264>)
 80163e0:	8c1b      	ldrh	r3, [r3, #32]
 80163e2:	4618      	mov	r0, r3
 80163e4:	f7ed f887 	bl	80034f6 <st25r3911SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3911_FIFO_DEPTH );
 80163e8:	4b35      	ldr	r3, [pc, #212]	; (80164c0 <rfalTransceiveTx+0x264>)
 80163ea:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80163ec:	2b60      	cmp	r3, #96	; 0x60
 80163ee:	bf28      	it	cs
 80163f0:	2360      	movcs	r3, #96	; 0x60
 80163f2:	b29a      	uxth	r2, r3
 80163f4:	4b32      	ldr	r3, [pc, #200]	; (80164c0 <rfalTransceiveTx+0x264>)
 80163f6:	879a      	strh	r2, [r3, #60]	; 0x3c
                st25r3911WriteFifo( gRFAL.TxRx.ctx.txBuf, (uint8_t)gRFAL.fifo.bytesWritten );
 80163f8:	4b31      	ldr	r3, [pc, #196]	; (80164c0 <rfalTransceiveTx+0x264>)
 80163fa:	69db      	ldr	r3, [r3, #28]
 80163fc:	4a30      	ldr	r2, [pc, #192]	; (80164c0 <rfalTransceiveTx+0x264>)
 80163fe:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8016400:	b2d2      	uxtb	r2, r2
 8016402:	4611      	mov	r1, r2
 8016404:	4618      	mov	r0, r3
 8016406:	f7ed fbb1 	bl	8003b6c <st25r3911WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx(); 
 801640a:	4b2d      	ldr	r3, [pc, #180]	; (80164c0 <rfalTransceiveTx+0x264>)
 801640c:	795b      	ldrb	r3, [r3, #5]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d005      	beq.n	801641e <rfalTransceiveTx+0x1c2>
 8016412:	4b2b      	ldr	r3, [pc, #172]	; (80164c0 <rfalTransceiveTx+0x264>)
 8016414:	795b      	ldrb	r3, [r3, #5]
 8016416:	4619      	mov	r1, r3
 8016418:	2001      	movs	r0, #1
 801641a:	f7ed fa69 	bl	80038f0 <st25r3911WriteTestRegister>
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 801641e:	4b28      	ldr	r3, [pc, #160]	; (80164c0 <rfalTransceiveTx+0x264>)
 8016420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016422:	f003 0301 	and.w	r3, r3, #1
 8016426:	2b00      	cmp	r3, #0
 8016428:	d003      	beq.n	8016432 <rfalTransceiveTx+0x1d6>
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITHOUT_CRC );
 801642a:	20c5      	movs	r0, #197	; 0xc5
 801642c:	f7ed fc36 	bl	8003c9c <st25r3911ExecuteCommand>
 8016430:	e002      	b.n	8016438 <rfalTransceiveTx+0x1dc>
            }
            else
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITH_CRC );
 8016432:	20c4      	movs	r0, #196	; 0xc4
 8016434:	f7ed fc32 	bl	8003c9c <st25r3911ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8016438:	4b21      	ldr	r3, [pc, #132]	; (80164c0 <rfalTransceiveTx+0x264>)
 801643a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801643c:	4b20      	ldr	r3, [pc, #128]	; (80164c0 <rfalTransceiveTx+0x264>)
 801643e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8016440:	429a      	cmp	r2, r3
 8016442:	d201      	bcs.n	8016448 <rfalTransceiveTx+0x1ec>
 8016444:	220f      	movs	r2, #15
 8016446:	e000      	b.n	801644a <rfalTransceiveTx+0x1ee>
 8016448:	2211      	movs	r2, #17
 801644a:	4b1d      	ldr	r3, [pc, #116]	; (80164c0 <rfalTransceiveTx+0x264>)
 801644c:	751a      	strb	r2, [r3, #20]
            break;
 801644e:	e143      	b.n	80166d8 <rfalTransceiveTx+0x47c>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );            
 8016450:	2048      	movs	r0, #72	; 0x48
 8016452:	f7ed fe19 	bl	8004088 <st25r3911GetInterrupt>
 8016456:	4603      	mov	r3, r0
 8016458:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 801645a:	68bb      	ldr	r3, [r7, #8]
 801645c:	2b00      	cmp	r3, #0
 801645e:	f000 8136 	beq.w	80166ce <rfalTransceiveTx+0x472>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_TXE) == 0U) )
 8016462:	68bb      	ldr	r3, [r7, #8]
 8016464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016468:	2b00      	cmp	r3, #0
 801646a:	d008      	beq.n	801647e <rfalTransceiveTx+0x222>
 801646c:	68bb      	ldr	r3, [r7, #8]
 801646e:	f003 0308 	and.w	r3, r3, #8
 8016472:	2b00      	cmp	r3, #0
 8016474:	d103      	bne.n	801647e <rfalTransceiveTx+0x222>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 8016476:	4b12      	ldr	r3, [pc, #72]	; (80164c0 <rfalTransceiveTx+0x264>)
 8016478:	2210      	movs	r2, #16
 801647a:	751a      	strb	r2, [r3, #20]
 801647c:	e006      	b.n	801648c <rfalTransceiveTx+0x230>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 801647e:	4b10      	ldr	r3, [pc, #64]	; (80164c0 <rfalTransceiveTx+0x264>)
 8016480:	2203      	movs	r2, #3
 8016482:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8016484:	4b0e      	ldr	r3, [pc, #56]	; (80164c0 <rfalTransceiveTx+0x264>)
 8016486:	2213      	movs	r2, #19
 8016488:	751a      	strb	r2, [r3, #20]
                break;
 801648a:	e125      	b.n	80166d8 <rfalTransceiveTx+0x47c>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 801648c:	4b0c      	ldr	r3, [pc, #48]	; (80164c0 <rfalTransceiveTx+0x264>)
 801648e:	785b      	ldrb	r3, [r3, #1]
 8016490:	2b07      	cmp	r3, #7
 8016492:	d003      	beq.n	801649c <rfalTransceiveTx+0x240>
 8016494:	4b0a      	ldr	r3, [pc, #40]	; (80164c0 <rfalTransceiveTx+0x264>)
 8016496:	785b      	ldrb	r3, [r3, #1]
 8016498:	2b08      	cmp	r3, #8
 801649a:	d16e      	bne.n	801657a <rfalTransceiveTx+0x31e>
            {
                uint16_t maxLen;
                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 801649c:	4b08      	ldr	r3, [pc, #32]	; (80164c0 <rfalTransceiveTx+0x264>)
 801649e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80164a0:	461a      	mov	r2, r3
 80164a2:	4b07      	ldr	r3, [pc, #28]	; (80164c0 <rfalTransceiveTx+0x264>)
 80164a4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80164a6:	1ad3      	subs	r3, r2, r3
 80164a8:	4a05      	ldr	r2, [pc, #20]	; (80164c0 <rfalTransceiveTx+0x264>)
 80164aa:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 80164ac:	4293      	cmp	r3, r2
 80164ae:	da11      	bge.n	80164d4 <rfalTransceiveTx+0x278>
 80164b0:	4b03      	ldr	r3, [pc, #12]	; (80164c0 <rfalTransceiveTx+0x264>)
 80164b2:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80164b4:	4b02      	ldr	r3, [pc, #8]	; (80164c0 <rfalTransceiveTx+0x264>)
 80164b6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80164b8:	1ad3      	subs	r3, r2, r3
 80164ba:	b29b      	uxth	r3, r3
 80164bc:	e00c      	b.n	80164d8 <rfalTransceiveTx+0x27c>
 80164be:	bf00      	nop
 80164c0:	2000393c 	.word	0x2000393c
 80164c4:	20003978 	.word	0x20003978
 80164c8:	20003afc 	.word	0x20003afc
 80164cc:	20003d04 	.word	0x20003d04
 80164d0:	20003976 	.word	0x20003976
 80164d4:	4b82      	ldr	r3, [pc, #520]	; (80166e0 <rfalTransceiveTx+0x484>)
 80164d6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80164d8:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 80164da:	89bb      	ldrh	r3, [r7, #12]
 80164dc:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80164e0:	bf28      	it	cs
 80164e2:	f44f 7302 	movcs.w	r3, #520	; 0x208
 80164e6:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 80164e8:	2300      	movs	r3, #0
 80164ea:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 80164ec:	4b7c      	ldr	r3, [pc, #496]	; (80166e0 <rfalTransceiveTx+0x484>)
 80164ee:	69d8      	ldr	r0, [r3, #28]
 80164f0:	4b7b      	ldr	r3, [pc, #492]	; (80166e0 <rfalTransceiveTx+0x484>)
 80164f2:	8c1b      	ldrh	r3, [r3, #32]
 80164f4:	3307      	adds	r3, #7
 80164f6:	08db      	lsrs	r3, r3, #3
 80164f8:	b299      	uxth	r1, r3
 80164fa:	4b79      	ldr	r3, [pc, #484]	; (80166e0 <rfalTransceiveTx+0x484>)
 80164fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016500:	f003 0301 	and.w	r3, r3, #1
 8016504:	2b00      	cmp	r3, #0
 8016506:	bf0c      	ite	eq
 8016508:	2301      	moveq	r3, #1
 801650a:	2300      	movne	r3, #0
 801650c:	b2dc      	uxtb	r4, r3
 801650e:	4b74      	ldr	r3, [pc, #464]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016510:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016518:	2b00      	cmp	r3, #0
 801651a:	bf0c      	ite	eq
 801651c:	2301      	moveq	r3, #1
 801651e:	2300      	movne	r3, #0
 8016520:	b2dd      	uxtb	r5, r3
 8016522:	4b6f      	ldr	r3, [pc, #444]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016524:	785b      	ldrb	r3, [r3, #1]
 8016526:	2b08      	cmp	r3, #8
 8016528:	bf0c      	ite	eq
 801652a:	2301      	moveq	r3, #1
 801652c:	2300      	movne	r3, #0
 801652e:	b2db      	uxtb	r3, r3
 8016530:	1dba      	adds	r2, r7, #6
 8016532:	9205      	str	r2, [sp, #20]
 8016534:	89ba      	ldrh	r2, [r7, #12]
 8016536:	9204      	str	r2, [sp, #16]
 8016538:	4a6a      	ldr	r2, [pc, #424]	; (80166e4 <rfalTransceiveTx+0x488>)
 801653a:	9203      	str	r2, [sp, #12]
 801653c:	4a6a      	ldr	r2, [pc, #424]	; (80166e8 <rfalTransceiveTx+0x48c>)
 801653e:	9202      	str	r2, [sp, #8]
 8016540:	4a6a      	ldr	r2, [pc, #424]	; (80166ec <rfalTransceiveTx+0x490>)
 8016542:	9201      	str	r2, [sp, #4]
 8016544:	9300      	str	r3, [sp, #0]
 8016546:	462b      	mov	r3, r5
 8016548:	4622      	mov	r2, r4
 801654a:	f7f6 ff1b 	bl	800d384 <iso15693VCDCode>
 801654e:	4603      	mov	r3, r0
 8016550:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 8016552:	89fb      	ldrh	r3, [r7, #14]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d009      	beq.n	801656c <rfalTransceiveTx+0x310>
 8016558:	89fb      	ldrh	r3, [r7, #14]
 801655a:	2b0d      	cmp	r3, #13
 801655c:	d006      	beq.n	801656c <rfalTransceiveTx+0x310>
                {
                    gRFAL.TxRx.status = ret;
 801655e:	4a60      	ldr	r2, [pc, #384]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016560:	89fb      	ldrh	r3, [r7, #14]
 8016562:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8016564:	4b5e      	ldr	r3, [pc, #376]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016566:	2213      	movs	r2, #19
 8016568:	751a      	strb	r2, [r3, #20]
                    break;
 801656a:	e0b5      	b.n	80166d8 <rfalTransceiveTx+0x47c>
                }

                /* Load FIFO with coded bytes */
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)tmp );
 801656c:	88fb      	ldrh	r3, [r7, #6]
 801656e:	b2db      	uxtb	r3, r3
 8016570:	4619      	mov	r1, r3
 8016572:	485c      	ldr	r0, [pc, #368]	; (80166e4 <rfalTransceiveTx+0x488>)
 8016574:	f7ed fafa 	bl	8003b6c <st25r3911WriteFifo>
            {
 8016578:	e018      	b.n	80165ac <rfalTransceiveTx+0x350>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 801657a:	4b59      	ldr	r3, [pc, #356]	; (80166e0 <rfalTransceiveTx+0x484>)
 801657c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801657e:	461a      	mov	r2, r3
 8016580:	4b57      	ldr	r3, [pc, #348]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016582:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8016584:	4619      	mov	r1, r3
 8016586:	4b56      	ldr	r3, [pc, #344]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016588:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801658a:	1acb      	subs	r3, r1, r3
 801658c:	4293      	cmp	r3, r2
 801658e:	bfa8      	it	ge
 8016590:	4613      	movge	r3, r2
 8016592:	b29b      	uxth	r3, r3
 8016594:	80fb      	strh	r3, [r7, #6]
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], (uint8_t)tmp );
 8016596:	4b52      	ldr	r3, [pc, #328]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016598:	69db      	ldr	r3, [r3, #28]
 801659a:	4a51      	ldr	r2, [pc, #324]	; (80166e0 <rfalTransceiveTx+0x484>)
 801659c:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 801659e:	4413      	add	r3, r2
 80165a0:	88fa      	ldrh	r2, [r7, #6]
 80165a2:	b2d2      	uxtb	r2, r2
 80165a4:	4611      	mov	r1, r2
 80165a6:	4618      	mov	r0, r3
 80165a8:	f7ed fae0 	bl	8003b6c <st25r3911WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 80165ac:	4b4c      	ldr	r3, [pc, #304]	; (80166e0 <rfalTransceiveTx+0x484>)
 80165ae:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80165b0:	88fb      	ldrh	r3, [r7, #6]
 80165b2:	4413      	add	r3, r2
 80165b4:	b29a      	uxth	r2, r3
 80165b6:	4b4a      	ldr	r3, [pc, #296]	; (80166e0 <rfalTransceiveTx+0x484>)
 80165b8:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 80165ba:	4b49      	ldr	r3, [pc, #292]	; (80166e0 <rfalTransceiveTx+0x484>)
 80165bc:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80165be:	4b48      	ldr	r3, [pc, #288]	; (80166e0 <rfalTransceiveTx+0x484>)
 80165c0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80165c2:	429a      	cmp	r2, r3
 80165c4:	d201      	bcs.n	80165ca <rfalTransceiveTx+0x36e>
 80165c6:	220f      	movs	r2, #15
 80165c8:	e000      	b.n	80165cc <rfalTransceiveTx+0x370>
 80165ca:	2211      	movs	r2, #17
 80165cc:	4b44      	ldr	r3, [pc, #272]	; (80166e0 <rfalTransceiveTx+0x484>)
 80165ce:	751a      	strb	r2, [r3, #20]
            break;
 80165d0:	e082      	b.n	80166d8 <rfalTransceiveTx+0x47c>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );
 80165d2:	2048      	movs	r0, #72	; 0x48
 80165d4:	f7ed fd58 	bl	8004088 <st25r3911GetInterrupt>
 80165d8:	4603      	mov	r3, r0
 80165da:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 80165dc:	68bb      	ldr	r3, [r7, #8]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d077      	beq.n	80166d2 <rfalTransceiveTx+0x476>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3911_IRQ_MASK_TXE) != 0U )
 80165e2:	68bb      	ldr	r3, [r7, #8]
 80165e4:	f003 0308 	and.w	r3, r3, #8
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d021      	beq.n	8016630 <rfalTransceiveTx+0x3d4>
            {
                /* In Active comm start SW timer to measure FWT */
                if( rfalIsModeActiveComm( gRFAL.mode) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) ) 
 80165ec:	4b3c      	ldr	r3, [pc, #240]	; (80166e0 <rfalTransceiveTx+0x484>)
 80165ee:	785b      	ldrb	r3, [r3, #1]
 80165f0:	2b09      	cmp	r3, #9
 80165f2:	d003      	beq.n	80165fc <rfalTransceiveTx+0x3a0>
 80165f4:	4b3a      	ldr	r3, [pc, #232]	; (80166e0 <rfalTransceiveTx+0x484>)
 80165f6:	785b      	ldrb	r3, [r3, #1]
 80165f8:	2b0d      	cmp	r3, #13
 80165fa:	d115      	bne.n	8016628 <rfalTransceiveTx+0x3cc>
 80165fc:	4b38      	ldr	r3, [pc, #224]	; (80166e0 <rfalTransceiveTx+0x484>)
 80165fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016604:	d010      	beq.n	8016628 <rfalTransceiveTx+0x3cc>
 8016606:	4b36      	ldr	r3, [pc, #216]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801660a:	2b00      	cmp	r3, #0
 801660c:	d00c      	beq.n	8016628 <rfalTransceiveTx+0x3cc>
                {
                    rfalTimerStart( gRFAL.tmr.FWT, rfalConv1fcToMs( gRFAL.TxRx.ctx.fwt ) );
 801660e:	4b34      	ldr	r3, [pc, #208]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016612:	4a37      	ldr	r2, [pc, #220]	; (80166f0 <rfalTransceiveTx+0x494>)
 8016614:	fba2 2303 	umull	r2, r3, r2, r3
 8016618:	0b1b      	lsrs	r3, r3, #12
 801661a:	b29b      	uxth	r3, r3
 801661c:	4618      	mov	r0, r3
 801661e:	f7ed fdbb 	bl	8004198 <timerCalculateTimer>
 8016622:	4603      	mov	r3, r0
 8016624:	4a2e      	ldr	r2, [pc, #184]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016626:	6453      	str	r3, [r2, #68]	; 0x44
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 8016628:	4b2d      	ldr	r3, [pc, #180]	; (80166e0 <rfalTransceiveTx+0x484>)
 801662a:	2212      	movs	r2, #18
 801662c:	751a      	strb	r2, [r3, #20]
 801662e:	e00b      	b.n	8016648 <rfalTransceiveTx+0x3ec>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_FWL) != 0U )
 8016630:	68bb      	ldr	r3, [r7, #8]
 8016632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016636:	2b00      	cmp	r3, #0
 8016638:	d14d      	bne.n	80166d6 <rfalTransceiveTx+0x47a>
                /*******************************************************************************/
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 801663a:	4b29      	ldr	r3, [pc, #164]	; (80166e0 <rfalTransceiveTx+0x484>)
 801663c:	2203      	movs	r2, #3
 801663e:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8016640:	4b27      	ldr	r3, [pc, #156]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016642:	2213      	movs	r2, #19
 8016644:	751a      	strb	r2, [r3, #20]
               break;
 8016646:	e047      	b.n	80166d8 <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 8016648:	4b25      	ldr	r3, [pc, #148]	; (80166e0 <rfalTransceiveTx+0x484>)
 801664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801664c:	2b00      	cmp	r3, #0
 801664e:	d110      	bne.n	8016672 <rfalTransceiveTx+0x416>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 8016650:	4b23      	ldr	r3, [pc, #140]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016652:	799b      	ldrb	r3, [r3, #6]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d003      	beq.n	8016660 <rfalTransceiveTx+0x404>
 8016658:	2100      	movs	r1, #0
 801665a:	2001      	movs	r0, #1
 801665c:	f7ed f948 	bl	80038f0 <st25r3911WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 8016660:	f7ff fd50 	bl	8016104 <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 8016664:	4b1e      	ldr	r3, [pc, #120]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016666:	2200      	movs	r2, #0
 8016668:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 801666a:	4b1d      	ldr	r3, [pc, #116]	; (80166e0 <rfalTransceiveTx+0x484>)
 801666c:	2200      	movs	r2, #0
 801666e:	751a      	strb	r2, [r3, #20]
                break;
 8016670:	e032      	b.n	80166d8 <rfalTransceiveTx+0x47c>
            }
            
            rfalCheckEnableObsModeRx();
 8016672:	4b1b      	ldr	r3, [pc, #108]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016674:	799b      	ldrb	r3, [r3, #6]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d005      	beq.n	8016686 <rfalTransceiveTx+0x42a>
 801667a:	4b19      	ldr	r3, [pc, #100]	; (80166e0 <rfalTransceiveTx+0x484>)
 801667c:	799b      	ldrb	r3, [r3, #6]
 801667e:	4619      	mov	r1, r3
 8016680:	2001      	movs	r0, #1
 8016682:	f7ed f935 	bl	80038f0 <st25r3911WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 8016686:	4b16      	ldr	r3, [pc, #88]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016688:	2251      	movs	r2, #81	; 0x51
 801668a:	751a      	strb	r2, [r3, #20]
            break;
 801668c:	e024      	b.n	80166d8 <rfalTransceiveTx+0x47c>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 801668e:	4b14      	ldr	r3, [pc, #80]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016690:	8adb      	ldrh	r3, [r3, #22]
 8016692:	2b02      	cmp	r3, #2
 8016694:	d102      	bne.n	801669c <rfalTransceiveTx+0x440>
            {
                gRFAL.TxRx.status = ERR_SYSTEM;
 8016696:	4b12      	ldr	r3, [pc, #72]	; (80166e0 <rfalTransceiveTx+0x484>)
 8016698:	2208      	movs	r2, #8
 801669a:	82da      	strh	r2, [r3, #22]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 801669c:	4b10      	ldr	r3, [pc, #64]	; (80166e0 <rfalTransceiveTx+0x484>)
 801669e:	799b      	ldrb	r3, [r3, #6]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d003      	beq.n	80166ac <rfalTransceiveTx+0x450>
 80166a4:	2100      	movs	r1, #0
 80166a6:	2001      	movs	r0, #1
 80166a8:	f7ed f922 	bl	80038f0 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 80166ac:	f7ff fd2a 	bl	8016104 <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 80166b0:	4b0b      	ldr	r3, [pc, #44]	; (80166e0 <rfalTransceiveTx+0x484>)
 80166b2:	2200      	movs	r2, #0
 80166b4:	751a      	strb	r2, [r3, #20]
            break;
 80166b6:	e00f      	b.n	80166d8 <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 80166b8:	4b09      	ldr	r3, [pc, #36]	; (80166e0 <rfalTransceiveTx+0x484>)
 80166ba:	2208      	movs	r2, #8
 80166bc:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 80166be:	4b08      	ldr	r3, [pc, #32]	; (80166e0 <rfalTransceiveTx+0x484>)
 80166c0:	2213      	movs	r2, #19
 80166c2:	751a      	strb	r2, [r3, #20]
            break;
 80166c4:	e008      	b.n	80166d8 <rfalTransceiveTx+0x47c>
                break;
 80166c6:	bf00      	nop
 80166c8:	e006      	b.n	80166d8 <rfalTransceiveTx+0x47c>
                   break;
 80166ca:	bf00      	nop
 80166cc:	e004      	b.n	80166d8 <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 80166ce:	bf00      	nop
 80166d0:	e002      	b.n	80166d8 <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 80166d2:	bf00      	nop
 80166d4:	e000      	b.n	80166d8 <rfalTransceiveTx+0x47c>
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
 80166d6:	bf00      	nop
    }
}
 80166d8:	bf00      	nop
 80166da:	3710      	adds	r7, #16
 80166dc:	46bd      	mov	sp, r7
 80166de:	bdb0      	pop	{r4, r5, r7, pc}
 80166e0:	2000393c 	.word	0x2000393c
 80166e4:	20003afc 	.word	0x20003afc
 80166e8:	20003d04 	.word	0x20003d04
 80166ec:	20003976 	.word	0x20003976
 80166f0:	4d542005 	.word	0x4d542005

080166f4 <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 80166f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166f6:	b089      	sub	sp, #36	; 0x24
 80166f8:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint8_t           tmp;
    uint8_t           aux;
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 80166fa:	2300      	movs	r3, #0
 80166fc:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 80166fe:	4ba2      	ldr	r3, [pc, #648]	; (8016988 <rfalTransceiveRx+0x294>)
 8016700:	7d1a      	ldrb	r2, [r3, #20]
 8016702:	4ba1      	ldr	r3, [pc, #644]	; (8016988 <rfalTransceiveRx+0x294>)
 8016704:	7d5b      	ldrb	r3, [r3, #21]
 8016706:	429a      	cmp	r2, r3
 8016708:	d003      	beq.n	8016712 <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 801670a:	4b9f      	ldr	r3, [pc, #636]	; (8016988 <rfalTransceiveRx+0x294>)
 801670c:	7d1a      	ldrb	r2, [r3, #20]
 801670e:	4b9e      	ldr	r3, [pc, #632]	; (8016988 <rfalTransceiveRx+0x294>)
 8016710:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 8016712:	4b9d      	ldr	r3, [pc, #628]	; (8016988 <rfalTransceiveRx+0x294>)
 8016714:	7d1b      	ldrb	r3, [r3, #20]
 8016716:	3b51      	subs	r3, #81	; 0x51
 8016718:	2b09      	cmp	r3, #9
 801671a:	f200 831e 	bhi.w	8016d5a <rfalTransceiveRx+0x666>
 801671e:	a201      	add	r2, pc, #4	; (adr r2, 8016724 <rfalTransceiveRx+0x30>)
 8016720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016724:	0801674d 	.word	0x0801674d
 8016728:	08016cd7 	.word	0x08016cd7
 801672c:	08016785 	.word	0x08016785
 8016730:	08016891 	.word	0x08016891
 8016734:	08016c15 	.word	0x08016c15
 8016738:	080168e5 	.word	0x080168e5
 801673c:	080169fd 	.word	0x080169fd
 8016740:	08016d11 	.word	0x08016d11
 8016744:	08016bed 	.word	0x08016bed
 8016748:	08016cad 	.word	0x08016cad
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;    // Total bytes written on RxBuffer
 801674c:	4b8e      	ldr	r3, [pc, #568]	; (8016988 <rfalTransceiveRx+0x294>)
 801674e:	2200      	movs	r2, #0
 8016750:	879a      	strh	r2, [r3, #60]	; 0x3c
            gRFAL.fifo.bytesTotal     = 0;    // Total bytes in FIFO will now be from Rx
 8016752:	4b8d      	ldr	r3, [pc, #564]	; (8016988 <rfalTransceiveRx+0x294>)
 8016754:	2200      	movs	r2, #0
 8016756:	875a      	strh	r2, [r3, #58]	; 0x3a
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 8016758:	4b8b      	ldr	r3, [pc, #556]	; (8016988 <rfalTransceiveRx+0x294>)
 801675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801675c:	2b00      	cmp	r3, #0
 801675e:	d003      	beq.n	8016768 <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 8016760:	4b89      	ldr	r3, [pc, #548]	; (8016988 <rfalTransceiveRx+0x294>)
 8016762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016764:	2200      	movs	r2, #0
 8016766:	801a      	strh	r2, [r3, #0]
            }
            
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 8016768:	4b87      	ldr	r3, [pc, #540]	; (8016988 <rfalTransceiveRx+0x294>)
 801676a:	785b      	ldrb	r3, [r3, #1]
 801676c:	2b09      	cmp	r3, #9
 801676e:	d003      	beq.n	8016778 <rfalTransceiveRx+0x84>
 8016770:	4b85      	ldr	r3, [pc, #532]	; (8016988 <rfalTransceiveRx+0x294>)
 8016772:	785b      	ldrb	r3, [r3, #1]
 8016774:	2b0d      	cmp	r3, #13
 8016776:	d101      	bne.n	801677c <rfalTransceiveRx+0x88>
 8016778:	2252      	movs	r2, #82	; 0x52
 801677a:	e000      	b.n	801677e <rfalTransceiveRx+0x8a>
 801677c:	2253      	movs	r2, #83	; 0x53
 801677e:	4b82      	ldr	r3, [pc, #520]	; (8016988 <rfalTransceiveRx+0x294>)
 8016780:	751a      	strb	r2, [r3, #20]
            break;
 8016782:	e2fa      	b.n	8016d7a <rfalTransceiveRx+0x686>
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
        
            /*******************************************************************************/
            /* If in Active comm, Check if FWT SW timer has expired */
            if( rfalIsModeActiveComm( gRFAL.mode ) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8016784:	4b80      	ldr	r3, [pc, #512]	; (8016988 <rfalTransceiveRx+0x294>)
 8016786:	785b      	ldrb	r3, [r3, #1]
 8016788:	2b09      	cmp	r3, #9
 801678a:	d003      	beq.n	8016794 <rfalTransceiveRx+0xa0>
 801678c:	4b7e      	ldr	r3, [pc, #504]	; (8016988 <rfalTransceiveRx+0x294>)
 801678e:	785b      	ldrb	r3, [r3, #1]
 8016790:	2b0d      	cmp	r3, #13
 8016792:	d117      	bne.n	80167c4 <rfalTransceiveRx+0xd0>
 8016794:	4b7c      	ldr	r3, [pc, #496]	; (8016988 <rfalTransceiveRx+0x294>)
 8016796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801679c:	d012      	beq.n	80167c4 <rfalTransceiveRx+0xd0>
 801679e:	4b7a      	ldr	r3, [pc, #488]	; (8016988 <rfalTransceiveRx+0x294>)
 80167a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d00e      	beq.n	80167c4 <rfalTransceiveRx+0xd0>
            {
                if( rfalTimerisExpired( gRFAL.tmr.FWT ) )  
 80167a6:	4b78      	ldr	r3, [pc, #480]	; (8016988 <rfalTransceiveRx+0x294>)
 80167a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167aa:	4618      	mov	r0, r3
 80167ac:	f7ed fd02 	bl	80041b4 <timerIsExpired>
 80167b0:	4603      	mov	r3, r0
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d006      	beq.n	80167c4 <rfalTransceiveRx+0xd0>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 80167b6:	4b74      	ldr	r3, [pc, #464]	; (8016988 <rfalTransceiveRx+0x294>)
 80167b8:	2204      	movs	r2, #4
 80167ba:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80167bc:	4b72      	ldr	r3, [pc, #456]	; (8016988 <rfalTransceiveRx+0x294>)
 80167be:	225a      	movs	r2, #90	; 0x5a
 80167c0:	751a      	strb	r2, [r3, #20]
                    break;
 80167c2:	e2da      	b.n	8016d7a <rfalTransceiveRx+0x686>
                }
            }
            
            /*******************************************************************************/
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_RXS | ST25R3911_IRQ_MASK_NRE | ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_RXE) );
 80167c4:	f644 0030 	movw	r0, #18480	; 0x4830
 80167c8:	f7ed fc5e 	bl	8004088 <st25r3911GetInterrupt>
 80167cc:	4603      	mov	r3, r0
 80167ce:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 80167d0:	68bb      	ldr	r3, [r7, #8]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	f000 82c8 	beq.w	8016d68 <rfalTransceiveRx+0x674>
            /* NRE interrupt may be triggered twice                                        */
            /* Ignore NRE if is detected together with no Rx Start                         */
            /*******************************************************************************/
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode)       */
            if( ((irqs & ST25R3911_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 80167d8:	68bb      	ldr	r3, [r7, #8]
 80167da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d00b      	beq.n	80167fa <rfalTransceiveRx+0x106>
 80167e2:	68bb      	ldr	r3, [r7, #8]
 80167e4:	f003 0320 	and.w	r3, r3, #32
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d106      	bne.n	80167fa <rfalTransceiveRx+0x106>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 80167ec:	4b66      	ldr	r3, [pc, #408]	; (8016988 <rfalTransceiveRx+0x294>)
 80167ee:	2204      	movs	r2, #4
 80167f0:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80167f2:	4b65      	ldr	r3, [pc, #404]	; (8016988 <rfalTransceiveRx+0x294>)
 80167f4:	225a      	movs	r2, #90	; 0x5a
 80167f6:	751a      	strb	r2, [r3, #20]
                break;
 80167f8:	e2bf      	b.n	8016d7a <rfalTransceiveRx+0x686>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 80167fa:	68bb      	ldr	r3, [r7, #8]
 80167fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016800:	2b00      	cmp	r3, #0
 8016802:	d015      	beq.n	8016830 <rfalTransceiveRx+0x13c>
 8016804:	68bb      	ldr	r3, [r7, #8]
 8016806:	f003 0320 	and.w	r3, r3, #32
 801680a:	2b00      	cmp	r3, #0
 801680c:	d110      	bne.n	8016830 <rfalTransceiveRx+0x13c>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 801680e:	4b5e      	ldr	r3, [pc, #376]	; (8016988 <rfalTransceiveRx+0x294>)
 8016810:	785b      	ldrb	r3, [r3, #1]
 8016812:	2b09      	cmp	r3, #9
 8016814:	d003      	beq.n	801681e <rfalTransceiveRx+0x12a>
 8016816:	4b5c      	ldr	r3, [pc, #368]	; (8016988 <rfalTransceiveRx+0x294>)
 8016818:	785b      	ldrb	r3, [r3, #1]
 801681a:	2b0d      	cmp	r3, #13
 801681c:	d101      	bne.n	8016822 <rfalTransceiveRx+0x12e>
 801681e:	2204      	movs	r2, #4
 8016820:	e000      	b.n	8016824 <rfalTransceiveRx+0x130>
 8016822:	2225      	movs	r2, #37	; 0x25
 8016824:	4b58      	ldr	r3, [pc, #352]	; (8016988 <rfalTransceiveRx+0x294>)
 8016826:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016828:	4b57      	ldr	r3, [pc, #348]	; (8016988 <rfalTransceiveRx+0x294>)
 801682a:	225a      	movs	r2, #90	; 0x5a
 801682c:	751a      	strb	r2, [r3, #20]
                break;
 801682e:	e2a4      	b.n	8016d7a <rfalTransceiveRx+0x686>
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_RXS) != 0U )
 8016830:	68bb      	ldr	r3, [r7, #8]
 8016832:	f003 0320 	and.w	r3, r3, #32
 8016836:	2b00      	cmp	r3, #0
 8016838:	d015      	beq.n	8016866 <rfalTransceiveRx+0x172>
            {
                /* If we got RXS + RXE together, jump directly into RFAL_TXRX_STATE_RX_ERR_CHECK */
                if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 801683a:	68bb      	ldr	r3, [r7, #8]
 801683c:	f003 0310 	and.w	r3, r3, #16
 8016840:	2b00      	cmp	r3, #0
 8016842:	d006      	beq.n	8016852 <rfalTransceiveRx+0x15e>
                {
                    gRFAL.TxRx.rxse  = true;
 8016844:	4b50      	ldr	r3, [pc, #320]	; (8016988 <rfalTransceiveRx+0x294>)
 8016846:	2201      	movs	r2, #1
 8016848:	761a      	strb	r2, [r3, #24]
                    gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 801684a:	4b4f      	ldr	r3, [pc, #316]	; (8016988 <rfalTransceiveRx+0x294>)
 801684c:	2256      	movs	r2, #86	; 0x56
 801684e:	751a      	strb	r2, [r3, #20]
                    break;
 8016850:	e293      	b.n	8016d7a <rfalTransceiveRx+0x686>
                {
                    /*******************************************************************************/
                    /* REMARK: Silicon workaround ST25R3911 Errata #1.1                            */
                    /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                    /* Use a SW timer to handle an eventual missing RXE                            */
                    rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 8016852:	200a      	movs	r0, #10
 8016854:	f7ed fca0 	bl	8004198 <timerCalculateTimer>
 8016858:	4603      	mov	r3, r0
 801685a:	4a4b      	ldr	r2, [pc, #300]	; (8016988 <rfalTransceiveRx+0x294>)
 801685c:	6493      	str	r3, [r2, #72]	; 0x48
                    /*******************************************************************************/
                    
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 801685e:	4b4a      	ldr	r3, [pc, #296]	; (8016988 <rfalTransceiveRx+0x294>)
 8016860:	2254      	movs	r2, #84	; 0x54
 8016862:	751a      	strb	r2, [r3, #20]
 8016864:	e014      	b.n	8016890 <rfalTransceiveRx+0x19c>
                }
            }
            else if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 8016866:	68bb      	ldr	r3, [r7, #8]
 8016868:	f003 0310 	and.w	r3, r3, #16
 801686c:	2b00      	cmp	r3, #0
 801686e:	d008      	beq.n	8016882 <rfalTransceiveRx+0x18e>
                /* REMARK: Silicon workaround ST25R3911 Errata #1.9                            */
                /* ST25R3911 may indicate RXE without RXS previously, this happens upon some   */
                /* noise or incomplete byte frames with less than 4 bits                       */
                /*******************************************************************************/
                
                gRFAL.TxRx.status = ERR_IO;
 8016870:	4b45      	ldr	r3, [pc, #276]	; (8016988 <rfalTransceiveRx+0x294>)
 8016872:	2203      	movs	r2, #3
 8016874:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016876:	4b44      	ldr	r3, [pc, #272]	; (8016988 <rfalTransceiveRx+0x294>)
 8016878:	225a      	movs	r2, #90	; 0x5a
 801687a:	751a      	strb	r2, [r3, #20]
                
                rfalErrorHandling();
 801687c:	f7ff fbbe 	bl	8015ffc <rfalErrorHandling>
                break;
 8016880:	e27b      	b.n	8016d7a <rfalTransceiveRx+0x686>
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 8016882:	4b41      	ldr	r3, [pc, #260]	; (8016988 <rfalTransceiveRx+0x294>)
 8016884:	2203      	movs	r2, #3
 8016886:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016888:	4b3f      	ldr	r3, [pc, #252]	; (8016988 <rfalTransceiveRx+0x294>)
 801688a:	225a      	movs	r2, #90	; 0x5a
 801688c:	751a      	strb	r2, [r3, #20]
               break;
 801688e:	e274      	b.n	8016d7a <rfalTransceiveRx+0x686>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_RXE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_EOF) );
 8016890:	f44f 6005 	mov.w	r0, #2128	; 0x850
 8016894:	f7ed fbf8 	bl	8004088 <st25r3911GetInterrupt>
 8016898:	4603      	mov	r3, r0
 801689a:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 801689c:	68bb      	ldr	r3, [r7, #8]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d10f      	bne.n	80168c2 <rfalTransceiveRx+0x1ce>
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
                /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
                /* corrupted frames.                                                           */
                /* SW timer is used to timeout upon a missing RXE                              */
                if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 80168a2:	4b39      	ldr	r3, [pc, #228]	; (8016988 <rfalTransceiveRx+0x294>)
 80168a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80168a6:	4618      	mov	r0, r3
 80168a8:	f7ed fc84 	bl	80041b4 <timerIsExpired>
 80168ac:	4603      	mov	r3, r0
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	f000 825c 	beq.w	8016d6c <rfalTransceiveRx+0x678>
                {
                    gRFAL.TxRx.status = ERR_FRAMING;
 80168b4:	4b34      	ldr	r3, [pc, #208]	; (8016988 <rfalTransceiveRx+0x294>)
 80168b6:	2209      	movs	r2, #9
 80168b8:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80168ba:	4b33      	ldr	r3, [pc, #204]	; (8016988 <rfalTransceiveRx+0x294>)
 80168bc:	225a      	movs	r2, #90	; 0x5a
 80168be:	751a      	strb	r2, [r3, #20]
                }
                /*******************************************************************************/
                    
                break;  /* No interrupt to process */
 80168c0:	e254      	b.n	8016d6c <rfalTransceiveRx+0x678>
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 80168c2:	68bb      	ldr	r3, [r7, #8]
 80168c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d008      	beq.n	80168de <rfalTransceiveRx+0x1ea>
 80168cc:	68bb      	ldr	r3, [r7, #8]
 80168ce:	f003 0310 	and.w	r3, r3, #16
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d103      	bne.n	80168de <rfalTransceiveRx+0x1ea>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 80168d6:	4b2c      	ldr	r3, [pc, #176]	; (8016988 <rfalTransceiveRx+0x294>)
 80168d8:	2255      	movs	r2, #85	; 0x55
 80168da:	751a      	strb	r2, [r3, #20]
                break;
 80168dc:	e24d      	b.n	8016d7a <rfalTransceiveRx+0x686>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 80168de:	4b2a      	ldr	r3, [pc, #168]	; (8016988 <rfalTransceiveRx+0x294>)
 80168e0:	2256      	movs	r2, #86	; 0x56
 80168e2:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
        
            /* Retrieve and check for any error irqs */
            irqs |= st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_ERR1 | ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_COL) );
 80168e4:	4829      	ldr	r0, [pc, #164]	; (801698c <rfalTransceiveRx+0x298>)
 80168e6:	f7ed fbcf 	bl	8004088 <st25r3911GetInterrupt>
 80168ea:	4602      	mov	r2, r0
 80168ec:	68bb      	ldr	r3, [r7, #8]
 80168ee:	4313      	orrs	r3, r2
 80168f0:	60bb      	str	r3, [r7, #8]
        
            if( (irqs & ST25R3911_IRQ_MASK_ERR1) != 0U )
 80168f2:	68bb      	ldr	r3, [r7, #8]
 80168f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d008      	beq.n	801690e <rfalTransceiveRx+0x21a>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 80168fc:	4b22      	ldr	r3, [pc, #136]	; (8016988 <rfalTransceiveRx+0x294>)
 80168fe:	2209      	movs	r2, #9
 8016900:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8016902:	4b21      	ldr	r3, [pc, #132]	; (8016988 <rfalTransceiveRx+0x294>)
 8016904:	2257      	movs	r2, #87	; 0x57
 8016906:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8016908:	f7ff fb78 	bl	8015ffc <rfalErrorHandling>
                break;
 801690c:	e235      	b.n	8016d7a <rfalTransceiveRx+0x686>
            }
            /* Discard Soft Framing errors if not in EMVCo error handling */
            else if( ((irqs & ST25R3911_IRQ_MASK_ERR2) != 0U) && (gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO) )
 801690e:	68bb      	ldr	r3, [r7, #8]
 8016910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016914:	2b00      	cmp	r3, #0
 8016916:	d00c      	beq.n	8016932 <rfalTransceiveRx+0x23e>
 8016918:	4b1b      	ldr	r3, [pc, #108]	; (8016988 <rfalTransceiveRx+0x294>)
 801691a:	79db      	ldrb	r3, [r3, #7]
 801691c:	2b02      	cmp	r3, #2
 801691e:	d108      	bne.n	8016932 <rfalTransceiveRx+0x23e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 8016920:	4b19      	ldr	r3, [pc, #100]	; (8016988 <rfalTransceiveRx+0x294>)
 8016922:	2209      	movs	r2, #9
 8016924:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8016926:	4b18      	ldr	r3, [pc, #96]	; (8016988 <rfalTransceiveRx+0x294>)
 8016928:	2257      	movs	r2, #87	; 0x57
 801692a:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 801692c:	f7ff fb66 	bl	8015ffc <rfalErrorHandling>
                break;
 8016930:	e223      	b.n	8016d7a <rfalTransceiveRx+0x686>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_PAR) != 0U )
 8016932:	68bb      	ldr	r3, [r7, #8]
 8016934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016938:	2b00      	cmp	r3, #0
 801693a:	d008      	beq.n	801694e <rfalTransceiveRx+0x25a>
            {
                gRFAL.TxRx.status = ERR_PAR;
 801693c:	4b12      	ldr	r3, [pc, #72]	; (8016988 <rfalTransceiveRx+0x294>)
 801693e:	221b      	movs	r2, #27
 8016940:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8016942:	4b11      	ldr	r3, [pc, #68]	; (8016988 <rfalTransceiveRx+0x294>)
 8016944:	2257      	movs	r2, #87	; 0x57
 8016946:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8016948:	f7ff fb58 	bl	8015ffc <rfalErrorHandling>
                break;
 801694c:	e215      	b.n	8016d7a <rfalTransceiveRx+0x686>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_CRC) != 0U )
 801694e:	68bb      	ldr	r3, [r7, #8]
 8016950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016954:	2b00      	cmp	r3, #0
 8016956:	d008      	beq.n	801696a <rfalTransceiveRx+0x276>
            {
                gRFAL.TxRx.status = ERR_CRC;
 8016958:	4b0b      	ldr	r3, [pc, #44]	; (8016988 <rfalTransceiveRx+0x294>)
 801695a:	2215      	movs	r2, #21
 801695c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 801695e:	4b0a      	ldr	r3, [pc, #40]	; (8016988 <rfalTransceiveRx+0x294>)
 8016960:	2257      	movs	r2, #87	; 0x57
 8016962:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8016964:	f7ff fb4a 	bl	8015ffc <rfalErrorHandling>
                break;
 8016968:	e207      	b.n	8016d7a <rfalTransceiveRx+0x686>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_COL) != 0U )
 801696a:	68bb      	ldr	r3, [r7, #8]
 801696c:	f003 0304 	and.w	r3, r3, #4
 8016970:	2b00      	cmp	r3, #0
 8016972:	d00d      	beq.n	8016990 <rfalTransceiveRx+0x29c>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 8016974:	4b04      	ldr	r3, [pc, #16]	; (8016988 <rfalTransceiveRx+0x294>)
 8016976:	221d      	movs	r2, #29
 8016978:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 801697a:	4b03      	ldr	r3, [pc, #12]	; (8016988 <rfalTransceiveRx+0x294>)
 801697c:	2257      	movs	r2, #87	; 0x57
 801697e:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8016980:	f7ff fb3c 	bl	8015ffc <rfalErrorHandling>
                break;
 8016984:	e1f9      	b.n	8016d7a <rfalTransceiveRx+0x686>
 8016986:	bf00      	nop
 8016988:	2000393c 	.word	0x2000393c
 801698c:	00f00004 	.word	0x00f00004
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 8016990:	68bb      	ldr	r3, [r7, #8]
 8016992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016996:	2b00      	cmp	r3, #0
 8016998:	d00b      	beq.n	80169b2 <rfalTransceiveRx+0x2be>
 801699a:	68bb      	ldr	r3, [r7, #8]
 801699c:	f003 0310 	and.w	r3, r3, #16
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d106      	bne.n	80169b2 <rfalTransceiveRx+0x2be>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 80169a4:	4b9a      	ldr	r3, [pc, #616]	; (8016c10 <rfalTransceiveRx+0x51c>)
 80169a6:	2225      	movs	r2, #37	; 0x25
 80169a8:	82da      	strh	r2, [r3, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80169aa:	4b99      	ldr	r3, [pc, #612]	; (8016c10 <rfalTransceiveRx+0x51c>)
 80169ac:	225a      	movs	r2, #90	; 0x5a
 80169ae:	751a      	strb	r2, [r3, #20]
                 break;
 80169b0:	e1e3      	b.n	8016d7a <rfalTransceiveRx+0x686>
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_RXE) != 0U) || (gRFAL.TxRx.rxse) )
 80169b2:	68bb      	ldr	r3, [r7, #8]
 80169b4:	f003 0310 	and.w	r3, r3, #16
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d103      	bne.n	80169c4 <rfalTransceiveRx+0x2d0>
 80169bc:	4b94      	ldr	r3, [pc, #592]	; (8016c10 <rfalTransceiveRx+0x51c>)
 80169be:	7e1b      	ldrb	r3, [r3, #24]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d014      	beq.n	80169ee <rfalTransceiveRx+0x2fa>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 80169c4:	f000 fa0a 	bl	8016ddc <rfalFIFOStatusIsIncompleteByte>
 80169c8:	4603      	mov	r3, r0
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d003      	beq.n	80169d6 <rfalTransceiveRx+0x2e2>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 80169ce:	4b90      	ldr	r3, [pc, #576]	; (8016c10 <rfalTransceiveRx+0x51c>)
 80169d0:	2228      	movs	r2, #40	; 0x28
 80169d2:	82da      	strh	r2, [r3, #22]
 80169d4:	e007      	b.n	80169e6 <rfalTransceiveRx+0x2f2>
                }
                /* Check if the reception ends with missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 80169d6:	f000 fa13 	bl	8016e00 <rfalFIFOStatusIsMissingPar>
 80169da:	4603      	mov	r3, r0
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d002      	beq.n	80169e6 <rfalTransceiveRx+0x2f2>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 80169e0:	4b8b      	ldr	r3, [pc, #556]	; (8016c10 <rfalTransceiveRx+0x51c>)
 80169e2:	2209      	movs	r2, #9
 80169e4:	82da      	strh	r2, [r3, #22]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 80169e6:	4b8a      	ldr	r3, [pc, #552]	; (8016c10 <rfalTransceiveRx+0x51c>)
 80169e8:	2257      	movs	r2, #87	; 0x57
 80169ea:	751a      	strb	r2, [r3, #20]
 80169ec:	e006      	b.n	80169fc <rfalTransceiveRx+0x308>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 80169ee:	4b88      	ldr	r3, [pc, #544]	; (8016c10 <rfalTransceiveRx+0x51c>)
 80169f0:	2203      	movs	r2, #3
 80169f2:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80169f4:	4b86      	ldr	r3, [pc, #536]	; (8016c10 <rfalTransceiveRx+0x51c>)
 80169f6:	225a      	movs	r2, #90	; 0x5a
 80169f8:	751a      	strb	r2, [r3, #20]
                break;
 80169fa:	e1be      	b.n	8016d7a <rfalTransceiveRx+0x686>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                        
            tmp = rfalFIFOStatusGetNumBytes();
 80169fc:	f000 f9e2 	bl	8016dc4 <rfalFIFOStatusGetNumBytes>
 8016a00:	4603      	mov	r3, r0
 8016a02:	73fb      	strb	r3, [r7, #15]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 8016a04:	4b82      	ldr	r3, [pc, #520]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a08:	f003 0302 	and.w	r3, r3, #2
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d11f      	bne.n	8016a50 <rfalTransceiveRx+0x35c>
            {
                /* Check if CRC is being placed into the FIFO and if received frame was bigger than CRC */
                if( st25r3911IsCRCinFIFO() && ((gRFAL.fifo.bytesTotal + tmp) > 0U) )
 8016a10:	2240      	movs	r2, #64	; 0x40
 8016a12:	2140      	movs	r1, #64	; 0x40
 8016a14:	2009      	movs	r0, #9
 8016a16:	f7ec fc79 	bl	800330c <st25r3911CheckReg>
 8016a1a:	4603      	mov	r3, r0
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d017      	beq.n	8016a50 <rfalTransceiveRx+0x35c>
 8016a20:	4b7b      	ldr	r3, [pc, #492]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016a22:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8016a24:	461a      	mov	r2, r3
 8016a26:	7bfb      	ldrb	r3, [r7, #15]
 8016a28:	4413      	add	r3, r2
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d010      	beq.n	8016a50 <rfalTransceiveRx+0x35c>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > (uint8_t)RFAL_CRC_LEN) )  
 8016a2e:	7bfb      	ldrb	r3, [r7, #15]
 8016a30:	2b02      	cmp	r3, #2
 8016a32:	d903      	bls.n	8016a3c <rfalTransceiveRx+0x348>
                    {
                        tmp -= (uint8_t)RFAL_CRC_LEN;
 8016a34:	7bfb      	ldrb	r3, [r7, #15]
 8016a36:	3b02      	subs	r3, #2
 8016a38:	73fb      	strb	r3, [r7, #15]
 8016a3a:	e009      	b.n	8016a50 <rfalTransceiveRx+0x35c>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > (uint16_t)RFAL_CRC_LEN)                       
 8016a3c:	4b74      	ldr	r3, [pc, #464]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016a3e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8016a40:	2b02      	cmp	r3, #2
 8016a42:	d905      	bls.n	8016a50 <rfalTransceiveRx+0x35c>
                    {                        
                        gRFAL.fifo.bytesTotal -= (uint16_t)RFAL_CRC_LEN;
 8016a44:	4b72      	ldr	r3, [pc, #456]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016a46:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8016a48:	3b02      	subs	r3, #2
 8016a4a:	b29a      	uxth	r2, r3
 8016a4c:	4b70      	ldr	r3, [pc, #448]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016a4e:	875a      	strh	r2, [r3, #58]	; 0x3a
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 8016a50:	4b6f      	ldr	r3, [pc, #444]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016a52:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8016a54:	7bfb      	ldrb	r3, [r7, #15]
 8016a56:	b29b      	uxth	r3, r3
 8016a58:	4413      	add	r3, r2
 8016a5a:	b29a      	uxth	r2, r3
 8016a5c:	4b6c      	ldr	r3, [pc, #432]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016a5e:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 8016a60:	4b6b      	ldr	r3, [pc, #428]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016a62:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8016a64:	4b6a      	ldr	r3, [pc, #424]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a68:	3307      	adds	r3, #7
 8016a6a:	08db      	lsrs	r3, r3, #3
 8016a6c:	b29b      	uxth	r3, r3
 8016a6e:	429a      	cmp	r2, r3
 8016a70:	d90f      	bls.n	8016a92 <rfalTransceiveRx+0x39e>
            {
                tmp = (uint8_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 8016a72:	4b67      	ldr	r3, [pc, #412]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a76:	3307      	adds	r3, #7
 8016a78:	08db      	lsrs	r3, r3, #3
 8016a7a:	b2da      	uxtb	r2, r3
 8016a7c:	4b64      	ldr	r3, [pc, #400]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016a7e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8016a80:	b2db      	uxtb	r3, r3
 8016a82:	1ad3      	subs	r3, r2, r3
 8016a84:	73fb      	strb	r3, [r7, #15]
                
                gRFAL.TxRx.status = ERR_NOMEM;
 8016a86:	4b62      	ldr	r3, [pc, #392]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016a88:	2201      	movs	r2, #1
 8016a8a:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016a8c:	4b60      	ldr	r3, [pc, #384]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016a8e:	225a      	movs	r2, #90	; 0x5a
 8016a90:	751a      	strb	r2, [r3, #20]
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 8016a92:	4b5f      	ldr	r3, [pc, #380]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a96:	4a5e      	ldr	r2, [pc, #376]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016a98:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8016a9a:	4413      	add	r3, r2
 8016a9c:	7bfa      	ldrb	r2, [r7, #15]
 8016a9e:	4611      	mov	r1, r2
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	f7ed f8af 	bl	8003c04 <st25r3911ReadFifo>
            if( (gRFAL.TxRx.ctx.rxRcvdLen != NULL) )
 8016aa6:	4b5a      	ldr	r3, [pc, #360]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d019      	beq.n	8016ae2 <rfalTransceiveRx+0x3ee>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 8016aae:	4b58      	ldr	r3, [pc, #352]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016ab0:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8016ab2:	4b57      	ldr	r3, [pc, #348]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ab6:	00d2      	lsls	r2, r2, #3
 8016ab8:	b292      	uxth	r2, r2
 8016aba:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 8016abc:	f000 f98e 	bl	8016ddc <rfalFIFOStatusIsIncompleteByte>
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d00d      	beq.n	8016ae2 <rfalTransceiveRx+0x3ee>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 8016ac6:	f000 f9ad 	bl	8016e24 <rfalFIFOGetNumIncompleteBits>
 8016aca:	4603      	mov	r3, r0
 8016acc:	f1c3 0208 	rsb	r2, r3, #8
 8016ad0:	4b4f      	ldr	r3, [pc, #316]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ad4:	8819      	ldrh	r1, [r3, #0]
 8016ad6:	b292      	uxth	r2, r2
 8016ad8:	4b4d      	ldr	r3, [pc, #308]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016adc:	1a8a      	subs	r2, r1, r2
 8016ade:	b292      	uxth	r2, r2
 8016ae0:	801a      	strh	r2, [r3, #0]
            }
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 8016ae2:	4b4b      	ldr	r3, [pc, #300]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016ae4:	785b      	ldrb	r3, [r3, #1]
 8016ae6:	2b07      	cmp	r3, #7
 8016ae8:	d003      	beq.n	8016af2 <rfalTransceiveRx+0x3fe>
 8016aea:	4b49      	ldr	r3, [pc, #292]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016aec:	785b      	ldrb	r3, [r3, #1]
 8016aee:	2b08      	cmp	r3, #8
 8016af0:	d165      	bne.n	8016bbe <rfalTransceiveRx+0x4ca>
 8016af2:	4b47      	ldr	r3, [pc, #284]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016af4:	8adb      	ldrh	r3, [r3, #22]
 8016af6:	2b02      	cmp	r3, #2
 8016af8:	d161      	bne.n	8016bbe <rfalTransceiveRx+0x4ca>
            {
                ReturnCode ret;
                uint16_t offset = 0;
 8016afa:	2300      	movs	r3, #0
 8016afc:	80fb      	strh	r3, [r7, #6]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8016afe:	4b44      	ldr	r3, [pc, #272]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016b00:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016b02:	4b43      	ldr	r3, [pc, #268]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016b04:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
 8016b06:	4b42      	ldr	r3, [pc, #264]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016b08:	f8d3 53d4 	ldr.w	r5, [r3, #980]	; 0x3d4
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 8016b0c:	4b40      	ldr	r3, [pc, #256]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016b0e:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8016b12:	3307      	adds	r3, #7
 8016b14:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8016b16:	b29e      	uxth	r6, r3
 8016b18:	4b3d      	ldr	r3, [pc, #244]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016b1a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8016b1e:	4a3c      	ldr	r2, [pc, #240]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016b20:	f8b2 23e8 	ldrh.w	r2, [r2, #1000]	; 0x3e8
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 8016b24:	493a      	ldr	r1, [pc, #232]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016b26:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8016b28:	2908      	cmp	r1, #8
 8016b2a:	bf0c      	ite	eq
 8016b2c:	2101      	moveq	r1, #1
 8016b2e:	2100      	movne	r1, #0
 8016b30:	b2c9      	uxtb	r1, r1
 8016b32:	9103      	str	r1, [sp, #12]
 8016b34:	9202      	str	r2, [sp, #8]
 8016b36:	9301      	str	r3, [sp, #4]
 8016b38:	1dbb      	adds	r3, r7, #6
 8016b3a:	9300      	str	r3, [sp, #0]
 8016b3c:	4633      	mov	r3, r6
 8016b3e:	462a      	mov	r2, r5
 8016b40:	4621      	mov	r1, r4
 8016b42:	f7f6 fd93 	bl	800d66c <iso15693VICCDecode>
 8016b46:	4603      	mov	r3, r0
 8016b48:	81bb      	strh	r3, [r7, #12]

                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 8016b4a:	89bb      	ldrh	r3, [r7, #12]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d002      	beq.n	8016b56 <rfalTransceiveRx+0x462>
 8016b50:	89bb      	ldrh	r3, [r7, #12]
 8016b52:	2b15      	cmp	r3, #21
 8016b54:	d11f      	bne.n	8016b96 <rfalTransceiveRx+0x4a2>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 8016b56:	4b2e      	ldr	r3, [pc, #184]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016b58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016b5c:	f003 0302 	and.w	r3, r3, #2
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d118      	bne.n	8016b96 <rfalTransceiveRx+0x4a2>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 8016b64:	4b2a      	ldr	r3, [pc, #168]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016b66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8016b6a:	881b      	ldrh	r3, [r3, #0]
 8016b6c:	f003 0307 	and.w	r3, r3, #7
 8016b70:	b29b      	uxth	r3, r3
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d10f      	bne.n	8016b96 <rfalTransceiveRx+0x4a2>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 8016b76:	4b26      	ldr	r3, [pc, #152]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016b78:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8016b7c:	881b      	ldrh	r3, [r3, #0]
 8016b7e:	2b0f      	cmp	r3, #15
 8016b80:	d909      	bls.n	8016b96 <rfalTransceiveRx+0x4a2>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 8016b82:	4b23      	ldr	r3, [pc, #140]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016b84:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8016b88:	881a      	ldrh	r2, [r3, #0]
 8016b8a:	4b21      	ldr	r3, [pc, #132]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016b8c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8016b90:	3a10      	subs	r2, #16
 8016b92:	b292      	uxth	r2, r2
 8016b94:	801a      	strh	r2, [r3, #0]
                }
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 8016b96:	4a1e      	ldr	r2, [pc, #120]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016b98:	4b1d      	ldr	r3, [pc, #116]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016b9a:	f102 041c 	add.w	r4, r2, #28
 8016b9e:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8016ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ba6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016baa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 8016bae:	89bb      	ldrh	r3, [r7, #12]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d001      	beq.n	8016bb8 <rfalTransceiveRx+0x4c4>
 8016bb4:	89bb      	ldrh	r3, [r7, #12]
 8016bb6:	e000      	b.n	8016bba <rfalTransceiveRx+0x4c6>
 8016bb8:	2302      	movs	r3, #2
 8016bba:	4a15      	ldr	r2, [pc, #84]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016bbc:	82d3      	strh	r3, [r2, #22]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 8016bbe:	4b14      	ldr	r3, [pc, #80]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016bc0:	8adb      	ldrh	r3, [r3, #22]
 8016bc2:	2b02      	cmp	r3, #2
 8016bc4:	d003      	beq.n	8016bce <rfalTransceiveRx+0x4da>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 8016bc6:	4b12      	ldr	r3, [pc, #72]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016bc8:	225a      	movs	r2, #90	; 0x5a
 8016bca:	751a      	strb	r2, [r3, #20]
                break;
 8016bcc:	e0d5      	b.n	8016d7a <rfalTransceiveRx+0x686>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 8016bce:	4b10      	ldr	r3, [pc, #64]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016bd0:	785b      	ldrb	r3, [r3, #1]
 8016bd2:	2b09      	cmp	r3, #9
 8016bd4:	d003      	beq.n	8016bde <rfalTransceiveRx+0x4ea>
 8016bd6:	4b0e      	ldr	r3, [pc, #56]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016bd8:	785b      	ldrb	r3, [r3, #1]
 8016bda:	2b0d      	cmp	r3, #13
 8016bdc:	d103      	bne.n	8016be6 <rfalTransceiveRx+0x4f2>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 8016bde:	4b0c      	ldr	r3, [pc, #48]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016be0:	2258      	movs	r2, #88	; 0x58
 8016be2:	751a      	strb	r2, [r3, #20]
                break;
 8016be4:	e0c9      	b.n	8016d7a <rfalTransceiveRx+0x686>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 8016be6:	4b0a      	ldr	r3, [pc, #40]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016be8:	2259      	movs	r2, #89	; 0x59
 8016bea:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 8016bec:	4b08      	ldr	r3, [pc, #32]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016bee:	799b      	ldrb	r3, [r3, #6]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d003      	beq.n	8016bfc <rfalTransceiveRx+0x508>
 8016bf4:	2100      	movs	r1, #0
 8016bf6:	2001      	movs	r0, #1
 8016bf8:	f7ec fe7a 	bl	80038f0 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 8016bfc:	f7ff fa82 	bl	8016104 <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 8016c00:	4b03      	ldr	r3, [pc, #12]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016c02:	2200      	movs	r2, #0
 8016c04:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 8016c06:	4b02      	ldr	r3, [pc, #8]	; (8016c10 <rfalTransceiveRx+0x51c>)
 8016c08:	2200      	movs	r2, #0
 8016c0a:	751a      	strb	r2, [r3, #20]
            break;
 8016c0c:	e0b5      	b.n	8016d7a <rfalTransceiveRx+0x686>
 8016c0e:	bf00      	nop
 8016c10:	2000393c 	.word	0x2000393c
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
            /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
            /* corrupted frames.                                                           */
            /* Re-Start SW timer to handle an eventual missing RXE                         */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 8016c14:	200a      	movs	r0, #10
 8016c16:	f7ed fabf 	bl	8004198 <timerCalculateTimer>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	4a59      	ldr	r2, [pc, #356]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016c1e:	6493      	str	r3, [r2, #72]	; 0x48
            /*******************************************************************************/        
                    
        
            tmp = rfalFIFOStatusGetNumBytes();
 8016c20:	f000 f8d0 	bl	8016dc4 <rfalFIFOStatusGetNumBytes>
 8016c24:	4603      	mov	r3, r0
 8016c26:	73fb      	strb	r3, [r7, #15]
            gRFAL.fifo.bytesTotal += tmp;
 8016c28:	4b56      	ldr	r3, [pc, #344]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016c2a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8016c2c:	7bfb      	ldrb	r3, [r7, #15]
 8016c2e:	b29b      	uxth	r3, r3
 8016c30:	4413      	add	r3, r2
 8016c32:	b29a      	uxth	r2, r3
 8016c34:	4b53      	ldr	r3, [pc, #332]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016c36:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (uint8_t)(( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 8016c38:	4b52      	ldr	r3, [pc, #328]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016c3a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8016c3c:	4b51      	ldr	r3, [pc, #324]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016c40:	3307      	adds	r3, #7
 8016c42:	08db      	lsrs	r3, r3, #3
 8016c44:	b29b      	uxth	r3, r3
 8016c46:	429a      	cmp	r2, r3
 8016c48:	d90a      	bls.n	8016c60 <rfalTransceiveRx+0x56c>
 8016c4a:	4b4e      	ldr	r3, [pc, #312]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016c4e:	3307      	adds	r3, #7
 8016c50:	08db      	lsrs	r3, r3, #3
 8016c52:	b2da      	uxtb	r2, r3
 8016c54:	4b4b      	ldr	r3, [pc, #300]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016c56:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8016c58:	b2db      	uxtb	r3, r3
 8016c5a:	1ad3      	subs	r3, r2, r3
 8016c5c:	b2db      	uxtb	r3, r3
 8016c5e:	e000      	b.n	8016c62 <rfalTransceiveRx+0x56e>
 8016c60:	7bfb      	ldrb	r3, [r7, #15]
 8016c62:	73bb      	strb	r3, [r7, #14]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 8016c64:	4b47      	ldr	r3, [pc, #284]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c68:	4a46      	ldr	r2, [pc, #280]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016c6a:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8016c6c:	4413      	add	r3, r2
 8016c6e:	7bba      	ldrb	r2, [r7, #14]
 8016c70:	4611      	mov	r1, r2
 8016c72:	4618      	mov	r0, r3
 8016c74:	f7ec ffc6 	bl	8003c04 <st25r3911ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 8016c78:	4b42      	ldr	r3, [pc, #264]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016c7a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8016c7c:	7bbb      	ldrb	r3, [r7, #14]
 8016c7e:	b29b      	uxth	r3, r3
 8016c80:	4413      	add	r3, r2
 8016c82:	b29a      	uxth	r2, r3
 8016c84:	4b3f      	ldr	r3, [pc, #252]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016c86:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 8016c88:	7bba      	ldrb	r2, [r7, #14]
 8016c8a:	7bfb      	ldrb	r3, [r7, #15]
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	d207      	bcs.n	8016ca0 <rfalTransceiveRx+0x5ac>
            {
                st25r3911ReadFifo( NULL, (tmp - aux) );
 8016c90:	7bfa      	ldrb	r2, [r7, #15]
 8016c92:	7bbb      	ldrb	r3, [r7, #14]
 8016c94:	1ad3      	subs	r3, r2, r3
 8016c96:	b2db      	uxtb	r3, r3
 8016c98:	4619      	mov	r1, r3
 8016c9a:	2000      	movs	r0, #0
 8016c9c:	f7ec ffb2 	bl	8003c04 <st25r3911ReadFifo>
            }
            
            rfalFIFOStatusClear();
 8016ca0:	f000 f884 	bl	8016dac <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8016ca4:	4b37      	ldr	r3, [pc, #220]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016ca6:	2254      	movs	r2, #84	; 0x54
 8016ca8:	751a      	strb	r2, [r3, #20]
            break;
 8016caa:	e066      	b.n	8016d7a <rfalTransceiveRx+0x686>
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 8016cac:	4b35      	ldr	r3, [pc, #212]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016cae:	799b      	ldrb	r3, [r3, #6]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d003      	beq.n	8016cbc <rfalTransceiveRx+0x5c8>
 8016cb4:	2100      	movs	r1, #0
 8016cb6:	2001      	movs	r0, #1
 8016cb8:	f7ec fe1a 	bl	80038f0 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 8016cbc:	f7ff fa22 	bl	8016104 <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 8016cc0:	4b30      	ldr	r3, [pc, #192]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016cc2:	8adb      	ldrh	r3, [r3, #22]
 8016cc4:	2b02      	cmp	r3, #2
 8016cc6:	d102      	bne.n	8016cce <rfalTransceiveRx+0x5da>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 8016cc8:	4b2e      	ldr	r3, [pc, #184]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016cca:	2208      	movs	r2, #8
 8016ccc:	82da      	strh	r2, [r3, #22]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 8016cce:	4b2d      	ldr	r3, [pc, #180]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	751a      	strb	r2, [r3, #20]
            break;
 8016cd4:	e051      	b.n	8016d7a <rfalTransceiveRx+0x686>
        
        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_NRE) );
 8016cd6:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8016cda:	f7ed f9d5 	bl	8004088 <st25r3911GetInterrupt>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8016ce2:	68bb      	ldr	r3, [r7, #8]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d043      	beq.n	8016d70 <rfalTransceiveRx+0x67c>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_EON) != 0U )
 8016ce8:	68bb      	ldr	r3, [r7, #8]
 8016cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d002      	beq.n	8016cf8 <rfalTransceiveRx+0x604>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8016cf2:	4b24      	ldr	r3, [pc, #144]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016cf4:	2253      	movs	r2, #83	; 0x53
 8016cf6:	751a      	strb	r2, [r3, #20]
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_NRE) != 0U )
 8016cf8:	68bb      	ldr	r3, [r7, #8]
 8016cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d038      	beq.n	8016d74 <rfalTransceiveRx+0x680>
            {
                /* ST25R3911 uses the NRT to measure other device's Field On max time: Tadt + (n x Trfw)  */
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 8016d02:	4b20      	ldr	r3, [pc, #128]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016d04:	2225      	movs	r2, #37	; 0x25
 8016d06:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016d08:	4b1e      	ldr	r3, [pc, #120]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016d0a:	225a      	movs	r2, #90	; 0x5a
 8016d0c:	751a      	strb	r2, [r3, #20]
            }
            break;
 8016d0e:	e031      	b.n	8016d74 <rfalTransceiveRx+0x680>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC) );
 8016d10:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8016d14:	f7ed f9b8 	bl	8004088 <st25r3911GetInterrupt>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8016d1c:	68bb      	ldr	r3, [r7, #8]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d02a      	beq.n	8016d78 <rfalTransceiveRx+0x684>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_CAT) != 0U )
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d003      	beq.n	8016d34 <rfalTransceiveRx+0x640>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 8016d2c:	4b15      	ldr	r3, [pc, #84]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016d2e:	2259      	movs	r2, #89	; 0x59
 8016d30:	751a      	strb	r2, [r3, #20]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 8016d32:	e022      	b.n	8016d7a <rfalTransceiveRx+0x686>
            else if( (irqs & ST25R3911_IRQ_MASK_CAC) != 0U )
 8016d34:	68bb      	ldr	r3, [r7, #8]
 8016d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d006      	beq.n	8016d4c <rfalTransceiveRx+0x658>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 8016d3e:	4b11      	ldr	r3, [pc, #68]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016d40:	221d      	movs	r2, #29
 8016d42:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016d44:	4b0f      	ldr	r3, [pc, #60]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016d46:	225a      	movs	r2, #90	; 0x5a
 8016d48:	751a      	strb	r2, [r3, #20]
            break;
 8016d4a:	e016      	b.n	8016d7a <rfalTransceiveRx+0x686>
               gRFAL.TxRx.status = ERR_IO;
 8016d4c:	4b0d      	ldr	r3, [pc, #52]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016d4e:	2203      	movs	r2, #3
 8016d50:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016d52:	4b0c      	ldr	r3, [pc, #48]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016d54:	225a      	movs	r2, #90	; 0x5a
 8016d56:	751a      	strb	r2, [r3, #20]
            break;
 8016d58:	e00f      	b.n	8016d7a <rfalTransceiveRx+0x686>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 8016d5a:	4b0a      	ldr	r3, [pc, #40]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016d5c:	2208      	movs	r2, #8
 8016d5e:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016d60:	4b08      	ldr	r3, [pc, #32]	; (8016d84 <rfalTransceiveRx+0x690>)
 8016d62:	225a      	movs	r2, #90	; 0x5a
 8016d64:	751a      	strb	r2, [r3, #20]
            break;           
 8016d66:	e008      	b.n	8016d7a <rfalTransceiveRx+0x686>
                break;  /* No interrupt to process */
 8016d68:	bf00      	nop
 8016d6a:	e006      	b.n	8016d7a <rfalTransceiveRx+0x686>
                break;  /* No interrupt to process */
 8016d6c:	bf00      	nop
 8016d6e:	e004      	b.n	8016d7a <rfalTransceiveRx+0x686>
                break;  /* No interrupt to process */
 8016d70:	bf00      	nop
 8016d72:	e002      	b.n	8016d7a <rfalTransceiveRx+0x686>
            break;
 8016d74:	bf00      	nop
 8016d76:	e000      	b.n	8016d7a <rfalTransceiveRx+0x686>
               break;  /* No interrupt to process */
 8016d78:	bf00      	nop
    }    
}
 8016d7a:	bf00      	nop
 8016d7c:	3714      	adds	r7, #20
 8016d7e:	46bd      	mov	sp, r7
 8016d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d82:	bf00      	nop
 8016d84:	2000393c 	.word	0x2000393c

08016d88 <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 8016d8c:	4b05      	ldr	r3, [pc, #20]	; (8016da4 <rfalFIFOStatusUpdate+0x1c>)
 8016d8e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016d92:	2bff      	cmp	r3, #255	; 0xff
 8016d94:	d104      	bne.n	8016da0 <rfalFIFOStatusUpdate+0x18>
    {
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 8016d96:	2202      	movs	r2, #2
 8016d98:	4903      	ldr	r1, [pc, #12]	; (8016da8 <rfalFIFOStatusUpdate+0x20>)
 8016d9a:	201a      	movs	r0, #26
 8016d9c:	f7ec fd08 	bl	80037b0 <st25r3911ReadMultipleRegisters>
    }
}
 8016da0:	bf00      	nop
 8016da2:	bd80      	pop	{r7, pc}
 8016da4:	2000393c 	.word	0x2000393c
 8016da8:	2000397a 	.word	0x2000397a

08016dac <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 8016dac:	b480      	push	{r7}
 8016dae:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 8016db0:	4b03      	ldr	r3, [pc, #12]	; (8016dc0 <rfalFIFOStatusClear+0x14>)
 8016db2:	22ff      	movs	r2, #255	; 0xff
 8016db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 8016db8:	bf00      	nop
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	bc80      	pop	{r7}
 8016dbe:	4770      	bx	lr
 8016dc0:	2000393c 	.word	0x2000393c

08016dc4 <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint8_t rfalFIFOStatusGetNumBytes( void )
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8016dc8:	f7ff ffde 	bl	8016d88 <rfalFIFOStatusUpdate>
    
    return gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]; 
 8016dcc:	4b02      	ldr	r3, [pc, #8]	; (8016dd8 <rfalFIFOStatusGetNumBytes+0x14>)
 8016dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   
}
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	bd80      	pop	{r7, pc}
 8016dd6:	bf00      	nop
 8016dd8:	2000393c 	.word	0x2000393c

08016ddc <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8016de0:	f7ff ffd2 	bl	8016d88 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & (ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb | ST25R3911_REG_FIFO_RX_STATUS2_fifo_ncp)) != 0U);
 8016de4:	4b05      	ldr	r3, [pc, #20]	; (8016dfc <rfalFIFOStatusIsIncompleteByte+0x20>)
 8016de6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016dea:	f003 031e 	and.w	r3, r3, #30
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	bf14      	ite	ne
 8016df2:	2301      	movne	r3, #1
 8016df4:	2300      	moveq	r3, #0
 8016df6:	b2db      	uxtb	r3, r3
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	bd80      	pop	{r7, pc}
 8016dfc:	2000393c 	.word	0x2000393c

08016e00 <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8016e04:	f7ff ffc0 	bl	8016d88 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_np_lb) != 0U);
 8016e08:	4b05      	ldr	r3, [pc, #20]	; (8016e20 <rfalFIFOStatusIsMissingPar+0x20>)
 8016e0a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016e0e:	f003 0301 	and.w	r3, r3, #1
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	bf14      	ite	ne
 8016e16:	2301      	movne	r3, #1
 8016e18:	2300      	moveq	r3, #0
 8016e1a:	b2db      	uxtb	r3, r3
}
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	bd80      	pop	{r7, pc}
 8016e20:	2000393c 	.word	0x2000393c

08016e24 <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8016e28:	f7ff ffae 	bl	8016d88 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb) >> ST25R3911_REG_FIFO_RX_STATUS2_shift_fifo_lb);
 8016e2c:	4b04      	ldr	r3, [pc, #16]	; (8016e40 <rfalFIFOGetNumIncompleteBits+0x1c>)
 8016e2e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016e32:	085b      	lsrs	r3, r3, #1
 8016e34:	b2db      	uxtb	r3, r3
 8016e36:	f003 0307 	and.w	r3, r3, #7
 8016e3a:	b2db      	uxtb	r3, r3
}
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	bd80      	pop	{r7, pc}
 8016e40:	2000393c 	.word	0x2000393c

08016e44 <rfalISO14443ATransceiveShortFrame>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveShortFrame( rfal14443AShortFrameCmd txCmd, uint8_t* rxBuf, uint8_t rxBufLen, uint16_t* rxRcvdLen, uint32_t fwt )
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b086      	sub	sp, #24
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	60b9      	str	r1, [r7, #8]
 8016e4c:	607b      	str	r3, [r7, #4]
 8016e4e:	4603      	mov	r3, r0
 8016e50:	73fb      	strb	r3, [r7, #15]
 8016e52:	4613      	mov	r3, r2
 8016e54:	73bb      	strb	r3, [r7, #14]
    ReturnCode ret;
    uint8_t    directCmd;

    /* Check if RFAL is properly initialized */
    if( !st25r3911IsTxEnabled() || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 8016e56:	2208      	movs	r2, #8
 8016e58:	2108      	movs	r1, #8
 8016e5a:	2002      	movs	r0, #2
 8016e5c:	f7ec fa56 	bl	800330c <st25r3911CheckReg>
 8016e60:	4603      	mov	r3, r0
 8016e62:	f083 0301 	eor.w	r3, r3, #1
 8016e66:	b2db      	uxtb	r3, r3
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d10b      	bne.n	8016e84 <rfalISO14443ATransceiveShortFrame+0x40>
 8016e6c:	4b70      	ldr	r3, [pc, #448]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016e6e:	781b      	ldrb	r3, [r3, #0]
 8016e70:	2b01      	cmp	r3, #1
 8016e72:	d907      	bls.n	8016e84 <rfalISO14443ATransceiveShortFrame+0x40>
 8016e74:	4b6e      	ldr	r3, [pc, #440]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016e76:	785b      	ldrb	r3, [r3, #1]
 8016e78:	2b01      	cmp	r3, #1
 8016e7a:	d005      	beq.n	8016e88 <rfalISO14443ATransceiveShortFrame+0x44>
 8016e7c:	4b6c      	ldr	r3, [pc, #432]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016e7e:	785b      	ldrb	r3, [r3, #1]
 8016e80:	2b02      	cmp	r3, #2
 8016e82:	d001      	beq.n	8016e88 <rfalISO14443ATransceiveShortFrame+0x44>
    {
        return ERR_WRONG_STATE;
 8016e84:	2321      	movs	r3, #33	; 0x21
 8016e86:	e0cf      	b.n	8017028 <rfalISO14443ATransceiveShortFrame+0x1e4>
    }    
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rxRcvdLen == NULL) || (fwt == RFAL_FWT_NONE) )
 8016e88:	68bb      	ldr	r3, [r7, #8]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d006      	beq.n	8016e9c <rfalISO14443ATransceiveShortFrame+0x58>
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d003      	beq.n	8016e9c <rfalISO14443ATransceiveShortFrame+0x58>
 8016e94:	6a3b      	ldr	r3, [r7, #32]
 8016e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e9a:	d101      	bne.n	8016ea0 <rfalISO14443ATransceiveShortFrame+0x5c>
    {
        return ERR_PARAM;
 8016e9c:	2307      	movs	r3, #7
 8016e9e:	e0c3      	b.n	8017028 <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    /*******************************************************************************/
    /* Select the Direct Command to be performed                                   */
    switch (txCmd)
 8016ea0:	7bfb      	ldrb	r3, [r7, #15]
 8016ea2:	2b26      	cmp	r3, #38	; 0x26
 8016ea4:	d004      	beq.n	8016eb0 <rfalISO14443ATransceiveShortFrame+0x6c>
 8016ea6:	2b52      	cmp	r3, #82	; 0x52
 8016ea8:	d105      	bne.n	8016eb6 <rfalISO14443ATransceiveShortFrame+0x72>
    {
        case RFAL_14443A_SHORTFRAME_CMD_WUPA:
            directCmd = ST25R3911_CMD_TRANSMIT_WUPA;
 8016eaa:	23c7      	movs	r3, #199	; 0xc7
 8016eac:	757b      	strb	r3, [r7, #21]
            break;
 8016eae:	e004      	b.n	8016eba <rfalISO14443ATransceiveShortFrame+0x76>
            
        case RFAL_14443A_SHORTFRAME_CMD_REQA:
            directCmd = ST25R3911_CMD_TRANSMIT_REQA;
 8016eb0:	23c6      	movs	r3, #198	; 0xc6
 8016eb2:	757b      	strb	r3, [r7, #21]
            break;
 8016eb4:	e001      	b.n	8016eba <rfalISO14443ATransceiveShortFrame+0x76>
            
        default:
            return ERR_PARAM;
 8016eb6:	2307      	movs	r3, #7
 8016eb8:	e0b6      	b.n	8017028 <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl);
 8016eba:	2101      	movs	r1, #1
 8016ebc:	2005      	movs	r0, #5
 8016ebe:	f7ec fdce 	bl	8003a5e <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving since ATQA has no CRC included */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 8016ec2:	2180      	movs	r1, #128	; 0x80
 8016ec4:	2009      	movs	r0, #9
 8016ec6:	f7ec fdca 	bl	8003a5e <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Wait for GT and FDT */
    while( !rfalIsGTExpired() )      { /* MISRA 15.6: mandatory brackets */ };
 8016eca:	bf00      	nop
 8016ecc:	f7fe fdce 	bl	8015a6c <rfalIsGTExpired>
 8016ed0:	4603      	mov	r3, r0
 8016ed2:	f083 0301 	eor.w	r3, r3, #1
 8016ed6:	b2db      	uxtb	r3, r3
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d1f7      	bne.n	8016ecc <rfalISO14443ATransceiveShortFrame+0x88>
    while( st25r3911IsGPTRunning() ) { /* MISRA 15.6: mandatory brackets */ };
 8016edc:	bf00      	nop
 8016ede:	2204      	movs	r2, #4
 8016ee0:	2104      	movs	r1, #4
 8016ee2:	202b      	movs	r0, #43	; 0x2b
 8016ee4:	f7ec fa12 	bl	800330c <st25r3911CheckReg>
 8016ee8:	4603      	mov	r3, r0
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d1f7      	bne.n	8016ede <rfalISO14443ATransceiveShortFrame+0x9a>
    
    gRFAL.tmr.GT = RFAL_TIMING_NONE;
 8016eee:	4b50      	ldr	r3, [pc, #320]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	641a      	str	r2, [r3, #64]	; 0x40

    
    /*******************************************************************************/
    /* Prepare for Transceive, Receive only (bypass Tx states) */
    gRFAL.TxRx.ctx.flags     = ((uint32_t) RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP );
 8016ef4:	4b4e      	ldr	r3, [pc, #312]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016ef6:	2203      	movs	r2, #3
 8016ef8:	631a      	str	r2, [r3, #48]	; 0x30
    gRFAL.TxRx.ctx.rxBuf     = rxBuf;
 8016efa:	4a4d      	ldr	r2, [pc, #308]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016efc:	68bb      	ldr	r3, [r7, #8]
 8016efe:	6253      	str	r3, [r2, #36]	; 0x24
    gRFAL.TxRx.ctx.rxBufLen  = rxBufLen;
 8016f00:	7bbb      	ldrb	r3, [r7, #14]
 8016f02:	b29a      	uxth	r2, r3
 8016f04:	4b4a      	ldr	r3, [pc, #296]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016f06:	851a      	strh	r2, [r3, #40]	; 0x28
    gRFAL.TxRx.ctx.rxRcvdLen = rxRcvdLen;
 8016f08:	4a49      	ldr	r2, [pc, #292]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    /*******************************************************************************/
    /* Load NRT with FWT */
    st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3911_NRT_MAX_1FC ) ) );
 8016f0e:	6a3b      	ldr	r3, [r7, #32]
 8016f10:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8016f14:	4a47      	ldr	r2, [pc, #284]	; (8017034 <rfalISO14443ATransceiveShortFrame+0x1f0>)
 8016f16:	4293      	cmp	r3, r2
 8016f18:	bf28      	it	cs
 8016f1a:	4613      	movcs	r3, r2
 8016f1c:	099b      	lsrs	r3, r3, #6
 8016f1e:	4618      	mov	r0, r3
 8016f20:	f7ec fa36 	bl	8003390 <st25r3911SetNoResponseTime_64fcs>
    
    if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 8016f24:	4b42      	ldr	r3, [pc, #264]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016f26:	68db      	ldr	r3, [r3, #12]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d010      	beq.n	8016f4e <rfalISO14443ATransceiveShortFrame+0x10a>
    {
        /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
        st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( ((RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT) > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - (RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT)) ) );
 8016f2c:	4b40      	ldr	r3, [pc, #256]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016f2e:	68db      	ldr	r3, [r3, #12]
 8016f30:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8016f34:	d306      	bcc.n	8016f44 <rfalISO14443ATransceiveShortFrame+0x100>
 8016f36:	4b3e      	ldr	r3, [pc, #248]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016f38:	68db      	ldr	r3, [r3, #12]
 8016f3a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8016f3e:	099b      	lsrs	r3, r3, #6
 8016f40:	b2db      	uxtb	r3, r3
 8016f42:	e000      	b.n	8016f46 <rfalISO14443ATransceiveShortFrame+0x102>
 8016f44:	2304      	movs	r3, #4
 8016f46:	4619      	mov	r1, r3
 8016f48:	200e      	movs	r0, #14
 8016f4a:	f7ec fd19 	bl	8003980 <st25r3911WriteRegister>
    }
    
    /* In Passive communications General Purpose Timer is used to measure FDT Poll */
    if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 8016f4e:	4b38      	ldr	r3, [pc, #224]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016f50:	691b      	ldr	r3, [r3, #16]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d014      	beq.n	8016f80 <rfalISO14443ATransceiveShortFrame+0x13c>
    {
        /* Configure GPT to start at RX end */
        st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 8016f56:	4b36      	ldr	r3, [pc, #216]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016f58:	691b      	ldr	r3, [r3, #16]
 8016f5a:	f240 423b 	movw	r2, #1083	; 0x43b
 8016f5e:	4293      	cmp	r3, r2
 8016f60:	d804      	bhi.n	8016f6c <rfalISO14443ATransceiveShortFrame+0x128>
 8016f62:	4b33      	ldr	r3, [pc, #204]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016f64:	691b      	ldr	r3, [r3, #16]
 8016f66:	08db      	lsrs	r3, r3, #3
 8016f68:	b29b      	uxth	r3, r3
 8016f6a:	e005      	b.n	8016f78 <rfalISO14443ATransceiveShortFrame+0x134>
 8016f6c:	4b30      	ldr	r3, [pc, #192]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016f6e:	691b      	ldr	r3, [r3, #16]
 8016f70:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8016f74:	08db      	lsrs	r3, r3, #3
 8016f76:	b29b      	uxth	r3, r3
 8016f78:	2120      	movs	r1, #32
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	f7ec f992 	bl	80032a4 <st25r3911StartGPTimer_8fcs>
    }
    
    /*******************************************************************************/
    rfalPrepareTransceive();
 8016f80:	f7ff f8d6 	bl	8016130 <rfalPrepareTransceive>
    
    /* Also enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 8016f84:	2004      	movs	r0, #4
 8016f86:	f7ed f87f 	bl	8004088 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 8016f8a:	2004      	movs	r0, #4
 8016f8c:	f7ed f8b8 	bl	8004100 <st25r3911EnableInterrupts>
    
    /*Check if Observation Mode is enabled and set it on ST25R391x */
    rfalCheckEnableObsModeTx();
 8016f90:	4b27      	ldr	r3, [pc, #156]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016f92:	795b      	ldrb	r3, [r3, #5]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d005      	beq.n	8016fa4 <rfalISO14443ATransceiveShortFrame+0x160>
 8016f98:	4b25      	ldr	r3, [pc, #148]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016f9a:	795b      	ldrb	r3, [r3, #5]
 8016f9c:	4619      	mov	r1, r3
 8016f9e:	2001      	movs	r0, #1
 8016fa0:	f7ec fca6 	bl	80038f0 <st25r3911WriteTestRegister>
    
    /*******************************************************************************/
    /* Chip bug: Clear nbtx bits before sending WUPA/REQA - otherwise ST25R3911 will report parity error */
    st25r3911WriteRegister( ST25R3911_REG_NUM_TX_BYTES2, 0);
 8016fa4:	2100      	movs	r1, #0
 8016fa6:	201e      	movs	r0, #30
 8016fa8:	f7ec fcea 	bl	8003980 <st25r3911WriteRegister>

    /* Send either WUPA or REQA. All affected tags will backscatter ATQA and change to READY state */
    st25r3911ExecuteCommand( directCmd );
 8016fac:	7d7b      	ldrb	r3, [r7, #21]
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f7ec fe74 	bl	8003c9c <st25r3911ExecuteCommand>
    
    /* Wait for TXE */
    if( st25r3911WaitForInterruptsTimed( ST25R3911_IRQ_MASK_TXE, (uint16_t)MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3911_SW_TMR_MIN_1MS ) ) == 0U)
 8016fb4:	6a3b      	ldr	r3, [r7, #32]
 8016fb6:	f646 12ef 	movw	r2, #27119	; 0x69ef
 8016fba:	4293      	cmp	r3, r2
 8016fbc:	d906      	bls.n	8016fcc <rfalISO14443ATransceiveShortFrame+0x188>
 8016fbe:	6a3b      	ldr	r3, [r7, #32]
 8016fc0:	4a1d      	ldr	r2, [pc, #116]	; (8017038 <rfalISO14443ATransceiveShortFrame+0x1f4>)
 8016fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8016fc6:	0b1b      	lsrs	r3, r3, #12
 8016fc8:	b29b      	uxth	r3, r3
 8016fca:	e000      	b.n	8016fce <rfalISO14443ATransceiveShortFrame+0x18a>
 8016fcc:	2301      	movs	r3, #1
 8016fce:	4619      	mov	r1, r3
 8016fd0:	2008      	movs	r0, #8
 8016fd2:	f7ed f805 	bl	8003fe0 <st25r3911WaitForInterruptsTimed>
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d102      	bne.n	8016fe2 <rfalISO14443ATransceiveShortFrame+0x19e>
    {
        ret = ERR_IO;
 8016fdc:	2303      	movs	r3, #3
 8016fde:	82fb      	strh	r3, [r7, #22]
 8016fe0:	e016      	b.n	8017010 <rfalISO14443ATransceiveShortFrame+0x1cc>
    }
    else
    {
        /*Check if Observation Mode is enabled and set it on ST25R391x */
        rfalCheckEnableObsModeRx();
 8016fe2:	4b13      	ldr	r3, [pc, #76]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016fe4:	799b      	ldrb	r3, [r3, #6]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d005      	beq.n	8016ff6 <rfalISO14443ATransceiveShortFrame+0x1b2>
 8016fea:	4b11      	ldr	r3, [pc, #68]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016fec:	799b      	ldrb	r3, [r3, #6]
 8016fee:	4619      	mov	r1, r3
 8016ff0:	2001      	movs	r0, #1
 8016ff2:	f7ec fc7d 	bl	80038f0 <st25r3911WriteTestRegister>
        
        /* Jump into a transceive Rx state for reception (bypass Tx states) */
        gRFAL.state       = RFAL_STATE_TXRX;
 8016ff6:	4b0e      	ldr	r3, [pc, #56]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016ff8:	2203      	movs	r2, #3
 8016ffa:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 8016ffc:	4b0c      	ldr	r3, [pc, #48]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8016ffe:	2251      	movs	r2, #81	; 0x51
 8017000:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 8017002:	4b0b      	ldr	r3, [pc, #44]	; (8017030 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8017004:	2202      	movs	r2, #2
 8017006:	82da      	strh	r2, [r3, #22]
        
        /* Execute Transceive Rx blocking */
        ret = rfalTransceiveBlockingRx();
 8017008:	f7fe ff62 	bl	8015ed0 <rfalTransceiveBlockingRx>
 801700c:	4603      	mov	r3, r0
 801700e:	82fb      	strh	r3, [r7, #22]
    }
    
    
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 8017010:	2004      	movs	r0, #4
 8017012:	f7ed f881 	bl	8004118 <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 8017016:	2101      	movs	r1, #1
 8017018:	2005      	movs	r0, #5
 801701a:	f7ec fcfd 	bl	8003a18 <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits(ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 801701e:	2180      	movs	r1, #128	; 0x80
 8017020:	2009      	movs	r0, #9
 8017022:	f7ec fcf9 	bl	8003a18 <st25r3911ClrRegisterBits>
    
    return ret;
 8017026:	8afb      	ldrh	r3, [r7, #22]
}
 8017028:	4618      	mov	r0, r3
 801702a:	3718      	adds	r7, #24
 801702c:	46bd      	mov	sp, r7
 801702e:	bd80      	pop	{r7, pc}
 8017030:	2000393c 	.word	0x2000393c
 8017034:	0ffff000 	.word	0x0ffff000
 8017038:	4d542005 	.word	0x4d542005

0801703c <rfalISO14443ATransceiveAnticollisionFrame>:

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveAnticollisionFrame( uint8_t *buf, uint8_t *bytesToSend, uint8_t *bitsToSend, uint16_t *rxLength, uint32_t fwt )
{
 801703c:	b580      	push	{r7, lr}
 801703e:	b08e      	sub	sp, #56	; 0x38
 8017040:	af00      	add	r7, sp, #0
 8017042:	60f8      	str	r0, [r7, #12]
 8017044:	60b9      	str	r1, [r7, #8]
 8017046:	607a      	str	r2, [r7, #4]
 8017048:	603b      	str	r3, [r7, #0]
    rfalTransceiveContext ctx;
    uint8_t               collByte;
    uint8_t               collData;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 801704a:	4b77      	ldr	r3, [pc, #476]	; (8017228 <rfalISO14443ATransceiveAnticollisionFrame+0x1ec>)
 801704c:	781b      	ldrb	r3, [r3, #0]
 801704e:	2b01      	cmp	r3, #1
 8017050:	d903      	bls.n	801705a <rfalISO14443ATransceiveAnticollisionFrame+0x1e>
 8017052:	4b75      	ldr	r3, [pc, #468]	; (8017228 <rfalISO14443ATransceiveAnticollisionFrame+0x1ec>)
 8017054:	785b      	ldrb	r3, [r3, #1]
 8017056:	2b01      	cmp	r3, #1
 8017058:	d001      	beq.n	801705e <rfalISO14443ATransceiveAnticollisionFrame+0x22>
    {
        return ERR_WRONG_STATE;
 801705a:	2321      	movs	r3, #33	; 0x21
 801705c:	e0df      	b.n	801721e <rfalISO14443ATransceiveAnticollisionFrame+0x1e2>
    }
    
    /* Check for valid parameters */
    if( (buf == NULL) || (bytesToSend == NULL) || (bitsToSend == NULL) || (rxLength == NULL) )
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d008      	beq.n	8017076 <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 8017064:	68bb      	ldr	r3, [r7, #8]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d005      	beq.n	8017076 <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d002      	beq.n	8017076 <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 8017070:	683b      	ldr	r3, [r7, #0]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d101      	bne.n	801707a <rfalISO14443ATransceiveAnticollisionFrame+0x3e>
    {
        return ERR_PARAM;
 8017076:	2307      	movs	r3, #7
 8017078:	e0d1      	b.n	801721e <rfalISO14443ATransceiveAnticollisionFrame+0x1e2>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 801707a:	f240 1003 	movw	r0, #259	; 0x103
 801707e:	f7f5 ffff 	bl	800d080 <rfalSetAnalogConfig>
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 8017082:	2101      	movs	r1, #1
 8017084:	2005      	movs	r0, #5
 8017086:	f7ec fcea 	bl	8003a5e <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 801708a:	2180      	movs	r1, #128	; 0x80
 801708c:	2009      	movs	r0, #9
 801708e:	f7ec fce6 	bl	8003a5e <st25r3911SetRegisterBits>
    
    
    
    /*******************************************************************************/
    /* Prepare for Transceive                                                      */
    ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF );  /* Disable Automatic Gain Control (AGC) for better detection of collision */
 8017092:	230b      	movs	r3, #11
 8017094:	62fb      	str	r3, [r7, #44]	; 0x2c
    ctx.txBuf     = buf;
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	61bb      	str	r3, [r7, #24]
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 801709a:	68bb      	ldr	r3, [r7, #8]
 801709c:	781b      	ldrb	r3, [r3, #0]
 801709e:	b29b      	uxth	r3, r3
 80170a0:	00db      	lsls	r3, r3, #3
 80170a2:	b29a      	uxth	r2, r3
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	781b      	ldrb	r3, [r3, #0]
 80170a8:	b29b      	uxth	r3, r3
 80170aa:	4413      	add	r3, r2
 80170ac:	b29b      	uxth	r3, r3
 80170ae:	83bb      	strh	r3, [r7, #28]
    ctx.rxBuf     = &buf[*bytesToSend];
 80170b0:	68bb      	ldr	r3, [r7, #8]
 80170b2:	781b      	ldrb	r3, [r3, #0]
 80170b4:	461a      	mov	r2, r3
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	4413      	add	r3, r2
 80170ba:	623b      	str	r3, [r7, #32]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 80170bc:	2328      	movs	r3, #40	; 0x28
 80170be:	84bb      	strh	r3, [r7, #36]	; 0x24
    ctx.rxRcvdLen = rxLength;
 80170c0:	683b      	ldr	r3, [r7, #0]
 80170c2:	62bb      	str	r3, [r7, #40]	; 0x28
    ctx.fwt       = fwt;
 80170c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170c6:	633b      	str	r3, [r7, #48]	; 0x30
    
    rfalStartTransceive( &ctx );
 80170c8:	f107 0318 	add.w	r3, r7, #24
 80170cc:	4618      	mov	r0, r3
 80170ce:	f7fe fd5d 	bl	8015b8c <rfalStartTransceive>
    
    /* Additionally enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 80170d2:	2004      	movs	r0, #4
 80170d4:	f7ec ffd8 	bl	8004088 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 80170d8:	2004      	movs	r0, #4
 80170da:	f7ed f811 	bl	8004100 <st25r3911EnableInterrupts>
    
    /*******************************************************************************/
    collByte = 0;
 80170de:	2300      	movs	r3, #0
 80170e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    
    /* save the collision byte */
    if ((*bitsToSend) > 0U)
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	781b      	ldrb	r3, [r3, #0]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d02d      	beq.n	8017148 <rfalISO14443ATransceiveAnticollisionFrame+0x10c>
    {
        buf[(*bytesToSend)] <<= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 80170ec:	68bb      	ldr	r3, [r7, #8]
 80170ee:	781b      	ldrb	r3, [r3, #0]
 80170f0:	461a      	mov	r2, r3
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	4413      	add	r3, r2
 80170f6:	781b      	ldrb	r3, [r3, #0]
 80170f8:	461a      	mov	r2, r3
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	781b      	ldrb	r3, [r3, #0]
 80170fe:	f1c3 0308 	rsb	r3, r3, #8
 8017102:	409a      	lsls	r2, r3
 8017104:	68bb      	ldr	r3, [r7, #8]
 8017106:	781b      	ldrb	r3, [r3, #0]
 8017108:	4619      	mov	r1, r3
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	440b      	add	r3, r1
 801710e:	b2d2      	uxtb	r2, r2
 8017110:	701a      	strb	r2, [r3, #0]
        buf[(*bytesToSend)] >>= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 8017112:	68bb      	ldr	r3, [r7, #8]
 8017114:	781b      	ldrb	r3, [r3, #0]
 8017116:	461a      	mov	r2, r3
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	4413      	add	r3, r2
 801711c:	781b      	ldrb	r3, [r3, #0]
 801711e:	461a      	mov	r2, r3
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	781b      	ldrb	r3, [r3, #0]
 8017124:	f1c3 0308 	rsb	r3, r3, #8
 8017128:	411a      	asrs	r2, r3
 801712a:	68bb      	ldr	r3, [r7, #8]
 801712c:	781b      	ldrb	r3, [r3, #0]
 801712e:	4619      	mov	r1, r3
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	440b      	add	r3, r1
 8017134:	b2d2      	uxtb	r2, r2
 8017136:	701a      	strb	r2, [r3, #0]
        collByte = buf[(*bytesToSend)];
 8017138:	68bb      	ldr	r3, [r7, #8]
 801713a:	781b      	ldrb	r3, [r3, #0]
 801713c:	461a      	mov	r2, r3
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	4413      	add	r3, r2
 8017142:	781b      	ldrb	r3, [r3, #0]
 8017144:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }
    
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 8017148:	f7fe fea5 	bl	8015e96 <rfalTransceiveRunBlockingTx>
 801714c:	4603      	mov	r3, r0
 801714e:	86fb      	strh	r3, [r7, #54]	; 0x36
    if( ret == ERR_NONE)
 8017150:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017152:	2b00      	cmp	r3, #0
 8017154:	d14f      	bne.n	80171f6 <rfalISO14443ATransceiveAnticollisionFrame+0x1ba>
    {
       ret = rfalTransceiveBlockingRx();
 8017156:	f7fe febb 	bl	8015ed0 <rfalTransceiveBlockingRx>
 801715a:	4603      	mov	r3, r0
 801715c:	86fb      	strh	r3, [r7, #54]	; 0x36
    
       /*******************************************************************************/
       if ((*bitsToSend) > 0U)
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	781b      	ldrb	r3, [r3, #0]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d031      	beq.n	80171ca <rfalISO14443ATransceiveAnticollisionFrame+0x18e>
       {
           buf[(*bytesToSend)] >>= (*bitsToSend);
 8017166:	68bb      	ldr	r3, [r7, #8]
 8017168:	781b      	ldrb	r3, [r3, #0]
 801716a:	461a      	mov	r2, r3
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	4413      	add	r3, r2
 8017170:	781b      	ldrb	r3, [r3, #0]
 8017172:	461a      	mov	r2, r3
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	781b      	ldrb	r3, [r3, #0]
 8017178:	411a      	asrs	r2, r3
 801717a:	68bb      	ldr	r3, [r7, #8]
 801717c:	781b      	ldrb	r3, [r3, #0]
 801717e:	4619      	mov	r1, r3
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	440b      	add	r3, r1
 8017184:	b2d2      	uxtb	r2, r2
 8017186:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] <<= (*bitsToSend);
 8017188:	68bb      	ldr	r3, [r7, #8]
 801718a:	781b      	ldrb	r3, [r3, #0]
 801718c:	461a      	mov	r2, r3
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	4413      	add	r3, r2
 8017192:	781b      	ldrb	r3, [r3, #0]
 8017194:	461a      	mov	r2, r3
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	781b      	ldrb	r3, [r3, #0]
 801719a:	409a      	lsls	r2, r3
 801719c:	68bb      	ldr	r3, [r7, #8]
 801719e:	781b      	ldrb	r3, [r3, #0]
 80171a0:	4619      	mov	r1, r3
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	440b      	add	r3, r1
 80171a6:	b2d2      	uxtb	r2, r2
 80171a8:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] |= collByte;
 80171aa:	68bb      	ldr	r3, [r7, #8]
 80171ac:	781b      	ldrb	r3, [r3, #0]
 80171ae:	461a      	mov	r2, r3
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	4413      	add	r3, r2
 80171b4:	7819      	ldrb	r1, [r3, #0]
 80171b6:	68bb      	ldr	r3, [r7, #8]
 80171b8:	781b      	ldrb	r3, [r3, #0]
 80171ba:	461a      	mov	r2, r3
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	4413      	add	r3, r2
 80171c0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80171c4:	430a      	orrs	r2, r1
 80171c6:	b2d2      	uxtb	r2, r2
 80171c8:	701a      	strb	r2, [r3, #0]
       }
       
       if( (ERR_RF_COLLISION == ret) )
 80171ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80171cc:	2b1d      	cmp	r3, #29
 80171ce:	d112      	bne.n	80171f6 <rfalISO14443ATransceiveAnticollisionFrame+0x1ba>
       {
           /* read out collision register */
           st25r3911ReadRegister( ST25R3911_REG_COLLISION_STATUS, &collData);
 80171d0:	f107 0317 	add.w	r3, r7, #23
 80171d4:	4619      	mov	r1, r3
 80171d6:	201c      	movs	r0, #28
 80171d8:	f7ec fa9c 	bl	8003714 <st25r3911ReadRegister>

           (*bytesToSend) = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_byte) & 0x0FU); // 4-bits Byte information
 80171dc:	7dfb      	ldrb	r3, [r7, #23]
 80171de:	091b      	lsrs	r3, r3, #4
 80171e0:	b2da      	uxtb	r2, r3
 80171e2:	68bb      	ldr	r3, [r7, #8]
 80171e4:	701a      	strb	r2, [r3, #0]
           (*bitsToSend)  = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_bit)  & 0x07U); // 3-bits bit information
 80171e6:	7dfb      	ldrb	r3, [r7, #23]
 80171e8:	085b      	lsrs	r3, r3, #1
 80171ea:	b2db      	uxtb	r3, r3
 80171ec:	f003 0307 	and.w	r3, r3, #7
 80171f0:	b2da      	uxtb	r2, r3
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	701a      	strb	r2, [r3, #0]
    }
    
   
    /*******************************************************************************/
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 80171f6:	2004      	movs	r0, #4
 80171f8:	f7ec ff8e 	bl	8004118 <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 80171fc:	2101      	movs	r1, #1
 80171fe:	2005      	movs	r0, #5
 8017200:	f7ec fc0a 	bl	8003a18 <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 8017204:	2180      	movs	r1, #128	; 0x80
 8017206:	2009      	movs	r0, #9
 8017208:	f7ec fc06 	bl	8003a18 <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 801720c:	f240 1001 	movw	r0, #257	; 0x101
 8017210:	f7f5 ff36 	bl	800d080 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017214:	f44f 7081 	mov.w	r0, #258	; 0x102
 8017218:	f7f5 ff32 	bl	800d080 <rfalSetAnalogConfig>
    
    return ret;
 801721c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 801721e:	4618      	mov	r0, r3
 8017220:	3738      	adds	r7, #56	; 0x38
 8017222:	46bd      	mov	sp, r7
 8017224:	bd80      	pop	{r7, pc}
 8017226:	bf00      	nop
 8017228:	2000393c 	.word	0x2000393c

0801722c <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 801722c:	b580      	push	{r7, lr}
 801722e:	b08c      	sub	sp, #48	; 0x30
 8017230:	af00      	add	r7, sp, #0
 8017232:	60f8      	str	r0, [r7, #12]
 8017234:	607a      	str	r2, [r7, #4]
 8017236:	461a      	mov	r2, r3
 8017238:	460b      	mov	r3, r1
 801723a:	72fb      	strb	r3, [r7, #11]
 801723c:	4613      	mov	r3, r2
 801723e:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8017240:	4b29      	ldr	r3, [pc, #164]	; (80172e8 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 8017242:	781b      	ldrb	r3, [r3, #0]
 8017244:	2b01      	cmp	r3, #1
 8017246:	d903      	bls.n	8017250 <rfalISO15693TransceiveAnticollisionFrame+0x24>
 8017248:	4b27      	ldr	r3, [pc, #156]	; (80172e8 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 801724a:	785b      	ldrb	r3, [r3, #1]
 801724c:	2b07      	cmp	r3, #7
 801724e:	d001      	beq.n	8017254 <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 8017250:	2321      	movs	r3, #33	; 0x21
 8017252:	e045      	b.n	80172e0 <rfalISO15693TransceiveAnticollisionFrame+0xb4>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 8017254:	f241 0003 	movw	r0, #4099	; 0x1003
 8017258:	f7f5 ff12 	bl	800d080 <rfalSetAnalogConfig>

    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 801725c:	4b22      	ldr	r3, [pc, #136]	; (80172e8 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 801725e:	2210      	movs	r2, #16
 8017260:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 8017264:	7afb      	ldrb	r3, [r7, #11]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d101      	bne.n	801726e <rfalISO15693TransceiveAnticollisionFrame+0x42>
 801726a:	220b      	movs	r2, #11
 801726c:	e000      	b.n	8017270 <rfalISO15693TransceiveAnticollisionFrame+0x44>
 801726e:	220a      	movs	r2, #10
 8017270:	7afb      	ldrb	r3, [r7, #11]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d101      	bne.n	801727a <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 8017276:	2340      	movs	r3, #64	; 0x40
 8017278:	e000      	b.n	801727c <rfalISO15693TransceiveAnticollisionFrame+0x50>
 801727a:	2300      	movs	r3, #0
 801727c:	4313      	orrs	r3, r2
 801727e:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 8017284:	7afb      	ldrb	r3, [r7, #11]
 8017286:	b29b      	uxth	r3, r3
 8017288:	00db      	lsls	r3, r3, #3
 801728a:	b29b      	uxth	r3, r3
 801728c:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 8017292:	7abb      	ldrb	r3, [r7, #10]
 8017294:	b29b      	uxth	r3, r3
 8017296:	00db      	lsls	r3, r3, #3
 8017298:	b29b      	uxth	r3, r3
 801729a:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 801729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801729e:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 80172a0:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 80172a4:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 80172a6:	f107 0310 	add.w	r3, r7, #16
 80172aa:	4618      	mov	r0, r3
 80172ac:	f7fe fc6e 	bl	8015b8c <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 80172b0:	f7fe fdf1 	bl	8015e96 <rfalTransceiveRunBlockingTx>
 80172b4:	4603      	mov	r3, r0
 80172b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 80172b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d103      	bne.n	80172c6 <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 80172be:	f7fe fe07 	bl	8015ed0 <rfalTransceiveBlockingRx>
 80172c2:	4603      	mov	r3, r0
 80172c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80172c6:	f241 0001 	movw	r0, #4097	; 0x1001
 80172ca:	f7f5 fed9 	bl	800d080 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80172ce:	f241 0002 	movw	r0, #4098	; 0x1002
 80172d2:	f7f5 fed5 	bl	800d080 <rfalSetAnalogConfig>
        
    gRFAL.nfcvData.ignoreBits = 0;
 80172d6:	4b04      	ldr	r3, [pc, #16]	; (80172e8 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 80172d8:	2200      	movs	r2, #0
 80172da:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
    return ret;
 80172de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 80172e0:	4618      	mov	r0, r3
 80172e2:	3730      	adds	r7, #48	; 0x30
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}
 80172e8:	2000393c 	.word	0x2000393c

080172ec <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b088      	sub	sp, #32
 80172f0:	af02      	add	r7, sp, #8
 80172f2:	60f8      	str	r0, [r7, #12]
 80172f4:	460b      	mov	r3, r1
 80172f6:	607a      	str	r2, [r7, #4]
 80172f8:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 80172fa:	7afa      	ldrb	r2, [r7, #11]
 80172fc:	f107 0017 	add.w	r0, r7, #23
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	9300      	str	r3, [sp, #0]
 8017304:	4613      	mov	r3, r2
 8017306:	68fa      	ldr	r2, [r7, #12]
 8017308:	2100      	movs	r1, #0
 801730a:	f7ff ff8f 	bl	801722c <rfalISO15693TransceiveAnticollisionFrame>
 801730e:	4603      	mov	r3, r0
}
 8017310:	4618      	mov	r0, r3
 8017312:	3718      	adds	r7, #24
 8017314:	46bd      	mov	sp, r7
 8017316:	bd80      	pop	{r7, pc}

08017318 <rfalISO15693TransceiveEOF>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOF( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b08a      	sub	sp, #40	; 0x28
 801731c:	af04      	add	r7, sp, #16
 801731e:	60f8      	str	r0, [r7, #12]
 8017320:	460b      	mov	r3, r1
 8017322:	607a      	str	r2, [r7, #4]
 8017324:	72fb      	strb	r3, [r7, #11]
    ReturnCode ret;
    uint8_t    dummy;
    
    /* Check if RFAL is properly initialized */
    if( ( gRFAL.state < RFAL_STATE_MODE_SET ) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8017326:	4b10      	ldr	r3, [pc, #64]	; (8017368 <rfalISO15693TransceiveEOF+0x50>)
 8017328:	781b      	ldrb	r3, [r3, #0]
 801732a:	2b01      	cmp	r3, #1
 801732c:	d903      	bls.n	8017336 <rfalISO15693TransceiveEOF+0x1e>
 801732e:	4b0e      	ldr	r3, [pc, #56]	; (8017368 <rfalISO15693TransceiveEOF+0x50>)
 8017330:	785b      	ldrb	r3, [r3, #1]
 8017332:	2b07      	cmp	r3, #7
 8017334:	d001      	beq.n	801733a <rfalISO15693TransceiveEOF+0x22>
    {
        return ERR_WRONG_STATE;
 8017336:	2321      	movs	r3, #33	; 0x21
 8017338:	e012      	b.n	8017360 <rfalISO15693TransceiveEOF+0x48>
    }
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveBlockingTxRx( &dummy,
 801733a:	7afb      	ldrb	r3, [r7, #11]
 801733c:	b29a      	uxth	r2, r3
 801733e:	f107 0015 	add.w	r0, r7, #21
 8017342:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8017346:	9302      	str	r3, [sp, #8]
 8017348:	2303      	movs	r3, #3
 801734a:	9301      	str	r3, [sp, #4]
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	9300      	str	r3, [sp, #0]
 8017350:	4613      	mov	r3, r2
 8017352:	68fa      	ldr	r2, [r7, #12]
 8017354:	2100      	movs	r1, #0
 8017356:	f7fe fdd1 	bl	8015efc <rfalTransceiveBlockingTxRx>
 801735a:	4603      	mov	r3, r0
 801735c:	82fb      	strh	r3, [r7, #22]
                                      rxBuf,
                                      rxBufLen,
                                      actLen,
                                      ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP |(uint32_t)RFAL_TXRX_FLAGS_AGC_ON ),
                                      rfalConv64fcTo1fc(ISO15693_FWT) );
    return ret;
 801735e:	8afb      	ldrh	r3, [r7, #22]
}
 8017360:	4618      	mov	r0, r3
 8017362:	3718      	adds	r7, #24
 8017364:	46bd      	mov	sp, r7
 8017366:	bd80      	pop	{r7, pc}
 8017368:	2000393c 	.word	0x2000393c

0801736c <rfalFeliCaPoll>:

#if RFAL_FEATURE_NFCF

/*******************************************************************************/
ReturnCode rfalFeliCaPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes* pollResList, uint8_t pollResListSize, uint8_t *devicesDetected, uint8_t *collisionsDetected )
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b08c      	sub	sp, #48	; 0x30
 8017370:	af04      	add	r7, sp, #16
 8017372:	603b      	str	r3, [r7, #0]
 8017374:	4603      	mov	r3, r0
 8017376:	71fb      	strb	r3, [r7, #7]
 8017378:	460b      	mov	r3, r1
 801737a:	80bb      	strh	r3, [r7, #4]
 801737c:	4613      	mov	r3, r2
 801737e:	71bb      	strb	r3, [r7, #6]
    uint8_t           colDetected;
    rfalEHandling     curHandling;
    uint8_t           nbSlots;
        
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 8017380:	4b6b      	ldr	r3, [pc, #428]	; (8017530 <rfalFeliCaPoll+0x1c4>)
 8017382:	781b      	ldrb	r3, [r3, #0]
 8017384:	2b01      	cmp	r3, #1
 8017386:	d903      	bls.n	8017390 <rfalFeliCaPoll+0x24>
 8017388:	4b69      	ldr	r3, [pc, #420]	; (8017530 <rfalFeliCaPoll+0x1c4>)
 801738a:	785b      	ldrb	r3, [r3, #1]
 801738c:	2b06      	cmp	r3, #6
 801738e:	d001      	beq.n	8017394 <rfalFeliCaPoll+0x28>
    {
        return ERR_WRONG_STATE;
 8017390:	2321      	movs	r3, #33	; 0x21
 8017392:	e0c9      	b.n	8017528 <rfalFeliCaPoll+0x1bc>
    }
    
    frameIdx    = 0;
 8017394:	2300      	movs	r3, #0
 8017396:	767b      	strb	r3, [r7, #25]
    colDetected = 0;
 8017398:	2300      	movs	r3, #0
 801739a:	773b      	strb	r3, [r7, #28]
    devDetected = 0;
 801739c:	2300      	movs	r3, #0
 801739e:	777b      	strb	r3, [r7, #29]
    nbSlots     = (uint8_t)slots;
 80173a0:	79fb      	ldrb	r3, [r7, #7]
 80173a2:	76fb      	strb	r3, [r7, #27]
    
    /*******************************************************************************/
    /* Compute SENSF_REQ frame */
    frame[frameIdx++] = (uint8_t)FELICA_CMD_POLLING; /* CMD: SENF_REQ                       */
 80173a4:	7e7b      	ldrb	r3, [r7, #25]
 80173a6:	1c5a      	adds	r2, r3, #1
 80173a8:	767a      	strb	r2, [r7, #25]
 80173aa:	3320      	adds	r3, #32
 80173ac:	443b      	add	r3, r7
 80173ae:	2200      	movs	r2, #0
 80173b0:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 80173b4:	88bb      	ldrh	r3, [r7, #4]
 80173b6:	0a1b      	lsrs	r3, r3, #8
 80173b8:	b29a      	uxth	r2, r3
 80173ba:	7e7b      	ldrb	r3, [r7, #25]
 80173bc:	1c59      	adds	r1, r3, #1
 80173be:	7679      	strb	r1, [r7, #25]
 80173c0:	b2d2      	uxtb	r2, r2
 80173c2:	3320      	adds	r3, #32
 80173c4:	443b      	add	r3, r7
 80173c6:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode & 0xFFU);  /* System Code (SC)                    */
 80173ca:	7e7b      	ldrb	r3, [r7, #25]
 80173cc:	1c5a      	adds	r2, r3, #1
 80173ce:	767a      	strb	r2, [r7, #25]
 80173d0:	88ba      	ldrh	r2, [r7, #4]
 80173d2:	b2d2      	uxtb	r2, r2
 80173d4:	3320      	adds	r3, #32
 80173d6:	443b      	add	r3, r7
 80173d8:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = reqCode;                     /* Communication Parameter Request (RC)*/
 80173dc:	7e7b      	ldrb	r3, [r7, #25]
 80173de:	1c5a      	adds	r2, r3, #1
 80173e0:	767a      	strb	r2, [r7, #25]
 80173e2:	3320      	adds	r3, #32
 80173e4:	443b      	add	r3, r7
 80173e6:	79ba      	ldrb	r2, [r7, #6]
 80173e8:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = nbSlots;                     /* TimeSlot (TSN)                      */
 80173ec:	7e7b      	ldrb	r3, [r7, #25]
 80173ee:	1c5a      	adds	r2, r3, #1
 80173f0:	767a      	strb	r2, [r7, #25]
 80173f2:	3320      	adds	r3, #32
 80173f4:	443b      	add	r3, r7
 80173f6:	7efa      	ldrb	r2, [r7, #27]
 80173f8:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    
    /*******************************************************************************/
    /* NRT should not stop on reception - Use EMVCo mode to run NRT in nrt_emv     *
     * ERRORHANDLING_EMVCO has no special handling for NFC-F mode                  */
    curHandling = gRFAL.conf.eHandling;
 80173fc:	4b4c      	ldr	r3, [pc, #304]	; (8017530 <rfalFeliCaPoll+0x1c4>)
 80173fe:	79db      	ldrb	r3, [r3, #7]
 8017400:	763b      	strb	r3, [r7, #24]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 8017402:	2002      	movs	r0, #2
 8017404:	f7fe fae6 	bl	80159d4 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Run transceive blocking, 
     * Calculate Total Response Time in(64/fc): 
     *                       512 PICC process time + (n * 256 Time Slot duration)  */
    ret = rfalTransceiveBlockingTx( frame, 
 8017408:	7e7b      	ldrb	r3, [r7, #25]
 801740a:	b299      	uxth	r1, r3
                                    (uint16_t)frameIdx, 
                                    (uint8_t*)gRFAL.nfcfData.pollResponses, 
                                    RFAL_FELICA_POLL_RES_LEN, 
                                    &actLen,
                                    (RFAL_TXRX_FLAGS_DEFAULT),
                                    rfalConv64fcTo1fc( RFAL_FELICA_POLL_DELAY_TIME + (RFAL_FELICA_POLL_SLOT_TIME * ((uint32_t)nbSlots + 1U)) ) );
 801740c:	7efb      	ldrb	r3, [r7, #27]
 801740e:	3303      	adds	r3, #3
    ret = rfalTransceiveBlockingTx( frame, 
 8017410:	039b      	lsls	r3, r3, #14
 8017412:	f107 0010 	add.w	r0, r7, #16
 8017416:	9302      	str	r3, [sp, #8]
 8017418:	2300      	movs	r3, #0
 801741a:	9301      	str	r3, [sp, #4]
 801741c:	f107 030e 	add.w	r3, r7, #14
 8017420:	9300      	str	r3, [sp, #0]
 8017422:	2314      	movs	r3, #20
 8017424:	4a43      	ldr	r2, [pc, #268]	; (8017534 <rfalFeliCaPoll+0x1c8>)
 8017426:	f7fe fd07 	bl	8015e38 <rfalTransceiveBlockingTx>
 801742a:	4603      	mov	r3, r0
 801742c:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* If Tx OK, Wait for all responses, store them as soon as they appear         */
    if( ret == ERR_NONE )
 801742e:	8bfb      	ldrh	r3, [r7, #30]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d145      	bne.n	80174c0 <rfalFeliCaPoll+0x154>
    {
        bool timeout;

        do 
        {
            ret = rfalTransceiveBlockingRx();
 8017434:	f7fe fd4c 	bl	8015ed0 <rfalTransceiveBlockingRx>
 8017438:	4603      	mov	r3, r0
 801743a:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 801743c:	8bfb      	ldrh	r3, [r7, #30]
 801743e:	2b04      	cmp	r3, #4
 8017440:	d102      	bne.n	8017448 <rfalFeliCaPoll+0xdc>
            {
                /* Upon timeout the full Poll Delay + (Slot time)*(nbSlots) has expired */
                timeout = true;
 8017442:	2301      	movs	r3, #1
 8017444:	76bb      	strb	r3, [r7, #26]
 8017446:	e030      	b.n	80174aa <rfalFeliCaPoll+0x13e>
            }
            else
            {
                /* Reception done, reEnabled Rx for following Slot */
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 8017448:	20d1      	movs	r0, #209	; 0xd1
 801744a:	f7ec fc27 	bl	8003c9c <st25r3911ExecuteCommand>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 801744e:	20d5      	movs	r0, #213	; 0xd5
 8017450:	f7ec fc24 	bl	8003c9c <st25r3911ExecuteCommand>
                
                /* If the reception was OK, new device found */
                if( ret == ERR_NONE )
 8017454:	8bfb      	ldrh	r3, [r7, #30]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d10e      	bne.n	8017478 <rfalFeliCaPoll+0x10c>
                {
                   devDetected++;
 801745a:	7f7b      	ldrb	r3, [r7, #29]
 801745c:	3301      	adds	r3, #1
 801745e:	777b      	strb	r3, [r7, #29]
                   
                   /* Overwrite the Transceive context for the next reception */
                   gRFAL.TxRx.ctx.rxBuf = (uint8_t*)gRFAL.nfcfData.pollResponses[devDetected];
 8017460:	7f7a      	ldrb	r2, [r7, #29]
 8017462:	4613      	mov	r3, r2
 8017464:	009b      	lsls	r3, r3, #2
 8017466:	4413      	add	r3, r2
 8017468:	009b      	lsls	r3, r3, #2
 801746a:	3378      	adds	r3, #120	; 0x78
 801746c:	4a30      	ldr	r2, [pc, #192]	; (8017530 <rfalFeliCaPoll+0x1c4>)
 801746e:	4413      	add	r3, r2
 8017470:	3306      	adds	r3, #6
 8017472:	4a2f      	ldr	r2, [pc, #188]	; (8017530 <rfalFeliCaPoll+0x1c4>)
 8017474:	6253      	str	r3, [r2, #36]	; 0x24
 8017476:	e002      	b.n	801747e <rfalFeliCaPoll+0x112>
                }
                /* If the reception was not OK, mark as collision */
                else
                {
                    colDetected++;
 8017478:	7f3b      	ldrb	r3, [r7, #28]
 801747a:	3301      	adds	r3, #1
 801747c:	773b      	strb	r3, [r7, #28]
                }
                
                /* Check whether NRT has expired meanwhile  */
                timeout = st25r3911CheckReg( ST25R3911_REG_REGULATOR_RESULT, ST25R3911_REG_REGULATOR_RESULT_nrt_on, 0x00 );
 801747e:	2200      	movs	r2, #0
 8017480:	2102      	movs	r1, #2
 8017482:	202b      	movs	r0, #43	; 0x2b
 8017484:	f7eb ff42 	bl	800330c <st25r3911CheckReg>
 8017488:	4603      	mov	r3, r0
 801748a:	76bb      	strb	r3, [r7, #26]
                if( !timeout )
 801748c:	7ebb      	ldrb	r3, [r7, #26]
 801748e:	f083 0301 	eor.w	r3, r3, #1
 8017492:	b2db      	uxtb	r3, r3
 8017494:	2b00      	cmp	r3, #0
 8017496:	d008      	beq.n	80174aa <rfalFeliCaPoll+0x13e>
                {
                    /* Jump again into transceive Rx state for the following reception */
                    gRFAL.TxRx.status = ERR_BUSY;
 8017498:	4b25      	ldr	r3, [pc, #148]	; (8017530 <rfalFeliCaPoll+0x1c4>)
 801749a:	2202      	movs	r2, #2
 801749c:	82da      	strh	r2, [r3, #22]
                    gRFAL.state       = RFAL_STATE_TXRX;
 801749e:	4b24      	ldr	r3, [pc, #144]	; (8017530 <rfalFeliCaPoll+0x1c4>)
 80174a0:	2203      	movs	r2, #3
 80174a2:	701a      	strb	r2, [r3, #0]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 80174a4:	4b22      	ldr	r3, [pc, #136]	; (8017530 <rfalFeliCaPoll+0x1c4>)
 80174a6:	2251      	movs	r2, #81	; 0x51
 80174a8:	751a      	strb	r2, [r3, #20]
                }
            }
        }while( ((nbSlots--) != 0U) && !timeout );
 80174aa:	7efb      	ldrb	r3, [r7, #27]
 80174ac:	1e5a      	subs	r2, r3, #1
 80174ae:	76fa      	strb	r2, [r7, #27]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d005      	beq.n	80174c0 <rfalFeliCaPoll+0x154>
 80174b4:	7ebb      	ldrb	r3, [r7, #26]
 80174b6:	f083 0301 	eor.w	r3, r3, #1
 80174ba:	b2db      	uxtb	r3, r3
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d1b9      	bne.n	8017434 <rfalFeliCaPoll+0xc8>
    }
    
    /*******************************************************************************/
    /* Restore NRT to normal mode - back to previous error handling */
    rfalSetErrorHandling( curHandling );
 80174c0:	7e3b      	ldrb	r3, [r7, #24]
 80174c2:	4618      	mov	r0, r3
 80174c4:	f7fe fa86 	bl	80159d4 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Assign output parameters if requested                                       */
    
    if( (pollResList != NULL) && (pollResListSize > 0U) && (devDetected > 0U) )
 80174c8:	683b      	ldr	r3, [r7, #0]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d017      	beq.n	80174fe <rfalFeliCaPoll+0x192>
 80174ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d013      	beq.n	80174fe <rfalFeliCaPoll+0x192>
 80174d6:	7f7b      	ldrb	r3, [r7, #29]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d010      	beq.n	80174fe <rfalFeliCaPoll+0x192>
    {
        ST_MEMCPY( pollResList, gRFAL.nfcfData.pollResponses, (RFAL_FELICA_POLL_RES_LEN * (uint32_t)MIN(pollResListSize, devDetected) ) );
 80174dc:	7f7a      	ldrb	r2, [r7, #29]
 80174de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80174e2:	4293      	cmp	r3, r2
 80174e4:	bf28      	it	cs
 80174e6:	4613      	movcs	r3, r2
 80174e8:	b2db      	uxtb	r3, r3
 80174ea:	461a      	mov	r2, r3
 80174ec:	4613      	mov	r3, r2
 80174ee:	009b      	lsls	r3, r3, #2
 80174f0:	4413      	add	r3, r2
 80174f2:	009b      	lsls	r3, r3, #2
 80174f4:	461a      	mov	r2, r3
 80174f6:	490f      	ldr	r1, [pc, #60]	; (8017534 <rfalFeliCaPoll+0x1c8>)
 80174f8:	6838      	ldr	r0, [r7, #0]
 80174fa:	f001 fc09 	bl	8018d10 <memcpy>
    }
    
    if( devicesDetected != NULL )
 80174fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017500:	2b00      	cmp	r3, #0
 8017502:	d002      	beq.n	801750a <rfalFeliCaPoll+0x19e>
    {
        *devicesDetected = devDetected;
 8017504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017506:	7f7a      	ldrb	r2, [r7, #29]
 8017508:	701a      	strb	r2, [r3, #0]
    }
    
    if( collisionsDetected != NULL )
 801750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801750c:	2b00      	cmp	r3, #0
 801750e:	d002      	beq.n	8017516 <rfalFeliCaPoll+0x1aa>
    {
        *collisionsDetected = colDetected;
 8017510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017512:	7f3a      	ldrb	r2, [r7, #28]
 8017514:	701a      	strb	r2, [r3, #0]
    }
    
    return (( (colDetected != 0U) || (devDetected != 0U)) ? ERR_NONE : ret);
 8017516:	7f3b      	ldrb	r3, [r7, #28]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d104      	bne.n	8017526 <rfalFeliCaPoll+0x1ba>
 801751c:	7f7b      	ldrb	r3, [r7, #29]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d101      	bne.n	8017526 <rfalFeliCaPoll+0x1ba>
 8017522:	8bfb      	ldrh	r3, [r7, #30]
 8017524:	e000      	b.n	8017528 <rfalFeliCaPoll+0x1bc>
 8017526:	2300      	movs	r3, #0
}
 8017528:	4618      	mov	r0, r3
 801752a:	3720      	adds	r7, #32
 801752c:	46bd      	mov	sp, r7
 801752e:	bd80      	pop	{r7, pc}
 8017530:	2000393c 	.word	0x2000393c
 8017534:	200039ba 	.word	0x200039ba

08017538 <rfalIsExtFieldOn>:



/*******************************************************************************/
bool rfalIsExtFieldOn( void )
{
 8017538:	b580      	push	{r7, lr}
 801753a:	af00      	add	r7, sp, #0
    return st25r3911IsExtFieldOn();
 801753c:	2240      	movs	r2, #64	; 0x40
 801753e:	2140      	movs	r1, #64	; 0x40
 8017540:	2030      	movs	r0, #48	; 0x30
 8017542:	f7eb fee3 	bl	800330c <st25r3911CheckReg>
 8017546:	4603      	mov	r3, r0
}
 8017548:	4618      	mov	r0, r3
 801754a:	bd80      	pop	{r7, pc}

0801754c <rfalListenStart>:

#if RFAL_FEATURE_LISTEN_MODE

/*******************************************************************************/
ReturnCode rfalListenStart( uint32_t lmMask, const rfalLmConfPA *confA, const rfalLmConfPB *confB, const rfalLmConfPF *confF, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 801754c:	b580      	push	{r7, lr}
 801754e:	b084      	sub	sp, #16
 8017550:	af00      	add	r7, sp, #0
 8017552:	60f8      	str	r0, [r7, #12]
 8017554:	60b9      	str	r1, [r7, #8]
 8017556:	607a      	str	r2, [r7, #4]
 8017558:	603b      	str	r3, [r7, #0]
    NO_WARNING(confA);
    NO_WARNING(confB);
    NO_WARNING(confF);
    
    
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 801755a:	4b29      	ldr	r3, [pc, #164]	; (8017600 <rfalListenStart+0xb4>)
 801755c:	2200      	movs	r2, #0
 801755e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    
    
    /*******************************************************************************/
    if( ((lmMask & RFAL_LM_MASK_NFCA) != 0U) || ((lmMask & RFAL_LM_MASK_NFCB) != 0U) || ((lmMask & RFAL_LM_MASK_NFCF) != 0U) )
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017568:	2b00      	cmp	r3, #0
 801756a:	d109      	bne.n	8017580 <rfalListenStart+0x34>
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017572:	2b00      	cmp	r3, #0
 8017574:	d104      	bne.n	8017580 <rfalListenStart+0x34>
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801757c:	2b00      	cmp	r3, #0
 801757e:	d001      	beq.n	8017584 <rfalListenStart+0x38>
    {
        return ERR_NOTSUPP;
 8017580:	2318      	movs	r3, #24
 8017582:	e038      	b.n	80175f6 <rfalListenStart+0xaa>
    }
    
    
    /*******************************************************************************/
    if( (lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801758a:	2b00      	cmp	r3, #0
 801758c:	d032      	beq.n	80175f4 <rfalListenStart+0xa8>
    {
        gRFAL.state       = RFAL_STATE_LM;
 801758e:	4b1c      	ldr	r3, [pc, #112]	; (8017600 <rfalListenStart+0xb4>)
 8017590:	2204      	movs	r2, #4
 8017592:	701a      	strb	r2, [r3, #0]
       
        gRFAL.Lm.rxBuf    = rxBuf;
 8017594:	4a1a      	ldr	r2, [pc, #104]	; (8017600 <rfalListenStart+0xb4>)
 8017596:	69bb      	ldr	r3, [r7, #24]
 8017598:	6593      	str	r3, [r2, #88]	; 0x58
        gRFAL.Lm.rxBufLen = rxBufLen;
 801759a:	4a19      	ldr	r2, [pc, #100]	; (8017600 <rfalListenStart+0xb4>)
 801759c:	8bbb      	ldrh	r3, [r7, #28]
 801759e:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
        gRFAL.Lm.rxLen    = rxLen;
 80175a2:	4a17      	ldr	r2, [pc, #92]	; (8017600 <rfalListenStart+0xb4>)
 80175a4:	6a3b      	ldr	r3, [r7, #32]
 80175a6:	6613      	str	r3, [r2, #96]	; 0x60
        *gRFAL.Lm.rxLen   = 0;
 80175a8:	4b15      	ldr	r3, [pc, #84]	; (8017600 <rfalListenStart+0xb4>)
 80175aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80175ac:	2200      	movs	r2, #0
 80175ae:	801a      	strh	r2, [r3, #0]
        gRFAL.Lm.dataFlag = false;
 80175b0:	4b13      	ldr	r3, [pc, #76]	; (8017600 <rfalListenStart+0xb4>)
 80175b2:	2200      	movs	r2, #0
 80175b4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        
        /* Disable GPT trigger source */
        st25r3911ChangeRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_gptc_mask, ST25R3911_REG_GPT_CONTROL_gptc_no_trigger );
 80175b8:	2200      	movs	r2, #0
 80175ba:	21e0      	movs	r1, #224	; 0xe0
 80175bc:	2011      	movs	r0, #17
 80175be:	f7ec fa6c 	bl	8003a9a <st25r3911ChangeRegisterBits>
      
        /* On Bit Rate Detection Mode ST25R391x will filter incoming frames during MRT time starting on External Field On event, use 512/fc steps */
        st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo512fc( RFAL_LM_GT ) );
 80175c2:	2102      	movs	r1, #2
 80175c4:	200e      	movs	r0, #14
 80175c6:	f7ec f9db 	bl	8003980 <st25r3911WriteRegister>
        
        /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
        st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 80175ca:	21e0      	movs	r1, #224	; 0xe0
 80175cc:	2005      	movs	r0, #5
 80175ce:	f7ec fa23 	bl	8003a18 <st25r3911ClrRegisterBits>
        
        /* Enable External Field Detector */
        st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 80175d2:	2110      	movs	r1, #16
 80175d4:	2009      	movs	r0, #9
 80175d6:	f7ec fa42 	bl	8003a5e <st25r3911SetRegisterBits>
      
        /* Enable Receiver */
        st25r3911ChangeRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_rx_en, ST25R3911_REG_OP_CONTROL_rx_en );
 80175da:	2240      	movs	r2, #64	; 0x40
 80175dc:	2140      	movs	r1, #64	; 0x40
 80175de:	2002      	movs	r0, #2
 80175e0:	f7ec fa5b 	bl	8003a9a <st25r3911ChangeRegisterBits>
        
        /* Set Analog configurations for generic Listen mode */
        /* Not on SetState(POWER OFF) as otherwise would be applied on every Field Event */
        rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_ON) );
 80175e4:	2006      	movs	r0, #6
 80175e6:	f7f5 fd4b 	bl	800d080 <rfalSetAnalogConfig>
        
        /* Initialize as POWER_OFF and set proper mode in RF Chip */
        rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 80175ea:	2001      	movs	r0, #1
 80175ec:	f000 f960 	bl	80178b0 <rfalListenSetState>
    else
    {
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
    }
    
    return ERR_NONE;
 80175f0:	2300      	movs	r3, #0
 80175f2:	e000      	b.n	80175f6 <rfalListenStart+0xaa>
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
 80175f4:	2305      	movs	r3, #5
}
 80175f6:	4618      	mov	r0, r3
 80175f8:	3710      	adds	r7, #16
 80175fa:	46bd      	mov	sp, r7
 80175fc:	bd80      	pop	{r7, pc}
 80175fe:	bf00      	nop
 8017600:	2000393c 	.word	0x2000393c

08017604 <rfalRunListenModeWorker>:



/*******************************************************************************/
static ReturnCode rfalRunListenModeWorker( void )
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b082      	sub	sp, #8
 8017608:	af00      	add	r7, sp, #0
    volatile uint32_t irqs;
    uint8_t           tmp;
    
    if( gRFAL.state != RFAL_STATE_LM )
 801760a:	4b81      	ldr	r3, [pc, #516]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 801760c:	781b      	ldrb	r3, [r3, #0]
 801760e:	2b04      	cmp	r3, #4
 8017610:	d001      	beq.n	8017616 <rfalRunListenModeWorker+0x12>
    {
        return ERR_WRONG_STATE;
 8017612:	2321      	movs	r3, #33	; 0x21
 8017614:	e0f8      	b.n	8017808 <rfalRunListenModeWorker+0x204>
    }
    
    switch( gRFAL.Lm.state )
 8017616:	4b7e      	ldr	r3, [pc, #504]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 8017618:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801761c:	3b01      	subs	r3, #1
 801761e:	2b0f      	cmp	r3, #15
 8017620:	f200 80e6 	bhi.w	80177f0 <rfalRunListenModeWorker+0x1ec>
 8017624:	a201      	add	r2, pc, #4	; (adr r2, 801762c <rfalRunListenModeWorker+0x28>)
 8017626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801762a:	bf00      	nop
 801762c:	0801766d 	.word	0x0801766d
 8017630:	08017693 	.word	0x08017693
 8017634:	080177ed 	.word	0x080177ed
 8017638:	080177f1 	.word	0x080177f1
 801763c:	080177ed 	.word	0x080177ed
 8017640:	080177ed 	.word	0x080177ed
 8017644:	080177ed 	.word	0x080177ed
 8017648:	080177ed 	.word	0x080177ed
 801764c:	080177ed 	.word	0x080177ed
 8017650:	080177f5 	.word	0x080177f5
 8017654:	080177f5 	.word	0x080177f5
 8017658:	080177ed 	.word	0x080177ed
 801765c:	080177ed 	.word	0x080177ed
 8017660:	080177ed 	.word	0x080177ed
 8017664:	080177ed 	.word	0x080177ed
 8017668:	080177ed 	.word	0x080177ed
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            
            irqs = st25r3911GetInterrupt( (  ST25R3911_IRQ_MASK_EON ) );
 801766c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8017670:	f7ec fd0a 	bl	8004088 <st25r3911GetInterrupt>
 8017674:	4603      	mov	r3, r0
 8017676:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	2b00      	cmp	r3, #0
 801767c:	f000 80bc 	beq.w	80177f8 <rfalRunListenModeWorker+0x1f4>
            {
              break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_EON) != 0U )
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017686:	2b00      	cmp	r3, #0
 8017688:	f000 80b8 	beq.w	80177fc <rfalRunListenModeWorker+0x1f8>
            {
                rfalListenSetState( RFAL_LM_STATE_IDLE );
 801768c:	2002      	movs	r0, #2
 801768e:	f000 f90f 	bl	80178b0 <rfalListenSetState>
            
              
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_EOF ) );
 8017692:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8017696:	f7ec fcf7 	bl	8004088 <st25r3911GetInterrupt>
 801769a:	4603      	mov	r3, r0
 801769c:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	f000 80ad 	beq.w	8017800 <rfalRunListenModeWorker+0x1fc>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_NFCT) != 0U )
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d011      	beq.n	80176d4 <rfalRunListenModeWorker+0xd0>
            {
                /* Retrieve detected bitrate */
                uint8_t    newBr;
                st25r3911ReadRegister( ST25R3911_REG_NFCIP1_BIT_RATE, &newBr );
 80176b0:	1cbb      	adds	r3, r7, #2
 80176b2:	4619      	mov	r1, r3
 80176b4:	201f      	movs	r0, #31
 80176b6:	f7ec f82d 	bl	8003714 <st25r3911ReadRegister>
                newBr >>= ST25R3911_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 80176ba:	78bb      	ldrb	r3, [r7, #2]
 80176bc:	091b      	lsrs	r3, r3, #4
 80176be:	b2db      	uxtb	r3, r3
 80176c0:	70bb      	strb	r3, [r7, #2]

                if (newBr > ST25R3911_REG_BIT_RATE_rxrate_424)
 80176c2:	78bb      	ldrb	r3, [r7, #2]
 80176c4:	2b02      	cmp	r3, #2
 80176c6:	d901      	bls.n	80176cc <rfalRunListenModeWorker+0xc8>
                {
                    newBr = ST25R3911_REG_BIT_RATE_rxrate_424;
 80176c8:	2302      	movs	r3, #2
 80176ca:	70bb      	strb	r3, [r7, #2]
                }

                gRFAL.Lm.brDetected = (rfalBitRate)(newBr); /* PRQA S 4342 # MISRA 10.5 - Guaranteed that no invalid enum values may be created. See also equalityGuard_RFAL_BR_106 ff.*/
 80176cc:	78ba      	ldrb	r2, [r7, #2]
 80176ce:	4b50      	ldr	r3, [pc, #320]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 80176d0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            }
            if( ((irqs & ST25R3911_IRQ_MASK_RXE) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	f003 0310 	and.w	r3, r3, #16
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d074      	beq.n	80177c8 <rfalRunListenModeWorker+0x1c4>
 80176de:	4b4c      	ldr	r3, [pc, #304]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 80176e0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80176e4:	2bff      	cmp	r3, #255	; 0xff
 80176e6:	d06f      	beq.n	80177c8 <rfalRunListenModeWorker+0x1c4>
            {
                irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_ERR1 ) );
 80176e8:	484a      	ldr	r0, [pc, #296]	; (8017814 <rfalRunListenModeWorker+0x210>)
 80176ea:	f7ec fccd 	bl	8004088 <st25r3911GetInterrupt>
 80176ee:	4603      	mov	r3, r0
 80176f0:	607b      	str	r3, [r7, #4]
                
                if( ((irqs & ST25R3911_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3911_IRQ_MASK_PAR) != 0U) || ((irqs & ST25R3911_IRQ_MASK_ERR1) != 0U) )
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d109      	bne.n	8017710 <rfalRunListenModeWorker+0x10c>
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017702:	2b00      	cmp	r3, #0
 8017704:	d104      	bne.n	8017710 <rfalRunListenModeWorker+0x10c>
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801770c:	2b00      	cmp	r3, #0
 801770e:	d012      	beq.n	8017736 <rfalRunListenModeWorker+0x132>
                {
                    /* nfc_ar may have triggered RF Collision Avoidance, disable it before executing Clear (Stop All activities) */
                    st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 8017710:	2101      	movs	r1, #1
 8017712:	2003      	movs	r0, #3
 8017714:	f7ec f980 	bl	8003a18 <st25r3911ClrRegisterBits>
                    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 8017718:	20c2      	movs	r0, #194	; 0xc2
 801771a:	f7ec fabf 	bl	8003c9c <st25r3911ExecuteCommand>
                    st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 801771e:	20d1      	movs	r0, #209	; 0xd1
 8017720:	f7ec fabc 	bl	8003c9c <st25r3911ExecuteCommand>
                    st25r3911SetRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 8017724:	2101      	movs	r1, #1
 8017726:	2003      	movs	r0, #3
 8017728:	f7ec f999 	bl	8003a5e <st25r3911SetRegisterBits>
                    st25r3911TxOff();
 801772c:	2108      	movs	r1, #8
 801772e:	2002      	movs	r0, #2
 8017730:	f7ec f972 	bl	8003a18 <st25r3911ClrRegisterBits>
                    break; /* A bad reception occurred, remain in same state */
 8017734:	e067      	b.n	8017806 <rfalRunListenModeWorker+0x202>
                }
                
                /* Retrieve received data */
                st25r3911ReadRegister(ST25R3911_REG_FIFO_RX_STATUS1, &tmp);
 8017736:	1cfb      	adds	r3, r7, #3
 8017738:	4619      	mov	r1, r3
 801773a:	201a      	movs	r0, #26
 801773c:	f7eb ffea 	bl	8003714 <st25r3911ReadRegister>
                *gRFAL.Lm.rxLen = tmp;
 8017740:	78fa      	ldrb	r2, [r7, #3]
 8017742:	4b33      	ldr	r3, [pc, #204]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 8017744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017746:	b292      	uxth	r2, r2
 8017748:	801a      	strh	r2, [r3, #0]
                
                st25r3911ReadFifo( gRFAL.Lm.rxBuf, (uint8_t)MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 801774a:	4b31      	ldr	r3, [pc, #196]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 801774c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801774e:	4b30      	ldr	r3, [pc, #192]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 8017750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017752:	881a      	ldrh	r2, [r3, #0]
 8017754:	4b2e      	ldr	r3, [pc, #184]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 8017756:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801775a:	3307      	adds	r3, #7
 801775c:	08db      	lsrs	r3, r3, #3
 801775e:	b29b      	uxth	r3, r3
 8017760:	429a      	cmp	r2, r3
 8017762:	d204      	bcs.n	801776e <rfalRunListenModeWorker+0x16a>
 8017764:	4b2a      	ldr	r3, [pc, #168]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 8017766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017768:	881b      	ldrh	r3, [r3, #0]
 801776a:	b2db      	uxtb	r3, r3
 801776c:	e005      	b.n	801777a <rfalRunListenModeWorker+0x176>
 801776e:	4b28      	ldr	r3, [pc, #160]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 8017770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017774:	3307      	adds	r3, #7
 8017776:	08db      	lsrs	r3, r3, #3
 8017778:	b2db      	uxtb	r3, r3
 801777a:	4619      	mov	r1, r3
 801777c:	f7ec fa42 	bl	8003c04 <st25r3911ReadFifo>
                
                /* Check if the data we got has at least the CRC and remove it, otherwise leave at 0 */
                *gRFAL.Lm.rxLen  -= ((*gRFAL.Lm.rxLen > RFAL_CRC_LEN) ? RFAL_CRC_LEN : *gRFAL.Lm.rxLen);
 8017780:	4b23      	ldr	r3, [pc, #140]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 8017782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017784:	8819      	ldrh	r1, [r3, #0]
 8017786:	4b22      	ldr	r3, [pc, #136]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 8017788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801778a:	881b      	ldrh	r3, [r3, #0]
 801778c:	2b02      	cmp	r3, #2
 801778e:	bf28      	it	cs
 8017790:	2302      	movcs	r3, #2
 8017792:	b29a      	uxth	r2, r3
 8017794:	4b1e      	ldr	r3, [pc, #120]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 8017796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017798:	1a8a      	subs	r2, r1, r2
 801779a:	b292      	uxth	r2, r2
 801779c:	801a      	strh	r2, [r3, #0]
                *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 801779e:	4b1c      	ldr	r3, [pc, #112]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 80177a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80177a2:	881a      	ldrh	r2, [r3, #0]
 80177a4:	4b1a      	ldr	r3, [pc, #104]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 80177a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80177a8:	00d2      	lsls	r2, r2, #3
 80177aa:	b292      	uxth	r2, r2
 80177ac:	801a      	strh	r2, [r3, #0]
                gRFAL.Lm.dataFlag = true;
 80177ae:	4b18      	ldr	r3, [pc, #96]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 80177b0:	2201      	movs	r2, #1
 80177b2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 80177b6:	4b16      	ldr	r3, [pc, #88]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 80177b8:	799b      	ldrb	r3, [r3, #6]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d015      	beq.n	80177ea <rfalRunListenModeWorker+0x1e6>
 80177be:	2100      	movs	r1, #0
 80177c0:	2001      	movs	r0, #1
 80177c2:	f7ec f895 	bl	80038f0 <st25r3911WriteTestRegister>
 80177c6:	e010      	b.n	80177ea <rfalRunListenModeWorker+0x1e6>
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && (!gRFAL.Lm.dataFlag) )
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d018      	beq.n	8017804 <rfalRunListenModeWorker+0x200>
 80177d2:	4b0f      	ldr	r3, [pc, #60]	; (8017810 <rfalRunListenModeWorker+0x20c>)
 80177d4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80177d8:	f083 0301 	eor.w	r3, r3, #1
 80177dc:	b2db      	uxtb	r3, r3
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d010      	beq.n	8017804 <rfalRunListenModeWorker+0x200>
            {
                rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 80177e2:	2001      	movs	r0, #1
 80177e4:	f000 f864 	bl	80178b0 <rfalListenSetState>
            }
            else
            {
                /* MISRA 15.7 - Empty else */
            }
            break;
 80177e8:	e00c      	b.n	8017804 <rfalRunListenModeWorker+0x200>
 80177ea:	e00b      	b.n	8017804 <rfalRunListenModeWorker+0x200>
            case RFAL_LM_STATE_SLEEP_AF:
            case RFAL_LM_STATE_READY_Ax:
            case RFAL_LM_STATE_CARDEMU_4A:
            case RFAL_LM_STATE_CARDEMU_4B:
            case RFAL_LM_STATE_CARDEMU_3:
                return ERR_INTERNAL;
 80177ec:	230c      	movs	r3, #12
 80177ee:	e00b      	b.n	8017808 <rfalRunListenModeWorker+0x204>
            case RFAL_LM_STATE_TARGET_A:
                break;
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 80177f0:	2321      	movs	r3, #33	; 0x21
 80177f2:	e009      	b.n	8017808 <rfalRunListenModeWorker+0x204>
                break;
 80177f4:	bf00      	nop
 80177f6:	e006      	b.n	8017806 <rfalRunListenModeWorker+0x202>
              break;  /* No interrupt to process */
 80177f8:	bf00      	nop
 80177fa:	e004      	b.n	8017806 <rfalRunListenModeWorker+0x202>
                break;
 80177fc:	bf00      	nop
 80177fe:	e002      	b.n	8017806 <rfalRunListenModeWorker+0x202>
                break;  /* No interrupt to process */
 8017800:	bf00      	nop
 8017802:	e000      	b.n	8017806 <rfalRunListenModeWorker+0x202>
            break;
 8017804:	bf00      	nop
    }
    return ERR_NONE;
 8017806:	2300      	movs	r3, #0
}
 8017808:	4618      	mov	r0, r3
 801780a:	3708      	adds	r7, #8
 801780c:	46bd      	mov	sp, r7
 801780e:	bd80      	pop	{r7, pc}
 8017810:	2000393c 	.word	0x2000393c
 8017814:	00f00810 	.word	0x00f00810

08017818 <rfalListenStop>:


/*******************************************************************************/
ReturnCode rfalListenStop( void )
{
 8017818:	b580      	push	{r7, lr}
 801781a:	af00      	add	r7, sp, #0
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 801781c:	4b0b      	ldr	r3, [pc, #44]	; (801784c <rfalListenStop+0x34>)
 801781e:	2200      	movs	r2, #0
 8017820:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
    /*Check if Observation Mode was enabled and disable it on ST25R391x */
    rfalCheckDisableObsMode();
 8017824:	4b09      	ldr	r3, [pc, #36]	; (801784c <rfalListenStop+0x34>)
 8017826:	799b      	ldrb	r3, [r3, #6]
 8017828:	2b00      	cmp	r3, #0
 801782a:	d003      	beq.n	8017834 <rfalListenStop+0x1c>
 801782c:	2100      	movs	r1, #0
 801782e:	2001      	movs	r0, #1
 8017830:	f7ec f85e 	bl	80038f0 <st25r3911WriteTestRegister>
  
    /* Disable Receiver and Transmitter */
    rfalFieldOff();
 8017834:	f7fe f994 	bl	8015b60 <rfalFieldOff>
    
    /* As there's no Off mode, set default value: ISO14443A with automatic RF Collision Avoidance Off */
    st25r3911WriteRegister( ST25R3911_REG_MODE, (ST25R3911_REG_MODE_om_iso14443a | ST25R3911_REG_MODE_nfc_ar_off) );
 8017838:	2108      	movs	r1, #8
 801783a:	2003      	movs	r0, #3
 801783c:	f7ec f8a0 	bl	8003980 <st25r3911WriteRegister>
    
    /* Set Analog configurations for Listen Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_OFF) );
 8017840:	2007      	movs	r0, #7
 8017842:	f7f5 fc1d 	bl	800d080 <rfalSetAnalogConfig>
        
    return ERR_NONE;
 8017846:	2300      	movs	r3, #0
}
 8017848:	4618      	mov	r0, r3
 801784a:	bd80      	pop	{r7, pc}
 801784c:	2000393c 	.word	0x2000393c

08017850 <rfalListenSleepStart>:


/*******************************************************************************/
/*  PRQA S 3673 1 # MISRA 8.13 - ST25R3911B does not support Listen mode. Implementation for other chips will modify rxBuf and rxLen */
ReturnCode rfalListenSleepStart( rfalLmState sleepSt, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 8017850:	b480      	push	{r7}
 8017852:	b085      	sub	sp, #20
 8017854:	af00      	add	r7, sp, #0
 8017856:	60b9      	str	r1, [r7, #8]
 8017858:	607b      	str	r3, [r7, #4]
 801785a:	4603      	mov	r3, r0
 801785c:	73fb      	strb	r3, [r7, #15]
 801785e:	4613      	mov	r3, r2
 8017860:	81bb      	strh	r3, [r7, #12]
    NO_WARNING(sleepSt);
    NO_WARNING(rxBuf);
    NO_WARNING(rxBufLen);
    NO_WARNING(rxLen);
    
    return ERR_NOTSUPP;
 8017862:	2318      	movs	r3, #24
}
 8017864:	4618      	mov	r0, r3
 8017866:	3714      	adds	r7, #20
 8017868:	46bd      	mov	sp, r7
 801786a:	bc80      	pop	{r7}
 801786c:	4770      	bx	lr
	...

08017870 <rfalListenGetState>:


/*******************************************************************************/
rfalLmState rfalListenGetState( bool *dataFlag, rfalBitRate *lastBR )
{
 8017870:	b480      	push	{r7}
 8017872:	b083      	sub	sp, #12
 8017874:	af00      	add	r7, sp, #0
 8017876:	6078      	str	r0, [r7, #4]
 8017878:	6039      	str	r1, [r7, #0]
    /* Allow state retrieval even if gRFAL.state != RFAL_STATE_LM so  *
     * that this Lm state can be used by caller after activation      */

    if( lastBR != NULL )
 801787a:	683b      	ldr	r3, [r7, #0]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d004      	beq.n	801788a <rfalListenGetState+0x1a>
    {
        *lastBR = gRFAL.Lm.brDetected;
 8017880:	4b0a      	ldr	r3, [pc, #40]	; (80178ac <rfalListenGetState+0x3c>)
 8017882:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8017886:	683b      	ldr	r3, [r7, #0]
 8017888:	701a      	strb	r2, [r3, #0]
    }
    
    if( dataFlag != NULL )
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d004      	beq.n	801789a <rfalListenGetState+0x2a>
    {
        *dataFlag = gRFAL.Lm.dataFlag;
 8017890:	4b06      	ldr	r3, [pc, #24]	; (80178ac <rfalListenGetState+0x3c>)
 8017892:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	701a      	strb	r2, [r3, #0]
    }
    
    return gRFAL.Lm.state;
 801789a:	4b04      	ldr	r3, [pc, #16]	; (80178ac <rfalListenGetState+0x3c>)
 801789c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
}
 80178a0:	4618      	mov	r0, r3
 80178a2:	370c      	adds	r7, #12
 80178a4:	46bd      	mov	sp, r7
 80178a6:	bc80      	pop	{r7}
 80178a8:	4770      	bx	lr
 80178aa:	bf00      	nop
 80178ac:	2000393c 	.word	0x2000393c

080178b0 <rfalListenSetState>:


/*******************************************************************************/
ReturnCode rfalListenSetState( rfalLmState newSt )
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b084      	sub	sp, #16
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	4603      	mov	r3, r0
 80178b8:	71fb      	strb	r3, [r7, #7]
    bool        reSetState;
        
    /*rfalLogD( "RFAL: curState: %02X newState: %02X \r\n", gRFAL.Lm.state, newSt );*/
    
    /* SetState clears the Data flag */
    gRFAL.Lm.dataFlag = false;
 80178ba:	4b62      	ldr	r3, [pc, #392]	; (8017a44 <rfalListenSetState+0x194>)
 80178bc:	2200      	movs	r2, #0
 80178be:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    newState          = newSt;
 80178c2:	79fb      	ldrb	r3, [r7, #7]
 80178c4:	73fb      	strb	r3, [r7, #15]
    ret               = ERR_NONE;
 80178c6:	2300      	movs	r3, #0
 80178c8:	81bb      	strh	r3, [r7, #12]
    
    do{
        reSetState = false;
 80178ca:	2300      	movs	r3, #0
 80178cc:	73bb      	strb	r3, [r7, #14]

        /*******************************************************************************/
        switch( newState )
 80178ce:	7bfb      	ldrb	r3, [r7, #15]
 80178d0:	3b01      	subs	r3, #1
 80178d2:	2b0f      	cmp	r3, #15
 80178d4:	f200 80a2 	bhi.w	8017a1c <rfalListenSetState+0x16c>
 80178d8:	a201      	add	r2, pc, #4	; (adr r2, 80178e0 <rfalListenSetState+0x30>)
 80178da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178de:	bf00      	nop
 80178e0:	08017921 	.word	0x08017921
 80178e4:	0801797f 	.word	0x0801797f
 80178e8:	08017a19 	.word	0x08017a19
 80178ec:	08017a1d 	.word	0x08017a1d
 80178f0:	08017a19 	.word	0x08017a19
 80178f4:	08017a19 	.word	0x08017a19
 80178f8:	08017a19 	.word	0x08017a19
 80178fc:	08017a19 	.word	0x08017a19
 8017900:	08017a19 	.word	0x08017a19
 8017904:	08017a21 	.word	0x08017a21
 8017908:	08017a21 	.word	0x08017a21
 801790c:	08017a19 	.word	0x08017a19
 8017910:	08017a19 	.word	0x08017a19
 8017914:	08017a19 	.word	0x08017a19
 8017918:	08017a19 	.word	0x08017a19
 801791c:	08017a19 	.word	0x08017a19
            /*******************************************************************************/
            case RFAL_LM_STATE_POWER_OFF:
                
                /*******************************************************************************/
                /* Disable nfc_ar as RF Collision Avoidance timer may have already started */
                st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 8017920:	2101      	movs	r1, #1
 8017922:	2003      	movs	r0, #3
 8017924:	f7ec f878 	bl	8003a18 <st25r3911ClrRegisterBits>
                
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 8017928:	20c2      	movs	r0, #194	; 0xc2
 801792a:	f7ec f9b7 	bl	8003c9c <st25r3911ExecuteCommand>
                    
                /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                st25r3911TxOff();
 801792e:	2108      	movs	r1, #8
 8017930:	2002      	movs	r0, #2
 8017932:	f7ec f871 	bl	8003a18 <st25r3911ClrRegisterBits>
                
                /*******************************************************************************/
                /* Ensure that the NFCIP1 mode is disabled */
                st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_nfc_f0 );
 8017936:	2120      	movs	r1, #32
 8017938:	2005      	movs	r0, #5
 801793a:	f7ec f86d 	bl	8003a18 <st25r3911ClrRegisterBits>
                
                
                /*******************************************************************************/
                /* Clear and enable required IRQs */
                st25r3911DisableInterrupts( ST25R3911_IRQ_MASK_ALL );
 801793e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017942:	f7ec fbe9 	bl	8004118 <st25r3911DisableInterrupts>
                
                
                st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_RXS | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_ERR1 |
 8017946:	4840      	ldr	r0, [pc, #256]	; (8017a48 <rfalListenSetState+0x198>)
 8017948:	f7ec fb9e 	bl	8004088 <st25r3911GetInterrupt>
                 * If the interrupt status register is being read when NFCT is trigerred, the  *
                 * IRQ line might go low and NFCT is not signalled on the status register.     *
                 * For initial bitrate detection, mask RXS, only wait for NFCT and RXE.        */
                /*******************************************************************************/
                
                st25r3911EnableInterrupts( (ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_ERR1 |
 801794c:	483f      	ldr	r0, [pc, #252]	; (8017a4c <rfalListenSetState+0x19c>)
 801794e:	f7ec fbd7 	bl	8004100 <st25r3911EnableInterrupts>
                                            ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_RXE ) );
                
                /*******************************************************************************/
                /* Clear the bitRate previously detected */
                gRFAL.Lm.brDetected = RFAL_BR_KEEP;
 8017952:	4b3c      	ldr	r3, [pc, #240]	; (8017a44 <rfalListenSetState+0x194>)
 8017954:	22ff      	movs	r2, #255	; 0xff
 8017956:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                
                
                /*******************************************************************************/
                /* Apply the BitRate detection mode mode */
                st25r3911WriteRegister( ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_targ | ST25R3911_REG_MODE_om_bit_rate_detection | ST25R3911_REG_MODE_nfc_ar_on)  );
 801795a:	2181      	movs	r1, #129	; 0x81
 801795c:	2003      	movs	r0, #3
 801795e:	f7ec f80f 	bl	8003980 <st25r3911WriteRegister>
                
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911 Errata #1.3                            */
                /* Even though bitrate is going to be detected the bitrate must be set to      *
                 * 106kbps to get correct 106kbps parity                                       */
                st25r3911WriteRegister( ST25R3911_REG_BIT_RATE, (ST25R3911_REG_BIT_RATE_txrate_106 | ST25R3911_REG_BIT_RATE_rxrate_106) );
 8017962:	2100      	movs	r1, #0
 8017964:	2004      	movs	r0, #4
 8017966:	f7ec f80b 	bl	8003980 <st25r3911WriteRegister>
                /*******************************************************************************/
                
                
                /*******************************************************************************/
                /* Check if external Field is already On */
                if( rfalIsExtFieldOn() )
 801796a:	f7ff fde5 	bl	8017538 <rfalIsExtFieldOn>
 801796e:	4603      	mov	r3, r0
 8017970:	2b00      	cmp	r3, #0
 8017972:	d057      	beq.n	8017a24 <rfalListenSetState+0x174>
                {
                    reSetState = true;
 8017974:	2301      	movs	r3, #1
 8017976:	73bb      	strb	r3, [r7, #14]
                    newState   = RFAL_LM_STATE_IDLE;                         /* Set IDLE state */
 8017978:	2302      	movs	r3, #2
 801797a:	73fb      	strb	r3, [r7, #15]
                }
                break;
 801797c:	e052      	b.n	8017a24 <rfalListenSetState+0x174>
                 *      
                 * Ensure that when upper layer calls SetState(IDLE), it restores initial 
                 * configuration and that check whether an external Field is still present     */
                 
                /* nfc_ar may have triggered RF Collision Avoidance, disable it before executing Clear (Stop All activities) */
                st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 801797e:	2101      	movs	r1, #1
 8017980:	2003      	movs	r0, #3
 8017982:	f7ec f849 	bl	8003a18 <st25r3911ClrRegisterBits>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 8017986:	20c2      	movs	r0, #194	; 0xc2
 8017988:	f7ec f988 	bl	8003c9c <st25r3911ExecuteCommand>
                st25r3911SetRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 801798c:	2101      	movs	r1, #1
 801798e:	2003      	movs	r0, #3
 8017990:	f7ec f865 	bl	8003a5e <st25r3911SetRegisterBits>
                
                /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                st25r3911TxOff();
 8017994:	2108      	movs	r1, #8
 8017996:	2002      	movs	r0, #2
 8017998:	f7ec f83e 	bl	8003a18 <st25r3911ClrRegisterBits>

                
                /* Load 2nd/3rd stage gain setting from registers into the receiver */
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 801799c:	20d5      	movs	r0, #213	; 0xd5
 801799e:	f7ec f97d 	bl	8003c9c <st25r3911ExecuteCommand>
                
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911 Errata #1.4                            */
                /* Enable; disable; enable mixer to make sure the digital decoder is in        *
                 * high state. This also switches the demodulator to mixer mode.               */
                st25r3911ReadRegister( ST25R3911_REG_RX_CONF1, &tmp );
 80179a2:	f107 030b 	add.w	r3, r7, #11
 80179a6:	4619      	mov	r1, r3
 80179a8:	200a      	movs	r0, #10
 80179aa:	f7eb feb3 	bl	8003714 <st25r3911ReadRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (tmp | ST25R3911_REG_RX_CONF1_amd_sel) );
 80179ae:	7afb      	ldrb	r3, [r7, #11]
 80179b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179b4:	b2db      	uxtb	r3, r3
 80179b6:	4619      	mov	r1, r3
 80179b8:	200a      	movs	r0, #10
 80179ba:	f7eb ffe1 	bl	8003980 <st25r3911WriteRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (uint8_t)(tmp & ~ST25R3911_REG_RX_CONF1_amd_sel) );
 80179be:	7afb      	ldrb	r3, [r7, #11]
 80179c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80179c4:	b2db      	uxtb	r3, r3
 80179c6:	4619      	mov	r1, r3
 80179c8:	200a      	movs	r0, #10
 80179ca:	f7eb ffd9 	bl	8003980 <st25r3911WriteRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (tmp | ST25R3911_REG_RX_CONF1_amd_sel) );
 80179ce:	7afb      	ldrb	r3, [r7, #11]
 80179d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179d4:	b2db      	uxtb	r3, r3
 80179d6:	4619      	mov	r1, r3
 80179d8:	200a      	movs	r0, #10
 80179da:	f7eb ffd1 	bl	8003980 <st25r3911WriteRegister>
                /*******************************************************************************/
                
                /* ReEnable the receiver */
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 80179de:	20d1      	movs	r0, #209	; 0xd1
 80179e0:	f7ec f95c 	bl	8003c9c <st25r3911ExecuteCommand>
                
                
                /* If external Field is no longer detected go back to POWER_OFF */
                if( !st25r3911IsExtFieldOn() )
 80179e4:	2240      	movs	r2, #64	; 0x40
 80179e6:	2140      	movs	r1, #64	; 0x40
 80179e8:	2030      	movs	r0, #48	; 0x30
 80179ea:	f7eb fc8f 	bl	800330c <st25r3911CheckReg>
 80179ee:	4603      	mov	r3, r0
 80179f0:	f083 0301 	eor.w	r3, r3, #1
 80179f4:	b2db      	uxtb	r3, r3
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d003      	beq.n	8017a02 <rfalListenSetState+0x152>
                {
                    reSetState = true;
 80179fa:	2301      	movs	r3, #1
 80179fc:	73bb      	strb	r3, [r7, #14]
                    newState   = RFAL_LM_STATE_POWER_OFF;                    /* Set POWER_OFF state */
 80179fe:	2301      	movs	r3, #1
 8017a00:	73fb      	strb	r3, [r7, #15]
                }

                /*******************************************************************************/
                /*Check if Observation Mode is enabled and set it on ST25R391x */
                rfalCheckEnableObsModeRx();
 8017a02:	4b10      	ldr	r3, [pc, #64]	; (8017a44 <rfalListenSetState+0x194>)
 8017a04:	799b      	ldrb	r3, [r3, #6]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d00e      	beq.n	8017a28 <rfalListenSetState+0x178>
 8017a0a:	4b0e      	ldr	r3, [pc, #56]	; (8017a44 <rfalListenSetState+0x194>)
 8017a0c:	799b      	ldrb	r3, [r3, #6]
 8017a0e:	4619      	mov	r1, r3
 8017a10:	2001      	movs	r0, #1
 8017a12:	f7eb ff6d 	bl	80038f0 <st25r3911WriteTestRegister>
                break;
 8017a16:	e007      	b.n	8017a28 <rfalListenSetState+0x178>
            case RFAL_LM_STATE_SLEEP_A:
            case RFAL_LM_STATE_SLEEP_B:
            case RFAL_LM_STATE_SLEEP_AF:
            case RFAL_LM_STATE_CARDEMU_4A:
            case RFAL_LM_STATE_CARDEMU_4B:
                return ERR_NOTSUPP;
 8017a18:	2318      	movs	r3, #24
 8017a1a:	e00f      	b.n	8017a3c <rfalListenSetState+0x18c>
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 8017a1c:	2321      	movs	r3, #33	; 0x21
 8017a1e:	e00d      	b.n	8017a3c <rfalListenSetState+0x18c>
                break;
 8017a20:	bf00      	nop
 8017a22:	e002      	b.n	8017a2a <rfalListenSetState+0x17a>
                break;
 8017a24:	bf00      	nop
 8017a26:	e000      	b.n	8017a2a <rfalListenSetState+0x17a>
                break;
 8017a28:	bf00      	nop
        }
    }
    while( reSetState );
 8017a2a:	7bbb      	ldrb	r3, [r7, #14]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	f47f af4c 	bne.w	80178ca <rfalListenSetState+0x1a>
    
    gRFAL.Lm.state = newState;
 8017a32:	4a04      	ldr	r2, [pc, #16]	; (8017a44 <rfalListenSetState+0x194>)
 8017a34:	7bfb      	ldrb	r3, [r7, #15]
 8017a36:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
    
    return ret;
 8017a3a:	89bb      	ldrh	r3, [r7, #12]
}
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	3710      	adds	r7, #16
 8017a40:	46bd      	mov	sp, r7
 8017a42:	bd80      	pop	{r7, pc}
 8017a44:	2000393c 	.word	0x2000393c
 8017a48:	00f01930 	.word	0x00f01930
 8017a4c:	00f01910 	.word	0x00f01910

08017a50 <rfalWakeUpModeStart>:

#if RFAL_FEATURE_WAKEUP_MODE

/*******************************************************************************/
ReturnCode rfalWakeUpModeStart( const rfalWakeUpConfig *config )
{
 8017a50:	b5b0      	push	{r4, r5, r7, lr}
 8017a52:	b086      	sub	sp, #24
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
    uint8_t                reg;
    uint32_t               irqs;
    
    /* The Wake-Up procedure is explained in detail in Application Note: AN4985 */
    
    if( config == NULL )
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d130      	bne.n	8017ac0 <rfalWakeUpModeStart+0x70>
    {
        gRFAL.wum.cfg.period      = RFAL_WUM_PERIOD_500MS;
 8017a5e:	4bad      	ldr	r3, [pc, #692]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017a60:	2214      	movs	r2, #20
 8017a62:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gRFAL.wum.cfg.irqTout     = false;
 8017a66:	4bab      	ldr	r3, [pc, #684]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017a68:	2200      	movs	r2, #0
 8017a6a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gRFAL.wum.cfg.swTagDetect = false;
 8017a6e:	4ba9      	ldr	r3, [pc, #676]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017a70:	2200      	movs	r2, #0
 8017a72:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      
        gRFAL.wum.cfg.indAmp.enabled   = true;
 8017a76:	4ba7      	ldr	r3, [pc, #668]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017a78:	2201      	movs	r2, #1
 8017a7a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        gRFAL.wum.cfg.indPha.enabled   = true;
 8017a7e:	4ba5      	ldr	r3, [pc, #660]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017a80:	2201      	movs	r2, #1
 8017a82:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
        gRFAL.wum.cfg.cap.enabled      = false;
 8017a86:	4ba3      	ldr	r3, [pc, #652]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017a88:	2200      	movs	r2, #0
 8017a8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        gRFAL.wum.cfg.indAmp.delta     = 2U;
 8017a8e:	4ba1      	ldr	r3, [pc, #644]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017a90:	2202      	movs	r2, #2
 8017a92:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 8017a96:	4b9f      	ldr	r3, [pc, #636]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017a98:	22ff      	movs	r2, #255	; 0xff
 8017a9a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 8017a9e:	4b9d      	ldr	r3, [pc, #628]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        gRFAL.wum.cfg.indPha.delta     = 2U;
 8017aa6:	4b9b      	ldr	r3, [pc, #620]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017aa8:	2202      	movs	r2, #2
 8017aaa:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
        gRFAL.wum.cfg.indPha.reference = RFAL_WUM_REFERENCE_AUTO;
 8017aae:	4b99      	ldr	r3, [pc, #612]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017ab0:	22ff      	movs	r2, #255	; 0xff
 8017ab2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        gRFAL.wum.cfg.indPha.autoAvg   = false;
 8017ab6:	4b97      	ldr	r3, [pc, #604]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017ab8:	2200      	movs	r2, #0
 8017aba:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8017abe:	e00e      	b.n	8017ade <rfalWakeUpModeStart+0x8e>
    }
    else
    {
        gRFAL.wum.cfg = *config;
 8017ac0:	4b94      	ldr	r3, [pc, #592]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017ac2:	687a      	ldr	r2, [r7, #4]
 8017ac4:	3369      	adds	r3, #105	; 0x69
 8017ac6:	6811      	ldr	r1, [r2, #0]
 8017ac8:	6855      	ldr	r5, [r2, #4]
 8017aca:	6894      	ldr	r4, [r2, #8]
 8017acc:	68d0      	ldr	r0, [r2, #12]
 8017ace:	6019      	str	r1, [r3, #0]
 8017ad0:	605d      	str	r5, [r3, #4]
 8017ad2:	609c      	str	r4, [r3, #8]
 8017ad4:	60d8      	str	r0, [r3, #12]
 8017ad6:	6911      	ldr	r1, [r2, #16]
 8017ad8:	6119      	str	r1, [r3, #16]
 8017ada:	7d12      	ldrb	r2, [r2, #20]
 8017adc:	751a      	strb	r2, [r3, #20]
    }
    
    
    /* Check for valid configuration */
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 8017ade:	4b8d      	ldr	r3, [pc, #564]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017ae0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d009      	beq.n	8017afc <rfalWakeUpModeStart+0xac>
 8017ae8:	4b8a      	ldr	r3, [pc, #552]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017aea:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d121      	bne.n	8017b36 <rfalWakeUpModeStart+0xe6>
 8017af2:	4b88      	ldr	r3, [pc, #544]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017af4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d11c      	bne.n	8017b36 <rfalWakeUpModeStart+0xe6>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 8017afc:	4b85      	ldr	r3, [pc, #532]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017afe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8017b02:	f083 0301 	eor.w	r3, r3, #1
 8017b06:	b2db      	uxtb	r3, r3
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d00f      	beq.n	8017b2c <rfalWakeUpModeStart+0xdc>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 8017b0c:	4b81      	ldr	r3, [pc, #516]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017b0e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8017b12:	f083 0301 	eor.w	r3, r3, #1
 8017b16:	b2db      	uxtb	r3, r3
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d007      	beq.n	8017b2c <rfalWakeUpModeStart+0xdc>
 8017b1c:	4b7d      	ldr	r3, [pc, #500]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017b1e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8017b22:	f083 0301 	eor.w	r3, r3, #1
 8017b26:	b2db      	uxtb	r3, r3
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d104      	bne.n	8017b36 <rfalWakeUpModeStart+0xe6>
         gRFAL.wum.cfg.swTagDetect                                                                         )
 8017b2c:	4b79      	ldr	r3, [pc, #484]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017b2e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d001      	beq.n	8017b3a <rfalWakeUpModeStart+0xea>
    {
        return ERR_PARAM;
 8017b36:	2307      	movs	r3, #7
 8017b38:	e14f      	b.n	8017dda <rfalWakeUpModeStart+0x38a>
    }
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	613b      	str	r3, [r7, #16]
    
    
    /* Disable Tx, Rx, External Field Detector and set default ISO14443A mode */
    st25r3911TxRxOff();
 8017b3e:	f7eb fa1c 	bl	8002f7a <st25r3911TxRxOff>
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8017b42:	2110      	movs	r1, #16
 8017b44:	2009      	movs	r0, #9
 8017b46:	f7eb ff67 	bl	8003a18 <st25r3911ClrRegisterBits>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ | ST25R3911_REG_MODE_mask_om), (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_iso14443a) );
 8017b4a:	2208      	movs	r2, #8
 8017b4c:	21f8      	movs	r1, #248	; 0xf8
 8017b4e:	2003      	movs	r0, #3
 8017b50:	f7eb ffa3 	bl	8003a9a <st25r3911ChangeRegisterBits>
    
    /* Set Analog configurations for Wake-up On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON) );
 8017b54:	2004      	movs	r0, #4
 8017b56:	f7f5 fa93 	bl	800d080 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Prepare Wake-Up Timer Control Register */
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3911_REG_WUP_TIMER_CONTROL_shift_wut);
 8017b5a:	4b6e      	ldr	r3, [pc, #440]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017b5c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8017b60:	011b      	lsls	r3, r3, #4
 8017b62:	75fb      	strb	r3, [r7, #23]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3911_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 8017b64:	4b6b      	ldr	r3, [pc, #428]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017b66:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8017b6a:	2b0f      	cmp	r3, #15
 8017b6c:	d802      	bhi.n	8017b74 <rfalWakeUpModeStart+0x124>
 8017b6e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8017b72:	e000      	b.n	8017b76 <rfalWakeUpModeStart+0x126>
 8017b74:	2200      	movs	r2, #0
 8017b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017b7a:	4313      	orrs	r3, r2
 8017b7c:	b25b      	sxtb	r3, r3
 8017b7e:	75fb      	strb	r3, [r7, #23]
    
    if(gRFAL.wum.cfg.irqTout)
 8017b80:	4b64      	ldr	r3, [pc, #400]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017b82:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d007      	beq.n	8017b9a <rfalWakeUpModeStart+0x14a>
    {
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wto;
 8017b8a:	7dfb      	ldrb	r3, [r7, #23]
 8017b8c:	f043 0308 	orr.w	r3, r3, #8
 8017b90:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WT;
 8017b92:	693b      	ldr	r3, [r7, #16]
 8017b94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017b98:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Amplitude is to be performed */
    if( gRFAL.wum.cfg.indAmp.enabled )
 8017b9a:	4b5e      	ldr	r3, [pc, #376]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017b9c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d04c      	beq.n	8017c3e <rfalWakeUpModeStart+0x1ee>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_d);
 8017ba4:	4b5b      	ldr	r3, [pc, #364]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017ba6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8017baa:	011b      	lsls	r3, r3, #4
 8017bac:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 8017bae:	4b59      	ldr	r3, [pc, #356]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017bb0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d001      	beq.n	8017bbc <rfalWakeUpModeStart+0x16c>
 8017bb8:	2208      	movs	r2, #8
 8017bba:	e000      	b.n	8017bbe <rfalWakeUpModeStart+0x16e>
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017bc2:	4313      	orrs	r3, r2
 8017bc4:	b25b      	sxtb	r3, r3
 8017bc6:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_aew) & ST25R3911_REG_AMPLITUDE_MEASURE_CONF_mask_am_aew);
 8017bc8:	4b52      	ldr	r3, [pc, #328]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017bca:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8017bce:	005b      	lsls	r3, r3, #1
 8017bd0:	b2db      	uxtb	r3, r3
 8017bd2:	b25b      	sxtb	r3, r3
 8017bd4:	f003 0306 	and.w	r3, r3, #6
 8017bd8:	b25a      	sxtb	r2, r3
 8017bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017bde:	4313      	orrs	r3, r2
 8017be0:	b25b      	sxtb	r3, r3
 8017be2:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 8017be4:	4b4b      	ldr	r3, [pc, #300]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017be6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8017bea:	b25a      	sxtb	r2, r3
 8017bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017bf0:	4313      	orrs	r3, r2
 8017bf2:	b25b      	sxtb	r3, r3
 8017bf4:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_CONF, aux );
 8017bf6:	7bfb      	ldrb	r3, [r7, #15]
 8017bf8:	4619      	mov	r1, r3
 8017bfa:	2032      	movs	r0, #50	; 0x32
 8017bfc:	f7eb fec0 	bl	8003980 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indAmp.autoAvg )
 8017c00:	4b44      	ldr	r3, [pc, #272]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017c02:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8017c06:	f083 0301 	eor.w	r3, r3, #1
 8017c0a:	b2db      	uxtb	r3, r3
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d00e      	beq.n	8017c2e <rfalWakeUpModeStart+0x1de>
        {
            if( gRFAL.wum.cfg.indAmp.reference == RFAL_WUM_REFERENCE_AUTO )
 8017c10:	4b40      	ldr	r3, [pc, #256]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017c12:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8017c16:	2bff      	cmp	r3, #255	; 0xff
 8017c18:	d102      	bne.n	8017c20 <rfalWakeUpModeStart+0x1d0>
            {
                st25r3911MeasureAmplitude( &gRFAL.wum.cfg.indAmp.reference );
 8017c1a:	483f      	ldr	r0, [pc, #252]	; (8017d18 <rfalWakeUpModeStart+0x2c8>)
 8017c1c:	f7eb fa5b 	bl	80030d6 <st25r3911MeasureAmplitude>
            }
            st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_REF, gRFAL.wum.cfg.indAmp.reference );
 8017c20:	4b3c      	ldr	r3, [pc, #240]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017c22:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8017c26:	4619      	mov	r1, r3
 8017c28:	2033      	movs	r0, #51	; 0x33
 8017c2a:	f7eb fea9 	bl	8003980 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wam;
 8017c2e:	7dfb      	ldrb	r3, [r7, #23]
 8017c30:	f043 0304 	orr.w	r3, r3, #4
 8017c34:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WAM;
 8017c36:	693b      	ldr	r3, [r7, #16]
 8017c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8017c3c:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Phase is to be performed */
    if( gRFAL.wum.cfg.indPha.enabled )
 8017c3e:	4b35      	ldr	r3, [pc, #212]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017c40:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d04c      	beq.n	8017ce2 <rfalWakeUpModeStart+0x292>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_d);
 8017c48:	4b32      	ldr	r3, [pc, #200]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017c4a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8017c4e:	011b      	lsls	r3, r3, #4
 8017c50:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 8017c52:	4b30      	ldr	r3, [pc, #192]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017c54:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d001      	beq.n	8017c60 <rfalWakeUpModeStart+0x210>
 8017c5c:	2208      	movs	r2, #8
 8017c5e:	e000      	b.n	8017c62 <rfalWakeUpModeStart+0x212>
 8017c60:	2200      	movs	r2, #0
 8017c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c66:	4313      	orrs	r3, r2
 8017c68:	b25b      	sxtb	r3, r3
 8017c6a:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_aew) & ST25R3911_REG_PHASE_MEASURE_CONF_mask_pm_aew);
 8017c6c:	4b29      	ldr	r3, [pc, #164]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017c6e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8017c72:	005b      	lsls	r3, r3, #1
 8017c74:	b2db      	uxtb	r3, r3
 8017c76:	b25b      	sxtb	r3, r3
 8017c78:	f003 0306 	and.w	r3, r3, #6
 8017c7c:	b25a      	sxtb	r2, r3
 8017c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c82:	4313      	orrs	r3, r2
 8017c84:	b25b      	sxtb	r3, r3
 8017c86:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 8017c88:	4b22      	ldr	r3, [pc, #136]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017c8a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8017c8e:	b25a      	sxtb	r2, r3
 8017c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c94:	4313      	orrs	r3, r2
 8017c96:	b25b      	sxtb	r3, r3
 8017c98:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_CONF, aux );
 8017c9a:	7bfb      	ldrb	r3, [r7, #15]
 8017c9c:	4619      	mov	r1, r3
 8017c9e:	2036      	movs	r0, #54	; 0x36
 8017ca0:	f7eb fe6e 	bl	8003980 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indPha.autoAvg )
 8017ca4:	4b1b      	ldr	r3, [pc, #108]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017ca6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8017caa:	f083 0301 	eor.w	r3, r3, #1
 8017cae:	b2db      	uxtb	r3, r3
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d00e      	beq.n	8017cd2 <rfalWakeUpModeStart+0x282>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 8017cb4:	4b17      	ldr	r3, [pc, #92]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017cb6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8017cba:	2bff      	cmp	r3, #255	; 0xff
 8017cbc:	d102      	bne.n	8017cc4 <rfalWakeUpModeStart+0x274>
            {
                st25r3911MeasurePhase( &gRFAL.wum.cfg.indPha.reference );
 8017cbe:	4817      	ldr	r0, [pc, #92]	; (8017d1c <rfalWakeUpModeStart+0x2cc>)
 8017cc0:	f7eb fa17 	bl	80030f2 <st25r3911MeasurePhase>
            }
            st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_REF, gRFAL.wum.cfg.indPha.reference );
 8017cc4:	4b13      	ldr	r3, [pc, #76]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017cc6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8017cca:	4619      	mov	r1, r3
 8017ccc:	2037      	movs	r0, #55	; 0x37
 8017cce:	f7eb fe57 	bl	8003980 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wph;
 8017cd2:	7dfb      	ldrb	r3, [r7, #23]
 8017cd4:	f043 0302 	orr.w	r3, r3, #2
 8017cd8:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WPH;
 8017cda:	693b      	ldr	r3, [r7, #16]
 8017cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017ce0:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Capacitive is to be performed */
    if( gRFAL.wum.cfg.cap.enabled )
 8017ce2:	4b0c      	ldr	r3, [pc, #48]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017ce4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d05a      	beq.n	8017da2 <rfalWakeUpModeStart+0x352>
    {
        /*******************************************************************************/
        /* Perform Capacitive sensor calibration */
        
        /* Disable Oscillator and Field */
        st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 8017cec:	2188      	movs	r1, #136	; 0x88
 8017cee:	2002      	movs	r0, #2
 8017cf0:	f7eb fe92 	bl	8003a18 <st25r3911ClrRegisterBits>
        
        /* Sensor gain should be configured on Analog Config */
        
        /* Perform calibration procedure */
        st25r3911CalibrateCapacitiveSensor( NULL );
 8017cf4:	2000      	movs	r0, #0
 8017cf6:	f7eb fa26 	bl	8003146 <st25r3911CalibrateCapacitiveSensor>
        
        
        /*******************************************************************************/
        aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_d);
 8017cfa:	4b06      	ldr	r3, [pc, #24]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017cfc:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8017d00:	011b      	lsls	r3, r3, #4
 8017d02:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 8017d04:	4b03      	ldr	r3, [pc, #12]	; (8017d14 <rfalWakeUpModeStart+0x2c4>)
 8017d06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d008      	beq.n	8017d20 <rfalWakeUpModeStart+0x2d0>
 8017d0e:	2208      	movs	r2, #8
 8017d10:	e007      	b.n	8017d22 <rfalWakeUpModeStart+0x2d2>
 8017d12:	bf00      	nop
 8017d14:	2000393c 	.word	0x2000393c
 8017d18:	200039aa 	.word	0x200039aa
 8017d1c:	200039b0 	.word	0x200039b0
 8017d20:	2200      	movs	r2, #0
 8017d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d26:	4313      	orrs	r3, r2
 8017d28:	b25b      	sxtb	r3, r3
 8017d2a:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_aew) & ST25R3911_REG_CAPACITANCE_MEASURE_CONF_mask_cm_aew);
 8017d2c:	4b2d      	ldr	r3, [pc, #180]	; (8017de4 <rfalWakeUpModeStart+0x394>)
 8017d2e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8017d32:	005b      	lsls	r3, r3, #1
 8017d34:	b2db      	uxtb	r3, r3
 8017d36:	b25b      	sxtb	r3, r3
 8017d38:	f003 0306 	and.w	r3, r3, #6
 8017d3c:	b25a      	sxtb	r2, r3
 8017d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d42:	4313      	orrs	r3, r2
 8017d44:	b25b      	sxtb	r3, r3
 8017d46:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 8017d48:	4b26      	ldr	r3, [pc, #152]	; (8017de4 <rfalWakeUpModeStart+0x394>)
 8017d4a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8017d4e:	b25a      	sxtb	r2, r3
 8017d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d54:	4313      	orrs	r3, r2
 8017d56:	b25b      	sxtb	r3, r3
 8017d58:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_CONF, aux );
 8017d5a:	7bfb      	ldrb	r3, [r7, #15]
 8017d5c:	4619      	mov	r1, r3
 8017d5e:	203a      	movs	r0, #58	; 0x3a
 8017d60:	f7eb fe0e 	bl	8003980 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.cap.autoAvg )
 8017d64:	4b1f      	ldr	r3, [pc, #124]	; (8017de4 <rfalWakeUpModeStart+0x394>)
 8017d66:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8017d6a:	f083 0301 	eor.w	r3, r3, #1
 8017d6e:	b2db      	uxtb	r3, r3
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d00e      	beq.n	8017d92 <rfalWakeUpModeStart+0x342>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 8017d74:	4b1b      	ldr	r3, [pc, #108]	; (8017de4 <rfalWakeUpModeStart+0x394>)
 8017d76:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8017d7a:	2bff      	cmp	r3, #255	; 0xff
 8017d7c:	d102      	bne.n	8017d84 <rfalWakeUpModeStart+0x334>
            {
                st25r3911MeasureCapacitance( &gRFAL.wum.cfg.cap.reference );
 8017d7e:	481a      	ldr	r0, [pc, #104]	; (8017de8 <rfalWakeUpModeStart+0x398>)
 8017d80:	f7eb f9c5 	bl	800310e <st25r3911MeasureCapacitance>
            }
            st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_REF, gRFAL.wum.cfg.cap.reference );
 8017d84:	4b17      	ldr	r3, [pc, #92]	; (8017de4 <rfalWakeUpModeStart+0x394>)
 8017d86:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8017d8a:	4619      	mov	r1, r3
 8017d8c:	203b      	movs	r0, #59	; 0x3b
 8017d8e:	f7eb fdf7 	bl	8003980 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wcap;
 8017d92:	7dfb      	ldrb	r3, [r7, #23]
 8017d94:	f043 0301 	orr.w	r3, r3, #1
 8017d98:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WCAP;
 8017d9a:	693b      	ldr	r3, [r7, #16]
 8017d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017da0:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable and clear all interrupts except Wake-Up IRQs */
    st25r3911DisableInterrupts( ST25R3911_IRQ_MASK_ALL );
 8017da2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017da6:	f7ec f9b7 	bl	8004118 <st25r3911DisableInterrupts>
    st25r3911GetInterrupt( irqs );
 8017daa:	6938      	ldr	r0, [r7, #16]
 8017dac:	f7ec f96c 	bl	8004088 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( irqs );
 8017db0:	6938      	ldr	r0, [r7, #16]
 8017db2:	f7ec f9a5 	bl	8004100 <st25r3911EnableInterrupts>
    
    /* Enable Low Power Wake-Up Mode */
    st25r3911WriteRegister( ST25R3911_REG_WUP_TIMER_CONTROL, reg );
 8017db6:	7dfb      	ldrb	r3, [r7, #23]
 8017db8:	4619      	mov	r1, r3
 8017dba:	2031      	movs	r0, #49	; 0x31
 8017dbc:	f7eb fde0 	bl	8003980 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_wu), ST25R3911_REG_OP_CONTROL_wu );
 8017dc0:	2204      	movs	r2, #4
 8017dc2:	2184      	movs	r1, #132	; 0x84
 8017dc4:	2002      	movs	r0, #2
 8017dc6:	f7eb fe68 	bl	8003a9a <st25r3911ChangeRegisterBits>
    
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 8017dca:	4b06      	ldr	r3, [pc, #24]	; (8017de4 <rfalWakeUpModeStart+0x394>)
 8017dcc:	2201      	movs	r2, #1
 8017dce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    gRFAL.state     = RFAL_STATE_WUM;  
 8017dd2:	4b04      	ldr	r3, [pc, #16]	; (8017de4 <rfalWakeUpModeStart+0x394>)
 8017dd4:	2205      	movs	r2, #5
 8017dd6:	701a      	strb	r2, [r3, #0]
      
    return ERR_NONE;
 8017dd8:	2300      	movs	r3, #0
}
 8017dda:	4618      	mov	r0, r3
 8017ddc:	3718      	adds	r7, #24
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bdb0      	pop	{r4, r5, r7, pc}
 8017de2:	bf00      	nop
 8017de4:	2000393c 	.word	0x2000393c
 8017de8:	200039b6 	.word	0x200039b6

08017dec <rfalWakeUpModeHasWoke>:


/*******************************************************************************/
bool rfalWakeUpModeHasWoke( void )
{   
 8017dec:	b480      	push	{r7}
 8017dee:	af00      	add	r7, sp, #0
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 8017df0:	4b05      	ldr	r3, [pc, #20]	; (8017e08 <rfalWakeUpModeHasWoke+0x1c>)
 8017df2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8017df6:	2b01      	cmp	r3, #1
 8017df8:	bf8c      	ite	hi
 8017dfa:	2301      	movhi	r3, #1
 8017dfc:	2300      	movls	r3, #0
 8017dfe:	b2db      	uxtb	r3, r3
}
 8017e00:	4618      	mov	r0, r3
 8017e02:	46bd      	mov	sp, r7
 8017e04:	bc80      	pop	{r7}
 8017e06:	4770      	bx	lr
 8017e08:	2000393c 	.word	0x2000393c

08017e0c <rfalRunWakeUpModeWorker>:


/*******************************************************************************/
static void rfalRunWakeUpModeWorker( void )
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b082      	sub	sp, #8
 8017e10:	af00      	add	r7, sp, #0
    uint32_t irqs;
    
    if( gRFAL.state != RFAL_STATE_WUM )
 8017e12:	4b1c      	ldr	r3, [pc, #112]	; (8017e84 <rfalRunWakeUpModeWorker+0x78>)
 8017e14:	781b      	ldrb	r3, [r3, #0]
 8017e16:	2b05      	cmp	r3, #5
 8017e18:	d129      	bne.n	8017e6e <rfalRunWakeUpModeWorker+0x62>
    {
        return;
    }
    
    switch( gRFAL.wum.state )
 8017e1a:	4b1a      	ldr	r3, [pc, #104]	; (8017e84 <rfalRunWakeUpModeWorker+0x78>)
 8017e1c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8017e20:	3b01      	subs	r3, #1
 8017e22:	2b01      	cmp	r3, #1
 8017e24:	d825      	bhi.n	8017e72 <rfalRunWakeUpModeWorker+0x66>
    {
        case RFAL_WUM_STATE_ENABLED:
        case RFAL_WUM_STATE_ENABLED_WOKE:
            
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 8017e26:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 8017e2a:	f7ec f92d 	bl	8004088 <st25r3911GetInterrupt>
 8017e2e:	6078      	str	r0, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d01f      	beq.n	8017e76 <rfalRunWakeUpModeWorker+0x6a>
               break;  /* No interrupt to process */
            }
            
            /*******************************************************************************/
            /* Check and mark which measurement(s) cause interrupt */
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d003      	beq.n	8017e48 <rfalRunWakeUpModeWorker+0x3c>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8017e40:	4b10      	ldr	r3, [pc, #64]	; (8017e84 <rfalRunWakeUpModeWorker+0x78>)
 8017e42:	2202      	movs	r2, #2
 8017e44:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d003      	beq.n	8017e5a <rfalRunWakeUpModeWorker+0x4e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8017e52:	4b0c      	ldr	r3, [pc, #48]	; (8017e84 <rfalRunWakeUpModeWorker+0x78>)
 8017e54:	2202      	movs	r2, #2
 8017e56:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d00a      	beq.n	8017e7a <rfalRunWakeUpModeWorker+0x6e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8017e64:	4b07      	ldr	r3, [pc, #28]	; (8017e84 <rfalRunWakeUpModeWorker+0x78>)
 8017e66:	2202      	movs	r2, #2
 8017e68:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            break;
 8017e6c:	e005      	b.n	8017e7a <rfalRunWakeUpModeWorker+0x6e>
        return;
 8017e6e:	bf00      	nop
 8017e70:	e004      	b.n	8017e7c <rfalRunWakeUpModeWorker+0x70>
            
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8017e72:	bf00      	nop
 8017e74:	e002      	b.n	8017e7c <rfalRunWakeUpModeWorker+0x70>
               break;  /* No interrupt to process */
 8017e76:	bf00      	nop
 8017e78:	e000      	b.n	8017e7c <rfalRunWakeUpModeWorker+0x70>
            break;
 8017e7a:	bf00      	nop
    }
}
 8017e7c:	3708      	adds	r7, #8
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	bd80      	pop	{r7, pc}
 8017e82:	bf00      	nop
 8017e84:	2000393c 	.word	0x2000393c

08017e88 <rfalWakeUpModeStop>:


/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
 8017e88:	b580      	push	{r7, lr}
 8017e8a:	af00      	add	r7, sp, #0
    if( gRFAL.wum.state == RFAL_WUM_STATE_NOT_INIT )
 8017e8c:	4b0f      	ldr	r3, [pc, #60]	; (8017ecc <rfalWakeUpModeStop+0x44>)
 8017e8e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d101      	bne.n	8017e9a <rfalWakeUpModeStop+0x12>
    {
        return ERR_WRONG_STATE;
 8017e96:	2321      	movs	r3, #33	; 0x21
 8017e98:	e015      	b.n	8017ec6 <rfalWakeUpModeStop+0x3e>
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 8017e9a:	4b0c      	ldr	r3, [pc, #48]	; (8017ecc <rfalWakeUpModeStop+0x44>)
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    
    /* Re-Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8017ea2:	2110      	movs	r1, #16
 8017ea4:	2009      	movs	r0, #9
 8017ea6:	f7eb fdda 	bl	8003a5e <st25r3911SetRegisterBits>
    
    /* Disable Wake-Up Mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8017eaa:	2104      	movs	r1, #4
 8017eac:	2002      	movs	r0, #2
 8017eae:	f7eb fdb3 	bl	8003a18 <st25r3911ClrRegisterBits>
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP) );
 8017eb2:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 8017eb6:	f7ec f92f 	bl	8004118 <st25r3911DisableInterrupts>
    
    /* Re-Enable the Oscillator */
    st25r3911OscOn();
 8017eba:	f7eb f866 	bl	8002f8a <st25r3911OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 8017ebe:	2005      	movs	r0, #5
 8017ec0:	f7f5 f8de 	bl	800d080 <rfalSetAnalogConfig>
      
    return ERR_NONE;
 8017ec4:	2300      	movs	r3, #0
}
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	bd80      	pop	{r7, pc}
 8017eca:	bf00      	nop
 8017ecc:	2000393c 	.word	0x2000393c

08017ed0 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b082      	sub	sp, #8
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	80fb      	strh	r3, [r7, #6]
 8017eda:	460b      	mov	r3, r1
 8017edc:	717b      	strb	r3, [r7, #5]
 8017ede:	4613      	mov	r3, r2
 8017ee0:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 8017ee2:	88fb      	ldrh	r3, [r7, #6]
 8017ee4:	b2db      	uxtb	r3, r3
 8017ee6:	793a      	ldrb	r2, [r7, #4]
 8017ee8:	7979      	ldrb	r1, [r7, #5]
 8017eea:	4618      	mov	r0, r3
 8017eec:	f7eb fdd5 	bl	8003a9a <st25r3911ChangeRegisterBits>
    return ERR_NONE;
 8017ef0:	2300      	movs	r3, #0
}
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	3708      	adds	r7, #8
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	bd80      	pop	{r7, pc}

08017efa <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 8017efa:	b580      	push	{r7, lr}
 8017efc:	b082      	sub	sp, #8
 8017efe:	af00      	add	r7, sp, #0
 8017f00:	4603      	mov	r3, r0
 8017f02:	80fb      	strh	r3, [r7, #6]
 8017f04:	460b      	mov	r3, r1
 8017f06:	717b      	strb	r3, [r7, #5]
 8017f08:	4613      	mov	r3, r2
 8017f0a:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 8017f0c:	88fb      	ldrh	r3, [r7, #6]
 8017f0e:	b2db      	uxtb	r3, r3
 8017f10:	793a      	ldrb	r2, [r7, #4]
 8017f12:	7979      	ldrb	r1, [r7, #5]
 8017f14:	4618      	mov	r0, r3
 8017f16:	f7eb fdff 	bl	8003b18 <st25r3911ChangeTestRegisterBits>
    return ERR_NONE;
 8017f1a:	2300      	movs	r3, #0
}
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	3708      	adds	r7, #8
 8017f20:	46bd      	mov	sp, r7
 8017f22:	bd80      	pop	{r7, pc}

08017f24 <rfalSt25tbPollerDoCollisionResolution>:
******************************************************************************
*/


static bool rfalSt25tbPollerDoCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b086      	sub	sp, #24
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	60b9      	str	r1, [r7, #8]
 8017f2e:	607a      	str	r2, [r7, #4]
 8017f30:	73fb      	strb	r3, [r7, #15]
    uint8_t    i;
    uint8_t    chipId;
    ReturnCode ret;
    bool col;

    col = false;
 8017f32:	2300      	movs	r3, #0
 8017f34:	74fb      	strb	r3, [r7, #19]
    
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 8017f36:	2300      	movs	r3, #0
 8017f38:	75fb      	strb	r3, [r7, #23]
 8017f3a:	e072      	b.n	8018022 <rfalSt25tbPollerDoCollisionResolution+0xfe>
    {
        platformDelay(1);  /* Wait t2: Answer to new request delay  */
 8017f3c:	2001      	movs	r0, #1
 8017f3e:	f7ec f9bd 	bl	80042bc <HAL_Delay>
        
        if( i==0U )
 8017f42:	7dfb      	ldrb	r3, [r7, #23]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d107      	bne.n	8017f58 <rfalSt25tbPollerDoCollisionResolution+0x34>
        {
            /* Step 2: Send Pcall16 */
            ret = rfalSt25tbPollerPcall( &chipId );
 8017f48:	f107 0312 	add.w	r3, r7, #18
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	f000 f8c6 	bl	80180de <rfalSt25tbPollerPcall>
 8017f52:	4603      	mov	r3, r0
 8017f54:	82bb      	strh	r3, [r7, #20]
 8017f56:	e008      	b.n	8017f6a <rfalSt25tbPollerDoCollisionResolution+0x46>
        }
        else
        {
            /* Step 3-17: Send Pcall16 */
            ret = rfalSt25tbPollerSlotMarker( i, &chipId );
 8017f58:	f107 0212 	add.w	r2, r7, #18
 8017f5c:	7dfb      	ldrb	r3, [r7, #23]
 8017f5e:	4611      	mov	r1, r2
 8017f60:	4618      	mov	r0, r3
 8017f62:	f000 f8e2 	bl	801812a <rfalSt25tbPollerSlotMarker>
 8017f66:	4603      	mov	r3, r0
 8017f68:	82bb      	strh	r3, [r7, #20]
        }
        
        if( ret == ERR_NONE )
 8017f6a:	8abb      	ldrh	r3, [r7, #20]
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d148      	bne.n	8018002 <rfalSt25tbPollerDoCollisionResolution+0xde>
        {
            /* Found another device */
            st25tbDevList[*devCnt].chipID       = chipId;
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	781b      	ldrb	r3, [r3, #0]
 8017f74:	461a      	mov	r2, r3
 8017f76:	4613      	mov	r3, r2
 8017f78:	009b      	lsls	r3, r3, #2
 8017f7a:	4413      	add	r3, r2
 8017f7c:	005b      	lsls	r3, r3, #1
 8017f7e:	461a      	mov	r2, r3
 8017f80:	68bb      	ldr	r3, [r7, #8]
 8017f82:	4413      	add	r3, r2
 8017f84:	7cba      	ldrb	r2, [r7, #18]
 8017f86:	701a      	strb	r2, [r3, #0]
            st25tbDevList[*devCnt].isDeselected = false;
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	781b      	ldrb	r3, [r3, #0]
 8017f8c:	461a      	mov	r2, r3
 8017f8e:	4613      	mov	r3, r2
 8017f90:	009b      	lsls	r3, r3, #2
 8017f92:	4413      	add	r3, r2
 8017f94:	005b      	lsls	r3, r3, #1
 8017f96:	461a      	mov	r2, r3
 8017f98:	68bb      	ldr	r3, [r7, #8]
 8017f9a:	4413      	add	r3, r2
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	725a      	strb	r2, [r3, #9]
            
            /* Select Device, retrieve its UID  */
            ret = rfalSt25tbPollerSelect( chipId );
 8017fa0:	7cbb      	ldrb	r3, [r7, #18]
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	f000 f8f4 	bl	8018190 <rfalSt25tbPollerSelect>
 8017fa8:	4603      	mov	r3, r0
 8017faa:	82bb      	strh	r3, [r7, #20]

            /* By Selecting this device, the previous gets Deselected */
            if( (*devCnt) > 0U )
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	781b      	ldrb	r3, [r3, #0]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d00b      	beq.n	8017fcc <rfalSt25tbPollerDoCollisionResolution+0xa8>
            {
                st25tbDevList[(*devCnt)-1U].isDeselected = true;
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	781b      	ldrb	r3, [r3, #0]
 8017fb8:	461a      	mov	r2, r3
 8017fba:	4613      	mov	r3, r2
 8017fbc:	009b      	lsls	r3, r3, #2
 8017fbe:	4413      	add	r3, r2
 8017fc0:	005b      	lsls	r3, r3, #1
 8017fc2:	3b0a      	subs	r3, #10
 8017fc4:	68ba      	ldr	r2, [r7, #8]
 8017fc6:	4413      	add	r3, r2
 8017fc8:	2201      	movs	r2, #1
 8017fca:	725a      	strb	r2, [r3, #9]
            }

            if( ERR_NONE == ret )
 8017fcc:	8abb      	ldrh	r3, [r7, #20]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d10d      	bne.n	8017fee <rfalSt25tbPollerDoCollisionResolution+0xca>
            {
                rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	781b      	ldrb	r3, [r3, #0]
 8017fd6:	461a      	mov	r2, r3
 8017fd8:	4613      	mov	r3, r2
 8017fda:	009b      	lsls	r3, r3, #2
 8017fdc:	4413      	add	r3, r2
 8017fde:	005b      	lsls	r3, r3, #1
 8017fe0:	461a      	mov	r2, r3
 8017fe2:	68bb      	ldr	r3, [r7, #8]
 8017fe4:	4413      	add	r3, r2
 8017fe6:	3301      	adds	r3, #1
 8017fe8:	4618      	mov	r0, r3
 8017fea:	f000 f8fd 	bl	80181e8 <rfalSt25tbPollerGetUID>
            }

            if( ERR_NONE == ret )
 8017fee:	8abb      	ldrh	r3, [r7, #20]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d10e      	bne.n	8018012 <rfalSt25tbPollerDoCollisionResolution+0xee>
            {
                (*devCnt)++;
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	781b      	ldrb	r3, [r3, #0]
 8017ff8:	3301      	adds	r3, #1
 8017ffa:	b2da      	uxtb	r2, r3
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	701a      	strb	r2, [r3, #0]
 8018000:	e007      	b.n	8018012 <rfalSt25tbPollerDoCollisionResolution+0xee>
            }
        }
        else if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8018002:	8abb      	ldrh	r3, [r7, #20]
 8018004:	2b15      	cmp	r3, #21
 8018006:	d002      	beq.n	801800e <rfalSt25tbPollerDoCollisionResolution+0xea>
 8018008:	8abb      	ldrh	r3, [r7, #20]
 801800a:	2b09      	cmp	r3, #9
 801800c:	d101      	bne.n	8018012 <rfalSt25tbPollerDoCollisionResolution+0xee>
        {
            col = true;
 801800e:	2301      	movs	r3, #1
 8018010:	74fb      	strb	r3, [r7, #19]
        else
        {
            /* MISRA 15.7 - Empty else */
        }
        
        if( *devCnt >= devLimit )
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	781b      	ldrb	r3, [r3, #0]
 8018016:	7bfa      	ldrb	r2, [r7, #15]
 8018018:	429a      	cmp	r2, r3
 801801a:	d906      	bls.n	801802a <rfalSt25tbPollerDoCollisionResolution+0x106>
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 801801c:	7dfb      	ldrb	r3, [r7, #23]
 801801e:	3301      	adds	r3, #1
 8018020:	75fb      	strb	r3, [r7, #23]
 8018022:	7dfb      	ldrb	r3, [r7, #23]
 8018024:	2b0f      	cmp	r3, #15
 8018026:	d989      	bls.n	8017f3c <rfalSt25tbPollerDoCollisionResolution+0x18>
 8018028:	e000      	b.n	801802c <rfalSt25tbPollerDoCollisionResolution+0x108>
        {
            break;
 801802a:	bf00      	nop
        }
    }
    return col;
 801802c:	7cfb      	ldrb	r3, [r7, #19]
}
 801802e:	4618      	mov	r0, r3
 8018030:	3718      	adds	r7, #24
 8018032:	46bd      	mov	sp, r7
 8018034:	bd80      	pop	{r7, pc}

08018036 <rfalSt25tbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitialize( void )
{
 8018036:	b580      	push	{r7, lr}
 8018038:	af00      	add	r7, sp, #0
    return rfalNfcbPollerInitialize();
 801803a:	f7fb fc1d 	bl	8013878 <rfalNfcbPollerInitialize>
 801803e:	4603      	mov	r3, r0
}
 8018040:	4618      	mov	r0, r3
 8018042:	bd80      	pop	{r7, pc}

08018044 <rfalSt25tbPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCheckPresence( uint8_t *chipId )
{
 8018044:	b580      	push	{r7, lr}
 8018046:	b084      	sub	sp, #16
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    chipIdRes;

    chipIdRes = 0x00;
 801804c:	2300      	movs	r3, #0
 801804e:	737b      	strb	r3, [r7, #13]
   
    /* Send Initiate Request */
    ret = rfalSt25tbPollerInitiate( &chipIdRes );
 8018050:	f107 030d 	add.w	r3, r7, #13
 8018054:	4618      	mov	r0, r3
 8018056:	f000 f815 	bl	8018084 <rfalSt25tbPollerInitiate>
 801805a:	4603      	mov	r3, r0
 801805c:	81fb      	strh	r3, [r7, #14]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 801805e:	89fb      	ldrh	r3, [r7, #14]
 8018060:	2b15      	cmp	r3, #21
 8018062:	d002      	beq.n	801806a <rfalSt25tbPollerCheckPresence+0x26>
 8018064:	89fb      	ldrh	r3, [r7, #14]
 8018066:	2b09      	cmp	r3, #9
 8018068:	d101      	bne.n	801806e <rfalSt25tbPollerCheckPresence+0x2a>
    {
        return ERR_NONE;
 801806a:	2300      	movs	r3, #0
 801806c:	e006      	b.n	801807c <rfalSt25tbPollerCheckPresence+0x38>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	2b00      	cmp	r3, #0
 8018072:	d002      	beq.n	801807a <rfalSt25tbPollerCheckPresence+0x36>
    {
        *chipId = chipIdRes;
 8018074:	7b7a      	ldrb	r2, [r7, #13]
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 801807a:	89fb      	ldrh	r3, [r7, #14]
}
 801807c:	4618      	mov	r0, r3
 801807e:	3710      	adds	r7, #16
 8018080:	46bd      	mov	sp, r7
 8018082:	bd80      	pop	{r7, pc}

08018084 <rfalSt25tbPollerInitiate>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitiate( uint8_t *chipId )
{
 8018084:	b580      	push	{r7, lr}
 8018086:	b08a      	sub	sp, #40	; 0x28
 8018088:	af04      	add	r7, sp, #16
 801808a:	6078      	str	r0, [r7, #4]
    uint16_t              rxLen;
    rfalSt25tbInitiateReq initiateReq;
    uint8_t               rxBuf[RFAL_ST25TB_CHIP_ID_LEN + RFAL_ST25TB_CRC_LEN]; /* In case we receive less data that CRC, RF layer will not remove the CRC from buffer */
    
    /* Compute Initiate Request */
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 801808c:	2306      	movs	r3, #6
 801808e:	743b      	strb	r3, [r7, #16]
    initiateReq.cmd2   = RFAL_ST25TB_INITIATE_CMD2;
 8018090:	2300      	movs	r3, #0
 8018092:	747b      	strb	r3, [r7, #17]
    
    /* Send Initiate Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8018094:	f107 020c 	add.w	r2, r7, #12
 8018098:	f107 0010 	add.w	r0, r7, #16
 801809c:	f241 036d 	movw	r3, #4205	; 0x106d
 80180a0:	9302      	str	r3, [sp, #8]
 80180a2:	2300      	movs	r3, #0
 80180a4:	9301      	str	r3, [sp, #4]
 80180a6:	f107 0314 	add.w	r3, r7, #20
 80180aa:	9300      	str	r3, [sp, #0]
 80180ac:	2303      	movs	r3, #3
 80180ae:	2102      	movs	r1, #2
 80180b0:	f7fd ff24 	bl	8015efc <rfalTransceiveBlockingTxRx>
 80180b4:	4603      	mov	r3, r0
 80180b6:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 80180b8:	8afb      	ldrh	r3, [r7, #22]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d104      	bne.n	80180c8 <rfalSt25tbPollerInitiate+0x44>
 80180be:	8abb      	ldrh	r3, [r7, #20]
 80180c0:	2b01      	cmp	r3, #1
 80180c2:	d001      	beq.n	80180c8 <rfalSt25tbPollerInitiate+0x44>
    {
        return ERR_PROTO;
 80180c4:	230b      	movs	r3, #11
 80180c6:	e006      	b.n	80180d6 <rfalSt25tbPollerInitiate+0x52>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d002      	beq.n	80180d4 <rfalSt25tbPollerInitiate+0x50>
    {
        *chipId = *rxBuf;
 80180ce:	7b3a      	ldrb	r2, [r7, #12]
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 80180d4:	8afb      	ldrh	r3, [r7, #22]
}
 80180d6:	4618      	mov	r0, r3
 80180d8:	3718      	adds	r7, #24
 80180da:	46bd      	mov	sp, r7
 80180dc:	bd80      	pop	{r7, pc}

080180de <rfalSt25tbPollerPcall>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerPcall( uint8_t *chipId )
{
 80180de:	b580      	push	{r7, lr}
 80180e0:	b088      	sub	sp, #32
 80180e2:	af04      	add	r7, sp, #16
 80180e4:	6078      	str	r0, [r7, #4]
    ReturnCode         ret;
    uint16_t           rxLen;
    rfalSt25tbPcallReq pcallReq;

    /* Compute Pcal16 Request */
    pcallReq.cmd1   = RFAL_ST25TB_PCALL_CMD1;
 80180e6:	2306      	movs	r3, #6
 80180e8:	723b      	strb	r3, [r7, #8]
    pcallReq.cmd2   = RFAL_ST25TB_PCALL_CMD2;
 80180ea:	2304      	movs	r3, #4
 80180ec:	727b      	strb	r3, [r7, #9]
    
    /* Send Pcal16 Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&pcallReq, sizeof(rfalSt25tbPcallReq), (uint8_t*)chipId, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 80180ee:	f107 0008 	add.w	r0, r7, #8
 80180f2:	f241 036d 	movw	r3, #4205	; 0x106d
 80180f6:	9302      	str	r3, [sp, #8]
 80180f8:	2300      	movs	r3, #0
 80180fa:	9301      	str	r3, [sp, #4]
 80180fc:	f107 030c 	add.w	r3, r7, #12
 8018100:	9300      	str	r3, [sp, #0]
 8018102:	2301      	movs	r3, #1
 8018104:	687a      	ldr	r2, [r7, #4]
 8018106:	2102      	movs	r1, #2
 8018108:	f7fd fef8 	bl	8015efc <rfalTransceiveBlockingTxRx>
 801810c:	4603      	mov	r3, r0
 801810e:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 8018110:	89fb      	ldrh	r3, [r7, #14]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d104      	bne.n	8018120 <rfalSt25tbPollerPcall+0x42>
 8018116:	89bb      	ldrh	r3, [r7, #12]
 8018118:	2b01      	cmp	r3, #1
 801811a:	d001      	beq.n	8018120 <rfalSt25tbPollerPcall+0x42>
    {
        return ERR_PROTO;
 801811c:	230b      	movs	r3, #11
 801811e:	e000      	b.n	8018122 <rfalSt25tbPollerPcall+0x44>
    }
    
    return ret;
 8018120:	89fb      	ldrh	r3, [r7, #14]
}
 8018122:	4618      	mov	r0, r3
 8018124:	3710      	adds	r7, #16
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}

0801812a <rfalSt25tbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSlotMarker( uint8_t slotNum, uint8_t *chipIdRes )
{
 801812a:	b580      	push	{r7, lr}
 801812c:	b088      	sub	sp, #32
 801812e:	af04      	add	r7, sp, #16
 8018130:	4603      	mov	r3, r0
 8018132:	6039      	str	r1, [r7, #0]
 8018134:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    uint16_t   rxLen;
    uint8_t    slotMarker;

    if( (slotNum == 0U) || (slotNum > 15U) )
 8018136:	79fb      	ldrb	r3, [r7, #7]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d002      	beq.n	8018142 <rfalSt25tbPollerSlotMarker+0x18>
 801813c:	79fb      	ldrb	r3, [r7, #7]
 801813e:	2b0f      	cmp	r3, #15
 8018140:	d901      	bls.n	8018146 <rfalSt25tbPollerSlotMarker+0x1c>
    {
        return ERR_PARAM;
 8018142:	2307      	movs	r3, #7
 8018144:	e020      	b.n	8018188 <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    /* Compute SlotMarker */
    slotMarker = ( ((slotNum & RFAL_ST25TB_SLOTNUM_MASK) << RFAL_ST25TB_SLOTNUM_SHIFT) | RFAL_ST25TB_PCALL_CMD1 );
 8018146:	79fb      	ldrb	r3, [r7, #7]
 8018148:	011b      	lsls	r3, r3, #4
 801814a:	b2db      	uxtb	r3, r3
 801814c:	f043 0306 	orr.w	r3, r3, #6
 8018150:	b2db      	uxtb	r3, r3
 8018152:	72fb      	strb	r3, [r7, #11]
    
    
    /* Send SlotMarker */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, RFAL_ST25TB_CMD_LEN, (uint8_t*)chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8018154:	f107 000b 	add.w	r0, r7, #11
 8018158:	f241 036d 	movw	r3, #4205	; 0x106d
 801815c:	9302      	str	r3, [sp, #8]
 801815e:	2300      	movs	r3, #0
 8018160:	9301      	str	r3, [sp, #4]
 8018162:	f107 030c 	add.w	r3, r7, #12
 8018166:	9300      	str	r3, [sp, #0]
 8018168:	2301      	movs	r3, #1
 801816a:	683a      	ldr	r2, [r7, #0]
 801816c:	2101      	movs	r1, #1
 801816e:	f7fd fec5 	bl	8015efc <rfalTransceiveBlockingTxRx>
 8018172:	4603      	mov	r3, r0
 8018174:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid ChipID Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 8018176:	89fb      	ldrh	r3, [r7, #14]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d104      	bne.n	8018186 <rfalSt25tbPollerSlotMarker+0x5c>
 801817c:	89bb      	ldrh	r3, [r7, #12]
 801817e:	2b01      	cmp	r3, #1
 8018180:	d001      	beq.n	8018186 <rfalSt25tbPollerSlotMarker+0x5c>
    {
        return ERR_PROTO;
 8018182:	230b      	movs	r3, #11
 8018184:	e000      	b.n	8018188 <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    return ret;
 8018186:	89fb      	ldrh	r3, [r7, #14]
}
 8018188:	4618      	mov	r0, r3
 801818a:	3710      	adds	r7, #16
 801818c:	46bd      	mov	sp, r7
 801818e:	bd80      	pop	{r7, pc}

08018190 <rfalSt25tbPollerSelect>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSelect( uint8_t chipId )
{
 8018190:	b580      	push	{r7, lr}
 8018192:	b08a      	sub	sp, #40	; 0x28
 8018194:	af04      	add	r7, sp, #16
 8018196:	4603      	mov	r3, r0
 8018198:	71fb      	strb	r3, [r7, #7]
    uint16_t            rxLen;    
    rfalSt25tbSelectReq selectReq;
    uint8_t             chipIdRes;

    /* Compute Select Request */
    selectReq.cmd    = RFAL_ST25TB_SELECT_CMD;
 801819a:	230e      	movs	r3, #14
 801819c:	743b      	strb	r3, [r7, #16]
    selectReq.chipId = chipId;
 801819e:	79fb      	ldrb	r3, [r7, #7]
 80181a0:	747b      	strb	r3, [r7, #17]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 80181a2:	f107 020f 	add.w	r2, r7, #15
 80181a6:	f107 0010 	add.w	r0, r7, #16
 80181aa:	f241 036d 	movw	r3, #4205	; 0x106d
 80181ae:	9302      	str	r3, [sp, #8]
 80181b0:	2300      	movs	r3, #0
 80181b2:	9301      	str	r3, [sp, #4]
 80181b4:	f107 0314 	add.w	r3, r7, #20
 80181b8:	9300      	str	r3, [sp, #0]
 80181ba:	2301      	movs	r3, #1
 80181bc:	2102      	movs	r1, #2
 80181be:	f7fd fe9d 	bl	8015efc <rfalTransceiveBlockingTxRx>
 80181c2:	4603      	mov	r3, r0
 80181c4:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && ((rxLen != RFAL_ST25TB_CHIP_ID_LEN) || (chipIdRes != chipId)) )
 80181c6:	8afb      	ldrh	r3, [r7, #22]
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d108      	bne.n	80181de <rfalSt25tbPollerSelect+0x4e>
 80181cc:	8abb      	ldrh	r3, [r7, #20]
 80181ce:	2b01      	cmp	r3, #1
 80181d0:	d103      	bne.n	80181da <rfalSt25tbPollerSelect+0x4a>
 80181d2:	7bfb      	ldrb	r3, [r7, #15]
 80181d4:	79fa      	ldrb	r2, [r7, #7]
 80181d6:	429a      	cmp	r2, r3
 80181d8:	d001      	beq.n	80181de <rfalSt25tbPollerSelect+0x4e>
    {
        return ERR_PROTO;
 80181da:	230b      	movs	r3, #11
 80181dc:	e000      	b.n	80181e0 <rfalSt25tbPollerSelect+0x50>
    }
    
    return ret;
 80181de:	8afb      	ldrh	r3, [r7, #22]
}
 80181e0:	4618      	mov	r0, r3
 80181e2:	3718      	adds	r7, #24
 80181e4:	46bd      	mov	sp, r7
 80181e6:	bd80      	pop	{r7, pc}

080181e8 <rfalSt25tbPollerGetUID>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerGetUID( rfalSt25tbUID *UID )
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b088      	sub	sp, #32
 80181ec:	af04      	add	r7, sp, #16
 80181ee:	6078      	str	r0, [r7, #4]
    uint16_t   rxLen;
    uint8_t    getUidReq;
    

    /* Compute Get UID Request */
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 80181f0:	230b      	movs	r3, #11
 80181f2:	72fb      	strb	r3, [r7, #11]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 80181f4:	f107 000b 	add.w	r0, r7, #11
 80181f8:	f241 036d 	movw	r3, #4205	; 0x106d
 80181fc:	9302      	str	r3, [sp, #8]
 80181fe:	2300      	movs	r3, #0
 8018200:	9301      	str	r3, [sp, #4]
 8018202:	f107 030c 	add.w	r3, r7, #12
 8018206:	9300      	str	r3, [sp, #0]
 8018208:	2308      	movs	r3, #8
 801820a:	687a      	ldr	r2, [r7, #4]
 801820c:	2101      	movs	r1, #1
 801820e:	f7fd fe75 	bl	8015efc <rfalTransceiveBlockingTxRx>
 8018212:	4603      	mov	r3, r0
 8018214:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid UID Response */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_UID_LEN) )
 8018216:	89fb      	ldrh	r3, [r7, #14]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d104      	bne.n	8018226 <rfalSt25tbPollerGetUID+0x3e>
 801821c:	89bb      	ldrh	r3, [r7, #12]
 801821e:	2b08      	cmp	r3, #8
 8018220:	d001      	beq.n	8018226 <rfalSt25tbPollerGetUID+0x3e>
    {
        return ERR_PROTO;
 8018222:	230b      	movs	r3, #11
 8018224:	e000      	b.n	8018228 <rfalSt25tbPollerGetUID+0x40>
    }
    
    return ret;
 8018226:	89fb      	ldrh	r3, [r7, #14]
}
 8018228:	4618      	mov	r0, r3
 801822a:	3710      	adds	r7, #16
 801822c:	46bd      	mov	sp, r7
 801822e:	bd80      	pop	{r7, pc}

08018230 <rfalSt25tbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b086      	sub	sp, #24
 8018234:	af00      	add	r7, sp, #0
 8018236:	4603      	mov	r3, r0
 8018238:	60b9      	str	r1, [r7, #8]
 801823a:	607a      	str	r2, [r7, #4]
 801823c:	73fb      	strb	r3, [r7, #15]
    
    uint8_t    chipId;
    ReturnCode ret;
    bool       detected;  /* collision or device was detected */
    
    if( (st25tbDevList == NULL) || (devCnt == NULL) || (devLimit == 0U) )
 801823e:	68bb      	ldr	r3, [r7, #8]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d005      	beq.n	8018250 <rfalSt25tbPollerCollisionResolution+0x20>
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d002      	beq.n	8018250 <rfalSt25tbPollerCollisionResolution+0x20>
 801824a:	7bfb      	ldrb	r3, [r7, #15]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d101      	bne.n	8018254 <rfalSt25tbPollerCollisionResolution+0x24>
    {
        return ERR_PARAM;
 8018250:	2307      	movs	r3, #7
 8018252:	e05c      	b.n	801830e <rfalSt25tbPollerCollisionResolution+0xde>
    }
    
    *devCnt = 0;
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	2200      	movs	r2, #0
 8018258:	701a      	strb	r2, [r3, #0]
    
    /* Step 1: Send Initiate */
    ret = rfalSt25tbPollerInitiate( &chipId );
 801825a:	f107 0314 	add.w	r3, r7, #20
 801825e:	4618      	mov	r0, r3
 8018260:	f7ff ff10 	bl	8018084 <rfalSt25tbPollerInitiate>
 8018264:	4603      	mov	r3, r0
 8018266:	82fb      	strh	r3, [r7, #22]
    if( ret == ERR_NONE )
 8018268:	8afb      	ldrh	r3, [r7, #22]
 801826a:	2b00      	cmp	r3, #0
 801826c:	d139      	bne.n	80182e2 <rfalSt25tbPollerCollisionResolution+0xb2>
    {
        /* If only 1 answer is detected */
        st25tbDevList[*devCnt].chipID       = chipId;
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	781b      	ldrb	r3, [r3, #0]
 8018272:	461a      	mov	r2, r3
 8018274:	4613      	mov	r3, r2
 8018276:	009b      	lsls	r3, r3, #2
 8018278:	4413      	add	r3, r2
 801827a:	005b      	lsls	r3, r3, #1
 801827c:	461a      	mov	r2, r3
 801827e:	68bb      	ldr	r3, [r7, #8]
 8018280:	4413      	add	r3, r2
 8018282:	7d3a      	ldrb	r2, [r7, #20]
 8018284:	701a      	strb	r2, [r3, #0]
        st25tbDevList[*devCnt].isDeselected = false;
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	781b      	ldrb	r3, [r3, #0]
 801828a:	461a      	mov	r2, r3
 801828c:	4613      	mov	r3, r2
 801828e:	009b      	lsls	r3, r3, #2
 8018290:	4413      	add	r3, r2
 8018292:	005b      	lsls	r3, r3, #1
 8018294:	461a      	mov	r2, r3
 8018296:	68bb      	ldr	r3, [r7, #8]
 8018298:	4413      	add	r3, r2
 801829a:	2200      	movs	r2, #0
 801829c:	725a      	strb	r2, [r3, #9]
        
        /* Retrieve its UID and keep it Selected*/
        ret = rfalSt25tbPollerSelect( chipId );
 801829e:	7d3b      	ldrb	r3, [r7, #20]
 80182a0:	4618      	mov	r0, r3
 80182a2:	f7ff ff75 	bl	8018190 <rfalSt25tbPollerSelect>
 80182a6:	4603      	mov	r3, r0
 80182a8:	82fb      	strh	r3, [r7, #22]
        
        if( ERR_NONE == ret )
 80182aa:	8afb      	ldrh	r3, [r7, #22]
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d10f      	bne.n	80182d0 <rfalSt25tbPollerCollisionResolution+0xa0>
        {
            ret = rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	781b      	ldrb	r3, [r3, #0]
 80182b4:	461a      	mov	r2, r3
 80182b6:	4613      	mov	r3, r2
 80182b8:	009b      	lsls	r3, r3, #2
 80182ba:	4413      	add	r3, r2
 80182bc:	005b      	lsls	r3, r3, #1
 80182be:	461a      	mov	r2, r3
 80182c0:	68bb      	ldr	r3, [r7, #8]
 80182c2:	4413      	add	r3, r2
 80182c4:	3301      	adds	r3, #1
 80182c6:	4618      	mov	r0, r3
 80182c8:	f7ff ff8e 	bl	80181e8 <rfalSt25tbPollerGetUID>
 80182cc:	4603      	mov	r3, r0
 80182ce:	82fb      	strh	r3, [r7, #22]
        }
        
        if( ERR_NONE == ret )
 80182d0:	8afb      	ldrh	r3, [r7, #22]
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d105      	bne.n	80182e2 <rfalSt25tbPollerCollisionResolution+0xb2>
        {
            (*devCnt)++;
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	781b      	ldrb	r3, [r3, #0]
 80182da:	3301      	adds	r3, #1
 80182dc:	b2da      	uxtb	r2, r3
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	701a      	strb	r2, [r3, #0]
        }
    }
    /* Always proceed to Pcall16 anticollision as phase differences of tags can lead to no tag recognized, even if there is one */
    if( *devCnt < devLimit )
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	781b      	ldrb	r3, [r3, #0]
 80182e6:	7bfa      	ldrb	r2, [r7, #15]
 80182e8:	429a      	cmp	r2, r3
 80182ea:	d90f      	bls.n	801830c <rfalSt25tbPollerCollisionResolution+0xdc>
    {
        /* Multiple device responses */
        do
        {
            detected = rfalSt25tbPollerDoCollisionResolution( devLimit, st25tbDevList, devCnt );
 80182ec:	7bfb      	ldrb	r3, [r7, #15]
 80182ee:	687a      	ldr	r2, [r7, #4]
 80182f0:	68b9      	ldr	r1, [r7, #8]
 80182f2:	4618      	mov	r0, r3
 80182f4:	f7ff fe16 	bl	8017f24 <rfalSt25tbPollerDoCollisionResolution>
 80182f8:	4603      	mov	r3, r0
 80182fa:	757b      	strb	r3, [r7, #21]
        }
        while( (detected == true) && (*devCnt < devLimit) );
 80182fc:	7d7b      	ldrb	r3, [r7, #21]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d004      	beq.n	801830c <rfalSt25tbPollerCollisionResolution+0xdc>
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	781b      	ldrb	r3, [r3, #0]
 8018306:	7bfa      	ldrb	r2, [r7, #15]
 8018308:	429a      	cmp	r2, r3
 801830a:	d8ef      	bhi.n	80182ec <rfalSt25tbPollerCollisionResolution+0xbc>
    }

    return ERR_NONE;
 801830c:	2300      	movs	r3, #0
}
 801830e:	4618      	mov	r0, r3
 8018310:	3718      	adds	r7, #24
 8018312:	46bd      	mov	sp, r7
 8018314:	bd80      	pop	{r7, pc}

08018316 <rfalST25xVPollerM24LRReadSingleBlock>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRReadSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8018316:	b580      	push	{r7, lr}
 8018318:	b08c      	sub	sp, #48	; 0x30
 801831a:	af06      	add	r7, sp, #24
 801831c:	60b9      	str	r1, [r7, #8]
 801831e:	607b      	str	r3, [r7, #4]
 8018320:	4603      	mov	r3, r0
 8018322:	73fb      	strb	r3, [r7, #15]
 8018324:	4613      	mov	r3, r2
 8018326:	81bb      	strh	r3, [r7, #12]
    uint8_t data[RFAL_NFCV_BLOCKNUM_M24LR_LEN];
    uint8_t dataLen;
    
    dataLen = 0;
 8018328:	2300      	movs	r3, #0
 801832a:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;         /* Set M24LR Block Number (16 bits) LSB */
 801832c:	7dfb      	ldrb	r3, [r7, #23]
 801832e:	1c5a      	adds	r2, r3, #1
 8018330:	75fa      	strb	r2, [r7, #23]
 8018332:	89ba      	ldrh	r2, [r7, #12]
 8018334:	b2d2      	uxtb	r2, r2
 8018336:	3318      	adds	r3, #24
 8018338:	443b      	add	r3, r7
 801833a:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = (uint8_t)(blockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 801833e:	89bb      	ldrh	r3, [r7, #12]
 8018340:	0a1b      	lsrs	r3, r3, #8
 8018342:	b29a      	uxth	r2, r3
 8018344:	7dfb      	ldrb	r3, [r7, #23]
 8018346:	1c59      	adds	r1, r3, #1
 8018348:	75f9      	strb	r1, [r7, #23]
 801834a:	b2d2      	uxtb	r2, r2
 801834c:	3318      	adds	r3, #24
 801834e:	443b      	add	r3, r7
 8018350:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8018354:	7bfb      	ldrb	r3, [r7, #15]
 8018356:	f043 0308 	orr.w	r3, r3, #8
 801835a:	b2d9      	uxtb	r1, r3
 801835c:	7dfb      	ldrb	r3, [r7, #23]
 801835e:	b29b      	uxth	r3, r3
 8018360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018362:	9204      	str	r2, [sp, #16]
 8018364:	8c3a      	ldrh	r2, [r7, #32]
 8018366:	9203      	str	r2, [sp, #12]
 8018368:	687a      	ldr	r2, [r7, #4]
 801836a:	9202      	str	r2, [sp, #8]
 801836c:	9301      	str	r3, [sp, #4]
 801836e:	f107 0314 	add.w	r3, r7, #20
 8018372:	9300      	str	r3, [sp, #0]
 8018374:	68bb      	ldr	r3, [r7, #8]
 8018376:	2200      	movs	r2, #0
 8018378:	2020      	movs	r0, #32
 801837a:	f7fc fdf1 	bl	8014f60 <rfalNfcvPollerTransceiveReq>
 801837e:	4603      	mov	r3, r0
}
 8018380:	4618      	mov	r0, r3
 8018382:	3718      	adds	r7, #24
 8018384:	46bd      	mov	sp, r7
 8018386:	bd80      	pop	{r7, pc}

08018388 <rfalST25xVPollerM24LRWriteSingleBlock>:

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 8018388:	b580      	push	{r7, lr}
 801838a:	b09e      	sub	sp, #120	; 0x78
 801838c:	af06      	add	r7, sp, #24
 801838e:	60b9      	str	r1, [r7, #8]
 8018390:	607b      	str	r3, [r7, #4]
 8018392:	4603      	mov	r3, r0
 8018394:	73fb      	strb	r3, [r7, #15]
 8018396:	4613      	mov	r3, r2
 8018398:	81bb      	strh	r3, [r7, #12]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) || (wrData == NULL) )
 801839a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d006      	beq.n	80183b0 <rfalST25xVPollerM24LRWriteSingleBlock+0x28>
 80183a2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80183a6:	2b20      	cmp	r3, #32
 80183a8:	d802      	bhi.n	80183b0 <rfalST25xVPollerM24LRWriteSingleBlock+0x28>
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d101      	bne.n	80183b4 <rfalST25xVPollerM24LRWriteSingleBlock+0x2c>
    {
        return ERR_PARAM;
 80183b0:	2307      	movs	r3, #7
 80183b2:	e045      	b.n	8018440 <rfalST25xVPollerM24LRWriteSingleBlock+0xb8>
    }
    
    dataLen = 0U;
 80183b4:	2300      	movs	r3, #0
 80183b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;         /* Set M24LR Block Number (16 bits) LSB */
 80183ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80183be:	1c5a      	adds	r2, r3, #1
 80183c0:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 80183c4:	89ba      	ldrh	r2, [r7, #12]
 80183c6:	b2d2      	uxtb	r2, r2
 80183c8:	3360      	adds	r3, #96	; 0x60
 80183ca:	443b      	add	r3, r7
 80183cc:	f803 2c24 	strb.w	r2, [r3, #-36]
    data[dataLen++] = (uint8_t)(blockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 80183d0:	89bb      	ldrh	r3, [r7, #12]
 80183d2:	0a1b      	lsrs	r3, r3, #8
 80183d4:	b29a      	uxth	r2, r3
 80183d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80183da:	1c59      	adds	r1, r3, #1
 80183dc:	f887 105f 	strb.w	r1, [r7, #95]	; 0x5f
 80183e0:	b2d2      	uxtb	r2, r2
 80183e2:	3360      	adds	r3, #96	; 0x60
 80183e4:	443b      	add	r3, r7
 80183e6:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen ); /* Append Block data to write       */
 80183ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80183ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80183f2:	4413      	add	r3, r2
 80183f4:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80183f8:	6879      	ldr	r1, [r7, #4]
 80183fa:	4618      	mov	r0, r3
 80183fc:	f000 fc88 	bl	8018d10 <memcpy>
    dataLen += blockLen;
 8018400:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8018404:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8018408:	4413      	add	r3, r2
 801840a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 801840e:	7bfb      	ldrb	r3, [r7, #15]
 8018410:	f043 0308 	orr.w	r3, r3, #8
 8018414:	b2d9      	uxtb	r1, r3
 8018416:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801841a:	b29b      	uxth	r3, r3
 801841c:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 8018420:	9204      	str	r2, [sp, #16]
 8018422:	222a      	movs	r2, #42	; 0x2a
 8018424:	9203      	str	r2, [sp, #12]
 8018426:	f107 0210 	add.w	r2, r7, #16
 801842a:	9202      	str	r2, [sp, #8]
 801842c:	9301      	str	r3, [sp, #4]
 801842e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018432:	9300      	str	r3, [sp, #0]
 8018434:	68bb      	ldr	r3, [r7, #8]
 8018436:	2200      	movs	r2, #0
 8018438:	2021      	movs	r0, #33	; 0x21
 801843a:	f7fc fd91 	bl	8014f60 <rfalNfcvPollerTransceiveReq>
 801843e:	4603      	mov	r3, r0
}
 8018440:	4618      	mov	r0, r3
 8018442:	3760      	adds	r7, #96	; 0x60
 8018444:	46bd      	mov	sp, r7
 8018446:	bd80      	pop	{r7, pc}

08018448 <rfalST25xVPollerM24LRReadMultipleBlocks>:

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint16_t firstBlockNum, uint8_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8018448:	b580      	push	{r7, lr}
 801844a:	b08a      	sub	sp, #40	; 0x28
 801844c:	af06      	add	r7, sp, #24
 801844e:	6039      	str	r1, [r7, #0]
 8018450:	4611      	mov	r1, r2
 8018452:	461a      	mov	r2, r3
 8018454:	4603      	mov	r3, r0
 8018456:	71fb      	strb	r3, [r7, #7]
 8018458:	460b      	mov	r3, r1
 801845a:	80bb      	strh	r3, [r7, #4]
 801845c:	4613      	mov	r3, r2
 801845e:	71bb      	strb	r3, [r7, #6]
    uint8_t data[(RFAL_NFCV_BLOCKNUM_M24LR_LEN + RFAL_NFCV_BLOCKNUM_M24LR_LEN)];
    uint8_t dataLen;
    
    dataLen = 0U;
 8018460:	2300      	movs	r3, #0
 8018462:	73fb      	strb	r3, [r7, #15]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)firstBlockNum;         /* Set M24LR Block Number (16 bits) LSB */
 8018464:	7bfb      	ldrb	r3, [r7, #15]
 8018466:	1c5a      	adds	r2, r3, #1
 8018468:	73fa      	strb	r2, [r7, #15]
 801846a:	88ba      	ldrh	r2, [r7, #4]
 801846c:	b2d2      	uxtb	r2, r2
 801846e:	3310      	adds	r3, #16
 8018470:	443b      	add	r3, r7
 8018472:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)(firstBlockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 8018476:	88bb      	ldrh	r3, [r7, #4]
 8018478:	0a1b      	lsrs	r3, r3, #8
 801847a:	b29a      	uxth	r2, r3
 801847c:	7bfb      	ldrb	r3, [r7, #15]
 801847e:	1c59      	adds	r1, r3, #1
 8018480:	73f9      	strb	r1, [r7, #15]
 8018482:	b2d2      	uxtb	r2, r2
 8018484:	3310      	adds	r3, #16
 8018486:	443b      	add	r3, r7
 8018488:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = numOfBlocks;                    /* Set number of blocks to read         */
 801848c:	7bfb      	ldrb	r3, [r7, #15]
 801848e:	1c5a      	adds	r2, r3, #1
 8018490:	73fa      	strb	r2, [r7, #15]
 8018492:	3310      	adds	r3, #16
 8018494:	443b      	add	r3, r7
 8018496:	79ba      	ldrb	r2, [r7, #6]
 8018498:	f803 2c08 	strb.w	r2, [r3, #-8]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_MULTIPLE_BLOCKS, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 801849c:	79fb      	ldrb	r3, [r7, #7]
 801849e:	f043 0308 	orr.w	r3, r3, #8
 80184a2:	b2d9      	uxtb	r1, r3
 80184a4:	7bfb      	ldrb	r3, [r7, #15]
 80184a6:	b29b      	uxth	r3, r3
 80184a8:	6a3a      	ldr	r2, [r7, #32]
 80184aa:	9204      	str	r2, [sp, #16]
 80184ac:	8bba      	ldrh	r2, [r7, #28]
 80184ae:	9203      	str	r2, [sp, #12]
 80184b0:	69ba      	ldr	r2, [r7, #24]
 80184b2:	9202      	str	r2, [sp, #8]
 80184b4:	9301      	str	r3, [sp, #4]
 80184b6:	f107 0308 	add.w	r3, r7, #8
 80184ba:	9300      	str	r3, [sp, #0]
 80184bc:	683b      	ldr	r3, [r7, #0]
 80184be:	2200      	movs	r2, #0
 80184c0:	2023      	movs	r0, #35	; 0x23
 80184c2:	f7fc fd4d 	bl	8014f60 <rfalNfcvPollerTransceiveReq>
 80184c6:	4603      	mov	r3, r0
}
 80184c8:	4618      	mov	r0, r3
 80184ca:	3710      	adds	r7, #16
 80184cc:	46bd      	mov	sp, r7
 80184ce:	bd80      	pop	{r7, pc}

080184d0 <rfalT1TPollerInitialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode rfalT1TPollerInitialize( void )
{
 80184d0:	b580      	push	{r7, lr}
 80184d2:	b082      	sub	sp, #8
 80184d4:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 80184d6:	2200      	movs	r2, #0
 80184d8:	2100      	movs	r1, #0
 80184da:	2002      	movs	r0, #2
 80184dc:	f7fc fede 	bl	801529c <rfalSetMode>
 80184e0:	4603      	mov	r3, r0
 80184e2:	80fb      	strh	r3, [r7, #6]
 80184e4:	88fb      	ldrh	r3, [r7, #6]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d001      	beq.n	80184ee <rfalT1TPollerInitialize+0x1e>
 80184ea:	88fb      	ldrh	r3, [r7, #6]
 80184ec:	e00e      	b.n	801850c <rfalT1TPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 80184ee:	2001      	movs	r0, #1
 80184f0:	f7fd fa70 	bl	80159d4 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NONE );                          /* T1T should only be initialized after NFC-A mode, therefore the GT has been fulfilled */ 
 80184f4:	2000      	movs	r0, #0
 80184f6:	f7fd faa5 	bl	8015a44 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );    /* T1T uses NFC-A FDT Listen with n=9   Digital 1.1  10.7.2                             */
 80184fa:	f240 4094 	movw	r0, #1172	; 0x494
 80184fe:	f7fd fa8d 	bl	8015a1c <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_T1T_POLLER );
 8018502:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8018506:	f7fd fa75 	bl	80159f4 <rfalSetFDTPoll>
    
    return ERR_NONE;
 801850a:	2300      	movs	r3, #0
}
 801850c:	4618      	mov	r0, r3
 801850e:	3708      	adds	r7, #8
 8018510:	46bd      	mov	sp, r7
 8018512:	bd80      	pop	{r7, pc}

08018514 <rfalT1TPollerRid>:


/*******************************************************************************/
ReturnCode rfalT1TPollerRid( rfalT1TRidRes *ridRes )
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b08a      	sub	sp, #40	; 0x28
 8018518:	af04      	add	r7, sp, #16
 801851a:	6078      	str	r0, [r7, #4]
    ReturnCode     ret;
    rfalT1TRidReq  ridReq;
    uint16_t       rcvdLen;
    
    if( ridRes == NULL )
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d101      	bne.n	8018526 <rfalT1TPollerRid+0x12>
    {
        return ERR_PARAM;
 8018522:	2307      	movs	r3, #7
 8018524:	e02a      	b.n	801857c <rfalT1TPollerRid+0x68>
    }
    
    /* Compute RID command and set Undefined Values to 0x00    Digital 1.1 10.6.1 */
    ST_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 8018526:	f107 030c 	add.w	r3, r7, #12
 801852a:	2207      	movs	r2, #7
 801852c:	2100      	movs	r1, #0
 801852e:	4618      	mov	r0, r3
 8018530:	f000 fc16 	bl	8018d60 <memset>
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 8018534:	2378      	movs	r3, #120	; 0x78
 8018536:	733b      	strb	r3, [r7, #12]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&ridReq, sizeof(rfalT1TRidReq), (uint8_t*)ridRes, sizeof(rfalT1TRidRes), &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_T1T_DRD_READ ) );
 8018538:	f107 000c 	add.w	r0, r7, #12
 801853c:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8018540:	9302      	str	r3, [sp, #8]
 8018542:	2300      	movs	r3, #0
 8018544:	9301      	str	r3, [sp, #4]
 8018546:	f107 030a 	add.w	r3, r7, #10
 801854a:	9300      	str	r3, [sp, #0]
 801854c:	2306      	movs	r3, #6
 801854e:	687a      	ldr	r2, [r7, #4]
 8018550:	2107      	movs	r1, #7
 8018552:	f7fd fcd3 	bl	8015efc <rfalTransceiveBlockingTxRx>
 8018556:	4603      	mov	r3, r0
 8018558:	82fb      	strh	r3, [r7, #22]
 801855a:	8afb      	ldrh	r3, [r7, #22]
 801855c:	2b00      	cmp	r3, #0
 801855e:	d001      	beq.n	8018564 <rfalT1TPollerRid+0x50>
 8018560:	8afb      	ldrh	r3, [r7, #22]
 8018562:	e00b      	b.n	801857c <rfalT1TPollerRid+0x68>
    
    /* Check expected RID response length and the HR0   Digital 2.0 (Candidate) 11.6.2.1 */
    if( (rcvdLen != sizeof(rfalT1TRidRes)) || ((ridRes->hr0 & RFAL_T1T_RID_RES_HR0_MASK) != RFAL_T1T_RID_RES_HR0_VAL) )
 8018564:	897b      	ldrh	r3, [r7, #10]
 8018566:	2b06      	cmp	r3, #6
 8018568:	d105      	bne.n	8018576 <rfalT1TPollerRid+0x62>
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	781b      	ldrb	r3, [r3, #0]
 801856e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018572:	2b10      	cmp	r3, #16
 8018574:	d001      	beq.n	801857a <rfalT1TPollerRid+0x66>
    {
        return ERR_PROTO;
 8018576:	230b      	movs	r3, #11
 8018578:	e000      	b.n	801857c <rfalT1TPollerRid+0x68>
    }
    
    return ERR_NONE;
 801857a:	2300      	movs	r3, #0
}
 801857c:	4618      	mov	r0, r3
 801857e:	3718      	adds	r7, #24
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}

08018584 <rfalT2TPollerRead>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

 ReturnCode rfalT2TPollerRead( uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
 {
 8018584:	b580      	push	{r7, lr}
 8018586:	b08a      	sub	sp, #40	; 0x28
 8018588:	af04      	add	r7, sp, #16
 801858a:	60b9      	str	r1, [r7, #8]
 801858c:	607b      	str	r3, [r7, #4]
 801858e:	4603      	mov	r3, r0
 8018590:	73fb      	strb	r3, [r7, #15]
 8018592:	4613      	mov	r3, r2
 8018594:	81bb      	strh	r3, [r7, #12]
    ReturnCode      ret;
    rfalT2TReadReq  req;
     
    if( (rxBuf == NULL) || (rcvLen == NULL) )
 8018596:	68bb      	ldr	r3, [r7, #8]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d002      	beq.n	80185a2 <rfalT2TPollerRead+0x1e>
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d101      	bne.n	80185a6 <rfalT2TPollerRead+0x22>
    {
        return ERR_PARAM;
 80185a2:	2307      	movs	r3, #7
 80185a4:	e023      	b.n	80185ee <rfalT2TPollerRead+0x6a>
    }
    
    req.code = (uint8_t)RFAL_T2T_CMD_READ;
 80185a6:	2330      	movs	r3, #48	; 0x30
 80185a8:	753b      	strb	r3, [r7, #20]
    req.blNo = blockNum;
 80185aa:	7bfb      	ldrb	r3, [r7, #15]
 80185ac:	757b      	strb	r3, [r7, #21]
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TReadReq), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 80185ae:	89ba      	ldrh	r2, [r7, #12]
 80185b0:	f107 0014 	add.w	r0, r7, #20
 80185b4:	4b10      	ldr	r3, [pc, #64]	; (80185f8 <rfalT2TPollerRead+0x74>)
 80185b6:	9302      	str	r3, [sp, #8]
 80185b8:	2300      	movs	r3, #0
 80185ba:	9301      	str	r3, [sp, #4]
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	9300      	str	r3, [sp, #0]
 80185c0:	4613      	mov	r3, r2
 80185c2:	68ba      	ldr	r2, [r7, #8]
 80185c4:	2102      	movs	r1, #2
 80185c6:	f7fd fc99 	bl	8015efc <rfalTransceiveBlockingTxRx>
 80185ca:	4603      	mov	r3, r0
 80185cc:	82fb      	strh	r3, [r7, #22]
    
    /* T2T 1.0 5.2.1.7 The Reader/Writer SHALL treat a NACK in response to a READ Command as a Protocol Error */
    if( (ret == ERR_INCOMPLETE_BYTE) && (*rcvLen == RFAL_T2T_ACK_NACK_LEN) && ((*rxBuf & RFAL_T2T_ACK_MASK) != RFAL_T2T_ACK) )
 80185ce:	8afb      	ldrh	r3, [r7, #22]
 80185d0:	2b28      	cmp	r3, #40	; 0x28
 80185d2:	d10b      	bne.n	80185ec <rfalT2TPollerRead+0x68>
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	881b      	ldrh	r3, [r3, #0]
 80185d8:	2b01      	cmp	r3, #1
 80185da:	d107      	bne.n	80185ec <rfalT2TPollerRead+0x68>
 80185dc:	68bb      	ldr	r3, [r7, #8]
 80185de:	781b      	ldrb	r3, [r3, #0]
 80185e0:	f003 030f 	and.w	r3, r3, #15
 80185e4:	2b0a      	cmp	r3, #10
 80185e6:	d001      	beq.n	80185ec <rfalT2TPollerRead+0x68>
    {
        return ERR_PROTO;
 80185e8:	230b      	movs	r3, #11
 80185ea:	e000      	b.n	80185ee <rfalT2TPollerRead+0x6a>
    }
    return ret;
 80185ec:	8afb      	ldrh	r3, [r7, #22]
 }
 80185ee:	4618      	mov	r0, r3
 80185f0:	3718      	adds	r7, #24
 80185f2:	46bd      	mov	sp, r7
 80185f4:	bd80      	pop	{r7, pc}
 80185f6:	bf00      	nop
 80185f8:	000108d8 	.word	0x000108d8

080185fc <rfalT2TPollerWrite>:
 
 
 /*******************************************************************************/
 ReturnCode rfalT2TPollerWrite( uint8_t blockNum, const uint8_t* wrData )
 {
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b08a      	sub	sp, #40	; 0x28
 8018600:	af04      	add	r7, sp, #16
 8018602:	4603      	mov	r3, r0
 8018604:	6039      	str	r1, [r7, #0]
 8018606:	71fb      	strb	r3, [r7, #7]
    ReturnCode         ret;
    rfalT2TWriteReq    req;
    uint8_t            res;
    uint16_t           rxLen;
    
    req.code = (uint8_t)RFAL_T2T_CMD_WRITE;
 8018608:	23a2      	movs	r3, #162	; 0xa2
 801860a:	743b      	strb	r3, [r7, #16]
    req.blNo = blockNum;
 801860c:	79fb      	ldrb	r3, [r7, #7]
 801860e:	747b      	strb	r3, [r7, #17]
 8018610:	683b      	ldr	r3, [r7, #0]
 8018612:	681b      	ldr	r3, [r3, #0]
    ST_MEMCPY(req.data, wrData, RFAL_T2T_WRITE_DATA_LEN);
 8018614:	f8c7 3012 	str.w	r3, [r7, #18]
    
     
    /* Transceive WRITE Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TWriteReq), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 8018618:	f107 020f 	add.w	r2, r7, #15
 801861c:	f107 0010 	add.w	r0, r7, #16
 8018620:	4b11      	ldr	r3, [pc, #68]	; (8018668 <rfalT2TPollerWrite+0x6c>)
 8018622:	9302      	str	r3, [sp, #8]
 8018624:	2300      	movs	r3, #0
 8018626:	9301      	str	r3, [sp, #4]
 8018628:	f107 030c 	add.w	r3, r7, #12
 801862c:	9300      	str	r3, [sp, #0]
 801862e:	2301      	movs	r3, #1
 8018630:	2106      	movs	r1, #6
 8018632:	f7fd fc63 	bl	8015efc <rfalTransceiveBlockingTxRx>
 8018636:	4603      	mov	r3, r0
 8018638:	82fb      	strh	r3, [r7, #22]
    
    /* Check for a valid ACK */
    if( (ret == ERR_INCOMPLETE_BYTE) || (ret == ERR_NONE) )
 801863a:	8afb      	ldrh	r3, [r7, #22]
 801863c:	2b28      	cmp	r3, #40	; 0x28
 801863e:	d002      	beq.n	8018646 <rfalT2TPollerWrite+0x4a>
 8018640:	8afb      	ldrh	r3, [r7, #22]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d10b      	bne.n	801865e <rfalT2TPollerWrite+0x62>
    {
        ret = ERR_PROTO;
 8018646:	230b      	movs	r3, #11
 8018648:	82fb      	strh	r3, [r7, #22]
        
        if( (rxLen == RFAL_T2T_ACK_NACK_LEN) && ((res & RFAL_T2T_ACK_MASK) == RFAL_T2T_ACK) )
 801864a:	89bb      	ldrh	r3, [r7, #12]
 801864c:	2b01      	cmp	r3, #1
 801864e:	d106      	bne.n	801865e <rfalT2TPollerWrite+0x62>
 8018650:	7bfb      	ldrb	r3, [r7, #15]
 8018652:	f003 030f 	and.w	r3, r3, #15
 8018656:	2b0a      	cmp	r3, #10
 8018658:	d101      	bne.n	801865e <rfalT2TPollerWrite+0x62>
        {
            ret = ERR_NONE;
 801865a:	2300      	movs	r3, #0
 801865c:	82fb      	strh	r3, [r7, #22]
        }
    }
    
    return ret;
 801865e:	8afb      	ldrh	r3, [r7, #22]
 }
 8018660:	4618      	mov	r0, r3
 8018662:	3718      	adds	r7, #24
 8018664:	46bd      	mov	sp, r7
 8018666:	bd80      	pop	{r7, pc}
 8018668:	000108d8 	.word	0x000108d8

0801866c <rfalT2TPollerSectorSelect>:

 
 /*******************************************************************************/
 ReturnCode rfalT2TPollerSectorSelect( uint8_t sectorNum )
 {
 801866c:	b580      	push	{r7, lr}
 801866e:	b08a      	sub	sp, #40	; 0x28
 8018670:	af04      	add	r7, sp, #16
 8018672:	4603      	mov	r3, r0
 8018674:	71fb      	strb	r3, [r7, #7]
    uint8_t                  res;
    uint16_t                 rxLen;
    
    
    /* Compute SECTOR SELECT Packet 1  */
    p1Req.code  = (uint8_t)RFAL_T2T_CMD_SECTOR_SELECT;
 8018676:	23c2      	movs	r3, #194	; 0xc2
 8018678:	753b      	strb	r3, [r7, #20]
    p1Req.byte2 = RFAL_T2T_SECTOR_SELECT_P1_BYTE2;
 801867a:	23ff      	movs	r3, #255	; 0xff
 801867c:	757b      	strb	r3, [r7, #21]
    
    /* Transceive SECTOR SELECT Packet 1 */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&p1Req, sizeof(rfalT2TSectorSelectP1Req), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_SL_MAX );
 801867e:	f107 020f 	add.w	r2, r7, #15
 8018682:	f107 0014 	add.w	r0, r7, #20
 8018686:	f243 43f8 	movw	r3, #13560	; 0x34f8
 801868a:	9302      	str	r3, [sp, #8]
 801868c:	2300      	movs	r3, #0
 801868e:	9301      	str	r3, [sp, #4]
 8018690:	f107 030c 	add.w	r3, r7, #12
 8018694:	9300      	str	r3, [sp, #0]
 8018696:	2301      	movs	r3, #1
 8018698:	2102      	movs	r1, #2
 801869a:	f7fd fc2f 	bl	8015efc <rfalTransceiveBlockingTxRx>
 801869e:	4603      	mov	r3, r0
 80186a0:	82fb      	strh	r3, [r7, #22]
    
    /* Check and report any transmission error */
    if( (ret != ERR_INCOMPLETE_BYTE) && (ret != ERR_NONE) )
 80186a2:	8afb      	ldrh	r3, [r7, #22]
 80186a4:	2b28      	cmp	r3, #40	; 0x28
 80186a6:	d004      	beq.n	80186b2 <rfalT2TPollerSectorSelect+0x46>
 80186a8:	8afb      	ldrh	r3, [r7, #22]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d001      	beq.n	80186b2 <rfalT2TPollerSectorSelect+0x46>
    {
        return ret;
 80186ae:	8afb      	ldrh	r3, [r7, #22]
 80186b0:	e036      	b.n	8018720 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    /* Ensure that an ACK was received */
    if( (ret != ERR_INCOMPLETE_BYTE) || (rxLen != RFAL_T2T_ACK_NACK_LEN) || ((res & RFAL_T2T_ACK_MASK) != RFAL_T2T_ACK) )
 80186b2:	8afb      	ldrh	r3, [r7, #22]
 80186b4:	2b28      	cmp	r3, #40	; 0x28
 80186b6:	d107      	bne.n	80186c8 <rfalT2TPollerSectorSelect+0x5c>
 80186b8:	89bb      	ldrh	r3, [r7, #12]
 80186ba:	2b01      	cmp	r3, #1
 80186bc:	d104      	bne.n	80186c8 <rfalT2TPollerSectorSelect+0x5c>
 80186be:	7bfb      	ldrb	r3, [r7, #15]
 80186c0:	f003 030f 	and.w	r3, r3, #15
 80186c4:	2b0a      	cmp	r3, #10
 80186c6:	d001      	beq.n	80186cc <rfalT2TPollerSectorSelect+0x60>
    {
        return ERR_PROTO;
 80186c8:	230b      	movs	r3, #11
 80186ca:	e029      	b.n	8018720 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    
    /* Compute SECTOR SELECT Packet 2  */
    p2Req.secNo  = sectorNum;
 80186cc:	79fb      	ldrb	r3, [r7, #7]
 80186ce:	743b      	strb	r3, [r7, #16]
    ST_MEMSET( &p2Req.rfu, 0x00, RFAL_T2T_SECTOR_SELECT_P2_RFU_LEN );
 80186d0:	f107 0310 	add.w	r3, r7, #16
 80186d4:	3301      	adds	r3, #1
 80186d6:	2203      	movs	r2, #3
 80186d8:	2100      	movs	r1, #0
 80186da:	4618      	mov	r0, r3
 80186dc:	f000 fb40 	bl	8018d60 <memset>
    
    
    /* Transceive SECTOR SELECT Packet 2 */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&p2Req, sizeof(rfalT2TSectorSelectP2Req), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_SL_MAX );
 80186e0:	f107 020f 	add.w	r2, r7, #15
 80186e4:	f107 0010 	add.w	r0, r7, #16
 80186e8:	f243 43f8 	movw	r3, #13560	; 0x34f8
 80186ec:	9302      	str	r3, [sp, #8]
 80186ee:	2300      	movs	r3, #0
 80186f0:	9301      	str	r3, [sp, #4]
 80186f2:	f107 030c 	add.w	r3, r7, #12
 80186f6:	9300      	str	r3, [sp, #0]
 80186f8:	2301      	movs	r3, #1
 80186fa:	2104      	movs	r1, #4
 80186fc:	f7fd fbfe 	bl	8015efc <rfalTransceiveBlockingTxRx>
 8018700:	4603      	mov	r3, r0
 8018702:	82fb      	strh	r3, [r7, #22]
    
    /* T2T 1.0 5.4.1.14 The Reader/Writer SHALL treat any response received before the end of PATT2T,SL,MAX as a Protocol Error */
    if( (ret == ERR_NONE) || (ret == ERR_INCOMPLETE_BYTE) )
 8018704:	8afb      	ldrh	r3, [r7, #22]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d002      	beq.n	8018710 <rfalT2TPollerSectorSelect+0xa4>
 801870a:	8afb      	ldrh	r3, [r7, #22]
 801870c:	2b28      	cmp	r3, #40	; 0x28
 801870e:	d101      	bne.n	8018714 <rfalT2TPollerSectorSelect+0xa8>
    {
        return ERR_PROTO;
 8018710:	230b      	movs	r3, #11
 8018712:	e005      	b.n	8018720 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    /* T2T 1.0 5.4.1.13 The Reader/Writer SHALL treat the transmission of the SECTOR SELECT Command Packet 2 as being successful when it receives no response until PATT2T,SL,MAX. */ 
    if( ret == ERR_TIMEOUT )
 8018714:	8afb      	ldrh	r3, [r7, #22]
 8018716:	2b04      	cmp	r3, #4
 8018718:	d101      	bne.n	801871e <rfalT2TPollerSectorSelect+0xb2>
    {
        return ERR_NONE;
 801871a:	2300      	movs	r3, #0
 801871c:	e000      	b.n	8018720 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    return ret;
 801871e:	8afb      	ldrh	r3, [r7, #22]
 }
 8018720:	4618      	mov	r0, r3
 8018722:	3718      	adds	r7, #24
 8018724:	46bd      	mov	sp, r7
 8018726:	bd80      	pop	{r7, pc}

08018728 <rfalT4TPollerComposeCAPDU>:
 ******************************************************************************
 */

/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeCAPDU( rfalT4tCApduParam *apduParam )
{
 8018728:	b580      	push	{r7, lr}
 801872a:	b084      	sub	sp, #16
 801872c:	af00      	add	r7, sp, #0
 801872e:	6078      	str	r0, [r7, #4]
    uint8_t                  hdrLen;
    uint16_t                 msgIt;
    
    if( (apduParam == NULL) || (apduParam->cApduBuf == NULL) || (apduParam->cApduLen == NULL) )
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d007      	beq.n	8018746 <rfalT4TPollerComposeCAPDU+0x1e>
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	689b      	ldr	r3, [r3, #8]
 801873a:	2b00      	cmp	r3, #0
 801873c:	d003      	beq.n	8018746 <rfalT4TPollerComposeCAPDU+0x1e>
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	68db      	ldr	r3, [r3, #12]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d101      	bne.n	801874a <rfalT4TPollerComposeCAPDU+0x22>
    {
        return ERR_PARAM;
 8018746:	2307      	movs	r3, #7
 8018748:	e085      	b.n	8018856 <rfalT4TPollerComposeCAPDU+0x12e>
    }
    
    msgIt                  = 0;
 801874a:	2300      	movs	r3, #0
 801874c:	81fb      	strh	r3, [r7, #14]
    *(apduParam->cApduLen) = 0;
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	68db      	ldr	r3, [r3, #12]
 8018752:	2200      	movs	r2, #0
 8018754:	801a      	strh	r2, [r3, #0]
    
    /*******************************************************************************/
    /* Compute Command-APDU  according to the format   T4T 1.0 5.1.2 & ISO7816-4 2013 Table 1 */
    
    /* Check if Data is present */
    if( apduParam->LcFlag )
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	795b      	ldrb	r3, [r3, #5]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d026      	beq.n	80187ac <rfalT4TPollerComposeCAPDU+0x84>
    {
        if( apduParam->Lc == 0U )
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	791b      	ldrb	r3, [r3, #4]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d101      	bne.n	801876a <rfalT4TPollerComposeCAPDU+0x42>
        {
            /* Extented field coding not supported */
            return ERR_PARAM;
 8018766:	2307      	movs	r3, #7
 8018768:	e075      	b.n	8018856 <rfalT4TPollerComposeCAPDU+0x12e>
        {
            return ERR_PARAM; /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
        }
        
        /* Calculate the header length a place the data/body where it should be */
        hdrLen = RFAL_T4T_MAX_CAPDU_PROLOGUE_LEN + RFAL_T4T_LC_LEN;
 801876a:	2305      	movs	r3, #5
 801876c:	737b      	strb	r3, [r7, #13]
        
        /* make sure not to exceed buffer size */
        if( ((uint16_t)hdrLen + (uint16_t)apduParam->Lc + (apduParam->LeFlag ? RFAL_T4T_LC_LEN : 0U)) > RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 801876e:	7b7b      	ldrb	r3, [r7, #13]
 8018770:	687a      	ldr	r2, [r7, #4]
 8018772:	7912      	ldrb	r2, [r2, #4]
 8018774:	4413      	add	r3, r2
 8018776:	461a      	mov	r2, r3
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	79db      	ldrb	r3, [r3, #7]
 801877c:	2b00      	cmp	r3, #0
 801877e:	d001      	beq.n	8018784 <rfalT4TPollerComposeCAPDU+0x5c>
 8018780:	2301      	movs	r3, #1
 8018782:	e000      	b.n	8018786 <rfalT4TPollerComposeCAPDU+0x5e>
 8018784:	2300      	movs	r3, #0
 8018786:	4413      	add	r3, r2
 8018788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801878c:	d901      	bls.n	8018792 <rfalT4TPollerComposeCAPDU+0x6a>
        {
            return ERR_NOMEM; /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset */ 
 801878e:	2301      	movs	r3, #1
 8018790:	e061      	b.n	8018856 <rfalT4TPollerComposeCAPDU+0x12e>
        }
        ST_MEMMOVE( &apduParam->cApduBuf->apdu[hdrLen], apduParam->cApduBuf->apdu, apduParam->Lc );
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	689a      	ldr	r2, [r3, #8]
 8018796:	7b7b      	ldrb	r3, [r7, #13]
 8018798:	4413      	add	r3, r2
 801879a:	1cd8      	adds	r0, r3, #3
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	689b      	ldr	r3, [r3, #8]
 80187a0:	1cd9      	adds	r1, r3, #3
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	791b      	ldrb	r3, [r3, #4]
 80187a6:	461a      	mov	r2, r3
 80187a8:	f000 fac0 	bl	8018d2c <memmove>
    }
    
    /* Prepend the ADPDU's header */
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->CLA;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	689a      	ldr	r2, [r3, #8]
 80187b0:	89fb      	ldrh	r3, [r7, #14]
 80187b2:	1c59      	adds	r1, r3, #1
 80187b4:	81f9      	strh	r1, [r7, #14]
 80187b6:	4618      	mov	r0, r3
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	7819      	ldrb	r1, [r3, #0]
 80187bc:	1813      	adds	r3, r2, r0
 80187be:	460a      	mov	r2, r1
 80187c0:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->INS;
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	689a      	ldr	r2, [r3, #8]
 80187c6:	89fb      	ldrh	r3, [r7, #14]
 80187c8:	1c59      	adds	r1, r3, #1
 80187ca:	81f9      	strh	r1, [r7, #14]
 80187cc:	4618      	mov	r0, r3
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	7859      	ldrb	r1, [r3, #1]
 80187d2:	1813      	adds	r3, r2, r0
 80187d4:	460a      	mov	r2, r1
 80187d6:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->P1;
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	689a      	ldr	r2, [r3, #8]
 80187dc:	89fb      	ldrh	r3, [r7, #14]
 80187de:	1c59      	adds	r1, r3, #1
 80187e0:	81f9      	strh	r1, [r7, #14]
 80187e2:	4618      	mov	r0, r3
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	7899      	ldrb	r1, [r3, #2]
 80187e8:	1813      	adds	r3, r2, r0
 80187ea:	460a      	mov	r2, r1
 80187ec:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->P2;
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	689a      	ldr	r2, [r3, #8]
 80187f2:	89fb      	ldrh	r3, [r7, #14]
 80187f4:	1c59      	adds	r1, r3, #1
 80187f6:	81f9      	strh	r1, [r7, #14]
 80187f8:	4618      	mov	r0, r3
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	78d9      	ldrb	r1, [r3, #3]
 80187fe:	1813      	adds	r3, r2, r0
 8018800:	460a      	mov	r2, r1
 8018802:	70da      	strb	r2, [r3, #3]
    
    
    /* Check if Data field length is to be added */
    if( apduParam->LcFlag )
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	795b      	ldrb	r3, [r3, #5]
 8018808:	2b00      	cmp	r3, #0
 801880a:	d010      	beq.n	801882e <rfalT4TPollerComposeCAPDU+0x106>
    {
        apduParam->cApduBuf->apdu[msgIt++] = apduParam->Lc;
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	689a      	ldr	r2, [r3, #8]
 8018810:	89fb      	ldrh	r3, [r7, #14]
 8018812:	1c59      	adds	r1, r3, #1
 8018814:	81f9      	strh	r1, [r7, #14]
 8018816:	4618      	mov	r0, r3
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	7919      	ldrb	r1, [r3, #4]
 801881c:	1813      	adds	r3, r2, r0
 801881e:	460a      	mov	r2, r1
 8018820:	70da      	strb	r2, [r3, #3]
        msgIt += apduParam->Lc;
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	791b      	ldrb	r3, [r3, #4]
 8018826:	b29a      	uxth	r2, r3
 8018828:	89fb      	ldrh	r3, [r7, #14]
 801882a:	4413      	add	r3, r2
 801882c:	81fb      	strh	r3, [r7, #14]
    }
    
    /* Check if Expected Response Length is to be added */
    if( apduParam->LeFlag )
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	79db      	ldrb	r3, [r3, #7]
 8018832:	2b00      	cmp	r3, #0
 8018834:	d00a      	beq.n	801884c <rfalT4TPollerComposeCAPDU+0x124>
    {
        apduParam->cApduBuf->apdu[msgIt++] = apduParam->Le;
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	689a      	ldr	r2, [r3, #8]
 801883a:	89fb      	ldrh	r3, [r7, #14]
 801883c:	1c59      	adds	r1, r3, #1
 801883e:	81f9      	strh	r1, [r7, #14]
 8018840:	4618      	mov	r0, r3
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	7999      	ldrb	r1, [r3, #6]
 8018846:	1813      	adds	r3, r2, r0
 8018848:	460a      	mov	r2, r1
 801884a:	70da      	strb	r2, [r3, #3]
    }
    
    *(apduParam->cApduLen) = msgIt;
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	68db      	ldr	r3, [r3, #12]
 8018850:	89fa      	ldrh	r2, [r7, #14]
 8018852:	801a      	strh	r2, [r3, #0]
    
    return ERR_NONE;
 8018854:	2300      	movs	r3, #0
}
 8018856:	4618      	mov	r0, r3
 8018858:	3710      	adds	r7, #16
 801885a:	46bd      	mov	sp, r7
 801885c:	bd80      	pop	{r7, pc}

0801885e <rfalT4TPollerParseRAPDU>:


/*******************************************************************************/
ReturnCode rfalT4TPollerParseRAPDU( rfalT4tRApduParam *apduParam )
{
 801885e:	b480      	push	{r7}
 8018860:	b083      	sub	sp, #12
 8018862:	af00      	add	r7, sp, #0
 8018864:	6078      	str	r0, [r7, #4]
    if( (apduParam == NULL) || (apduParam->rApduBuf == NULL) )
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d003      	beq.n	8018874 <rfalT4TPollerParseRAPDU+0x16>
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d101      	bne.n	8018878 <rfalT4TPollerParseRAPDU+0x1a>
    {
        return ERR_PARAM;
 8018874:	2307      	movs	r3, #7
 8018876:	e029      	b.n	80188cc <rfalT4TPollerParseRAPDU+0x6e>
    }
    
    if( apduParam->rcvdLen < RFAL_T4T_MAX_RAPDU_SW1SW2_LEN )
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	889b      	ldrh	r3, [r3, #4]
 801887c:	2b01      	cmp	r3, #1
 801887e:	d801      	bhi.n	8018884 <rfalT4TPollerParseRAPDU+0x26>
    {
        return ERR_PROTO;
 8018880:	230b      	movs	r3, #11
 8018882:	e023      	b.n	80188cc <rfalT4TPollerParseRAPDU+0x6e>
    }

    apduParam->rApduBodyLen = (apduParam->rcvdLen - (uint16_t)RFAL_T4T_MAX_RAPDU_SW1SW2_LEN);
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	889b      	ldrh	r3, [r3, #4]
 8018888:	3b02      	subs	r3, #2
 801888a:	b29a      	uxth	r2, r3
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	80da      	strh	r2, [r3, #6]
    apduParam->statusWord   = GETU16( &apduParam->rApduBuf->apdu[ apduParam->rApduBodyLen ] );
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	687a      	ldr	r2, [r7, #4]
 8018896:	88d2      	ldrh	r2, [r2, #6]
 8018898:	4413      	add	r3, r2
 801889a:	78db      	ldrb	r3, [r3, #3]
 801889c:	021b      	lsls	r3, r3, #8
 801889e:	b21a      	sxth	r2, r3
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	6879      	ldr	r1, [r7, #4]
 80188a6:	88c9      	ldrh	r1, [r1, #6]
 80188a8:	440b      	add	r3, r1
 80188aa:	3303      	adds	r3, #3
 80188ac:	3301      	adds	r3, #1
 80188ae:	781b      	ldrb	r3, [r3, #0]
 80188b0:	b21b      	sxth	r3, r3
 80188b2:	4313      	orrs	r3, r2
 80188b4:	b21b      	sxth	r3, r3
 80188b6:	b29a      	uxth	r2, r3
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	811a      	strh	r2, [r3, #8]

    /* Check SW1 SW2    T4T 1.0 5.1.3 NOTE */
    if( apduParam->statusWord == RFAL_T4T_ISO7816_STATUS_COMPLETE )
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	891b      	ldrh	r3, [r3, #8]
 80188c0:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 80188c4:	d101      	bne.n	80188ca <rfalT4TPollerParseRAPDU+0x6c>
    {
        return ERR_NONE;
 80188c6:	2300      	movs	r3, #0
 80188c8:	e000      	b.n	80188cc <rfalT4TPollerParseRAPDU+0x6e>
    }

    return ERR_REQUEST;
 80188ca:	2305      	movs	r3, #5
}
 80188cc:	4618      	mov	r0, r3
 80188ce:	370c      	adds	r7, #12
 80188d0:	46bd      	mov	sp, r7
 80188d2:	bc80      	pop	{r7}
 80188d4:	4770      	bx	lr

080188d6 <rfalT4TPollerComposeSelectAppl>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectAppl( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* aid, uint8_t aidLen, uint16_t *cApduLen )
{   
 80188d6:	b580      	push	{r7, lr}
 80188d8:	b088      	sub	sp, #32
 80188da:	af00      	add	r7, sp, #0
 80188dc:	60f8      	str	r0, [r7, #12]
 80188de:	60b9      	str	r1, [r7, #8]
 80188e0:	603b      	str	r3, [r7, #0]
 80188e2:	4613      	mov	r3, r2
 80188e4:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;

    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 00h  07h AID    00h */
    cAPDU.CLA      = RFAL_T4T_CLA;
 80188e6:	2300      	movs	r3, #0
 80188e8:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 80188ea:	23a4      	movs	r3, #164	; 0xa4
 80188ec:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_DF_NAME;
 80188ee:	2304      	movs	r3, #4
 80188f0:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_RETURN_FCI_TEMPLATE;
 80188f2:	2300      	movs	r3, #0
 80188f4:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = aidLen;
 80188f6:	79fb      	ldrb	r3, [r7, #7]
 80188f8:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 80188fa:	2300      	movs	r3, #0
 80188fc:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 80188fe:	2301      	movs	r3, #1
 8018900:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = true;
 8018902:	2301      	movs	r3, #1
 8018904:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801890a:	683b      	ldr	r3, [r7, #0]
 801890c:	61fb      	str	r3, [r7, #28]
    
    if( aidLen > 0U )
 801890e:	79fb      	ldrb	r3, [r7, #7]
 8018910:	2b00      	cmp	r3, #0
 8018912:	d006      	beq.n	8018922 <rfalT4TPollerComposeSelectAppl+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, aid, aidLen );
 8018914:	69bb      	ldr	r3, [r7, #24]
 8018916:	3303      	adds	r3, #3
 8018918:	79fa      	ldrb	r2, [r7, #7]
 801891a:	68b9      	ldr	r1, [r7, #8]
 801891c:	4618      	mov	r0, r3
 801891e:	f000 f9f7 	bl	8018d10 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 8018922:	f107 0310 	add.w	r3, r7, #16
 8018926:	4618      	mov	r0, r3
 8018928:	f7ff fefe 	bl	8018728 <rfalT4TPollerComposeCAPDU>
 801892c:	4603      	mov	r3, r0
}
 801892e:	4618      	mov	r0, r3
 8018930:	3720      	adds	r7, #32
 8018932:	46bd      	mov	sp, r7
 8018934:	bd80      	pop	{r7, pc}

08018936 <rfalT4TPollerComposeSelectFile>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectFile( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* fid, uint8_t fidLen, uint16_t *cApduLen )
{   
 8018936:	b580      	push	{r7, lr}
 8018938:	b088      	sub	sp, #32
 801893a:	af00      	add	r7, sp, #0
 801893c:	60f8      	str	r0, [r7, #12]
 801893e:	60b9      	str	r1, [r7, #8]
 8018940:	603b      	str	r3, [r7, #0]
 8018942:	4613      	mov	r3, r2
 8018944:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;

    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 0Ch  02h FID    -   */    
    cAPDU.CLA      = RFAL_T4T_CLA;
 8018946:	2300      	movs	r3, #0
 8018948:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 801894a:	23a4      	movs	r3, #164	; 0xa4
 801894c:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_FILEID;
 801894e:	2300      	movs	r3, #0
 8018950:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_NO_RESPONSE_DATA;
 8018952:	230c      	movs	r3, #12
 8018954:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = fidLen;
 8018956:	79fb      	ldrb	r3, [r7, #7]
 8018958:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 801895a:	2300      	movs	r3, #0
 801895c:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 801895e:	2301      	movs	r3, #1
 8018960:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 8018962:	2300      	movs	r3, #0
 8018964:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801896a:	683b      	ldr	r3, [r7, #0]
 801896c:	61fb      	str	r3, [r7, #28]
    
    if( fidLen > 0U )
 801896e:	79fb      	ldrb	r3, [r7, #7]
 8018970:	2b00      	cmp	r3, #0
 8018972:	d006      	beq.n	8018982 <rfalT4TPollerComposeSelectFile+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, fid, fidLen );
 8018974:	69bb      	ldr	r3, [r7, #24]
 8018976:	3303      	adds	r3, #3
 8018978:	79fa      	ldrb	r2, [r7, #7]
 801897a:	68b9      	ldr	r1, [r7, #8]
 801897c:	4618      	mov	r0, r3
 801897e:	f000 f9c7 	bl	8018d10 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 8018982:	f107 0310 	add.w	r3, r7, #16
 8018986:	4618      	mov	r0, r3
 8018988:	f7ff fece 	bl	8018728 <rfalT4TPollerComposeCAPDU>
 801898c:	4603      	mov	r3, r0
}
 801898e:	4618      	mov	r0, r3
 8018990:	3720      	adds	r7, #32
 8018992:	46bd      	mov	sp, r7
 8018994:	bd80      	pop	{r7, pc}

08018996 <rfalT4TPollerComposeSelectFileV1Mapping>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectFileV1Mapping( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* fid, uint8_t fidLen, uint16_t *cApduLen )
{   
 8018996:	b580      	push	{r7, lr}
 8018998:	b088      	sub	sp, #32
 801899a:	af00      	add	r7, sp, #0
 801899c:	60f8      	str	r0, [r7, #12]
 801899e:	60b9      	str	r1, [r7, #8]
 80189a0:	603b      	str	r3, [r7, #0]
 80189a2:	4613      	mov	r3, r2
 80189a4:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;
    
    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 00h  02h FID    -   */      
    cAPDU.CLA      = RFAL_T4T_CLA;
 80189a6:	2300      	movs	r3, #0
 80189a8:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 80189aa:	23a4      	movs	r3, #164	; 0xa4
 80189ac:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_FILEID;
 80189ae:	2300      	movs	r3, #0
 80189b0:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_RETURN_FCI_TEMPLATE;
 80189b2:	2300      	movs	r3, #0
 80189b4:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = fidLen;
 80189b6:	79fb      	ldrb	r3, [r7, #7]
 80189b8:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 80189ba:	2300      	movs	r3, #0
 80189bc:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 80189be:	2301      	movs	r3, #1
 80189c0:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 80189c2:	2300      	movs	r3, #0
 80189c4:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 80189ca:	683b      	ldr	r3, [r7, #0]
 80189cc:	61fb      	str	r3, [r7, #28]
    
    if( fidLen > 0U )
 80189ce:	79fb      	ldrb	r3, [r7, #7]
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d006      	beq.n	80189e2 <rfalT4TPollerComposeSelectFileV1Mapping+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, fid, fidLen );
 80189d4:	69bb      	ldr	r3, [r7, #24]
 80189d6:	3303      	adds	r3, #3
 80189d8:	79fa      	ldrb	r2, [r7, #7]
 80189da:	68b9      	ldr	r1, [r7, #8]
 80189dc:	4618      	mov	r0, r3
 80189de:	f000 f997 	bl	8018d10 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 80189e2:	f107 0310 	add.w	r3, r7, #16
 80189e6:	4618      	mov	r0, r3
 80189e8:	f7ff fe9e 	bl	8018728 <rfalT4TPollerComposeCAPDU>
 80189ec:	4603      	mov	r3, r0
}
 80189ee:	4618      	mov	r0, r3
 80189f0:	3720      	adds	r7, #32
 80189f2:	46bd      	mov	sp, r7
 80189f4:	bd80      	pop	{r7, pc}

080189f6 <rfalT4TPollerComposeReadData>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeReadData( rfalIsoDepApduBufFormat *cApduBuf, uint16_t offset, uint8_t expLen, uint16_t *cApduLen )
{    
 80189f6:	b580      	push	{r7, lr}
 80189f8:	b088      	sub	sp, #32
 80189fa:	af00      	add	r7, sp, #0
 80189fc:	60f8      	str	r0, [r7, #12]
 80189fe:	607b      	str	r3, [r7, #4]
 8018a00:	460b      	mov	r3, r1
 8018a02:	817b      	strh	r3, [r7, #10]
 8018a04:	4613      	mov	r3, r2
 8018a06:	727b      	strb	r3, [r7, #9]
    rfalT4tCApduParam cAPDU;
  
    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h B0h [Offset] -   -      len */     
    cAPDU.CLA      = RFAL_T4T_CLA;
 8018a08:	2300      	movs	r3, #0
 8018a0a:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_READBINARY;
 8018a0c:	23b0      	movs	r3, #176	; 0xb0
 8018a0e:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = (uint8_t)((offset >> 8U) & 0xFFU);
 8018a10:	897b      	ldrh	r3, [r7, #10]
 8018a12:	0a1b      	lsrs	r3, r3, #8
 8018a14:	b29b      	uxth	r3, r3
 8018a16:	b2db      	uxtb	r3, r3
 8018a18:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = (uint8_t)((offset >> 0U) & 0xFFU);
 8018a1a:	897b      	ldrh	r3, [r7, #10]
 8018a1c:	b2db      	uxtb	r3, r3
 8018a1e:	74fb      	strb	r3, [r7, #19]
    cAPDU.Le       = expLen;
 8018a20:	7a7b      	ldrb	r3, [r7, #9]
 8018a22:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = false;
 8018a24:	2300      	movs	r3, #0
 8018a26:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = true;
 8018a28:	2301      	movs	r3, #1
 8018a2a:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	61fb      	str	r3, [r7, #28]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 8018a34:	f107 0310 	add.w	r3, r7, #16
 8018a38:	4618      	mov	r0, r3
 8018a3a:	f7ff fe75 	bl	8018728 <rfalT4TPollerComposeCAPDU>
 8018a3e:	4603      	mov	r3, r0
}
 8018a40:	4618      	mov	r0, r3
 8018a42:	3720      	adds	r7, #32
 8018a44:	46bd      	mov	sp, r7
 8018a46:	bd80      	pop	{r7, pc}

08018a48 <rfalT4TPollerComposeReadDataODO>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeReadDataODO( rfalIsoDepApduBufFormat *cApduBuf, uint32_t offset, uint8_t expLen, uint16_t *cApduLen )
{    
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	b08a      	sub	sp, #40	; 0x28
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	60f8      	str	r0, [r7, #12]
 8018a50:	60b9      	str	r1, [r7, #8]
 8018a52:	603b      	str	r3, [r7, #0]
 8018a54:	4613      	mov	r3, r2
 8018a56:	71fb      	strb	r3, [r7, #7]
    uint8_t           dataIt;

    /* CLA INS P1  P2  Lc  Data         Le */
    /* 00h B1h 00h 00h Lc  54 03 xxyyzz len */
    /*                          [Offset]    */    
    cAPDU.CLA      = RFAL_T4T_CLA;
 8018a58:	2300      	movs	r3, #0
 8018a5a:	753b      	strb	r3, [r7, #20]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_READBINARY_ODO;
 8018a5c:	23b1      	movs	r3, #177	; 0xb1
 8018a5e:	757b      	strb	r3, [r7, #21]
    cAPDU.P1       = 0x00U;
 8018a60:	2300      	movs	r3, #0
 8018a62:	75bb      	strb	r3, [r7, #22]
    cAPDU.P2       = 0x00U;
 8018a64:	2300      	movs	r3, #0
 8018a66:	75fb      	strb	r3, [r7, #23]
    cAPDU.Le       = expLen;
 8018a68:	79fb      	ldrb	r3, [r7, #7]
 8018a6a:	76bb      	strb	r3, [r7, #26]
    cAPDU.LcFlag   = true;
 8018a6c:	2301      	movs	r3, #1
 8018a6e:	767b      	strb	r3, [r7, #25]
    cAPDU.LeFlag   = true;
 8018a70:	2301      	movs	r3, #1
 8018a72:	76fb      	strb	r3, [r7, #27]
    cAPDU.cApduBuf = cApduBuf;
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	61fb      	str	r3, [r7, #28]
    cAPDU.cApduLen = cApduLen;
 8018a78:	683b      	ldr	r3, [r7, #0]
 8018a7a:	623b      	str	r3, [r7, #32]
    
    dataIt = 0U;
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cApduBuf->apdu[dataIt++] = RFAL_T4T_OFFSET_DO;
 8018a82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a86:	1c5a      	adds	r2, r3, #1
 8018a88:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018a8c:	461a      	mov	r2, r3
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	4413      	add	r3, r2
 8018a92:	2254      	movs	r2, #84	; 0x54
 8018a94:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_LENGTH_DO;
 8018a96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a9a:	1c5a      	adds	r2, r3, #1
 8018a9c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018aa0:	461a      	mov	r2, r3
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	4413      	add	r3, r2
 8018aa6:	2203      	movs	r2, #3
 8018aa8:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 16U);
 8018aaa:	68bb      	ldr	r3, [r7, #8]
 8018aac:	0c1a      	lsrs	r2, r3, #16
 8018aae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ab2:	1c59      	adds	r1, r3, #1
 8018ab4:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8018ab8:	4619      	mov	r1, r3
 8018aba:	b2d2      	uxtb	r2, r2
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	440b      	add	r3, r1
 8018ac0:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 8U);
 8018ac2:	68bb      	ldr	r3, [r7, #8]
 8018ac4:	0a1a      	lsrs	r2, r3, #8
 8018ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018aca:	1c59      	adds	r1, r3, #1
 8018acc:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8018ad0:	4619      	mov	r1, r3
 8018ad2:	b2d2      	uxtb	r2, r2
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	440b      	add	r3, r1
 8018ad8:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset);
 8018ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ade:	1c5a      	adds	r2, r3, #1
 8018ae0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018ae4:	4619      	mov	r1, r3
 8018ae6:	68bb      	ldr	r3, [r7, #8]
 8018ae8:	b2da      	uxtb	r2, r3
 8018aea:	68fb      	ldr	r3, [r7, #12]
 8018aec:	440b      	add	r3, r1
 8018aee:	70da      	strb	r2, [r3, #3]
    cAPDU.Lc                 = dataIt;
 8018af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018af4:	763b      	strb	r3, [r7, #24]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 8018af6:	f107 0314 	add.w	r3, r7, #20
 8018afa:	4618      	mov	r0, r3
 8018afc:	f7ff fe14 	bl	8018728 <rfalT4TPollerComposeCAPDU>
 8018b00:	4603      	mov	r3, r0
}
 8018b02:	4618      	mov	r0, r3
 8018b04:	3728      	adds	r7, #40	; 0x28
 8018b06:	46bd      	mov	sp, r7
 8018b08:	bd80      	pop	{r7, pc}

08018b0a <rfalT4TPollerComposeWriteData>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeWriteData( rfalIsoDepApduBufFormat *cApduBuf, uint16_t offset, const uint8_t* data, uint8_t dataLen, uint16_t *cApduLen )
{    
 8018b0a:	b580      	push	{r7, lr}
 8018b0c:	b088      	sub	sp, #32
 8018b0e:	af00      	add	r7, sp, #0
 8018b10:	60f8      	str	r0, [r7, #12]
 8018b12:	607a      	str	r2, [r7, #4]
 8018b14:	461a      	mov	r2, r3
 8018b16:	460b      	mov	r3, r1
 8018b18:	817b      	strh	r3, [r7, #10]
 8018b1a:	4613      	mov	r3, r2
 8018b1c:	727b      	strb	r3, [r7, #9]
    rfalT4tCApduParam cAPDU;


    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h D6h [Offset] len Data   -   */         
    cAPDU.CLA      = RFAL_T4T_CLA;
 8018b1e:	2300      	movs	r3, #0
 8018b20:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_UPDATEBINARY;
 8018b22:	23d6      	movs	r3, #214	; 0xd6
 8018b24:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = (uint8_t)((offset >> 8U) & 0xFFU);
 8018b26:	897b      	ldrh	r3, [r7, #10]
 8018b28:	0a1b      	lsrs	r3, r3, #8
 8018b2a:	b29b      	uxth	r3, r3
 8018b2c:	b2db      	uxtb	r3, r3
 8018b2e:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = (uint8_t)((offset >> 0U) & 0xFFU);
 8018b30:	897b      	ldrh	r3, [r7, #10]
 8018b32:	b2db      	uxtb	r3, r3
 8018b34:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = dataLen;
 8018b36:	7a7b      	ldrb	r3, [r7, #9]
 8018b38:	753b      	strb	r3, [r7, #20]
    cAPDU.LcFlag   = true;
 8018b3a:	2301      	movs	r3, #1
 8018b3c:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 8018b3e:	2300      	movs	r3, #0
 8018b40:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 8018b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b48:	61fb      	str	r3, [r7, #28]
    
    if( dataLen > 0U )
 8018b4a:	7a7b      	ldrb	r3, [r7, #9]
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d006      	beq.n	8018b5e <rfalT4TPollerComposeWriteData+0x54>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, data, dataLen );
 8018b50:	69bb      	ldr	r3, [r7, #24]
 8018b52:	3303      	adds	r3, #3
 8018b54:	7a7a      	ldrb	r2, [r7, #9]
 8018b56:	6879      	ldr	r1, [r7, #4]
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f000 f8d9 	bl	8018d10 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 8018b5e:	f107 0310 	add.w	r3, r7, #16
 8018b62:	4618      	mov	r0, r3
 8018b64:	f7ff fde0 	bl	8018728 <rfalT4TPollerComposeCAPDU>
 8018b68:	4603      	mov	r3, r0
}
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	3720      	adds	r7, #32
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	bd80      	pop	{r7, pc}

08018b72 <rfalT4TPollerComposeWriteDataODO>:

/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeWriteDataODO( rfalIsoDepApduBufFormat *cApduBuf, uint32_t offset, const uint8_t* data, uint8_t dataLen, uint16_t *cApduLen )
{    
 8018b72:	b580      	push	{r7, lr}
 8018b74:	b08a      	sub	sp, #40	; 0x28
 8018b76:	af00      	add	r7, sp, #0
 8018b78:	60f8      	str	r0, [r7, #12]
 8018b7a:	60b9      	str	r1, [r7, #8]
 8018b7c:	607a      	str	r2, [r7, #4]
 8018b7e:	70fb      	strb	r3, [r7, #3]
    uint8_t           dataIt;
        
    /* CLA INS P1  P2   Lc  Data                     Le  */
    /* 00h D7h 00h 00h  len 54 03 xxyyzz 53 Ld data  -   */
    /*                           [offset]     [data]     */
    cAPDU.CLA      = RFAL_T4T_CLA;
 8018b80:	2300      	movs	r3, #0
 8018b82:	753b      	strb	r3, [r7, #20]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_UPDATEBINARY_ODO;
 8018b84:	23d7      	movs	r3, #215	; 0xd7
 8018b86:	757b      	strb	r3, [r7, #21]
    cAPDU.P1       = 0x00U;
 8018b88:	2300      	movs	r3, #0
 8018b8a:	75bb      	strb	r3, [r7, #22]
    cAPDU.P2       = 0x00U;
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	75fb      	strb	r3, [r7, #23]
    cAPDU.LcFlag   = true;
 8018b90:	2301      	movs	r3, #1
 8018b92:	767b      	strb	r3, [r7, #25]
    cAPDU.LeFlag   = false;
 8018b94:	2300      	movs	r3, #0
 8018b96:	76fb      	strb	r3, [r7, #27]
    cAPDU.cApduBuf = cApduBuf;
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	61fb      	str	r3, [r7, #28]
    cAPDU.cApduLen = cApduLen;
 8018b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b9e:	623b      	str	r3, [r7, #32]
        
    dataIt = 0U;
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cApduBuf->apdu[dataIt++] = RFAL_T4T_OFFSET_DO;
 8018ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018baa:	1c5a      	adds	r2, r3, #1
 8018bac:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018bb0:	461a      	mov	r2, r3
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	4413      	add	r3, r2
 8018bb6:	2254      	movs	r2, #84	; 0x54
 8018bb8:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_LENGTH_DO;
 8018bba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bbe:	1c5a      	adds	r2, r3, #1
 8018bc0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018bc4:	461a      	mov	r2, r3
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	4413      	add	r3, r2
 8018bca:	2203      	movs	r2, #3
 8018bcc:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 16U);
 8018bce:	68bb      	ldr	r3, [r7, #8]
 8018bd0:	0c1a      	lsrs	r2, r3, #16
 8018bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bd6:	1c59      	adds	r1, r3, #1
 8018bd8:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8018bdc:	4619      	mov	r1, r3
 8018bde:	b2d2      	uxtb	r2, r2
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	440b      	add	r3, r1
 8018be4:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 8U);
 8018be6:	68bb      	ldr	r3, [r7, #8]
 8018be8:	0a1a      	lsrs	r2, r3, #8
 8018bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bee:	1c59      	adds	r1, r3, #1
 8018bf0:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8018bf4:	4619      	mov	r1, r3
 8018bf6:	b2d2      	uxtb	r2, r2
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	440b      	add	r3, r1
 8018bfc:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset);
 8018bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c02:	1c5a      	adds	r2, r3, #1
 8018c04:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018c08:	4619      	mov	r1, r3
 8018c0a:	68bb      	ldr	r3, [r7, #8]
 8018c0c:	b2da      	uxtb	r2, r3
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	440b      	add	r3, r1
 8018c12:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_DATA_DO;
 8018c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c18:	1c5a      	adds	r2, r3, #1
 8018c1a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018c1e:	461a      	mov	r2, r3
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	4413      	add	r3, r2
 8018c24:	2253      	movs	r2, #83	; 0x53
 8018c26:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = dataLen;
 8018c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c2c:	1c5a      	adds	r2, r3, #1
 8018c2e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8018c32:	461a      	mov	r2, r3
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	4413      	add	r3, r2
 8018c38:	78fa      	ldrb	r2, [r7, #3]
 8018c3a:	70da      	strb	r2, [r3, #3]
    
    if( (((uint32_t)dataLen + (uint32_t)dataIt) >= RFAL_T4T_MAX_LC) ||  (((uint32_t)dataLen + (uint32_t)dataIt) >= RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN) )
 8018c3c:	78fa      	ldrb	r2, [r7, #3]
 8018c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c42:	4413      	add	r3, r2
 8018c44:	2bfe      	cmp	r3, #254	; 0xfe
 8018c46:	d806      	bhi.n	8018c56 <rfalT4TPollerComposeWriteDataODO+0xe4>
 8018c48:	78fa      	ldrb	r2, [r7, #3]
 8018c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c4e:	4413      	add	r3, r2
 8018c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018c54:	d301      	bcc.n	8018c5a <rfalT4TPollerComposeWriteDataODO+0xe8>
    {
        return (ERR_NOMEM);
 8018c56:	2301      	movs	r3, #1
 8018c58:	e01b      	b.n	8018c92 <rfalT4TPollerComposeWriteDataODO+0x120>
    }
    
    if( dataLen > 0U )
 8018c5a:	78fb      	ldrb	r3, [r7, #3]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d009      	beq.n	8018c74 <rfalT4TPollerComposeWriteDataODO+0x102>
    {
        ST_MEMCPY( &cAPDU.cApduBuf->apdu[dataIt], data, dataLen );
 8018c60:	69fa      	ldr	r2, [r7, #28]
 8018c62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c66:	4413      	add	r3, r2
 8018c68:	3303      	adds	r3, #3
 8018c6a:	78fa      	ldrb	r2, [r7, #3]
 8018c6c:	6879      	ldr	r1, [r7, #4]
 8018c6e:	4618      	mov	r0, r3
 8018c70:	f000 f84e 	bl	8018d10 <memcpy>
    }
    dataIt += dataLen;
 8018c74:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018c78:	78fb      	ldrb	r3, [r7, #3]
 8018c7a:	4413      	add	r3, r2
 8018c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cAPDU.Lc = dataIt;
 8018c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c84:	763b      	strb	r3, [r7, #24]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 8018c86:	f107 0314 	add.w	r3, r7, #20
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	f7ff fd4c 	bl	8018728 <rfalT4TPollerComposeCAPDU>
 8018c90:	4603      	mov	r3, r0
}
 8018c92:	4618      	mov	r0, r3
 8018c94:	3728      	adds	r7, #40	; 0x28
 8018c96:	46bd      	mov	sp, r7
 8018c98:	bd80      	pop	{r7, pc}
	...

08018c9c <__errno>:
 8018c9c:	4b01      	ldr	r3, [pc, #4]	; (8018ca4 <__errno+0x8>)
 8018c9e:	6818      	ldr	r0, [r3, #0]
 8018ca0:	4770      	bx	lr
 8018ca2:	bf00      	nop
 8018ca4:	20000110 	.word	0x20000110

08018ca8 <__libc_init_array>:
 8018ca8:	b570      	push	{r4, r5, r6, lr}
 8018caa:	2600      	movs	r6, #0
 8018cac:	4d0c      	ldr	r5, [pc, #48]	; (8018ce0 <__libc_init_array+0x38>)
 8018cae:	4c0d      	ldr	r4, [pc, #52]	; (8018ce4 <__libc_init_array+0x3c>)
 8018cb0:	1b64      	subs	r4, r4, r5
 8018cb2:	10a4      	asrs	r4, r4, #2
 8018cb4:	42a6      	cmp	r6, r4
 8018cb6:	d109      	bne.n	8018ccc <__libc_init_array+0x24>
 8018cb8:	f000 fcc6 	bl	8019648 <_init>
 8018cbc:	2600      	movs	r6, #0
 8018cbe:	4d0a      	ldr	r5, [pc, #40]	; (8018ce8 <__libc_init_array+0x40>)
 8018cc0:	4c0a      	ldr	r4, [pc, #40]	; (8018cec <__libc_init_array+0x44>)
 8018cc2:	1b64      	subs	r4, r4, r5
 8018cc4:	10a4      	asrs	r4, r4, #2
 8018cc6:	42a6      	cmp	r6, r4
 8018cc8:	d105      	bne.n	8018cd6 <__libc_init_array+0x2e>
 8018cca:	bd70      	pop	{r4, r5, r6, pc}
 8018ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8018cd0:	4798      	blx	r3
 8018cd2:	3601      	adds	r6, #1
 8018cd4:	e7ee      	b.n	8018cb4 <__libc_init_array+0xc>
 8018cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8018cda:	4798      	blx	r3
 8018cdc:	3601      	adds	r6, #1
 8018cde:	e7f2      	b.n	8018cc6 <__libc_init_array+0x1e>
 8018ce0:	0801b07c 	.word	0x0801b07c
 8018ce4:	0801b07c 	.word	0x0801b07c
 8018ce8:	0801b07c 	.word	0x0801b07c
 8018cec:	0801b080 	.word	0x0801b080

08018cf0 <memcmp>:
 8018cf0:	b510      	push	{r4, lr}
 8018cf2:	3901      	subs	r1, #1
 8018cf4:	4402      	add	r2, r0
 8018cf6:	4290      	cmp	r0, r2
 8018cf8:	d101      	bne.n	8018cfe <memcmp+0xe>
 8018cfa:	2000      	movs	r0, #0
 8018cfc:	e005      	b.n	8018d0a <memcmp+0x1a>
 8018cfe:	7803      	ldrb	r3, [r0, #0]
 8018d00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018d04:	42a3      	cmp	r3, r4
 8018d06:	d001      	beq.n	8018d0c <memcmp+0x1c>
 8018d08:	1b18      	subs	r0, r3, r4
 8018d0a:	bd10      	pop	{r4, pc}
 8018d0c:	3001      	adds	r0, #1
 8018d0e:	e7f2      	b.n	8018cf6 <memcmp+0x6>

08018d10 <memcpy>:
 8018d10:	440a      	add	r2, r1
 8018d12:	4291      	cmp	r1, r2
 8018d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8018d18:	d100      	bne.n	8018d1c <memcpy+0xc>
 8018d1a:	4770      	bx	lr
 8018d1c:	b510      	push	{r4, lr}
 8018d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d22:	4291      	cmp	r1, r2
 8018d24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018d28:	d1f9      	bne.n	8018d1e <memcpy+0xe>
 8018d2a:	bd10      	pop	{r4, pc}

08018d2c <memmove>:
 8018d2c:	4288      	cmp	r0, r1
 8018d2e:	b510      	push	{r4, lr}
 8018d30:	eb01 0402 	add.w	r4, r1, r2
 8018d34:	d902      	bls.n	8018d3c <memmove+0x10>
 8018d36:	4284      	cmp	r4, r0
 8018d38:	4623      	mov	r3, r4
 8018d3a:	d807      	bhi.n	8018d4c <memmove+0x20>
 8018d3c:	1e43      	subs	r3, r0, #1
 8018d3e:	42a1      	cmp	r1, r4
 8018d40:	d008      	beq.n	8018d54 <memmove+0x28>
 8018d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018d46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018d4a:	e7f8      	b.n	8018d3e <memmove+0x12>
 8018d4c:	4601      	mov	r1, r0
 8018d4e:	4402      	add	r2, r0
 8018d50:	428a      	cmp	r2, r1
 8018d52:	d100      	bne.n	8018d56 <memmove+0x2a>
 8018d54:	bd10      	pop	{r4, pc}
 8018d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018d5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018d5e:	e7f7      	b.n	8018d50 <memmove+0x24>

08018d60 <memset>:
 8018d60:	4603      	mov	r3, r0
 8018d62:	4402      	add	r2, r0
 8018d64:	4293      	cmp	r3, r2
 8018d66:	d100      	bne.n	8018d6a <memset+0xa>
 8018d68:	4770      	bx	lr
 8018d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8018d6e:	e7f9      	b.n	8018d64 <memset+0x4>

08018d70 <_vsniprintf_r>:
 8018d70:	b530      	push	{r4, r5, lr}
 8018d72:	4614      	mov	r4, r2
 8018d74:	2c00      	cmp	r4, #0
 8018d76:	4605      	mov	r5, r0
 8018d78:	461a      	mov	r2, r3
 8018d7a:	b09b      	sub	sp, #108	; 0x6c
 8018d7c:	da05      	bge.n	8018d8a <_vsniprintf_r+0x1a>
 8018d7e:	238b      	movs	r3, #139	; 0x8b
 8018d80:	6003      	str	r3, [r0, #0]
 8018d82:	f04f 30ff 	mov.w	r0, #4294967295
 8018d86:	b01b      	add	sp, #108	; 0x6c
 8018d88:	bd30      	pop	{r4, r5, pc}
 8018d8a:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018d8e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018d92:	bf0c      	ite	eq
 8018d94:	4623      	moveq	r3, r4
 8018d96:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018d9a:	9302      	str	r3, [sp, #8]
 8018d9c:	9305      	str	r3, [sp, #20]
 8018d9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018da2:	9100      	str	r1, [sp, #0]
 8018da4:	9104      	str	r1, [sp, #16]
 8018da6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018daa:	4669      	mov	r1, sp
 8018dac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018dae:	f000 f875 	bl	8018e9c <_svfiprintf_r>
 8018db2:	1c43      	adds	r3, r0, #1
 8018db4:	bfbc      	itt	lt
 8018db6:	238b      	movlt	r3, #139	; 0x8b
 8018db8:	602b      	strlt	r3, [r5, #0]
 8018dba:	2c00      	cmp	r4, #0
 8018dbc:	d0e3      	beq.n	8018d86 <_vsniprintf_r+0x16>
 8018dbe:	2200      	movs	r2, #0
 8018dc0:	9b00      	ldr	r3, [sp, #0]
 8018dc2:	701a      	strb	r2, [r3, #0]
 8018dc4:	e7df      	b.n	8018d86 <_vsniprintf_r+0x16>
	...

08018dc8 <vsniprintf>:
 8018dc8:	b507      	push	{r0, r1, r2, lr}
 8018dca:	9300      	str	r3, [sp, #0]
 8018dcc:	4613      	mov	r3, r2
 8018dce:	460a      	mov	r2, r1
 8018dd0:	4601      	mov	r1, r0
 8018dd2:	4803      	ldr	r0, [pc, #12]	; (8018de0 <vsniprintf+0x18>)
 8018dd4:	6800      	ldr	r0, [r0, #0]
 8018dd6:	f7ff ffcb 	bl	8018d70 <_vsniprintf_r>
 8018dda:	b003      	add	sp, #12
 8018ddc:	f85d fb04 	ldr.w	pc, [sp], #4
 8018de0:	20000110 	.word	0x20000110

08018de4 <__ssputs_r>:
 8018de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018de8:	688e      	ldr	r6, [r1, #8]
 8018dea:	4682      	mov	sl, r0
 8018dec:	429e      	cmp	r6, r3
 8018dee:	460c      	mov	r4, r1
 8018df0:	4690      	mov	r8, r2
 8018df2:	461f      	mov	r7, r3
 8018df4:	d838      	bhi.n	8018e68 <__ssputs_r+0x84>
 8018df6:	898a      	ldrh	r2, [r1, #12]
 8018df8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018dfc:	d032      	beq.n	8018e64 <__ssputs_r+0x80>
 8018dfe:	6825      	ldr	r5, [r4, #0]
 8018e00:	6909      	ldr	r1, [r1, #16]
 8018e02:	3301      	adds	r3, #1
 8018e04:	eba5 0901 	sub.w	r9, r5, r1
 8018e08:	6965      	ldr	r5, [r4, #20]
 8018e0a:	444b      	add	r3, r9
 8018e0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018e14:	106d      	asrs	r5, r5, #1
 8018e16:	429d      	cmp	r5, r3
 8018e18:	bf38      	it	cc
 8018e1a:	461d      	movcc	r5, r3
 8018e1c:	0553      	lsls	r3, r2, #21
 8018e1e:	d531      	bpl.n	8018e84 <__ssputs_r+0xa0>
 8018e20:	4629      	mov	r1, r5
 8018e22:	f000 fb47 	bl	80194b4 <_malloc_r>
 8018e26:	4606      	mov	r6, r0
 8018e28:	b950      	cbnz	r0, 8018e40 <__ssputs_r+0x5c>
 8018e2a:	230c      	movs	r3, #12
 8018e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8018e30:	f8ca 3000 	str.w	r3, [sl]
 8018e34:	89a3      	ldrh	r3, [r4, #12]
 8018e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e3a:	81a3      	strh	r3, [r4, #12]
 8018e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e40:	464a      	mov	r2, r9
 8018e42:	6921      	ldr	r1, [r4, #16]
 8018e44:	f7ff ff64 	bl	8018d10 <memcpy>
 8018e48:	89a3      	ldrh	r3, [r4, #12]
 8018e4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018e52:	81a3      	strh	r3, [r4, #12]
 8018e54:	6126      	str	r6, [r4, #16]
 8018e56:	444e      	add	r6, r9
 8018e58:	6026      	str	r6, [r4, #0]
 8018e5a:	463e      	mov	r6, r7
 8018e5c:	6165      	str	r5, [r4, #20]
 8018e5e:	eba5 0509 	sub.w	r5, r5, r9
 8018e62:	60a5      	str	r5, [r4, #8]
 8018e64:	42be      	cmp	r6, r7
 8018e66:	d900      	bls.n	8018e6a <__ssputs_r+0x86>
 8018e68:	463e      	mov	r6, r7
 8018e6a:	4632      	mov	r2, r6
 8018e6c:	4641      	mov	r1, r8
 8018e6e:	6820      	ldr	r0, [r4, #0]
 8018e70:	f7ff ff5c 	bl	8018d2c <memmove>
 8018e74:	68a3      	ldr	r3, [r4, #8]
 8018e76:	2000      	movs	r0, #0
 8018e78:	1b9b      	subs	r3, r3, r6
 8018e7a:	60a3      	str	r3, [r4, #8]
 8018e7c:	6823      	ldr	r3, [r4, #0]
 8018e7e:	4433      	add	r3, r6
 8018e80:	6023      	str	r3, [r4, #0]
 8018e82:	e7db      	b.n	8018e3c <__ssputs_r+0x58>
 8018e84:	462a      	mov	r2, r5
 8018e86:	f000 fb89 	bl	801959c <_realloc_r>
 8018e8a:	4606      	mov	r6, r0
 8018e8c:	2800      	cmp	r0, #0
 8018e8e:	d1e1      	bne.n	8018e54 <__ssputs_r+0x70>
 8018e90:	4650      	mov	r0, sl
 8018e92:	6921      	ldr	r1, [r4, #16]
 8018e94:	f000 faa6 	bl	80193e4 <_free_r>
 8018e98:	e7c7      	b.n	8018e2a <__ssputs_r+0x46>
	...

08018e9c <_svfiprintf_r>:
 8018e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ea0:	4698      	mov	r8, r3
 8018ea2:	898b      	ldrh	r3, [r1, #12]
 8018ea4:	4607      	mov	r7, r0
 8018ea6:	061b      	lsls	r3, r3, #24
 8018ea8:	460d      	mov	r5, r1
 8018eaa:	4614      	mov	r4, r2
 8018eac:	b09d      	sub	sp, #116	; 0x74
 8018eae:	d50e      	bpl.n	8018ece <_svfiprintf_r+0x32>
 8018eb0:	690b      	ldr	r3, [r1, #16]
 8018eb2:	b963      	cbnz	r3, 8018ece <_svfiprintf_r+0x32>
 8018eb4:	2140      	movs	r1, #64	; 0x40
 8018eb6:	f000 fafd 	bl	80194b4 <_malloc_r>
 8018eba:	6028      	str	r0, [r5, #0]
 8018ebc:	6128      	str	r0, [r5, #16]
 8018ebe:	b920      	cbnz	r0, 8018eca <_svfiprintf_r+0x2e>
 8018ec0:	230c      	movs	r3, #12
 8018ec2:	603b      	str	r3, [r7, #0]
 8018ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8018ec8:	e0d1      	b.n	801906e <_svfiprintf_r+0x1d2>
 8018eca:	2340      	movs	r3, #64	; 0x40
 8018ecc:	616b      	str	r3, [r5, #20]
 8018ece:	2300      	movs	r3, #0
 8018ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8018ed2:	2320      	movs	r3, #32
 8018ed4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018ed8:	2330      	movs	r3, #48	; 0x30
 8018eda:	f04f 0901 	mov.w	r9, #1
 8018ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8018ee2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019088 <_svfiprintf_r+0x1ec>
 8018ee6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018eea:	4623      	mov	r3, r4
 8018eec:	469a      	mov	sl, r3
 8018eee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ef2:	b10a      	cbz	r2, 8018ef8 <_svfiprintf_r+0x5c>
 8018ef4:	2a25      	cmp	r2, #37	; 0x25
 8018ef6:	d1f9      	bne.n	8018eec <_svfiprintf_r+0x50>
 8018ef8:	ebba 0b04 	subs.w	fp, sl, r4
 8018efc:	d00b      	beq.n	8018f16 <_svfiprintf_r+0x7a>
 8018efe:	465b      	mov	r3, fp
 8018f00:	4622      	mov	r2, r4
 8018f02:	4629      	mov	r1, r5
 8018f04:	4638      	mov	r0, r7
 8018f06:	f7ff ff6d 	bl	8018de4 <__ssputs_r>
 8018f0a:	3001      	adds	r0, #1
 8018f0c:	f000 80aa 	beq.w	8019064 <_svfiprintf_r+0x1c8>
 8018f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018f12:	445a      	add	r2, fp
 8018f14:	9209      	str	r2, [sp, #36]	; 0x24
 8018f16:	f89a 3000 	ldrb.w	r3, [sl]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	f000 80a2 	beq.w	8019064 <_svfiprintf_r+0x1c8>
 8018f20:	2300      	movs	r3, #0
 8018f22:	f04f 32ff 	mov.w	r2, #4294967295
 8018f26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f2a:	f10a 0a01 	add.w	sl, sl, #1
 8018f2e:	9304      	str	r3, [sp, #16]
 8018f30:	9307      	str	r3, [sp, #28]
 8018f32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018f36:	931a      	str	r3, [sp, #104]	; 0x68
 8018f38:	4654      	mov	r4, sl
 8018f3a:	2205      	movs	r2, #5
 8018f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f40:	4851      	ldr	r0, [pc, #324]	; (8019088 <_svfiprintf_r+0x1ec>)
 8018f42:	f000 fa41 	bl	80193c8 <memchr>
 8018f46:	9a04      	ldr	r2, [sp, #16]
 8018f48:	b9d8      	cbnz	r0, 8018f82 <_svfiprintf_r+0xe6>
 8018f4a:	06d0      	lsls	r0, r2, #27
 8018f4c:	bf44      	itt	mi
 8018f4e:	2320      	movmi	r3, #32
 8018f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018f54:	0711      	lsls	r1, r2, #28
 8018f56:	bf44      	itt	mi
 8018f58:	232b      	movmi	r3, #43	; 0x2b
 8018f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8018f62:	2b2a      	cmp	r3, #42	; 0x2a
 8018f64:	d015      	beq.n	8018f92 <_svfiprintf_r+0xf6>
 8018f66:	4654      	mov	r4, sl
 8018f68:	2000      	movs	r0, #0
 8018f6a:	f04f 0c0a 	mov.w	ip, #10
 8018f6e:	9a07      	ldr	r2, [sp, #28]
 8018f70:	4621      	mov	r1, r4
 8018f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f76:	3b30      	subs	r3, #48	; 0x30
 8018f78:	2b09      	cmp	r3, #9
 8018f7a:	d94e      	bls.n	801901a <_svfiprintf_r+0x17e>
 8018f7c:	b1b0      	cbz	r0, 8018fac <_svfiprintf_r+0x110>
 8018f7e:	9207      	str	r2, [sp, #28]
 8018f80:	e014      	b.n	8018fac <_svfiprintf_r+0x110>
 8018f82:	eba0 0308 	sub.w	r3, r0, r8
 8018f86:	fa09 f303 	lsl.w	r3, r9, r3
 8018f8a:	4313      	orrs	r3, r2
 8018f8c:	46a2      	mov	sl, r4
 8018f8e:	9304      	str	r3, [sp, #16]
 8018f90:	e7d2      	b.n	8018f38 <_svfiprintf_r+0x9c>
 8018f92:	9b03      	ldr	r3, [sp, #12]
 8018f94:	1d19      	adds	r1, r3, #4
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	9103      	str	r1, [sp, #12]
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	bfbb      	ittet	lt
 8018f9e:	425b      	neglt	r3, r3
 8018fa0:	f042 0202 	orrlt.w	r2, r2, #2
 8018fa4:	9307      	strge	r3, [sp, #28]
 8018fa6:	9307      	strlt	r3, [sp, #28]
 8018fa8:	bfb8      	it	lt
 8018faa:	9204      	strlt	r2, [sp, #16]
 8018fac:	7823      	ldrb	r3, [r4, #0]
 8018fae:	2b2e      	cmp	r3, #46	; 0x2e
 8018fb0:	d10c      	bne.n	8018fcc <_svfiprintf_r+0x130>
 8018fb2:	7863      	ldrb	r3, [r4, #1]
 8018fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8018fb6:	d135      	bne.n	8019024 <_svfiprintf_r+0x188>
 8018fb8:	9b03      	ldr	r3, [sp, #12]
 8018fba:	3402      	adds	r4, #2
 8018fbc:	1d1a      	adds	r2, r3, #4
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	9203      	str	r2, [sp, #12]
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	bfb8      	it	lt
 8018fc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8018fca:	9305      	str	r3, [sp, #20]
 8018fcc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801908c <_svfiprintf_r+0x1f0>
 8018fd0:	2203      	movs	r2, #3
 8018fd2:	4650      	mov	r0, sl
 8018fd4:	7821      	ldrb	r1, [r4, #0]
 8018fd6:	f000 f9f7 	bl	80193c8 <memchr>
 8018fda:	b140      	cbz	r0, 8018fee <_svfiprintf_r+0x152>
 8018fdc:	2340      	movs	r3, #64	; 0x40
 8018fde:	eba0 000a 	sub.w	r0, r0, sl
 8018fe2:	fa03 f000 	lsl.w	r0, r3, r0
 8018fe6:	9b04      	ldr	r3, [sp, #16]
 8018fe8:	3401      	adds	r4, #1
 8018fea:	4303      	orrs	r3, r0
 8018fec:	9304      	str	r3, [sp, #16]
 8018fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ff2:	2206      	movs	r2, #6
 8018ff4:	4826      	ldr	r0, [pc, #152]	; (8019090 <_svfiprintf_r+0x1f4>)
 8018ff6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018ffa:	f000 f9e5 	bl	80193c8 <memchr>
 8018ffe:	2800      	cmp	r0, #0
 8019000:	d038      	beq.n	8019074 <_svfiprintf_r+0x1d8>
 8019002:	4b24      	ldr	r3, [pc, #144]	; (8019094 <_svfiprintf_r+0x1f8>)
 8019004:	bb1b      	cbnz	r3, 801904e <_svfiprintf_r+0x1b2>
 8019006:	9b03      	ldr	r3, [sp, #12]
 8019008:	3307      	adds	r3, #7
 801900a:	f023 0307 	bic.w	r3, r3, #7
 801900e:	3308      	adds	r3, #8
 8019010:	9303      	str	r3, [sp, #12]
 8019012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019014:	4433      	add	r3, r6
 8019016:	9309      	str	r3, [sp, #36]	; 0x24
 8019018:	e767      	b.n	8018eea <_svfiprintf_r+0x4e>
 801901a:	460c      	mov	r4, r1
 801901c:	2001      	movs	r0, #1
 801901e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019022:	e7a5      	b.n	8018f70 <_svfiprintf_r+0xd4>
 8019024:	2300      	movs	r3, #0
 8019026:	f04f 0c0a 	mov.w	ip, #10
 801902a:	4619      	mov	r1, r3
 801902c:	3401      	adds	r4, #1
 801902e:	9305      	str	r3, [sp, #20]
 8019030:	4620      	mov	r0, r4
 8019032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019036:	3a30      	subs	r2, #48	; 0x30
 8019038:	2a09      	cmp	r2, #9
 801903a:	d903      	bls.n	8019044 <_svfiprintf_r+0x1a8>
 801903c:	2b00      	cmp	r3, #0
 801903e:	d0c5      	beq.n	8018fcc <_svfiprintf_r+0x130>
 8019040:	9105      	str	r1, [sp, #20]
 8019042:	e7c3      	b.n	8018fcc <_svfiprintf_r+0x130>
 8019044:	4604      	mov	r4, r0
 8019046:	2301      	movs	r3, #1
 8019048:	fb0c 2101 	mla	r1, ip, r1, r2
 801904c:	e7f0      	b.n	8019030 <_svfiprintf_r+0x194>
 801904e:	ab03      	add	r3, sp, #12
 8019050:	9300      	str	r3, [sp, #0]
 8019052:	462a      	mov	r2, r5
 8019054:	4638      	mov	r0, r7
 8019056:	4b10      	ldr	r3, [pc, #64]	; (8019098 <_svfiprintf_r+0x1fc>)
 8019058:	a904      	add	r1, sp, #16
 801905a:	f3af 8000 	nop.w
 801905e:	1c42      	adds	r2, r0, #1
 8019060:	4606      	mov	r6, r0
 8019062:	d1d6      	bne.n	8019012 <_svfiprintf_r+0x176>
 8019064:	89ab      	ldrh	r3, [r5, #12]
 8019066:	065b      	lsls	r3, r3, #25
 8019068:	f53f af2c 	bmi.w	8018ec4 <_svfiprintf_r+0x28>
 801906c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801906e:	b01d      	add	sp, #116	; 0x74
 8019070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019074:	ab03      	add	r3, sp, #12
 8019076:	9300      	str	r3, [sp, #0]
 8019078:	462a      	mov	r2, r5
 801907a:	4638      	mov	r0, r7
 801907c:	4b06      	ldr	r3, [pc, #24]	; (8019098 <_svfiprintf_r+0x1fc>)
 801907e:	a904      	add	r1, sp, #16
 8019080:	f000 f87c 	bl	801917c <_printf_i>
 8019084:	e7eb      	b.n	801905e <_svfiprintf_r+0x1c2>
 8019086:	bf00      	nop
 8019088:	0801b03e 	.word	0x0801b03e
 801908c:	0801b044 	.word	0x0801b044
 8019090:	0801b048 	.word	0x0801b048
 8019094:	00000000 	.word	0x00000000
 8019098:	08018de5 	.word	0x08018de5

0801909c <_printf_common>:
 801909c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190a0:	4616      	mov	r6, r2
 80190a2:	4699      	mov	r9, r3
 80190a4:	688a      	ldr	r2, [r1, #8]
 80190a6:	690b      	ldr	r3, [r1, #16]
 80190a8:	4607      	mov	r7, r0
 80190aa:	4293      	cmp	r3, r2
 80190ac:	bfb8      	it	lt
 80190ae:	4613      	movlt	r3, r2
 80190b0:	6033      	str	r3, [r6, #0]
 80190b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80190b6:	460c      	mov	r4, r1
 80190b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80190bc:	b10a      	cbz	r2, 80190c2 <_printf_common+0x26>
 80190be:	3301      	adds	r3, #1
 80190c0:	6033      	str	r3, [r6, #0]
 80190c2:	6823      	ldr	r3, [r4, #0]
 80190c4:	0699      	lsls	r1, r3, #26
 80190c6:	bf42      	ittt	mi
 80190c8:	6833      	ldrmi	r3, [r6, #0]
 80190ca:	3302      	addmi	r3, #2
 80190cc:	6033      	strmi	r3, [r6, #0]
 80190ce:	6825      	ldr	r5, [r4, #0]
 80190d0:	f015 0506 	ands.w	r5, r5, #6
 80190d4:	d106      	bne.n	80190e4 <_printf_common+0x48>
 80190d6:	f104 0a19 	add.w	sl, r4, #25
 80190da:	68e3      	ldr	r3, [r4, #12]
 80190dc:	6832      	ldr	r2, [r6, #0]
 80190de:	1a9b      	subs	r3, r3, r2
 80190e0:	42ab      	cmp	r3, r5
 80190e2:	dc28      	bgt.n	8019136 <_printf_common+0x9a>
 80190e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80190e8:	1e13      	subs	r3, r2, #0
 80190ea:	6822      	ldr	r2, [r4, #0]
 80190ec:	bf18      	it	ne
 80190ee:	2301      	movne	r3, #1
 80190f0:	0692      	lsls	r2, r2, #26
 80190f2:	d42d      	bmi.n	8019150 <_printf_common+0xb4>
 80190f4:	4649      	mov	r1, r9
 80190f6:	4638      	mov	r0, r7
 80190f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80190fc:	47c0      	blx	r8
 80190fe:	3001      	adds	r0, #1
 8019100:	d020      	beq.n	8019144 <_printf_common+0xa8>
 8019102:	6823      	ldr	r3, [r4, #0]
 8019104:	68e5      	ldr	r5, [r4, #12]
 8019106:	f003 0306 	and.w	r3, r3, #6
 801910a:	2b04      	cmp	r3, #4
 801910c:	bf18      	it	ne
 801910e:	2500      	movne	r5, #0
 8019110:	6832      	ldr	r2, [r6, #0]
 8019112:	f04f 0600 	mov.w	r6, #0
 8019116:	68a3      	ldr	r3, [r4, #8]
 8019118:	bf08      	it	eq
 801911a:	1aad      	subeq	r5, r5, r2
 801911c:	6922      	ldr	r2, [r4, #16]
 801911e:	bf08      	it	eq
 8019120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019124:	4293      	cmp	r3, r2
 8019126:	bfc4      	itt	gt
 8019128:	1a9b      	subgt	r3, r3, r2
 801912a:	18ed      	addgt	r5, r5, r3
 801912c:	341a      	adds	r4, #26
 801912e:	42b5      	cmp	r5, r6
 8019130:	d11a      	bne.n	8019168 <_printf_common+0xcc>
 8019132:	2000      	movs	r0, #0
 8019134:	e008      	b.n	8019148 <_printf_common+0xac>
 8019136:	2301      	movs	r3, #1
 8019138:	4652      	mov	r2, sl
 801913a:	4649      	mov	r1, r9
 801913c:	4638      	mov	r0, r7
 801913e:	47c0      	blx	r8
 8019140:	3001      	adds	r0, #1
 8019142:	d103      	bne.n	801914c <_printf_common+0xb0>
 8019144:	f04f 30ff 	mov.w	r0, #4294967295
 8019148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801914c:	3501      	adds	r5, #1
 801914e:	e7c4      	b.n	80190da <_printf_common+0x3e>
 8019150:	2030      	movs	r0, #48	; 0x30
 8019152:	18e1      	adds	r1, r4, r3
 8019154:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019158:	1c5a      	adds	r2, r3, #1
 801915a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801915e:	4422      	add	r2, r4
 8019160:	3302      	adds	r3, #2
 8019162:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019166:	e7c5      	b.n	80190f4 <_printf_common+0x58>
 8019168:	2301      	movs	r3, #1
 801916a:	4622      	mov	r2, r4
 801916c:	4649      	mov	r1, r9
 801916e:	4638      	mov	r0, r7
 8019170:	47c0      	blx	r8
 8019172:	3001      	adds	r0, #1
 8019174:	d0e6      	beq.n	8019144 <_printf_common+0xa8>
 8019176:	3601      	adds	r6, #1
 8019178:	e7d9      	b.n	801912e <_printf_common+0x92>
	...

0801917c <_printf_i>:
 801917c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019180:	7e0f      	ldrb	r7, [r1, #24]
 8019182:	4691      	mov	r9, r2
 8019184:	2f78      	cmp	r7, #120	; 0x78
 8019186:	4680      	mov	r8, r0
 8019188:	460c      	mov	r4, r1
 801918a:	469a      	mov	sl, r3
 801918c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801918e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019192:	d807      	bhi.n	80191a4 <_printf_i+0x28>
 8019194:	2f62      	cmp	r7, #98	; 0x62
 8019196:	d80a      	bhi.n	80191ae <_printf_i+0x32>
 8019198:	2f00      	cmp	r7, #0
 801919a:	f000 80d9 	beq.w	8019350 <_printf_i+0x1d4>
 801919e:	2f58      	cmp	r7, #88	; 0x58
 80191a0:	f000 80a4 	beq.w	80192ec <_printf_i+0x170>
 80191a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80191a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80191ac:	e03a      	b.n	8019224 <_printf_i+0xa8>
 80191ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80191b2:	2b15      	cmp	r3, #21
 80191b4:	d8f6      	bhi.n	80191a4 <_printf_i+0x28>
 80191b6:	a101      	add	r1, pc, #4	; (adr r1, 80191bc <_printf_i+0x40>)
 80191b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80191bc:	08019215 	.word	0x08019215
 80191c0:	08019229 	.word	0x08019229
 80191c4:	080191a5 	.word	0x080191a5
 80191c8:	080191a5 	.word	0x080191a5
 80191cc:	080191a5 	.word	0x080191a5
 80191d0:	080191a5 	.word	0x080191a5
 80191d4:	08019229 	.word	0x08019229
 80191d8:	080191a5 	.word	0x080191a5
 80191dc:	080191a5 	.word	0x080191a5
 80191e0:	080191a5 	.word	0x080191a5
 80191e4:	080191a5 	.word	0x080191a5
 80191e8:	08019337 	.word	0x08019337
 80191ec:	08019259 	.word	0x08019259
 80191f0:	08019319 	.word	0x08019319
 80191f4:	080191a5 	.word	0x080191a5
 80191f8:	080191a5 	.word	0x080191a5
 80191fc:	08019359 	.word	0x08019359
 8019200:	080191a5 	.word	0x080191a5
 8019204:	08019259 	.word	0x08019259
 8019208:	080191a5 	.word	0x080191a5
 801920c:	080191a5 	.word	0x080191a5
 8019210:	08019321 	.word	0x08019321
 8019214:	682b      	ldr	r3, [r5, #0]
 8019216:	1d1a      	adds	r2, r3, #4
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	602a      	str	r2, [r5, #0]
 801921c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019224:	2301      	movs	r3, #1
 8019226:	e0a4      	b.n	8019372 <_printf_i+0x1f6>
 8019228:	6820      	ldr	r0, [r4, #0]
 801922a:	6829      	ldr	r1, [r5, #0]
 801922c:	0606      	lsls	r6, r0, #24
 801922e:	f101 0304 	add.w	r3, r1, #4
 8019232:	d50a      	bpl.n	801924a <_printf_i+0xce>
 8019234:	680e      	ldr	r6, [r1, #0]
 8019236:	602b      	str	r3, [r5, #0]
 8019238:	2e00      	cmp	r6, #0
 801923a:	da03      	bge.n	8019244 <_printf_i+0xc8>
 801923c:	232d      	movs	r3, #45	; 0x2d
 801923e:	4276      	negs	r6, r6
 8019240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019244:	230a      	movs	r3, #10
 8019246:	485e      	ldr	r0, [pc, #376]	; (80193c0 <_printf_i+0x244>)
 8019248:	e019      	b.n	801927e <_printf_i+0x102>
 801924a:	680e      	ldr	r6, [r1, #0]
 801924c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019250:	602b      	str	r3, [r5, #0]
 8019252:	bf18      	it	ne
 8019254:	b236      	sxthne	r6, r6
 8019256:	e7ef      	b.n	8019238 <_printf_i+0xbc>
 8019258:	682b      	ldr	r3, [r5, #0]
 801925a:	6820      	ldr	r0, [r4, #0]
 801925c:	1d19      	adds	r1, r3, #4
 801925e:	6029      	str	r1, [r5, #0]
 8019260:	0601      	lsls	r1, r0, #24
 8019262:	d501      	bpl.n	8019268 <_printf_i+0xec>
 8019264:	681e      	ldr	r6, [r3, #0]
 8019266:	e002      	b.n	801926e <_printf_i+0xf2>
 8019268:	0646      	lsls	r6, r0, #25
 801926a:	d5fb      	bpl.n	8019264 <_printf_i+0xe8>
 801926c:	881e      	ldrh	r6, [r3, #0]
 801926e:	2f6f      	cmp	r7, #111	; 0x6f
 8019270:	bf0c      	ite	eq
 8019272:	2308      	moveq	r3, #8
 8019274:	230a      	movne	r3, #10
 8019276:	4852      	ldr	r0, [pc, #328]	; (80193c0 <_printf_i+0x244>)
 8019278:	2100      	movs	r1, #0
 801927a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801927e:	6865      	ldr	r5, [r4, #4]
 8019280:	2d00      	cmp	r5, #0
 8019282:	bfa8      	it	ge
 8019284:	6821      	ldrge	r1, [r4, #0]
 8019286:	60a5      	str	r5, [r4, #8]
 8019288:	bfa4      	itt	ge
 801928a:	f021 0104 	bicge.w	r1, r1, #4
 801928e:	6021      	strge	r1, [r4, #0]
 8019290:	b90e      	cbnz	r6, 8019296 <_printf_i+0x11a>
 8019292:	2d00      	cmp	r5, #0
 8019294:	d04d      	beq.n	8019332 <_printf_i+0x1b6>
 8019296:	4615      	mov	r5, r2
 8019298:	fbb6 f1f3 	udiv	r1, r6, r3
 801929c:	fb03 6711 	mls	r7, r3, r1, r6
 80192a0:	5dc7      	ldrb	r7, [r0, r7]
 80192a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80192a6:	4637      	mov	r7, r6
 80192a8:	42bb      	cmp	r3, r7
 80192aa:	460e      	mov	r6, r1
 80192ac:	d9f4      	bls.n	8019298 <_printf_i+0x11c>
 80192ae:	2b08      	cmp	r3, #8
 80192b0:	d10b      	bne.n	80192ca <_printf_i+0x14e>
 80192b2:	6823      	ldr	r3, [r4, #0]
 80192b4:	07de      	lsls	r6, r3, #31
 80192b6:	d508      	bpl.n	80192ca <_printf_i+0x14e>
 80192b8:	6923      	ldr	r3, [r4, #16]
 80192ba:	6861      	ldr	r1, [r4, #4]
 80192bc:	4299      	cmp	r1, r3
 80192be:	bfde      	ittt	le
 80192c0:	2330      	movle	r3, #48	; 0x30
 80192c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80192c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80192ca:	1b52      	subs	r2, r2, r5
 80192cc:	6122      	str	r2, [r4, #16]
 80192ce:	464b      	mov	r3, r9
 80192d0:	4621      	mov	r1, r4
 80192d2:	4640      	mov	r0, r8
 80192d4:	f8cd a000 	str.w	sl, [sp]
 80192d8:	aa03      	add	r2, sp, #12
 80192da:	f7ff fedf 	bl	801909c <_printf_common>
 80192de:	3001      	adds	r0, #1
 80192e0:	d14c      	bne.n	801937c <_printf_i+0x200>
 80192e2:	f04f 30ff 	mov.w	r0, #4294967295
 80192e6:	b004      	add	sp, #16
 80192e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192ec:	4834      	ldr	r0, [pc, #208]	; (80193c0 <_printf_i+0x244>)
 80192ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80192f2:	6829      	ldr	r1, [r5, #0]
 80192f4:	6823      	ldr	r3, [r4, #0]
 80192f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80192fa:	6029      	str	r1, [r5, #0]
 80192fc:	061d      	lsls	r5, r3, #24
 80192fe:	d514      	bpl.n	801932a <_printf_i+0x1ae>
 8019300:	07df      	lsls	r7, r3, #31
 8019302:	bf44      	itt	mi
 8019304:	f043 0320 	orrmi.w	r3, r3, #32
 8019308:	6023      	strmi	r3, [r4, #0]
 801930a:	b91e      	cbnz	r6, 8019314 <_printf_i+0x198>
 801930c:	6823      	ldr	r3, [r4, #0]
 801930e:	f023 0320 	bic.w	r3, r3, #32
 8019312:	6023      	str	r3, [r4, #0]
 8019314:	2310      	movs	r3, #16
 8019316:	e7af      	b.n	8019278 <_printf_i+0xfc>
 8019318:	6823      	ldr	r3, [r4, #0]
 801931a:	f043 0320 	orr.w	r3, r3, #32
 801931e:	6023      	str	r3, [r4, #0]
 8019320:	2378      	movs	r3, #120	; 0x78
 8019322:	4828      	ldr	r0, [pc, #160]	; (80193c4 <_printf_i+0x248>)
 8019324:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019328:	e7e3      	b.n	80192f2 <_printf_i+0x176>
 801932a:	0659      	lsls	r1, r3, #25
 801932c:	bf48      	it	mi
 801932e:	b2b6      	uxthmi	r6, r6
 8019330:	e7e6      	b.n	8019300 <_printf_i+0x184>
 8019332:	4615      	mov	r5, r2
 8019334:	e7bb      	b.n	80192ae <_printf_i+0x132>
 8019336:	682b      	ldr	r3, [r5, #0]
 8019338:	6826      	ldr	r6, [r4, #0]
 801933a:	1d18      	adds	r0, r3, #4
 801933c:	6961      	ldr	r1, [r4, #20]
 801933e:	6028      	str	r0, [r5, #0]
 8019340:	0635      	lsls	r5, r6, #24
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	d501      	bpl.n	801934a <_printf_i+0x1ce>
 8019346:	6019      	str	r1, [r3, #0]
 8019348:	e002      	b.n	8019350 <_printf_i+0x1d4>
 801934a:	0670      	lsls	r0, r6, #25
 801934c:	d5fb      	bpl.n	8019346 <_printf_i+0x1ca>
 801934e:	8019      	strh	r1, [r3, #0]
 8019350:	2300      	movs	r3, #0
 8019352:	4615      	mov	r5, r2
 8019354:	6123      	str	r3, [r4, #16]
 8019356:	e7ba      	b.n	80192ce <_printf_i+0x152>
 8019358:	682b      	ldr	r3, [r5, #0]
 801935a:	2100      	movs	r1, #0
 801935c:	1d1a      	adds	r2, r3, #4
 801935e:	602a      	str	r2, [r5, #0]
 8019360:	681d      	ldr	r5, [r3, #0]
 8019362:	6862      	ldr	r2, [r4, #4]
 8019364:	4628      	mov	r0, r5
 8019366:	f000 f82f 	bl	80193c8 <memchr>
 801936a:	b108      	cbz	r0, 8019370 <_printf_i+0x1f4>
 801936c:	1b40      	subs	r0, r0, r5
 801936e:	6060      	str	r0, [r4, #4]
 8019370:	6863      	ldr	r3, [r4, #4]
 8019372:	6123      	str	r3, [r4, #16]
 8019374:	2300      	movs	r3, #0
 8019376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801937a:	e7a8      	b.n	80192ce <_printf_i+0x152>
 801937c:	462a      	mov	r2, r5
 801937e:	4649      	mov	r1, r9
 8019380:	4640      	mov	r0, r8
 8019382:	6923      	ldr	r3, [r4, #16]
 8019384:	47d0      	blx	sl
 8019386:	3001      	adds	r0, #1
 8019388:	d0ab      	beq.n	80192e2 <_printf_i+0x166>
 801938a:	6823      	ldr	r3, [r4, #0]
 801938c:	079b      	lsls	r3, r3, #30
 801938e:	d413      	bmi.n	80193b8 <_printf_i+0x23c>
 8019390:	68e0      	ldr	r0, [r4, #12]
 8019392:	9b03      	ldr	r3, [sp, #12]
 8019394:	4298      	cmp	r0, r3
 8019396:	bfb8      	it	lt
 8019398:	4618      	movlt	r0, r3
 801939a:	e7a4      	b.n	80192e6 <_printf_i+0x16a>
 801939c:	2301      	movs	r3, #1
 801939e:	4632      	mov	r2, r6
 80193a0:	4649      	mov	r1, r9
 80193a2:	4640      	mov	r0, r8
 80193a4:	47d0      	blx	sl
 80193a6:	3001      	adds	r0, #1
 80193a8:	d09b      	beq.n	80192e2 <_printf_i+0x166>
 80193aa:	3501      	adds	r5, #1
 80193ac:	68e3      	ldr	r3, [r4, #12]
 80193ae:	9903      	ldr	r1, [sp, #12]
 80193b0:	1a5b      	subs	r3, r3, r1
 80193b2:	42ab      	cmp	r3, r5
 80193b4:	dcf2      	bgt.n	801939c <_printf_i+0x220>
 80193b6:	e7eb      	b.n	8019390 <_printf_i+0x214>
 80193b8:	2500      	movs	r5, #0
 80193ba:	f104 0619 	add.w	r6, r4, #25
 80193be:	e7f5      	b.n	80193ac <_printf_i+0x230>
 80193c0:	0801b04f 	.word	0x0801b04f
 80193c4:	0801b060 	.word	0x0801b060

080193c8 <memchr>:
 80193c8:	4603      	mov	r3, r0
 80193ca:	b510      	push	{r4, lr}
 80193cc:	b2c9      	uxtb	r1, r1
 80193ce:	4402      	add	r2, r0
 80193d0:	4293      	cmp	r3, r2
 80193d2:	4618      	mov	r0, r3
 80193d4:	d101      	bne.n	80193da <memchr+0x12>
 80193d6:	2000      	movs	r0, #0
 80193d8:	e003      	b.n	80193e2 <memchr+0x1a>
 80193da:	7804      	ldrb	r4, [r0, #0]
 80193dc:	3301      	adds	r3, #1
 80193de:	428c      	cmp	r4, r1
 80193e0:	d1f6      	bne.n	80193d0 <memchr+0x8>
 80193e2:	bd10      	pop	{r4, pc}

080193e4 <_free_r>:
 80193e4:	b538      	push	{r3, r4, r5, lr}
 80193e6:	4605      	mov	r5, r0
 80193e8:	2900      	cmp	r1, #0
 80193ea:	d040      	beq.n	801946e <_free_r+0x8a>
 80193ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80193f0:	1f0c      	subs	r4, r1, #4
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	bfb8      	it	lt
 80193f6:	18e4      	addlt	r4, r4, r3
 80193f8:	f000 f910 	bl	801961c <__malloc_lock>
 80193fc:	4a1c      	ldr	r2, [pc, #112]	; (8019470 <_free_r+0x8c>)
 80193fe:	6813      	ldr	r3, [r2, #0]
 8019400:	b933      	cbnz	r3, 8019410 <_free_r+0x2c>
 8019402:	6063      	str	r3, [r4, #4]
 8019404:	6014      	str	r4, [r2, #0]
 8019406:	4628      	mov	r0, r5
 8019408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801940c:	f000 b90c 	b.w	8019628 <__malloc_unlock>
 8019410:	42a3      	cmp	r3, r4
 8019412:	d908      	bls.n	8019426 <_free_r+0x42>
 8019414:	6820      	ldr	r0, [r4, #0]
 8019416:	1821      	adds	r1, r4, r0
 8019418:	428b      	cmp	r3, r1
 801941a:	bf01      	itttt	eq
 801941c:	6819      	ldreq	r1, [r3, #0]
 801941e:	685b      	ldreq	r3, [r3, #4]
 8019420:	1809      	addeq	r1, r1, r0
 8019422:	6021      	streq	r1, [r4, #0]
 8019424:	e7ed      	b.n	8019402 <_free_r+0x1e>
 8019426:	461a      	mov	r2, r3
 8019428:	685b      	ldr	r3, [r3, #4]
 801942a:	b10b      	cbz	r3, 8019430 <_free_r+0x4c>
 801942c:	42a3      	cmp	r3, r4
 801942e:	d9fa      	bls.n	8019426 <_free_r+0x42>
 8019430:	6811      	ldr	r1, [r2, #0]
 8019432:	1850      	adds	r0, r2, r1
 8019434:	42a0      	cmp	r0, r4
 8019436:	d10b      	bne.n	8019450 <_free_r+0x6c>
 8019438:	6820      	ldr	r0, [r4, #0]
 801943a:	4401      	add	r1, r0
 801943c:	1850      	adds	r0, r2, r1
 801943e:	4283      	cmp	r3, r0
 8019440:	6011      	str	r1, [r2, #0]
 8019442:	d1e0      	bne.n	8019406 <_free_r+0x22>
 8019444:	6818      	ldr	r0, [r3, #0]
 8019446:	685b      	ldr	r3, [r3, #4]
 8019448:	4401      	add	r1, r0
 801944a:	6011      	str	r1, [r2, #0]
 801944c:	6053      	str	r3, [r2, #4]
 801944e:	e7da      	b.n	8019406 <_free_r+0x22>
 8019450:	d902      	bls.n	8019458 <_free_r+0x74>
 8019452:	230c      	movs	r3, #12
 8019454:	602b      	str	r3, [r5, #0]
 8019456:	e7d6      	b.n	8019406 <_free_r+0x22>
 8019458:	6820      	ldr	r0, [r4, #0]
 801945a:	1821      	adds	r1, r4, r0
 801945c:	428b      	cmp	r3, r1
 801945e:	bf01      	itttt	eq
 8019460:	6819      	ldreq	r1, [r3, #0]
 8019462:	685b      	ldreq	r3, [r3, #4]
 8019464:	1809      	addeq	r1, r1, r0
 8019466:	6021      	streq	r1, [r4, #0]
 8019468:	6063      	str	r3, [r4, #4]
 801946a:	6054      	str	r4, [r2, #4]
 801946c:	e7cb      	b.n	8019406 <_free_r+0x22>
 801946e:	bd38      	pop	{r3, r4, r5, pc}
 8019470:	20003d28 	.word	0x20003d28

08019474 <sbrk_aligned>:
 8019474:	b570      	push	{r4, r5, r6, lr}
 8019476:	4e0e      	ldr	r6, [pc, #56]	; (80194b0 <sbrk_aligned+0x3c>)
 8019478:	460c      	mov	r4, r1
 801947a:	6831      	ldr	r1, [r6, #0]
 801947c:	4605      	mov	r5, r0
 801947e:	b911      	cbnz	r1, 8019486 <sbrk_aligned+0x12>
 8019480:	f000 f8bc 	bl	80195fc <_sbrk_r>
 8019484:	6030      	str	r0, [r6, #0]
 8019486:	4621      	mov	r1, r4
 8019488:	4628      	mov	r0, r5
 801948a:	f000 f8b7 	bl	80195fc <_sbrk_r>
 801948e:	1c43      	adds	r3, r0, #1
 8019490:	d00a      	beq.n	80194a8 <sbrk_aligned+0x34>
 8019492:	1cc4      	adds	r4, r0, #3
 8019494:	f024 0403 	bic.w	r4, r4, #3
 8019498:	42a0      	cmp	r0, r4
 801949a:	d007      	beq.n	80194ac <sbrk_aligned+0x38>
 801949c:	1a21      	subs	r1, r4, r0
 801949e:	4628      	mov	r0, r5
 80194a0:	f000 f8ac 	bl	80195fc <_sbrk_r>
 80194a4:	3001      	adds	r0, #1
 80194a6:	d101      	bne.n	80194ac <sbrk_aligned+0x38>
 80194a8:	f04f 34ff 	mov.w	r4, #4294967295
 80194ac:	4620      	mov	r0, r4
 80194ae:	bd70      	pop	{r4, r5, r6, pc}
 80194b0:	20003d2c 	.word	0x20003d2c

080194b4 <_malloc_r>:
 80194b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194b8:	1ccd      	adds	r5, r1, #3
 80194ba:	f025 0503 	bic.w	r5, r5, #3
 80194be:	3508      	adds	r5, #8
 80194c0:	2d0c      	cmp	r5, #12
 80194c2:	bf38      	it	cc
 80194c4:	250c      	movcc	r5, #12
 80194c6:	2d00      	cmp	r5, #0
 80194c8:	4607      	mov	r7, r0
 80194ca:	db01      	blt.n	80194d0 <_malloc_r+0x1c>
 80194cc:	42a9      	cmp	r1, r5
 80194ce:	d905      	bls.n	80194dc <_malloc_r+0x28>
 80194d0:	230c      	movs	r3, #12
 80194d2:	2600      	movs	r6, #0
 80194d4:	603b      	str	r3, [r7, #0]
 80194d6:	4630      	mov	r0, r6
 80194d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194dc:	4e2e      	ldr	r6, [pc, #184]	; (8019598 <_malloc_r+0xe4>)
 80194de:	f000 f89d 	bl	801961c <__malloc_lock>
 80194e2:	6833      	ldr	r3, [r6, #0]
 80194e4:	461c      	mov	r4, r3
 80194e6:	bb34      	cbnz	r4, 8019536 <_malloc_r+0x82>
 80194e8:	4629      	mov	r1, r5
 80194ea:	4638      	mov	r0, r7
 80194ec:	f7ff ffc2 	bl	8019474 <sbrk_aligned>
 80194f0:	1c43      	adds	r3, r0, #1
 80194f2:	4604      	mov	r4, r0
 80194f4:	d14d      	bne.n	8019592 <_malloc_r+0xde>
 80194f6:	6834      	ldr	r4, [r6, #0]
 80194f8:	4626      	mov	r6, r4
 80194fa:	2e00      	cmp	r6, #0
 80194fc:	d140      	bne.n	8019580 <_malloc_r+0xcc>
 80194fe:	6823      	ldr	r3, [r4, #0]
 8019500:	4631      	mov	r1, r6
 8019502:	4638      	mov	r0, r7
 8019504:	eb04 0803 	add.w	r8, r4, r3
 8019508:	f000 f878 	bl	80195fc <_sbrk_r>
 801950c:	4580      	cmp	r8, r0
 801950e:	d13a      	bne.n	8019586 <_malloc_r+0xd2>
 8019510:	6821      	ldr	r1, [r4, #0]
 8019512:	3503      	adds	r5, #3
 8019514:	1a6d      	subs	r5, r5, r1
 8019516:	f025 0503 	bic.w	r5, r5, #3
 801951a:	3508      	adds	r5, #8
 801951c:	2d0c      	cmp	r5, #12
 801951e:	bf38      	it	cc
 8019520:	250c      	movcc	r5, #12
 8019522:	4638      	mov	r0, r7
 8019524:	4629      	mov	r1, r5
 8019526:	f7ff ffa5 	bl	8019474 <sbrk_aligned>
 801952a:	3001      	adds	r0, #1
 801952c:	d02b      	beq.n	8019586 <_malloc_r+0xd2>
 801952e:	6823      	ldr	r3, [r4, #0]
 8019530:	442b      	add	r3, r5
 8019532:	6023      	str	r3, [r4, #0]
 8019534:	e00e      	b.n	8019554 <_malloc_r+0xa0>
 8019536:	6822      	ldr	r2, [r4, #0]
 8019538:	1b52      	subs	r2, r2, r5
 801953a:	d41e      	bmi.n	801957a <_malloc_r+0xc6>
 801953c:	2a0b      	cmp	r2, #11
 801953e:	d916      	bls.n	801956e <_malloc_r+0xba>
 8019540:	1961      	adds	r1, r4, r5
 8019542:	42a3      	cmp	r3, r4
 8019544:	6025      	str	r5, [r4, #0]
 8019546:	bf18      	it	ne
 8019548:	6059      	strne	r1, [r3, #4]
 801954a:	6863      	ldr	r3, [r4, #4]
 801954c:	bf08      	it	eq
 801954e:	6031      	streq	r1, [r6, #0]
 8019550:	5162      	str	r2, [r4, r5]
 8019552:	604b      	str	r3, [r1, #4]
 8019554:	4638      	mov	r0, r7
 8019556:	f104 060b 	add.w	r6, r4, #11
 801955a:	f000 f865 	bl	8019628 <__malloc_unlock>
 801955e:	f026 0607 	bic.w	r6, r6, #7
 8019562:	1d23      	adds	r3, r4, #4
 8019564:	1af2      	subs	r2, r6, r3
 8019566:	d0b6      	beq.n	80194d6 <_malloc_r+0x22>
 8019568:	1b9b      	subs	r3, r3, r6
 801956a:	50a3      	str	r3, [r4, r2]
 801956c:	e7b3      	b.n	80194d6 <_malloc_r+0x22>
 801956e:	6862      	ldr	r2, [r4, #4]
 8019570:	42a3      	cmp	r3, r4
 8019572:	bf0c      	ite	eq
 8019574:	6032      	streq	r2, [r6, #0]
 8019576:	605a      	strne	r2, [r3, #4]
 8019578:	e7ec      	b.n	8019554 <_malloc_r+0xa0>
 801957a:	4623      	mov	r3, r4
 801957c:	6864      	ldr	r4, [r4, #4]
 801957e:	e7b2      	b.n	80194e6 <_malloc_r+0x32>
 8019580:	4634      	mov	r4, r6
 8019582:	6876      	ldr	r6, [r6, #4]
 8019584:	e7b9      	b.n	80194fa <_malloc_r+0x46>
 8019586:	230c      	movs	r3, #12
 8019588:	4638      	mov	r0, r7
 801958a:	603b      	str	r3, [r7, #0]
 801958c:	f000 f84c 	bl	8019628 <__malloc_unlock>
 8019590:	e7a1      	b.n	80194d6 <_malloc_r+0x22>
 8019592:	6025      	str	r5, [r4, #0]
 8019594:	e7de      	b.n	8019554 <_malloc_r+0xa0>
 8019596:	bf00      	nop
 8019598:	20003d28 	.word	0x20003d28

0801959c <_realloc_r>:
 801959c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195a0:	4680      	mov	r8, r0
 80195a2:	4614      	mov	r4, r2
 80195a4:	460e      	mov	r6, r1
 80195a6:	b921      	cbnz	r1, 80195b2 <_realloc_r+0x16>
 80195a8:	4611      	mov	r1, r2
 80195aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80195ae:	f7ff bf81 	b.w	80194b4 <_malloc_r>
 80195b2:	b92a      	cbnz	r2, 80195c0 <_realloc_r+0x24>
 80195b4:	f7ff ff16 	bl	80193e4 <_free_r>
 80195b8:	4625      	mov	r5, r4
 80195ba:	4628      	mov	r0, r5
 80195bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195c0:	f000 f838 	bl	8019634 <_malloc_usable_size_r>
 80195c4:	4284      	cmp	r4, r0
 80195c6:	4607      	mov	r7, r0
 80195c8:	d802      	bhi.n	80195d0 <_realloc_r+0x34>
 80195ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80195ce:	d812      	bhi.n	80195f6 <_realloc_r+0x5a>
 80195d0:	4621      	mov	r1, r4
 80195d2:	4640      	mov	r0, r8
 80195d4:	f7ff ff6e 	bl	80194b4 <_malloc_r>
 80195d8:	4605      	mov	r5, r0
 80195da:	2800      	cmp	r0, #0
 80195dc:	d0ed      	beq.n	80195ba <_realloc_r+0x1e>
 80195de:	42bc      	cmp	r4, r7
 80195e0:	4622      	mov	r2, r4
 80195e2:	4631      	mov	r1, r6
 80195e4:	bf28      	it	cs
 80195e6:	463a      	movcs	r2, r7
 80195e8:	f7ff fb92 	bl	8018d10 <memcpy>
 80195ec:	4631      	mov	r1, r6
 80195ee:	4640      	mov	r0, r8
 80195f0:	f7ff fef8 	bl	80193e4 <_free_r>
 80195f4:	e7e1      	b.n	80195ba <_realloc_r+0x1e>
 80195f6:	4635      	mov	r5, r6
 80195f8:	e7df      	b.n	80195ba <_realloc_r+0x1e>
	...

080195fc <_sbrk_r>:
 80195fc:	b538      	push	{r3, r4, r5, lr}
 80195fe:	2300      	movs	r3, #0
 8019600:	4d05      	ldr	r5, [pc, #20]	; (8019618 <_sbrk_r+0x1c>)
 8019602:	4604      	mov	r4, r0
 8019604:	4608      	mov	r0, r1
 8019606:	602b      	str	r3, [r5, #0]
 8019608:	f7e9 fc4e 	bl	8002ea8 <_sbrk>
 801960c:	1c43      	adds	r3, r0, #1
 801960e:	d102      	bne.n	8019616 <_sbrk_r+0x1a>
 8019610:	682b      	ldr	r3, [r5, #0]
 8019612:	b103      	cbz	r3, 8019616 <_sbrk_r+0x1a>
 8019614:	6023      	str	r3, [r4, #0]
 8019616:	bd38      	pop	{r3, r4, r5, pc}
 8019618:	20003d30 	.word	0x20003d30

0801961c <__malloc_lock>:
 801961c:	4801      	ldr	r0, [pc, #4]	; (8019624 <__malloc_lock+0x8>)
 801961e:	f000 b811 	b.w	8019644 <__retarget_lock_acquire_recursive>
 8019622:	bf00      	nop
 8019624:	20003d34 	.word	0x20003d34

08019628 <__malloc_unlock>:
 8019628:	4801      	ldr	r0, [pc, #4]	; (8019630 <__malloc_unlock+0x8>)
 801962a:	f000 b80c 	b.w	8019646 <__retarget_lock_release_recursive>
 801962e:	bf00      	nop
 8019630:	20003d34 	.word	0x20003d34

08019634 <_malloc_usable_size_r>:
 8019634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019638:	1f18      	subs	r0, r3, #4
 801963a:	2b00      	cmp	r3, #0
 801963c:	bfbc      	itt	lt
 801963e:	580b      	ldrlt	r3, [r1, r0]
 8019640:	18c0      	addlt	r0, r0, r3
 8019642:	4770      	bx	lr

08019644 <__retarget_lock_acquire_recursive>:
 8019644:	4770      	bx	lr

08019646 <__retarget_lock_release_recursive>:
 8019646:	4770      	bx	lr

08019648 <_init>:
 8019648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801964a:	bf00      	nop
 801964c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801964e:	bc08      	pop	{r3}
 8019650:	469e      	mov	lr, r3
 8019652:	4770      	bx	lr

08019654 <_fini>:
 8019654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019656:	bf00      	nop
 8019658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801965a:	bc08      	pop	{r3}
 801965c:	469e      	mov	lr, r3
 801965e:	4770      	bx	lr
